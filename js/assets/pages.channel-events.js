(window.webpackJsonp = window.webpackJsonp || []).push([
    [47, 116], {
        "+LJB": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            });
            var i = n("0Log"),
                a = n("/aPz"),
                r = n("0Lz3");

            function o(e, t, n, o) {
                return {
                    topic: n ? Object(a.c)(n) : "",
                    type: i.PubsubMessageType.BitsLeaderboardEvent,
                    mutator: function(e, t) {
                        if (!t || !n) return t;
                        var i = e.top.map(function(e) {
                            return Object(r.b)(e, n.id)
                        });
                        if (t.user) {
                            if (t.user.tournament && t.user.tournament.teamLeaderboard && (t.user.tournament.teamLeaderboard.items.edges = i), t.user.tournament && t.user.tournament.globalLeaderboard && (t.user.tournament.globalLeaderboard.items.edges = i, o && e.entry_context && e.entry_context.entry.entry_key === o && t.user.tournament.self && t.user.tournament.self.globalLeaderboardItem)) {
                                var a = Object(r.b)(e.entry_context.entry, n.id);
                                t.user.tournament.self.globalLeaderboardItem = a.node
                            }
                            if (t.user.cheer && t.user.cheer.leaderboard && (t.user.cheer.leaderboard.items.edges = i, o && e.entry_context && e.entry_context.entry.entry_key === o && t.user.self && t.user.self.bitsLeaderboardItem)) {
                                var s = Object(r.b)(e.entry_context.entry, n.id);
                                t.user.self.bitsLeaderboardItem = s.node
                            }
                        }
                        return t
                    },
                    skip: !n,
                    query: e,
                    variables: {
                        channelID: t
                    }
                }
            }
        },
        "+kC+": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChatLine_SubsOnlyUpsell_UserSubscriptionProducts"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "id"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "subscriptionProducts"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "url"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 121
                }
            };
            n.loc.source = {
                body: "query ChatLine_SubsOnlyUpsell_UserSubscriptionProducts($id: ID!) {\nuser(id: $id) {\nid\nsubscriptionProducts {\nid\nurl\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "+pBb": function(e, t, n) {
            "use strict";
            n.d(t, "d", function() {
                return i
            }), n.d(t, "e", function() {
                return a
            }), n.d(t, "i", function() {
                return r
            }), n.d(t, "j", function() {
                return o
            }), n.d(t, "q", function() {
                return s
            }), n.d(t, "c", function() {
                return l
            }), n.d(t, "b", function() {
                return c
            }), n.d(t, "g", function() {
                return d
            }), n.d(t, "h", function() {
                return u
            }), n.d(t, "f", function() {
                return m
            }), n.d(t, "l", function() {
                return p
            }), n.d(t, "k", function() {
                return h
            }), n.d(t, "n", function() {
                return g
            }), n.d(t, "m", function() {
                return f
            }), n.d(t, "r", function() {
                return b
            }), n.d(t, "t", function() {
                return v
            }), n.d(t, "s", function() {
                return k
            }), n.d(t, "w", function() {
                return C
            }), n.d(t, "v", function() {
                return y
            }), n.d(t, "a", function() {
                return E
            }), n.d(t, "o", function() {
                return S
            }), n.d(t, "p", function() {
                return N
            }), n.d(t, "u", function() {
                return _
            }), n.d(t, "J", function() {
                return O
            }), n.d(t, "E", function() {
                return w
            }), n.d(t, "K", function() {
                return M
            }), n.d(t, "F", function() {
                return D
            }), n.d(t, "O", function() {
                return I
            }), n.d(t, "L", function() {
                return T
            }), n.d(t, "H", function() {
                return R
            }), n.d(t, "C", function() {
                return j
            }), n.d(t, "I", function() {
                return A
            }), n.d(t, "D", function() {
                return U
            }), n.d(t, "G", function() {
                return L
            }), n.d(t, "B", function() {
                return B
            }), n.d(t, "y", function() {
                return x
            }), n.d(t, "A", function() {
                return F
            }), n.d(t, "M", function() {
                return P
            }), n.d(t, "z", function() {
                return H
            }), n.d(t, "P", function() {
                return W
            }), n.d(t, "S", function() {
                return V
            }), n.d(t, "x", function() {
                return G
            }), n.d(t, "N", function() {
                return X
            }), n.d(t, "R", function() {
                return z
            }), n.d(t, "Q", function() {
                return q
            });
            var i = "chat.CHAT_HIDDEN",
                a = "chat.CHAT_SHOWN",
                r = "chat.EMOTE_SETS_UPDATED",
                o = "chat.FOLLOWER_MODE_DURATION_PREFERENCE_CHANGED",
                s = "chat.ROOM_STATE_UPDATED",
                l = "chat.AUTOMOD_ACTIONS_ENABLED",
                c = "chat.AUTOMOD_ACTIONS_DISABLED",
                d = "chat.EMOTE_PICKER_CLOSED",
                u = "chat.EMOTE_PICKER_OPENED",
                m = "chat.CLOSE_CHAT_RULES",
                p = "chat.MODERATION_ACTIONS_ENABLED",
                h = "chat.MODERATION_ACTIONS_DISABLED",
                g = "chat.MOD_ICONS_ENABLED",
                f = "chat.MOD_ICONS_DISABLED",
                b = "chat.SHOW_CHAT_RULES",
                v = "chat.TIMESTAMPS_ENABLED",
                k = "chat.TIMESTAMPS_DISABLED",
                C = "chat.USERNAME_CONTRAST_ENABLED",
                y = "chat.USERNAME_CONTRAST_DISABLED",
                E = "chat.ADD_COMMAND",
                S = "chat.REMOVE_COMMAND",
                N = "chat.RENDER_SENT_CHAT_MESSAGE",
                _ = "chat.UNHIDE_IGNORED_COMMAND";

            function O() {
                return {
                    type: v
                }
            }

            function w() {
                return {
                    type: k
                }
            }

            function M() {
                return {
                    type: C
                }
            }

            function D() {
                return {
                    type: y
                }
            }

            function I() {
                return {
                    type: a
                }
            }

            function T() {
                return {
                    type: i
                }
            }

            function R() {
                return {
                    type: l
                }
            }

            function j() {
                return {
                    type: c
                }
            }

            function A() {
                return {
                    type: p
                }
            }

            function U() {
                return {
                    type: h
                }
            }

            function L() {
                return {
                    type: g
                }
            }

            function B() {
                return {
                    type: f
                }
            }

            function x(e, t) {
                return {
                    type: o,
                    channelLogin: e,
                    duration: t
                }
            }

            function F() {
                return {
                    type: d
                }
            }

            function P() {
                return {
                    type: u
                }
            }

            function H() {
                return {
                    type: m
                }
            }

            function W() {
                return {
                    type: b
                }
            }

            function V(e) {
                return {
                    type: s,
                    roomState: e
                }
            }

            function G(e, t) {
                return {
                    type: E,
                    command: e.toLowerCase(),
                    handler: t
                }
            }

            function X(e, t) {
                return {
                    type: S,
                    command: e.toLowerCase(),
                    handler: t
                }
            }

            function z(e) {
                return {
                    type: N,
                    customEvent: e
                }
            }

            function q(e) {
                return {
                    type: _,
                    userID: e
                }
            }
        },
        "/HY+": function(e, t, n) {
            "use strict";
            var i = n("dAHa"),
                a = n("mrSG"),
                r = n("q1tI"),
                o = n("/MKj"),
                s = n("fvjX"),
                l = n("cZKs"),
                c = n("aCAx"),
                d = n("GnwI"),
                u = n("Ue10"),
                m = (n("Oy4H"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleClose = function(e, n) {
                            t.props.closeModal(), t.props.onClose && t.props.onClose(e, n)
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        return r.createElement(u.Eb, {
                            className: "reporting-modal__container",
                            background: u.r.Base,
                            padding: {
                                x: 2,
                                y: 3
                            }
                        }, r.createElement(i.b, {
                            onClose: this.handleClose,
                            reportContext: this.props.reportContext,
                            title: this.props.title,
                            defaultDescription: this.props.defaultDescription
                        }), r.createElement(l.a, null))
                    }, t
                }(r.Component));
            var p = Object(s.compose)(Object(d.b)("ReportUserModal"), Object(o.connect)(null, function(e) {
                return Object(s.bindActionCreators)({
                    closeModal: c.c
                }, e)
            }))(m);
            n.d(t, !1, function() {}), n.d(t, !1, function() {
                return i.c
            }), n.d(t, !1, function() {
                return i.a
            }), n.d(t, !1, function() {}), n.d(t, !1, function() {
                return i.b
            }), n.d(t, !1, function() {
                return m
            }), n.d(t, "a", function() {
                return p
            })
        },
        "/Kya": function(e, t, n) {},
        "/gva": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "CurrentUserBannedStatus"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "channel"
                            },
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "banStatus"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isPermanent"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 135
                }
            };
            n.loc.source = {
                body: "query CurrentUserBannedStatus($channelLogin: String!) {\nchannel: user(login: $channelLogin) {\nid\nself {\nbanStatus {\nisPermanent\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "/i69": function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("q1tI"),
                r = n("oJmH"),
                o = n("/7QA"),
                s = n("gcd7"),
                l = n("QVaV"),
                c = n("iyGE"),
                d = n("a2UF"),
                u = n("vSeP"),
                m = n("WytW"),
                p = n("AREq"),
                h = n("Av0x"),
                g = n("Ue10"),
                f = 600,
                b = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.banUser = function(e) {
                            var n = Object(m.k)("/ban " + e);
                            if (n) {
                                var i = t.userLogin(n.banTarget),
                                    a = n.reason || void 0;
                                if (i) {
                                    var r = Object(o.d)("Unable to ban user.", "BanCommandHandler");
                                    return {
                                        deferred: t.props.banUserMutation(i, void 0, a).then(function(e) {
                                            var n = e.banUserFromChatRoom;
                                            return n ? n.error ? {
                                                notice: Object(p.a)(i, n.error.code)
                                            } : t.props.suppressLocalSuccessMessage ? {} : {
                                                notice: Object(o.d)("{userLogin} is now banned from this channel.", {
                                                    userLogin: i
                                                }, "BanCommandHandler")
                                            } : {
                                                notice: r
                                            }
                                        }).catch(function() {
                                            return {
                                                notice: r
                                            }
                                        })
                                    }
                                }
                                return {
                                    deferred: Promise.resolve({
                                        notice: Object(o.d)("Please specify a user to ban.", "BanCommandHandler")
                                    })
                                }
                            }
                            return {
                                deferred: Promise.resolve({
                                    notice: Object(o.d)("Usage: /ban [login]", "BanCommandHandler")
                                })
                            }
                        }, t.unbanUser = function(e) {
                            if (e && 0 !== e.length) {
                                var n = t.userLogin(e),
                                    i = Object(o.d)("Unable to unban user.", "BanCommandHandler");
                                return {
                                    deferred: t.props.unbanUserMutation(n).then(function(e) {
                                        var a = e.unbanUserFromChatRoom;
                                        return a ? a.error ? {
                                            notice: Object(h.a)(n, a.error.code)
                                        } : t.props.suppressLocalSuccessMessage ? {} : {
                                            notice: Object(o.d)("{bannedUserLogin} is no longer banned from this channel.", {
                                                bannedUserLogin: n
                                            }, "BanCommandHandler")
                                        } : {
                                            notice: i
                                        }
                                    }).catch(function() {
                                        return {
                                            notice: i
                                        }
                                    })
                                }
                            }
                            return {
                                deferred: Promise.resolve({
                                    notice: Object(o.d)("Please specify a user to unban.", "BanCommandHandler")
                                })
                            }
                        }, t.timeoutUser = function(e) {
                            var n = Object(m.o)("/timeout " + e);
                            if (n) {
                                var i = t.userLogin(n.banTarget),
                                    a = n.duration || f,
                                    r = n.reason || void 0;
                                if (i) {
                                    var s = Object(o.d)("Unable to timeout user.", "BanCommandHandler");
                                    return {
                                        deferred: t.props.banUserMutation(i, a, r).then(function(e) {
                                            var n = e.banUserFromChatRoom;
                                            return n ? n.error ? {
                                                notice: Object(p.a)(i, n.error.code, !0)
                                            } : t.props.suppressLocalSuccessMessage ? {} : {
                                                notice: Object(o.d)("{userLogin} has been timed out for {duration} seconds.", {
                                                    userLogin: i,
                                                    duration: a
                                                }, "BanCommandHandler")
                                            } : {
                                                notice: s
                                            }
                                        }).catch(function() {
                                            return {
                                                notice: s
                                            }
                                        })
                                    }
                                }
                                return {
                                    deferred: Promise.resolve({
                                        notice: Object(o.d)("Please specify a user to timeout.", "BanCommandHandler")
                                    })
                                }
                            }
                            return {
                                deferred: Promise.resolve({
                                    notice: Object(o.d)("Usage: /timeout [login] [duration in seconds]", "BanCommandHandler")
                                })
                            }
                        }, t.untimeoutUser = function(e) {
                            if (e) {
                                var n = t.userLogin(e),
                                    i = Object(o.d)("Unable to untimeout user.", "BanCommandHandler");
                                return {
                                    deferred: t.props.unbanUserMutation(n).then(function(e) {
                                        var a = e.unbanUserFromChatRoom;
                                        return a ? a.error ? {
                                            notice: Object(h.a)(n, a.error.code, !0)
                                        } : t.props.suppressLocalSuccessMessage ? {} : {
                                            notice: Object(o.d)("{login} is no longer timed out in this channel.", {
                                                login: n
                                            }, "BanCommandHandler")
                                        } : {
                                            notice: i
                                        }
                                    }).catch(function() {
                                        return {
                                            notice: i
                                        }
                                    })
                                }
                            }
                            return {
                                deferred: Promise.resolve({
                                    notice: Object(o.d)("Please specify a user to untimeout.", "BanCommandHandler")
                                })
                            }
                        }, t.userLogin = function(e) {
                            return "@" === e[0] && (e = e.substr(1)), Object(l.b)(e) ? e : t.props.activeChattersAPI ? t.props.activeChattersAPI.getActiveChatterLoginFromDisplayName(e) || e : t.props.displayNameToLogin && t.props.displayNameToLogin(e) || e
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return a.createElement(g.Xa, {
                            display: g.X.Hide
                        }, a.createElement(s.a, {
                            command: "ban",
                            handler: this.banUser
                        }), a.createElement(s.a, {
                            command: "unban",
                            handler: this.unbanUser
                        }), a.createElement(s.a, {
                            command: "timeout",
                            handler: this.timeoutUser
                        }), a.createElement(s.a, {
                            command: "untimeout",
                            handler: this.untimeoutUser
                        }))
                    }, t
                }(a.Component),
                v = function(e) {
                    return {
                        channelID: e.channelID
                    }
                },
                k = Object(r.compose)(u.a, Object(d.a)(v), Object(c.a)(v))(b);
            n.d(t, "a", function() {
                return k
            })
        },
        "/nm5": function(e, t, n) {},
        "04j6": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Core_Services_Spade_ChatEvent_User"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "id"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "isPartner"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "game"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "name"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 116
                }
            };
            n.loc.source = {
                body: "query Core_Services_Spade_ChatEvent_User($id: ID!) {\nuser(id: $id) {\nid\nisPartner\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "0FG4": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "c", function() {
                return s
            }), n.d(t, "b", function() {
                return c
            });
            var i, a = n("RcPG"),
                r = n("a1OF");
            ! function(e) {
                e[e.Position = 0] = "Position", e[e.Token = 1] = "Token"
            }(i || (i = {}));
            var o = "0";

            function s(e, t, n) {
                var o = n.type === i.Position ? t : e,
                    s = n.map[o];
                if (s) {
                    var l = function(e, t) {
                        return {
                            images: {
                                sources: {
                                    "1x": Object(r.d)(t, 1),
                                    "2x": Object(r.d)(t, 2),
                                    "4x": Object(r.d)(t, 4)
                                },
                                themed: !1
                            },
                            alt: e
                        }
                    }(e, s.id);
                    return {
                        type: a.a.Emote,
                        content: l
                    }
                }
                return null
            }
            var l = {
                "\\:\\&gt\\;": [":>"],
                "\\&gt\\;\\(": [">("],
                "\\&lt\\;\\]": ["<]"],
                "\\&lt\\;3": ["<3"],
                ":-?(?:7|L)": [":-7", ":-L", ":7", ":L"],
                "[oO](_|\\.)[oO]": ["o_o", "O_O", "o_O", "O_o", "o.o", "O.O", "o.O", "O.o"],
                "\\;-?(p|P)": [";-p", ";-P", ";p", ";P"],
                "\\;-?\\)": [";-)", ";)"],
                "\\:-?(o|O)": [":-o", ":-O", ":o", ":O"],
                "\\:-?(p|P)": [":-p", ":-P", ":p", ":P"],
                "\\:-?(S|s)": [":-S", ":-s", ":s", ":S"],
                "\\:-?[\\\\/]": [":-/", ":-\\", ":/", ":\\"],
                "\\:-?[z|Z|\\|]": [":-|", ":-Z", ":-z", ":|", ":Z", ":z"],
                "\\:-?\\(": [":-(", ":("],
                "\\:-?\\)": [":-)", ":)"],
                "\\:-?D": [":-D", ":D"],
                "#-?[\\\\/]": ["#-/", "#-\\", "#/", "#\\"],
                "B-?\\)": ["B-)", "B)"],
                "R-?\\)": ["R-)", "R)"]
            };

            function c(e) {
                for (var t = {}, n = 0, i = e; n < i.length; n++) {
                    var a = i[n];
                    if (a && a.emotes)
                        for (var r = 0, s = a.emotes; r < s.length; r++) {
                            var c = s[r];
                            if (c && c.id && c.token)
                                for (var d = 0, u = l[c.token] || [c.token]; d < u.length; d++) {
                                    var m = u[d];
                                    t[m] && a.id === o || (t[m] = {
                                        id: c.id,
                                        token: m
                                    })
                                }
                        }
                }
                return t
            }
        },
        "0PcG": function(e, t, n) {
            "use strict";
            n.r(t);
            var i = n("mrSG"),
                a = n("q1tI"),
                r = n("fvjX"),
                o = n("/7QA"),
                s = n("V+GM"),
                l = n("NvVO"),
                c = n("2xye"),
                d = n("4rCz"),
                u = n("zxEZ"),
                m = n("GnwI"),
                p = n("+Jjl"),
                h = n("VAW9"),
                g = n("r93r"),
                f = n("lmt/"),
                b = n("Ue10"),
                v = (n("u9fF"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onEventToggle = function(e) {
                            t.props.history.replace(i.__assign({}, t.props.location, {
                                search: e
                            }))
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.setPageTitle()
                    }, t.prototype.componentDidUpdate = function() {
                        this.setPageTitle()
                    }, t.prototype.render = function() {
                        var e = this.props.match.params.channelLogin;
                        return a.createElement(a.Fragment, null, a.createElement(f.a, {
                            ownerLogin: e,
                            currentPage: u.b.Events
                        }, a.createElement(g.ChannelEventsContent, {
                            channelLogin: e,
                            searchQuery: this.props.location.search,
                            onEventToggle: this.onEventToggle
                        })), a.createElement(p.b, null, a.createElement(b.Eb, {
                            className: "channel-events__sidebar",
                            background: b.r.Alt2,
                            display: b.X.Flex,
                            flexGrow: 0,
                            flexShrink: 0,
                            flexDirection: b.Aa.Column,
                            flexWrap: b.Ba.NoWrap,
                            fullHeight: !0
                        }, a.createElement(h.a, {
                            channelLogin: e
                        }))))
                    }, t.prototype.setPageTitle = function() {
                        d.q.setPageTitle(Object(o.d)("{channelName}'s Events", {
                            channelName: this.props.match.params.channelLogin
                        }, "ChannelEventsPage"))
                    }, t
                }(a.Component)),
                k = Object(r.compose)(Object(m.b)("EventCollectionsPage", {
                    destination: l.a.ChannelEvents,
                    autoReportInteractive: !0
                }), Object(s.a)({
                    location: c.PageviewLocation.ChannelEvents
                }))(v);
            n.d(t, "ChannelEventsPage", function() {
                return k
            })
        },
        "0WFu": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            });
            var i = n("3Bft");

            function a(e) {
                return [i.a.Prime, i.a.Custom].includes(e) ? null : parseInt(e, 10) / 1e3
            }
        },
        "0hI/": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ReportUserModal_ReportUserData"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "targetUserID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "targetUser"
                            },
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "targetUserID"
                                    }
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "lookupType"
                                },
                                value: {
                                    kind: "EnumValue",
                                    value: "ALL"
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "blockedUsers"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 176
                }
            };
            n.loc.source = {
                body: "query ReportUserModal_ReportUserData($targetUserID: ID!) {\ntargetUser: user(id: $targetUserID lookupType: ALL) {\nid\nlogin\ndisplayName\n}\ncurrentUser {\nid\nblockedUsers {\nid\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "1Rv/": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Chat_UnbanUserFromChatRoom"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "UnbanUserFromChatRoomInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "unbanUserFromChatRoom"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "ban"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isPermanent"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "bannedUser"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "error"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 170
                }
            };
            n.loc.source = {
                body: "mutation Chat_UnbanUserFromChatRoom($input: UnbanUserFromChatRoomInput!) {\nunbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\nbannedUser {\nid\n}\n}\nerror {\ncode\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "1rIY": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return s
            });
            var i = n("mrSG"),
                a = n("q1tI"),
                r = n("/7QA"),
                o = n("2Ygb");

            function s(e, t) {
                var n = a.createContext(t),
                    s = n.Consumer,
                    l = n.Provider;
                return {
                    withContext: function(t) {
                        return function(n) {
                            var r;
                            return (r = function(e) {
                                function r() {
                                    return null !== e && e.apply(this, arguments) || this
                                }
                                return i.__extends(r, e), r.prototype.render = function() {
                                    var e = this;
                                    return a.createElement(s, null, function(r) {
                                        var o = t(r);
                                        return a.createElement(n, i.__assign({}, e.props, o))
                                    })
                                }, r
                            }(a.Component)).displayName = Object(o.a)("With" + e, n), r
                        }
                    },
                    InnerProvider: function(t) {
                        function n() {
                            return null !== t && t.apply(this, arguments) || this
                        }
                        return i.__extends(n, t), n.prototype.componentDidMount = function() {
                            "object" === typeof this.props.value && this.props.value || r.k.error(new Error(n.displayName + " rendered without an appropriate initial value"), "Set an initial value in your provider component at mount time.")
                        }, n.prototype.render = function() {
                            return a.createElement(l, {
                                value: this.props.value
                            }, this.props.children)
                        }, n.displayName = "Inner" + e + "Provider", n
                    }(a.Component)
                }
            }
        },
        "26nv": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Chat_ChannelData"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "channel"
                            },
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "chatSettings"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "blockLinks"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "rules"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isModerator"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 166
                }
            };
            n.loc.source = {
                body: "query Chat_ChannelData($channelLogin: String!) {\nchannel: user(login: $channelLogin) {\nid\nlogin\ndisplayName\nchatSettings {\nblockLinks\nrules\n}\nself {\nisModerator\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "2C+f": function(e, t, n) {},
        "2D+f": function(e, t, n) {},
        "2Dht": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "WhisperThread"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "id"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "whisperThread"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "userLastMessageRead"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "sentAt"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "__typename"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "unreadMessagesCount"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "messages"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "first"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "20"
                                        }
                                    }],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "edges"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "cursor"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "node"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "nonce"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "content"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "content"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "emotes"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "id"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "emoteID"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "setID"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "from"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "to"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "__typename"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }]
                                                                    }
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "__typename"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }]
                                                            }
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "from"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "id"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }]
                                                            }
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "sentAt"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "editedAt"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "deletedAt"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "__typename"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "__typename"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "__typename"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "__typename"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 347
                }
            };
            n.loc.source = {
                body: "query WhisperThread($id: ID!) {\nwhisperThread(id: $id) {\nid\nuserLastMessageRead {\nid\nsentAt\n__typename\n}\nunreadMessagesCount\nmessages(first: 20) {\nedges {\ncursor\nnode {\nid\nnonce\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n__typename\n}\n__typename\n}\nfrom {\nid\n}\nsentAt\neditedAt\ndeletedAt\n__typename\n}\n__typename\n}\n__typename\n}\n__typename\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "2EzP": function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return r
            }), n.d(t, "a", function() {
                return o
            });
            var i = n("XIZb"),
                a = Object(i.a)("MessageHandler"),
                r = (a.InnerProvider, a.withChatServiceProvider),
                o = (0, a.withContext)(function(e) {
                    return {
                        messageHandlerAPI: e.serviceAPI,
                        setMessageHandlerAPI: e.setServiceAPI
                    }
                })
        },
        "2e6W": function(e, t, n) {},
        "3Bft": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            });
            var i = {
                Prime: "prime",
                Tier1: "1000",
                Tier2: "2000",
                Tier3: "3000",
                Custom: "Custom"
            }
        },
        "3GF+": function(e, t, n) {
            "use strict";
            var i = n("q1tI"),
                a = n("Ue10");
            n("jPLR");

            function r(e) {
                e.stopPropagation()
            }
            var o = function(e) {
                return i.createElement(a.Pa, {
                    display: a.X.InlineBlock
                }, i.createElement("div", {
                    className: "viewer-card-drag-cancel",
                    onMouseDown: r
                }, e.children))
            };
            n.d(t, "a", function() {
                return o
            })
        },
        "3HtZ": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Mods"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "id"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "mods"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "first"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "100"
                                        }
                                    }],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "edges"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "node"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "login"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 94
                }
            };
            n.loc.source = {
                body: "query Mods($id: ID!) {\nuser(id: $id) {\nid\nmods(first: 100) {\nedges {\nnode {\nid\nlogin\n}\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "3YIm": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "SendWhisper"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "SendWhisperInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "sendWhisper"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "message"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "nonce"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "content"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "content"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "emotes"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "emoteID"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "setID"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "from"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "to"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "__typename"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "__typename"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "from"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "__typename"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "sentAt"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "editedAt"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "deletedAt"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "thread"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "participants"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "self"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "whisperPermissions"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "receive"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }]
                                                                    }
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "__typename"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "error"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "__typename"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "__typename"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 352
                }
            };
            n.loc.source = {
                body: "mutation SendWhisper($input: SendWhisperInput!) {\nsendWhisper(input: $input) {\nmessage {\nid\nnonce\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n__typename\n}\n__typename\n}\nfrom {\nid\n__typename\n}\nsentAt\neditedAt\ndeletedAt\nthread {\nid\nparticipants {\nid\nself {\nwhisperPermissions {\nreceive\n}\n}\n}\n}\n__typename\n}\nerror {\ncode\n__typename\n}\n__typename\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "41XU": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChannelBanner"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "login"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "bannerImageURL"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 100
                }
            };
            n.loc.source = {
                body: "query ChannelBanner($login: String!) {\nuser(login: $login) {\nid\ndisplayName\nlogin\nbannerImageURL\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "4HoE": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "ModUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ModUserInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "modUser"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "channel"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "target"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "login"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "error"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 119
                }
            };
            n.loc.source = {
                body: "mutation ModUser($input: ModUserInput!){\nmodUser(input: $input) {\nchannel {\nid\n}\ntarget {\nid\nlogin\n}\nerror {\ncode\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "4hz/": function(e, t, n) {
            "use strict";
            var i = n("q1tI"),
                a = n("Ue10"),
                r = function() {
                    return i.createElement(a.Eb, {
                        margin: {
                            y: 1
                        },
                        background: a.r.Base,
                        elevation: 1
                    }, i.createElement(a.G, {
                        row: !0
                    }, i.createElement(a.Xa, {
                        flexShrink: 0,
                        position: a.jb.Relative
                    }, i.createElement(a.Xa, {
                        padding: 1,
                        position: a.jb.Absolute
                    }, i.createElement(a.ib, {
                        height: 57,
                        width: 47
                    })), i.createElement(a.ib, {
                        height: 180,
                        width: 320
                    })), i.createElement(a.H, null, i.createElement(a.Xa, {
                        margin: {
                            x: 2
                        }
                    }, i.createElement(a.Pa, {
                        margin: {
                            bottom: 1
                        }
                    }, i.createElement(a.W, {
                        type: a.Vb.H4
                    }, i.createElement(a.ib, {
                        lineCount: 1
                    }))), i.createElement(a.W, {
                        color: a.O.Alt2
                    }, i.createElement(a.ib, {
                        lineCount: 1
                    })), i.createElement(a.W, {
                        color: a.O.Alt2
                    }, i.createElement(a.ib, {
                        lineCount: 1
                    })), i.createElement(a.Xa, {
                        display: a.X.Flex,
                        margin: {
                            top: 2
                        }
                    }, i.createElement(a.Xa, {
                        margin: {
                            right: 1
                        }
                    }, i.createElement(a.ib, {
                        height: 28,
                        width: 73
                    })), i.createElement(a.Xa, {
                        margin: {
                            right: 1
                        }
                    }, i.createElement(a.ib, {
                        height: 28,
                        width: 83
                    })), i.createElement(a.ib, {
                        height: 28,
                        width: 28
                    }))))))
                };
            n.d(t, "a", function() {
                return o
            });
            var o = function() {
                for (var e = [], t = 0; t < 10; t++) e.push(i.createElement(r, {
                    key: t
                }));
                return i.createElement(i.Fragment, null, e)
            }
        },
        "4w0E": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Chat_BanUserFromChatRoom"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "BanUserFromChatRoomInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "banUserFromChatRoom"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "ban"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isPermanent"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "bannedUser"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "error"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 164
                }
            };
            n.loc.source = {
                body: "mutation Chat_BanUserFromChatRoom($input: BanUserFromChatRoomInput!) {\nbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\nbannedUser {\nid\n}\n}\nerror {\ncode\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "4zGI": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Chat_DenyRejectedCheerMessage"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "DenyRejectedCheerInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "denyRejectedCheer"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 115
                }
            };
            n.loc.source = {
                body: "mutation Chat_DenyRejectedCheerMessage($input: DenyRejectedCheerInput!) {\ndenyRejectedCheer(input: $input) {\nid\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "5Siz": function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "b", function() {
                    return i
                }), n.d(t, "a", function() {
                    return a
                }),
                function(e) {
                    e.PopoutChat = "popout_chat", e.Chat = "chat", e.LiveDashButton = "live_dashboard_button", e.LiveDashHotkey = "live_dashboard_hotkey", e.LiveDashChat = "live_dashboard_chat"
                }(i || (i = {}));
            var a = 140
        },
        "5g1g": function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("q1tI"),
                r = n("wUQP"),
                o = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return this.props.incremental && Object(r.c)(this.props.name) || Object(r.b)(this.props.name) ? this.props.children : null
                    }, t
                }(a.Component),
                s = o;
            n.d(t, "b", function() {
                return o
            }), n.d(t, "a", function() {
                return s
            })
        },
        "5zf8": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            }), n.d(t, "b", function() {
                return l
            });
            var i, a, r = n("/7QA");

            function o(e, t) {
                switch (e) {
                    case i.Second:
                        return Object(r.d)("{secondCount, plural, one {# second} other {# seconds}}", {
                            secondCount: t
                        }, "formatDuration");
                    case i.Minute:
                        return Object(r.d)("{minuteCount, plural, one {# minute} other {# minutes}}", {
                            minuteCount: t
                        }, "formatDuration");
                    case i.Hour:
                        return Object(r.d)("{hourCount, plural, one {# hour} other {# hours}}", {
                            hourCount: t
                        }, "formatDuration");
                    case i.Day:
                        return Object(r.d)("{dayCount, plural, one {# day} other {# days}}", {
                            dayCount: t
                        }, "formatDuration");
                    case i.Week:
                        return Object(r.d)("{weekCount, plural, one {# week} other {# weeks}}", {
                            weekCount: t
                        }, "formatDuration");
                    case i.Month:
                        return Object(r.d)("{monthCount, plural, one {# month} other {# months}}", {
                            monthCount: t
                        }, "formatDuration");
                    default:
                        return ""
                }
            }

            function s(e, t) {
                switch (e) {
                    case i.Second:
                        return Object(r.d)("{secondCount}s", {
                            secondCount: t
                        }, "formatDuration");
                    case i.Minute:
                        return Object(r.d)("{minuteCount}m", {
                            minuteCount: t
                        }, "formatDuration");
                    case i.Hour:
                        return Object(r.d)("{hourCount}h", {
                            hourCount: t
                        }, "formatDuration");
                    case i.Day:
                        return Object(r.d)("{dayCount}d", {
                            dayCount: t
                        }, "formatDuration");
                    case i.Week:
                        return Object(r.d)("{weekCount}w", {
                            weekCount: t
                        }, "formatDuration");
                    case i.Month:
                        return Object(r.d)("{monthCount}mo", {
                            monthCount: t
                        }, "formatDuration");
                    default:
                        return ""
                }
            }

            function l(e, t) {
                var n;
                switch (void 0 === t && (t = a.Humanized), t === a.ClockAuto && (t = e >= 3600 ? a.ClockHMS : a.ClockMS), t) {
                    case a.ClockHM:
                    case a.ClockHMS:
                        n = i.Hour;
                        break;
                    case a.ClockMS:
                        n = i.Minute
                }
                var l = 2;
                t === a.ClockHMS && (l = 3);
                var d = function(e, t) {
                        void 0 === t && (t = i.Month);
                        var n = {};
                        return n.seconds = e, e < 60 || t === i.Second ? n : (n.minutes = Math.floor(e / 60), n.seconds = e % 60, n.minutes < 60 || t === i.Minute ? n : (n.hours = Math.floor(n.minutes / 60), n.minutes = n.minutes % 60, n.hours < 24 || t === i.Hour ? n : (n.days = Math.floor(n.hours / 24), n.hours = n.hours % 24, n.days < 7 || t === i.Day ? n : n.days <= 26 || t === i.Week ? (n.weeks = Math.floor(n.days / 7), n.days = n.days % 7, n) : (n.months = Math.round((n.days + 3) / 30), n))))
                    }(e, n),
                    u = Object.keys(d);
                if (u.forEach(function(e, n) {
                        t !== a.Humanized && t !== a.HumanizedShort || d[e] || delete d[e], n < u.length - l && delete d[e]
                    }), t === a.Humanized) return function(e) {
                    return e.months ? o(i.Month, e.months) : e.weeks && e.days ? o(i.Week, e.weeks) + " " + o(i.Day, e.days) : e.weeks ? o(i.Week, e.weeks) : e.days && e.hours ? o(i.Day, e.days) + " " + o(i.Hour, e.hours) : e.days ? o(i.Day, e.days) : e.hours && e.minutes ? o(i.Hour, e.hours) + " " + o(i.Minute, e.minutes) : e.hours ? o(i.Hour, e.hours) : e.minutes && e.seconds ? o(i.Minute, e.minutes) + " " + o(i.Second, e.seconds) : e.minutes ? o(i.Minute, e.minutes) : o(i.Second, e.seconds || 0)
                }(d);
                if (t === a.HumanizedShort) return function(e) {
                    return e.months ? s(i.Month, e.months) : e.weeks && e.days ? "" + s(i.Week, e.weeks) + s(i.Day, e.days) : e.weeks ? s(i.Week, e.weeks) : e.days && e.hours ? "" + s(i.Day, e.days) + s(i.Hour, e.hours) : e.days ? s(i.Day, e.days) : e.hours && e.minutes ? "" + s(i.Hour, e.hours) + s(i.Minute, e.minutes) : e.hours ? s(i.Hour, e.hours) : e.minutes && e.seconds ? "" + s(i.Minute, e.minutes) + s(i.Second, e.seconds) : e.minutes ? s(i.Minute, e.minutes) : s(i.Second, e.seconds || 0)
                }(d);
                var m = ":",
                    p = !1;
                switch (r.p.intl.getLanguageCode()) {
                    case "cy":
                    case "da":
                    case "fi":
                    case "id":
                    case "nb":
                    case "si":
                        m = ".";
                        break;
                    case "af":
                    case "fr":
                    case "lt":
                        p = !0
                }
                var h = d.seconds || 0,
                    g = d.minutes || 0,
                    f = d.hours || 0;
                switch (t) {
                    case a.ClockHM:
                    case a.ClockHMS:
                        var b = (p ? c(f, 2) : f) + m + c(g, 2);
                        return t === a.ClockHMS && (b += m + c(h, 2)), b;
                    case a.ClockMS:
                        return (p ? c(g, 2) : g) + m + c(h, 2)
                }
            }

            function c(e, t) {
                var n = e.toString();
                return n.length < t ? "0".repeat(t - n.length) + n : n
            }! function(e) {
                e[e.Second = 0] = "Second", e[e.Minute = 1] = "Minute", e[e.Hour = 2] = "Hour", e[e.Day = 3] = "Day", e[e.Week = 4] = "Week", e[e.Month = 5] = "Month"
            }(i || (i = {})),
            function(e) {
                e[e.Humanized = 0] = "Humanized", e[e.HumanizedShort = 1] = "HumanizedShort", e[e.ClockAuto = 2] = "ClockAuto", e[e.ClockHM = 3] = "ClockHM", e[e.ClockMS = 4] = "ClockMS", e[e.ClockHMS = 5] = "ClockHMS"
            }(a || (a = {}))
        },
        "60o1": function(e, t, n) {
            "use strict";

            function i(e, t) {
                var n = e,
                    i = !1;
                return n ? function(e) {
                    return e.split("").map(function(e) {
                        return e.charCodeAt(0) > 127
                    }).reduce(function(e, t) {
                        return e || t
                    })
                }(n) && (i = !0) : n = t, {
                    userDisplayName: n,
                    isIntl: i
                }
            }
            n.d(t, "a", function() {
                return i
            })
        },
        "6MRn": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "BitsPinnedCheerV2_LeaderboardEntry"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "userID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "profileImageWidth"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Int"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "userID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "profileImageURL"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "profileImageWidth"
                                            }
                                        }
                                    }],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 168
                }
            };
            n.loc.source = {
                body: "query BitsPinnedCheerV2_LeaderboardEntry($userID: ID! $profileImageWidth: Int!) {\nuser(id: $userID) {\nid\ndisplayName\nlogin\nprofileImageURL(width:$profileImageWidth)\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "6j5V": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            });
            var i = n("RcPG");

            function a(e) {
                return {
                    type: i.a.Text,
                    content: e
                }
            }
        },
        "7NxT": function(e, t, n) {
            "use strict";
            n("DLhE");
            var i = n("mrSG"),
                a = n("/7QA"),
                r = n("tY8L");
            a.p.store.registerReducer("viewerCard", function(e, t) {
                switch (void 0 === e && (e = {
                    viewerCardOptions: null
                }), t.type) {
                    case r.a:
                        return i.__assign({}, e, {
                            viewerCardOptions: null
                        });
                    case r.b:
                        return t.viewerCardOptions ? i.__assign({}, e, {
                            viewerCardOptions: i.__assign({}, t.viewerCardOptions)
                        }) : e;
                    default:
                        return e
                }
            })
        },
        "7SjK": function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("q1tI"),
                r = n("TSYQ"),
                o = n("/7QA"),
                s = n("GnwI"),
                l = n("Ue10"),
                c = (n("GOKC"), a.createElement(l.Eb, {
                    alignItems: l.f.Center,
                    background: l.r.Overlay,
                    borderRadius: l.x.Small,
                    className: "emote-button__lock",
                    color: l.O.Overlay,
                    "data-test-selector": "emote-button-lock",
                    display: l.X.InlineFlex,
                    justifyContent: l.Wa.Center,
                    position: l.jb.Absolute,
                    zIndex: l.ic.Above
                }, a.createElement(l.sb, {
                    asset: l.tb.Lock,
                    height: 10,
                    width: 10
                }))),
                d = function(e) {
                    var t = r("emote-button__link", {
                            "emote-button__link--locked": !e.onClick
                        }),
                        n = e.emote,
                        i = n.displayName,
                        d = n.srcSet;
                    if (!d) return null;
                    var u = a.createElement("img", {
                        className: "emote-picker__image",
                        srcSet: d,
                        alt: i
                    });
                    if (e.isCriticalImage) {
                        for (var m = d.split(" ")[0], p = {}, h = 0, g = d.split(","); h < g.length; h++) {
                            var f = g[h].trim().split(" "),
                                b = f[1],
                                v = f[0];
                            p[b] = v
                        }
                        u = a.createElement(s.a, {
                            className: "emote-picker__emote-image",
                            src: m,
                            srcSet: p,
                            alt: i || ""
                        })
                    }
                    return a.createElement("div", {
                        className: "emote-button"
                    }, a.createElement(l.Yb, {
                        label: i || Object(o.d)("Emote", "EmoteButton"),
                        direction: l.ac.Bottom
                    }, a.createElement(l.Pa, {
                        display: l.X.Flex,
                        alignItems: l.f.Center,
                        justifyContent: l.Wa.Center
                    }, a.createElement("button", {
                        "data-test-selector": "emote-button-clickable",
                        className: t,
                        "aria-label": i,
                        name: i,
                        onClick: e.onClick ? e.onClick.bind(null, e.emote) : void 0,
                        "data-a-target": i
                    }, a.createElement("figure", null, e.locked ? c : null, u)))))
                },
                u = (n("VrOd"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleClickEmote = function(e) {
                            t.props.onClickEmote && t.props.onClickEmote(e, t.props.context)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = this,
                            t = this.props.emotes.map(function(t, n) {
                                return a.createElement(l.Xa, {
                                    key: "emote-button-padder-" + t.id + "--" + t.setID,
                                    padding: {
                                        left: e.props.spaced ? .5 : 0
                                    }
                                }, a.createElement(d, {
                                    key: "emote-button-" + t.id + "--" + t.setID,
                                    emote: t,
                                    isCriticalImage: 0 === n,
                                    locked: e.props.locked || t.isLocked,
                                    onClick: e.props.locked ? void 0 : e.handleClickEmote
                                }))
                            });
                        return a.createElement(l.Xa, {
                            display: l.X.Flex,
                            flexWrap: l.Ba.Wrap,
                            justifyContent: l.Wa.Center
                        }, t)
                    }, t
                }(a.Component));
            n.d(t, "a", function() {
                return u
            })
        },
        "7TkE": function(e, t, n) {
            e.exports = n.p + "assets/gift-open-ba127d9c110a18648ca1.png"
        },
        "8SX2": function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("q1tI"),
                r = n("oJmH"),
                o = n("/MKj"),
                s = n("fvjX"),
                l = n("tY8L"),
                c = n("Ue10"),
                d = (n("rVcM"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.usernameClickHandler = function(e) {
                            t.props.onUsernameClick(t.props.login, t.props.sourceType, t.props.contentID, e.currentTarget.getBoundingClientRect().bottom)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return a.createElement("button", {
                            className: "chatter-name",
                            onClick: this.usernameClickHandler
                        }, a.createElement(c.W, {
                            bold: !0,
                            color: c.O.Base,
                            type: c.Vb.Span
                        }, this.props.children))
                    }, t
                }(a.Component));
            var u = Object(r.compose)(Object(o.connect)(void 0, function(e) {
                return Object(s.bindActionCreators)({
                    onUsernameClick: l.e
                }, e)
            }))(d);
            n.d(t, !1, function() {
                return d
            }), n.d(t, "a", function() {
                return u
            })
        },
        "8in3": function(e, t, n) {
            "use strict";
            var i = n("/MKj"),
                a = n("fvjX"),
                r = n("tY8L"),
                o = n("mrSG"),
                s = n("TSYQ"),
                l = n("q1tI"),
                c = n("ZS2+"),
                d = n("uy8m"),
                u = n("4rCz"),
                m = n("3GF+"),
                p = n("oK83"),
                h = n("Ue10"),
                g = (n("2D+f"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            dragging: !1,
                            viewerCardComponentLoaded: !1
                        }, t.ViewerCard = c.a.wrap(function() {
                            return Promise.all([n.e(0), n.e(204)]).then(n.bind(null, "q3Qz"))
                        }, "ViewerCard", {
                            placeholder: l.createElement(h.Eb, {
                                background: h.r.Base,
                                fullHeight: !0,
                                fullWidth: !0,
                                padding: 2
                            }, l.createElement(h.Za, {
                                fillContent: !0
                            })),
                            onRendered: function() {
                                return t.setState({
                                    viewerCardComponentLoaded: !0
                                })
                            }
                        }), t.ExtensionMessageCard = c.a.wrap(function() {
                            return n.e(203).then(n.bind(null, "n3tJ"))
                        }, "ExtensionMessageCard", {
                            placeholder: l.createElement(h.Eb, {
                                background: h.r.Base,
                                fullHeight: !0,
                                fullWidth: !0,
                                padding: 2
                            }, l.createElement(h.Za, {
                                fillContent: !0
                            })),
                            onRendered: function() {
                                return t.setState({
                                    viewerCardComponentLoaded: !0
                                })
                            }
                        }), t.onDragStart = function(e) {
                            t.cardContainerRef && t.layerRef && e.button === d.a.Left && (window.addEventListener("mousemove", t.onDrag), window.addEventListener("mouseup", t.onDragEnd), window.addEventListener("selectstart", t.cancelSelection), t.setState({
                                dragging: !0
                            }), t.initCardX = t.cardContainerRef.offsetLeft, t.initCardY = t.cardContainerRef.offsetTop, t.initMouseX = e.clientX, t.initMouseY = e.clientY)
                        }, t.onDrag = function(e) {
                            t.nextTop = t.initCardY + e.clientY - t.initMouseY, t.nextLeft = t.initCardX + e.clientX - t.initMouseX, t.rafHandle || (t.rafHandle = requestAnimationFrame(function() {
                                t.rafHandle = 0, t.cardContainerRef && (t.cardContainerRef.style.top = t.nextTop + "px", t.cardContainerRef.style.left = t.nextLeft + "px")
                            }))
                        }, t.onDragEnd = function() {
                            t.removeDragListeners(), t.setState({
                                dragging: !1
                            })
                        }, t.removeDragListeners = function() {
                            window.removeEventListener("mousemove", t.onDrag), window.removeEventListener("mouseup", t.onDragEnd), window.removeEventListener("selectstart", t.cancelSelection)
                        }, t.cancelSelection = function(e) {
                            e.preventDefault()
                        }, t
                    }
                    return o.__extends(t, e), t.prototype.componentWillUnmount = function() {
                        this.props.hideViewerCard(), this.rafHandle && cancelAnimationFrame(this.rafHandle), this.removeDragListeners()
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        this.props.viewerCardOptions && e.viewerCardOptions && (e.viewerCardOptions.targetID === this.props.viewerCardOptions.targetID && e.viewerCardOptions.initialTopOffset === this.props.viewerCardOptions.initialTopOffset || this.cardContainerRef && (this.cardContainerRef.style.left = "0px"))
                    }, t.prototype.render = function() {
                        var e = this,
                            t = {
                                "viewer-card-layer": !0,
                                "viewer-card-layer--dragging": this.state.dragging
                            },
                            n = {
                                "viewer-card-layer__draggable": !0,
                                "viewer-card-layer__draggable--dragging": this.state.dragging
                            },
                            i = null,
                            a = {};
                        if (this.props.viewerCardOptions) {
                            if (this.layerRef) {
                                var r = this.layerRef.getBoundingClientRect();
                                a = {
                                    top: Math.max(this.props.viewerCardOptions.initialTopOffset - r.top, 0) + "px"
                                }
                            }
                            switch (this.props.viewerCardOptions.viewerCardType) {
                                case p.b.Extension:
                                    i = l.createElement(this.ExtensionMessageCard, {
                                        channelID: this.props.channelID,
                                        extensionID: this.props.viewerCardOptions.targetID,
                                        extensionVersion: this.props.viewerCardOptions.extensionVersion,
                                        hideMessageCard: this.props.hideViewerCard
                                    });
                                    break;
                                case p.b.Viewer:
                                    i = l.createElement(this.ViewerCard, {
                                        channelID: this.props.channelID,
                                        isPopout: this.props.isPopout,
                                        isEmbedded: this.props.isEmbedded,
                                        targetLogin: this.props.viewerCardOptions.targetID,
                                        sourceType: this.props.viewerCardOptions.sourceType,
                                        sourceID: this.props.viewerCardOptions.sourceID,
                                        confirmModerationAction: this.props.confirmModerationAction,
                                        hideViewerCard: this.props.hideViewerCard,
                                        sendMessageToTMI: this.props.onSendMessage
                                    });
                                    break;
                                default:
                                    i = null
                            }
                        }
                        var o = null;
                        return i && (o = l.createElement(h.Qa, {
                            background: h.r.Base,
                            className: s(n),
                            position: h.jb.Absolute
                        }, l.createElement("div", {
                            onMouseDown: this.onDragStart,
                            ref: function(t) {
                                e.cardContainerRef = t
                            },
                            style: a,
                            "data-a-target": "viewer-card-positioner"
                        }, i, l.createElement(h.Xa, {
                            position: h.jb.Absolute,
                            attachRight: !0,
                            attachTop: !0,
                            margin: {
                                top: .5,
                                right: .5
                            },
                            "data-a-target": "viewer-card-close-button"
                        }, l.createElement(m.a, null, l.createElement(h.A, {
                            icon: h.tb.Close,
                            onClick: this.props.hideViewerCard,
                            ariaLabel: Object(u.d)("Hide", "ViewerCard"),
                            overlay: this.state.viewerCardComponentLoaded,
                            "data-test-selector": "close-viewer-card"
                        })))))), l.createElement(h.Pa, {
                            className: s(t),
                            fullHeight: !0,
                            fullWidth: !0,
                            position: h.jb.Relative,
                            zIndex: h.ic.Above
                        }, l.createElement("div", {
                            onMouseUp: this.onDragEnd,
                            ref: function(t) {
                                e.layerRef = t
                            }
                        }, o))
                    }, t
                }(l.Component));
            var f = Object(i.connect)(function(e) {
                return {
                    viewerCardOptions: e.viewerCard.viewerCardOptions
                }
            }, function(e) {
                return Object(a.bindActionCreators)({
                    hideViewerCard: r.c
                }, e)
            })(g);
            n.d(t, "a", function() {
                return f
            })
        },
        "8jSG": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "blockedUsers"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "User"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "blockedUsers"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 56
                }
            };
            n.loc.source = {
                body: "fragment blockedUsers on User {\nid\nblockedUsers {\nid\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "94Uw": function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }),
                function(e) {
                    e.ProfileImage = "profile_image", e.ProfileBanner = "profile_banner", e.ChannelOfflineImage = "channel_offline_image"
                }(i || (i = {}))
        },
        "986b": function(e, t, n) {},
        "9KaG": function(e, t, n) {},
        "9P+5": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Chat_UserData"
                    },
                    variableDefinitions: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "roles"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isGlobalMod"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isSiteAdmin"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isStaff"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 95
                }
            };
            n.loc.source = {
                body: "query Chat_UserData {\nuser {\nid\ndisplayName\nlogin\nroles {\nisGlobalMod\nisSiteAdmin\nisStaff\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "9RDd": function(e, t, n) {},
        "9Rmp": function(e, t, n) {},
        "9yes": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Chat_AllowRejectedChatMessage"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "AllowRejectedChatMessageInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "allowRejectedChatMessage"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "message"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 141
                }
            };
            n.loc.source = {
                body: "mutation Chat_AllowRejectedChatMessage($input: AllowRejectedChatMessageInput!) {\nallowRejectedChatMessage(input: $input) {\nmessage {\nid\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        AKV8: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return s
            });
            var i, a = n("mrSG"),
                r = n("yR8l"),
                o = n("4HoE");

            function s(e) {
                var t = this;
                return Object(r.a)(o, {
                    props: function(n) {
                        return {
                            modUserMutation: function(i) {
                                return a.__awaiter(t, void 0, void 0, function() {
                                    var t;
                                    return a.__generator(this, function(a) {
                                        if (t = e(n.ownProps).channelID, n.mutate) return [2, n.mutate({
                                            variables: {
                                                input: {
                                                    channelID: t,
                                                    targetLogin: i
                                                }
                                            }
                                        }).then(function(e) {
                                            return e.data
                                        })];
                                        throw new Error("modUser mutation is not ready")
                                    })
                                })
                            }
                        }
                    }
                })
            }! function(e) {
                e.ChannelNotFound = "CHANNEL_NOT_FOUND", e.Forbidden = "FORBIDDEN", e.UserAlreadyModded = "TARGET_ALREADY_MOD", e.UserBanned = "TARGET_IS_CHAT_BANNED", e.UserNotFound = "TARGET_NOT_FOUND"
            }(i || (i = {}))
        },
        AREq: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = n("/7QA"),
                a = n("DMoW");

            function r(e, t, n) {
                if (void 0 === n && (n = !1), n) switch (t) {
                    case a.c.FORBIDDEN:
                        return Object(i.d)("You don't have permissions to timeout {login}.", {
                            login: e
                        }, "BanUserErrorCode");
                    case a.c.TARGET_IS_ADMIN:
                        return Object(i.d)("You cannot timeout admin {login}. Please email support@twitch.tv if an admin is being abusive.", {
                            login: e
                        }, "BanUserErrorCode");
                    case a.c.TARGET_ALREADY_BANNED:
                        return Object(i.d)("{login} is already banned in this channel.", {
                            login: e
                        }, "BanUserErrorCode");
                    case a.c.TARGET_IS_ANONYMOUS:
                        return Object(i.d)("You cannot timeout anonymous users.", "BanUserErrorCode");
                    case a.c.TARGET_IS_BROADCASTER:
                        return Object(i.d)("You cannot timeout the broadcaster.", "BanUserErrorCode");
                    case a.c.TARGET_IS_GLOBAL_MOD:
                        return Object(i.d)("You cannot timeout global moderator {login}. Please email support@twitch.tv if a global moderator is being abusive.", {
                            login: e
                        }, "BanUserErrorCode");
                    case a.c.TARGET_IS_MOD:
                        return Object(i.d)("You cannot timeout moderator {login} unless you are the owner of this channel.", {
                            login: e
                        }, "BanUserErrorCode");
                    case a.c.TARGET_IS_SELF:
                        return Object(i.d)("You cannot timeout yourself.", "BanUserErrorCode");
                    case a.c.TARGET_IS_STAFF:
                        return Object(i.d)("You cannot timeout staff {login}. Please email support@twitch.tv if a staff member is being abusive.", {
                            login: e
                        }, "BanUserErrorCode");
                    case a.c.TARGET_NOT_FOUND:
                        return Object(i.d)("The user you are trying to timeout doesn't exist.", "BanUserErrorCode");
                    default:
                        throw new Error("Unrecognized operation result.")
                } else switch (t) {
                    case a.c.FORBIDDEN:
                        return Object(i.d)("You don't have permissions to ban {login}.", {
                            login: e
                        }, "BanUserErrorCode");
                    case a.c.TARGET_IS_ADMIN:
                        return Object(i.d)("You cannot ban admin {login}. Please email support@twitch.tv if an admin is being abusive.", {
                            login: e
                        }, "BanUserErrorCode");
                    case a.c.TARGET_ALREADY_BANNED:
                        return Object(i.d)("{login} is currently banned in this channel.", {
                            login: e
                        }, "BanUserErrorCode");
                    case a.c.TARGET_IS_ANONYMOUS:
                        return Object(i.d)("You cannot ban anonymous users.", "BanUserErrorCode");
                    case a.c.TARGET_IS_BROADCASTER:
                        return Object(i.d)("You cannot ban the broadcaster.", "BanUserErrorCode");
                    case a.c.TARGET_IS_GLOBAL_MOD:
                        return Object(i.d)("You cannot ban global moderator {login}. Please email support@twitch.tv if a global moderator is being abusive.", {
                            login: e
                        }, "BanUserErrorCode");
                    case a.c.TARGET_IS_MOD:
                        return Object(i.d)("You cannot ban moderator {login} unless you are the owner of this channel.", {
                            login: e
                        }, "BanUserErrorCode");
                    case a.c.TARGET_IS_SELF:
                        return Object(i.d)("You cannot ban yourself.", "BanUserErrorCode");
                    case a.c.TARGET_IS_STAFF:
                        return Object(i.d)("You cannot ban staff {login}. Please email support@twitch.tv if a staff member is being abusive.", {
                            login: e
                        }, "BanUserErrorCode");
                    case a.c.TARGET_NOT_FOUND:
                        return Object(i.d)("The user you are trying to ban doesn't exist.", "BanUserErrorCode");
                    default:
                        throw new Error("Unrecognized operation result.")
                }
            }
        },
        "Aa/l": function(e, t, n) {},
        AcdH: function(e, t, n) {},
        Av0x: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = n("/7QA"),
                a = n("DMoW");

            function r(e, t, n) {
                if (void 0 === n && (n = !1), n) switch (t) {
                    case a.Aa.FORBIDDEN:
                        return Object(i.d)("You don't have permissions to untimeout {login}.", {
                            login: e
                        }, "UnbanUserErrorCode");
                    case a.Aa.TARGET_NOT_FOUND:
                        return Object(i.d)("The user you are trying to untimeout doesn't exist.", "UnbanUserErrorCode");
                    case a.Aa.TARGET_NOT_BANNED:
                        return Object(i.d)("{login} is not currently timed out from this channel.", {
                            login: e
                        }, "UnbanUserErrorCode");
                    default:
                        throw new Error("Unrecognized operation result")
                } else switch (t) {
                    case a.Aa.FORBIDDEN:
                        return Object(i.d)("You don't have permissions to unban {login}.", {
                            login: e
                        }, "UnbanUserErrorCode");
                    case a.Aa.TARGET_NOT_FOUND:
                        return Object(i.d)("The user you are trying to unban doesn't exist.", "UnbanUserErrorCode");
                    case a.Aa.TARGET_NOT_BANNED:
                        return Object(i.d)("{login} is not currently banned from this channel.", {
                            login: e
                        }, "UnbanUserErrorCode");
                    default:
                        throw new Error("Unrecognized operation result")
                }
            }
        },
        BJwa: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("q1tI"),
                r = n("9C/b"),
                o = n("fvjX"),
                s = n("/7QA"),
                l = n("ZS2+"),
                c = n("yR8l"),
                d = n("eDVu"),
                u = n("0Log"),
                m = n("/0dD"),
                p = n("/aPz"),
                h = n("DMoW"),
                g = n("uIkQ"),
                f = n("4rCz"),
                b = n("ZVTe"),
                v = n("Ue10"),
                k = (n("e7rh"), function(e) {
                    return a.createElement(v.Eb, {
                        padding: {
                            top: 1,
                            bottom: .5
                        },
                        margin: {
                            x: 2
                        },
                        borderTop: !0,
                        display: v.X.Block,
                        flexDirection: v.Aa.Column
                    }, a.createElement(v.Xa, {
                        padding: {
                            bottom: .5
                        }
                    }, a.createElement(g.b, {
                        badgeSets: e.badgeSets,
                        badgesToRender: {
                            twitchbot: "1"
                        }
                    }), a.createElement(b.a, {
                        userData: {
                            color: "#6441A5",
                            isIntl: !1,
                            userDisplayName: "AutoMod",
                            userID: "automod",
                            userLogin: "automod",
                            userType: "global_mod"
                        }
                    }), a.createElement(v.W, {
                        type: v.Vb.Span,
                        color: v.O.Alt2
                    }, Object(f.d)(": Your text may be removed by moderation. Bits will still be sent to the streamer. Review the highlighted text or continue below.", "BitsAutoModOffenderPrompt"))), a.createElement(v.Xa, {
                        display: v.X.Flex,
                        flexDirection: v.Aa.Row
                    }, a.createElement(v.Xa, {
                        padding: {
                            right: .5
                        }
                    }, a.createElement(v.z, {
                        onClick: e.onEditCheer
                    }, a.createElement(v.Xa, {
                        padding: {
                            x: 2
                        }
                    }, Object(f.d)("Edit", "BitsAutoModOffender")))), a.createElement(v.z, {
                        onClick: e.onCheerAnyway,
                        type: v.F.Hollow
                    }, Object(f.d)("Cheer Anyway", "BitsAutoModOffender")), a.createElement(v.Xa, {
                        className: "bits-auto-mod-offender-prompt__notification-icon",
                        display: v.X.Flex,
                        flexDirection: v.Aa.Column,
                        justifyContent: v.Wa.End,
                        alignSelf: v.g.End,
                        margin: {
                            left: "auto",
                            right: .5
                        }
                    }, a.createElement(v.sb, {
                        asset: v.tb.NotificationWarning
                    }))))
                }),
                C = n("qnat"),
                y = n("H31v"),
                E = n("oJmH"),
                S = n("/MKj"),
                N = n("u5aL"),
                _ = n("x7UT"),
                O = n("8Ad5"),
                w = n("wUQP"),
                M = n("oe5X"),
                D = n("1/iK"),
                I = n("f00E"),
                T = n("y5D0"),
                R = n("kz7j"),
                j = n("kRBY"),
                A = n("9o5F"),
                U = n("tKDy"),
                L = n("okS7"),
                B = n("ry0r"),
                x = n("17x9"),
                F = n("uu1w"),
                P = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.autocompleteType = F.a.Hashtag, t.canBeTriggeredByTab = !1, t.getMatches = function(e) {
                            return e.startsWith("#") && null !== t.props.hashTags.edges ? t.props.hashTags.edges.filter(function(t) {
                                return t.node.id.includes(e)
                            }).map(function(n) {
                                return {
                                    current: e,
                                    replacement: n.node.id,
                                    element: t.genearateHashtagDisplay(n.node.id)
                                }
                            }) : null
                        }, t.genearateHashtagDisplay = function(e) {
                            return a.createElement(v.Xa, {
                                padding: {
                                    right: .5
                                },
                                key: "hashtag:" + e
                            }, a.createElement(v.W, null, e))
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.unregister = this.context.registerAutocompleteProvider(this)
                    }, t.prototype.componentWillUnmount = function() {
                        this.unregister()
                    }, t.prototype.render = function() {
                        return null
                    }, t.contextTypes = {
                        registerAutocompleteProvider: x.func
                    }, t
                }(a.Component),
                H = n("5zXJ"),
                W = n("XmgI"),
                V = n("ebRM"),
                G = n("RiD7"),
                X = n("i4un"),
                z = n("tFCv"),
                q = n("+pBb"),
                Q = n("QVaV"),
                Y = n("vSeP"),
                K = 5,
                $ = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.autocompleteType = F.a.Mention, t.canBeTriggeredByTab = !0, t.getMatches = function(e, n) {
                            return n || e.startsWith("@") ? t.getMentions(e, n) : null
                        }, t.getMentions = function(e, n) {
                            if (!t.props.activeChattersAPI) return [];
                            var i = n ? e : e.substring(1);
                            return t.props.activeChattersAPI.getActiveChatters(i, K).map(function(i) {
                                return {
                                    current: e,
                                    replacement: (n ? "" : "@") + (i.displayName || i.login),
                                    element: t.renderMention(i)
                                }
                            })
                        }, t.renderMention = function(e) {
                            return a.createElement("span", null, Object(Q.a)(e.login, e.displayName || null))
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.unregister = this.context.registerAutocompleteProvider(this)
                    }, t.prototype.componentWillUnmount = function() {
                        this.unregister()
                    }, t.prototype.render = function() {
                        return null
                    }, t.contextTypes = {
                        registerAutocompleteProvider: x.func
                    }, t
                }(a.Component),
                Z = Object(Y.a)($),
                J = n("2xye");
            var ee, te = n("GnwI"),
                ne = n("QjI3");
            ! function(e) {
                e.ChatRestrictedHeader = "chat-restricted-header"
            }(ee || (ee = {}));
            var ie, ae = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.renderBalloon = function(e, n) {
                            return t.props.showBalloon ? a.createElement(N.a, {
                                onClickOut: t.handleBalloonClickOut
                            }, a.createElement(v.u, {
                                direction: v.v.TopLeft,
                                offsetY: "-0.5rem",
                                size: v.w.Medium,
                                show: t.props.showBalloon,
                                tailOffset: 50
                            }, a.createElement(v.Eb, {
                                color: v.O.Base,
                                padding: 1
                            }, e, a.createElement(v.Xa, {
                                display: v.X.Flex,
                                margin: {
                                    top: 1
                                }
                            }, n, a.createElement(v.Xa, null))))) : null
                        }, t.handleBalloonClickOut = function(e) {
                            t.rootRef && t.rootRef.contains(e.target) && e.stopPropagation(), t.props.closeBalloon()
                        }, t.handleActionClick = function() {
                            ! function(e) {
                                var t;
                                switch (e.restriction) {
                                    case h.l.SUBSCRIBERS_ONLY:
                                        t = "subscribe";
                                        break;
                                    case h.l.VERIFIED_ONLY:
                                        t = "go_to_settings";
                                        break;
                                    default:
                                        return
                                }
                                var n = {
                                    action_type: t,
                                    channel: e.channelLogin,
                                    channel_id: e.channelID
                                };
                                s.o.track(J.SpadeEventType.ChatInputRestrictedAction, n)
                            }({
                                channelID: t.props.channelID,
                                channelLogin: t.props.channelLogin,
                                restriction: t.props.reason
                            })
                        }, t.setRootRef = function(e) {
                            return t.rootRef = e
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive(), this.props.showBalloon && this.trackImpression()
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        e.showBalloon && !this.props.showBalloon && this.trackImpression()
                    }, t.prototype.render = function() {
                        var e = "",
                            t = null,
                            n = null;
                        switch (this.props.reason) {
                            case h.l.SUBSCRIBERS_ONLY:
                                e = Object(s.d)("Subscribers-Only Chat", "ChatModeHeader"), t = Object(s.d)("Only {streamer}'s subscribers can chat right now. Subscribe and join in!", {
                                    streamer: this.props.channelDisplayName
                                }, "ChatModeHeader"), n = a.createElement("div", {
                                    onClick: this.handleActionClick
                                }, a.createElement(ne.a, {
                                    balloonDirection: v.v.TopRight,
                                    channelLogin: this.props.channelLogin
                                }));
                                break;
                            case h.l.VERIFIED_ONLY:
                                e = Object(s.d)("Verified Email Only Chat", "ChatModeHeader"), t = Object(s.d)("Verify your email in Settings to chat!", "ChatModeHeader"), n = a.createElement(v.z, {
                                    onClick: this.handleActionClick,
                                    linkTo: "/settings/profile",
                                    targetBlank: !0
                                }, Object(s.d)("Go to Settings", "ChatModeHeader"));
                                break;
                            default:
                                return null
                        }
                        return a.createElement("div", {
                            ref: this.setRootRef
                        }, a.createElement(v.Eb, {
                            borderTop: !0,
                            color: v.O.Alt2,
                            display: v.X.Flex,
                            fontSize: v.Ca.Size6,
                            padding: {
                                y: .5
                            },
                            position: v.jb.Relative,
                            "data-test-selector": ee.ChatRestrictedHeader
                        }, a.createElement(v.U, {
                            hoverColorInherit: !0,
                            hoverUnderlineNone: !0,
                            onClick: this.props.openBalloon,
                            type: v.V.Inherit
                        }, a.createElement(v.W, {
                            bold: !0
                        }, e)), a.createElement(v.Xa, {
                            margin: {
                                left: .5
                            }
                        }, a.createElement(v.A, {
                            icon: v.tb.NotificationInfo,
                            onClick: this.props.openBalloon,
                            type: v.C.Secondary
                        })), this.renderBalloon(t, n)))
                    }, t.prototype.trackImpression = function() {
                        ! function(e) {
                            var t;
                            switch (e.restriction) {
                                case h.l.SUBSCRIBERS_ONLY:
                                    t = "subscriber_mode";
                                    break;
                                case h.l.VERIFIED_ONLY:
                                    t = "verified_mode";
                                    break;
                                default:
                                    return
                            }
                            var n = {
                                channel: e.channelLogin,
                                channel_id: e.channelID,
                                impression_type: t
                            };
                            s.o.track(J.SpadeEventType.ChatInputRestrictedImpression, n)
                        }({
                            channelID: this.props.channelID,
                            channelLogin: this.props.channelLogin,
                            restriction: this.props.reason
                        })
                    }, t
                }(a.Component),
                re = Object(te.b)("ChatRestrictedHeader")(ae),
                oe = function() {
                    return a.createElement(v.u, {
                        direction: v.v.TopLeft,
                        offsetY: "11px",
                        show: !0
                    }, a.createElement(v.Xa, {
                        padding: 1,
                        "data-test-selector": "manage-moderation-settings-tooltip"
                    }, Object(s.d)("Mods can now update AutoMod levels as well as Blocked and Permitted Terms.", "ManageModerationSettingsChat")))
                },
                se = n("cys1"),
                le = (n("ZuCe"), function(e) {
                    return a.createElement(v.Eb, {
                        position: v.jb.Relative,
                        borderRadius: v.x.Medium,
                        className: "moderated-message-fake-input__container"
                    }, a.createElement(v.Eb, {
                        className: "moderated-message-fake-input__content",
                        display: v.X.Block,
                        overflow: v.cb.Auto,
                        color: v.O.Alt,
                        background: v.r.Alt,
                        fullWidth: !0
                    }, a.createElement(v.Qa, {
                        padding: {
                            y: .5,
                            left: 1
                        },
                        fullHeight: !0
                    }, a.createElement("div", {
                        style: {
                            paddingRight: "6rem"
                        }
                    }, Object(se.f)(e.moderatedMessageParts)))), a.createElement(v.Eb, {
                        position: v.jb.Absolute,
                        display: v.X.Flex,
                        flexDirection: v.Aa.Row,
                        attachRight: !0,
                        attachTop: !0
                    }, a.createElement(v.Xa, {
                        display: v.X.InlineFlex,
                        alignItems: v.f.Center,
                        className: "moderated-message-fake-input__icon",
                        padding: .5
                    }, a.createElement(v.sb, {
                        asset: v.tb.Bits,
                        type: v.ub.Inherit
                    })), a.createElement(v.Xa, {
                        display: v.X.InlineFlex,
                        alignItems: v.f.Center,
                        className: "moderated-message-fake-input__icon",
                        padding: .5
                    }, a.createElement(v.sb, {
                        asset: v.tb.Emoticons,
                        type: v.ub.Inherit
                    }))))
                }),
                ce = n("ilCE");
            n("MVDO");

            function de(e, t) {
                var n = t.action ? {
                        action: t.action
                    } : {},
                    a = i.__assign({
                        raid_upsell_source_id: Number(t.sourceChannelID),
                        raid_upsell_target_id: Number(t.targetChannelID)
                    }, n);
                s.o.track(e, a)
            }! function(e) {
                e.Host = "host", e.Raid = "raid", e.Dismiss = "dismiss"
            }(ie || (ie = {}));
            var ue = n("D7An"),
                me = "raid-now-upsell";
            var pe, he = {
                    "data-test-selector": "dismiss"
                },
                ge = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleDismissUpsell = function() {
                            ! function(e) {
                                de(J.SpadeEventType.RaidUpsellClick, i.__assign({}, e, {
                                    action: ie.Dismiss
                                }))
                            }({
                                sourceChannelID: t.props.data.sourceChannel.id,
                                targetChannelID: t.props.data.targetChannel.id
                            }), t.props.closeRaidUpsell()
                        }, t.handleSendHostMsgFromUpsell = function() {
                            ! function(e) {
                                de(J.SpadeEventType.RaidUpsellClick, i.__assign({}, e, {
                                    action: ie.Host
                                }))
                            }({
                                sourceChannelID: t.props.data.sourceChannel.id,
                                targetChannelID: t.props.data.targetChannel.id
                            }), t.handleSendHostMsg()
                        }, t.handleSendHostMsg = function() {
                            t.props.send("/host " + t.props.targetChannelLogin), t.props.closeRaidUpsell()
                        }, t.handleSendRaidMsg = function() {
                            ! function(e) {
                                de(J.SpadeEventType.RaidUpsellClick, i.__assign({}, e, {
                                    action: ie.Raid
                                }))
                            }({
                                sourceChannelID: t.props.data.sourceChannel.id,
                                targetChannelID: t.props.data.targetChannel.id
                            }), t.props.send("/raid " + t.props.targetChannelLogin), t.props.closeRaidUpsell()
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.data.refetch()
                    }, t.prototype.componentDidUpdate = function(e) {
                        if (e.data.loading !== this.props.data.loading && !this.props.data.loading) {
                            if (!this.channelDisplayName || !this.isViewersCountWithinRange || this.isAttemptingToHostSelf) return this.handleSendHostMsg();
                            ! function(e) {
                                de(J.SpadeEventType.RaidUpsellImpression, e)
                            }({
                                sourceChannelID: this.props.data.sourceChannel.id,
                                targetChannelID: this.props.data.targetChannel.id
                            }), s.m.set(me, !0)
                        }
                    }, t.prototype.render = function() {
                        var e = this.props.data.loading,
                            t = this.channelDisplayName;
                        return e || !t || !this.isViewersCountWithinRange || this.isAttemptingToHostSelf ? null : a.createElement(v.Xa, {
                            className: "raid-upsell-prompt",
                            padding: 1,
                            margin: {
                                x: 2
                            }
                        }, a.createElement(v.Xa, {
                            display: v.X.Flex,
                            justifyContent: v.Wa.Between
                        }, a.createElement(v.Xa, {
                            display: v.X.Flex
                        }, a.createElement(v.Xa, {
                            className: "raid-upsell-prompt__notification",
                            margin: {
                                top: .5
                            }
                        }, a.createElement(v.sb, {
                            asset: v.tb.NotificationInfo
                        })), a.createElement(v.Xa, {
                            margin: {
                                x: 1
                            }
                        }, a.createElement(v.W, {
                            type: v.Vb.H6,
                            bold: !0
                        }, Object(s.d)("How about raiding {channelDisplayName}?", {
                            channelDisplayName: t
                        }, "RaidUpsellPrompt")), a.createElement(v.W, {
                            type: v.Vb.P,
                            color: v.O.Alt2
                        }, Object(s.d)("Now you can raid whenever you want instead of waiting 30 seconds.", "RaidUpsellPrompt")))), a.createElement(v.Eb, {
                            color: v.O.OverlayAlt
                        }, a.createElement(v.A, i.__assign({}, he, {
                            icon: v.tb.Close,
                            size: v.B.Small,
                            ariaLabel: Object(s.d)("Dismiss", "RaidUpsellPrompt"),
                            onClick: this.handleDismissUpsell
                        })))), a.createElement(fe, {
                            onSendHostMsg: this.handleSendHostMsgFromUpsell,
                            onSendRaidMsg: this.handleSendRaidMsg
                        }))
                    }, Object.defineProperty(t.prototype, "channelDisplayName", {
                        get: function() {
                            var e = this.props.data.targetChannel;
                            return e && e.displayName
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(t.prototype, "isViewersCountWithinRange", {
                        get: function() {
                            var e = this.props.data.sourceChannel,
                                t = e && e.stream && e.stream.viewersCount;
                            return t && t >= 3 && t < 1e5
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(t.prototype, "isAttemptingToHostSelf", {
                        get: function() {
                            return this.props.targetChannelLogin === this.props.sourceChannelLogin
                        },
                        enumerable: !0,
                        configurable: !0
                    }), t
                }(a.Component),
                fe = function(e) {
                    return a.createElement(v.Xa, {
                        display: v.X.Flex,
                        justifyContent: v.Wa.End,
                        margin: {
                            top: 1
                        }
                    }, a.createElement(v.Xa, {
                        margin: {
                            right: 1
                        }
                    }, a.createElement(v.z, {
                        type: v.F.Hollow,
                        size: v.D.Small,
                        onClick: e.onSendHostMsg
                    }, a.createElement(v.Xa, {
                        padding: {
                            x: 2
                        }
                    }, Object(s.d)("Host", "RaidUpsellPrompt")))), a.createElement(v.Xa, null, a.createElement(v.z, {
                        size: v.D.Small,
                        onClick: e.onSendRaidMsg
                    }, a.createElement(v.Xa, {
                        padding: {
                            x: 2
                        }
                    }, Object(s.d)("Raid", "RaidUpsellPrompt")))))
                },
                be = Object(c.a)(ce, {
                    options: function(e) {
                        return {
                            variables: {
                                targetChannelLogin: e.targetChannelLogin,
                                sourceChannelLogin: e.sourceChannelLogin
                            }
                        }
                    }
                })(ge),
                ve = n("gTu3"),
                ke = n("RcPG"),
                Ce = n("YXxK"),
                ye = n("WytW");
            ! function(e) {
                e.ON = "on", e.STAFF_ONLY = "staff"
            }(pe || (pe = {}));
            var Ee, Se, Ne = function(e) {
                    var t = s.b.get("chat_input_box_verified_only_restriction_enabled", "off"),
                        n = !1;
                    return t === pe.ON ? n = !0 : t === pe.STAFF_ONLY && e && (n = !0), s.m.get("overrideRestrictedChatInputFeatureFlag", n)
                },
                _e = n("lNGo"),
                Oe = n("ySk3"),
                we = n("x0gr"),
                Me = n("mmRu"),
                De = n("cpJf"),
                Ie = n("GzyO"),
                Te = n("EOIh"),
                Re = n("FS60"),
                je = "bits_automod_cheering_enabled",
                Ae = /\S/;
            ! function(e) {
                e[e.Bits = 0] = "Bits", e[e.ChatRestriction = 1] = "ChatRestriction", e[e.Emotes = 2] = "Emotes", e[e.None = 3] = "None"
            }(Se || (Se = {}));
            var Ue = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.cancelDelayedSend = null, n.confirmDelayedSend = null, n.hasConfirmedInEmbed = !1, n.hasSeenConfirmationPrompt = !1, n.incrementAndHideAutomodTooltipCounter = function() {
                        var e = s.m.get("automodChatCogTooltipSeenNumTimes", 0) + 1;
                        s.m.set("automodChatCogTooltipSeenNumTimes", e), n.setState({
                            showAutomodSettingsTooltip: !1
                        })
                    }, n.setChatInputRef = function(e) {
                        return n.chatInputRef = e
                    }, n.setAutocompleteInputRef = function(e) {
                        return n.autocompleteInputRef = e
                    }, n.onChatSettingsToggle = function(e) {
                        n.handleModerationSettingsToggle(e), e || Object(we.b)({
                            channelLogin: n.props.channelLogin,
                            isHostMode: n.props.isHostMode
                        })
                    }, n.handleModerationSettingsToggle = function(e) {
                        if (!e) {
                            var t = s.m.get("autoModToolTipSeen", 0) + 1;
                            n.setState({
                                showAutomodSettingsTooltip: !1
                            }), s.m.set("autoModToolTipSeen", t)
                        }
                    }, n.onKeyDown = function(e) {
                        var t = e.charCode || e.keyCode;
                        switch (n.props.onKeyDown && t !== O.a.Enter && n.props.onKeyDown(e), n.props.bitsSendHasError && n.props.clearBitsSendError(), t) {
                            case O.a.Enter:
                                return void(e.shiftKey || (e.preventDefault(), n.onMessageSend()));
                            case O.a.Esc:
                                return void(n.state.showCard === Se.Bits && n.setState({
                                    showCard: Se.None
                                }));
                            default:
                                return
                        }
                    }, n.onMessageValueUpdate = function(e) {
                        n.setState({
                            value: e
                        })
                    }, n.onInputFocus = function() {
                        n.props.onInputFocus && n.props.onInputFocus(), n.state.hasInteractedOrPageload || n.setState({
                            hasInteractedOrPageload: !0
                        })
                    }, n.onMouseEnterInput = function() {
                        n.state.hasInteractedOrPageload || n.setState({
                            hasInteractedOrPageload: !0
                        })
                    }, n.onChatCommand = function(e) {
                        n.props.onChatCommand(e), n.trackChatEvent()
                    }, n.confirmEmbedAction = function(e, t, i) {
                        var a = n,
                            r = a.hasConfirmedInEmbed;
                        if (a.hasSeenConfirmationPrompt) return r;
                        var o = window.confirm(n.confirmationMessage(e, t, i));
                        return n.hasSeenConfirmationPrompt = !0, n.hasConfirmedInEmbed = o, n.setState({
                            hasSeenAndRejectedEmbedPrompt: !o
                        }), o
                    }, n.confirmationMessage = function(e, t, n) {
                        return Object(s.d)('Hi {displayName}. You are attempting to send "{message}" in {channelLogin}\'s chat via an embedded version of Twitch Chat. Are you sure you want to do this? This setting will persist until you refresh the page', {
                            displayName: e,
                            message: t,
                            channelLogin: n
                        }, "ChatInput")
                    }, n.onMessageSend = function() {
                        return i.__awaiter(n, void 0, void 0, function() {
                            var e, t, n, a, r, o, l, c, d = this;
                            return i.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        return e = this.chatRestrictedReason(), this.isTypingCommand() || this.isTypingCheer() || null === e ? this.props.authToken ? this.props.channelID ? (t = Ae.test(this.state.value)) ? this.state.isSendingBits ? (s.k.debug("[ChatInput] Supressing chat message send. Bits spending is still in progress."), [2]) : this.props.isEmbedded && (this.props.isCurrentUserModerator || this.props.data && this.props.data.currentUser && this.props.data.currentUser.isPartner) && this.props.sessionUser && !this.confirmEmbedAction(this.props.sessionUser.displayName, this.state.value || "", this.props.channelLogin) ? (s.k.debug("[ChatInput] Embed Confirmation check failed. Not sending message"), [2]) : (this.resetAndUpdateRenderSentChatMessageEvent(), this.state.value.split(/\s+/).forEach(function(e) {
                                            var t = d.props.emoteMap && d.props.emoteMap[e];
                                            t && Object(Ie.a)(t)
                                        }), this.props.data && this.props.data.currentUser ? 0 === (n = Object(V.a)(this.state.messageCheers)).total ? (this.sendRegularMessage(), [2]) : this.props.data.channel ? this.props.data.channel.cheer ? this.props.data.channel.cheer.settings ? this.props.bitsConfig ? (a = Object(V.f)({
                                            messageBits: n,
                                            balance: this.props.data.currentUser.bitsBalance,
                                            cheerMinimumBits: this.props.data.channel.cheer.settings.cheerMinimumBits,
                                            emoteMinimumBits: this.props.data.channel.cheer.settings.emoteMinimumBits,
                                            inputValue: this.state.value,
                                            bitsConfig: this.props.bitsConfig
                                        })).canSpend ? this.props.sendCheer ? (this.setState({
                                            isSendingBits: !0
                                        }), n.total >= H.r ? [4, new Promise(function(e) {
                                            var t = setTimeout(e, H.v.UNDO_PROMPT_DURATION),
                                                n = function(n) {
                                                    void 0 === n && (n = !1), clearTimeout(t), d.cancelDelayedSend = null, d.confirmDelayedSend = null, e(n)
                                                };
                                            d.cancelDelayedSend = function() {
                                                return n(!0)
                                            }, d.confirmDelayedSend = function() {
                                                return n(!1)
                                            }
                                        })] : [3, 2]) : (s.k.warn("[Chat Input] No GraphQL mutation for sending cheers attached."), [2]) : (s.k.warn("[Chat Input] Spending bits forbidden.", a), [2]) : (s.k.warn("[Chat Input] Bits Config is undefined"), [2]) : (s.k.warn("[Chat Input] Cheer Settings are undefined."), [2]) : (s.k.warn("[Chat Input] Cheer is null."), [2]) : (s.k.warn("[Chat Input] User is null."), [2]) : (this.sendRegularMessage(), [2])) : (s.k.debug("[ChatInput] Supressing chat message send. Input failed to pass validation.", {
                                            hasSendableInput: t,
                                            value: this.state.value
                                        }), [2]) : (s.k.warn("[ChatInput] Attempt to send a message before channel ID"), [2]) : (this.handleLogin(), [2]) : (this.setState({
                                            showCard: Se.ChatRestriction
                                        }), [2]);
                                    case 1:
                                        if (i.sent()) return this.setState({
                                            isSendingBits: !1
                                        }), this.chatInputRef.focus(), [2];
                                        i.label = 2;
                                    case 2:
                                        r = Object(I.a)(), o = f.b.get(je, w.a.Off), i.label = 3;
                                    case 3:
                                        return i.trys.push([3, 5, , 6]), l = {
                                            id: r,
                                            targetID: this.props.channelID,
                                            bits: n.total,
                                            content: this.state.value,
                                            isAutoModEnabled: o === w.a.On
                                        }, o === w.a.On && (l.shouldCheerAnyway = this.props.shouldSendAutoModdedCheer), this.props.clearBitsSendError(), [4, this.props.sendCheer({
                                            variables: {
                                                input: l
                                            }
                                        })];
                                    case 4:
                                        return (c = i.sent()).data.sendCheer && c.data.sendCheer.validationError ? (this.props.onSendCheerError && this.props.onSendCheerError(c.data.sendCheer.validationError), this.setState({
                                            isSendingBits: !1,
                                            showCard: Se.None
                                        }), this.chatInputRef && this.chatInputRef.focus(), [2]) : [3, 6];
                                    case 5:
                                        return i.sent(), this.props.onSendCheerError && this.props.onSendCheerError({
                                            code: h.P.UNKNOWN
                                        }), this.setState({
                                            isSendingBits: !1
                                        }), this.chatInputRef && this.chatInputRef.focus(), [2];
                                    case 6:
                                        return this.props.onSendCheerSuccess(), this.setState({
                                            isSendingBits: !1,
                                            showCard: Se.None,
                                            value: ""
                                        }), this.chatInputRef && this.chatInputRef.focus(), this.autocompleteInputRef && this.autocompleteInputRef.setValue(""), [2]
                                }
                            })
                        })
                    }, n.handleAuthContextBalloonClose = function() {
                        n.setState({
                            showAuthContextBalloon: !1
                        }), Object(U.n)({
                            page: U.e.Bubble,
                            source: D.a.Chat,
                            target: U.d.Exit,
                            action: U.c.Click
                        })
                    }, n.onEmotePickerToggle = function() {
                        n.setState(function(e) {
                            return e.messageCheers.length ? e : {
                                showCard: e.showCard === Se.Emotes ? Se.None : Se.Emotes
                            }
                        })
                    }, n.onClickOut = function() {
                        n.setState(function(e) {
                            return e.showCard === Se.Emotes ? {
                                showCard: Se.None
                            } : e
                        })
                    }, n.onBitsIconClick = function() {
                        n.state.showCard === Se.Bits ? n.trackBitsCardInteraction(G.a.CloseCard) : n.trackBitsCardInteraction(G.a.OpenCard), n.setState({
                            showCard: n.state.showCard === Se.Bits ? Se.None : Se.Bits
                        })
                    }, n.onShowViewersList = function() {
                        n.state.showCard !== Se.None && n.setState({
                            showCard: Se.None
                        }), n.props.showViewersList()
                    }, n.onBitsClose = function() {
                        n.state.showCard === Se.Bits && n.setState({
                            showCard: Se.None
                        }), n.trackBitsCardInteraction(G.a.CloseCard)
                    }, n.onChatRestrictionBalloonClose = function() {
                        n.state.showCard === Se.ChatRestriction && n.setState({
                            showCard: Se.None
                        })
                    }, n.onChatRestrictionBalloonOpen = function() {
                        n.setState({
                            showCard: Se.ChatRestriction
                        })
                    }, n.onClickEmote = function(e) {
                        var t = n.state.value;
                        n.state.value && n.state.value.length > 0 && !n.state.value.endsWith(" ") && (t += " "), t += e + " ", n.autocompleteInputRef && n.autocompleteInputRef.setValue(t)
                    }, n.onEmotePickerDataLoaded = function(e) {
                        e && n.setState({
                            showEmotePickerButton: !0
                        })
                    }, n.trackBitsCardInteraction = function(e, t) {
                        var i = {
                            actionName: e,
                            emoteType: t && t.emoteType,
                            emoteLevel: t && t.emoteLevel,
                            location: t && t.location,
                            displayedBalance: n.props.data && n.props.data.currentUser && n.props.data.currentUser.bitsBalance || 0
                        };
                        Object(G.h)(i)
                    }, n.resetAndUpdateRenderSentChatMessageEvent = function() {
                        n.props.latencyTracking.resetCustomEvents(R.a.Chat);
                        var e = n.props.latencyTracking.registerCustomEvent({
                            benchmark: 400,
                            group: R.a.Chat,
                            key: R.b.ChatRenderSent,
                            label: R.c.RenderSent,
                            start: R.d.Registration
                        });
                        n.props.updateRenderSentChatMessageEvent(e)
                    }, n.isCurrentUserBanned = function() {
                        if (n.props.data && !n.props.data.loading && !n.props.data.error && n.props.data.channel) {
                            var e = n.props.data.channel.self;
                            if (e && e.banStatus && e.banStatus.isPermanent) return !0
                        }
                        return !1
                    }, n.chatRestrictedReason = function() {
                        var e;
                        if (!n.props.data || !n.props.data.channel) return null;
                        var t = ((e = {})[h.l.SUBSCRIBERS_ONLY] = n.props.subsOnlyMode, e[h.l.VERIFIED_ONLY] = !(!n.props.data.channel.chatSettings || !n.props.data.channel.chatSettings.requireVerifiedAccount), e[h.l.FOLLOWERS_ONLY] = !1, e[h.l.SLOW_MODE] = !1, e);
                        if (n.verifiedOnlyRestrictionsEnabled() || (t[h.l.VERIFIED_ONLY] = !1), n.props.data.channel.self && n.props.data.channel.self.chatRestrictedReasons)
                            for (var i = 0, a = n.props.data.channel.self.chatRestrictedReasons; i < a.length; i++) {
                                var r = a[i];
                                if (t[r]) return r
                            }
                        return null
                    }, n.isTypingCommand = function() {
                        return "/" === n.state.value.substr(0, 1) && "/me" !== n.state.value.substr(0, 3)
                    }, n.isTypingCheer = function() {
                        return n.state.messageCheers.length > 0
                    }, n.verifiedOnlyRestrictionsEnabled = function() {
                        return Ne(n.props.isStaff)
                    }, n.state = {
                        hasInteractedOrPageload: t.firstPageLoaded,
                        hasSeenAndRejectedEmbedPrompt: !1,
                        isSendingBits: !1,
                        messageCheers: [],
                        showAuthContextBalloon: !1,
                        showBuyBits: !1,
                        showCard: Se.None,
                        showEmotePickerButton: !!t.authToken,
                        showAutomodSettingsTooltip: !1,
                        value: ""
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentWillUpdate = function(e, t) {
                    if (t.value !== this.state.value && this.props.bitsConfig) {
                        var n = [];
                        Object(W.f)(t.value, this.props.bitsConfig, !1).forEach(function(e) {
                            e.type === ke.a.Emote && n.push(e.content)
                        }), n.length && t.showCard === Se.Emotes && this.setState({
                            showCard: Se.None
                        }), this.setState({
                            messageCheers: Object(W.b)(n, this.props.bitsConfig)
                        })
                    }
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this;
                    !this.props.firstPageLoaded && e.firstPageLoaded && (this.setState({
                        hasInteractedOrPageload: !0
                    }), this.props.isCurrentUserModerator && s.m.get("automodChatCogTooltipSeenNumTimes", 0) < 3 && this.setState({
                        showAutomodSettingsTooltip: !0
                    }, function() {
                        setTimeout(t.incrementAndHideAutomodTooltipCounter, 15e3)
                    })), this.props.data && !this.props.data.loading && (e.pubsub.messages.subscriptionInfo !== this.props.pubsub.messages.subscriptionInfo && this.props.data.refetch(), e.pubsub.messages.userProperties && e.pubsub.messages.userProperties !== this.props.pubsub.messages.userProperties && void 0 !== e.pubsub.messages.userProperties.changed.email_verified && setTimeout(this.props.data.refetch, 2e3))
                }, t.prototype.componentDidUpdate = function() {
                    this.props.shouldSendAutoModdedCheer && this.onMessageSend()
                }, t.prototype.render = function() {
                    if (this.isCurrentUserBanned()) return a.createElement(v.Xa, {
                        padding: {
                            bottom: 2,
                            x: 2
                        }
                    }, a.createElement(v.Eb, {
                        padding: {
                            bottom: 1,
                            x: 2
                        },
                        borderTop: !0
                    }), a.createElement(v.Xa, {
                        textAlign: v.Rb.Center
                    }, a.createElement(v.W, {
                        color: v.O.Alt,
                        "data-test-selector": "current-user-banned-text",
                        bold: !0
                    }, Object(s.d)("You are currently banned from this channel.", "ChatInput"))), this.renderButtonContainer(!0));
                    if (this.state.hasSeenAndRejectedEmbedPrompt) return a.createElement(v.Xa, {
                        className: "chat-input",
                        display: this.props.hidden ? v.X.Hide : v.X.Block,
                        padding: {
                            x: 2,
                            bottom: 2
                        }
                    }, a.createElement(v.W, {
                        "data-test-selector": "chat-embed-denied-text"
                    }, Object(s.d)("You rejected the prompt to send messages in this embedded version of Twitch Chat. If this was done in error, please refresh the page.", "ChatInput")), this.renderButtonContainer(!0));
                    var e = [];
                    this.props.bitsConfig && e.push(a.createElement(v.A, {
                        key: "bits",
                        icon: v.tb.Bits,
                        ariaLabel: Object(s.d)("Bits", "ChatInput"),
                        type: v.C.Secondary,
                        onClick: this.onBitsIconClick,
                        "data-a-target": "bits-button"
                    })), this.state.showEmotePickerButton && e.push(a.createElement(Me.b, {
                        key: "emote-picker",
                        onClick: this.onEmotePickerToggle,
                        isActive: this.state.showCard === Se.Emotes
                    }));
                    var t = null;
                    this.state.hasInteractedOrPageload && (t = a.createElement(Me.c, {
                        channelOwnerID: this.props.channelID,
                        emotePickerSource: De.a.Chat,
                        onClickEmote: this.onClickEmote,
                        onLoad: this.onEmotePickerDataLoaded,
                        toggleVisibility: this.onEmotePickerToggle,
                        visible: this.state.showCard === Se.Emotes
                    }));
                    var n = null;
                    this.state.hasInteractedOrPageload && this.props.bitsConfig && (n = a.createElement(B.a, {
                        bitsConfig: this.props.bitsConfig,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        currentCheers: this.state.messageCheers,
                        isSending: this.state.isSendingBits,
                        isStaff: this.props.isStaff,
                        onCancelSend: this.cancelDelayedSend,
                        onClickCheermote: this.onClickEmote,
                        onConfirmSend: this.confirmDelayedSend,
                        onUserClose: this.onBitsClose,
                        trackBitsCardInteraction: this.trackBitsCardInteraction,
                        visible: this.state.showCard === Se.Bits,
                        cheerMessageAutoModded: this.props.isTextInputDisabled,
                        bitsSendErrorCode: this.props.bitsSendErrorCode,
                        bitsSendHasError: this.props.bitsSendHasError,
                        chatMessage: this.state.value
                    }));
                    var i = null;
                    this.props.data && this.props.data.channel && this.props.data.channel.cheer && this.props.data.channel.cheer.hashtags && this.state.messageCheers.length > 0 && (i = a.createElement(P, {
                        hashTags: this.props.data.channel.cheer.hashtags
                    }));
                    var r = null;
                    this.props.moderatedMessageParts && this.props.moderatedMessageParts.length > 0 && (r = a.createElement(le, {
                        moderatedMessageParts: this.props.moderatedMessageParts
                    }));
                    var o = this.chatRestrictedReason(),
                        l = !(this.isTypingCommand() || this.isTypingCheer()) && null !== o,
                        c = null;
                    this.props.data && !this.props.data.loading && null !== o && (c = a.createElement(re, {
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        closeBalloon: this.onChatRestrictionBalloonClose,
                        openBalloon: this.onChatRestrictionBalloonOpen,
                        reason: o,
                        showBalloon: this.state.showCard === Se.ChatRestriction
                    }));
                    var d = null;
                    return this.state.showAuthContextBalloon && (d = a.createElement(v.u, {
                        show: this.state.showAuthContextBalloon,
                        direction: v.v.TopLeft,
                        size: v.w.Medium
                    }, a.createElement(N.a, {
                        onClickOut: this.handleAuthContextBalloonClose
                    }, a.createElement(A.a, {
                        source: D.a.Chat,
                        targetUserDisplayName: this.props.channelDisplayName,
                        onClose: this.handleAuthContextBalloonClose
                    })))), a.createElement(N.a, {
                        onClickOut: this.onClickOut
                    }, a.createElement(v.Xa, {
                        className: "chat-input",
                        display: this.props.hidden ? v.X.Hide : v.X.Block,
                        padding: {
                            x: 2,
                            bottom: 2
                        }
                    }, r, c, a.createElement(v.Qa, {
                        display: this.props.moderatedMessageParts ? v.X.Hide : v.X.Block,
                        position: v.jb.Relative,
                        zIndex: v.ic.Default
                    }, a.createElement("div", {
                        onMouseEnter: this.onMouseEnterInput
                    }, t, n, d, a.createElement(L.b, {
                        componentType: L.a.TextArea,
                        suggestionSource: L.c.Chat,
                        onValueUpdate: this.onMessageValueUpdate,
                        onFocus: this.onInputFocus,
                        onKeyDown: this.onKeyDown,
                        componentRefDelegate: this.setChatInputRef,
                        refDelegate: this.setAutocompleteInputRef,
                        paddingRight: 30 * e.length,
                        placeholder: Object(s.d)("Send a message", "ChatInput"),
                        noResize: !0,
                        "data-a-target": "chat-input",
                        "data-test-selector": "chat-input",
                        disabled: this.state.isSendingBits || this.props.isTextInputDisabled,
                        containerElement: this.props.containerElement
                    }, a.createElement(L.d, {
                        emotes: this.props.emotes
                    }), a.createElement(Z, null), i), a.createElement(v.Xa, {
                        position: v.jb.Absolute,
                        attachRight: !0,
                        attachTop: !0
                    }, e))), this.renderButtonContainer(l)))
                }, t.prototype.renderButtonContainer = function(e) {
                    return void 0 === e && (e = !1), a.createElement(v.Xa, {
                        className: "chat-input__buttons-container",
                        display: v.X.Flex,
                        justifyContent: v.Wa.Between,
                        margin: {
                            top: 1
                        }
                    }, a.createElement(v.Xa, {
                        display: v.X.Flex,
                        flexDirection: v.Aa.Row
                    }, a.createElement(v.Xa, {
                        position: v.jb.Relative
                    }, a.createElement(z.a, {
                        onToggle: this.onChatSettingsToggle,
                        onShowChatRules: this.props.onShowChatRules,
                        channelLogin: this.props.channelLogin,
                        isHostMode: this.props.isHostMode,
                        authToken: this.props.authToken,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        onChatCommand: this.onChatCommand,
                        isPopout: this.props.isPopout,
                        isEmbedded: this.props.isEmbedded,
                        channelID: this.props.channelID,
                        containerElement: this.props.containerElement
                    }), this.renderChatCogTooltips()), a.createElement(v.A, {
                        ariaLabel: Object(s.d)("Users in Chat", "ChatInput"),
                        "data-a-target": "chat-viewer-list",
                        "data-test-selector": "chat-viewer-list",
                        icon: v.tb.ViewerList,
                        onClick: this.onShowViewersList
                    })), this.renderSendButton(e))
                }, t.prototype.renderSendButton = function(e) {
                    var t;
                    return void 0 === e && (e = !1), t = this.state.value && null !== Object(ye.p)(this.state.value) ? Object(s.d)("Whisper", "ChatInput") : Object(s.d)("Chat", "ChatInput"), a.createElement(v.z, {
                        onClick: this.onMessageSend,
                        "data-a-target": "chat-send-button",
                        "data-test-selector": "chat-send-button",
                        disabled: this.state.isSendingBits || this.props.isTextInputDisabled || e
                    }, t)
                }, t.prototype.renderChatCogTooltips = function() {
                    return this.state.showAutomodSettingsTooltip ? a.createElement(oe, null) : null
                }, t.prototype.sendRegularMessage = function() {
                    var e = this;
                    if (this.props.onSendMessage) {
                        var t = Object(ye.m)(this.state.value);
                        if (t && function() {
                                var e = "test" === s.p.experiments.getAssignment(ue.b.RaidUpsell),
                                    t = s.m.get(me, !1);
                                return e && !t
                            }()) return this.setState({
                            showCard: Se.None
                        }, function() {
                            e.trackChatEvent(), e.autocompleteInputRef && e.autocompleteInputRef.setValue(""), e.props.openRaidUpsellFromHost(t.recipientLogin)
                        });
                        this.props.onSendMessage(this.state.value) && (this.trackChatEvent(), this.trackMentions(), this.autocompleteInputRef && this.autocompleteInputRef.setValue(""), this.setState({
                            showCard: Se.None
                        }))
                    }
                }, t.prototype.handleLogin = function() {
                    var e = Object(X.b)();
                    e !== X.a.Balloon ? e === X.a.TwoStep ? this.props.login({
                        modalType: U.e.TwoStep,
                        targetChannel: this.props.channelDisplayName
                    }) : e === X.a.Split ? this.props.login({
                        modalType: U.e.Combined,
                        targetChannel: this.props.channelDisplayName
                    }) : this.props.login() : this.state.showAuthContextBalloon || (this.setState({
                        showAuthContextBalloon: !0
                    }), Object(U.o)({
                        page: U.e.Bubble,
                        source: D.a.Chat
                    }))
                }, t.prototype.trackChatEvent = function() {
                    Object(_e.a)({
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        isHostMode: this.props.isHostMode,
                        player: this.props.isPopout ? Ce.a.Embed : Ce.a.Web,
                        subOnlyMode: this.props.subsOnlyMode,
                        emotePickerSessionID: this.props.emotePickerSessionID
                    })
                }, t.prototype.trackMentions = function() {
                    if (this.state.value && this.props.sessionUser)
                        for (var e = 0, t = Object(M.a)(this.state.value, {
                                mentions: {
                                    senderLogin: this.props.sessionUser.login,
                                    sessionUser: this.props.sessionUser
                                }
                            }); e < t.length; e++) {
                            var n = t[e];
                            n.type === ke.a.Mention && n.content.currentUserMentionRelation !== ve.a.Recipient && Object(Oe.a)({
                                channelLogin: this.props.channelLogin,
                                isHostMode: this.props.isHostMode,
                                mentionedUserDisplayName: n.content.recipient,
                                userLogin: this.props.sessionUser.login
                            })
                        } else s.k.warn("[ChatInput] trackMentions was called in a nonsensical state.")
                }, t
            }(a.Component);

            function Le(e) {
                return !(e.data && !e.data.loading && !e.data.error && e.data.currentUser)
            }
            var Be = Object(E.compose)(Object(c.a)(Re, {
                    name: "sendCheer"
                }), Object(c.a)(Te, {
                    skip: function(e) {
                        return !e.firstPageLoaded
                    }
                }), Object(_.a)([{
                    topic: function(e) {
                        return Object(p.H)(e.data.currentUser && e.data.currentUser.id || "")
                    },
                    mapMessageTypesToProps: {
                        "*": "subscriptionInfo"
                    },
                    skip: Le
                }, {
                    topic: function(e) {
                        return Object(p.G)(e.data.currentUser && e.data.currentUser.id || "")
                    },
                    mapMessageTypesToProps: (Ee = {}, Ee[u.PubsubMessageType.UserPropertiesUpdate] = "userProperties", Ee),
                    skip: Le
                }]), Object(te.b)("ChatInput", {
                    autoReportInteractive: !0
                }), Object(S.connect)(function(e) {
                    return {
                        followerDuration: e.chat.followerDuration,
                        followerMode: e.chat.followerMode,
                        slowMode: e.chat.slowMode,
                        slowModeDuration: e.chat.slowModeDuration,
                        subsOnlyMode: e.chat.subsOnlyMode,
                        emotePickerSessionID: e.chat.emotePickerSessionID,
                        sessionUser: Object(j.e)(e)
                    }
                }, function(e) {
                    return Object(o.bindActionCreators)({
                        login: function(e) {
                            return Object(T.e)(D.a.Chat, e)
                        },
                        updateRenderSentChatMessageEvent: q.R
                    }, e)
                }))(Ue),
                xe = n("r2XO"),
                Fe = (n("9Rmp"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onClickConfirm = function() {
                            t.markRoomSeen(), t.props.onCloseChatRules()
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return a.createElement(v.Xa, {
                            className: "chat-rules",
                            position: v.jb.Relative
                        }, a.createElement(v.Eb, {
                            border: !0,
                            background: v.r.Base,
                            margin: {
                                bottom: 1
                            }
                        }, a.createElement(v.Xa, {
                            padding: 1
                        }, a.createElement(v.Xa, {
                            margin: {
                                bottom: 1
                            }
                        }, a.createElement(v.W, {
                            type: v.Vb.H6
                        }, Object(s.d)("Chat Rules:", "ChatRules"))), a.createElement(v.Xa, null, a.createElement("ul", null, this.props.chatRules.map(function(e, t) {
                            return a.createElement("li", {
                                key: t
                            }, e)
                        }))), a.createElement(v.Xa, {
                            margin: {
                                top: 1
                            },
                            display: v.X.Flex,
                            justifyContent: v.Wa.Center
                        }, a.createElement(v.z, {
                            size: v.D.Small,
                            onClick: this.onClickConfirm
                        }, Object(s.d)("Ok, got it!", "ChatRules"))))))
                    }, t.prototype.markRoomSeen = function() {
                        var e = s.m.get("chat_rules_shown", {});
                        e[this.props.channelLogin] = !0, s.m.set("chat_rules_shown", e)
                    }, t
                }(a.Component)),
                Pe = n("8in3"),
                He = n("Y3y8"),
                We = (n("7NxT"), n("VS9Q")),
                Ve = n("j+2s");
            n("kPCN");
            n.d(t, "a", function() {
                return Ge
            }), n.d(t, "b", function() {
                return Ke
            });
            var Ge = "chat-room-header-label",
                Xe = "chat_rules_shown",
                ze = s.k.withCategory("chat-room"),
                qe = l.a.wrap(function() {
                    return n.e(202).then(n.bind(null, "A39y"))
                }, "ChatViewers"),
                Qe = l.a.wrap(function() {
                    return Promise.all([n.e(0), n.e(201)]).then(n.bind(null, "Y9qK"))
                }, "NewChatterRitual", {
                    failSilently: !0,
                    placeholder: null
                }),
                Ye = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        n.hasAcceptedModerationConfirmation = !1, n.closeViewersList = function() {
                            n.setState({
                                showViewersList: !1
                            })
                        }, n.showViewersList = function() {
                            n.props.closeRoomPicker && n.props.closeRoomPicker(), n.setState({
                                showViewersList: !0
                            })
                        }, n.confirmModerationAction = function() {
                            return !(n.props.isEmbedded && !n.hasAcceptedModerationConfirmation) || (n.hasAcceptedModerationConfirmation = window.confirm(Object(s.d)("Do you want to enable the ability to timeout and ban on embedded version of Twitch Chat? This setting will persist until you refresh the page.", "ChatRoom")), n.hasAcceptedModerationConfirmation)
                        }, n.onChatInputFocus = function() {
                            var e = s.m.get(Xe, {});
                            n.props.chatRules && n.props.chatRules.length > 0 && !e[n.props.channelLogin] && n.onShowChatRules()
                        }, n.onShowChatRules = function() {
                            n.props.authToken && n.props.onShowChatRules()
                        }, n.setChatListElement = function(e) {
                            n.setState({
                                chatListElement: e
                            })
                        }, n.shouldHideChatInput = function() {
                            return n.state.showViewersList
                        }, n.openRaidUpsellFromHost = function(e) {
                            return n.closeRaidUpsell(function() {
                                n.setState({
                                    raidUpsellTarget: e
                                })
                            })
                        }, n.closeRaidUpsell = function(e) {
                            return n.setState({
                                raidUpsellTarget: null
                            }, function() {
                                e && e()
                            })
                        }, n.onSendCheerError = function(e) {
                            e.code !== h.P.AUTO_MOD_MESSAGE ? n.setState({
                                bitsSendErrorCode: e.code,
                                bitsSendHasError: !0
                            }) : n.setState({
                                showCheerAutoModPrompt: !0,
                                shouldSendAutoModdedCheer: !1,
                                moderatedMessageParts: Object(We.e)(e.messageContent.fragments)
                            })
                        }, n.clearBitsSendError = function() {
                            n.setState({
                                bitsSendErrorCode: h.P.UNKNOWN,
                                bitsSendHasError: !1
                            })
                        }, n.clearCheerAutoModPrompt = function() {
                            n.setState({
                                showCheerAutoModPrompt: !1,
                                shouldSendAutoModdedCheer: !1,
                                moderatedMessageParts: null
                            })
                        }, n.onCheerAnyway = function() {
                            n.setState({
                                showCheerAutoModPrompt: !1,
                                shouldSendAutoModdedCheer: !0
                            })
                        };
                        var i = new g.c([], [], n.props.channelLogin);
                        return n.state = {
                            showViewersList: !1,
                            raidUpsellTarget: null,
                            badgeSets: i,
                            showCheerAutoModPrompt: !1,
                            shouldSendAutoModdedCheer: !1,
                            bitsSendErrorCode: h.P.UNKNOWN,
                            bitsSendHasError: !1,
                            moderatedMessageParts: null
                        }, n
                    }
                    return i.__extends(t, e), t.prototype.componentDidUpdate = function(e) {
                        this.props.channelLogin !== e.channelLogin && this.props.onCloseChatRules()
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.onCloseChatRules()
                    }, t.prototype.render = function() {
                        if (this.props.isBackground) return null;
                        if (this.props.isHidden && !this.props.isPopout) return a.createElement(v.Eb, {
                            alignItems: v.f.Center,
                            borderLeft: !0,
                            display: v.X.Flex,
                            flexDirection: v.Aa.Column,
                            fullHeight: !0,
                            fullWidth: !0,
                            justifyContent: v.Wa.Center,
                            color: v.O.Base,
                            position: v.jb.Relative
                        }, a.createElement(v.Xa, {
                            margin: {
                                bottom: 1
                            }
                        }, a.createElement(v.W, {
                            fontSize: v.Ca.Size5
                        }, Object(s.d)("Chat is hidden.", "ChatRoom"))), a.createElement(v.z, {
                            onClick: this.props.onChatUnhide,
                            "data-a-target": "show-chat-button",
                            "data-test-selector": "show-chat-button"
                        }, Object(s.d)("Show Chat", "ChatRoom")));
                        var e = this.props.bitsConfig && this.props.firstPageLoaded && a.createElement(C.a, {
                                badgeData: this.state.badgeSets,
                                bitsConfig: this.props.bitsConfig,
                                blockLinks: this.props.blockLinks,
                                channelID: this.props.channelID,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin,
                                userID: this.props.userID
                            }),
                            t = this.state.showViewersList && a.createElement(v.Eb, {
                                attachBottom: !0,
                                attachLeft: !0,
                                attachRight: !0,
                                attachTop: !0,
                                background: v.r.Alt2,
                                position: v.jb.Absolute,
                                zIndex: v.ic.Default
                            }, a.createElement(v.Xa, {
                                padding: {
                                    y: 1
                                }
                            }, a.createElement(v.Xa, {
                                position: v.jb.Absolute,
                                attachLeft: !0,
                                margin: {
                                    left: 1
                                }
                            }, a.createElement(v.A, {
                                icon: v.tb.Close,
                                ariaLabel: Object(s.d)("Close", "ChatRoom"),
                                onClick: this.closeViewersList,
                                "data-test-selector": "close-viewer-list"
                            }))), a.createElement(qe, {
                                channelLogin: this.props.channelLogin,
                                closeViewersList: this.closeViewersList,
                                isCurrentUserBanned: this.props.currentUserBannedStatusData && this.props.currentUserBannedStatusData.channel && this.props.currentUserBannedStatusData.channel.self && this.props.currentUserBannedStatusData.channel.self.banStatus && this.props.currentUserBannedStatusData.channel.self.banStatus.isPermanent || !1,
                                "data-test-selector": "chat-viewers"
                            })),
                            n = !!this.props.authToken && !this.props.isEmbedded,
                            i = null;
                        return this.props.isChatRulesOpen && this.props.chatRules && this.props.chatRules.length && (i = a.createElement(v.Xa, {
                            padding: {
                                x: 2
                            }
                        }, a.createElement(Fe, {
                            chatRules: this.props.chatRules,
                            channelLogin: this.props.channelLogin,
                            onCloseChatRules: this.props.onCloseChatRules
                        }))), a.createElement(v.Pa, {
                            "data-test-selector": "chat-room-component-layout",
                            "data-a-target": this.props.theme === m.a.Dark ? "chat-theme-dark" : "chat-theme-light",
                            flexShrink: 1,
                            flexGrow: 1,
                            display: v.X.Flex,
                            flexDirection: v.Aa.Column,
                            fullWidth: !0
                        }, a.createElement("section", {
                            className: "chat-room",
                            role: "complementary",
                            "aria-labelledby": Ge
                        }, a.createElement(v.Eb, {
                            borderLeft: !this.props.isEmbedded,
                            display: v.X.Flex,
                            flexDirection: v.Aa.Column,
                            flexWrap: v.Ba.NoWrap,
                            position: v.jb.Relative,
                            flexGrow: 1,
                            fullHeight: !0,
                            color: v.O.Base,
                            className: "chat-room__content"
                        }, this.props.chatRoomHeader, e, a.createElement(xe.a, {
                            badgeSets: this.state.badgeSets,
                            channelID: this.props.channelID,
                            channelLogin: this.props.channelLogin,
                            currentUserDisplayName: this.props.currentUserDisplayName,
                            currentUserLogin: this.props.currentUserLogin,
                            isEmbedded: this.props.isEmbedded,
                            isCurrentUserModerator: this.props.isCurrentUserModerator,
                            isCurrentUserStaff: this.props.isStaff,
                            onPushMessage: this.props.onPushMessage,
                            containerRef: this.setChatListElement,
                            confirmModerationAction: this.confirmModerationAction,
                            theme: this.props.theme
                        }), a.createElement(v.Xa, {
                            className: "chat-room__notifications",
                            position: v.jb.Absolute,
                            zIndex: v.ic.Default,
                            fullWidth: !0
                        }, this.props.children), i, t, this.state.raidUpsellTarget && a.createElement(be, {
                            send: this.props.onSendMessage,
                            targetChannelLogin: this.state.raidUpsellTarget,
                            sourceChannelLogin: this.props.channelLogin,
                            closeRaidUpsell: this.closeRaidUpsell
                        }), this.props.firstPageLoaded && a.createElement(Qe, {
                            channelID: this.props.channelID,
                            channelLogin: this.props.channelLogin,
                            isEmbedded: this.props.isEmbedded,
                            isHostMode: this.props.isHostMode,
                            isPopout: this.props.isPopout,
                            onPushMessage: this.props.onPushMessage,
                            onSendMessage: this.props.onSendMessage
                        }), this.state.showCheerAutoModPrompt && a.createElement(k, {
                            badgeSets: this.state.badgeSets,
                            onEditCheer: this.clearCheerAutoModPrompt,
                            onCheerAnyway: this.onCheerAnyway
                        }), a.createElement(Be, {
                            authToken: this.props.authToken,
                            bitsConfig: n ? this.props.bitsConfig : void 0,
                            channelDisplayName: this.props.channelDisplayName,
                            channelID: this.props.channelID,
                            channelLogin: this.props.channelLogin,
                            emotes: this.props.emotes,
                            emoteMap: this.props.emoteMap,
                            firstPageLoaded: this.props.firstPageLoaded,
                            hidden: this.shouldHideChatInput(),
                            isCurrentUserModerator: this.props.isCurrentUserModerator,
                            isEmbedded: this.props.isEmbedded,
                            isHostMode: this.props.isHostMode,
                            isPopout: this.props.isPopout,
                            isStaff: this.props.isStaff,
                            onChatCommand: this.props.onSendMessage,
                            onShowChatRules: this.props.authToken && this.props.chatRules && this.props.chatRules.length ? this.onShowChatRules : void 0,
                            badgeSets: this.state.badgeSets,
                            userBadges: this.props.userBadges,
                            showViewersList: this.showViewersList,
                            onSendMessage: this.props.onSendMessage,
                            onInputFocus: this.onChatInputFocus,
                            containerElement: this.state.chatListElement,
                            openRaidUpsellFromHost: this.openRaidUpsellFromHost,
                            onSendCheerError: this.onSendCheerError,
                            onSendCheerSuccess: this.clearCheerAutoModPrompt,
                            isTextInputDisabled: this.state.showCheerAutoModPrompt,
                            shouldSendAutoModdedCheer: this.state.shouldSendAutoModdedCheer,
                            moderatedMessageParts: this.state.moderatedMessageParts,
                            bitsSendErrorCode: this.state.bitsSendErrorCode,
                            bitsSendHasError: this.state.bitsSendHasError,
                            clearBitsSendError: this.clearBitsSendError
                        }), a.createElement(v.Xa, {
                            className: "chat-room__viewer-card",
                            fullHeight: !0,
                            fullWidth: !0,
                            position: v.jb.Absolute,
                            "data-a-target": "chat-user-card"
                        }, a.createElement(Pe.a, {
                            isPopout: this.props.isPopout,
                            isEmbedded: this.props.isEmbedded,
                            confirmModerationAction: this.confirmModerationAction,
                            onSendMessage: this.props.onSendMessage,
                            channelID: this.props.channelID
                        })))))
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        if (e.data && e.data.badges && e.data.user && e.data.user.broadcastBadges && this.setState({
                                badgeSets: new g.c(e.data.badges, e.data.user.broadcastBadges, e.channelLogin)
                            }), e.data && e.data.user && e.data.user.self && e.data.user.self.displayBadges) {
                            var t = {};
                            e.data.user.self.displayBadges.forEach(function(e) {
                                t[e.setID] = e.version
                            }), s.p.tmi.client.updateChannelBadges(e.channelLogin, t)
                        }
                    }, t
                }(a.Component),
                Ke = Object(o.compose)(Object(c.a)(Ve, {
                    options: function(e) {
                        return {
                            name: "data",
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                }), Object(He.a)(), Object(d.a)(function(e) {
                    return {
                        query: Ve,
                        variables: {
                            channelLogin: e.channelLogin
                        },
                        topic: Object(p.D)(e.userID),
                        type: u.PubsubMessageType.UserBitsBadgeUpdate,
                        skip: !e.userID,
                        mutator: function(t, n) {
                            if (ze.debug("Received bits-user-update-v1 pubsub update", {
                                    data: n,
                                    event: t
                                }), !n.badges || t.message_type === y.b.Balance || null === t.data.newest_version || t.data.channel_id !== e.channelID) return n;
                            var i = n.badges.find(function(e) {
                                return e.setID === t.data.set_id && e.version === t.data.newest_version
                            });
                            return void 0 !== i && n.user.self && n.user.self.displayBadges && (n.user.self.displayBadges = n.user.self.displayBadges.map(function(e) {
                                return e.setID === i.setID && e.version !== i.version ? i : e
                            }), (!n.user.self.selectedBadge || i.setID === y.a.Bits && n.user.self.selectedBadge.setID === y.a.Bits) && (n.user.self.selectedBadge = i), n.user.self.selectedBadge && (i.setID !== y.a.Leaderboard || n.user.self.selectedBadge.setID !== y.a.Bits && n.user.self.selectedBadge.setID !== y.a.Leaderboard) || (n.user.self.selectedBadge = i)), n
                        }
                    }
                }), r.a)(Ye)
        },
        BOil: function(e, t, n) {},
        BhFH: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            });
            var i = n("mrSG"),
                a = n("yR8l"),
                r = n("8jSG"),
                o = n("cMjZ"),
                s = n("kSkr");

            function l() {
                var e = this;
                return Object(a.a)(s, {
                    props: function(t) {
                        return {
                            blockUserMutation: function(n, a, s, l) {
                                return i.__awaiter(e, void 0, void 0, function() {
                                    return i.__generator(this, function(e) {
                                        switch (e.label) {
                                            case 0:
                                                return t.mutate ? [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            targetUserID: n,
                                                            sourceContext: s,
                                                            reason: a
                                                        }
                                                    },
                                                    optimisticResponse: {
                                                        blockUser: {
                                                            __typename: "BlockUserPayload",
                                                            targetUser: {
                                                                __typename: "User",
                                                                id: n
                                                            }
                                                        }
                                                    },
                                                    update: function(e) {
                                                        var t = e.readFragment({
                                                            id: Object(o.a)(l),
                                                            fragment: r
                                                        });
                                                        t && (t.blockedUsers.push({
                                                            id: n,
                                                            __typename: "User"
                                                        }), e.writeFragment({
                                                            id: Object(o.a)(l),
                                                            fragment: r,
                                                            data: t
                                                        }))
                                                    }
                                                })] : [3, 2];
                                            case 1:
                                                return e.sent(), [3, 3];
                                            case 2:
                                                throw new Error("blockUserMutation is not ready");
                                            case 3:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }
        },
        CA5B: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "VIPs"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "id"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "vips"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "edges"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "node"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "login"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 82
                }
            };
            n.loc.source = {
                body: "query VIPs($id: ID!) {\nuser(id: $id) {\nid\nvips {\nedges {\nnode {\nid\nlogin\n}\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "CFw/": function(e, t, n) {
            e.exports = n.p + "assets/notification_upsell_arrow-c9d4ff7c87444b45d813.png"
        },
        CK1f: function(e, t, n) {},
        CiVV: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            });
            var i = n("q1tI"),
                a = function() {
                    return i.createElement("figure", {
                        className: "tw-svg tw-svg__asset--inherit"
                    }, i.createElement("svg", {
                        xmlns: "http://www.w3.org/2000/svg",
                        width: "20",
                        height: "20"
                    }, i.createElement("path", {
                        d: "M17 17.357c-.466.4-1.08.643-1.754.643-.672 0-1.507-.414-1.753-.636a1.29 1.29 0 0 0-.898-.333c-.295 0-.546.077-.753.231-.5.477-1.167.741-1.858.738a2.683 2.683 0 0 1-1.75-.64 1.317 1.317 0 0 0-.9-.33c-.296 0-.547.078-.754.232-.5.476-1.166.74-1.857.738A2.684 2.684 0 0 1 3 17.383V8.096C3.336 4.676 6.335 2 9.984 2 13.86 2 17 5.016 17 8.737l-.001.12.001 8.5zM7.5 11a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3zm5 0a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z"
                    })))
                }
        },
        "CpU+": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            });
            var i = n("mrSG"),
                a = n("yR8l"),
                r = n("JiJH");

            function o() {
                var e = this;
                return Object(a.a)(r, {
                    props: function(t) {
                        return {
                            unVIPUserMutation: function(n) {
                                return i.__awaiter(e, void 0, void 0, function() {
                                    return i.__generator(this, function(e) {
                                        switch (e.label) {
                                            case 0:
                                                return t.mutate ? [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            channelID: t.ownProps.channelID,
                                                            revokeeLogin: n
                                                        }
                                                    }
                                                })] : [2];
                                            case 1:
                                                return [2, e.sent().data]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }
        },
        D91L: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("q1tI"),
                r = n("oJmH"),
                o = n("/MKj"),
                s = n("/7QA"),
                l = n("gcd7"),
                c = n("BhFH"),
                d = n("iS14"),
                u = n("DMoW"),
                m = n("TvOw"),
                p = n("kRBY"),
                h = n("NNSq"),
                g = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.getInvalidUserMessage = function() {
                            return Object(s.d)("No user matching that login.", "IgnoreCommandHandler")
                        }, t.blockUser = function(e) {
                            return e ? e === t.props.currentUserLogin ? {
                                deferred: Promise.resolve({
                                    notice: Object(s.d)("You cannot ignore yourself.", "IgnoreCommandHandler")
                                })
                            } : {
                                deferred: Object(h.a)(e).then(function(e) {
                                    if (!e) return {
                                        notice: t.getInvalidUserMessage()
                                    };
                                    try {
                                        t.props.blockUserMutation(e, m.a.Other, u.e.CHAT, t.props.user)
                                    } catch (e) {
                                        return {
                                            notice: Object(s.d)("Unable to ignore user", "IgnoreCommandHandler")
                                        }
                                    }
                                    return {
                                        notice: Object(s.d)("User successfully ignored", "IgnoreCommandHandler")
                                    }
                                })
                            } : {
                                deferred: Promise.resolve({
                                    notice: Object(s.d)("Please specify a user to ignore", "IgnoreCommandHandler")
                                })
                            }
                        }, t.unblockUser = function(e) {
                            return e ? e === t.props.currentUserLogin ? {
                                deferred: Promise.resolve({
                                    notice: Object(s.d)("You cannot unignore yourself.", "IgnoreCommandHandler")
                                })
                            } : {
                                deferred: Object(h.a)(e).then(function(e) {
                                    if (!e) return {
                                        notice: t.getInvalidUserMessage()
                                    };
                                    try {
                                        t.props.unblockUserMutation(e, t.props.user)
                                    } catch (e) {
                                        return {
                                            notice: Object(s.d)("Unable to unignore user", "IgnoreCommandHandler")
                                        }
                                    }
                                    return {
                                        notice: Object(s.d)("User successfully unignored", "IgnoreCommandHandler")
                                    }
                                })
                            } : {
                                deferred: Promise.resolve({
                                    notice: Object(s.d)("Please specify a user to unignore", "IgnoreCommandHandler")
                                })
                            }
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return a.createElement("span", {
                            style: {
                                display: "none"
                            }
                        }, a.createElement(l.a, {
                            command: "ignore",
                            handler: this.blockUser
                        }), a.createElement(l.a, {
                            command: "unignore",
                            handler: this.unblockUser
                        }))
                    }, t
                }(a.Component);
            var f = Object(r.compose)(Object(o.connect)(function(e) {
                return {
                    user: Object(p.e)(e)
                }
            }), Object(d.a)(), Object(c.a)())(g);
            n.d(t, "a", function() {
                return f
            })
        },
        "DB+C": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "EmotePicker_EmotePicker_UserSubscriptionProducts"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelOwnerID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelOwnerID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "campaignProperties"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "domains"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "profileImageURL"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "28"
                                        }
                                    }],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "subscriptionProducts"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "tier"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "url"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "emotes"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "token"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "price"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "emoteSetID"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "subscriptionBenefit"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "platform"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 313
                }
            };
            n.loc.source = {
                body: "query EmotePicker_EmotePicker_UserSubscriptionProducts($channelOwnerID: ID!) {\nuser(id: $channelOwnerID) {\nid\nlogin\ncampaignProperties {\ndomains\n}\ndisplayName\nprofileImageURL(width: 28)\nsubscriptionProducts {\nid\nname\ntier\nurl\nemotes {\nid\ntoken\n}\nprice\nemoteSetID\n}\nself {\nsubscriptionBenefit {\nid\nplatform\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        DLhE: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return d
            }), n.d(t, "a", function() {
                return u
            });
            var i = n("mrSG"),
                a = n("G1cX"),
                r = n("/7QA"),
                o = n("f00E"),
                s = n("+pBb"),
                l = n("W/3w"),
                c = n("F6GT");

            function d(e) {
                return e.chat.renderSent
            }

            function u(e) {
                var t = [];
                if (e.chat && e.chat.commandHandlers)
                    for (var n in e.chat.commandHandlers) e.chat.commandHandlers[n] && t.push(n);
                return t.sort()
            }
            r.p.store.registerReducer("chat", function(e, t) {
                var n;
                switch (void 0 === e && (e = function() {
                    var e = Object(c.a)();
                    return i.__assign({}, e, {
                        commandHandlers: {},
                        emoteSets: [],
                        emotePickerSessionID: null,
                        followerDuration: l.a,
                        followerMode: !1,
                        isChatRulesOpen: !1,
                        isHidden: !1,
                        renderSent: null,
                        slowMode: !1,
                        slowModeDuration: 120,
                        subsOnlyMode: !1,
                        unhideIgnoredUsers: []
                    })
                }()), t.type) {
                    case s.d:
                        return i.__assign({}, e, {
                            isHidden: !0
                        });
                    case s.e:
                        return i.__assign({}, e, {
                            isHidden: !1
                        });
                    case s.f:
                        return i.__assign({}, e, {
                            isChatRulesOpen: !1
                        });
                    case s.i:
                        return i.__assign({}, e, {
                            emoteSets: t.emoteSets
                        });
                    case s.g:
                        return i.__assign({}, e, {
                            emotePickerSessionID: null
                        });
                    case s.h:
                        return i.__assign({}, e, {
                            emotePickerSessionID: Object(o.b)()
                        });
                    case s.j:
                        return i.__assign({}, e, {
                            lastUsedFollowerDurations: i.__assign({}, e.lastUsedFollowerDurations, (n = {}, n[t.channelLogin] = t.duration, n))
                        });
                    case s.r:
                        return i.__assign({}, e, {
                            isChatRulesOpen: !0
                        });
                    case s.q:
                        var r = i.__assign({}, e);
                        return void 0 !== t.roomState.followersOnly && (r.followerMode = t.roomState.followersOnly), void 0 !== t.roomState.followersOnlyRequirement && (r.followerDuration = t.roomState.followersOnlyRequirement), void 0 !== t.roomState.slowMode && (r.slowMode = t.roomState.slowMode), void 0 !== t.roomState.slowModeDuration && (r.slowModeDuration = t.roomState.slowModeDuration), void 0 !== t.roomState.subsOnly && (r.subsOnlyMode = t.roomState.subsOnly), r;
                    case s.b:
                        return i.__assign({}, e, {
                            showAutoModActions: !1
                        });
                    case s.c:
                        return i.__assign({}, e, {
                            showAutoModActions: !0
                        });
                    case s.k:
                        return i.__assign({}, e, {
                            showModerationActions: !1
                        });
                    case s.l:
                        return i.__assign({}, e, {
                            showModerationActions: !0
                        });
                    case s.m:
                        return i.__assign({}, e, {
                            showModIcons: !1
                        });
                    case s.n:
                        return i.__assign({}, e, {
                            showModIcons: !0
                        });
                    case s.s:
                        return i.__assign({}, e, {
                            showTimestamps: !1
                        });
                    case s.t:
                        return i.__assign({}, e, {
                            showTimestamps: !0
                        });
                    case s.v:
                        return i.__assign({}, e, {
                            useHighContrastColors: !1
                        });
                    case s.w:
                        return i.__assign({}, e, {
                            useHighContrastColors: !0
                        });
                    case s.a:
                        return a(e, function(e) {
                            return e.commandHandlers
                        }, function(e) {
                            return t.command in e ? e[t.command].push(t.handler) : e[t.command] = [t.handler], e
                        });
                    case s.o:
                        return a(e, function(e) {
                            return e.commandHandlers
                        }, function(e) {
                            if (!(t.command in e)) return e;
                            var n = e[t.command].indexOf(t.handler);
                            return e[t.command].splice(n, 1), 0 === e[t.command].length && delete e[t.command], e
                        });
                    case s.p:
                        return i.__assign({}, e, {
                            renderSent: t.customEvent
                        });
                    case s.u:
                        return i.__assign({}, e, {
                            unhideIgnoredUsers: e.unhideIgnoredUsers.concat([t.userID])
                        });
                    default:
                        return e
                }
            })
        },
        DXJk: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Events_FollowEvent"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "FollowEventInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "followEvent"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "event"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "InlineFragment",
                                            typeCondition: {
                                                kind: "NamedType",
                                                name: {
                                                    kind: "Name",
                                                    value: "EventCollection"
                                                }
                                            },
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "self"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "isFollowing"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            kind: "InlineFragment",
                                            typeCondition: {
                                                kind: "NamedType",
                                                name: {
                                                    kind: "Name",
                                                    value: "EventLeaf"
                                                }
                                            },
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "self"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "isFollowing"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 193
                }
            };
            n.loc.source = {
                body: "mutation Events_FollowEvent($input: FollowEventInput!) {\nfollowEvent(input: $input) {\nevent {\n...on EventCollection {\nid\nself {\nisFollowing\n}\n}\n...on EventLeaf {\nid\nself {\nisFollowing\n}\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        DnOo: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("q1tI"),
                r = n("oJmH"),
                o = n("/7QA"),
                s = n("UUve"),
                l = n("GnwI"),
                c = n("br9A"),
                d = n("Ue10"),
                u = "subscribe-button__subscribe-tier-button",
                m = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleClick = function() {
                            t.openCheckout(), t.props.handleSubAction({
                                action: c.a.ClickCheckout,
                                checkoutButtonTier: t.props.tierPrice
                            })
                        }, t.openCheckout = function() {
                            t.props.isMobileCheckout || o.n.set(s.c, t.props.productName)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        if (this.props.isSubbedToTier) {
                            var e = Object(o.d)("Subscribed", "SubTierButton");
                            return a.createElement(d.z, {
                                ariaLabel: e,
                                "data-test-selector": u,
                                disabled: !0,
                                icon: d.tb.Star
                            }, e)
                        }
                        var t;
                        return t = this.props.isEsportChannel ? Object(o.d)("Get the All-Access Pass", "SubTierButton") : this.props.customSubscribeNowMessage ? this.props.customSubscribeNowMessage : Object(o.d)("Subscribe Now", "SubTierButton"), a.createElement(d.z, i.__assign({
                            ariaLabel: t + " " + this.props.tierPrice,
                            "data-test-selector": u,
                            linkTo: this.props.isMobileCheckout ? this.props.url : void 0,
                            onClick: this.handleClick,
                            purchase: this.props.tierPrice
                        }, Object(d.jc)(this.props), {
                            fullWidth: this.props.fullWidth
                        }), t)
                    }, t
                }(a.Component),
                p = Object(r.compose)(Object(l.b)("SubTierButton", {
                    autoReportInteractive: !0
                }))(m);
            n.d(t, !1, function() {
                return u
            }), n.d(t, "a", function() {
                return p
            })
        },
        E78O: function(e, t, n) {},
        ECxT: function(e, t, n) {},
        EE1E: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return k
            });
            var i = n("EN5X"),
                a = n("G7cy"),
                r = n("m7BI"),
                o = n("E8D/"),
                s = n("DtRd"),
                l = n("R4sh"),
                c = n("/0dD"),
                d = n("76Lv"),
                u = 4.5,
                m = [250, 249, 250],
                p = [15, 14, 17],
                h = .1,
                g = 50,
                f = "7A7A7A",
                b = 36,
                v = {};

            function k(e, t) {
                var n = s(e),
                    k = C(a(n));
                if (void 0 === t && (t = Object(d.d)()), k in v[t]) return v[t][k];
                if (t === c.a.Dark && n.every(function(e) {
                        return e < b
                    })) return f;
                var y = t === c.a.Light ? m : p,
                    E = Object(l.a)(n, y);
                if (E > u) return k;
                for (var S = [n[0], n[1], n[2]], N = g; N >= 0 && E < u; N--) {
                    var _ = r(S);
                    t === c.a.Light ? _[0] -= _[0] * h : _[0] += _[0] * h, S = o(i(_)), E = Object(l.a)(S, y)
                }
                var O = C(a(S));
                return v[t][k] = O, O
            }

            function C(e) {
                return "#" === e[0] ? e.substr(1) : e
            }
            v[c.a.Dark] = {}, v[c.a.Light] = {}
        },
        EOIh: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChatInput"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "isEmbedded"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "bitsBalance"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "isPartner"
                                    },
                                    arguments: [],
                                    directives: [{
                                        kind: "Directive",
                                        name: {
                                            kind: "Name",
                                            value: "include"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "if"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "isEmbedded"
                                                }
                                            }
                                        }]
                                    }]
                                }]
                            }
                        }, {
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "channel"
                            },
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "banStatus"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isPermanent"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "subscriptionBenefit"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "chatRestrictedReasons"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "chatSettings"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "requireVerifiedAccount"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "cheer"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "hashtags"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "edges"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "cursor"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "node"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "id"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "settings"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "emoteMinimumBits"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "cheerMinimumBits"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "event"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 407
                }
            };
            n.loc.source = {
                body: "query ChatInput($channelLogin: String! $isEmbedded: Boolean!) {\ncurrentUser {\nid\nbitsBalance\nisPartner @include(if: $isEmbedded)\n}\nchannel: user(login: $channelLogin) {\nid\nself {\nbanStatus {\nisPermanent\n}\nsubscriptionBenefit {\nid\n}\nchatRestrictedReasons\n}\nchatSettings {\nrequireVerifiedAccount\n}\ncheer {\nid\nhashtags {\nedges {\ncursor\nnode {\nid\n}\n}\n}\nsettings {\nemoteMinimumBits\ncheerMinimumBits\nevent\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        Epr8: function(e, t, n) {},
        F6GT: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("/7QA"),
                r = "control";
            n.d(t, "a", function() {
                return s
            }), n.d(t, "b", function() {
                return l
            }), n.d(t, "c", function() {
                return c
            });
            var o = "chatSettings";

            function s() {
                var e = a.m.get(o, {});
                return i.__assign({
                    lastUsedFollowerDurations: {},
                    showAutoModActions: !0,
                    showMessageFlags: !0,
                    showModerationActions: !0,
                    showModIcons: !1,
                    showTimestamps: !1,
                    useHighContrastColors: !1,
                    zachModeStatus: r
                }, e)
            }

            function l(e, t) {
                var n = s();
                n[e] = t, a.m.set(o, n)
            }

            function c(e, t) {
                var n = s();
                n.lastUsedFollowerDurations[e] = t, a.m.set(o, n)
            }
        },
        FAYk: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "UnmodUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "UnmodUserInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "unmodUser"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "channel"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "target"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "error"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 119
                }
            };
            n.loc.source = {
                body: "mutation UnmodUser($input: UnmodUserInput!){\nunmodUser(input: $input) {\nchannel {\nid\n}\ntarget {\nid\n}\nerror {\ncode\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        FS60: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "ChatInput_SendCheer"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "SendCheerInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "sendCheer"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "currentUser"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "bitsBalance"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "validationError"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "message"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "messageContent"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "text"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "fragments"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "text"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "content"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "InlineFragment",
                                                                    typeCondition: {
                                                                        kind: "NamedType",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "AutoMod"
                                                                        }
                                                                    },
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "topics"
                                                                            },
                                                                            arguments: [],
                                                                            directives: [],
                                                                            selectionSet: {
                                                                                kind: "SelectionSet",
                                                                                selections: [{
                                                                                    kind: "Field",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "type"
                                                                                    },
                                                                                    arguments: [],
                                                                                    directives: []
                                                                                }, {
                                                                                    kind: "Field",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "weight"
                                                                                    },
                                                                                    arguments: [],
                                                                                    directives: []
                                                                                }]
                                                                            }
                                                                        }]
                                                                    }
                                                                }, {
                                                                    kind: "InlineFragment",
                                                                    typeCondition: {
                                                                        kind: "NamedType",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "CheermoteToken"
                                                                        }
                                                                    },
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "bitsAmount"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "prefix"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "tier"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }]
                                                                    }
                                                                }, {
                                                                    kind: "InlineFragment",
                                                                    typeCondition: {
                                                                        kind: "NamedType",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "Emote"
                                                                        }
                                                                    },
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            alias: {
                                                                                kind: "Name",
                                                                                value: "emoteID"
                                                                            },
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "id"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "setID"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "token"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }]
                                                                    }
                                                                }, {
                                                                    kind: "InlineFragment",
                                                                    typeCondition: {
                                                                        kind: "NamedType",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "User"
                                                                        }
                                                                    },
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "id"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "login"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "displayName"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }]
                                                                    }
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 377
                }
            };
            n.loc.source = {
                body: "mutation ChatInput_SendCheer($input: SendCheerInput!) {\nsendCheer(input: $input) {\nid\ncurrentUser {\nid\nbitsBalance\n}\nvalidationError {\ncode\nmessage\nmessageContent {\ntext\nfragments {\ntext\ncontent {\n... on AutoMod {\ntopics {\ntype\nweight\n}\n}\n... on CheermoteToken {\nbitsAmount\nprefix\ntier\n}\n... on Emote {\nemoteID: id\nsetID\ntoken\n}\n... on User {\nid\nlogin\ndisplayName\n}\n}\n}\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        GLn2: function(e, t, n) {},
        GOKC: function(e, t, n) {},
        Gcqi: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "BitsCard_Bits"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "isActiveFirstCheerExperiment"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "bitsBalance"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "bitsUserState"
                                    },
                                    arguments: [],
                                    directives: [{
                                        kind: "Directive",
                                        name: {
                                            kind: "Name",
                                            value: "include"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "if"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "isActiveFirstCheerExperiment"
                                                }
                                            }
                                        }]
                                    }]
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "bitsUserSettings"
                                    },
                                    arguments: [],
                                    directives: [{
                                        kind: "Directive",
                                        name: {
                                            kind: "Name",
                                            value: "include"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "if"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "isActiveFirstCheerExperiment"
                                                }
                                            }
                                        }]
                                    }],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "bitsUserSettings"
                                            },
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 316
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/bits/models/bits-user-settings-fragment.gql"\nquery BitsCard_Bits($isActiveFirstCheerExperiment: Boolean!) {\ncurrentUser {\nid\nbitsBalance\nlogin\nbitsUserState @include(if: $isActiveFirstCheerExperiment)\nbitsUserSettings @include(if: $isActiveFirstCheerExperiment) {\n...bitsUserSettings\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var a = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !a[t] && (a[t] = !0, !0)
                })
            }(n("5Czc").definitions)), e.exports = i
        },
        GxR5: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return a
            }), n.d(t, "a", function() {
                return r
            }), n.d(t, "c", function() {
                return o
            }), n.d(t, "d", function() {
                return s
            }), n.d(t, "e", function() {
                return l
            });
            var i = n("/7QA"),
                a = "https://passport.twitch.tv/forgot_username/new",
                r = "https://help.twitch.tv/customer/portal/emails/new",
                o = "https://help.twitch.tv/customer/portal/articles/1727973-about-site-suspensions-channel-bans-and-dmca",
                s = "https://www.twitch.tv/p/legal/terms-of-service/";

            function l() {
                return "https://passport.twitch.tv/password_resets/new?client_id=" + i.a.authSettings.clientID
            }
        },
        GzyO: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return c
            }), n.d(t, "b", function() {
                return d
            }), n.d(t, "c", function() {
                return u
            }), n.d(t, "d", function() {
                return m
            });
            var i = n("mrSG"),
                a = n("/7QA"),
                r = n("OpME"),
                o = "twilight.emote_picker_history",
                s = 24,
                l = [{
                    id: "64138",
                    token: "SeemsGood"
                }, {
                    id: "41",
                    token: "Kreygasm"
                }, {
                    id: "245",
                    token: "ResidentSleeper"
                }, {
                    id: "28087",
                    token: "WutFace"
                }, {
                    id: "86",
                    token: "BibleThump"
                }, {
                    id: "9",
                    token: "<3"
                }, {
                    id: "58765",
                    token: "NotLikeThis"
                }, {
                    id: "81274",
                    token: "VoHiYo"
                }, {
                    id: "88",
                    token: "PogChamp"
                }, {
                    id: "425618",
                    token: "LUL"
                }, {
                    id: "25",
                    token: "Kappa"
                }, {
                    id: "30259",
                    token: "HeyGuys"
                }];

            function c(e) {
                var t = a.m.get(o, {}),
                    n = t[e.id];
                n ? (n.uses++, n.lastUpdatedAt = Date.now()) : t[e.id] = {
                    emote: e,
                    lastUpdatedAt: Date.now(),
                    uses: 1
                }, a.m.set(o, t)
            }

            function d() {
                var e = a.m.get(o, {});
                if (!(Object.keys(e).length >= s)) {
                    for (var t = {}, n = 0; n < l.length; n++) {
                        var r = l[n];
                        e[r.id] || (t[r.id] = {
                            emote: r,
                            lastUpdatedAt: n,
                            uses: 0
                        })
                    }
                    var c = i.__assign({}, t, e);
                    a.m.set(o, c)
                }
            }

            function u(e) {
                var t = a.m.get(o, {}) || {},
                    n = [];
                return Object.keys(t).forEach(function(i) {
                    var a = t[i];
                    void 0 !== a && void 0 !== e[a.emote.token] && n.push(a)
                }), n.sort(function(e, t) {
                    return e.uses > t.uses ? -1 : t.uses > e.uses ? 1 : e.lastUpdatedAt > t.lastUpdatedAt ? -1 : t.lastUpdatedAt > e.lastUpdatedAt ? 1 : 0
                }), Object(r.b)(n.slice(0, 24).map(function(e) {
                    return e.emote
                }))
            }

            function m() {
                var e = a.m.get(o, {}) || {},
                    t = {};
                return Object.keys(e).forEach(function(n) {
                    void 0 !== e[n] && (t[e[n].emote.token] = {
                        count: e[n].uses
                    })
                }), t
            }
        },
        H0r1: function(e, t, n) {},
        H31v: function(e, t, n) {
            "use strict";
            var i, a;
            n.d(t, "a", function() {
                    return i
                }), n.d(t, "b", function() {
                    return a
                }),
                function(e) {
                    e.Bits = "bits", e.Leaderboard = "bits-leader"
                }(i || (i = {})),
                function(e) {
                    e.Badge = "badge_update", e.Balance = "balance_update", e.FirstPurchase = "first_bits_purchase"
                }(a || (a = {}))
        },
        HXcb: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChannelPage_ChannelHeader"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "login"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "profileImageURL"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "70"
                                        }
                                    }],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "roles"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isPartner"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "videos"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "totalCount"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "followers"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "totalCount"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "follows"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "totalCount"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "cheer"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "followButtonFragment"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "roles"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isStaff"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isSiteAdmin"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 375
                }
            };
            i.loc.source = {
                body: '#import "twilight/common/queries/follow-button-fragment.gql"\nquery ChannelPage_ChannelHeader($login: String!) {\nuser(login: $login) {\nid\nlogin\ndisplayName\nprofileImageURL(width: 70)\nroles {\nisPartner\n}\nstream {\nid\n}\nvideos {\ntotalCount\n}\nfollowers {\ntotalCount\n}\nfollows {\ntotalCount\n}\ncheer {\nid\n}\n...followButtonFragment\n}\ncurrentUser {\nid\nroles {\nisStaff\nisSiteAdmin\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var a = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !a[t] && (a[t] = !0, !0)
                })
            }(n("V94A").definitions)), e.exports = i
        },
        HjUq: function(e, t, n) {},
        HzXE: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChatRoomBanStatus"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "targetUserID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "chatRoomBanStatus"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelID"
                                    }
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "userID"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "targetUserID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "isPermanent"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 142
                }
            };
            n.loc.source = {
                body: "query ChatRoomBanStatus($targetUserID: ID! $channelID: ID!) {\nchatRoomBanStatus(channelID: $channelID userID: $targetUserID) {\nisPermanent\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        IIop: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return r
            }), n.d(t, "a", function() {
                return o
            });
            var i = n("XIZb"),
                a = Object(i.a)("ChatConnection"),
                r = a.withChatServiceProvider,
                o = (0, a.withContext)(function(e) {
                    return {
                        chatConnectionAPI: e.serviceAPI,
                        setChatConnectionAPI: e.setServiceAPI
                    }
                })
        },
        IKE4: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "badge"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Badge"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "setID"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "version"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "title"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "image1x"
                            },
                            name: {
                                kind: "Name",
                                value: "imageURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "size"
                                },
                                value: {
                                    kind: "EnumValue",
                                    value: "NORMAL"
                                }
                            }],
                            directives: []
                        }, {
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "image2x"
                            },
                            name: {
                                kind: "Name",
                                value: "imageURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "size"
                                },
                                value: {
                                    kind: "EnumValue",
                                    value: "DOUBLE"
                                }
                            }],
                            directives: []
                        }, {
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "image4x"
                            },
                            name: {
                                kind: "Name",
                                value: "imageURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "size"
                                },
                                value: {
                                    kind: "EnumValue",
                                    value: "QUADRUPLE"
                                }
                            }],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "clickAction"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "clickURL"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 170
                }
            };
            n.loc.source = {
                body: "fragment badge on Badge {\nid\nsetID\nversion\ntitle\nimage1x: imageURL(size: NORMAL)\nimage2x: imageURL(size: DOUBLE)\nimage4x: imageURL(size: QUADRUPLE)\nclickAction\nclickURL\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        IRJ5: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("q1tI"),
                r = n("oJmH"),
                o = n("/MKj"),
                s = n("/7QA"),
                l = n("gcd7"),
                c = n("yR8l"),
                d = n("5zf8"),
                u = n("DMoW"),
                m = n("2xye"),
                p = n("eAdp"),
                h = n("gMwc"),
                g = n("5Siz"),
                f = n("Y5lD");

            function b() {
                return Object(s.d)("An unexpected error occurred. Try again.", "BookmarkCommandHandler")
            }

            function v() {
                return Object(s.d)("You can only add stream markers during live streams. Try again when the channel is live streaming.", "BookmarkCommandHandler")
            }
            var k = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.bookmark = function(e) {
                        if (void 0 === e && (e = ""), t.props.markersData) return {
                            deferred: t.props.markersData.refetch().then(function() {
                                var n = t.props.markersData,
                                    i = n.user && n.user.stream && n.user.stream.id,
                                    a = n.user && n.user.stream && n.user.stream.createdAt;
                                return i ? t.createBookmarkHelper(i, e, a) : Promise.resolve({
                                    notice: v()
                                })
                            })
                        }
                    }, t.createBookmarkHelper = function(e, n, i) {
                        var a = n.substring(0, g.a).trim();
                        return t.props.createVideoBookmark({
                            variables: {
                                input: {
                                    broadcastID: e,
                                    description: a,
                                    medium: t.props.isPopout ? "popout_chat" : "chat",
                                    platform: m.SpadePlatform.Web
                                }
                            }
                        }).then(function(e) {
                            var t = e.data && e.data.createVideoBookmark;
                            if (t && t.error && t.error.code) switch (t.error.code) {
                                case u.s.ARCHIVES_DISABLED:
                                    return {
                                        notice: Object(s.d)("Past Broadcast storage must be enabled in order to add stream markers. Enable via Channel Settings and try again.", "BookmarkCommandHandler")
                                    };
                                case u.s.BROADCAST_FORMAT_INVALID_PREMIERE:
                                case u.s.BROADCAST_FORMAT_INVALID_RERUN:
                                    return {
                                        notice: Object(s.d)("You can only add stream markers during live streams. Try again when the channel is live streaming and not running a Premiere or Rerun.", "BookmarkCommandHandler")
                                    };
                                case u.s.BROADCASTER_NOT_LIVE:
                                    return {
                                        notice: v()
                                    };
                                case u.s.USER_UNAUTHORIZED:
                                    return {
                                        notice: Object(s.d)("You don't have permission to create stream markers for this channel.", "BookmarkCommandHandler")
                                    };
                                case u.s.INTERNAL_SERVER_ERROR:
                                case u.s.VOD_NOT_READY:
                                default:
                                    return {
                                        notice: b()
                                    }
                            }
                            var n = null === i ? null : Object(d.b)(Object(f.a)(i), d.a.ClockHMS),
                                r = "" !== a;
                            return {
                                notice: n && r ? Object(s.d)('Successfully added a stream marker at {time}: "{description}"', {
                                    description: a,
                                    time: n
                                }, "BookmarkCommandHandler") : n ? Object(s.d)("Successfully added a stream marker at {time}", {
                                    time: n
                                }, "BookmarkCommandHandler") : r ? Object(s.d)('Successfully added a stream marker: "{description}"', {
                                    description: a
                                }, "BookmarkCommandHandler") : Object(s.d)("Successfully added a stream marker", "BookmarkCommandHandler")
                            }
                        }).catch(function() {
                            return {
                                notice: b()
                            }
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return this.props.markersData ? a.createElement(l.a, {
                        command: "marker",
                        handler: this.bookmark
                    }) : null
                }, t
            }(a.Component);
            var C = Object(r.compose)(Object(o.connect)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded
                }
            }), Object(c.a)(p, {
                name: "createVideoBookmark"
            }), Object(c.a)(h, {
                name: "markersData",
                skip: function(e) {
                    return !e.firstPageLoaded
                }
            }))(k);
            n.d(t, "a", function() {
                return C
            })
        },
        JGCS: function(e, t, n) {},
        Jhye: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("q1tI"),
                r = n("/7QA"),
                o = n("X7Ac"),
                s = n("eJ65");
            var l = n("ug+5"),
                c = n("Ue10"),
                d = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onShareClicked = function(e) {
                            var n = "";
                            switch (e) {
                                case o.b.Twitter:
                                    n = "twitter";
                                    break;
                                case o.b.Facebook:
                                    n = "facebook";
                                    break;
                                case o.b.Reddit:
                                    n = "reddit";
                                    break;
                                case o.b.VKontakte:
                                    n = "vk";
                                    break;
                                case o.b.Copy:
                                    n = "url";
                                    break;
                                default:
                                    n = "unknown"
                            }
                            Object(l.c)({
                                shareMedium: n,
                                eventID: t.props.id,
                                channelLogin: t.props.channelLogin || "undefined",
                                channelID: t.props.channelID || "undefined",
                                location: t.props.eventLocation
                            })
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = function(e) {
                                return "https://www.twitch.tv/events/" + e
                            }(this.props.id),
                            t = this.props.children;
                        return this.props.children || (t = a.createElement(c.z, {
                            dropdown: !0,
                            type: c.F.Hollow
                        }, Object(r.d)("Share", "ShareEvent"))), a.createElement(s.a, null, t, a.createElement(c.u, {
                            direction: this.props.balloonDirection
                        }, a.createElement(c.Xa, {
                            padding: 1
                        }, a.createElement(c.Xa, {
                            display: c.X.Flex,
                            flexDirection: c.Aa.Row,
                            flexWrap: c.Ba.NoWrap,
                            justifyContent: c.Wa.Center
                        }, a.createElement(o.a, {
                            type: o.b.Twitter,
                            text: this.props.title,
                            url: e,
                            onShareClick: this.onShareClicked
                        }), a.createElement(o.a, {
                            type: o.b.Facebook,
                            text: this.props.title,
                            url: e,
                            onShareClick: this.onShareClicked
                        }), a.createElement(o.a, {
                            type: o.b.Reddit,
                            text: this.props.title,
                            url: e,
                            onShareClick: this.onShareClicked
                        }), a.createElement(o.a, {
                            type: o.b.VKontakte,
                            text: this.props.title,
                            url: e,
                            onShareClick: this.onShareClicked
                        }), a.createElement(o.a, {
                            type: o.b.Copy,
                            text: this.props.title,
                            url: e,
                            onShareClick: this.onShareClicked
                        })))))
                    }, t
                }(a.Component);
            n.d(t, "a", function() {
                return d
            })
        },
        JiJH: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "UnVIPUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "RevokeVIPInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "revokeVIP"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "channel"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "revokee"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "login"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "error"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 126
                }
            };
            n.loc.source = {
                body: "mutation UnVIPUser($input: RevokeVIPInput!){\nrevokeVIP(input: $input) {\nchannel {\nid\n}\nrevokee {\nid\nlogin\n}\nerror {\ncode\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        JoTo: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("q1tI"),
                r = n("/7QA"),
                o = n("f00E"),
                s = n("/IfK"),
                l = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.renderPortal = function(e) {
                            s.b ? s.b.provideContent(e, n.contentID) : r.k.warn("SideNavPageInfoSection must be defined on the SideNav component to manipulate its content.")
                        }, n.removePortal = function() {
                            s.b ? s.b.removeContent() : r.k.warn("SideNavPageInfoSection must be defined on the SideNav component to manipulate its content.")
                        }, n.contentID = Object(o.a)(), n
                    }
                    return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        e.children ? this.renderPortal(e.children) : this.removePortal()
                    }, t.prototype.componentDidMount = function() {
                        s.b || r.k.warn("SideNavPageInfoSection must be defined on the SideNav component to manipulate its content."), this.props.children && this.renderPortal(this.props.children)
                    }, t.prototype.componentWillUnmount = function() {
                        this.removePortal()
                    }, t.prototype.render = function() {
                        return null
                    }, t
                }(a.Component);
            n.d(t, "a", function() {
                return l
            })
        },
        "Jxh/": function(e, t, n) {
            "use strict";

            function i(e) {
                var t = document.createElement("textarea");
                t.style.position = "fixed", t.style.top = "0", t.style.left = "0", t.style.fontSize = "12pt", t.style.width = "2em", t.style.height = "2em", t.style.padding = "0", t.style.border = "none", t.style.outline = "none", t.style.boxShadow = "none", t.style.background = "transparent", t.value = e, document.body.appendChild(t), t.select();
                var n = !0;
                try {
                    n = document.execCommand("copy")
                } catch (e) {
                    n = !1
                }
                return document.body.removeChild(t), n
            }
            n.d(t, "a", function() {
                return i
            })
        },
        JzSO: function(e, t, n) {},
        KGti: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "j", function() {
                return u
            }), n.d(t, "c", function() {
                return m
            }), n.d(t, "i", function() {
                return p
            }), n.d(t, "e", function() {
                return h
            }), n.d(t, "g", function() {
                return g
            }), n.d(t, "h", function() {
                return f
            }), n.d(t, "f", function() {
                return b
            }), n.d(t, "b", function() {
                return v
            }), n.d(t, "d", function() {
                return k
            }), n.d(t, "k", function() {
                return C
            }), n.d(t, "l", function() {
                return y
            });
            var i, a = n("mrSG"),
                r = n("XmgI"),
                o = n("p52R"),
                s = n("ZtEv"),
                l = n("a1OF"),
                c = n("aF6k");

            function d(e) {
                return e + "-automod-rejected"
            }

            function u(e, t, n, i) {
                var c = {
                        badges: null,
                        bits: 0,
                        color: "",
                        displayName: "",
                        id: "",
                        userID: n,
                        username: n,
                        userType: o.a.User,
                        emotes: {}
                    },
                    u = Object(l.a)(t, c, r.a, !1);
                return {
                    type: s.b.AutoMod,
                    autoModType: s.a.MessageRejectedPrompt,
                    id: d(e),
                    category: i,
                    rejectedMessage: a.__assign({}, u, {
                        type: s.b.Message,
                        messageType: s.c.Post,
                        id: e
                    })
                }
            }

            function m(e, t, n, i, c) {
                var u = {
                        badges: null,
                        bits: 0,
                        color: "",
                        displayName: "",
                        id: "",
                        userID: n,
                        username: n,
                        userType: o.a.User,
                        emotes: {}
                    },
                    m = Object(l.a)(t, u, r.a, !1);
                return {
                    type: s.b.AutoMod,
                    autoModType: s.a.CheerMessageRejectedPrompt,
                    id: d(e),
                    messageID: e,
                    category: i,
                    targetUserID: c,
                    originalMessage: t,
                    rejectedMessage: a.__assign({}, m, {
                        type: s.b.Message,
                        messageType: s.c.Post,
                        id: e
                    })
                }
            }

            function p() {
                return {
                    id: Object(c.a)("automod-message-rejected"),
                    type: s.b.AutoMod,
                    autoModType: s.a.MessageRejected
                }
            }

            function h() {
                return {
                    id: Object(c.a)("automod-message-allowed"),
                    type: s.b.AutoMod,
                    autoModType: s.a.MessageAllowed
                }
            }

            function g(e) {
                return {
                    id: Object(c.a)("automod-message-denied"),
                    msg_id: e.data.msg_id,
                    type: s.b.AutoMod,
                    autoModType: s.a.MessageModApproved
                }
            }

            function f(e) {
                return {
                    id: Object(c.a)("automod-message-denied"),
                    msg_id: e.data.msg_id,
                    type: s.b.AutoMod,
                    autoModType: s.a.MessageModDenied
                }
            }

            function b() {
                return {
                    id: Object(c.a)("automod-message-denied"),
                    type: s.b.AutoMod,
                    autoModType: s.a.MessageDenied
                }
            }

            function v() {
                return {
                    id: Object(c.a)("automod-cheer-message-denied"),
                    type: s.b.AutoMod,
                    autoModType: s.a.CheerMessageDenied
                }
            }

            function k() {
                return {
                    id: Object(c.a)("automod-cheer-message-timeout"),
                    type: s.b.AutoMod,
                    autoModType: s.a.CheerMessageTimeout
                }
            }

            function C(e, t, n, a) {
                return {
                    id: Object(c.a)("channel-moderation-action"),
                    type: s.b.ModerationAction,
                    moderationActionType: e,
                    level: i.Channel,
                    createdByLogin: t,
                    createdByUserID: n,
                    args: a
                }
            }

            function y(e, t, n, a, r, o, l, d, u) {
                return {
                    id: Object(c.a)("channel-moderation-action"),
                    type: s.b.ModerationAction,
                    moderationActionType: e,
                    level: i.User,
                    createdByLogin: t,
                    createdByUserID: n,
                    targetUserID: a,
                    targetUserLogin: r,
                    duration: o,
                    reason: l,
                    messageBody: d,
                    messageID: u
                }
            }! function(e) {
                e[e.Channel = 0] = "Channel", e[e.User = 1] = "User"
            }(i || (i = {}))
        },
        KriR: function(e, t, n) {
            "use strict";
            n.d(t, "g", function() {
                return r
            }), n.d(t, "d", function() {
                return u
            }), n.d(t, "f", function() {
                return o
            }), n.d(t, "e", function() {
                return s
            }), n.d(t, "b", function() {
                return l
            }), n.d(t, "a", function() {
                return c
            }), n.d(t, "c", function() {
                return d
            });
            var i = n("/7QA"),
                a = n("2xye");

            function r(e) {
                var t = {
                    channel: e.channelLogin,
                    channel_id: e.channelId,
                    payment_type: e.paymentType,
                    payment_flow: e.paymentFlow,
                    quantity: e.quantity,
                    action: e.action,
                    action_detail: e.actionDetail,
                    product_id: e.productId,
                    ticket_price: e.ticketPrice,
                    currency: e.currency,
                    saved_payment: e.savedPayment,
                    checkout_source: e.trackingContext.source
                };
                e.trackingContext.detail && (t.checkout_source_detail = e.trackingContext.detail), i.o.track(a.SpadeEventType.PaymentFormInteraction, t)
            }
            var o, s, l, c, d, u = function() {
                function e(e) {
                    this.store = {
                        savedPaymentAvailable: null,
                        savedPaymentDisplayed: null
                    }, this.counter = 0, this.config = {
                        allowDuplicateEvents: !(!e || !e.allowDuplicateEvents)
                    }
                }
                return e.prototype.get = function(e) {
                    return this.store[e]
                }, e.prototype.set = function(e) {
                    this.store = Object.assign(this.store, e)
                }, e.prototype.reportEvent = function() {
                    (0 === this.counter || this.config.allowDuplicateEvents) && (this.counter++, function(e) {
                        var t = {
                            saved_payment_available: e.savedPaymentAvailable,
                            saved_payment_displayed: e.savedPaymentDisplayed
                        };
                        i.o.track(a.SpadeEventType.PaymentFormDisplay, t)
                    }(this.store))
                }, e
            }();
            ! function(e) {
                e.Failed = "failed", e.Pending = "pending", e.Success = "success"
            }(o || (o = {})),
            function(e) {
                e.MysteryGifting = "mystery_gifting", e.Gifting = "gifting", e.Personal = "personal"
            }(s || (s = {})),
            function(e) {
                e.RecurlyCreditCard = "recurly_credit_card", e.RecurlyPaypal = "recurly_paypal", e.RecurlyPayWithAmazon = "recurly_pay_with_amazon", e.ZuoraCreditCard = "zuora_credit_card", e.Xsolla = "xsolla"
            }(l || (l = {})),
            function(e) {
                e.VendorLoginClick = "vendor_login_click", e.CompletePurchaseClick = "complete_purchase_click", e.PaypalTokenError = "paypal_token_error", e.RadioButtonClick = "radio_button_click", e.TokenError = "token_error", e.PriceChangeAlert = "price_change_alert", e.UnsupportedCountryAlert = "unsupported_country_alert"
            }(c || (c = {})),
            function(e) {
                e.ChannelSubscribeButton = "channel_subscribe_button_click", e.Direct = "direct_url_link", e.EmotePicker = "emote_picker_click", e.Extension = "extension_click", e.TurboSubscribeButton = "turbo_subscribe_button_click", e.ViewerCard = "viewer_card_click"
            }(d || (d = {}))
        },
        KwB3: function(e, t, n) {
            "use strict";
            n("7NxT");
            var i = n("oJmH"),
                a = n("/MKj"),
                r = n("yR8l"),
                o = n("kRBY"),
                s = n("vSeP"),
                l = n("IIop"),
                c = n("nInp"),
                d = n("2EzP"),
                u = n("GnwI"),
                m = n("26nv"),
                p = n("mrSG"),
                h = n("q1tI"),
                g = n("fvjX"),
                f = n("ZS2+"),
                b = n("/0dD"),
                v = n("Mj6i"),
                k = n("jZLd"),
                C = n("XDQu"),
                y = n("/i69"),
                E = n("IRJ5"),
                S = n("bhOa"),
                N = n("D91L"),
                _ = n("PtXu"),
                O = n("gcd7"),
                w = n("+pBb"),
                M = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.showChatRules = function() {
                            t.props.showChatRules()
                        }, t
                    }
                    return p.__extends(t, e), t.prototype.render = function() {
                        return h.createElement(O.a, {
                            command: "rules",
                            handler: this.showChatRules
                        })
                    }, t
                }(h.Component);
            var D, I, T = Object(a.connect)(null, function(e) {
                    return Object(g.bindActionCreators)({
                        showChatRules: function() {
                            return w.P()
                        }
                    }, e)
                })(M),
                R = n("/7QA"),
                j = n("CpU+"),
                A = n("fKMw"),
                U = n("DMoW"),
                L = n("Ue10"),
                B = n("CA5B");
            ! function(e) {
                e.QUERY_ERROR = "QUERY_ERROR"
            }(D || (D = {})),
            function(e) {
                e.UnVIP = "vip-command-handler_unvip", e.VIP = "vip-command-handler_vip", e.VIPs = "vip-command-handler_vips"
            }(I || (I = {}));
            var x = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.vips = function() {
                            return {
                                deferred: R.p.apollo.client.query({
                                    query: B,
                                    fetchPolicy: "network-only",
                                    variables: {
                                        id: t.props.channelID
                                    }
                                }).then(function(e) {
                                    var n = e.data;
                                    if (!n || !n.user || !n.user.vips) return {
                                        notice: t.getVIPsErrorMessage()
                                    };
                                    if (0 === n.user.vips.edges.length) return {
                                        notice: Object(R.d)("This channel does not have any VIPs.", "VIPCommandHandler")
                                    };
                                    var i = n.user.vips.edges.reduce(function(e, t) {
                                        var n = t.node && t.node.login;
                                        return n && e.push(n), e
                                    }, []).join(", ");
                                    return {
                                        notice: Object(R.d)("VIPs for this channel are: {vips}.", {
                                            vips: i
                                        }, "VIPCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: t.getVIPsErrorMessage()
                                    }
                                })
                            }
                        }, t.unVIPUser = function(e) {
                            var n = e.trim().split(/\s+/),
                                i = t.getLogin(e);
                            return 1 === n.length && i && 0 !== i.length ? {
                                deferred: t.props.unVIPUserMutation(i).then(function(e) {
                                    var n = e.revokeVIP;
                                    if (!n || !n.revokee || !n.revokee.login) return {
                                        notice: t.getUnVIPErrorMessage(D.QUERY_ERROR)
                                    };
                                    var a = n.error,
                                        r = a && a.code;
                                    return r ? {
                                        notice: t.getUnVIPErrorMessage(r, i)
                                    } : {
                                        notice: Object(R.d)("You have removed {login} as a VIP of this channel.", {
                                            login: i
                                        }, "VIPCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: t.getUnVIPErrorMessage(D.QUERY_ERROR)
                                    }
                                })
                            } : {
                                deferred: Promise.resolve({
                                    notice: Object(R.d)('Usage: "/unvip [login]" - Revoke VIP status to a user. Use "vips" to list the VIPs of this channel.', "VIPCommandHandler")
                                })
                            }
                        }, t.vipUser = function(e) {
                            var n = t.getLogin(e);
                            return 1 === e.trim().split(/\s+/).length && n && 0 !== n.length ? {
                                deferred: t.props.vipUserMutation(n).then(function(e) {
                                    var i = e.grantVIP;
                                    if (!i || !i.grantee || !i.grantee.login) return {
                                        notice: t.getVIPErrorMessage(D.QUERY_ERROR)
                                    };
                                    var a = i.error,
                                        r = a && a.code;
                                    return r ? {
                                        notice: t.getVIPErrorMessage(r, n)
                                    } : {
                                        notice: Object(R.d)("You have added {login} as a VIP of this channel.", {
                                            login: n
                                        }, "VIPCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: t.getVIPErrorMessage(D.QUERY_ERROR)
                                    }
                                })
                            } : {
                                deferred: Promise.resolve({
                                    notice: Object(R.d)('Usage: "/vip [login]" - Grant VIP status to a user. Use "vips" to list the VIPs of this channel.', "VIPCommandHandler")
                                })
                            }
                        }, t
                    }
                    return p.__extends(t, e), t.prototype.render = function() {
                        return h.createElement(L.Xa, {
                            display: L.X.Hide
                        }, h.createElement(O.a, {
                            "data-test-selector": I.UnVIP,
                            command: "unvip",
                            handler: this.unVIPUser
                        }), h.createElement(O.a, {
                            "data-test-selector": I.VIP,
                            command: "vip",
                            handler: this.vipUser
                        }), h.createElement(O.a, {
                            "data-test-selector": I.VIPs,
                            command: "vips",
                            handler: this.vips
                        }))
                    }, t.prototype.getLogin = function(e) {
                        var t = this.props.activeChattersAPI;
                        return t && t.getActiveChatterLoginFromDisplayName(e) || e
                    }, t.prototype.getCommonErrorMessage = function(e, t) {
                        switch (e) {
                            default: return "";
                            case U.B.GRANTEE_NOT_FOUND:
                                    case U.O.REVOKEE_NOT_FOUND:
                                    return Object(R.d)("Invalid username: {login}.", {
                                    login: t
                                }, "VIPCommandHandler");
                            case U.B.FORBIDDEN:
                                    case U.O.FORBIDDEN:
                                    return Object(R.d)("You don't have permission to perform that action.", "VIPCommandHandler")
                        }
                    }, t.prototype.getVIPErrorMessage = function(e, t) {
                        switch (void 0 === t && (t = ""), e) {
                            case U.B.FORBIDDEN:
                            case U.B.GRANTEE_NOT_FOUND:
                                return this.getCommonErrorMessage(e, t);
                            case U.B.GRANTEE_ALREADY_VIP:
                                return Object(R.d)("{login} is already a VIP of this channel.", {
                                    login: t
                                }, "VIPCommandHandler");
                            case U.B.GRANTEE_CHAT_BANNED:
                                return Object(R.d)("{login} is banned in this channel. You must unban this user before granting VIP status.", {
                                    login: t
                                }, "VIPCommandHandler");
                            case U.B.MAX_VIPS_REACHED:
                                return Object(R.d)("Unable to add VIP. Visit the Achievements page on your dashboard to learn how to unlock additional VIP slots.", "VIPCommandHandler");
                            case U.B.VIP_ACHIEVEMENT_INCOMPLETE:
                                return Object(R.d)("Unable to add VIP. Visit the Achievements page on your dashboard to learn how to unlock this feature.", "VIPCommandHandler");
                            case D.QUERY_ERROR:
                            case U.B.CHANNEL_NOT_FOUND:
                            default:
                                return Object(R.d)("Unable to add VIP.", "VIPCommandHandler")
                        }
                    }, t.prototype.getUnVIPErrorMessage = function(e, t) {
                        switch (void 0 === t && (t = ""), e) {
                            case U.O.FORBIDDEN:
                            case U.O.REVOKEE_NOT_FOUND:
                                return this.getCommonErrorMessage(e, t);
                            case U.O.REVOKEE_NOT_VIP:
                                return Object(R.d)("{login} is not a VIP of this channel.", {
                                    login: t
                                }, "VIPCommandHandler");
                            case D.QUERY_ERROR:
                            case U.O.CHANNEL_NOT_FOUND:
                            default:
                                return Object(R.d)("Unable to remove VIP.", "VIPCommandHandler")
                        }
                    }, t.prototype.getVIPsErrorMessage = function() {
                        return Object(R.d)("There was a problem fetching the list of VIPs. Please try again.", "VIPCommandHandler")
                    }, t
                }(h.Component),
                F = Object(g.compose)(Object(j.a)(), Object(A.a)(), s.a)(x),
                P = n("vKai"),
                H = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            show: !0
                        }, t.dismiss = function() {
                            t.setState({
                                show: !1
                            })
                        }, t
                    }
                    return p.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        e.hostedChannelDisplayName !== this.props.hostedChannelDisplayName && this.setState({
                            show: !0
                        })
                    }, t.prototype.render = function() {
                        return this.state.show ? h.createElement(L.Eb, {
                            attachTop: !0,
                            attachLeft: !0,
                            attachRight: !0,
                            background: L.r.AccentAlt2,
                            color: L.O.Overlay,
                            position: L.jb.Absolute,
                            className: "hosting-notification",
                            padding: {
                                y: .5,
                                left: .5
                            },
                            "data-a-target": "hosting-notification-container"
                        }, h.createElement(L.Xa, {
                            display: L.X.Flex,
                            padding: 1,
                            justifyContent: L.Wa.Between,
                            alignItems: L.f.Center,
                            flexWrap: L.Ba.NoWrap
                        }, h.createElement(L.Xa, {
                            display: L.X.Flex,
                            flexWrap: L.Ba.NoWrap
                        }, h.createElement(L.Xa, {
                            margin: {
                                right: .5
                            },
                            flexShrink: 0
                        }, h.createElement(L.W, null, Object(R.d)("Hosting", "ChatHostingNotification"))), h.createElement(L.Xa, {
                            ellipsis: !0,
                            flexShrink: 1,
                            margin: {
                                right: .5
                            }
                        }, h.createElement(L.W, {
                            type: L.Vb.Strong,
                            "data-test-selector": "hosting-notification__text",
                            "data-a-target": "hosting-notification-channel-name"
                        }, "" + this.props.hostedChannelDisplayName))), h.createElement(L.Xa, {
                            display: L.X.Flex,
                            flexWrap: L.Ba.NoWrap,
                            flexShrink: 0
                        }, h.createElement(L.Xa, {
                            display: L.X.Inline,
                            padding: {
                                right: .5
                            }
                        }, h.createElement(L.z, {
                            linkTo: {
                                pathname: "/" + this.props.hostedChannelLogin,
                                state: {
                                    content: "host_channel",
                                    medium: "chat_bar_notification"
                                }
                            },
                            size: L.D.Small,
                            "data-a-target": "hosting-notification-gotochannel-button"
                        }, Object(R.d)("Go to Channel", "ChatHostingNotification"))), h.createElement(L.A, {
                            onClick: this.dismiss,
                            ariaLabel: Object(R.d)("Close", "HostingNotification"),
                            size: L.B.Small,
                            overlay: !0,
                            icon: L.tb.Close,
                            "data-a-target": "hosting-notification-close-button"
                        })))) : null
                    }, t
                }(h.Component),
                W = n("ZtEv"),
                V = n("aF6k");
            var G = n("lZdE"),
                X = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.getActiveChatters = function(e, t) {
                            if (void 0 === e && (e = ""), void 0 === t && (t = 1 / 0), n.isDirty && n.sortChatters(), !e) return n.sortedChatters.slice(0, t);
                            var i = new RegExp("^" + Object(G.a)(e), "i");
                            return n.sortedChatters.filter(function(e) {
                                return i.test(e.login) || e.displayName && i.test(e.displayName)
                            }).slice(0, t)
                        }, n.handleMessage = function(e) {
                            n.getUsersFromEvent(e).forEach(function(e) {
                                n.handleActiveChatter(e)
                            })
                        }, n.getActiveChatterLoginFromDisplayName = function(e) {
                            return Object.keys(n.activeChatters).find(function(t) {
                                return n.activeChatters[t] && n.activeChatters[t].displayName === e
                            }) || null
                        }, n.reset(), n
                    }
                    return p.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.setActiveChattersAPI({
                            getActiveChatters: this.getActiveChatters,
                            getActiveChatterLoginFromDisplayName: this.getActiveChatterLoginFromDisplayName
                        }), this.props.messageHandlerAPI && this.props.messageHandlerAPI.addMessageHandler(this.handleMessage)
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.setActiveChattersAPI(), this.props.messageHandlerAPI && this.props.messageHandlerAPI.removeMessageHandler(this.handleMessage)
                    }, t.prototype.render = function() {
                        return null
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        e.channelLogin !== this.props.channelLogin && this.reset(), e.currentUserLogin && e.currentUserLogin !== this.props.currentUserLogin && this.activeChatterLogins.has(e.currentUserLogin) && (this.isDirty = !0, this.removeActiveChatter(e.currentUserLogin)), this.props.messageHandlerAPI !== e.messageHandlerAPI && (this.props.messageHandlerAPI && this.props.messageHandlerAPI.removeMessageHandler(this.handleMessage), e.messageHandlerAPI && e.messageHandlerAPI.addMessageHandler(this.handleMessage))
                    }, t.prototype.reset = function() {
                        this.activeChatterLogins = new Set, this.activeChatters = {}, this.isDirty = !0, this.sortedChatters = []
                    }, t.prototype.getUsersFromEvent = function(e) {
                        switch (e.type) {
                            case W.b.Message:
                                return [{
                                    login: e.user.userLogin,
                                    displayName: e.user.userDisplayName
                                }];
                            case W.b.Ritual:
                                return [{
                                    login: e.message.user.userLogin,
                                    displayName: e.message.user.userDisplayName
                                }];
                            case W.b.Raid:
                                return [{
                                    login: e.params.login,
                                    displayName: e.params.displayName
                                }];
                            case W.b.Resubscription:
                            case W.b.Subscription:
                                return [{
                                    login: e.user.username,
                                    displayName: e.user.displayName
                                }];
                            case W.b.SubGift:
                                return [{
                                    login: e.user.username,
                                    displayName: e.user.displayName
                                }, {
                                    displayName: e.recipientDisplayName,
                                    login: e.recipientLogin
                                }];
                            default:
                                return []
                        }
                    }, t.prototype.handleActiveChatter = function(e) {
                        e.login !== this.props.channelLogin && e.login !== this.props.currentUserLogin && (this.activeChatterLogins.has(e.login) ? (this.activeChatterLogins.delete(e.login), this.addActiveChatter(e)) : (this.addActiveChatter(e), this.trimActiveChatters(), this.isDirty = !0))
                    }, t.prototype.addActiveChatter = function(e) {
                        this.activeChatterLogins.add(e.login), this.activeChatters[e.login] = e
                    }, t.prototype.removeActiveChatter = function(e) {
                        this.activeChatterLogins.delete(e), delete this.activeChatters[e]
                    }, t.prototype.trimActiveChatters = function() {
                        if (!(this.activeChatterLogins.size <= 300))
                            for (var e = this.activeChatterLogins.size - 300, t = this.activeChatterLogins.values(), n = 0; n < e; n++) {
                                var i = t.next().value;
                                this.removeActiveChatter(i)
                            }
                    }, t.prototype.sortChatters = function() {
                        var e = this,
                            t = [{
                                displayName: this.props.channelDisplayName,
                                login: this.props.channelLogin
                            }],
                            n = Object.keys(this.activeChatters).map(function(t) {
                                return e.activeChatters[t]
                            });
                        n.sort(function(e, t) {
                            return e.login < t.login ? -1 : e.login > t.login ? 1 : 0
                        }), this.sortedChatters = t.concat(n), this.isDirty = !1
                    }, t
                }(h.Component);
            var z = Object(g.compose)(Object(a.connect)(function(e) {
                    var t = Object(o.e)(e);
                    return {
                        currentUserLogin: t && t.login
                    }
                }), s.a, d.a)(X),
                q = n("kz7j"),
                Q = n("XmgI");
            var Y = n("p52R");
            var K = n("TApp");
            var $ = n("a1OF");

            function Z(e, t, n, i, a, r, o) {
                return void 0 === r && (r = !1), void 0 === o && (o = !1), p.__assign({}, Object($.a)(t, n, i, a, r, o), {
                    type: W.b.Message,
                    messageType: e,
                    id: n.id || Object(V.a)(n.username)
                })
            }
            var J = n("sblI");
            var ee = n("oK83");
            var te = n("WytW"),
                ne = n("oi4T"),
                ie = n("OpME"),
                ae = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.hasConnected = !1, n.sendMessage = function(e) {
                            var t = Object(te.i)(e, n.props.channelLogin);
                            return t.handled ? t.result && t.result.deferred && t.result.deferred.then(function(e) {
                                var t = e.notice;
                                t && n.addMessage(Object(K.a)(t))
                            }) : n.client.sendCommand(n.props.channelLogin, e).catch(function(e) {
                                R.k.warn("Failed to send message, or message timeout", e)
                            }), t.result
                        }, n.onJoinedEvent = function(e) {
                            n.logger.debug("Connected", n.props.channelLogin), n.props.latencyTracking.reportInteractive(), n.hasConnected || (Object(ne.b)({
                                channelLogin: n.props.channelLogin,
                                isHostMode: n.props.isHostMode
                            }), n.hasConnected = !0), n.chatConnected && n.props.latencyTracking.reportCustomEvent(n.chatConnected), n.postMessageToCurrentChannel(e, {
                                type: W.b.Connected,
                                id: Object(V.a)("connected")
                            })
                        }, n.onDisconnectedEvent = function(e) {
                            n.props.latencyTracking.reportInteractive(), n.addMessage(function(e) {
                                return {
                                    type: W.b.Disconnected,
                                    id: Object(V.a)("disconnected"),
                                    reason: e
                                }
                            }(e.reason))
                        }, n.onReconnectingEvent = function(e) {
                            return n.addMessage({
                                type: W.b.Reconnect,
                                id: Object(V.a)("reconnect")
                            })
                        }, n.onHostedEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e, t, n) {
                                return {
                                    type: W.b.Hosted,
                                    id: Object(V.a)("hosted-" + e),
                                    hostingChannel: e,
                                    isAutohost: t,
                                    viewerCount: n
                                }
                            }(e.from, e.isAuto, e.viewers))
                        }, n.onHostingEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.Hosting,
                                    id: Object(V.a)("hosting"),
                                    hostedChannel: e
                                }
                            }(e.target))
                        }, n.onUnhostEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.Unhost,
                                    id: Object(V.a)("unhost-" + e)
                                }
                            }(e.channel))
                        }, n.onChatMessageEvent = function(e) {
                            n.postMessageToCurrentChannel(e, n.convertMessage(e))
                        }, n.onChatActionEvent = function(e) {
                            var t = n.props.bitsConfig || Q.a,
                                i = Z(W.c.Action, e.action, e.message.user, t, n.shouldBlockLinks(e.message.user));
                            n.postMessageToCurrentChannel(e, i)
                        }, n.onChatNoticeEvent = function(e) {
                            if ("msg_rejected" !== e.msgid) {
                                var t = function(e, t, n) {
                                    return {
                                        type: W.b.Notice,
                                        id: Object(V.a)("notice"),
                                        channel: e,
                                        msgid: t,
                                        message: n
                                    }
                                }(e.channel, e.msgid, e.body);
                                n.postMessageToCurrentChannel(e, t)
                            }
                        }, n.onTimeoutEvent = function(e) {
                            n.onModerationEvent(W.e.Timeout, e)
                        }, n.onBanEvent = function(e) {
                            n.onModerationEvent(W.e.Ban, e)
                        }, n.onClearMsgEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e, t, n) {
                                return {
                                    type: W.b.Moderation,
                                    moderationType: W.e.Delete,
                                    id: Object(V.a)(e + "-mod"),
                                    userLogin: e,
                                    targetMessageID: t,
                                    body: n
                                }
                            }(e.userLogin, e.targetMessageID, e.body))
                        }, n.onModerationEvent = function(e, t) {
                            n.postMessageToCurrentChannel(t, Object(J.a)(e, t.userLogin, t.reason, t.duration))
                        }, n.onSubscriptionEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.Subscription,
                                    id: Object(V.a)(e.user.username + "-sub"),
                                    channel: e.channel.slice(1),
                                    user: e.user,
                                    methods: e.methods
                                }
                            }({
                                channel: e.channel,
                                user: e.user,
                                methods: e.methods
                            }))
                        }, n.onSubscriptionGiftEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.SubGift,
                                    id: Object(V.a)(e.user.username + "-sub"),
                                    channel: e.channel.slice(1),
                                    user: e.user,
                                    methods: e.methods,
                                    recipientDisplayName: e.recipientDisplayName,
                                    recipientID: e.recipientID,
                                    recipientLogin: e.recipientLogin,
                                    senderCount: e.senderCount
                                }
                            }({
                                channel: e.channel,
                                user: e.user,
                                methods: e.methods,
                                recipientDisplayName: e.recipientName,
                                recipientID: e.recipientID,
                                recipientLogin: e.recipientLogin,
                                senderCount: e.senderCount
                            }))
                        }, n.onAnonSubscriptionGiftEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.AnonSubGift,
                                    id: Object(V.a)(e.recipientDisplayName + "-sub"),
                                    channel: e.channel.slice(1),
                                    methods: e.methods,
                                    recipientDisplayName: e.recipientDisplayName,
                                    recipientID: e.recipientID,
                                    recipientLogin: e.recipientLogin
                                }
                            }({
                                channel: e.channel,
                                methods: e.methods,
                                recipientDisplayName: e.recipientName,
                                recipientID: e.recipientID,
                                recipientLogin: e.recipientLogin
                            }))
                        }, n.onSubscriptionMysteryGiftEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.SubMysteryGift,
                                    id: Object(V.a)(e.user.username + "-sub"),
                                    channel: e.channel.slice(1),
                                    user: e.user,
                                    plan: e.plan,
                                    massGiftCount: e.massGiftCount,
                                    senderCount: e.senderCount
                                }
                            }({
                                channel: e.channel,
                                user: e.user,
                                plan: e.plan,
                                massGiftCount: e.massGiftCount,
                                senderCount: e.senderCount
                            }))
                        }, n.onAnonSubscriptionMysteryGiftEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.AnonSubMysteryGift,
                                    id: Object(V.a)(e.massGiftCount + "-sub"),
                                    channel: e.channel.slice(1),
                                    plan: e.plan,
                                    massGiftCount: e.massGiftCount
                                }
                            }({
                                channel: e.channel,
                                plan: e.plan,
                                massGiftCount: e.massGiftCount
                            }))
                        }, n.onBitsCharityEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e, t, n, i, a, r) {
                                return {
                                    type: W.b.BitsCharity,
                                    id: Object(V.a)("charity"),
                                    total: e,
                                    charityName: t,
                                    daysLeft: n,
                                    hoursLeft: i,
                                    hashtag: a,
                                    learnMore: r
                                }
                            }(e.total, e.charityName, e.daysLeft, e.hoursLeft, e.hashtag, e.learnMore))
                        }, n.onResubscriptionEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e) {
                                var t = void 0;
                                return e.messageBody && (t = Z(W.c.Post, e.messageBody, e.user, Q.a, !1)), {
                                    type: W.b.Resubscription,
                                    id: Object(V.a)(e.user.username + "-sub"),
                                    channel: e.channel.slice(1),
                                    user: e.user,
                                    methods: e.methods,
                                    message: t,
                                    months: e.months
                                }
                            }({
                                channel: e.channel,
                                user: e.user,
                                methods: e.methods,
                                months: e.months,
                                messageBody: e.body
                            }))
                        }, n.onGiftPaidUpgradeEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.GiftPaidUpgrade,
                                    id: Object(V.a)(e.user.username + "-sub"),
                                    channel: e.channel.slice(1),
                                    promoGiftTotal: e.promoGiftTotal,
                                    promoName: e.promoName,
                                    senderLogin: e.senderLogin,
                                    senderName: e.senderName,
                                    user: e.user
                                }
                            }({
                                channel: e.channel,
                                promoGiftTotal: e.promoGiftTotal,
                                promoName: e.promoName,
                                senderLogin: e.senderLogin,
                                senderName: e.senderName,
                                user: e.user
                            }))
                        }, n.onAnonGiftPaidUpgradeEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.AnonGiftPaidUpgrade,
                                    id: Object(V.a)(e.user.username + "-sub"),
                                    channel: e.channel.slice(1),
                                    promoGiftTotal: e.promoGiftTotal,
                                    promoName: e.promoName,
                                    user: e.user
                                }
                            }({
                                channel: e.channel,
                                promoGiftTotal: e.promoGiftTotal,
                                promoName: e.promoName,
                                user: e.user
                            }))
                        }, n.onRoomModsEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.RoomMods,
                                    id: Object(V.a)("roommods"),
                                    moderatorLogins: e
                                }
                            }(e.usernames))
                        }, n.onRoomStateEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.RoomState,
                                    id: Object(V.a)("roomstate"),
                                    state: e
                                }
                            }(e.state))
                        }, n.onEmoteOnlyModeEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.EmoteOnlyMode,
                                    id: Object(V.a)("emoteonlymode"),
                                    enabled: e
                                }
                            }(e.enabled))
                        }, n.onSubscriberOnlyModeEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.SubscriberOnlyMode,
                                    id: Object(V.a)("subscriber-only"),
                                    enabled: e
                                }
                            }(e.enabled))
                        }, n.onR9KModeEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: W.b.R9KMode,
                                    id: Object(V.a)("r9kmode"),
                                    enabled: e
                                }
                            }(e.enabled))
                        }, n.onClearChatEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, {
                                type: W.b.Clear,
                                id: Object(V.a)("clear")
                            })
                        }, n.onRaidEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e, t, n) {
                                return {
                                    type: W.b.Raid,
                                    id: Object(V.a)("raid"),
                                    channel: e,
                                    userLogin: t,
                                    params: n
                                }
                            }(e.channel, e.userLogin, e.params))
                        }, n.onUnraidEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e, t, n) {
                                return {
                                    type: W.b.Unraid,
                                    id: Object(V.a)("unraid"),
                                    channel: e,
                                    userLogin: t,
                                    message: n
                                }
                            }(e.channel, e.userLogin, e.message))
                        }, n.onRitualEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e, t) {
                                return {
                                    type: W.b.Ritual,
                                    id: Object(V.a)(t.user.userLogin + "-" + e + "-ritual"),
                                    ritualType: e,
                                    message: t
                                }
                            }(e.type, n.convertMessage(e)))
                        }, n.onBadgesUpdatedEvent = function(e) {
                            return n.addMessage(function(e, t) {
                                return {
                                    type: W.b.BadgesUpdated,
                                    id: Object(V.a)("updateBadges"),
                                    userName: e,
                                    badges: t
                                }
                            }(e.username, e.badges))
                        }, n.onPurchaseEvent = function(e) {
                            var t = n.props.bitsConfig || Q.a;
                            n.postMessageToCurrentChannel(e, function(e, t, n, i) {
                                return {
                                    bitsConfig: i,
                                    message: t,
                                    purchase: e,
                                    timestamp: n,
                                    id: Object(V.a)(t.user.userLogin + "-purchase"),
                                    type: W.b.Purchase
                                }
                            }(e.purchase, n.convertMessage(e), e.timestamp, t))
                        }, n.onCrateEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e, t) {
                                return {
                                    type: W.b.CrateGift,
                                    id: Object(V.a)("crate"),
                                    message: e,
                                    selectedCount: t
                                }
                            }(n.convertMessage(e), e.selectedCount))
                        }, n.onRewardGiftEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e, t, n, i, a) {
                                return {
                                    type: W.b.RewardGift,
                                    id: Object(V.a)("rewardGift"),
                                    selectedCount: t,
                                    bitsAmount: n,
                                    minCheerAmount: i,
                                    messageID: e ? e.id : null,
                                    userID: e ? e.userID : null,
                                    userLogin: e ? e.username : null,
                                    displayName: e ? e.displayName : null,
                                    domain: a,
                                    sourceType: ee.a.chat_message
                                }
                            }(e.user, e.selectedCount, e.bitsAmount, e.minCheerAmount, e.domain))
                        }, n.convertMessage = function(e) {
                            var t = n.props.bitsConfig || Q.a;
                            return Z(W.c.Post, e.message.body, e.message.user, t, n.shouldBlockLinks(e.message.user))
                        }, n.logger = R.k.withCategory("chat-service"), n.logger.debug("Created"), n.service = R.p.tmi, n.client = R.p.tmi.client, n.disabled = R.p.tmi.disabled, n.registerCustomLatencyEvents(), n
                    }
                    return p.__extends(t, e), t.prototype.render = function() {
                        return null
                    }, t.prototype.componentDidMount = function() {
                        this.props.setChatConnectionAPI({
                            sendMessage: this.sendMessage
                        }), this.shouldConnectOnMount() ? this.join(this.props.channelLogin) : this.props.latencyTracking.reportInteractive(), this.props.emoteSets && this.client.updateEmoteMap(Object(ie.c)(this.props.emoteSets))
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.setChatConnectionAPI(), this.disconnect(this.props.channelLogin)
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        (e.emoteSets && e.emoteSets !== this.props.emoteSets && this.client.updateEmoteMap(Object(ie.c)(e.emoteSets)), !e.shouldConnect && this.props.shouldConnect) ? this.disconnect(this.props.channelLogin): (e.authToken !== this.props.authToken || e.channelLogin !== this.props.channelLogin || e.currentUserLogin !== this.props.currentUserLogin || e.shouldConnect && !this.props.shouldConnect) && (this.logger.debug("Reconnecting..."), this.registerCustomLatencyEvents(), this.join(e.channelLogin))
                    }, t.prototype.join = function(e) {
                        this.logger.debug("Joining channel and binding all event listeners", this.props.channelLogin), this.hasConnected = !1, this.joinedChannel && this.joinedChannel !== e && this.service.part(this.props.channelLogin), this.joinedChannel = e, this.connectHandlers(), this.service.join(e)
                    }, t.prototype.disconnect = function(e) {
                        this.logger.debug("Parting channel and unbinding all event listeners", e), this.disconnectHandlers(), this.service.part(e)
                    }, t.prototype.connectHandlers = function() {
                        this.disconnectHandlers(), this.client.events.joined(this.onJoinedEvent), this.client.events.disconnected(this.onDisconnectedEvent), this.client.events.reconnecting(this.onReconnectingEvent), this.client.events.chat(this.onChatMessageEvent), this.client.events.usernotice(this.onChatMessageEvent), this.client.events.notice(this.onChatNoticeEvent), this.client.events.action(this.onChatActionEvent), this.client.events.badgesupdated(this.onBadgesUpdatedEvent), this.client.events.hosted(this.onHostedEvent), this.client.events.hosting(this.onHostingEvent), this.client.events.unhost(this.onUnhostEvent), this.client.events.purchase(this.onPurchaseEvent), this.client.events.crate(this.onCrateEvent), this.client.events.rewardgift(this.onRewardGiftEvent), this.client.events.ritual(this.onRitualEvent), this.client.events.subscription(this.onSubscriptionEvent), this.client.events.resub(this.onResubscriptionEvent), this.client.events.giftpaidupgrade(this.onGiftPaidUpgradeEvent), this.client.events.anongiftpaidupgrade(this.onAnonGiftPaidUpgradeEvent), this.client.events.subgift(this.onSubscriptionGiftEvent), this.client.events.anonsubgift(this.onAnonSubscriptionGiftEvent), this.client.events.submysterygift(this.onSubscriptionMysteryGiftEvent), this.client.events.anonsubmysterygift(this.onAnonSubscriptionMysteryGiftEvent), this.client.events.timeout(this.onTimeoutEvent), this.client.events.ban(this.onBanEvent), this.client.events.clearchat(this.onClearChatEvent), this.client.events.clearmsg(this.onClearMsgEvent), this.client.events.raid(this.onRaidEvent), this.client.events.unraid(this.onUnraidEvent), this.client.events.mods(this.onRoomModsEvent), this.client.events.roomstate(this.onRoomStateEvent), this.client.events.subscribers(this.onSubscriberOnlyModeEvent), this.client.events.emoteonlymode(this.onEmoteOnlyModeEvent), this.client.events.r9kmode(this.onR9KModeEvent), this.client.events.charity(this.onBitsCharityEvent)
                    }, t.prototype.disconnectHandlers = function() {
                        this.client.events.remove("joined", this.onJoinedEvent), this.client.events.remove("disconnected", this.onDisconnectedEvent), this.client.events.remove("reconnecting", this.onReconnectingEvent), this.client.events.remove("chat", this.onChatMessageEvent), this.client.events.remove("usernotice", this.onChatMessageEvent), this.client.events.remove("notice", this.onChatNoticeEvent), this.client.events.remove("action", this.onChatActionEvent), this.client.events.remove("badgesupdated", this.onBadgesUpdatedEvent), this.client.events.remove("hosted", this.onHostedEvent), this.client.events.remove("hosting", this.onHostingEvent), this.client.events.remove("unhost", this.onUnhostEvent), this.client.events.remove("purchase", this.onPurchaseEvent), this.client.events.remove("crate", this.onCrateEvent), this.client.events.remove("rewardgift", this.onRewardGiftEvent), this.client.events.remove("ritual", this.onRitualEvent), this.client.events.remove("subscription", this.onSubscriptionEvent), this.client.events.remove("resub", this.onResubscriptionEvent), this.client.events.remove("subgift", this.onSubscriptionGiftEvent), this.client.events.remove("submysterygift", this.onSubscriptionMysteryGiftEvent), this.client.events.remove("timeout", this.onTimeoutEvent), this.client.events.remove("ban", this.onBanEvent), this.client.events.remove("clearchat", this.onClearChatEvent), this.client.events.remove("raid", this.onRaidEvent), this.client.events.remove("unraid", this.onUnraidEvent), this.client.events.remove("mods", this.onRoomModsEvent), this.client.events.remove("roomstate", this.onRoomStateEvent), this.client.events.remove("subscribers", this.onSubscriberOnlyModeEvent), this.client.events.remove("emoteonlymode", this.onEmoteOnlyModeEvent), this.client.events.remove("r9kmode", this.onR9KModeEvent), this.client.events.remove("charity", this.onBitsCharityEvent)
                    }, t.prototype.shouldBlockLinks = function(e) {
                        return e.username !== this.props.channelLogin && e.userType !== Y.a.Staff && e.userType !== Y.a.GlobalMod && e.userType !== Y.a.Moderator && this.props.blockLinks
                    }, t.prototype.postMessageToCurrentChannel = function(e, t) {
                        e.channel.toLowerCase().replace("#", "") === this.props.channelLogin.toLowerCase() && this.addMessage(t)
                    }, t.prototype.addMessage = function(e) {
                        this.props.messageHandlerAPI && this.props.messageHandlerAPI.handleMessage(e)
                    }, t.prototype.shouldConnectOnMount = function() {
                        return this.props.shouldConnect && !this.disabled
                    }, t.prototype.registerCustomLatencyEvents = function() {
                        this.logger.debug("Registering custom latency events"), this.props.latencyTracking.resetCustomEvents(q.a.Chat), this.chatInitialized = this.registerInitEvent(), this.props.latencyTracking.reportCustomEvent(this.chatInitialized), this.shouldConnectOnMount() && (this.chatConnected = this.registerConnectedEvent())
                    }, t.prototype.registerInitEvent = function() {
                        return this.props.latencyTracking.registerCustomEvent({
                            benchmark: 3e3,
                            group: q.a.Chat,
                            key: q.b.ChatInit,
                            label: q.c.Init
                        })
                    }, t.prototype.registerConnectedEvent = function() {
                        return this.props.latencyTracking.registerCustomEvent({
                            benchmark: 4e3,
                            group: q.a.Chat,
                            key: q.b.ChatConnected,
                            label: q.c.Connected
                        })
                    }, t
                }(h.Component);
            var re = Object(g.compose)(Object(a.connect)(function(e) {
                    var t = Object(o.e)(e);
                    return {
                        authToken: Object(o.a)(e),
                        currentUserLogin: t && t.login
                    }
                }), Object(u.b)("ChatConnectionService"), l.a, d.a)(ae),
                oe = n("lw3P"),
                se = n("nkgB"),
                le = n("RcPG"),
                ce = 1e3,
                de = 1e3,
                ue = 200,
                me = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.delayedMessageBuffer = [], n.updateHandlers = [], n.handleMessage = function(e) {
                            var t = !1;
                            switch (e.type) {
                                case W.b.Message:
                                    if (n.uncountedMessages++, e.user.userID && n.blockedUsers.has(e.user.userID)) {
                                        if (!n.props.shouldSeeBlockedAndDeletedMessages) return;
                                        e.hidden = !n.unhideUsers.has(e.user.userID)
                                    }
                                    var i = e.messageParts[0];
                                    if (i && i.type === le.a.Text && i.content.startsWith(":act ")) return;
                                    t = !n.isOwnMessage(e);
                                    break;
                                case W.b.Resubscription:
                                    t = !!e.message && !n.isOwnMessage(e.message);
                                    break;
                                case W.b.Moderation:
                                    var a = e.moderationType,
                                        r = e.userLogin;
                                    if (n.moderatedUsers.has(r)) return;
                                    var o = [n.buffer, n.delayedMessageBuffer.map(function(e) {
                                        return e.event
                                    })];
                                    if (a === W.e.Delete) {
                                        var s = e.targetMessageID;
                                        o.forEach(function(e) {
                                            e.some(function(e) {
                                                switch (e.type) {
                                                    case W.b.Message:
                                                        if (e.id === s) return e.deleted = !0, !0;
                                                        break;
                                                    case W.b.Resubscription:
                                                    case W.b.Ritual:
                                                        if (e.message && e.id === s) return e.message.deleted = !0, !0
                                                }
                                                return !1
                                            })
                                        })
                                    } else o.forEach(function(e) {
                                        e.forEach(function(e) {
                                            switch (e.type) {
                                                case W.b.Message:
                                                    e.user && r === e.user.userLogin && e.messageParts && !e.deleted && (e.deleted = !0, e.banned = !0);
                                                    break;
                                                case W.b.Resubscription:
                                                case W.b.Ritual:
                                                    e.message && r === e.message.user.userLogin && !e.message.deleted && (e.message.deleted = !0, e.message.banned = !0)
                                            }
                                        })
                                    }), n.moderatedUsers.add(r), setTimeout(n.unmoderateUser(r), ce);
                                    break;
                                case W.b.Disconnected:
                                    return;
                                case W.b.Reconnect:
                                    if (n.buffer.find(function(t) {
                                            return t.id === e.id
                                        }) || n.delayedMessageBuffer.find(function(t) {
                                            return t.event.id === e.id
                                        })) return;
                                    break;
                                case W.b.Clear:
                                    n.clear();
                                    break;
                                case W.b.AutoMod:
                                    switch (e.autoModType) {
                                        case W.a.MessageModApproved:
                                        case W.a.MessageModDenied:
                                            return void[n.buffer, n.delayedMessageBuffer.map(function(e) {
                                                return e.event
                                            })].forEach(function(t) {
                                                t.some(function(t) {
                                                    return !(t.type !== W.b.AutoMod || t.autoModType !== W.a.MessageRejectedPrompt || !t.rejectedMessage || t.rejectedMessage.id !== e.msg_id) && (t.rejectedMessage.deleted = !0, !0)
                                                })
                                            })
                                    }
                            }
                            n.delayedMessageBuffer.push({
                                event: e,
                                time: Date.now(),
                                shouldDelay: t
                            })
                        }, n.getMessages = function() {
                            return n.buffer
                        }, n.unmoderateUser = function(e) {
                            return function() {
                                n.moderatedUsers.delete(e)
                            }
                        }, n.isOwnMessage = function(e) {
                            var t = e.user;
                            return !(!n.props.currentUserLogin || !t || t.userLogin !== n.props.currentUserLogin)
                        }, n.addUpdateHandler = function(e) {
                            -1 === n.updateHandlers.indexOf(e) && (n.updateHandlers = n.updateHandlers.concat(e))
                        }, n.removeUpdateHandler = function(e) {
                            n.updateHandlers = n.updateHandlers.filter(function(t) {
                                return t !== e
                            })
                        }, n.delayedMessageBuffer = [], n.buffer = [], n.moderatedUsers = new Set, n.blockedUsers = new Set(n.props.blockedUsers), n.unhideUsers = new Set, n.flushInterval = setInterval(function() {
                            return n.flushRawMessages()
                        }, ue), n.uncountedMessages = 0, n.chatRateMeasurements = [], n.chatRateMeasurementInterval = setInterval(function() {
                            return n.measureChatRate()
                        }, de), n
                    }
                    return p.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.setMessageBufferAPI({
                            addUpdateHandler: this.addUpdateHandler,
                            removeUpdateHandler: this.removeUpdateHandler,
                            getMessages: this.getMessages
                        }), this.props.messageHandlerAPI && this.props.messageHandlerAPI.addMessageHandler(this.handleMessage)
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.setMessageBufferAPI(), this.props.messageHandlerAPI && this.props.messageHandlerAPI.removeMessageHandler(this.handleMessage), clearInterval(this.flushInterval), clearInterval(this.chatRateMeasurementInterval)
                    }, t.prototype.render = function() {
                        return null
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        this.props.messageHandlerAPI !== e.messageHandlerAPI && (this.props.messageHandlerAPI && this.props.messageHandlerAPI.removeMessageHandler(this.handleMessage), e.messageHandlerAPI && e.messageHandlerAPI.addMessageHandler(this.handleMessage)), e.blockedUsers !== this.props.blockedUsers && (this.blockedUsers = new Set(e.blockedUsers)), e.unhideIgnoredUsers !== this.props.unhideIgnoredUsers && (this.unhideUsers = new Set(e.unhideIgnoredUsers)), this.props.isBackground && !e.isBackground && (this.chatRate > 5 && this.clear(20), this.notifySubscribers())
                    }, t.prototype.clear = function(e) {
                        if (void 0 === e && (e = 0), e <= 0) return this.buffer = [], void(this.delayedMessageBuffer = []);
                        this.buffer = this.buffer.slice(-e)
                    }, t.prototype.isDeletable = function(e) {
                        return void 0 !== e.deleted
                    }, t.prototype.flushRawMessages = function() {
                        var e = this,
                            t = [],
                            n = Date.now(),
                            i = !1;
                        this.delayedMessageBuffer.forEach(function(a) {
                            var r = a.event,
                                o = a.time,
                                s = a.shouldDelay;
                            o <= n - e.delayDuration || !s ? !e.props.shouldSeeBlockedAndDeletedMessages && e.isDeletable(r) && r.deleted || (e.buffer.push(r), i = !0) : t.push({
                                event: r,
                                time: o,
                                shouldDelay: s
                            })
                        }), this.delayedMessageBuffer = t, i && (this.clear(150), this.props.isBackground || this.notifySubscribers())
                    }, t.prototype.measureChatRate = function() {
                        3 === this.chatRateMeasurements.length && this.chatRateMeasurements.shift(), this.chatRateMeasurements.push(this.uncountedMessages), this.uncountedMessages = 0
                    }, Object.defineProperty(t.prototype, "chatRate", {
                        get: function() {
                            return 0 === this.chatRateMeasurements.length ? 0 : this.chatRateMeasurements.reduce(function(e, t) {
                                return e + t
                            }) / this.chatRateMeasurements.length
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(t.prototype, "delayDuration", {
                        get: function() {
                            return this.props.isCurrentUserModerator ? 0 : this.props.data.user && this.props.data.user.chatSettings && this.props.data.user.chatSettings.chatDelayMs || 0
                        },
                        enumerable: !0,
                        configurable: !0
                    }), t.prototype.notifySubscribers = function() {
                        this.updateHandlers.forEach(function(e) {
                            return e()
                        })
                    }, t
                }(h.Component);
            var pe = Object(g.compose)(Object(a.connect)(function(e) {
                    var t = Object(o.e)(e);
                    return {
                        authToken: Object(o.a)(e),
                        currentUserLogin: t && t.login,
                        isLoggedIn: Object(o.f)(e)
                    }
                }), Object(r.a)(se, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                }), Object(oe.a)(), c.a, d.a)(me),
                he = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.messageHandlers = [], t.addMessageHandler = function(e) {
                            -1 === t.messageHandlers.indexOf(e) && (t.messageHandlers = t.messageHandlers.concat(e))
                        }, t.removeMessageHandler = function(e) {
                            t.messageHandlers = t.messageHandlers.filter(function(t) {
                                return t !== e
                            })
                        }, t.handleMessage = function(e) {
                            for (var n = t.messageHandlers.length, i = 0; i < n; i++) t.messageHandlers[i](e)
                        }, t
                    }
                    return p.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.setMessageHandlerAPI({
                            addMessageHandler: this.addMessageHandler,
                            removeMessageHandler: this.removeMessageHandler,
                            handleMessage: this.handleMessage
                        })
                    }, t.prototype.render = function() {
                        return null
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.setMessageHandlerAPI()
                    }, t
                }(h.Component),
                ge = Object(g.compose)(d.a)(he),
                fe = n("0Log"),
                be = n("/aPz"),
                ve = n("KGti"),
                ke = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.subscribe = function(e) {
                            t.unsubscribe(), e.channelID && e.currentUserID && (t.unsubscriber = R.l.subscribe({
                                topic: Object(be.o)(e.currentUserID, e.channelID),
                                onMessage: t.handleMessage
                            }))
                        }, t.unsubscribe = function() {
                            t.unsubscriber && (t.unsubscriber(), t.unsubscriber = null)
                        }, t.handleMessage = function(e) {
                            switch (e.data.moderation_action) {
                                case fe.ModerationActions.AutoModRejected:
                                    var n = Object(ve.j)(e.data.msg_id, e.data.args[1], e.data.args[0], e.data.args[2]);
                                    t.addMessage(n);
                                    break;
                                case fe.ModerationActions.AutoModCheerRejected:
                                    var i = Object(ve.c)(e.data.msg_id, e.data.args[1], e.data.args[0], e.data.args[2], e.data.target_user_id);
                                    t.addMessage(i);
                                    break;
                                case fe.ModerationActions.ApprovedAutoModMessage:
                                    t.addMessage(Object(ve.g)(e));
                                    break;
                                case fe.ModerationActions.DeniedAutoModMessage:
                                    t.addMessage(Object(ve.h)(e));
                                    break;
                                case fe.TargetedModerationActions.AutoModMessageRejected:
                                    t.addMessage(Object(ve.i)());
                                    break;
                                case fe.TargetedModerationActions.AutoModMessageApproved:
                                    t.addMessage(Object(ve.e)());
                                    break;
                                case fe.TargetedModerationActions.AutoModMessageDenied:
                                    t.addMessage(Object(ve.f)());
                                    break;
                                case fe.TargetedModerationActions.AutoModCheerDenied:
                                    t.addMessage(Object(ve.b)());
                                    break;
                                case fe.TargetedModerationActions.AutoModCheerTimeout:
                                    t.addMessage(Object(ve.d)());
                                    break;
                                case fe.ModerationActions.Ban:
                                    t.addMessage(Object(ve.l)(e.data.moderation_action, e.data.created_by, e.data.created_by_user_id, e.data.target_user_id, e.data.args[0], void 0, e.data.args[1]));
                                    break;
                                case fe.ModerationActions.Delete:
                                    t.addMessage(Object(ve.l)(e.data.moderation_action, e.data.created_by, e.data.created_by_user_id, e.data.target_user_id, e.data.args[0], void 0, void 0, e.data.args[1], e.data.args[2]));
                                    break;
                                case fe.ModerationActions.Unban:
                                case fe.ModerationActions.Timeout:
                                case fe.ModerationActions.Untimeout:
                                case fe.ModerationActions.Mod:
                                case fe.ModerationActions.Unmod:
                                    t.addMessage(Object(ve.l)(e.data.moderation_action, e.data.created_by, e.data.created_by_user_id, e.data.target_user_id, e.data.args[0], e.data.args[1], e.data.args[2]));
                                    break;
                                case fe.ModerationActions.AutoModEnabled:
                                case fe.ModerationActions.Clear:
                                case fe.ModerationActions.EmoteOnly:
                                case fe.ModerationActions.EmoteOnlyOff:
                                case fe.ModerationActions.FollowersOnly:
                                case fe.ModerationActions.FollowersOnlyOff:
                                case fe.ModerationActions.Host:
                                case fe.ModerationActions.R9kBeta:
                                case fe.ModerationActions.R9kBetaOff:
                                case fe.ModerationActions.Raid:
                                case fe.ModerationActions.Slow:
                                case fe.ModerationActions.SlowOff:
                                case fe.ModerationActions.SubsBeta:
                                case fe.ModerationActions.SubscribersOnly:
                                case fe.ModerationActions.SubscribersOnlyOff:
                                case fe.ModerationActions.Unhost:
                                case fe.ModerationActions.AddBlockedTerm:
                                case fe.ModerationActions.AddPermittedTerm:
                                case fe.ModerationActions.DeleteBlockedTerm:
                                case fe.ModerationActions.DeletePermittedTerm:
                                case fe.ModerationActions.ModifiedAutoModProperties:
                                case fe.ModerationActions.Unraid:
                                    t.addMessage(Object(ve.k)(e.data.moderation_action, e.data.created_by, e.data.created_by_user_id, e.data.args));
                                    break;
                                default:
                                    R.k.warn("Unknown moderation action type", e.data.moderation_action)
                            }
                        }, t
                    }
                    return p.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.subscribe(this.props)
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        e.channelID === this.props.channelID && e.currentUserID === this.props.currentUserID || this.subscribe(e)
                    }, t.prototype.componentWillUnmount = function() {
                        this.unsubscribe()
                    }, t.prototype.render = function() {
                        return null
                    }, t.prototype.addMessage = function(e) {
                        this.props.messageHandlerAPI ? this.props.messageHandlerAPI.handleMessage(e) : R.k.warn("ModerationActionService received an event before the MessageHandlerAPI was available.")
                    }, t
                }(h.Component);
            var Ce = Object(g.compose)(Object(a.connect)(function(e) {
                    var t = Object(o.e)(e);
                    return {
                        currentUserID: t && t.id
                    }
                }), d.a)(ke),
                ye = n("gq0V"),
                Ee = n("BJwa"),
                Se = "(?:\\W|^)",
                Ne = "(?:$|\\W)",
                _e = "PowerUpL DarkMode PowerUpR",
                Oe = {
                    failSilently: !0,
                    placeholder: null
                },
                we = f.a.wrap(function() {
                    return n.e(198).then(n.bind(null, "Gnts"))
                }, "MysteryGiftChatBannerQueue", Oe),
                Me = f.a.wrap(function() {
                    return n.e(197).then(n.bind(null, "KSjr"))
                }, "NativeBroadcastNotification", Oe),
                De = f.a.wrap(function() {
                    return n.e(196).then(n.bind(null, "T3fw"))
                }, "Orbis", Oe),
                Ie = f.a.wrap(function() {
                    return n.e(195).then(n.bind(null, "7htX"))
                }, "RaidNotification", Oe),
                Te = f.a.wrap(function() {
                    return n.e(194).then(n.bind(null, "rg60"))
                }, "RitualsOnboardingSticky", Oe),
                Re = f.a.wrap(function() {
                    return n.e(193).then(n.bind(null, "miqE"))
                }, "ShareToChat", Oe),
                je = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.state = {
                            hasReceivedInitialRoomState: !1,
                            hostedChannelLogin: null,
                            userBadges: null
                        }, n.sendMessage = function(e) {
                            if (!e || 0 === e.length || !n.props.authToken) return !1;
                            if (!n.props.chatConnectionAPI) return !1;
                            var t = n.props.chatConnectionAPI.sendMessage(e);
                            return (!t || !t.preserveInput) && (n.parseOutgoingMessage(e), !0)
                        }, n.pushMessage = function(e) {
                            n.props.messageHandlerAPI && n.props.messageHandlerAPI.handleMessage(e)
                        }, n.onChatEvent = function(e) {
                            switch (e.type) {
                                case W.b.Hosting:
                                    n.hostingHandler(e.hostedChannel);
                                    break;
                                case W.b.Unhost:
                                    n.hostingHandler(null);
                                    break;
                                case W.b.RoomState:
                                    n.onRoomStateUpdated(e.state);
                                    break;
                                case W.b.BadgesUpdated:
                                    n.onBadgesUpdated(e)
                            }
                        }, n.hostingHandler = function(e) {
                            n.setState({
                                hostedChannelLogin: e
                            }), n.props.onHostingChange && n.props.onHostingChange(e)
                        }, n.createOutgoingTokenMatchers = function(e) {
                            n.outgoingTokenMatchers = e.map(function(e) {
                                return {
                                    token: e,
                                    regex: new RegExp("" + Se + e + Ne)
                                }
                            })
                        }, n.parseOutgoingMessage = function(e) {
                            n.outgoingTokenMatchers.forEach(function(t) {
                                t.regex.test(e) && n.onOutgoingTokenMatch(t.token, e)
                            })
                        }, n.onOutgoingTokenMatch = function(e, t) {
                            switch (e) {
                                case _e:
                                    var i = n.props.theme === b.a.Light ? b.a.Dark : b.a.Light;
                                    n.props.onThemeChange(i);
                                    break;
                                default:
                                    return
                            }
                        }, n.onBadgesUpdated = function(e) {
                            n.setState({
                                userBadges: e.badges
                            })
                        }, n.onRoomStateUpdated = function(e) {
                            n.props.onRoomStateUpdate(e), n.setState({
                                hasReceivedInitialRoomState: !0
                            })
                        }, n.createOutgoingTokenMatchers([_e]), n
                    }
                    return p.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.messageHandlerAPI && this.props.messageHandlerAPI.addMessageHandler(this.onChatEvent)
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.messageHandlerAPI && this.props.messageHandlerAPI.removeMessageHandler(this.onChatEvent)
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        e.channelLogin !== this.props.channelLogin && this.setState({
                            hostedChannelLogin: null
                        }), this.state.hasReceivedInitialRoomState && (this.props.followerModeDuration === e.followerModeDuration && this.props.followerModeEnabled === e.followerModeEnabled || this.pushMessage(function(e, t) {
                            return {
                                type: W.b.FollowerOnlyMode,
                                id: Object(V.a)("follower-only"),
                                enabled: e,
                                length: t
                            }
                        }(e.followerModeEnabled, e.followerModeDuration)), this.props.slowModeEnabled === e.slowModeEnabled && this.props.slowModeDuration === e.slowModeDuration || this.pushMessage(function(e, t) {
                            return {
                                type: W.b.SlowMode,
                                id: Object(V.a)("slowmode"),
                                enabled: e,
                                length: t
                            }
                        }(e.slowModeEnabled, e.slowModeDuration))), this.props.messageHandlerAPI !== e.messageHandlerAPI && (this.props.messageHandlerAPI && this.props.messageHandlerAPI.removeMessageHandler(this.onChatEvent), e.messageHandlerAPI && e.messageHandlerAPI.addMessageHandler(this.onChatEvent))
                    }, t.prototype.render = function() {
                        var e, t = this.props.emoteSetsData && this.props.emoteSetsData.emoteSets || [],
                            n = this.props.isHidden || !this.props.rightColumnExpanded && !this.props.inlineRightColumnExpanded,
                            i = !(!this.props.isEmbedded && !this.props.isPopout && n && !this.props.shouldConnectChat);
                        return this.props.firstPageLoaded && (e = h.createElement(De, {
                            channelLogin: this.props.channelLogin,
                            sendMessage: this.sendMessage
                        })), h.createElement(h.Fragment, null, h.createElement(Ee.b, {
                            authToken: this.props.authToken,
                            bitsConfig: this.props.bitsConfig,
                            blockLinks: this.props.blockLinks,
                            channelDisplayName: this.props.channelDisplayName,
                            channelID: this.props.channelID,
                            channelLogin: this.props.channelLogin,
                            chatRoomHeader: e,
                            chatRules: this.props.chatRules,
                            closeRoomPicker: this.props.closeRoomPicker,
                            currentUserDisplayName: this.props.userDisplayName,
                            currentUserLogin: this.props.userLogin,
                            emotes: t,
                            emoteMap: this.props.emoteSetsData && this.props.emoteSetsData.emoteMap || {},
                            firstPageLoaded: this.props.firstPageLoaded,
                            hostedChannelLogin: this.state.hostedChannelLogin,
                            isBackground: this.props.isBackground,
                            isChatRulesOpen: this.props.isChatRulesOpen,
                            isCurrentUserModerator: this.props.isCurrentUserModerator,
                            isEmbedded: this.props.isEmbedded,
                            isHidden: this.props.isHidden,
                            isHostMode: !!this.state.hostedChannelLogin,
                            isOwnChannel: this.isOwnChannel,
                            isPopout: this.props.isPopout,
                            isStaff: this.props.isStaff,
                            onChatUnhide: this.props.onChatUnhide,
                            onCloseChatRules: this.props.onCloseChatRules,
                            onPushMessage: this.pushMessage,
                            onSendMessage: this.sendMessage,
                            onShowChatRules: this.props.onShowChatRules,
                            theme: this.props.theme,
                            userBadges: this.state.userBadges,
                            userID: this.props.userID
                        }, this.props.firstPageLoaded && this.props.authToken && !this.props.isEmbedded && h.createElement(Re, {
                            authToken: this.props.authToken,
                            channelDisplayName: this.props.channelDisplayName,
                            channelLogin: this.props.channelLogin,
                            bitsConfig: this.props.bitsConfig,
                            "data-test-selector": "share-to-chat"
                        }), this.props.hostedChannelDisplayName && !this.props.isPopout && h.createElement(H, {
                            hostedChannelDisplayName: this.props.hostedChannelDisplayName || "",
                            hostedChannelLogin: this.state.hostedChannelLogin || ""
                        }), this.props.firstPageLoaded && !this.props.isEmbedded && this.props.channelID && h.createElement(Ie, {
                            channelID: this.props.channelID,
                            "data-test-selector": "raid-notification"
                        }), this.props.firstPageLoaded && !this.props.isEmbedded && h.createElement(we, {
                            channelID: this.props.channelID
                        }), this.props.firstPageLoaded && !this.props.isEmbedded && !this.props.isPopout && h.createElement(Me, {
                            channelLogin: this.props.channelLogin
                        }), this.props.firstPageLoaded && !this.props.isEmbedded && !this.props.isPopout && h.createElement(Te, {
                            channelID: this.props.channelID,
                            channelLogin: this.props.channelLogin
                        })), this.renderCommandHandlers(), h.createElement(z, {
                            channelDisplayName: this.props.channelDisplayName,
                            channelLogin: this.props.channelLogin
                        }), h.createElement(re, {
                            bitsConfig: this.props.bitsConfig,
                            blockLinks: this.props.blockLinks,
                            channelLogin: this.props.channelLogin,
                            emoteSets: this.props.emoteSetsData && this.props.emoteSetsData.emoteSets || [],
                            isHostMode: !!this.state.hostedChannelLogin,
                            shouldConnect: i
                        }), h.createElement(pe, {
                            channelLogin: this.props.channelLogin,
                            shouldSeeBlockedAndDeletedMessages: this.props.shouldSeeBlockedAndDeletedMessages,
                            isBackground: !!this.props.isBackground,
                            isCurrentUserModerator: this.props.isCurrentUserModerator,
                            unhideIgnoredUsers: this.props.unhideIgnoredUsers
                        }), h.createElement(ge, null), h.createElement(Ce, {
                            channelID: this.props.channelID
                        }))
                    }, t.prototype.renderCommandHandlers = function() {
                        if (this.props.passThroughCommands || this.props.isBackground) return null;
                        var e = this.props.emoteSetsData && this.props.emoteSetsData.emoteMap || {},
                            t = this.props,
                            n = t.channelID,
                            i = t.isPopout,
                            a = t.userLogin;
                        return h.createElement(h.Fragment, null, h.createElement(P.a, {
                            isEmbedded: this.props.isEmbedded,
                            isPopout: i,
                            userLogin: a,
                            userID: this.props.userID,
                            emoteMap: e
                        }), h.createElement(y.a, {
                            channelID: this.props.channelID,
                            suppressLocalSuccessMessage: !0
                        }), h.createElement(E.a, {
                            channelLogin: this.props.channelLogin,
                            isPopout: i
                        }), h.createElement(S.a, null), h.createElement(_.a, {
                            channelID: n
                        }), h.createElement(ye.a, null, h.createElement(F, {
                            channelID: n
                        })), h.createElement(N.a, {
                            currentUserLogin: a
                        }), this.props.chatRules && !!this.props.chatRules.length && h.createElement(T, null))
                    }, Object.defineProperty(t.prototype, "isOwnChannel", {
                        get: function() {
                            return this.props.userID === this.props.channelID
                        },
                        enumerable: !0,
                        configurable: !0
                    }), t
                }(h.Component);
            var Ae = Object(i.compose)(Object(a.connect)(function(e) {
                    return {
                        firstPageLoaded: e.session.firstPageLoaded,
                        isChatRulesOpen: e.chat.isChatRulesOpen,
                        isHidden: e.chat.isHidden,
                        isLoggedIn: Object(o.f)(e),
                        rightColumnExpanded: e.ui.rightColumnExpanded,
                        inlineRightColumnExpanded: e.ui.inlineRightColumnExpanded,
                        theme: Object(C.a)(e),
                        followerModeDuration: e.chat.followerDuration,
                        followerModeEnabled: e.chat.followerMode,
                        slowModeDuration: e.chat.slowModeDuration,
                        slowModeEnabled: e.chat.slowMode,
                        unhideIgnoredUsers: e.chat.unhideIgnoredUsers
                    }
                }, function(e) {
                    return Object(g.bindActionCreators)({
                        onCloseChatRules: function() {
                            return w.z()
                        },
                        onShowChatRules: function() {
                            return w.P()
                        },
                        onChatUnhide: function() {
                            return w.O()
                        },
                        onRoomStateUpdate: function(e) {
                            return w.S(e)
                        },
                        onThemeChange: function(e) {
                            return Object(k.b)(e, k.a.TypedCommand)
                        }
                    }, e)
                }), Object(u.b)("ChatRoom", {
                    autoReportInteractive: !0
                }), Object(v.a)(), l.a, d.a)(je),
                Ue = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return p.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive()
                    }, t.prototype.componentDidUpdate = function() {
                        this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        var e = this.props.channelData.channel,
                            t = this.props.userData && this.props.userData.user,
                            n = !1,
                            i = !1,
                            a = !1;
                        if (t && e && e.self) {
                            var r = t.login === e.login;
                            n = e.self.isModerator || r || t.roles.isGlobalMod || t.roles.isSiteAdmin, i = t.roles.isStaff, a = e.self.isModerator || r || t.roles.isGlobalMod
                        }
                        var o = void 0;
                        e && e.chatSettings && e.chatSettings.rules && e.chatSettings.rules.filter(function(e) {
                            return e.trim().length
                        }).length && (o = e.chatSettings.rules);
                        var s = !(!e || !e.chatSettings) && e.chatSettings.blockLinks;
                        return h.createElement(Ae, {
                            key: this.props.channelLogin,
                            authToken: this.props.sessionUser && this.props.sessionUser.authToken,
                            bitsConfig: this.props.bitsConfig,
                            blockLinks: s,
                            channelDisplayName: e && e.displayName,
                            channelID: e && e.id,
                            channelLogin: this.props.channelLogin,
                            chatRules: o,
                            clientID: this.props.clientID,
                            isBackground: this.props.isBackground,
                            isCurrentUserModerator: n,
                            isEmbedded: !!this.props.isEmbedded,
                            isPopout: !!this.props.isPopout,
                            hostedChannelDisplayName: this.props.hostedChannelDisplayName,
                            closeRoomPicker: this.props.closeRoomPicker,
                            onHostingChange: this.props.onHostingChange,
                            userDisplayName: this.props.sessionUser && this.props.sessionUser.displayName,
                            userID: this.props.sessionUser && this.props.sessionUser.id.toString(),
                            userLogin: this.props.sessionUser && this.props.sessionUser.login,
                            isStaff: i,
                            shouldSeeBlockedAndDeletedMessages: a,
                            passThroughCommands: this.props.passThroughCommands,
                            shouldConnectChat: this.props.shouldConnectChat
                        })
                    }, t
                }(h.Component),
                Le = n("9P+5");
            var Be = Object(i.compose)(Object(a.connect)(function(e) {
                    return {
                        sessionUser: Object(o.e)(e)
                    }
                }), Object(r.a)(m, {
                    name: "channelData",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                }), Object(r.a)(Le, {
                    name: "userData",
                    skip: function(e) {
                        return !e.sessionUser
                    }
                }), Object(u.b)("Chat"))(Ue),
                xe = Object(i.compose)(s.b, l.b, c.b, d.b)(Be);
            n.d(t, !1, function() {
                return Ue
            }), n.d(t, "b", function() {
                return Be
            }), n.d(t, "a", function() {
                return xe
            })
        },
        L6L7: function(e, t, n) {},
        LfZz: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("/MKj"),
                r = n("fvjX"),
                o = n("1/iK"),
                s = n("aCAx"),
                l = n("y5D0"),
                c = n("kRBY"),
                d = n("/HY+"),
                u = n("q1tI"),
                m = n("/7QA"),
                p = n("eJ65"),
                h = n("DMoW"),
                g = n("Ue10"),
                f = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleReportClick = function() {
                            if (!t.props.isLoggedIn) return t.props.login();
                            if (t.props.targetUser) {
                                var e = "https://www.twitch.tv/events/" + t.props.eventID;
                                t.props.showReportUserModal({
                                    reportContext: {
                                        contentType: h.N.USER_REPORT,
                                        targetUserID: t.props.targetUser.id
                                    },
                                    title: Object(m.d)("Report {channelName}", {
                                        channelName: t.props.targetUser.displayName
                                    }, "EventMoreMenu"),
                                    defaultDescription: "Report event: " + e
                                })
                            }
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return u.createElement(p.a, null, u.createElement(g.z, {
                            icon: g.tb.More,
                            type: g.F.Hollow
                        }), u.createElement(g.u, {
                            direction: this.props.balloonDirection,
                            tailOffset: this.props.tailOffset
                        }, u.createElement(g.Xa, {
                            padding: {
                                y: 1
                            }
                        }, u.createElement(g.Ua, {
                            disabled: !this.props.targetUser,
                            onClick: this.handleReportClick
                        }, u.createElement(g.Xa, {
                            padding: {
                                x: 1,
                                y: .5
                            }
                        }, Object(m.d)("Report", "EventMoreMenu"))))))
                    }, t
                }(u.Component);
            var b = Object(a.connect)(function(e) {
                return {
                    isLoggedIn: Object(c.f)(e)
                }
            }, function(e) {
                return Object(r.bindActionCreators)({
                    login: function() {
                        return Object(l.e)(o.a.ReportChannel)
                    },
                    showReportUserModal: function(e) {
                        var t = i.__rest(e, []);
                        return Object(s.d)(d.a, t)
                    }
                }, e)
            })(f);
            n.d(t, "a", function() {
                return b
            })
        },
        Lmqf: function(e, t, n) {
            e.exports = n.p + "assets/upsell-center-dark-6c092df86238db84cff1.png"
        },
        MBj5: function(e, t, n) {},
        MIhh: function(e, t, n) {},
        MJbm: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("q1tI"),
                r = n("/7QA"),
                o = (n("efEE"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.logger = r.p.logger.withCategory("resize-detector"), t.onScroll = function() {
                            var e = t.container,
                                n = e.offsetWidth,
                                i = e.offsetHeight,
                                a = e.offsetLeft,
                                r = e.offsetTop;
                            t.logger.debug("Resize Detector -- onScroll"), n === t.width && i === t.height && r === t.top && a === t.left || (t.width = n, t.height = i, t.props.onResize(n, i, r, a)), t.reset()
                        }, t.setGrowDivRef = function(e) {
                            return t.growDiv = e
                        }, t.setGrowChildDivRef = function(e) {
                            return t.growChildDiv = e
                        }, t.setShrinkDivRef = function(e) {
                            return t.shrinkDiv = e
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return a.createElement("div", {
                            className: "resize-detector"
                        }, a.createElement("div", {
                            className: "resize-detector",
                            ref: this.setGrowDivRef
                        }, a.createElement("div", {
                            className: "resize-detector__grow",
                            ref: this.setGrowChildDivRef
                        })), a.createElement("div", {
                            className: "resize-detector",
                            ref: this.setShrinkDivRef
                        }, a.createElement("div", {
                            className: "resize-detector__shrink"
                        })))
                    }, t.prototype.componentDidMount = function() {
                        if (this.growDiv) {
                            this.growDiv.parentElement || this.logger.warn("growDiv.parentElement is undefined!"), this.container = this.growDiv.parentElement.parentElement;
                            var e = this.container.style.position;
                            if ("relative" !== e && "absolute" !== e && "fixed" !== e) {
                                var t = window.getComputedStyle(this.container);
                                t && "static" === t.getPropertyValue("position") && (this.container.style.position = "relative")
                            }
                            this.onScroll(), this.growDiv.addEventListener("scroll", this.onScroll), this.shrinkDiv.addEventListener("scroll", this.onScroll)
                        } else this.logger.warn("growDiv is undefined!")
                    }, t.prototype.componentWillUnmount = function() {
                        this.growDiv.removeEventListener("scroll", this.onScroll), this.shrinkDiv.removeEventListener("scroll", this.onScroll)
                    }, t.prototype.reset = function() {
                        var e = this.growDiv,
                            t = this.shrinkDiv,
                            n = this.growChildDiv.style;
                        n.width = "100000px", n.height = "100000px", e.scrollLeft = 1e5, e.scrollTop = 1e5, t.scrollLeft = 1e5, t.scrollTop = 1e5
                    }, t
                }(a.Component));
            n.d(t, "a", function() {
                return o
            })
        },
        MPK0: function(e, t, n) {},
        MVDO: function(e, t, n) {},
        Mj6i: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return c
            });
            var i = n("mrSG"),
                a = n("/7QA"),
                r = n("yR8l"),
                o = n("0FG4"),
                s = n("D7An"),
                l = n("S4w9");

            function c() {
                return Object(r.a)(l, {
                    options: function(e) {
                        return {
                            variables: {
                                withOwner: "on" === a.p.experiments.getAssignment(s.b.EmotePickerV2)
                            }
                        }
                    },
                    props: function(e) {
                        if (e.data) {
                            var t = e.data.currentUser && e.data.currentUser.emoteSets || [],
                                n = t && Object(o.b)(t);
                            return {
                                emoteSetsData: i.__assign({}, e.data, {
                                    currentUser: e.data.currentUser || null,
                                    emoteMap: n,
                                    emoteSets: t
                                })
                            }
                        }
                        return {}
                    },
                    skip: function(e) {
                        return !e.isLoggedIn
                    }
                })
            }
        },
        NNSq: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            });
            var i = n("mrSG"),
                a = n("/7QA"),
                r = n("sAMt");

            function o(e) {
                return i.__awaiter(this, void 0, Promise, function() {
                    var t, n;
                    return i.__generator(this, function(i) {
                        switch (i.label) {
                            case 0:
                                t = null, i.label = 1;
                            case 1:
                                return i.trys.push([1, 3, , 4]), [4, a.p.apollo.client.query({
                                    query: r,
                                    variables: {
                                        login: e
                                    }
                                })];
                            case 2:
                                return t = i.sent(), [3, 4];
                            case 3:
                                return n = i.sent(), a.k.warn(n, "Failed to fetch user targeted by chat command.", {
                                    userLogin: e
                                }), [3, 4];
                            case 4:
                                return t && t.data.user.id ? [2, t.data.user.id] : [2, null]
                        }
                    })
                })
            }
        },
        NWfm: function(e, t, n) {},
        OCTF: function(e, t, n) {},
        OXQr: function(e, t, n) {},
        OpME: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return c
            }), n.d(t, "e", function() {
                return d
            }), n.d(t, "c", function() {
                return m
            }), n.d(t, "a", function() {
                return p
            }), n.d(t, "f", function() {
                return h
            }), n.d(t, "d", function() {
                return g
            });
            var i = n("mrSG"),
                a = n("lZdE"),
                r = n("cpJf"),
                o = {
                    "B-?\\)": "B)",
                    "\\:-?[z|Z|\\|]": ":|",
                    "\\:-?\\)": ":)",
                    "\\:-?\\(": ":(",
                    "\\:-?(p|P)": ":P",
                    "\\;-?(p|P)": ";P",
                    "\\:-?[\\\\/]": ":/",
                    "\\;-?\\)": ";)",
                    "R-?\\)": "R)",
                    ":>": ":>",
                    "\\:\\&gt\\;": ":>",
                    "[oO](_|\\.)[oO]": "O_o",
                    "\\:-?D": ":D",
                    "\\:-?(o|O)": ":O",
                    ">\\\\(": ">(",
                    ":-?(?:7|L)": ":7",
                    "\\:-?(S|s)": ":S",
                    "#-?[\\\\/]": "#/",
                    "<\\]": "<]",
                    "<3": "<3",
                    "\\&lt\\;3": "<3",
                    "\\&lt\\;\\]": "<]",
                    "\\&gt\\;\\(": ">("
                },
                s = ["1.0", "2.0", "3.0"],
                l = new Set([457, 33, 42, 0]);

            function c(e) {
                for (var t = [], n = function(e) {
                        if (!e || !e.id || !e.token) return "continue";
                        var n = o[e.token] || e.token,
                            a = s.reduce(function(t, n) {
                                var i = t;
                                return i && (i = i.concat(", ")), i.concat("https://static-cdn.jtvnw.net/emoticons/v1/" + e.id + "/" + n + " " + n + "x")
                            }, "");
                        t.push(i.__assign({
                            displayName: n,
                            srcSet: a
                        }, e))
                    }, a = 0, r = e; a < r.length; a++) {
                    n(r[a])
                }
                return t
            }

            function d(e, t) {
                var n = c(e);
                return t && (n = function(e, t) {
                    return e.map(function(e) {
                        return i.__assign({}, e, {
                            setID: t
                        })
                    })
                }(n, t)), n
            }

            function u(e) {
                return e.filter(function(e) {
                    return !!e && !!e.id && !!e.token
                }).sort(function(e, t) {
                    return parseInt(e.id, 10) - parseInt(t.id, 10)
                })
            }

            function m(e) {
                for (var t = [], n = 0, i = e; n < i.length; n++) {
                    var a = i[n];
                    if (a && a.id && a.emotes) {
                        for (var r = {
                                id: a.id,
                                emotes: []
                            }, o = 0, s = a.emotes; o < s.length; o++) {
                            var l = s[o];
                            l && l.id && l.token && r.emotes.push(l)
                        }
                        t.push(r)
                    }
                }
                return t
            }

            function p(e) {
                for (var t = [], n = [], i = 0, a = e; i < a.length; i++) {
                    var r = a[i];
                    if (r && r.id && r.emotes) {
                        var o = {
                            id: r.id,
                            emotes: d(u(r.emotes), r.id)
                        };
                        r.owner && (o.owner = r.owner), l.has(parseInt(r.id, 10)) ? t.push(o) : n.push(o)
                    }
                }
                return n.concat(t)
            }
            var h = function(e, t, n) {
                    var i = n || r.d,
                        o = [],
                        s = [],
                        l = [],
                        c = new RegExp("^" + Object(a.a)(t), "i");
                    return e.forEach(function(e) {
                        i[e.token] ? l.push(e) : e.token.match(c) ? o.push(e) : s.push(e)
                    }), o.sort(function(e, t) {
                        return e.token < t.token ? -1 : e.token > t.token ? 1 : 0
                    }), s.sort(function(e, t) {
                        return e.token < t.token ? -1 : e.token > t.token ? 1 : 0
                    }), l.sort(function(e, t) {
                        return i[t.token].count - i[e.token].count
                    }), l.concat(o).concat(s)
                },
                g = function(e) {
                    var t = {};
                    return e.filter(function(e) {
                        return !t.hasOwnProperty(e.token) && (t[e.token] = !0)
                    })
                }
        },
        OvAg: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "IncomingRaidLine_Channel"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "channel"
                            },
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "profileImageURL"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "50"
                                        }
                                    }],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 140
                }
            };
            n.loc.source = {
                body: "query IncomingRaidLine_Channel($channelLogin: String!) {\nchannel: user(login: $channelLogin) {\nid\ndisplayName\nprofileImageURL(width: 50)\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        Oy4H: function(e, t, n) {},
        PrJw: function(e, t, n) {
            "use strict";
            var i = n("vGFN");
            n.d(t, "a", function() {
                return i.b
            }), n.d(t, "b", function() {
                return i.c
            }), n.d(t, "c", function() {
                return i.d
            }), n.d(t, "d", function() {
                return i.e
            }), n.d(t, "e", function() {
                return i.f
            }), n.d(t, "f", function() {
                return i.g
            }), n.d(t, "g", function() {
                return i.h
            }), n.d(t, "h", function() {
                return i.i
            }), n.d(t, "i", function() {
                return i.j
            }), n.d(t, "j", function() {
                return i.k
            }), n.d(t, "k", function() {
                return i.m
            }), n.d(t, "l", function() {
                return i.p
            }), n.d(t, "m", function() {
                return i.q
            })
        },
        PtXu: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("q1tI"),
                r = n("oJmH"),
                o = n("/7QA"),
                s = n("gcd7"),
                l = n("AKV8"),
                c = n("yzwe"),
                d = n("3HtZ"),
                u = n("QVaV"),
                m = n("vSeP"),
                p = n("Ue10"),
                h = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.modUser = function(e) {
                            var n = e.trim().split(/\s+/),
                                i = t.userLogin(n[0]);
                            return 1 === n.length && i && 0 !== i.length ? {
                                deferred: t.props.modUserMutation(i).then(function(e) {
                                    if (e.modUser.error) switch (e.modUser.error.code) {
                                        case l.a.Forbidden:
                                            return {
                                                notice: f()
                                            };
                                        case l.a.UserAlreadyModded:
                                            return {
                                                notice: Object(o.d)("{login} is already a moderator of this channel.", {
                                                    login: i
                                                }, "ModCommandHandler")
                                            };
                                        case l.a.UserBanned:
                                            return {
                                                notice: Object(o.d)("{login} is banned in this channel. You must unban this user before granting mod status.", {
                                                    login: i
                                                }, "ModCommandHandler")
                                            };
                                        case l.a.UserNotFound:
                                            return {
                                                notice: g(i)
                                            };
                                        default:
                                            return {
                                                notice: b()
                                            }
                                    }
                                    return {
                                        notice: Object(o.d)("You have added {login} as a moderator of this channel.", {
                                            login: i
                                        }, "ModCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: b()
                                    }
                                })
                            } : {
                                deferred: Promise.resolve({
                                    notice: Object(o.d)('Usage: "/mod [login]" - Grant mod status to a user. Use "mods" to list the moderators of this channel.', "ModCommandHandler")
                                })
                            }
                        }, t.mods = function(e) {
                            return {
                                deferred: o.p.apollo.client.query({
                                    query: d,
                                    fetchPolicy: "network-only",
                                    variables: {
                                        id: t.props.channelID
                                    }
                                }).then(function(e) {
                                    if (!e.data.user) return {
                                        notice: v()
                                    };
                                    if (0 === e.data.user.mods.edges.length) return {
                                        notice: Object(o.d)("There are no moderators of this channel.", "ModCommandHandler")
                                    };
                                    var t = e.data.user.mods.edges.map(function(e) {
                                        return e.node.login
                                    }).join(", ");
                                    return {
                                        notice: Object(o.d)("The moderators of this channel are: {mods}.", {
                                            mods: t
                                        }, "ModCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: v()
                                    }
                                })
                            }
                        }, t.unmodUser = function(e) {
                            var n = e.trim().split(/\s+/),
                                i = t.userLogin(n[0]);
                            return 1 === n.length && i && 0 !== i.length ? {
                                deferred: t.props.unmodUserMutation(i).then(function(e) {
                                    if (e.unmodUser.error) switch (e.unmodUser.error.code) {
                                        case c.a.Forbidden:
                                            return {
                                                notice: f()
                                            };
                                        case c.a.UserNotFound:
                                            return {
                                                notice: g(i)
                                            };
                                        case c.a.UserNotMod:
                                            return {
                                                notice: Object(o.d)("{login} is currently not a moderator of this channel.", {
                                                    login: i
                                                }, "ModCommandHandler")
                                            };
                                        default:
                                            return {
                                                notice: k()
                                            }
                                    }
                                    return {
                                        notice: Object(o.d)("You have removed {login} as a moderator of this channel.", {
                                            login: i
                                        }, "ModCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: k()
                                    }
                                })
                            } : {
                                deferred: Promise.resolve({
                                    notice: Object(o.d)('Usage: "/unmod [login]" - Revoke mod status from a user. Use "mods" to list the moderators of this channel.', "ModCommandHandler")
                                })
                            }
                        }, t.userLogin = function(e) {
                            return "@" === e[0] && (e = e.substr(1)), Object(u.b)(e) ? e : t.props.activeChattersAPI ? t.props.activeChattersAPI.getActiveChatterLoginFromDisplayName(e) || e : t.props.displayNameToLogin && t.props.displayNameToLogin(e) || e
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return a.createElement(p.Xa, {
                            display: p.X.Hide
                        }, a.createElement(s.a, {
                            command: "mod",
                            handler: this.modUser
                        }), a.createElement(s.a, {
                            command: "mods",
                            handler: this.mods
                        }), a.createElement(s.a, {
                            command: "unmod",
                            handler: this.unmodUser
                        }))
                    }, t
                }(a.Component);

            function g(e) {
                return Object(o.d)("Invalid username: {login}", {
                    login: e
                }, "ModCommandHandler")
            }

            function f() {
                return Object(o.d)("You don't have permission to perform that action.", "ModCommandHandler")
            }

            function b() {
                return Object(o.d)("Unable to add moderator.", "ModCommandHandler")
            }

            function v() {
                return Object(o.d)("There was a problem fetching the list of mods.", "ModCommandHandler")
            }

            function k() {
                return Object(o.d)("Unable to remove moderator.", "ModCommandHandler")
            }
            var C = function(e) {
                    return {
                        channelID: e.channelID
                    }
                },
                y = Object(r.compose)(m.a, Object(c.b)(C), Object(l.b)(C))(h);
            n.d(t, "a", function() {
                return y
            })
        },
        "Pub/": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            });
            var i = n("HzXE");

            function a(e, t, n) {
                try {
                    return e.readQuery({
                        query: i,
                        variables: {
                            channelID: t,
                            targetUserID: n
                        }
                    })
                } catch (e) {}
            }
        },
        Qdho: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "RoomSelector"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "login"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "channel"
                            },
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "channelRooms"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "topic"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isPreviewable"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "minimumAllowedRole"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "self"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isArchived"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isMuted"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isUnread"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "unreadMentionCount"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "cheer"
                                    },
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "hosting"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "banStatus"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isPermanent"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isChannelMember"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isModerator"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "subscriptionBenefit"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 395
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/chat/models/cheer-fragment.gql"\nquery RoomSelector ($login: String!) {\nchannel: user(login: $login) {\nid\ndisplayName\nchannelRooms {\nname\nid\ntopic\nisPreviewable\nminimumAllowedRole\nself {\nisArchived\nisMuted\nisUnread\nunreadMentionCount\n}\n}\n...cheer\nhosting {\nid\n}\nself {\nbanStatus {\nisPermanent\n}\nisChannelMember\nisModerator\nsubscriptionBenefit {\nid\n}\n}\nstream {\nid\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var a = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !a[t] && (a[t] = !0, !0)
                })
            }(n("F9eG").definitions)), e.exports = i
        },
        Qime: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "BitsPinnedCheerV2_Leaderboards"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "cheer"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "leaderboard"
                                            },
                                            arguments: [{
                                                kind: "Argument",
                                                name: {
                                                    kind: "Name",
                                                    value: "first"
                                                },
                                                value: {
                                                    kind: "IntValue",
                                                    value: "10"
                                                }
                                            }],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "FragmentSpread",
                                                    name: {
                                                        kind: "Name",
                                                        value: "leaderboardItem"
                                                    },
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "secondsRemaining"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "settings"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "leaderboard"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "isEnabled"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "timePeriodType"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "bitsLeaderboardItem"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "rank"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "score"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "entryKey"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 350
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/bits/models/bits-leaderboard-item-fragment.gql"\nquery BitsPinnedCheerV2_Leaderboards($channelID: ID!) {\nuser(id: $channelID) {\nid\ncheer {\nid\nleaderboard (first: 10) {\nid\n...leaderboardItem\nsecondsRemaining\n}\nsettings {\nleaderboard {\nisEnabled\ntimePeriodType\n}\n}\n}\nself {\nbitsLeaderboardItem {\nid\nrank\nscore\nentryKey\n}\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var a = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !a[t] && (a[t] = !0, !0)
                })
            }(n("fhkr").definitions)), e.exports = i
        },
        QjI3: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("q1tI"),
                r = n("/MKj"),
                o = n("fvjX"),
                s = n("ZS2+"),
                l = n("UUve"),
                c = n("1/iK"),
                d = n("aCAx"),
                u = n("kRBY"),
                m = n("GnwI"),
                p = n("oJmH"),
                h = n("/7QA"),
                g = n("2+sX"),
                f = n("u5aL"),
                b = n("eJ65"),
                v = n("yR8l"),
                k = n("x7UT"),
                C = n("3Bft"),
                y = n("tIid"),
                E = n("ht6z"),
                S = n("/aPz"),
                N = n("KriR"),
                _ = n("D7An"),
                O = n("4rCz");
            var w, M = n("br9A"),
                D = n("Ue10"),
                I = (n("a7aT"), n("z+dA"));
            ! function(e) {
                e.SubButton = "subscribe-button__dropdown", e.BalloonLayerButton = "subscribe-button__balloon-layer-btn", e.DefaultButton = "subscribe-button__default-btn", e.SubscribeBalloon = "subscribe-button__subscribe-balloon"
            }(w || (w = {}));
            var T = s.a.wrap(function() {
                    return Promise.all([n.e(0), n.e(200)]).then(n.bind(null, "f+qK"))
                }, "SubscribeBalloon"),
                R = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            inPrimeRegion: !1
                        }, t.modalLevel = "top_page", t.renderBalloonContentForBalloonLayer = function() {
                            return a.createElement(f.a, {
                                onClickOut: t.handleBalloonClickOut
                            }, a.createElement(D.Xa, {
                                "data-a-target": "sub-balloon",
                                refDelegate: t.setBalloonContentRefDelegate
                            }, t.balloonWrapperContent))
                        }, t.handleButtonClick = function() {
                            t.balloonContentRef || (t.props.balloonLayer.show({
                                direction: t.getBalloonDirection(),
                                ref: t.containerRef,
                                content: t.renderBalloonContentForBalloonLayer(),
                                contentHeight: 0,
                                closeOnScroll: !0
                            }), t.handleMenuToggle(!1))
                        }, t.handleBalloonClickOut = function() {
                            t.handleMenuToggle(!0), t.props.balloonLayer.hide({
                                force: !0
                            })
                        }, t.setBalloonWrapperContent = function(e) {
                            t.balloonWrapperContent = e
                        }, t.handleSubMenuAction = function(e) {
                            new Set([M.a.ClickCheckout, M.a.BuyGiftSub, M.a.BuyMysteryGift, M.a.BuyCustomMysteryGift, M.a.BuyGiftToPaidUpgrade, M.a.BuyPaidUpgrade]).has(e.action) && t.checkAndDisplaySubscriptionCheckout();
                            var n = t.props.data,
                                i = n.user,
                                a = !!(i && i.self && i.self.subscriptionBenefit),
                                r = n.requestInfo && Object(E.a)(n.requestInfo.countryCode);
                            Object(M.b)({
                                action: e.action || "",
                                channelLogin: t.props.channelLogin || "",
                                channelID: i && i.id || "",
                                checkoutButtonTier: e.checkoutButtonTier,
                                hasSubCredit: i && i.self && i.self.canPrimeSubscribe,
                                hostChannelID: t.props.hostChannelID,
                                hostChannelLogin: t.props.hostChannelLogin,
                                isMenuOpen: e.action !== M.a.OpenSubMenu,
                                mysteryGiftCount: e.mysteryGiftCount,
                                sub_location: "channel_page",
                                modal: !a,
                                modalLevel: a ? "" : t.modalLevel.slice(),
                                showPrimeContent: r,
                                giftRecipient: e.giftRecipient || null
                            }), !e.modalLevel || e.action !== M.a.ClickMoreSubOptions && e.action !== M.a.ClickBack || (t.modalLevel = e.modalLevel)
                        }, t.handleMenuToggle = function(e) {
                            t.handleSubMenuAction({
                                action: e ? M.a.CloseSubMenu : M.a.OpenSubMenu
                            })
                        }, t.getBalloonDirection = function() {
                            var e = t.props.balloonDirection || D.v.BottomRight;
                            return t.props.hostChannelID && (e = D.v.TopLeft), e
                        }, t.setContainerRefDelegate = function(e) {
                            t.containerRef = e
                        }, t.setBalloonContentRefDelegate = function(e) {
                            t.balloonContentRef = e
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.reportInteractive && this.isUserDataReady(this.props) && this.props.reportInteractive(), this.checkAndDisplaySubscriptionCheckout()
                    }, t.prototype.componentDidUpdate = function(e) {
                        this.props.channelLogin && !this.isUserDataReady(this.props) || !this.props.updateContainerWidth || this.props.updateContainerWidth(), this.props.reportInteractive && this.props.data && !this.props.data.loading && this.props.reportInteractive(), !this.isUserDataReady(e) && this.isUserDataReady(this.props) && this.checkAndDisplaySubscriptionCheckout()
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        this.isUserDataReady(e) && e.pubsub.messages.subscriptionInfo !== this.props.pubsub.messages.subscriptionInfo && this.props.data.refetch()
                    }, t.prototype.componentWillUnmount = function() {
                        Object(l.e)()
                    }, t.prototype.render = function() {
                        var e = this.props.data;
                        if (!e || e.loading || e.error) return null;
                        var t = e.user;
                        if (!t) return null;
                        var n = t.self,
                            i = t.subscriptionProducts;
                        if (!i) return null;
                        var r = i.filter(function(e) {
                            return e
                        });
                        if (0 === r.length) return null;
                        if (this.props.hideEsportsSubscription && Object(y.a)(t.id || "", this.props.sessionUser)) return null;
                        var o = e.requestInfo && Object(E.a)(e.requestInfo.countryCode),
                            s = !(!n || !n.subscriptionBenefit),
                            l = Object(y.a)(t.id || "", this.props.sessionUser),
                            c = 1 === r.length;
                        r.some(function(e) {
                            return !e.emoteSetID
                        }) && (c = !0);
                        var d = null;
                        n && n.subscriptionBenefit && (d = n.subscriptionBenefit.purchasedWithPrime ? C.a.Prime : n.subscriptionBenefit.tier, this.modalLevel = "");
                        var u = function(e) {
                            if (e.isSubscribed) {
                                if (e.hasInsiderPass) return Object(O.d)("All-Access Pass", "SubscribeButton");
                                if (e.isNonStandardSub) return Object(O.d)("Subscribed", "SubscribeButton");
                                if (e.hostedDisplayName) return Object(O.d)("Subscribed to {username}", {
                                    username: e.hostedDisplayName
                                }, "SubscribeButton");
                                if ("control" !== O.q.experiments.getAssignment(_.b.SubsReanimator) && e.benefitIsDNRd && e.benefitEndsAt) {
                                    var t = new Date(e.benefitEndsAt),
                                        n = Math.round((t.getTime() - Date.now()) / 864e5);
                                    if (n <= 15 && n > 7) return Object(O.d)("Continue Sub", "SubscribeButton");
                                    if (n <= 7) return Object(O.d)("Continue Sub - {daysRemaining} Days Remaining", {
                                        daysRemaining: n
                                    }, "SubscribeButton")
                                }
                                return Object(O.d)("Gift A Sub", "SubscribeButton")
                            }
                            return e.hasInsiderPass ? Object(O.d)("Get the All-Access Pass", "SubscribeButton") : e.hostedDisplayName ? Object(O.d)("Subscribe to {username}", {
                                username: e.hostedDisplayName
                            }, "SubscribeButton") : Object(O.d)("Subscribe", "SubscribeButton")
                        }({
                            isSubscribed: s,
                            isNonStandardSub: c,
                            hasInsiderPass: l,
                            benefitIsDNRd: !(!n || !n.subscriptionBenefit) && n.subscriptionBenefit.isDNRd,
                            benefitEndsAt: n && n.subscriptionBenefit && n.subscriptionBenefit.endsAt,
                            hostedDisplayName: this.props.hostChannelID ? t.displayName || "" : void 0
                        });
                        if (s && c && !l) return a.createElement(D.z, {
                            disabled: !0,
                            ariaLabel: u,
                            icon: D.tb.Star
                        }, u);
                        var m = a.createElement(D.z, {
                                ariaLabel: u,
                                "data-a-target": s ? "subscribed-button" : "subscribe-button",
                                "data-test-selector": w.SubButton,
                                dropdown: !this.props.hideDropdownArrow,
                                fullWidth: !0,
                                icon: this.getButtonIcon(s, d),
                                onClick: this.props.renderBalloonInBalloonLayer ? this.handleButtonClick : void 0,
                                type: this.getButtonType(s)
                            }, u),
                            p = r[0];
                        return this.setBalloonWrapperContent(a.createElement(T, {
                            authToken: this.props.authToken,
                            channelLogin: this.props.channelLogin || "",
                            "data-test-selector": w.SubscribeBalloon,
                            handleSubMenuAction: this.handleSubMenuAction,
                            inPrimeRegion: o,
                            isEsportChannel: l,
                            isNonStandardSub: c,
                            isStaff: !(!this.props.sessionUser || !this.props.sessionUser.roles) && this.props.sessionUser.roles.isStaff,
                            isSubscribed: s,
                            productId: p ? p.id : "",
                            subbedTier: d || C.a.Prime,
                            userHasPrime: !1
                        })), this.props.renderBalloonInBalloonLayer ? a.createElement(D.Xa, {
                            "data-test-selector": w.BalloonLayerButton,
                            refDelegate: this.setContainerRefDelegate
                        }, m) : a.createElement(D.Xa, null, a.createElement(b.a, {
                            "data-test-selector": w.DefaultButton,
                            onToggle: this.handleMenuToggle
                        }, m, a.createElement(D.u, {
                            "data-a-target": "sub-balloon",
                            direction: this.getBalloonDirection(),
                            size: D.w.Large
                        }, this.balloonWrapperContent)))
                    }, t.prototype.getButtonType = function(e) {
                        D.F.Default;
                        return e && void 0 !== this.props.subscribedButtonType ? this.props.subscribedButtonType : e ? D.F.Success : this.props.unsubscribedButtonType || D.F.Default
                    }, t.prototype.getButtonIcon = function(e, t) {
                        var n = void 0;
                        return e ? n = t === C.a.Prime ? D.tb.Crown : D.tb.Star : this.props.forceIcon && (n = D.tb.StarHollow), n
                    }, t.prototype.isUserDataReady = function(e) {
                        return e.data && e.data.user && !e.data.loading && !e.data.error
                    }, t.prototype.checkAndDisplaySubscriptionCheckout = function() {
                        var e = h.n.get(l.c, "");
                        if (e) {
                            var t = this.props.data.user;
                            if (t && t.subscriptionProducts) t.subscriptionProducts.filter(function(e) {
                                return e
                            }).map(function(e) {
                                return e.name
                            }).includes(e) ? this.props.sessionUser ? this.props.showSubscriptionCheckoutModal({
                                isAnonymous: h.n.get(l.a, !1),
                                mysteryGiftCount: Number(h.n.get(l.b, "")),
                                productName: e,
                                recipientLogin: h.n.get(l.d, ""),
                                trackingContext: {
                                    source: N.c.ChannelSubscribeButton
                                }
                            }) : this.props.showLoginModal() : Object(l.e)()
                        }
                    }, t
                }(a.Component),
                j = Object(p.compose)(Object(v.a)(I, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(k.a)([{
                    topic: function(e) {
                        return Object(S.H)(e.data.currentUser && e.data.currentUser.id || "")
                    },
                    mapMessageTypesToProps: {
                        "*": "subscriptionInfo"
                    },
                    skip: function(e) {
                        return !(e.data && !e.data.loading && !e.data.error && e.data.currentUser)
                    }
                }]), Object(g.e)())(R),
                A = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.reportInteractive = function() {
                            t.props.latencyTracking.reportInteractive()
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return a.createElement(j, {
                            authToken: this.props.authToken,
                            balloonDirection: this.props.balloonDirection,
                            channelLogin: this.props.channelLogin,
                            forceIcon: this.props.forceIcon,
                            hideEsportsSubscription: this.props.hideEsportsSubscription,
                            hideDropdownArrow: this.props.hideDropdownArrow,
                            hostChannelID: this.props.hostChannelID,
                            hostChannelLogin: this.props.hostChannelLogin,
                            renderBalloonInBalloonLayer: this.props.renderBalloonInBalloonLayer,
                            reportInteractive: this.reportInteractive,
                            sessionUser: this.props.sessionUser,
                            showLoginModal: this.props.showLoginModal,
                            showSubscriptionCheckoutModal: this.props.showSubscriptionCheckoutModal,
                            subscribedButtonType: this.props.subscribedButtonType,
                            unsubscribedButtonType: this.props.unsubscribedButtonType,
                            updateContainerWidth: this.props.updateContainerWidth
                        })
                    }, t = i.__decorate([Object(m.b)("SubscribeButton")], t)
                }(a.Component);
            var U = Object(r.connect)(function(e) {
                return {
                    authToken: Object(u.a)(e),
                    sessionUser: Object(u.e)(e)
                }
            }, function(e) {
                return Object(o.bindActionCreators)({
                    showLoginModal: Object(l.f)(c.a.ChannelSubscriptionButton),
                    showSubscriptionCheckoutModal: function(e) {
                        var t = i.__rest(e, []);
                        return Object(d.d)(s.a, {
                            component: "CheckoutModal",
                            loader: function() {
                                return Promise.all([n.e(0), n.e(212)]).then(n.bind(null, "KJv/"))
                            },
                            componentProps: t
                        })
                    }
                }, e)
            })(A);
            n.d(t, !1, function() {
                return A
            }), n.d(t, "a", function() {
                return U
            }), n.d(t, !1, function() {
                return w
            }), n.d(t, !1, function() {
                return R
            }), n.d(t, !1, function() {
                return j
            })
        },
        R2Ti: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Chat_AllowRejectedCheerMessage"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "AllowRejectedCheerInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "allowRejectedCheer"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 118
                }
            };
            n.loc.source = {
                body: "mutation Chat_AllowRejectedCheerMessage($input: AllowRejectedCheerInput!) {\nallowRejectedCheer(input: $input) {\nid\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        R4sh: function(e, t, n) {
            "use strict";

            function i(e) {
                var t = [e[0], e[1], e[2]].map(function(e) {
                    return (e /= 255) <= .03928 ? e / 12.92 : Math.pow((e + .055) / 1.055, 2.4)
                });
                return .2126 * t[0] + .7152 * t[1] + .0722 * t[2]
            }

            function a(e, t) {
                var n = i(e) + .05,
                    a = i(t) + .05;
                return n > a ? n / a : a / n
            }
            n.d(t, "a", function() {
                return a
            })
        },
        RQ6e: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("TSYQ"),
                r = n("q1tI"),
                o = n("/7QA"),
                s = n("fvjX"),
                l = n("yR8l"),
                c = n("GnwI");
            var d = n("Ue10"),
                u = n("gIsd"),
                m = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleChange = function(e) {
                            t.props.onChange && t.props.onChange(e.target.value)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                        this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        var e = null,
                            t = Object(o.d)("Select One...", "ReportUserModal");
                        this.props.data.loading ? e = [r.createElement("option", {
                            key: "Loading"
                        }, Object(o.d)("Loading...", "ReportReasonsSelect"))] : e = (this.props.data.reportReasons || [{
                            id: "other",
                            text: Object(o.d)("Other Terms of Service Violation", "ReportUserModal")
                        }]).map(function(e) {
                            return r.createElement("option", {
                                key: e.id,
                                value: e.id
                            }, e.text)
                        });
                        return r.createElement(d.Xa, {
                            margin: {
                                bottom: 2
                            }
                        }, r.createElement(d.Ea, {
                            id: "reporting-modal__select",
                            label: Object(o.d)("Select Reason (required)", "ReportUserModal")
                        }, r.createElement(d.zb, {
                            id: "reporting-modal__select",
                            "data-test-selector": "reporting-modal.select",
                            disabled: this.props.data.loading || !!this.props.data.error,
                            onChange: this.handleChange,
                            defaultValue: t
                        }, r.createElement("option", {
                            disabled: !0,
                            key: "default"
                        }, t), e)))
                    }, t
                }(r.Component),
                p = Object(s.compose)(Object(l.a)(u, {
                    options: function(e) {
                        return {
                            variables: {
                                content: e.reportContentType
                            }
                        }
                    }
                }), Object(c.b)("ReportReasonSelect"))(m);
            n("y4Ne");
            n.d(t, "a", function() {
                return h
            }), n.d(t, "b", function() {
                return g
            });
            var h;
            ! function(e) {
                e[e.Unsubmitted = 0] = "Unsubmitted", e[e.Success = 1] = "Success", e[e.FormError = 2] = "FormError", e[e.MutationError = 3] = "MutationError", e[e.UserError = 4] = "UserError"
            }(h || (h = {}));
            var g = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        description: "",
                        reason: null
                    }, t.headerMessage = Object(o.d)("Tell us your concern about this content so that we can review it to determine whether there has been a violation of the {tosLink}. {br} (Abuse of this feature is a violation of the terms of service)", {
                        br: r.createElement("br", null),
                        tosLink: r.createElement("a", {
                            href: "https://www.twitch.tv/p/terms-of-service",
                            target: "_blank"
                        }, Object(o.d)("terms of service", "ReportUser"))
                    }, "ReportUser"), t.handleSubmit = function(e) {
                        e.preventDefault(), t.state.reason && t.state.description.length > 0 ? t.props.onSubmit(t.state.reason || "", t.state.description) : t.props.onError(h.FormError)
                    }, t.handleTextAreaChange = function(e) {
                        t.setState({
                            description: e.target.value
                        })
                    }, t.handleReasonChange = function(e) {
                        t.setState({
                            reason: e
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(d.Xa, {
                        display: d.X.Flex,
                        flexDirection: d.Aa.Column,
                        alignItems: d.f.Center,
                        justifyContent: d.Wa.Center
                    }, this.renderStatusMessage(), this.renderBody())
                }, t.prototype.renderBody = function() {
                    return this.props.submitStatus === h.Success ? r.createElement("div", null, r.createElement(d.z, {
                        onClick: this.props.onClose
                    }, r.createElement(d.Xa, {
                        padding: {
                            x: 2
                        }
                    }, Object(o.d)("Close", "ReportUser")))) : r.createElement("div", null, r.createElement(d.Xa, {
                        "data-test-selector": "reporting.title",
                        margin: {
                            bottom: 1
                        },
                        "data-a-target": "reporting-channel-name"
                    }, r.createElement(d.W, {
                        type: d.Vb.H4
                    }, this.props.title), r.createElement(d.Eb, {
                        color: d.O.Alt2,
                        margin: {
                            top: 1
                        }
                    }, this.headerMessage)), r.createElement("form", null, r.createElement(d.Eb, {
                        borderTop: !0,
                        borderBottom: !0,
                        margin: {
                            y: 2
                        },
                        padding: {
                            y: 2
                        }
                    }, r.createElement(p, {
                        reportContentType: this.props.reportContentType,
                        onChange: this.handleReasonChange
                    }), r.createElement(d.Ea, {
                        id: "reporting__text-area",
                        label: Object(o.d)("Description (required)", "ReportUser")
                    }, r.createElement(d.Sb, {
                        defaultValue: this.props.defaultDescription,
                        onChange: this.handleTextAreaChange
                    }))), r.createElement(d.Eb, {
                        display: d.X.Flex,
                        justifyContent: d.Wa.Center
                    }, r.createElement(d.z, {
                        onClick: this.handleSubmit
                    }, r.createElement(d.Xa, {
                        padding: {
                            x: 2
                        }
                    }, Object(o.d)("Send", "ReportUser"))))))
                }, t.prototype.renderStatusMessage = function() {
                    var e = null;
                    switch (this.props.submitStatus) {
                        case h.FormError:
                            e = Object(o.d)("Reason and Description are required.", "ReportUser");
                            break;
                        case h.MutationError:
                            e = Object(o.d)("Sorry, a network error occurred when submitting your report. Please try again later.", "ReportUser");
                            break;
                        case h.Success:
                            e = Object(o.d)("Thank you for your report.", "ReportUser");
                            break;
                        case h.UserError:
                            e = Object(o.d)("This account could not be reported. It may have already been suspended, or the owner may have deleted it.", "ReportUser");
                            break;
                        default:
                            return null
                    }
                    var t = a({
                        "reporting__error-container": this.props.submitStatus !== h.Success,
                        "reporting__success-container": this.props.submitStatus === h.Success
                    });
                    return r.createElement(d.Eb, {
                        className: t,
                        fullWidth: this.props.submitStatus !== h.Success,
                        "data-test-selector": "reporting.error",
                        margin: {
                            bottom: 2
                        },
                        padding: 1
                    }, e)
                }, t
            }(r.Component)
        },
        RuiO: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Core_Services_Spade_SubEvent_User"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "withVideo"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "videoID"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "canPrimeSubscribe"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "subscriptionBenefit"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "tier"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "purchasedWithPrime"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "video"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "videoID"
                                    }
                                }
                            }],
                            directives: [{
                                kind: "Directive",
                                name: {
                                    kind: "Name",
                                    value: "include"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "if"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "withVideo"
                                        }
                                    }
                                }]
                            }],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcastType"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 266
                }
            };
            n.loc.source = {
                body: "query Core_Services_Spade_SubEvent_User($channelID: ID! $withVideo: Boolean! $videoID: ID) {\nuser(id: $channelID) {\nid\nself {\ncanPrimeSubscribe\nsubscriptionBenefit {\nid\ntier\npurchasedWithPrime\n}\n}\n}\nvideo(id: $videoID) @include(if: $withVideo) {\nid\nbroadcastType\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        S4w9: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "UserEmotes"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "withOwner"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "emoteSets"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "emotes"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "token"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "owner"
                                            },
                                            arguments: [],
                                            directives: [{
                                                kind: "Directive",
                                                name: {
                                                    kind: "Name",
                                                    value: "include"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "if"
                                                    },
                                                    value: {
                                                        kind: "Variable",
                                                        name: {
                                                            kind: "Name",
                                                            value: "withOwner"
                                                        }
                                                    }
                                                }]
                                            }],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "login"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "displayName"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "profileImageURL"
                                                    },
                                                    arguments: [{
                                                        kind: "Argument",
                                                        name: {
                                                            kind: "Name",
                                                            value: "width"
                                                        },
                                                        value: {
                                                            kind: "IntValue",
                                                            value: "28"
                                                        }
                                                    }],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 182
                }
            };
            n.loc.source = {
                body: "query UserEmotes ($withOwner: Boolean!) {\ncurrentUser {\nid\nemoteSets {\nid\nemotes {\nid\ntoken\n}\nowner @include(if: $withOwner) {\nid\nlogin\ndisplayName\nprofileImageURL(width: 28)\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        SceP: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ClipsChatCard_Clip"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "slug"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "clip"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "slug"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "thumbnailURL"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "title"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "slug"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "url"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "curator"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "displayName"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcaster"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "displayName"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 151
                }
            };
            n.loc.source = {
                body: "query ClipsChatCard_Clip($slug: ID!) {\nclip(slug: $slug) {\nid\nthumbnailURL\ntitle\nslug\nurl\ncurator {\nid\ndisplayName\n}\nbroadcaster {\nid\ndisplayName\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        TApp: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = n("ZtEv"),
                a = n("aF6k");

            function r(e) {
                return {
                    type: i.b.Info,
                    id: Object(a.a)("info"),
                    message: e
                }
            }
        },
        TOso: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("/7QA"),
                r = n("cMjZ"),
                o = n("geRD"),
                s = n("f00E"),
                l = n("DMoW"),
                c = n("U1yz"),
                d = n("xXlL"),
                u = n("a1OF");
            var m, p = n("3YIm"),
                h = n("NMMG"),
                g = n("Vl9+");

            function f(e) {
                var t = e.currentUserID,
                    n = e.emotes,
                    m = e.message,
                    f = e.recipientUserID;
                if ("" === t || "" === m || "" === f) return Promise.reject(new Error("Tried to send a whisper with nonsensical parameters."));
                var b = Object(s.b)(),
                    v = i.__assign({
                        mutation: p
                    }, Object(o.a)({
                        message: m,
                        nonce: b,
                        recipientUserID: f
                    })),
                    k = Object(h.a)(t, f),
                    C = Object(c.a)(a.p.apollo.client.cache, k, !0);
                if (C) {
                    var y = function(e, t) {
                        for (var n = [], i = /\S+/g, a = i.exec(e); a;) {
                            var r = a[0],
                                o = t[r];
                            if (o) {
                                var s = Object(u.c)(e.slice(0, a.index)),
                                    l = s ? s.length : a.index;
                                n.push({
                                    id: o.id,
                                    start: l,
                                    end: l + r.length - 1
                                })
                            }
                            a = i.exec(e)
                        }
                        return n
                    }(m, n).map(d.a);
                    v.optimisticResponse = {
                        sendWhisper: {
                            __typename: "SendWhisperPayload",
                            message: {
                                content: {
                                    content: m,
                                    emotes: y,
                                    __typename: "MessageBody"
                                },
                                from: {
                                    id: t,
                                    __typename: "User"
                                },
                                id: b,
                                nonce: b,
                                sentAt: (new Date).toISOString(),
                                deletedAt: null,
                                editedAt: null,
                                thread: {
                                    id: k,
                                    __typename: "WhisperThread",
                                    participants: [{
                                        id: t,
                                        __typename: "User",
                                        self: {
                                            __typename: "UserSelfConnection",
                                            whisperPermissions: {
                                                receive: l.Da.NOT_PERMITTED,
                                                __typename: "WhisperPermissions"
                                            }
                                        }
                                    }, {
                                        id: f,
                                        __typename: "User",
                                        self: {
                                            __typename: "UserSelfConnection",
                                            whisperPermissions: {
                                                receive: l.Da.PERMITTED,
                                                __typename: "WhisperPermissions"
                                            }
                                        }
                                    }]
                                },
                                __typename: "WhisperMessage"
                            },
                            error: null
                        }
                    }, v.update = function(e, t) {
                        if (t.data) {
                            var n = t.data;
                            if (n.sendWhisper.message && !n.sendWhisper.error) {
                                var a = n.sendWhisper.message,
                                    o = Object(c.a)(e, k);
                                if (o) {
                                    var s = o.messages.edges.findIndex(function(e) {
                                        return e.node.id === b || e.node.nonce === b || e.node.id === a.id
                                    });
                                    if (s < 0) {
                                        var l = {
                                            cursor: (1 + C.messages.edges.reduce(function(e, t) {
                                                return Math.max(parseInt(t.cursor, 10), e)
                                            }, 0)).toString(),
                                            node: a,
                                            __typename: "WhisperMessageEdge"
                                        };
                                        o.messages.edges.unshift(l)
                                    } else o.messages.edges[s].node = a;
                                    o.userLastMessageRead && (o.userLastMessageRead.sentAt = a.sentAt), o.unreadMessagesCount = 0, e.writeFragment({
                                        id: Object(r.a)(o),
                                        fragment: g,
                                        data: i.__assign({}, o)
                                    })
                                }
                            }
                        }
                    }
                }
                return a.p.apollo.client.mutate(v)
            }
            n.d(t, "a", function() {
                    return m
                }), n.d(t, "b", function() {
                    return f
                }),
                function(e) {
                    e.TargetBanned = "TARGET_BANNED", e.BodyEmpty = "BODY_EMPTY", e.RestrictedRecipient = "TARGET_RESTRICTED", e.NotDelivered = "NOT_DELIVERED"
                }(m || (m = {}))
        },
        TTKc: function(e, t, n) {},
        TvOw: function(e, t, n) {
            "use strict";
            var i, a;
            n.d(t, "b", function() {
                    return i
                }), n.d(t, "a", function() {
                    return a
                }),
                function(e) {
                    e.Spam = "Spam", e.Harassment = "Harassment"
                }(i || (i = {})),
                function(e) {
                    e.Spam = "spam", e.Harassment = "harassment", e.Other = "other"
                }(a || (a = {}))
        },
        U1yz: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            });
            var i = n("2Dht");

            function a(e, t, n) {
                try {
                    var a = e.readQuery({
                        query: i,
                        variables: {
                            id: t
                        }
                    }, n);
                    return a ? a.whisperThread : null
                } catch (e) {
                    return null
                }
            }
        },
        U80U: function(e, t, n) {},
        UJc8: function(e, t, n) {
            "use strict";
            var i, a;
            n.d(t, "b", function() {
                    return a
                }), n.d(t, "a", function() {
                    return r
                }),
                function(e) {
                    e.Everyone = "EVERYONE", e.Moderator = "MODERATOR", e.Subscriber = "SUBSCRIBER"
                }(a || (a = {}));
            var r = ((i = {})[a.Everyone] = "Everyone", i[a.Moderator] = "Mods", i[a.Subscriber] = "Subs", i)
        },
        UUve: function(e, t, n) {
            "use strict";
            n.d(t, "c", function() {
                return r
            }), n.d(t, "d", function() {
                return o
            }), n.d(t, "b", function() {
                return s
            }), n.d(t, "a", function() {
                return l
            }), n.d(t, "e", function() {
                return d
            }), n.d(t, "f", function() {
                return u
            });
            var i = n("/7QA"),
                a = n("y5D0"),
                r = "SUB_CHECKOUT__PRODUCT",
                o = "SUB_CHECKOUT__RECIPIENT",
                s = "SUB_CHECKOUT__MYSTERY_GIFT_COUNT",
                l = "SUB_CHECKOUT__GIFTING_ANONYMOUSLY",
                c = [r, o, s, l];

            function d() {
                c.forEach(function(e) {
                    return i.n.remove(e)
                })
            }

            function u(e) {
                return function() {
                    return Object(a.e)(e, {
                        onClose: d
                    })
                }
            }
        },
        UajW: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "BitsCard_MainCard"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "name"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "withCheerBombEventEnabled"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "bitsBalance"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "cheer"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "settings"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "emoteMinimumBits"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "cheerMinimumBits"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "event"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isCheerBombEventEnabled"
                                                    },
                                                    arguments: [],
                                                    directives: [{
                                                        kind: "Directive",
                                                        name: {
                                                            kind: "Name",
                                                            value: "include"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "if"
                                                            },
                                                            value: {
                                                                kind: "Variable",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "withCheerBombEventEnabled"
                                                                }
                                                            }
                                                        }]
                                                    }]
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "bitsBadge"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "totalBits"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "nextBits"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "progress"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "current"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "FragmentSpread",
                                                            name: {
                                                                kind: "Name",
                                                                value: "badge"
                                                            },
                                                            directives: []
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "next"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "FragmentSpread",
                                                            name: {
                                                                kind: "Name",
                                                                value: "badge"
                                                            },
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "tournament"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "teams"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "name"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 469
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery BitsCard_MainCard($name: ID! $withCheerBombEventEnabled: Boolean!) {\ncurrentUser {\nid\nbitsBalance\nlogin\n}\nuser(id: $name) {\nid\ndisplayName\ncheer {\nid\nsettings {\nemoteMinimumBits\ncheerMinimumBits\nevent\nisCheerBombEventEnabled @include(if: $withCheerBombEventEnabled)\n}\n}\nself {\nbitsBadge {\nid\ntotalBits\nnextBits\nprogress\ncurrent {\n...badge\n}\nnext {\n...badge\n}\n}\n}\ntournament {\nid\nteams {\nid\nname\n}\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var a = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !a[t] && (a[t] = !0, !0)
                })
            }(n("IKE4").definitions)), e.exports = i
        },
        VAW9: function(e, t, n) {
            "use strict";
            var i = n("oJmH"),
                a = n("/MKj"),
                r = n("fvjX"),
                o = n("yR8l"),
                s = n("eDVu"),
                l = n("0Log"),
                c = n("/aPz"),
                d = n("kRBY"),
                u = n("5zXJ");

            function m(e) {
                var t = {
                        prefix: e.prefix,
                        type: function(e) {
                            var t = u.j;
                            switch (e) {
                                case "channel_custom":
                                    t = u.e;
                                    break;
                                case "global_first_party":
                                    t = u.g;
                                    break;
                                case "global_third_party":
                                    t = u.h;
                                    break;
                                case "sponsored":
                                    t = u.i;
                                    break;
                                default:
                                    t = u.j
                            }
                            return t
                        }(e.type),
                        tiers: []
                    },
                    n = e.tiers.map(function(e) {
                        var t = [];
                        return p(e.images).forEach(function(e, n) {
                            p(e).forEach(function(e, i) {
                                p(e).forEach(function(e, a) {
                                    t.push({
                                        url: e,
                                        theme: n.toUpperCase(),
                                        dpiScale: parseFloat(a),
                                        isAnimated: "animated" === i
                                    })
                                })
                            })
                        }), {
                            id: e.id,
                            bits: e.min_bits,
                            canCheer: e.can_cheer,
                            canShowInBitsCard: e.show_in_bits_card,
                            color: e.color,
                            images: t
                        }
                    });
                return t.tiers = n, e.campaign && (t.campaign = function(e) {
                    var t = {
                        id: e.id,
                        brandName: e.brand_name,
                        brandImageURL: e.brand_image_url,
                        minimumBitsAmount: e.min_bits_to_be_sponsored,
                        bitsTotal: e.total_bits,
                        bitsUsed: e.used_bits,
                        bitsPercentageRemaining: e.used_bits / e.total_bits,
                        userLimit: e.user_limit,
                        thresholds: []
                    };
                    return p(e.sponsored_amount_thresholds).forEach(function(e, n) {
                        t.thresholds.push({
                            minimumBits: n,
                            matchedPercent: e
                        })
                    }), t
                }(e.campaign)), t
            }
            var p = function(e) {
                    return Object.keys(e).reduce(function(t, n) {
                        return t.set(n, e[n])
                    }, new Map)
                },
                h = n("0Lz3"),
                g = n("+pBb"),
                f = n("Y3y8"),
                b = n("GnwI");
            var v, k = n("mrSG"),
                C = n("q1tI"),
                y = n("/7QA"),
                E = n("w0yC"),
                S = n("ZS2+"),
                N = n("KwB3"),
                _ = n("BJwa"),
                O = n("a1OF");
            ! function(e) {
                e.MentionPill = "mentionPill", e.ViewRooms = "viewRooms"
            }(v || (v = {}));
            var w = function(e) {
                    return y.m.get("hasSeenRoomsOnboarding", {})[e] || !1
                },
                M = function(e) {
                    var t;
                    y.m.set("hasSeenRoomsOnboarding", k.__assign({}, y.m.get("hasSeenRoomsOnboarding", {}), ((t = {})[e] = !0, t)))
                },
                D = n("Ue10"),
                I = (n("zWFo"), "Stream Chat"),
                T = S.a.wrap(function() {
                    return n.e(207).then(n.bind(null, "+k6+"))
                }, "ActiveRoomButton"),
                R = S.a.wrap(function() {
                    return n.e(206).then(n.bind(null, "Xf1I"))
                }, "Room"),
                j = S.a.wrap(function() {
                    return n.e(205).then(n.bind(null, "cs/o"))
                }, "RoomPicker"),
                A = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            activeRoomID: I,
                            activeRoomName: I,
                            hasSeenGeneralOnboarding: w(v.ViewRooms),
                            isActiveRoomDeleted: !1,
                            shouldAutoOpenRoomPicker: !0,
                            showRoomPicker: !1
                        }, t.renderOnboardingBalloon = function() {
                            var e = t.props.data;
                            if (t.state.showRoomPicker || t.state.hasSeenGeneralOnboarding) return null;
                            if (!e || !e.channel) return null;
                            var n = t.props.sessionUser && t.props.sessionUser.id === e.channel.id;
                            return e.channel.channelRooms && 0 === e.channel.channelRooms.length && !n ? null : C.createElement(D.u, {
                                direction: D.v.BottomRight,
                                offsetX: "1rem",
                                show: !0,
                                size: D.w.Small
                            }, C.createElement(E.a, {
                                onClickOut: t.dismissGeneralOnboarding
                            }, C.createElement(D.Xa, {
                                padding: 3,
                                textAlign: D.Rb.Center
                            }, C.createElement("img", {
                                src: Object(O.d)("508650", 3),
                                width: "28"
                            }), C.createElement(D.Xa, {
                                margin: {
                                    y: 1
                                }
                            }, C.createElement(D.W, {
                                color: D.O.Alt2
                            }, Object(y.d)("Rooms help you keep the conversation going", "RoomSelector"))), C.createElement(D.z, {
                                onClick: t.headerClick
                            }, Object(y.d)("View rooms", "RoomSelector")))))
                        }, t.isChannelLive = function(e) {
                            return !(e.error || !e.channel) && !!(e.channel.stream && e.channel.stream.id || e.channel.hosting && e.channel.hosting.id)
                        }, t.checkRoomPickerAutoOpen = function(e) {
                            if (t.state.shouldAutoOpenRoomPicker && e.firstPageLoaded && e.data && e.data.channel && e.data.channel.channelRooms) {
                                var n = t.isChannelLive(e.data),
                                    i = 0 !== e.data.channel.channelRooms.length,
                                    a = !n && i && !e.isEmbedded;
                                t.setState({
                                    shouldAutoOpenRoomPicker: !1,
                                    showRoomPicker: a
                                }), a && t.dismissGeneralOnboarding()
                            }
                        }, t.headerClick = function() {
                            t.dismissGeneralOnboarding(), t.setState(function(e) {
                                return {
                                    shouldAutoOpenRoomPicker: !1,
                                    showRoomPicker: !e.showRoomPicker
                                }
                            })
                        }, t.handleRoomSelect = function(e, n) {
                            t.setState({
                                activeRoomID: e,
                                activeRoomName: n,
                                isActiveRoomDeleted: !1,
                                showRoomPicker: !1
                            })
                        }, t.onActiveRoomDelete = function() {
                            t.state.activeRoomID !== I && t.setState({
                                isActiveRoomDeleted: !0
                            })
                        }, t.goToStreamChat = function() {
                            t.handleRoomSelect(I, I)
                        }, t.dismissGeneralOnboarding = function() {
                            t.setState({
                                hasSeenGeneralOnboarding: !0
                            }), M(v.ViewRooms)
                        }, t.closeRoomPicker = function() {
                            t.setState({
                                showRoomPicker: !1
                            })
                        }, t
                    }
                    return k.__extends(t, e), t.prototype.componentWillMount = function() {
                        this.checkRoomPickerAutoOpen(this.props), this.state.showRoomPicker && this.dismissGeneralOnboarding()
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        var t = this;
                        if (e.channelLogin !== this.props.channelLogin && this.setState({
                                shouldAutoOpenRoomPicker: !0
                            }), this.checkRoomPickerAutoOpen(e), this.props.data && e.data && this.props.data.channel && e.data.channel && this.props.data.channel.self && e.data.channel.self && !e.data.channel.self.isChannelMember && this.props.data.channel.self.isChannelMember !== e.data.channel.self.isChannelMember && this.goToStreamChat(), e.data && e.data.channel && e.data.channel.self) {
                            var n = e.data.channel.self;
                            (!n.isChannelMember || n.banStatus && n.banStatus.isPermanent) && this.state.activeRoomID !== I && this.goToStreamChat()
                        }
                        if (this.props.sessionUser && this.props.routedRoomName && this.props.data && this.props.data.loading && !this.props.data.channel && e.data && !e.data.loading && e.data.channel && e.data.channel.channelRooms && e.data.channel.self.isChannelMember) {
                            var i = e.data.channel.channelRooms.find(function(e) {
                                return e.name === t.props.routedRoomName
                            });
                            i && this.setState({
                                activeRoomID: i.id,
                                activeRoomName: i.name
                            })
                        } else this.props.channelLogin !== e.channelLogin && this.state.activeRoomID !== I && this.goToStreamChat()
                    }, t.prototype.render = function() {
                        return C.createElement(D.Xa, {
                            fullWidth: !0,
                            fullHeight: !0,
                            display: D.X.Flex,
                            flexDirection: D.Aa.Column,
                            flexGrow: 1,
                            flexWrap: D.Ba.NoWrap,
                            position: D.jb.Relative
                        }, this.renderHeader(), this.renderRoomPicker(), this.renderHiddenState(), this.renderChat(), this.renderCurrentRoom())
                    }, t.prototype.renderChat = function() {
                        if (this.props.isHidden && !this.props.isPopout) return null;
                        var e = this.props.isBackground || this.state.activeRoomID !== I,
                            t = this.props.bitsConfig && this.props.bitsConfig.orderedActions.length > 0;
                        return C.createElement(N.a, {
                            bitsConfig: t ? this.props.bitsConfig : void 0,
                            channelLogin: this.props.channelLogin,
                            clientID: y.a.authSettings.clientID,
                            isBackground: e,
                            isEmbedded: this.props.isEmbedded,
                            isPopout: this.props.isPopout,
                            closeRoomPicker: this.closeRoomPicker,
                            onHostingChange: this.props.onHostingChange,
                            hostedChannelDisplayName: this.props.hostedChannelDisplayName,
                            passThroughCommands: this.props.passThroughCommands,
                            shouldConnectChat: this.props.shouldConnectChat
                        })
                    }, t.prototype.renderCurrentRoom = function() {
                        return this.props.isHidden && !this.props.isPopout || !this.props.data || !this.props.data.channel || this.state.activeRoomID === I ? null : C.createElement(R, {
                            bitsConfig: this.props.bitsConfig,
                            isDeleted: this.state.isActiveRoomDeleted,
                            isPopout: this.props.isPopout,
                            channelLogin: this.props.channelLogin,
                            channelID: this.props.data.channel.id,
                            roomID: this.state.activeRoomID,
                            closeRoomPicker: this.closeRoomPicker,
                            handleStreamChatClick: this.goToStreamChat,
                            onDelete: this.onActiveRoomDelete,
                            isHostMode: !!this.props.hostedChannelDisplayName,
                            passThroughCommands: this.props.passThroughCommands
                        })
                    }, t.prototype.renderHeader = function() {
                        var e = C.createElement(D.Xa, {
                            display: D.X.Flex,
                            alignItems: D.f.Center
                        }, !this.state.showRoomPicker && Object(y.d)("Rooms", "RoomSelector"), C.createElement(D.Xa, {
                            display: D.X.Flex,
                            alignItems: D.f.Center
                        }, this.renderTotalUnreadMentionCount(), !this.state.showRoomPicker && C.createElement(D.Xa, {
                            padding: {
                                left: .5
                            },
                            display: D.X.Flex
                        }, C.createElement(D.sb, {
                            asset: D.tb.RoomList
                        })), this.state.showRoomPicker && C.createElement(D.A, {
                            ariaLabel: "RoomListOpen",
                            icon: D.tb.RoomListOpen,
                            "data-test-selector": "close-room-picker-button",
                            onClick: this.headerClick,
                            blurAfterClick: !0
                        })));
                        this.state.showRoomPicker || (e = C.createElement(D.Xa, {
                            position: D.jb.Relative
                        }, C.createElement(D.z, {
                            "data-a-target": "room-selector-button",
                            "data-test-selector": "open-room-picker-button",
                            onClick: this.headerClick,
                            type: D.F.Text
                        }, e), this.renderOnboardingBalloon())), this.props.isEmbedded && (e = C.createElement(D.Xa, null));
                        var t = C.createElement(D.Eb, {
                            className: "room-selector__header",
                            background: D.r.Alt,
                            borderLeft: !this.props.isEmbedded,
                            borderRight: !this.props.isEmbedded,
                            borderBottom: !0,
                            display: D.X.Flex,
                            fullWidth: !0,
                            justifyContent: D.Wa.Between,
                            alignItems: D.f.Center,
                            flexShrink: 0,
                            padding: {
                                left: 2,
                                right: 1
                            }
                        }, C.createElement("div", {
                            id: _.a
                        }, this.renderActiveRoomName()), e);
                        return this.state.showRoomPicker && (t = C.createElement(D.Xa, {
                            className: "room-selector__open-header-wrapper"
                        }, t)), t
                    }, t.prototype.renderRoomPicker = function() {
                        if (this.state.showRoomPicker && this.props.data && this.props.data.channel) return C.createElement(E.a, {
                            onClickOut: this.closeRoomPicker
                        }, C.createElement(D.Eb, {
                            attachLeft: !0,
                            attachRight: !0,
                            background: D.r.Alt,
                            borderBottom: !0,
                            borderLeft: !0,
                            borderRight: !0,
                            elevation: 2,
                            position: D.jb.Absolute,
                            zIndex: D.ic.Above
                        }, C.createElement(j, {
                            channelID: this.props.data.channel.id,
                            handleRoomSelect: this.handleRoomSelect,
                            isChannelLive: this.isChannelLive(this.props.data),
                            renderChannelName: this.props.renderChannelName,
                            activeRoomID: this.state.activeRoomID,
                            "data-test-selector": "room-picker"
                        })))
                    }, t.prototype.renderActiveRoomName = function() {
                        return this.state.showRoomPicker ? C.createElement(D.W, {
                            color: D.O.Alt,
                            "data-test-selector": _.a
                        }, Object(y.d)("Rooms", "RoomSelectorOpened")) : this.state.activeRoomName === I ? this.props.renderChannelName && this.props.data && this.props.data.channel ? C.createElement(D.W, {
                            color: D.O.Alt,
                            "data-test-selector": _.a
                        }, Object(y.d)("<x:bold>{displayName}</x:bold>'s Chat", {
                            displayName: this.props.data.channel.displayName,
                            "x:bold": function(e) {
                                return C.createElement(D.W, {
                                    type: D.Vb.Span,
                                    bold: !0
                                }, e)
                            }
                        }, "RoomSelectorOpened")) : C.createElement(D.W, {
                            color: D.O.Alt,
                            "data-test-selector": _.a
                        }, Object(y.d)("Stream Chat", "RoomSelectorOpened")) : this.state.isActiveRoomDeleted ? C.createElement(D.W, {
                            color: D.O.Alt,
                            "data-test-selector": _.a
                        }, this.state.activeRoomName) : C.createElement(T, {
                            roomID: this.state.activeRoomID,
                            roomName: this.state.activeRoomName
                        })
                    }, t.prototype.renderTotalUnreadMentionCount = function() {
                        var e = this,
                            t = this.props.data;
                        if (!t || t.error || !t.channel || !t.channel.self || !t.channel.self.isChannelMember || !t.channel.channelRooms) return null;
                        var n = t.channel.channelRooms.reduce(function(t, n) {
                            return n.self.isMuted || n.id === e.state.activeRoomID ? t : t + n.self.unreadMentionCount
                        }, 0);
                        return n > 0 ? C.createElement(D.Xa, {
                            display: D.X.InlineBlock,
                            padding: {
                                left: .5
                            },
                            position: D.jb.Relative
                        }, C.createElement(D.gb, {
                            label: n.toString(),
                            type: D.hb.Alert
                        })) : void 0
                    }, t.prototype.renderHiddenState = function() {
                        return !this.props.isHidden || this.props.isPopout ? null : C.createElement(D.Eb, {
                            alignItems: D.f.Center,
                            borderLeft: !0,
                            "data-test-selector": "room-selector-hidden-state",
                            display: D.X.Flex,
                            flexDirection: D.Aa.Column,
                            fullHeight: !0,
                            fullWidth: !0,
                            justifyContent: D.Wa.Center,
                            color: D.O.Base,
                            position: D.jb.Relative
                        }, C.createElement(D.Xa, {
                            margin: {
                                bottom: 1
                            }
                        }, C.createElement(D.W, {
                            fontSize: D.Ca.Size5
                        }, Object(y.d)("Chat is hidden.", "RoomSelector"))), C.createElement(D.z, {
                            onClick: this.props.onChatUnhide,
                            "data-a-target": "show-chat-button"
                        }, Object(y.d)("Show Chat", "RoomSelector")))
                    }, t
                }(C.Component),
                U = n("Qdho");
            var L = Object(i.compose)(Object(a.connect)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded,
                    isHidden: e.chat.isHidden,
                    sessionUser: Object(d.e)(e)
                }
            }, function(e) {
                return Object(r.bindActionCreators)({
                    onChatUnhide: function() {
                        return g.O()
                    }
                }, e)
            }), Object(o.a)(U, {
                skip: function(e) {
                    return !e.firstPageLoaded
                },
                props: function(e) {
                    return {
                        data: e.data,
                        bitsConfig: Object(h.a)(e.data && e.data.channel && e.data.channel.cheer && e.data.channel.cheer.emotes || []),
                        channelID: e.data && e.data.channel && e.data.channel.id
                    }
                },
                options: function(e) {
                    return {
                        variables: {
                            login: e.channelLogin
                        }
                    }
                }
            }), Object(s.a)(function(e) {
                return {
                    query: U,
                    skip: !e.firstPageLoaded || !e.data || !e.data.channel,
                    variables: {
                        login: e.channelLogin
                    },
                    topic: Object(c.i)("" + (e.data && e.data.channel && e.data.channel.id)),
                    types: [l.PubsubMessageType.ChatRoomCreated, l.PubsubMessageType.ChatRoomDeleted],
                    mutator: function(e, t) {
                        if (e.type === l.PubsubMessageType.ChatRoomDeleted && t.channel && t.channel.channelRooms) return t.channel.channelRooms = t.channel.channelRooms.filter(function(t) {
                            return t.id !== e.data.room.room_id
                        }), t;
                        if (e.type === l.PubsubMessageType.ChatRoomCreated && t.channel && t.channel.channelRooms) {
                            var n = function(e) {
                                return {
                                    id: e.data.room.room_id,
                                    minimumAllowedRole: e.data.room.minimum_allowed_role,
                                    name: e.data.room.name,
                                    topic: e.data.room.topic,
                                    isPreviewable: e.data.room.is_previewable,
                                    self: {
                                        isArchived: !1,
                                        isMuted: !1,
                                        isUnread: !1,
                                        unreadMentionCount: 0,
                                        __typename: "RoomView"
                                    },
                                    __typename: "Room"
                                }
                            }(e);
                            return t.channel.channelRooms.push(n), t
                        }
                    }
                }
            }), Object(s.a)(function(e) {
                return {
                    query: U,
                    skip: !(e.firstPageLoaded && e.sessionUser && e.data && e.data.channel),
                    variables: {
                        login: e.channelLogin
                    },
                    topic: Object(c.j)("" + (e.sessionUser && e.sessionUser.id)),
                    types: [l.PubsubMessageType.UserMention, l.PubsubMessageType.ChatRoomsRoomViewUpdated],
                    mutator: function(e, t) {
                        switch (e.type) {
                            case l.PubsubMessageType.UserMention:
                                if (e = e, !t.channel || !t.channel.channelRooms || t.channel.id !== e.data.channel_id) break;
                                var n = e.data.room_id;
                                t.channel.channelRooms = t.channel.channelRooms.map(function(e) {
                                    return e.id === n && (e.self.unreadMentionCount += 1), e
                                });
                                break;
                            case l.PubsubMessageType.ChatRoomsRoomViewUpdated:
                                if (e = e, !t.channel || t.channel.id !== e.data.room_view.room.owner_id) break;
                                t.channel.self.isModerator = e.data.room_view.permissions.moderate
                        }
                        return t
                    }
                }
            }), Object(s.a)(function(e) {
                return {
                    query: U,
                    skip: !(e.firstPageLoaded && e.sessionUser && e.data && e.data.channel),
                    variables: {
                        login: e.channelLogin
                    },
                    topic: Object(c.b)(),
                    types: [l.PubsubMessageType.BitsCampaignTotalUpdate, l.PubsubMessageType.BitsCampaignComplete],
                    mutator: function(e, t) {
                        if (t.channel && t.channel.cheer && t.channel.cheer.emotes)
                            if (e.type === l.PubsubMessageType.BitsCampaignTotalUpdate) {
                                var n = e;
                                t.channel.cheer.emotes = t.channel.cheer.emotes.map(function(e) {
                                    return e.campaign ? (e.campaign && e.campaign.id === n.campaign_id && (e.campaign.bitsUsed = n.used_amount), e) : e
                                })
                            } else if (e.type === l.PubsubMessageType.BitsCampaignComplete) {
                            var i = e;
                            t.channel.cheer.emotes = t.channel.cheer.emotes.filter(function(e) {
                                return !e.campaign || e.campaign.id !== i.campaign_id
                            })
                        }
                        return t
                    }
                }
            }), Object(s.a)(function(e) {
                return {
                    query: U,
                    skip: !(e.firstPageLoaded && e.sessionUser && e.data && e.data.channel),
                    variables: {
                        login: e.channelLogin
                    },
                    topic: Object(c.a)("" + (e.data && e.data.channel && e.data.channel.id)),
                    types: [l.PubsubMessageType.BitsCampaignAddCheermoteEvent, l.PubsubMessageType.BitsCampaignRemoveCheermoteEvent],
                    mutator: function(e, t) {
                        if (t.channel && t.channel.cheer && t.channel.cheer.emotes)
                            if (e.type === l.PubsubMessageType.BitsCampaignAddCheermoteEvent) {
                                var n = m(e.action);
                                t.channel.cheer.emotes.unshift(n)
                            } else if (e.type === l.PubsubMessageType.BitsCampaignRemoveCheermoteEvent) {
                            var i = e;
                            t.channel.cheer.emotes = t.channel.cheer.emotes.filter(function(e) {
                                return !e.campaign || e.campaign.id !== i.campaign_id
                            })
                        }
                        return t
                    }
                }
            }), Object(f.b)(), Object(b.b)("RoomSelector", {
                autoReportInteractive: !0
            }))(A);
            n.d(t, "a", function() {
                return L
            })
        },
        VJHF: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return a
            }), n.d(t, "c", function() {
                return r
            }), n.d(t, "f", function() {
                return o
            }), n.d(t, "d", function() {
                return s
            }), n.d(t, "e", function() {
                return l
            }), n.d(t, "a", function() {
                return i
            });
            var i, a = "esports-campaign-ftue-displayed",
                r = "hgc2018",
                o = "owl2018",
                s = "hearthstone2018",
                l = "hearthstone2018-test";
            ! function(e) {
                e.Benefactor = "benefactor", e.Recipient = "recipient"
            }(i || (i = {}))
        },
        VN3V: function(e, t, n) {},
        VS9Q: function(e, t, n) {
            "use strict";
            var i = n("i6WW"),
                a = n("6j5V"),
                r = n("XmgI"),
                o = n("gTu3"),
                s = n("RcPG"),
                l = n("a1OF"),
                c = {
                    AUTOMOD: "AutoMod",
                    EMOTE: "Emote",
                    MENTION: "User",
                    CHEERMOTE: "CheermoteToken"
                };
            n.d(t, "a", function() {
                return d
            }), n.d(t, "f", function() {
                return u
            }), n.d(t, "g", function() {
                return m
            }), n.d(t, "e", function() {
                return p
            }), n.d(t, "d", function() {
                return g
            }), n.d(t, "c", function() {
                return f
            }), n.d(t, "b", function() {
                return b
            });
            var d = "/me ";

            function u(e, t, n) {
                var i = e.content.text.startsWith(d);
                return h(e.content.fragments, i, n, t, e.sender.login)
            }

            function m(e, t) {
                return h(e.content.fragments, !1, t)
            }

            function p(e) {
                return e.reduce(function(e, t) {
                    var n = t.content,
                        i = t.text;
                    return n && n.__typename === c.AUTOMOD ? e.concat({
                        type: s.a.ModeratedText,
                        content: i
                    }) : e.concat(Object(a.a)(i))
                }, [])
            }

            function h(e, t, n, u, m) {
                var p = [];
                return e.forEach(function(e, h) {
                    var g = e.content;
                    if (g && g.__typename === c.EMOTE) {
                        var f = g;
                        p.push({
                            type: s.a.Emote,
                            content: {
                                alt: e.text,
                                images: {
                                    themed: !1,
                                    sources: {
                                        "1x": Object(l.d)(f.emoteID, 1),
                                        "2x": Object(l.d)(f.emoteID, 2),
                                        "4x": Object(l.d)(f.emoteID, 4)
                                    }
                                }
                            }
                        })
                    } else if (g && g.__typename === c.CHEERMOTE) {
                        if (!u) return;
                        var b = g,
                            v = b.prefix,
                            k = b.bitsAmount,
                            C = b.tier,
                            y = u.indexedActions[v],
                            E = y && y.indexedTiers.get(C);
                        E ? p.push({
                            type: s.a.Emote,
                            content: {
                                alt: v,
                                images: Object(r.d)(E),
                                cheerAmount: k,
                                cheerColor: E.color
                            }
                        }) : p.push(Object(a.a)(e.text))
                    } else if (g && g.__typename === c.MENTION) {
                        var S = g,
                            N = o.a.Default;
                        n && S.login === n ? N = o.a.Recipient : n && m && m === n && (N = o.a.Sender), p.push({
                            type: s.a.Mention,
                            content: {
                                recipient: e.text.slice(1),
                                currentUserMentionRelation: N
                            }
                        })
                    } else {
                        var _ = Object(i.a)(e.text, {
                            blockLinks: !1,
                            parseClips: !0,
                            parseVods: !0
                        });
                        if (_) p.push(_);
                        else {
                            var O = e.text;
                            t && 0 === h && O.startsWith(d) && (O = O.substr(3)), p.push(Object(a.a)(O))
                        }
                    }
                }), p
            }

            function g(e) {
                var t = e.data,
                    n = t.message,
                    i = t.cursor,
                    a = f(n.content.fragments),
                    r = b(n.sender.badges);
                return {
                    cursor: "" + i,
                    node: {
                        id: n.id,
                        deletedAt: null,
                        sentAt: n.sent_at,
                        content: {
                            text: n.content.text,
                            fragments: a,
                            __typename: "RoomMessageContent"
                        },
                        sender: {
                            id: n.sender.user_id,
                            login: n.sender.login,
                            chatColor: n.sender.chat_color,
                            displayName: n.sender.display_name,
                            displayBadges: r,
                            __typename: "User"
                        },
                        __typename: "RoomMessage"
                    },
                    __typename: "RoomMessageEdge"
                }
            }

            function f(e) {
                return e.map(function(e) {
                    var t = {
                            text: e.text,
                            content: null,
                            __typename: "RoomMessageFragment"
                        },
                        n = e.cheermote,
                        i = e.emoticon,
                        a = e.mention,
                        r = e.text;
                    return n ? t.content = {
                        bitsAmount: n.bits_amount,
                        prefix: n.prefix,
                        tier: n.tier,
                        __typename: "CheermoteToken"
                    } : i ? t.content = {
                        emoteID: i.id,
                        setID: i.set_id,
                        token: r,
                        __typename: "Emote"
                    } : a && (t.content = {
                        id: a.user_id,
                        login: a.login,
                        displayName: a.display_name,
                        __typename: "User"
                    }), t
                })
            }

            function b(e) {
                return e.map(function(e) {
                    return {
                        setID: e.id,
                        version: e.version,
                        __typename: "Badge"
                    }
                })
            }
        },
        Ve5Q: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "UpsellCenter_Channel"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "login"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "profileImageURL"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "70"
                                        }
                                    }],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcastSettings"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "game"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "displayName"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 162
                }
            };
            n.loc.source = {
                body: "query UpsellCenter_Channel($login: String!) {\nuser(login: $login) {\nid\ndisplayName\nprofileImageURL(width: 70)\nbroadcastSettings {\nid\ngame {\nid\ndisplayName\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "Vl9+": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "thread"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "WhisperThread"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "messages"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "first"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "20"
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "edges"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "cursor"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "node"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "nonce"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "content"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "content"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "emotes"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "id"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "emoteID"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "setID"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "from"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "to"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "deletedAt"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "editedAt"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "sentAt"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "from"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "unreadMessagesCount"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "userLastMessageRead"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "sentAt"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 240
                }
            };
            n.loc.source = {
                body: "fragment thread on WhisperThread {\nmessages(first: 20) {\nedges {\ncursor\nnode {\nid\nnonce\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n}\n}\ndeletedAt\neditedAt\nsentAt\nfrom {\nid\n}\n}\n}\n}\nunreadMessagesCount\nuserLastMessageRead {\nsentAt\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        VrOd: function(e, t, n) {},
        "W/3w": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            }), n.d(t, "b", function() {
                return r
            }), n.d(t, "c", function() {
                return o
            }), n.d(t, "d", function() {
                return s
            });
            var i = n("/7QA"),
                a = 30,
                r = [0, 10, 30, 60, 1440, 10080, 43200, 129600];

            function o(e) {
                switch (e) {
                    case 0:
                        return Object(i.d)("0 minutes (Any followers)", "FollowersOnlyLabel");
                    case 10:
                        return Object(i.d)("10 minutes (Most used)", "FollowersOnlyLabel");
                    case 30:
                        return Object(i.d)("30 minutes", "FollowersOnlyLabel");
                    case 60:
                        return Object(i.d)("1 hour", "FollowersOnlyLabel");
                    case 1440:
                        return Object(i.d)("1 day", "FollowersOnlyLabel");
                    case 10080:
                        return Object(i.d)("1 week", "FollowersOnlyLabel");
                    case 43200:
                        return Object(i.d)("1 month", "FollowersOnlyLabel");
                    case 129600:
                        return Object(i.d)("3 months", "FollowersOnlyLabel");
                    default:
                        return i.k.warn("[FollowersOnlyLabel] Tried to generate a label for a non-preset.", e), ""
                }
            }

            function s(e) {
                switch (e) {
                    case 0:
                        return Object(i.d)("0 min", "FollowersOnlyShorthand");
                    case 10:
                        return Object(i.d)("10 min", "FollowersOnlyShorthand");
                    case 30:
                        return Object(i.d)("30 min", "FollowersOnlyShorthand");
                    case 60:
                        return Object(i.d)("1 hr", "FollowersOnlyShorthand");
                    case 1440:
                        return Object(i.d)("1 day", "FollowersOnlyShorthand");
                    case 10080:
                        return Object(i.d)("1 wk", "FollowersOnlyShorthand");
                    case 43200:
                        return Object(i.d)("1 mo", "FollowersOnlyShorthand");
                    case 129600:
                        return Object(i.d)("3 mo", "FollowersOnlyShorthand");
                    default:
                        return Object(i.d)("custom", "FollowersOnlyShorthand")
                }
            }
        },
        W8Fi: function(e, t, n) {
            "use strict";

            function i(e) {
                return e.some(function(e) {
                    return !!e.self && !!e.self.promotion
                })
            }

            function a(e) {
                return e.some(function(e) {
                    return !!e.giftPromotion
                })
            }

            function r(e) {
                return e.some(function(e) {
                    return !!e.self && !!e.self.paidUpgradePromotion
                })
            }

            function o(e, t) {
                var n;
                return t ? n = e.giftPromotion : e.self && (n = e.self.promotion), n ? n.newPrice : e.price
            }

            function s(e, t) {
                var n;
                return t ? n = e.giftPromotion : e.self && (n = e.self.promotion), n ? parseInt(n.discountValue, 10) : 0
            }

            function l(e) {
                return e.self && e.self.paidUpgradePromotion ? e.self.paidUpgradePromotion.newPrice : e.price
            }

            function c(e) {
                return e.find(function(e) {
                    return !!e.self && !!e.self.paidUpgradePromotion
                }) || null
            }
            n.d(t, "g", function() {
                return i
            }), n.d(t, "e", function() {
                return a
            }), n.d(t, "f", function() {
                return r
            }), n.d(t, "c", function() {
                return o
            }), n.d(t, "d", function() {
                return s
            }), n.d(t, "a", function() {
                return l
            }), n.d(t, "b", function() {
                return c
            })
        },
        WytW: function(e, t, n) {
            "use strict";
            n.d(t, "g", function() {
                return r
            }), n.d(t, "h", function() {
                return o
            }), n.d(t, "j", function() {
                return s
            }), n.d(t, "b", function() {
                return l
            }), n.d(t, "c", function() {
                return c
            }), n.d(t, "d", function() {
                return d
            }), n.d(t, "e", function() {
                return u
            }), n.d(t, "f", function() {
                return m
            }), n.d(t, "a", function() {
                return p
            }), n.d(t, "p", function() {
                return g
            }), n.d(t, "m", function() {
                return b
            }), n.d(t, "q", function() {
                return k
            }), n.d(t, "k", function() {
                return y
            }), n.d(t, "o", function() {
                return S
            }), n.d(t, "n", function() {
                return _
            }), n.d(t, "l", function() {
                return M
            }), n.d(t, "i", function() {
                return I
            });
            var i = n("/7QA"),
                a = i.p.logger.withCategory("chat-commands");

            function r(e) {
                return "/mod " + e
            }

            function o(e) {
                return "/unmod " + e
            }

            function s(e) {
                return /^[\/]/.test(e)
            }

            function l() {
                return "/clear"
            }

            function c() {
                return "/followersoff"
            }

            function d() {
                return "/slowoff"
            }

            function u(e) {
                return "/followers " + e
            }

            function m() {
                return "/slow"
            }

            function p(e) {
                return "/color " + e
            }
            var h = /^\/w(?:$|\s+)(\S+)?\s*(.+)?/i;

            function g(e) {
                var t = e.trim().match(h);
                return t ? {
                    recipientLogin: t[1] || null,
                    body: t[2] || null
                } : null
            }
            var f = /^\/host(?:$|\s+)(\S+)/i;

            function b(e) {
                var t = e.trim().match(f);
                return t ? {
                    recipientLogin: t[1]
                } : null
            }
            var v = /^(\S+)?\s+(.+)?$/;

            function k(e) {
                var t = e.trim().match(v);
                return t ? {
                    recipientLogin: t[1] || null,
                    body: t[2] || null
                } : {
                    recipientLogin: null,
                    body: null
                }
            }
            var C = /^\/ban\s+@?(\S+)(?:\s+(.+))?$/;

            function y(e) {
                var t = e.trim().match(C);
                return t ? {
                    banTarget: t[1],
                    reason: t[2] || null
                } : null
            }
            var E = /^\/timeout\s+@?(\S+)(?:\s+(\d+))?(?:\s+(.+))?$/;

            function S(e) {
                var t = e.trim().match(E);
                return t ? {
                    banTarget: t[1],
                    duration: t[2] && Number(t[2]) || null,
                    reason: t[3] || null
                } : null
            }
            var N = /^\/slow(?:\s+(\d+)?)?$/;

            function _(e) {
                var t = e.trim().match(N);
                return t ? {
                    duration: t[1] && Number(t[1]) || null
                } : null
            }
            var O = ["blue", "blueviolet", "cadetblue", "chocolate", "coral", "dodgerblue", "firebrick", "goldenrod", "green", "hotpink", "orangered", "red", "seagreen", "springgreen", "yellowgreen"],
                w = /^\/color\s+(#[A-Fa-f0-9]{6}|[A-Za-z]+)$/;

            function M(e) {
                var t = e.trim().match(w);
                if (!t) return null;
                var n = t[1];
                return n.startsWith("#") || -1 !== O.indexOf(n.toLowerCase()) ? {
                    color: n
                } : null
            }
            var D = /^[/.]([a-z0-9]+)(.+)?$/i;

            function I(e, t) {
                var n = e.match(D);
                if (!n) return {
                    handled: !1
                };
                var r = n[1],
                    o = i.p.store.getState().chat.commandHandlers[r.toLowerCase()];
                if (!o) return {
                    command: r,
                    handled: !1
                };
                if (1 !== o.length) return a.error(new Error("Failed to run comand " + r), "Multiple command handlers defined for '" + r + "'", {
                    command: r
                }), {
                    command: r,
                    handled: !1
                };
                var s = (n[2] || "").trim(),
                    l = {
                        channelLogin: t
                    },
                    c = o[0];
                try {
                    return {
                        command: r,
                        handled: !0,
                        result: c(s, l)
                    }
                } catch (e) {
                    return a.warn("Exception thrown from chat command handler", {
                        command: r,
                        err: e
                    }), {
                        handled: !1
                    }
                }
            }
        },
        X7Ac: function(e, t, n) {
            "use strict";
            var i = n("wbMx");
            n.d(t, "a", function() {
                return i.a
            }), n.d(t, "b", function() {
                return i.b
            })
        },
        XIZb: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return s
            });
            var i = n("mrSG"),
                a = n("q1tI"),
                r = n("4rCz"),
                o = n("1rIY");

            function s(e) {
                var t = Object(o.a)(e, {
                        setServiceAPI: function() {
                            r.l.warn("The " + e + " chat service attempted to register its API without a provider.")
                        }
                    }),
                    n = t.InnerProvider,
                    s = t.withContext;
                return {
                    InnerProvider: n,
                    withChatServiceProvider: function(e) {
                        return function(t) {
                            function r() {
                                var e = null !== t && t.apply(this, arguments) || this;
                                return e.state = {}, e.setServiceAPI = function(t) {
                                    e.setState({
                                        serviceAPI: t
                                    })
                                }, e
                            }
                            return i.__extends(r, t), r.prototype.render = function() {
                                return a.createElement(n, {
                                    value: {
                                        serviceAPI: this.state.serviceAPI,
                                        setServiceAPI: this.setServiceAPI
                                    }
                                }, a.createElement(e, i.__assign({}, this.props)))
                            }, r
                        }(a.Component)
                    },
                    withContext: s
                }
            }
        },
        XQnt: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "EmotePicker_SubUpsell_PriceInfo"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "subscriptionProducts"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "displayName"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "tier"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "url"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "emotes"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "token"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "price"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "priceInfo"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "currency"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "exponent"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "total"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "description"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "price"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isTaxInclusive"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "tax"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "emoteSetID"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "self"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "promotion"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "newPrice"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "oldPrice"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "discountType"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "discountValue"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "paidUpgradePromotion"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "newPrice"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "oldPrice"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "discountType"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "discountValue"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 393
                }
            };
            n.loc.source = {
                body: "query EmotePicker_SubUpsell_PriceInfo($channelID: ID!) {\nuser(id: $channelID) {\nid\nsubscriptionProducts {\nid\ndisplayName\nname\ntier\nurl\nemotes {\nid\ntoken\n}\nprice\npriceInfo {\ncurrency\nexponent\ntotal\ndescription\nprice\nisTaxInclusive\nid\ntax\n}\nemoteSetID\nself {\npromotion {\nnewPrice\noldPrice\ndiscountType\ndiscountValue\n}\npaidUpgradePromotion {\nnewPrice\noldPrice\ndiscountType\ndiscountValue\n}\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        Y3y8: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            }), n.d(t, "b", function() {
                return c
            });
            var i = n("yR8l"),
                a = n("eDVu"),
                r = n("0Log"),
                o = n("/aPz"),
                s = n("/gva");

            function l() {
                return Object(i.a)(s, {
                    name: "currentUserBannedStatusData",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin || !e.firstPageLoaded
                    }
                })
            }

            function c() {
                return Object(a.a)(function(e) {
                    return {
                        variables: {
                            channelLogin: e.channelLogin
                        },
                        query: s,
                        skip: !e.sessionUser || !e.channelID || !e.firstPageLoaded,
                        topic: e.sessionUser && e.channelID ? Object(o.j)("" + (e.sessionUser && e.sessionUser.id)) : "",
                        type: r.PubsubMessageType.ChatRoomsUserModAction,
                        mutator: function(t, n) {
                            return e.sessionUser && e.channelID && n.channel && n.channel.self && t.data.target_id === e.sessionUser.id && t.data.channel_id === e.channelID && ("ban" === t.data.action ? n.channel.self.banStatus = {
                                isPermanent: !0,
                                __typename: "ChatRoomBanStatus"
                            } : "unban" === t.data.action && (n.channel.self.banStatus = {
                                isPermanent: !1,
                                __typename: "ChatRoomBanStatus"
                            })), n
                        }
                    }
                })
            }
        },
        Y5lD: function(e, t, n) {
            "use strict";

            function i(e) {
                return Math.floor((Date.now() - new Date(e).getTime()) / 1e3)
            }
            n.d(t, "a", function() {
                return i
            })
        },
        YXxK: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            });
            var i = {
                Embed: "embed",
                Web: "web"
            }
        },
        Yr1V: function(e, t, n) {},
        ZEQw: function(e, t, n) {
            "use strict";
            n.d(t, "c", function() {
                return i
            }), n.d(t, "d", function() {
                return a
            }), n.d(t, "e", function() {
                return r
            }), n.d(t, "b", function() {
                return o
            }), n.d(t, "a", function() {
                return s
            });
            var i = "subscribe_to_channel",
                a = "turbo",
                r = "visit_url",
                o = "none",
                s = "broadcaster"
        },
        ZVTe: function(e, t, n) {
            "use strict";
            var i = n("TSYQ"),
                a = n("q1tI"),
                r = n("EE1E"),
                o = (n("2e6W"), function(e) {
                    var t, n = e.userData.color;
                    e.highContrastUsernameColor && n && (n = "#" + Object(r.a)(n, e.theme));
                    var o = [a.createElement("span", {
                        key: "username-display",
                        className: "chat-author__display-name",
                        "data-a-target": "chat-message-username",
                        "data-a-user": e.userData.userLogin,
                        "data-test-selector": "message-username",
                        style: {
                            color: n
                        }
                    }, e.userData.userDisplayName)];
                    if (e.userData.isIntl) {
                        var s = i(((t = {})["chat-author__intl-login"] = !e.highlighted, t["chat-author__intl-login--highlighted"] = e.highlighted, t));
                        o.push(a.createElement("span", {
                            key: "username-login",
                            style: {
                                color: n
                            },
                            className: s,
                            "data-test-selector": "message-username-canonical"
                        }, " (" + e.userData.userLogin + ")"))
                    }
                    return a.createElement("span", {
                        key: e.userData.userID + "-authorlabel"
                    }, o)
                });
            n.d(t, !1, function() {
                return "message-username"
            }), n.d(t, !1, function() {
                return "message-username-canonical"
            }), n.d(t, !1, function() {
                return "chat-author__display-name"
            }), n.d(t, !1, function() {
                return "chat-author__intl-login"
            }), n.d(t, !1, function() {
                return "chat-author__intl-login--highlighted"
            }), n.d(t, "a", function() {
                return o
            })
        },
        ZtEv: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return i
            }), n.d(t, "c", function() {
                return a
            }), n.d(t, "e", function() {
                return r
            }), n.d(t, "a", function() {
                return o
            });
            var i, a, r, o, s = n("0Log");
            n.d(t, "d", function() {
                    return s.ModerationActions
                }),
                function(e) {
                    e[e.Message = 0] = "Message", e[e.ExtensionMessage = 1] = "ExtensionMessage", e[e.Moderation = 2] = "Moderation", e[e.ModerationAction = 3] = "ModerationAction", e[e.TargetedModerationAction = 4] = "TargetedModerationAction", e[e.AutoMod = 5] = "AutoMod", e[e.SubscriberOnlyMode = 6] = "SubscriberOnlyMode", e[e.FollowerOnlyMode = 7] = "FollowerOnlyMode", e[e.SlowMode = 8] = "SlowMode", e[e.EmoteOnlyMode = 9] = "EmoteOnlyMode", e[e.R9KMode = 10] = "R9KMode", e[e.Connected = 11] = "Connected", e[e.Disconnected = 12] = "Disconnected", e[e.Reconnect = 13] = "Reconnect", e[e.Hosting = 14] = "Hosting", e[e.Unhost = 15] = "Unhost", e[e.Hosted = 16] = "Hosted", e[e.Subscription = 17] = "Subscription", e[e.Resubscription = 18] = "Resubscription", e[e.GiftPaidUpgrade = 19] = "GiftPaidUpgrade", e[e.AnonGiftPaidUpgrade = 20] = "AnonGiftPaidUpgrade", e[e.SubGift = 21] = "SubGift", e[e.AnonSubGift = 22] = "AnonSubGift", e[e.Clear = 23] = "Clear", e[e.RoomMods = 24] = "RoomMods", e[e.RoomState = 25] = "RoomState", e[e.Raid = 26] = "Raid", e[e.Unraid = 27] = "Unraid", e[e.Ritual = 28] = "Ritual", e[e.Notice = 29] = "Notice", e[e.Info = 30] = "Info", e[e.BadgesUpdated = 31] = "BadgesUpdated", e[e.Purchase = 32] = "Purchase", e[e.BitsCharity = 33] = "BitsCharity", e[e.CrateGift = 34] = "CrateGift", e[e.RewardGift = 35] = "RewardGift", e[e.SubMysteryGift = 36] = "SubMysteryGift", e[e.AnonSubMysteryGift = 37] = "AnonSubMysteryGift"
                }(i || (i = {})),
                function(e) {
                    e[e.Post = 0] = "Post", e[e.Action = 1] = "Action", e[e.PostWithMention = 2] = "PostWithMention"
                }(a || (a = {})),
                function(e) {
                    e[e.Ban = 0] = "Ban", e[e.Timeout = 1] = "Timeout", e[e.Delete = 2] = "Delete"
                }(r || (r = {})),
                function(e) {
                    e[e.MessageRejectedPrompt = 0] = "MessageRejectedPrompt", e[e.CheerMessageRejectedPrompt = 1] = "CheerMessageRejectedPrompt", e[e.MessageRejected = 2] = "MessageRejected", e[e.MessageAllowed = 3] = "MessageAllowed", e[e.MessageDenied = 4] = "MessageDenied", e[e.CheerMessageDenied = 5] = "CheerMessageDenied", e[e.CheerMessageTimeout = 6] = "CheerMessageTimeout", e[e.MessageModApproved = 7] = "MessageModApproved", e[e.MessageModDenied = 8] = "MessageModDenied"
                }(o || (o = {}))
        },
        ZuCe: function(e, t, n) {},
        a1OF: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return u
            }), n.d(t, "b", function() {
                return m
            }), n.d(t, "e", function() {
                return p
            }), n.d(t, "c", function() {
                return h
            }), n.d(t, "d", function() {
                return g
            });
            var i = n("mrSG"),
                a = n("/7QA"),
                r = n("oe5X"),
                o = n("0FG4"),
                s = n("kRBY"),
                l = n("60o1"),
                c = ["#FF0000", "#0000FF", "#008000", "#B22222", "#FF7F50", "#9ACD32", "#FF4500", "#2E8B57", "#DAA520", "#D2691E", "#5F9EA0", "#1E90FF", "#FF69B4", "#8A2BE2", "#00FF7F"],
                d = {};

            function u(e, t, n, a, r, o, s) {
                void 0 === r && (r = !1), void 0 === o && (o = !1), void 0 === s && (s = !1);
                var c = Object(l.a)(t.displayName, t.username);
                return {
                    badges: t.badges || {},
                    bits: t.bits,
                    user: i.__assign({}, c, {
                        userLogin: t.username,
                        userID: t.userID,
                        userType: t.userType,
                        color: t.color || m(t.userID)
                    }),
                    messageParts: p(e, t.emotes || {}, t.bits, n, a, t.username),
                    deleted: r,
                    banned: s,
                    hidden: o,
                    timestamp: Date.now()
                }
            }

            function m(e, t) {
                return void 0 === t && (t = 15), "number" != typeof d[e] && (d[e] = Math.floor(Math.random() * t)), c[d[e]]
            }

            function p(e, t, n, i, l, c) {
                var d = Object(s.e)(a.p.store.getState()),
                    u = {
                        cheers: n ? i : void 0,
                        emotes: {
                            type: o.a.Position,
                            map: t
                        },
                        links: {
                            blockLinks: l,
                            parseClips: !0,
                            parseVods: !0
                        },
                        mentions: {
                            senderLogin: c,
                            sessionUser: d
                        }
                    };
                return Object(r.a)(e, u)
            }

            function h(e) {
                return e.match(/[^\uD800-\uDFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDFFF]/g)
            }

            function g(e, t) {
                return "https://static-cdn.jtvnw.net/emoticons/v1/" + e + "/" + Math.min(Math.ceil(t), 3) + ".0"
            }
        },
        a2UF: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            });
            var i = n("mrSG"),
                a = n("yR8l"),
                r = n("Pub/"),
                o = n("HzXE"),
                s = n("1Rv/");

            function l(e) {
                var t = this;
                return Object(a.a)(s, {
                    props: function(n) {
                        return {
                            unbanUserMutation: function(a) {
                                return i.__awaiter(t, void 0, void 0, function() {
                                    var t;
                                    return i.__generator(this, function(s) {
                                        switch (s.label) {
                                            case 0:
                                                if (t = e(n.ownProps).channelID, !n.mutate) return [3, 5];
                                                s.label = 1;
                                            case 1:
                                                return s.trys.push([1, 3, , 4]), [4, n.mutate({
                                                    variables: {
                                                        input: {
                                                            channelID: t,
                                                            bannedUserLogin: a
                                                        }
                                                    },
                                                    update: function(e, n) {
                                                        return function(e, t, n) {
                                                            if (t && t.data && t.data.unbanUserFromChatRoom && t.data.unbanUserFromChatRoom.ban && t.data.unbanUserFromChatRoom.ban.bannedUser && t.data.unbanUserFromChatRoom.ban.bannedUser.id) {
                                                                var a = Object(r.a)(e, n, t.data.unbanUserFromChatRoom.ban.bannedUser.id);
                                                                if (!a) return;
                                                                e.writeQuery({
                                                                    query: o,
                                                                    variables: {
                                                                        targetUserID: t.data.unbanUserFromChatRoom.ban.bannedUser.id,
                                                                        channelID: n
                                                                    },
                                                                    data: i.__assign({}, a, {
                                                                        chatRoomBanStatus: null
                                                                    })
                                                                })
                                                            }
                                                        }(e, n, t)
                                                    }
                                                })];
                                            case 2:
                                                return [2, s.sent().data];
                                            case 3:
                                                throw s.sent(), new Error("Unable to unban user");
                                            case 4:
                                                return [3, 6];
                                            case 5:
                                                throw new Error("Unban user mutation is not ready");
                                            case 6:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }
        },
        a5fV: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return a
            }), n.d(t, "a", function() {
                return r
            });
            var i = n("/7QA");

            function a(e, t) {
                return e / Math.pow(10, t)
            }

            function r(e, t) {
                return Object(i.f)(e, {
                    style: "currency",
                    currency: t
                })
            }
        },
        a7aT: function(e, t, n) {},
        aF6k: function(e, t, n) {
            "use strict";

            function i(e) {
                var t = Math.random().toString(36).substring(2, 6);
                return e + "-" + Date.now() + "-" + t
            }
            n.d(t, "a", function() {
                return i
            })
        },
        b5C3: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = n("q1tI"),
                a = n("vHGB"),
                r = function(e) {
                    var t = e.badgesToRender,
                        n = e.badgeSets;
                    if (!t) return null;
                    var r = [];
                    ! function(e) {
                        return Array.isArray(e)
                    }(t) ? function(e) {
                        return !Array.isArray(e)
                    }(t) && (r = Object.keys(t).map(function(e) {
                        var r = t[e],
                            o = n.getBadge(e, r);
                        return null === o ? null : i.createElement(a.a, {
                            key: o.setID + "/" + o.version,
                            badge: o
                        })
                    })) : r = t.map(function(e) {
                        var t = n.getBadge(e.setID, e.version);
                        return null === t ? null : i.createElement(a.a, {
                            key: t.setID + "/" + t.version,
                            badge: t
                        })
                    });
                    var o = r.filter(function(e) {
                        return null !== e
                    });
                    return i.createElement("span", null, o)
                };
            r.displayName = "BadgeList"
        },
        b7X6: function(e, t, n) {},
        bhOa: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("q1tI"),
                r = n("/7QA"),
                o = n("gcd7"),
                s = n("ygQa"),
                l = n("WytW"),
                c = n("Ue10"),
                d = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.updateChatColor = function(e) {
                            var n = Object(l.l)("/color " + e);
                            if (n && n.color) {
                                var i = n.color;
                                return {
                                    deferred: t.props.updateChatColorMutation(i).then(function() {
                                        return {
                                            notice: Object(r.d)("Your color has been changed.", "ColorCommandHandler")
                                        }
                                    }).catch(function() {
                                        return {
                                            notice: Object(r.d)("Unable to change your color.", "ColorCommandHandler")
                                        }
                                    })
                                }
                            }
                            return {
                                deferred: Promise.resolve({
                                    notice: Object(r.d)('Usage: "/color [color]" - Change your username color. Color must be in hex (#000000) or one of the following: Blue, BlueViolet, CadetBlue, Chocolate, Coral, DodgerBlue, Firebrick, GoldenRod, Green, HotPink, OrangeRed, Red, SeaGreen, SpringGreen, YellowGreen.', "ColorCommandHandler")
                                })
                            }
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return a.createElement(c.Xa, {
                            display: c.X.Hide
                        }, a.createElement(o.a, {
                            command: "color",
                            handler: this.updateChatColor
                        }))
                    }, t
                }(a.Component),
                u = Object(s.a)()(d);
            n.d(t, "a", function() {
                return u
            })
        },
        br9A: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            }), n.d(t, "b", function() {
                return c
            });
            var i = n("mrSG"),
                a = n("/7QA"),
                r = n("2xye"),
                o = n("I6K6"),
                s = n("RuiO"),
                l = {
                    BuyCustomMysteryGift: "buy_custom_mystery_gift",
                    BuyGiftSub: "buy_gift_sub",
                    BuyGiftToPaidUpgrade: "buy_gift_to_paid_upgrade",
                    BuyMysteryGift: "buy_mystery_gift",
                    BuyPaidUpgrade: "buy_paid_upgrade",
                    ChangeTier: "change_tier",
                    ClickCheckout: "click_checkout_button",
                    ClickMoreSubOptions: "more_options_click",
                    ClickGiftSubOptions: "gift_options_click",
                    ClickPrimeFAQ: "click_prime_faq",
                    ClickSignupForPrime: "click_signup_for_prime",
                    ClickBack: "back_top_level",
                    CloseSubMenu: "close_subscribe_menu",
                    GiftASub: "gift_a_sub",
                    OpenSubMenu: "open_subscribe_menu",
                    SubWithPrime: "samus_spend_credit"
                };

            function c(e) {
                return i.__awaiter(this, void 0, void 0, function() {
                    var t, n, l, c, d, u, m, p, h, g, f, b, v;
                    return i.__generator(this, function(i) {
                        switch (i.label) {
                            case 0:
                                t = a.o.getVideoPlayerTrackingData().vodID, n = !!t, l = {
                                    channelID: e.channelID,
                                    withVideo: !1
                                }, n && (l.withVideo = !0, l.videoID = t), c = null, i.label = 1;
                            case 1:
                                return i.trys.push([1, 3, , 4]), [4, a.p.apollo.client.query({
                                    query: s,
                                    variables: l
                                })];
                            case 2:
                                return c = i.sent(), [3, 4];
                            case 3:
                                return d = i.sent(), a.k.error(d, "Failed to make query for channel info in FollowEvent reporting.", {
                                    channelID: e.channelID
                                }), [3, 4];
                            case 4:
                                return u = c && c.data && c.data.user || null, c && !u && a.k.error(new Error("GraphQL empty response"), "Query for channel info in SubEvent reporting returned no data.", {
                                    channelID: e.channelID
                                }), m = null, c && n && ((p = c && c.data && c.data.video) ? m = Object(o.a)(p.broadcastType) : a.k.error(new Error("GraphQL empty response"), "Query for video info in SubEvent reporting returned no data.", {
                                    currentVideoID: t
                                })), h = u && u.self, g = h ? !!h.subscriptionBenefit : null, f = h && h.subscriptionBenefit && h.subscriptionBenefit.purchasedWithPrime || !1, b = h ? h.canPrimeSubscribe : null, v = {
                                    action: e.action,
                                    can_subscribe: b,
                                    channel: e.channelLogin,
                                    channel_id: e.channelID,
                                    checkout_button_tier: e.checkoutButtonTier,
                                    has_sub_credit: e.hasSubCredit,
                                    host_channel: e.hostChannelLogin,
                                    host_channel_id: e.hostChannelID,
                                    is_menu_open: e.isMenuOpen,
                                    is_subscribed: g,
                                    is_subscribed_current_tier: h && h.subscriptionBenefit && h.subscriptionBenefit.tier,
                                    mystery_gift_count: e.mysteryGiftCount || null,
                                    sub_location: e.sub_location,
                                    sub_recipient: e.giftRecipient,
                                    modal: e.modal,
                                    modal_level: e.modalLevel || "",
                                    show_prime_content: e.showPrimeContent,
                                    show_resub: u ? b && f : null,
                                    vod_id: t,
                                    vod_type: m,
                                    viewport_height: window.innerHeight,
                                    viewport_width: window.innerWidth
                                }, a.o.track(r.SpadeEventType.Subscription, v), [2]
                        }
                    })
                })
            }
        },
        "c+1r": function(e, t, n) {},
        cMjZ: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            });
            var i = n("o4DC");

            function a(e) {
                return e && Object(i.c)(e) || ""
            }
        },
        cnlr: function(e, t, n) {
            "use strict";
            var i, a = n("mrSG"),
                r = n("q1tI"),
                o = n("/MKj"),
                s = n("fvjX"),
                l = n("/7QA"),
                c = n("Lmqf"),
                d = n.n(c),
                u = n("yR8l"),
                m = n("1/iK"),
                p = n("y5D0"),
                h = n("ugtu"),
                g = n("D7An");
            ! function(e) {
                e.Learn = "learn", e.Support = "support", e.LiveUp = "liveup", e.Recommendation = "rec", e.Bullet = "bullet"
            }(i || (i = {}));
            var f, b, v = n("Ue10"),
                k = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            upsellCenterChannelsAssignment: t.props.showDefault ? null : function() {
                                var e = l.p.experiments.getAssignment(g.b.WebSideNavUpsellCenterChannels);
                                return e === i.Learn || e === i.Support || e === i.LiveUp || e === i.Recommendation || e === i.Bullet ? e : null
                            }()
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        return r.createElement(v.Xa, {
                            margin: {
                                y: 1
                            }
                        }, this.renderText())
                    }, t.prototype.renderText = function() {
                        if (!this.props.data || this.props.showDefault || !this.state.upsellCenterChannelsAssignment) return this.renderDefault();
                        switch (this.state.upsellCenterChannelsAssignment) {
                            case i.Learn:
                                return this.renderTextContent(Object(l.d)("Want to master <x:bold>{game}</x:bold>?", {
                                    game: this.props.data.game,
                                    "x:bold": h.j
                                }, "UpsellCenterText"), Object(l.d)("Sign up to learn from the best.", "UpsellCenterText"));
                            case i.Support:
                                return this.renderTextContent(Object(l.d)("Sign up and follow to support <x:bold>{name}</x:bold> and all your favorite streamers!", {
                                    name: this.props.data.channelDisplayName,
                                    "x:bold": h.j
                                }, "UpsellCenterText"));
                            case i.LiveUp:
                                return this.renderTextContent(Object(l.d)("Late to the show?", "UpsellCenterText"), Object(l.d)("Sign up and get notifications next time <x:bold>{name}</x:bold> goes live.", {
                                    name: this.props.data.channelDisplayName,
                                    "x:bold": h.j
                                }, "UpsellCenterText"));
                            case i.Recommendation:
                                return this.renderTextContent(Object(l.d)("Discover more streamers like <x:bold>{name}</x:bold>!", {
                                    name: this.props.data.channelDisplayName,
                                    "x:bold": h.j
                                }, "UpsellCenterText"), Object(l.d)("Sign up to see which channels we've picked just for you.", "UpsellCenterText"));
                            case i.Bullet:
                                return this.renderBulletPoints(Object(l.d)("Sign up to experience the best of <x:bold>{name}</x:bold>:", {
                                    name: this.props.data.channelDisplayName,
                                    "x:bold": h.j
                                }, "UpsellCenterText"), [Object(l.d)("Chat with other fans", "UpsellCenterText"), Object(l.d)("Capture your favorite moments", "UpsellCenterText"), Object(l.d)("Watch in Dark Mode!", "UpsellCenterText")]);
                            default:
                                return this.renderDefault()
                        }
                    }, t.prototype.renderDefault = function() {
                        return this.renderTextContent(Object(l.d)("Join the Twitch community!", "UpsellCenterText"), Object(l.d)("Discover the best live streams anywhere.", "UpsellCenterText"))
                    }, t.prototype.renderTextContent = function(e, t) {
                        return r.createElement(r.Fragment, null, r.createElement(v.W, {
                            color: v.O.Base,
                            fontSize: v.Ca.Size4
                        }, e), r.createElement(v.W, {
                            color: v.O.Alt2,
                            fontSize: v.Ca.Size5
                        }, t))
                    }, t.prototype.renderBulletPoints = function(e, t) {
                        var n = t.map(function(e, t) {
                            return r.createElement(v.Xa, {
                                key: "upsell-center-text-" + t,
                                display: v.X.Flex,
                                flexDirection: v.Aa.Row,
                                alignItems: v.f.Start
                            }, r.createElement(v.sb, {
                                type: v.ub.Alt2,
                                asset: v.tb.Check
                            }), r.createElement(v.Xa, {
                                margin: {
                                    left: 1
                                },
                                textAlign: v.Rb.Left
                            }, r.createElement(v.W, {
                                color: v.O.Alt2,
                                fontSize: v.Ca.Size6
                            }, e)))
                        });
                        return r.createElement(r.Fragment, null, r.createElement(v.W, {
                            color: v.O.Base,
                            fontSize: v.Ca.Size4
                        }, e), r.createElement(v.Xa, {
                            margin: {
                                top: 1
                            }
                        }, n))
                    }, t
                }(r.Component),
                C = n("2xye");
            ! function(e) {
                e.SideNav = "sidenav"
            }(f || (f = {})),
            function(e) {
                e.Upsell = "upsell"
            }(b || (b = {}));
            var y = n("Ve5Q"),
                E = (n("wqI2"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.impressionEventFired = !1, t.signup = function() {
                            ! function(e) {
                                var t = a.__assign({
                                    section: f.SideNav,
                                    click_subsection: b.Upsell
                                }, e);
                                l.o.track(C.SpadeEventType.ItemClick, t)
                            }(), t.props.signup()
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.trackImpression()
                    }, t.prototype.componentDidUpdate = function() {
                        this.trackImpression()
                    }, t.prototype.render = function() {
                        return r.createElement(v.Eb, {
                            background: v.r.AccentAlt2,
                            display: v.X.Flex,
                            flexDirection: v.Aa.Column,
                            padding: {
                                y: 2,
                                x: 1
                            },
                            margin: 1
                        }, this.renderImage(), r.createElement(v.Xa, {
                            textAlign: v.Rb.Center
                        }, this.renderText(), r.createElement(v.z, {
                            onClick: this.signup,
                            size: v.D.Large
                        }, r.createElement(v.Xa, {
                            padding: {
                                x: 1
                            }
                        }, r.createElement(v.W, {
                            color: v.O.Base
                        }, Object(l.d)("Sign up", "UpsellCenter"))))))
                    }, t.prototype.renderText = function() {
                        if (!this.props.channelLogin) return r.createElement(k, {
                            showDefault: !0
                        });
                        if (this.props.data && this.props.data.user) {
                            var e = {
                                game: this.props.data.user.broadcastSettings && this.props.data.user.broadcastSettings.game && this.props.data.user.broadcastSettings.game.displayName || "",
                                channelDisplayName: this.props.data.user.displayName || ""
                            };
                            return r.createElement(k, {
                                data: e
                            })
                        }
                    }, t.prototype.renderImage = function() {
                        var e = r.createElement(v.S, {
                            alt: Object(l.d)("Upsell Center", "UpsellCenter"),
                            src: d.a
                        });
                        return this.props.channelLogin && this.props.data && this.props.data.user && this.props.data.user.profileImageURL ? r.createElement(v.Xa, {
                            position: v.jb.Relative
                        }, r.createElement(v.Xa, {
                            className: "upsell-center__avatar",
                            position: v.jb.Absolute,
                            zIndex: v.ic.Above
                        }, r.createElement(v.q, {
                            src: this.props.data.user.profileImageURL,
                            alt: Object(l.d)("{displayName}'s Profile Image", {
                                displayName: this.props.data.user.displayName || ""
                            }, "UpsellCenter"),
                            borderRadius: v.x.Large,
                            size: 40
                        })), e) : e
                    }, t.prototype.trackImpression = function() {
                        this.impressionEventFired || (! function(e) {
                            var t = a.__assign({
                                section: f.SideNav
                            }, e);
                            l.o.track(C.SpadeEventType.ItemDisplay, t)
                        }(), this.impressionEventFired = !0)
                    }, t
                }(r.PureComponent));
            var S = Object(s.compose)(Object(u.a)(y, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin || ""
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(o.connect)(null, function(e) {
                    return Object(s.bindActionCreators)({
                        signup: function() {
                            return Object(p.g)(m.a.SideNavUpsellCenter)
                        }
                    }, e)
                }))(E),
                N = n("kRBY"),
                _ = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        return this.props.isLoggedIn || this.props.collapsed ? null : r.createElement(S, a.__assign({}, this.props))
                    }, t
                }(r.PureComponent);
            var O = Object(o.connect)(function(e) {
                return {
                    collapsed: !e.ui.sideNavExpanded,
                    isLoggedIn: Object(N.f)(e)
                }
            })(_);
            n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, !1, function() {
                return E
            }), n.d(t, !1, function() {
                return _
            }), n.d(t, "a", function() {
                return O
            })
        },
        cpJf: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }), n.d(t, "d", function() {
                    return r
                }), n.d(t, "c", function() {
                    return o
                }), n.d(t, "b", function() {
                    return a
                }),
                function(e) {
                    e.Chat = "stream_chat", e.Feeds = "feeds", e.Room = "chatroom", e.Whisper = "whisper", e.VodChat = "vod-chat"
                }(i || (i = {}));
            var a, r = {
                    TriHard: {
                        count: 196568036
                    },
                    Kappa: {
                        count: 192158118
                    },
                    "4Head": {
                        count: 155758710
                    },
                    PogChamp: {
                        count: 151485090
                    },
                    cmonBruh: {
                        count: 146352878
                    },
                    BibleThump: {
                        count: 56472964
                    },
                    WutFace: {
                        count: 45069031
                    },
                    Kreygasm: {
                        count: 41387580
                    },
                    DansGame: {
                        count: 38097659
                    },
                    hi5F: {
                        count: 34986404
                    },
                    SMOrc: {
                        count: 34734484
                    },
                    KappaPride: {
                        count: 34262839
                    },
                    VoHiYo: {
                        count: 27886434
                    },
                    SwiftRage: {
                        count: 24561900
                    },
                    ResidentSleeper: {
                        count: 24438298
                    },
                    EleGiggle: {
                        count: 19891526
                    },
                    FailFish: {
                        count: 19118343
                    },
                    NotLikeThis: {
                        count: 18802905
                    },
                    Keepo: {
                        count: 18351415
                    },
                    BabyRage: {
                        count: 18220906
                    },
                    MingLee: {
                        count: 18026207
                    },
                    pbfSSH: {
                        count: 16911241
                    },
                    forsenE: {
                        count: 14960299
                    },
                    HeyGuys: {
                        count: 14851569
                    },
                    ANELE: {
                        count: 14648986
                    },
                    PJSalt: {
                        count: 14438861
                    }
                },
                o = ["354", "49106", "4339", "48", "25", "55338", "70433", "1902", "68856", "81103", "76171", "27509"];
            ! function(e) {
                e.Web = "WEB", e.IOS = "IOS", e.Android = "ANDROID"
            }(a || (a = {}))
        },
        cr2a: function(e, t, n) {},
        cys1: function(e, t, n) {
            "use strict";
            var i = n("q1tI"),
                a = n("/7QA"),
                r = n("gvGA"),
                o = n("5zf8"),
                s = n("4rCz"),
                l = n("x0+1"),
                c = n("j0ar"),
                d = function(e) {
                    var t, n = e.emote,
                        a = n.alt || "";
                    return n.cheerAmount && (a += " " + n.cheerAmount.toString(), t = i.createElement("strong", {
                        className: "chat-line__message--cheer-amount",
                        style: {
                            color: n.cheerColor
                        }
                    }, n.cheerAmount)), i.createElement(c.a, {
                        alt: a,
                        cheerText: t,
                        className: "chat-line__message--emote",
                        srcKey: "1x",
                        srcSet: n.images
                    })
                };
            d.displayName = "Emote";
            var u, m = function(e) {
                    var t = e.displayText,
                        n = e.url;
                    return i.createElement("a", {
                        className: "link-fragment",
                        href: n,
                        target: "_blank",
                        rel: "noreferrer noopener"
                    }, t)
                },
                p = n("TSYQ"),
                h = n("RcPG"),
                g = (n("VN3V"), function(e) {
                    var t, n = e.content,
                        a = e.highlightType,
                        r = p("text-fragment", ((t = {})["text-fragment--moderated-highlight"] = a === h.a.ModeratedText, t));
                    return i.createElement("span", {
                        className: r,
                        "data-a-target": "chat-message-text"
                    }, n)
                }),
                f = n("mrSG"),
                b = n("yR8l"),
                v = n("+GjP"),
                k = n("2xye"),
                C = n("Ue10"),
                y = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            hasImageLoadingError: !1
                        }, t.handleImageError = function() {
                            t.setState({
                                hasImageLoadingError: !0
                            })
                        }, t
                    }
                    return f.__extends(t, e), t.prototype.componentWillReceiveProps = function() {
                        this.setState({
                            hasImageLoadingError: !1
                        })
                    }, t.prototype.render = function() {
                        var e = a.a.defaultStreamPreviewURL;
                        return !this.state.hasImageLoadingError && this.props.imageURL && (e = this.props.imageURL), i.createElement(C.I, {
                            aspect: C.p.Aspect16x9,
                            alt: this.props.altText,
                            src: e,
                            onError: this.handleImageError
                        })
                    }, t
                }(i.Component),
                E = (n("Epr8"), "https://static-cdn.jtvnw.net/emoticons/v1/58765/2.0"),
                S = {
                    ERROR: "chat-card-error",
                    TITLE: "chat-card-title",
                    DESCRIPTION: "chat-card-description"
                },
                N = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.renderErrorCard = function() {
                            var e = i.createElement("img", {
                                "data-test-selector": S.ERROR,
                                src: E,
                                className: "chat-card__error-img"
                            });
                            return t.renderCardContent(e, t.props.error)
                        }, t.renderCardContent = function(e, t) {
                            var n, a;
                            return t ? (n = i.createElement(C.W, {
                                type: C.Vb.Span,
                                fontSize: C.Ca.Size5,
                                "data-test-selector": S.TITLE,
                                title: t.title
                            }, t.title), a = i.createElement(C.W, {
                                type: C.Vb.Span,
                                fontSize: C.Ca.Size6,
                                color: C.O.Alt2,
                                "data-test-selector": S.DESCRIPTION
                            }, t.description)) : (e = i.createElement(C.ib, {
                                overlay: !0
                            }), n = i.createElement(C.ib, {
                                width: 180
                            }), a = i.createElement(C.ib, {
                                width: 120
                            })), i.createElement(C.Eb, {
                                background: C.r.Base,
                                display: C.X.Flex,
                                flexWrap: C.Ba.NoWrap,
                                padding: .5
                            }, i.createElement(C.Eb, {
                                className: "chat-card__preview-img",
                                background: C.r.Alt2,
                                display: C.X.Flex,
                                alignItems: C.f.Center,
                                justifyContent: C.Wa.Center,
                                flexShrink: 0
                            }, e), i.createElement(C.Xa, {
                                display: C.X.Flex,
                                alignItems: C.f.Center,
                                overflow: C.cb.Hidden
                            }, i.createElement(C.Xa, {
                                padding: {
                                    left: 1
                                },
                                fullWidth: !0
                            }, i.createElement(C.Xa, {
                                className: "chat-card__title",
                                ellipsis: !0
                            }, n), i.createElement(C.Xa, {
                                ellipsis: !0
                            }, a))))
                        }, t
                    }
                    return f.__extends(t, e), t.prototype.render = function() {
                        var e;
                        if (this.props.error) e = this.renderErrorCard();
                        else if (this.props.data) {
                            var t = Object(v.e)(this.props.data.contentURL, {
                                    tt_medium: k.PageviewMedium.Chat,
                                    tt_content: k.PageviewContent.ChatCard
                                }),
                                n = i.createElement(y, {
                                    altText: this.props.data.title,
                                    imageURL: this.props.data.previewImageURL
                                });
                            e = i.createElement(C.U, {
                                className: "chat-card__link",
                                to: t,
                                targetBlank: !0
                            }, this.renderCardContent(n, {
                                title: this.props.data.title,
                                description: this.props.data.description
                            }))
                        } else e = this.renderCardContent();
                        return i.createElement(C.Eb, {
                            elevation: 1,
                            margin: {
                                top: .5
                            }
                        }, e)
                    }, t
                }(i.Component),
                _ = n("SceP"),
                O = {
                    isTimedOut: !1
                },
                w = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = O, t.timeoutID = null, t
                    }
                    return f.__extends(t, e), t.prototype.componentDidMount = function() {
                        var e = this;
                        this.props.data.clip || (this.timeoutID = setTimeout(function() {
                            e.setState({
                                isTimedOut: !0
                            })
                        }, 5e3))
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        !this.props.data.clip && e.data.clip && (this.timeoutID && (clearTimeout(this.timeoutID), this.timeoutID = null), this.setState({
                            isTimedOut: !1
                        }))
                    }, t.prototype.render = function() {
                        var e = this.props.data,
                            t = e.clip,
                            n = e.error,
                            r = e.loading;
                        return n || this.state.isTimedOut ? i.createElement(N, {
                            error: {
                                title: Object(a.d)("Something went wrong", "ClipsChatCard"),
                                description: Object(a.d)("We couldn't find that Clip", "ClipsChatCard")
                            }
                        }) : r || !t ? i.createElement(N, null) : i.createElement(N, {
                            data: {
                                title: t.title || (t.broadcaster && t.broadcaster.displayName ? Object(a.d)("Clip of {broadcaster}", {
                                    broadcaster: t.broadcaster.displayName
                                }, "ClipsChatCard") : ""),
                                description: t.curator && t.curator.displayName ? Object(a.d)("Clipped by {curator}", {
                                    curator: t.curator.displayName
                                }, "ClipsChatCard") : "",
                                previewImageURL: t.thumbnailURL,
                                contentURL: t.url
                            }
                        })
                    }, t
                }(i.Component),
                M = Object(b.a)(_, {
                    options: function(e) {
                        return {
                            variables: {
                                slug: e.slug
                            },
                            notifyOnNetworkStatusChange: !0,
                            fetchPolicy: e.forceNetworkRequest ? "cache-first" : "cache-only"
                        }
                    }
                })(w),
                D = n("gTu3"),
                I = (n("lpj/"), (u = {})[D.a.Default] = "", u[D.a.Recipient] = "mention-fragment--recipient", u[D.a.Sender] = "mention-fragment--sender", u),
                T = function(e) {
                    var t = e.isAtMention ? "@" : "",
                        n = p("mention-fragment", I[e.currentUserMentionRelation]);
                    return i.createElement("span", {
                        className: n,
                        "data-a-target": "chat-message-mention"
                    }, "" + t + e.recipient)
                };
            T.displayName = "MentionFragment";
            var R = n("QVaV"),
                j = n("sU0Q"),
                A = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return f.__extends(t, e), t.prototype.render = function() {
                        var e = this.props.data,
                            t = e.video,
                            n = e.error,
                            r = e.loading;
                        if (n || t && !t.owner) return i.createElement(N, {
                            error: {
                                title: Object(a.d)("Something went wrong", "VideoChatCard"),
                                description: Object(a.d)("We couldn't find that video", "VideoChatCard")
                            }
                        });
                        if (r || !t) return i.createElement(N, null);
                        var o = i.createElement(C.W, null, Object(a.c)(new Date(t.publishedAt), "medium"), i.createElement("span", null, " · "), Object(R.a)(t.owner.login, t.owner.displayName));
                        return i.createElement(N, {
                            data: {
                                title: t.title,
                                description: o,
                                previewImageURL: t.previewThumbnailURL,
                                contentURL: this.props.url
                            }
                        })
                    }, t
                }(i.Component),
                U = Object(b.a)(j, {
                    options: function(e) {
                        return {
                            variables: {
                                videoID: e.id
                            },
                            notifyOnNetworkStatusChange: !0,
                            fetchPolicy: "cache-first"
                        }
                    }
                })(A),
                L = n("ZtEv");

            function B(e, t, n) {
                void 0 === n && (n = !1);
                var a = t.content,
                    r = a.displayText,
                    o = a.url;
                return n ? i.createElement(g, {
                    key: "message-span-" + e,
                    content: r
                }) : i.createElement(m, {
                    key: e,
                    displayText: r,
                    url: o
                })
            }

            function x(e, t) {
                void 0 === t && (t = {});
                var n = null,
                    a = e.reduce(function(a, o, s) {
                        var l = [];
                        switch (s > 0 && e[s - 1].type !== h.a.Text && o.type !== h.a.Text && l.push(" "), o.type) {
                            case h.a.Text:
                            case h.a.ModeratedText:
                                var c = o.content,
                                    u = o.type;
                                l.push(i.createElement(g, {
                                    key: s,
                                    content: c,
                                    highlightType: u
                                }));
                                break;
                            case h.a.CurrentUserHighlight:
                                l.push(i.createElement(T, {
                                    isAtMention: !1,
                                    currentUserMentionRelation: D.a.Recipient,
                                    recipient: o.content,
                                    key: s
                                }));
                                break;
                            case h.a.Mention:
                                l.push(i.createElement(T, {
                                    isAtMention: !0,
                                    currentUserMentionRelation: o.content.currentUserMentionRelation,
                                    recipient: o.content.recipient,
                                    key: s
                                }));
                                break;
                            case h.a.Emote:
                                l.push(i.createElement(d, {
                                    key: s,
                                    emote: o.content
                                }));
                                break;
                            case h.a.Link:
                                l.push(B(s, o, t.disableLinks));
                                break;
                            case h.a.ClipLink:
                                n || (n = i.createElement(r.a, {
                                    key: s
                                }, i.createElement(M, {
                                    slug: o.content.slug,
                                    forceNetworkRequest: t.forceClipsNetworkRequest
                                }))), l.push(B(s, o, t.disableLinks));
                                break;
                            case h.a.VideoLink:
                                n || (n = i.createElement(U, {
                                    key: s,
                                    id: o.content.id,
                                    url: o.content.url
                                })), l.push(B(s, o, t.disableLinks))
                        }
                        return a.concat(l)
                    }, []);
                return n && (a = a.concat(n)), a
            }

            function F(e) {
                if (e.moderationType === L.e.Delete) {
                    var t = e,
                        n = t.userLogin,
                        r = t.body;
                    return i.createElement(l.a, {
                        targetLogin: n,
                        messageBody: r
                    })
                }
                if ((e = e).moderationType === L.e.Ban) return e.reason ? i.createElement("span", {
                    className: "chat-line__moderation--ban-with-reason"
                }, Object(a.d)("{userLogin} has been banned. Reason: {reason}", {
                    userLogin: e.userLogin,
                    reason: e.reason
                }, "ChatLine")) : i.createElement("span", {
                    className: "chat-line__moderation--ban"
                }, Object(a.d)("{userLogin} is now banned from this channel.", {
                    userLogin: e.userLogin
                }, "ChatLine"));
                if (e.reason && e.duration) {
                    var o = Object(a.d)("{userLogin} has been timed out for {duration} seconds. Reason: {reason}", {
                        duration: e.duration,
                        reason: e.reason,
                        userLogin: e.userLogin
                    }, "ChatLine");
                    return i.createElement("span", {
                        className: "chat-line__moderation--timeout-with-reason"
                    }, o)
                }
                return e.duration ? i.createElement("span", {
                    className: "chat-line__moderation--timeout"
                }, Object(a.d)("{userLogin} has been timed out for {duration} seconds.", {
                    userLogin: e.userLogin,
                    duration: e.duration
                }, "ChatLine")) : void 0
            }

            function P(e) {
                var t = e.daysLeft;
                0 === t && (t = e.hoursLeft);
                var n = {
                    bitsTotal: i.createElement("strong", null, Object(s.f)(e.total, {
                        style: "currency",
                        currency: "USD"
                    })),
                    charityName: i.createElement("strong", null, e.charityName),
                    learnMoreURL: i.createElement("a", {
                        href: e.learnMore,
                        target: "_blank"
                    }, e.learnMore),
                    hashtag: i.createElement("strong", null, e.hashtag),
                    timeRemaining: Object(s.f)(t)
                };
                return i.createElement("span", null, 0 === e.daysLeft ? function(e) {
                    return Object(a.d)("{bitsTotal} total raised so far for {charityName}! {timeRemaining} more hours to show support. Cheer and include {hashtag}. Learn More at {learnMoreURL}", {
                        bitsTotal: e.bitsTotal,
                        charityName: e.charityName,
                        timeRemaining: e.timeRemaining,
                        hashtag: e.hashtag,
                        learnMoreURL: e.learnMoreURL
                    }, "ChatLine")
                }(n) : function(e) {
                    return Object(a.d)("{bitsTotal} total raised so far for {charityName}! {timeRemaining} more days to show support. Cheer and include {hashtag}. Learn More at {learnMoreURL}", {
                        bitsTotal: e.bitsTotal,
                        charityName: e.charityName,
                        timeRemaining: e.timeRemaining,
                        hashtag: e.hashtag,
                        learnMoreURL: e.learnMoreURL
                    }, "ChatLine")
                }(n))
            }

            function H(e) {
                var t = e.enabled ? Object(a.d)("This room is now in slow mode. You may send messages every {length} seconds.", {
                    length: e.length
                }, "ChatLine") : Object(a.d)("This room is no longer in slow mode.", "ChatLine");
                return i.createElement("span", null, t)
            }

            function W(e) {
                var t;
                if (e.length > 0) {
                    var n = e.join(", ");
                    t = Object(a.d)("The moderators of this channel are: {moderatorList}", {
                        moderatorList: n
                    }, "ChatLine")
                } else t = Object(a.d)("There are no moderators of this channel.", "ChatLine");
                return i.createElement("span", null, t)
            }

            function V(e) {
                if (e.enabled) {
                    var t = 0 === e.length ? Object(a.d)("This room is in followers-only mode.", "ChatLine") : Object(a.d)("This room is now in {length} followers-only mode.", {
                        length: Object(o.b)(60 * e.length)
                    }, "ChatLine");
                    return i.createElement("span", null, t)
                }
                return i.createElement("span", null, Object(a.d)("This room is no longer in followers-only mode.", "ChatLine"))
            }

            function G(e) {
                return e.enabled ? i.createElement("span", null, Object(a.d)("This room is now in emote-only mode.", "ChatLine")) : i.createElement("span", null, Object(a.d)("This room is no longer in emote-only mode.", "ChatLine"))
            }

            function X(e) {
                var t = e.enabled ? Object(a.d)("This room is now in subscriber-only mode.", "ChatLine") : Object(a.d)("This room is no longer in subscriber-only mode.", "ChatLine");
                return i.createElement("span", null, t)
            }

            function z(e) {
                return e.enabled ? i.createElement("span", null, Object(a.d)("r9k mode has been enabled for this room.", "ChatLine")) : i.createElement("span", null, Object(a.d)("r9k mode has been disabled for this room.", "ChatLine"))
            }

            function q(e) {
                return e.isAutohost ? Object(a.d)("{host} is now auto hosting you for up to {viewerCount, number} viewers.", {
                    host: e.hostingChannel,
                    viewerCount: e.viewerCount
                }, "ChatLine") : e.viewerCount <= 2 ? Object(a.d)("{host} is now hosting you.", {
                    host: e.hostingChannel
                }, "ChatLine") : Object(a.d)("{host} is now hosting you for up to {viewerCount, number} viewers.", {
                    host: e.hostingChannel,
                    viewerCount: e.viewerCount
                }, "ChatLine")
            }

            function Q(e) {
                var t = e.getHours() % 12;
                0 === t && (t = 12);
                var n = e.getMinutes(),
                    i = n.toString();
                return n < 10 && (i = "0" + i), t + ":" + i
            }

            function Y(e) {
                return i.createElement("span", {
                    key: "timestamp",
                    className: "chat-line__timestamp",
                    "data-a-target": "chat-timestamp",
                    "data-test-selector": "chat-timestamp"
                }, Q(new Date(e)))
            }

            function K(e) {
                return i.createElement("span", {
                    key: "timestamp",
                    className: "chat-line__timestamp",
                    "data-a-target": "chat-timestamp",
                    "data-test-selector": "chat-timestamp"
                }, function(e, t) {
                    void 0 === t && (t = {});
                    var n = a.p.intl.getLanguageCode() || "en";
                    return Intl.DateTimeFormat(n, t).format(e)
                }(new Date(e), {
                    hour: "numeric",
                    minute: "numeric"
                }))
            }
            n.d(t, "f", function() {
                return x
            }), n.d(t, "g", function() {
                return F
            }), n.d(t, "b", function() {
                return P
            }), n.d(t, "j", function() {
                return H
            }), n.d(t, "i", function() {
                return W
            }), n.d(t, "d", function() {
                return V
            }), n.d(t, "c", function() {
                return G
            }), n.d(t, "k", function() {
                return X
            }), n.d(t, "h", function() {
                return z
            }), n.d(t, "e", function() {
                return q
            }), n.d(t, "a", function() {
                return Q
            }), n.d(t, "l", function() {
                return Y
            }), n.d(t, "m", function() {
                return K
            })
        },
        dAHa: function(e, t, n) {
            "use strict";
            var i, a, r = n("mrSG"),
                o = n("q1tI"),
                s = n("/MKj"),
                l = n("fvjX"),
                c = n("/7QA"),
                d = n("yR8l"),
                u = n("BhFH"),
                m = n("iS14"),
                p = n("geRD"),
                h = n("f00E"),
                g = n("D7An"),
                f = n("DMoW"),
                b = n("2xye"),
                v = n("GnwI"),
                k = n("QVaV"),
                C = n("Ue10"),
                y = (n("MPK0"), "report-wizard-block"),
                E = "report-wizard-unblock",
                S = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            userBlocked: t.props.userBlocked || !1
                        }, t.renderBlock = function() {
                            return o.createElement(C.U, {
                                hoverUnderlineNone: !0,
                                onClick: t.handleBlock,
                                "data-test-selector": y
                            }, o.createElement(C.Xa, {
                                display: C.X.Flex,
                                alignItems: C.f.Center
                            }, o.createElement(C.sb, {
                                type: C.ub.Brand,
                                asset: C.tb.Ban
                            }), o.createElement(C.Xa, {
                                margin: {
                                    left: .5
                                }
                            }, Object(c.d)("Block {user}", {
                                user: t.displayName()
                            }, "ReportWizardBlockActions"))))
                        }, t.renderUnblock = function() {
                            return o.createElement(C.Xa, {
                                className: "reporting-wizard__block-actions",
                                display: C.X.Flex,
                                alignItems: C.f.Center
                            }, o.createElement(C.sb, {
                                type: C.ub.Success,
                                asset: C.tb.FollowCheck
                            }), o.createElement(C.Xa, {
                                margin: {
                                    right: 1
                                }
                            }, o.createElement(C.W, {
                                className: "block-user__success",
                                type: C.Vb.Span
                            }, Object(c.d)("{user} blocked", {
                                user: t.displayName()
                            }, "ReportWizardBlockActions"))), o.createElement(C.U, {
                                hoverUnderlineNone: !0,
                                onClick: t.handleUnblock,
                                "data-test-selector": E
                            }, o.createElement(C.Xa, {
                                margin: {
                                    left: .5
                                }
                            }, Object(c.d)("Unblock", "ReportWizardBlockActions"))))
                        }, t.handleBlock = function() {
                            return r.__awaiter(t, void 0, void 0, function() {
                                return r.__generator(this, function(e) {
                                    return this.props.onBlock(), this.setState({
                                        userBlocked: !0
                                    }), [2]
                                })
                            })
                        }, t.handleUnblock = function() {
                            t.props.onUnblock(), t.setState({
                                userBlocked: !1
                            })
                        }, t.displayName = function() {
                            var e = t.props.targetUser.displayName,
                                n = t.props.targetUser.login;
                            return e || (n || "")
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        var e = this.state.userBlocked ? this.renderUnblock() : this.renderBlock(),
                            t = Object(k.a)(this.props.targetUser.login, this.props.targetUser.displayName, !0);
                        return o.createElement(C.Eb, {
                            borderTop: !0,
                            padding: {
                                y: 1
                            },
                            margin: {
                                top: 1
                            }
                        }, o.createElement(C.Xa, null, Object(c.d)("Would you like to block {user}?", {
                            user: t
                        }, "ReportWizardBlockActions")), o.createElement(C.Eb, {
                            color: C.O.Alt2,
                            margin: {
                                y: 1
                            }
                        }, o.createElement(C.ec, {
                            baseFontSize: C.Ca.Size6
                        }, o.createElement("p", null, Object(c.d)("Blocking {user} will:", {
                            user: t
                        }, "ReportWizardBlockActions")), o.createElement("ul", null, o.createElement("li", null, Object(c.d)("Prevent them from sending you whispers", "ReportWizardBlockActions")), o.createElement("li", null, Object(c.d)("Prevent them from hosting you", "ReportWizardBlockActions")), o.createElement("li", null, Object(c.d)("Prevent them from adding you as a friend", "ReportWizardBlockActions")), o.createElement("li", null, Object(c.d)("Filter their messages out of chats you don’t moderate", "ReportWizardBlockActions"))))), o.createElement(C.Xa, {
                            margin: {
                                top: 1
                            }
                        }, e))
                    }, t
                }(o.Component);
            ! function(e) {
                e.BitsViolation = "bits_violation", e.ChatBanEvasion = "chat_ban_evasion", e.Cheating = "cheating", e.Gore = "gore", e.Harassment = "harassment", e.Harm = "harm", e.HatefulConduct = "hateful_conduct", e.Impersonation = "impersonation", e.Miscategorized = "miscategorized", e.OffensiveUsername = "offensive_username", e.Other = "other", e.Porn = "porn", e.Prohibited = "prohibited", e.SelfHarm = "selfharm", e.SexualContent = "sexual_content", e.SexualViolence = "sexual_violence", e.Spam = "spam", e.TosBanEvasion = "tos_ban_evasion", e.Underaged = "underaged"
            }(i || (i = {})),
            function(e) {
                e.Link = "link", e.MultipleChoice = "multiple choice", e.Text = "text", e.Textarea = "textarea"
            }(a || (a = {}));
            var N, _ = {
                    generalFilter: function() {
                        return Object(c.d)("I don't think their content or behavior is allowed on Twitch", "ReportModalWizard")
                    },
                    me: function() {
                        return Object(c.d)("Me", "ReportModalWizard")
                    },
                    someoneElse: function() {
                        return Object(c.d)("Someone else", "ReportModalWizard")
                    },
                    sexuallyCoercive: function() {
                        return Object(c.d)("acting in a sexually coercive or inappropriate way", "ReportModalWizard")
                    },
                    abusiveViolence: function() {
                        return Object(c.d)("They're threatening violence or physical harm", "ReportModalWizard")
                    },
                    commitingViolence: function() {
                        return Object(c.d)("They're committing acts of violence or physical harm", "ReportModalWizard")
                    },
                    threatening: function() {
                        return Object(c.d)("threatening, harming, or endangering someone", "ReportModalWizard")
                    },
                    abusive: function() {
                        return Object(c.d)("being hateful, harassing, or abusive", "ReportModalWizard")
                    }
                },
                O = {
                    input_description: {
                        getTitle: function() {
                            return Object(c.d)("Could you provide more detail about this issue? You may include links to videos, clips, and content outside Twitch.", "ReportModalWizard")
                        },
                        value: "description",
                        type: a.Textarea,
                        required: !0
                    },
                    input_link: {
                        getTitle: function() {
                            return Object(c.d)("If possible, please provide a link to show us where the issue occurred. Links that do not lead to the original source of the content may not be usable as evidence.", "ReportModalWizard")
                        },
                        rows: 2,
                        value: "external links",
                        type: a.Textarea
                    },
                    input_usernames: {
                        getTitle: function() {
                            return Object(c.d)("If you know the usernames of any other Twitch accounts that may be owned by this person, please list them in this space.", "ReportModalWizard")
                        },
                        value: "other usernames",
                        rows: 2,
                        type: a.Textarea
                    },
                    input_connection: {
                        getTitle: function() {
                            return Object(c.d)("Please describe how you connected the offsite content to this Twitch account.", "ReportModalWizard")
                        },
                        value: "offsite content connection",
                        type: a.Textarea
                    },
                    input_comments: {
                        getTitle: function() {
                            return Object(c.d)("If you have any other comments you would like to add, please do so here.", "ReportModalWizard")
                        },
                        value: "comments",
                        type: a.Textarea
                    },
                    input_identifyOwner: {
                        getTitle: function() {
                            return Object(c.d)("Please describe how you identified this person as the owner of this Twitch account.", "ReportModalWizard")
                        },
                        rows: 2,
                        value: "connect account owner",
                        type: a.Textarea
                    },
                    endBlurb_socialmedia: {
                        getTitle: function() {
                            return Object(c.d)("Please submit a report to the site or service where the incident occurred as well if you have not already done so.", "ReportModalWizard")
                        },
                        type: a.Text
                    },
                    endBlurb_threat: {
                        getTitle: function() {
                            return Object(c.d)("If you feel you are in immediate danger, please contact your local law enforcement.", "ReportModalWizard")
                        },
                        type: a.Text
                    },
                    endLink_selfharm: {
                        getTitle: function() {
                            return Object(c.d)("Learn more about mental health support", "ReportModalWizard")
                        },
                        value: "https://help.twitch.tv/customer/en/portal/articles/2904486-twitch-cares-mental-health-support-information",
                        type: a.Link
                    },
                    endLink_DMCA: {
                        getTitle: function() {
                            return Object(c.d)("View our DMCA Notification Guidelines", "ReportModalWizard")
                        },
                        value: "https://www.twitch.tv/p/legal/dmca-guidelines/",
                        type: a.Link
                    },
                    endLink_trademark: {
                        getTitle: function() {
                            return Object(c.d)("View our Trademark Policy", "ReportModalWizard")
                        },
                        value: "https://www.twitch.tv/p/legal/trademark-policy/",
                        type: a.Link
                    },
                    endLink_devAgreement: {
                        getTitle: function() {
                            return Object(c.d)("View our Developer Agreement", "ReportModalWizard")
                        },
                        value: "https://www.twitch.tv/p/legal/developer-agreement/",
                        type: a.Link
                    },
                    endLink_eventCoC: {
                        getTitle: function() {
                            return Object(c.d)("View our Events Code of Conduct", "ReportModalWizard")
                        },
                        value: "https://www.twitch.tv/p/legal/events-code-of-conduct",
                        type: a.Link
                    },
                    messaging_general: {
                        getTitle: _.generalFilter,
                        value: "general_messaging",
                        omitFromDescription: !0
                    },
                    profile_general: {
                        getTitle: _.generalFilter,
                        value: "general_profile",
                        omitFromDescription: !0
                    },
                    maliciousRaid: {
                        getTitle: function() {
                            return Object(c.d)("They're participating in a malicious raid", "ReportModalWizard")
                        },
                        value: "malicious raid",
                        reportReason: i.Harassment
                    },
                    violence: {
                        getTitle: function() {
                            return Object(c.d)("It contains threats, harm, or endangerment of someone", "ReportModalWizard")
                        },
                        value: "violence/threats",
                        reportReason: i.Harm
                    },
                    report_username: {
                        getTitle: function() {
                            return Object(c.d)("They're using an inappropriate or offensive username", "ReportModalWizard")
                        },
                        value: "inappropriate username",
                        reportReason: i.OffensiveUsername
                    },
                    report_emotes: {
                        getTitle: function() {
                            return Object(c.d)("The emotes are inappropriate or offensive", "ReportModalWizard")
                        },
                        value: "inappropriate emotes",
                        reportReason: i.Other
                    },
                    abusive: {
                        getTitle: function() {
                            return Object(c.d)("It's hateful, harassing, or abusive", "ReportModalWizard")
                        },
                        value: "abusive"
                    },
                    scam: {
                        getTitle: function() {
                            return Object(c.d)("It contains attempts to scam other community members", "ReportModalWizard")
                        },
                        value: "scam",
                        reportReason: i.Spam
                    },
                    emptyStream: {
                        getTitle: function() {
                            return Object(c.d)("There's nobody on the stream", "ReportModalWizard")
                        },
                        value: "empty stream"
                    },
                    impersonation: {
                        getTitle: function() {
                            return Object(c.d)("They're impersonating someone", "ReportModalWizard")
                        },
                        value: "impersonation",
                        reportReason: i.Impersonation
                    },
                    underage: {
                        getTitle: function() {
                            return Object(c.d)("They're underage (12 or younger)", "ReportModalWizard")
                        },
                        value: "underage",
                        reportReason: i.Underaged
                    },
                    report_ip: {
                        getTitle: function() {
                            return Object(c.d)("I think they're using copyrighted content, trademarks, or other intellectual property that's not theirs", "ReportModalWizard")
                        },
                        value: "intellectual property"
                    },
                    inappropriateContent: {
                        getTitle: function() {
                            return Object(c.d)("It's inappropriate or obscene", "ReportModalWizard")
                        },
                        value: "inappropriate content"
                    },
                    violateDevAgreement: {
                        getTitle: function() {
                            return Object(c.d)("I think they're violating Twitch's Developer Agreement", "ReportModalWizard")
                        },
                        value: "violating developer agreement"
                    },
                    revealPersonalInfo: {
                        getTitle: function() {
                            return Object(c.d)("They might have revealed someone's personal information", "ReportModalWizard")
                        },
                        value: "revealing personal info",
                        reportReason: i.Other
                    },
                    inappropriateBadge: {
                        getTitle: function() {
                            return Object(c.d)("Their emote or subscriber badge violates Twitch's Guidelines", "ReportModalWizard")
                        },
                        value: "emote/subscriber badge",
                        reportReason: i.Other
                    },
                    noModeration: {
                        getTitle: function() {
                            return Object(c.d)("They're not moderating their chat appropriately", "ReportModalWizard")
                        },
                        value: "not moderating chat",
                        reportReason: i.Other
                    },
                    inappropriateExtension: {
                        getTitle: function() {
                            return Object(c.d)("Their extension contains malicious or inappropriate content", "ReportModalWizard")
                        },
                        value: "inappropriate extension",
                        reportReason: i.Other
                    },
                    cheating: {
                        getTitle: function() {
                            return Object(c.d)("They're cheating in an online game", "ReportModalWizard")
                        },
                        value: "cheating",
                        reportReason: i.Cheating
                    },
                    bitsViolation: {
                        getTitle: function() {
                            return Object(c.d)("Their use of Bits goes against Twitch's Policy", "ReportModalWizard")
                        },
                        value: "bits violation",
                        reportReason: i.BitsViolation
                    },
                    video_labeling: {
                        getTitle: function() {
                            return Object(c.d)("Their content is labeled incorrectly", "ReportModalWizard")
                        },
                        value: "incorrect label",
                        reportReason: i.Miscategorized
                    },
                    video_inactive: {
                        getTitle: function() {
                            return Object(c.d)("The stream is inactive (sleeping/AFK)", "ReportModalWizard")
                        },
                        value: "inactive stream",
                        reportReason: i.Miscategorized
                    },
                    video_general: {
                        getTitle: _.generalFilter,
                        value: "general_video",
                        omitFromDescription: !0
                    },
                    hateSpeech: {
                        getTitle: function() {
                            return Object(c.d)("They're using hate speech, hateful symbols, or hateful media", "ReportModalWizard")
                        },
                        value: "hate speech",
                        reportReason: i.HatefulConduct
                    },
                    harassment: {
                        getTitle: function() {
                            return Object(c.d)("They're harassing or bullying someone", "ReportModalWizard")
                        },
                        value: "harassment",
                        reportReason: i.Harassment
                    },
                    abusiveViolence: {
                        getTitle: _.abusiveViolence,
                        value: "threatening violence",
                        reportReason: i.Harm
                    },
                    commitingViolence: {
                        getTitle: _.commitingViolence,
                        value: "committing violence",
                        reportReason: i.Harm
                    },
                    swatting: {
                        getTitle: function() {
                            return Object(c.d)("They're inciting or committing swatting or a DDOS attack", "ReportModalWizard")
                        },
                        value: "swatting/ddosing",
                        reportReason: i.Harassment
                    },
                    personalInfo: {
                        getTitle: function() {
                            return Object(c.d)("They're purposely revealing personal information", "ReportModalWizard")
                        },
                        value: "revealing personal info",
                        reportReason: i.Harassment
                    },
                    threat_me: {
                        getTitle: function() {
                            return Object(c.d)("At me", "ReportModalWizard")
                        },
                        value: "against me",
                        reportReason: i.Harm
                    },
                    threat_person: {
                        getTitle: function() {
                            return Object(c.d)("At someone else", "ReportModalWizard")
                        },
                        value: "against another person",
                        reportReason: i.Harm
                    },
                    threat_group: {
                        getTitle: function() {
                            return Object(c.d)("At a group of people", "ReportModalWizard")
                        },
                        value: "against group of people",
                        reportReason: i.Harm
                    },
                    threat_selfharm: {
                        getTitle: function() {
                            return Object(c.d)("They're threatening self-harm", "ReportModalWizard")
                        },
                        value: "selfharm"
                    },
                    inappropriate_game: {
                        getTitle: function() {
                            return Object(c.d)("The game isn't allowed on Twitch", "ReportModalWizard")
                        },
                        value: "prohibited game",
                        reportReason: i.Prohibited
                    },
                    sexuallyViolent: {
                        getTitle: function() {
                            return Object(c.d)("Violent sexual conduct", "ReportModalWizard")
                        },
                        value: "sexually violent",
                        reportReason: i.SexualViolence
                    },
                    childAnimal: {
                        getTitle: function() {
                            return Object(c.d)("Sexual conduct involving a child or animal", "ReportModalWizard")
                        },
                        value: "sexual conduct; child or animal",
                        reportReason: i.SexualViolence
                    },
                    pornographic: {
                        getTitle: function() {
                            return Object(c.d)("Sexually explicit or pornographic content", "ReportModalWizard")
                        },
                        value: "pornographic",
                        reportReason: i.SexualContent
                    },
                    gory: {
                        getTitle: function() {
                            return Object(c.d)("Extreme violence or gore", "ReportModalWizard")
                        },
                        value: "gory",
                        reportReason: i.Gore
                    },
                    suggestive: {
                        getTitle: function() {
                            return Object(c.d)("Sexually suggestive content", "ReportModalWizard")
                        },
                        value: "sexually suggestive",
                        reportReason: i.SexualContent
                    },
                    nudity: {
                        getTitle: function() {
                            return Object(c.d)("Full or partial nudity", "ReportModalWizard")
                        },
                        value: "nudity",
                        reportReason: i.SexualContent
                    },
                    other: {
                        getTitle: function() {
                            return Object(c.d)("There's something else wrong with it...", "ReportModalWizard")
                        },
                        value: "other",
                        reportReason: i.Other
                    },
                    evasion: {
                        getTitle: function() {
                            return Object(c.d)("They were banned or suspended and are trying to get around it (ban evasion)", "ReportModalWizard")
                        },
                        value: "ban evasion"
                    },
                    evasion_sitewide: {
                        getTitle: function() {
                            return Object(c.d)("A sitewide ban from Twitch", "ReportModalWizard")
                        },
                        value: "sitewide ban",
                        reportReason: i.TosBanEvasion
                    },
                    evasion_chat: {
                        getTitle: function() {
                            return Object(c.d)("A chat ban from one or more channels", "ReportModalWizard")
                        },
                        value: "chat ban",
                        reportReason: i.ChatBanEvasion
                    },
                    evasion_messaging: {
                        getTitle: function() {
                            return Object(c.d)("A block from messaging me", "ReportModalWizard")
                        },
                        value: "messaging block",
                        reportReason: i.ChatBanEvasion
                    },
                    impersonation_me: {
                        getTitle: _.me,
                        value: "impersonating me",
                        reportReason: i.Impersonation
                    },
                    impersonation_brand: {
                        getTitle: function() {
                            return Object(c.d)("Someone I represent, or a brand/company I work for", "ReportModalWizard")
                        },
                        value: "impersonating brand",
                        reportReason: i.Impersonation
                    },
                    impersonation_other: {
                        getTitle: _.someoneElse,
                        value: "impersonating someone else",
                        reportReason: i.Impersonation
                    },
                    selfharm: {
                        getTitle: function() {
                            return Object(c.d)("I'm concerned for their wellbeing", "ReportModalWizard")
                        },
                        value: "selfharm",
                        reportReason: i.SelfHarm
                    },
                    chat: {
                        getTitle: function() {
                            return Object(c.d)("In a stream chat message", "ReportModalWizard")
                        },
                        value: "chat"
                    },
                    profile: {
                        getTitle: function() {
                            return Object(c.d)("In the profile content, extensions, or emotes", "ReportModalWizard")
                        },
                        value: "profile"
                    },
                    video: {
                        getTitle: function() {
                            return Object(c.d)("In a live stream, video, or clip", "ReportModalWizard")
                        },
                        value: "video"
                    },
                    room: {
                        getTitle: function(e) {
                            return Object(c.d)("In one of {username}'s rooms", {
                                username: e
                            }, "ReportModalWizard")
                        },
                        value: "room"
                    },
                    whisper: {
                        getTitle: function() {
                            return Object(c.d)("In a whisper (private message)", "ReportModalWizard")
                        },
                        value: "whisper",
                        reportContext: f.N.WHISPER_REPORT
                    },
                    username: {
                        getTitle: function() {
                            return Object(c.d)("In the username", "ReportModalWizard")
                        },
                        value: "username",
                        reportReason: i.OffensiveUsername
                    },
                    report_other: {
                        getTitle: function() {
                            return Object(c.d)("Somewhere else...", "ReportModalWizard")
                        },
                        value: "somewhere else",
                        omitFromDescription: !0
                    },
                    video_streamer: {
                        getTitle: function() {
                            return Object(c.d)("The streamer or channel owner", "ReportModalWizard")
                        },
                        value: "streamer"
                    },
                    video_someoneElse: {
                        getTitle: function() {
                            return Object(c.d)("Someone else in the video", "ReportModalWizard")
                        },
                        value: "someone else in video"
                    },
                    video_chatSomeone: {
                        getTitle: function() {
                            return Object(c.d)("Someone in chat", "ReportModalWizard")
                        },
                        value: "someone in chat",
                        differentTarget: !0
                    },
                    report_channelOwner: {
                        getTitle: function() {
                            return Object(c.d)("The channel owner", "ReportModalWizard")
                        },
                        value: "channel owner"
                    },
                    report_member: {
                        getTitle: function() {
                            return Object(c.d)("Another community member", "ReportModalWizard")
                        },
                        value: "community member",
                        differentTarget: !0
                    },
                    location_onTwitch: {
                        getTitle: function() {
                            return Object(c.d)("On Twitch", "ReportModalWizard")
                        },
                        value: "on twitch"
                    },
                    location_anotherSite: {
                        getTitle: function() {
                            return Object(c.d)("On another site or service", "RpoertModalWizard")
                        },
                        value: "another site"
                    },
                    location_TwitchEvent: {
                        getTitle: function() {
                            return Object(c.d)("In person, at a Twitch event", "ReportModalWizard")
                        },
                        value: "twitch event"
                    },
                    external_incitingRaids: {
                        getTitle: function() {
                            return Object(c.d)("inciting brigading or malicious raids", "ReportModalWizard")
                        },
                        reportReason: i.Harassment,
                        value: "brigading/raids"
                    },
                    external_threatening: {
                        getTitle: _.threatening,
                        value: "threatening"
                    },
                    external_harassment: {
                        getTitle: _.abusive,
                        value: "hateful/harassing"
                    },
                    external_abusiveViolence: {
                        getTitle: _.abusiveViolence,
                        value: "external site; threatening violence",
                        reportReason: i.Harm
                    },
                    external_commitingViolence: {
                        getTitle: _.commitingViolence,
                        value: "external site; committing violence",
                        reportReason: i.Harm
                    },
                    conduct_impersonation: {
                        getTitle: function() {
                            return Object(c.d)("impersonating someone", "ReportModalWizard")
                        },
                        value: "impersonation",
                        reportReason: i.Impersonation
                    },
                    spam: {
                        getTitle: function() {
                            return Object(c.d)("They're spamming or spreading malicious links", "ReportModalWizard")
                        },
                        value: "spam",
                        reportReason: i.Spam
                    },
                    spam_bot: {
                        getTitle: function() {
                            return Object(c.d)("I think this is a bot account", "ReportModalWizard")
                        },
                        value: "bot"
                    },
                    spam_scam: {
                        getTitle: function() {
                            return Object(c.d)("They're trying to scam other community members or sending malicious links", "ReportModalWizard")
                        },
                        value: "scam or malicious links"
                    },
                    spam_repeated: {
                        getTitle: function() {
                            return Object(c.d)("They're sending repeated messages (spam)", "ReportModalWizard")
                        },
                        value: "repeat messages"
                    }
                },
                w = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onChange = function(e) {
                            var n = e.target,
                                i = n.name,
                                a = n.value;
                            t.props.onChangeText(i, a)
                        }, t.onSelect = function(e) {
                            if (t.props.currentCard.items && e.currentTarget.parentElement) {
                                var n = Number(e.currentTarget.parentElement.getAttribute("data-a-index")),
                                    i = t.props.currentCard.items[n];
                                t.props.onChangeRadio(i)
                            }
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        var e = this.props.currentCard.getDescription ? o.createElement(C.Xa, {
                            padding: {
                                bottom: 1
                            }
                        }, this.props.currentCard.getDescription()) : null;
                        return o.createElement(C.Xa, {
                            className: "reporting-wizard-card"
                        }, e, o.createElement(C.Ea, {
                            label: this.props.currentCard.getLabel ? this.props.currentCard.getLabel() : ""
                        }, this.renderCardItems()))
                    }, t.prototype.renderCardItems = function() {
                        var e = this,
                            t = this.props.currentCard,
                            n = [];
                        return t.items && t.type && (n = t.items.filter(function(e) {
                            return !!e
                        }).map(function(t, n) {
                            switch (t.type) {
                                case a.Text:
                                    return o.createElement(C.Xa, {
                                        key: n,
                                        padding: {
                                            bottom: 1
                                        }
                                    }, t.getTitle());
                                case a.Link:
                                    return o.createElement(C.Xa, {
                                        key: n,
                                        padding: {
                                            bottom: 1
                                        }
                                    }, o.createElement(C.U, {
                                        to: t.value,
                                        targetBlank: !0
                                    }, o.createElement(C.Xa, {
                                        display: C.X.Flex
                                    }, o.createElement(C.Xa, {
                                        display: C.X.Inline,
                                        padding: {
                                            right: .5
                                        }
                                    }, o.createElement(C.sb, {
                                        asset: C.tb.Document
                                    })), t.getTitle())));
                                case a.Textarea:
                                    var i = t.value ? e.props.userTextInputs[t.value] : void 0,
                                        r = t.required && (!i || !!i && 0 === i.trim().length);
                                    return o.createElement(C.Xa, {
                                        key: n,
                                        padding: {
                                            bottom: 1
                                        }
                                    }, o.createElement(C.Ea, {
                                        label: t.getTitle(),
                                        labelOptional: t.required ? "" : Object(c.d)("Optional", "ReportModalWizardCard")
                                    }, o.createElement(C.Sb, {
                                        onChange: e.onChange,
                                        rows: t.rows || 3,
                                        name: t.value,
                                        error: e.props.error && r,
                                        value: i,
                                        "data-test-selector": "report-wizard-textarea"
                                    })));
                                case a.MultipleChoice:
                                default:
                                    return o.createElement(C.Xa, {
                                        key: n,
                                        padding: {
                                            y: .5
                                        }
                                    }, o.createElement(C.pb, {
                                        checked: !!e.props.currentSelection && e.props.currentSelection.value === t.value,
                                        onChange: e.onSelect,
                                        label: t.getTitle(e.props.targetUser.displayName),
                                        "data-a-index": n,
                                        name: "card",
                                        value: t.value
                                    }))
                            }
                        })), n
                    }, t
                }(o.Component),
                M = n("RQ6e");
            ! function(e) {
                e.Confirm = "Confirm", e.MultipleChoice = "MultipleChoice", e.Info = "End Card"
            }(N || (N = {}));
            var D, I, T, R = {
                    contentGeneral: function() {
                        return Object(c.d)("What would you like to report?", "ReportModalWizard")
                    },
                    content: function() {
                        return Object(c.d)("What's wrong with this content?", "ReportModalWizard")
                    },
                    identifyUser: function() {
                        return Object(c.d)("Who do you want to report?", "ReportModalWizard")
                    },
                    thisPersonIs: function() {
                        return Object(c.d)("This person is...", "ReportModalWizard")
                    },
                    relevantStatements: function() {
                        return Object(c.d)("What would you like to report? (Please choose the most relevant statement that applies.)", "ReportModalWizard")
                    }
                },
                j = {
                    report: function(e) {
                        return Object(c.d)("Report {username}", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    reportVideo: function(e) {
                        return Object(c.d)("Report {username}'s Video", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    reportMessage: function(e) {
                        return Object(c.d)("Report {username}'s Message", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    reportProfile: function(e) {
                        return Object(c.d)("Report {username}'s Profile Or Other Content", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    reportAbusive: function(e) {
                        return Object(c.d)("Report {username} for Abusive Conduct", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    tellUsMore: function() {
                        return Object(c.d)("Tell Us More", "ReportModalWizard")
                    },
                    thanks: function() {
                        return Object(c.d)("Thanks for letting us know", "ReportModalWizard")
                    },
                    thanksConcern: function() {
                        return Object(c.d)("Thank you for your concern", "ReportModalWizard")
                    }
                },
                A = {
                    getDescription: function() {
                        return Object(c.d)("Reports are reviewed by Twitch Staff 24 hours a day. We will issue penalties, such as account suspension and/or content removal, once we verify that a violation of our policies has occurred.", "ReportModalWizard")
                    },
                    blockPrompt: !0,
                    getTitle: j.thanks,
                    type: N.Info,
                    value: "end card"
                },
                U = {
                    socialMedia: r.__assign({}, A, {
                        items: [O.endBlurb_socialmedia]
                    }),
                    violence: r.__assign({}, A, {
                        items: [O.endBlurb_threat]
                    }),
                    legal: {
                        getTitle: j.thanksConcern,
                        getDescription: function() {
                            return Object(c.d)("To submit a claim or report a violation of this type, you will need to follow the steps listed on the relevant page below.", "ReportModalWizard")
                        },
                        items: [O.endLink_DMCA, O.endLink_trademark, O.endLink_devAgreement],
                        type: N.Info,
                        value: "ip end"
                    },
                    selfharm: {
                        getTitle: j.thanksConcern,
                        getDescription: function() {
                            return Object(c.d)("If you know the user personally, and you believe them to be in danger, please contact their local authorities immediately. The link below contains some general information that may be of use.", "ReportModalWizard")
                        },
                        items: [O.endLink_selfharm],
                        type: N.Info,
                        value: "selfharm end"
                    },
                    twitchEvent: {
                        getTitle: j.thanksConcern,
                        getDescription: function() {
                            return Object(c.d)("Please bring this concern to the attention of staff or security at the event if you have not already done so. More information is available at the link below.", "ReportModalWizard")
                        },
                        items: [O.endLink_eventCoC],
                        value: "twitch event end",
                        type: N.Info
                    }
                },
                L = {
                    getTitle: j.report,
                    getLabel: function() {
                        return Object(c.d)("Where is the problem?", "ReportModalWizard")
                    },
                    items: [O.video, O.whisper, O.chat, O.room, O.profile, O.username, O.report_other],
                    type: N.MultipleChoice,
                    value: "content type"
                },
                B = {
                    identifyUser: {
                        getTitle: j.reportVideo,
                        getLabel: R.identifyUser,
                        items: [O.video_streamer, O.video_someoneElse, O.video_chatSomeone],
                        type: N.MultipleChoice,
                        value: "video identify user"
                    },
                    content: {
                        getTitle: j.reportVideo,
                        getLabel: R.contentGeneral,
                        items: [O.revealPersonalInfo, O.video_labeling, O.video_inactive, O.video_general, O.report_ip, O.violateDevAgreement, O.selfharm],
                        type: N.MultipleChoice,
                        value: "video report reason"
                    },
                    general: {
                        getTitle: j.reportVideo,
                        getLabel: R.content,
                        items: [O.report_username, O.violence, O.abusive, O.cheating, O.scam, O.inappropriateContent, O.evasion, O.impersonation, O.underage, O.bitsViolation],
                        type: N.MultipleChoice,
                        value: "video general report reason"
                    }
                },
                x = {
                    content: {
                        getTitle: j.reportMessage,
                        getLabel: R.contentGeneral,
                        items: [O.revealPersonalInfo, O.evasion, O.spam, O.maliciousRaid, O.report_username, O.messaging_general, O.selfharm],
                        type: N.MultipleChoice,
                        value: "message report reason"
                    },
                    general: {
                        getTitle: j.reportMessage,
                        getLabel: R.content,
                        items: [O.report_emotes, O.violence, O.abusive, O.inappropriateContent, O.impersonation, O.underage, O.bitsViolation],
                        type: N.MultipleChoice,
                        value: "message general report reason"
                    }
                },
                F = r.__assign({}, x.content, {
                    getDescription: function() {
                        return Object(c.d)("Please note that we may review additional messages in this conversation to determine the context of your report.", "ReportModalWizard")
                    }
                }),
                P = {
                    content: {
                        getTitle: j.reportProfile,
                        getLabel: R.contentGeneral,
                        items: [O.revealPersonalInfo, O.inappropriateBadge, O.inappropriateExtension, O.noModeration, O.profile_general, O.report_ip, O.violateDevAgreement, O.selfharm],
                        type: N.MultipleChoice,
                        value: "profile report reason"
                    },
                    general: {
                        getTitle: j.reportProfile,
                        getLabel: R.content,
                        items: [O.report_username, O.violence, O.abusive, O.scam, O.inappropriateContent, O.evasion, O.impersonation, O.underage, O.bitsViolation],
                        type: N.MultipleChoice,
                        value: "profile general report reason"
                    }
                },
                H = {
                    getTitle: function(e) {
                        return Object(c.d)("Report {username}'s Room", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    getLabel: R.identifyUser,
                    items: [O.report_channelOwner, O.report_member],
                    value: "room report user",
                    type: N.MultipleChoice
                },
                W = {
                    getTitle: j.tellUsMore,
                    items: [O.input_description],
                    type: N.Confirm,
                    value: "tell us more"
                },
                V = {
                    banEvasion: r.__assign({}, W, {
                        items: [O.input_usernames, O.input_description],
                        value: "ban evasion tell us more"
                    }),
                    socialMedia: r.__assign({}, W, {
                        items: [O.input_link, O.input_connection, O.input_description],
                        nextCard: U.socialMedia,
                        value: "social media tell us more"
                    })
                },
                G = {
                    content: {
                        getTitle: j.reportAbusive,
                        getLabel: R.relevantStatements,
                        items: [O.hateSpeech, O.harassment, O.abusiveViolence, O.commitingViolence, O.swatting, O.personalInfo],
                        type: N.MultipleChoice,
                        value: "abuse type"
                    },
                    violence: {
                        getTitle: function(e) {
                            return Object(c.d)("Report {username} for Violence or Threats", {
                                username: e
                            }, "ReportModalWizard")
                        },
                        getLabel: function() {
                            return Object(c.d)("Are the threats or actions directed at you or someone else?", "ReportModalWizard")
                        },
                        items: [O.threat_me, O.threat_person, O.threat_group, O.threat_selfharm],
                        type: N.MultipleChoice,
                        value: "violence type"
                    }
                },
                X = {
                    identifyLocation: {
                        getTitle: function(e) {
                            return Object(c.d)("Report {username} for something else...", {
                                username: e
                            }, "ReportModalWizard")
                        },
                        getLabel: function() {
                            return Object(c.d)("Where did the problem happen?", "ReportModalWizard")
                        },
                        items: [O.location_onTwitch, O.location_anotherSite, O.location_TwitchEvent],
                        type: N.MultipleChoice,
                        value: "off-site conduct location"
                    },
                    externalSite: {
                        getTitle: function(e) {
                            return Object(c.d)("Report {username}'s Conduct on Another Site or Service", {
                                username: e
                            }, "ReportModalWizard")
                        },
                        getLabel: R.thisPersonIs,
                        getDescription: function() {
                            return Object(c.d)("Please note that incidents reported through this form must involve Twitch community members. If possible, please submit a report to the site or service where the incident occurred as well.", "ReportModalWizard")
                        },
                        items: [O.external_incitingRaids, O.external_threatening, O.external_harassment],
                        type: N.MultipleChoice,
                        nextCard: V.socialMedia,
                        value: "external site conduct"
                    },
                    external_violence: r.__assign({}, G.violence, {
                        items: [O.threat_me, O.threat_person, O.threat_group],
                        nextCard: V.socialMedia
                    }),
                    external_abusive: r.__assign({}, G.content, {
                        items: [O.hateSpeech, O.harassment, O.external_abusiveViolence, O.external_commitingViolence, O.swatting, O.personalInfo],
                        nextCard: V.socialMedia
                    })
                },
                z = {
                    getTitle: function(e) {
                        return Object(c.d)("Report {username}'s Spam or Malicious Links", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    getLabel: R.contentGeneral,
                    items: [O.spam_bot, O.spam_scam, O.spam_repeated],
                    type: N.MultipleChoice,
                    value: "spam type"
                },
                q = {
                    getTitle: function(e) {
                        return Object(c.d)("Report {username} for Inappropriate Content", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    getLabel: R.relevantStatements,
                    items: [O.inappropriate_game, O.gory, O.sexuallyViolent, O.childAnimal, O.pornographic, O.suggestive, O.nudity, O.other],
                    type: N.MultipleChoice,
                    value: "inappropriate content type"
                },
                Q = {
                    getTitle: function(e) {
                        return Object(c.d)("Report {username} for Evading a Ban", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    getLabel: function() {
                        return Object(c.d)("What kind of ban are they evading?", "ReportModalWizard")
                    },
                    value: "ban type",
                    items: [O.evasion_chat, O.evasion_sitewide, O.evasion_messaging],
                    type: N.MultipleChoice,
                    nextCard: V.banEvasion
                },
                Y = {
                    getTitle: function(e) {
                        return Object(c.d)("Report {username} for Impersonation", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    getLabel: function() {
                        return Object(c.d)("Who is being impersonated?", "ReportModalWizard")
                    },
                    getDescription: function() {
                        return Object(c.d)("Parody, cosplay, and other portrayals without the intent to deceive or defraud are allowed under Twitch's Community Guidelines. If you would still like to submit a report, please continue.", "ReportModalWizard")
                    },
                    items: [O.impersonation_me, O.impersonation_brand, O.impersonation_other],
                    type: N.MultipleChoice,
                    value: "impersonation type"
                },
                K = L,
                $ = W,
                Z = A,
                J = {
                    video: B.identifyUser,
                    whisper: F,
                    chat: x.content,
                    profile: P.content,
                    room: H,
                    "somewhere else": X.identifyLocation,
                    streamer: B.content,
                    "someone else in video": B.content,
                    "someone in chat": x.content,
                    general_video: B.general,
                    general_messaging: x.general,
                    general_profile: P.general,
                    "channel owner": P.content,
                    "community member": x.content,
                    "on twitch": P.content,
                    "another site": X.externalSite,
                    "twitch event": U.twitchEvent,
                    "brigading/raids": V.socialMedia,
                    threatening: X.external_violence,
                    "hateful/harassing": X.external_abusive,
                    "external site; threatening violence": X.external_violence,
                    "external site; committing violence": X.external_violence,
                    "external site; scam": V.socialMedia,
                    "ban evasion": Q,
                    spam: z,
                    hateful: G.content,
                    impersonation: Y,
                    "violence/threats": G.violence,
                    "threatening violence": G.violence,
                    "committing violence": G.violence,
                    abusive: G.content,
                    "inappropriate content": q,
                    "intellectual property": U.legal,
                    "violating developer agreement": U.legal
                },
                ee = {
                    selfharm: U.selfharm,
                    harm: U.violence,
                    other: Z
                },
                te = {
                    CHANNEL_FEED_POST_REPORT: P.content,
                    COMMUNITY_REPORT: P.content,
                    CHAT_REPORT: x.content,
                    CLIP_REPORT: B.content,
                    EVENT_REPORT: P.content,
                    EXTENSION_REPORT: P.content,
                    LIVE_UP_REPORT: P.content,
                    ROOM_REPORT: H,
                    WHISPER_REPORT: F,
                    VOD_COMMENT_REPORT: x.content
                },
                ne = "report-wizard-back",
                ie = "report-wizard-close",
                ae = "report-wizard-next",
                re = "report-wizard-submit",
                oe = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            currentCard: t.props.currentCard || te[t.props.reportContentType] || K,
                            prevCards: [],
                            currentSelection: null,
                            prevSelections: [],
                            displacedSelections: [],
                            userTextInput: {},
                            error: "",
                            reportReason: t.props.reportReason || "",
                            modalCloseTracked: !1,
                            targetUnknown: !1,
                            reportContext: t.props.reportContentType
                        }, t.renderPrimer = function() {
                            return o.createElement(C.Xa, {
                                margin: {
                                    top: 1
                                }
                            }, o.createElement(C.W, null, Object(c.d)("We are going to ask you a few questions to help us investigate your report quickly and accurately.", "ReportModalWizard")))
                        }, t.renderButtons = function() {
                            var e = Object(c.d)("Close", "ReportModalWizard"),
                                n = t.handleClose,
                                i = ie,
                                a = !1,
                                r = t.state.prevCards.length ? t.renderBack() : null;
                            switch (t.state.currentCard.type) {
                                case N.MultipleChoice:
                                    e = Object(c.d)("Next", "ReportModalWizard"), n = t.handleNext, i = ae, a = !t.state.currentSelection;
                                    break;
                                case N.Confirm:
                                    e = Object(c.d)("Submit Report", "ReportModalWizard"), n = t.handleSubmit, a = !t.state.userTextInput, i = re
                            }
                            return o.createElement(C.Xa, null, r, o.createElement(C.z, {
                                onClick: n,
                                disabled: a,
                                "data-test-selector": i
                            }, o.createElement(C.Xa, {
                                padding: {
                                    x: 1
                                }
                            }, e)))
                        }, t.renderBack = function() {
                            return o.createElement(C.Xa, {
                                margin: {
                                    right: 1
                                },
                                display: C.X.InlineBlock
                            }, o.createElement(C.z, {
                                type: C.F.Hollow,
                                onClick: t.handleBack,
                                "data-test-selector": ne
                            }, o.createElement(C.Xa, {
                                padding: {
                                    x: 1
                                }
                            }, Object(c.d)("Back", "ReportModalWizard"))))
                        }, t.getTitle = function() {
                            return t.state.currentCard.getTitle && t.props.targetUser.displayName && t.props.targetUser.id ? t.state.targetUnknown ? t.state.currentCard.getTitle(Object(c.d)("Another User", "ReportModalWizard")) : t.state.currentCard.getTitle(t.props.targetUser.displayName) : t.state.targetUnknown ? Object(c.d)("Report User", "ReportModalWizard") : t.props.title
                        }, t.handleClose = function() {
                            t.setState({
                                modalCloseTracked: !0
                            }, function() {
                                return t.props.trackClose(T.Finish, t.state.currentCard.value)
                            }), t.props.onClose()
                        }, t.handleNext = function() {
                            if (t.state.currentSelection && t.state.currentSelection.value) {
                                var e = t.state.currentCard,
                                    n = t.state.prevCards.concat(e),
                                    i = t.state.prevSelections.concat(t.state.currentSelection),
                                    a = t.state.displacedSelections[t.state.displacedSelections.length - 1],
                                    r = t.state.currentSelection.differentTarget || t.state.targetUnknown,
                                    o = t.state.currentSelection.reportContext || t.state.reportContext,
                                    s = e.nextCard || $;
                                J[t.state.currentSelection.value] && (s = J[t.state.currentSelection.value]);
                                var l = t.state.currentSelection.reportReason || t.state.reportReason,
                                    c = s.type === N.Info;
                                t.setState({
                                    currentCard: s,
                                    reportReason: l,
                                    prevCards: c ? [] : n,
                                    prevSelections: i,
                                    targetUnknown: r,
                                    currentSelection: a || null,
                                    displacedSelections: t.state.displacedSelections.slice(0, -1),
                                    reportContext: o
                                }, function() {
                                    return t.trackNavigation(I.Next, e.value)
                                })
                            }
                        }, t.createReportDescription = function() {
                            return "" + (t.state.reportContext !== t.props.reportContentType ? "report context: " + t.props.reportContentType + "\n\n" : "") + t.state.prevSelections.map(function(e) {
                                if (!e.omitFromDescription) return e.value
                            }).filter(function(e) {
                                return !!e
                            }).join(" > ") + "\n\n" + Object.keys(t.state.userTextInput).map(function(e) {
                                return e + ": " + t.state.userTextInput[e]
                            }).join("\n")
                        }, t.requiredInputsNonEmpty = function() {
                            if (t.state.currentCard.items) return 0 === t.state.currentCard.items.filter(function(e) {
                                if (e.type !== a.Textarea || !e.required) return !1;
                                var n = t.state.userTextInput[e.value],
                                    i = n && 0 === n.trim().length;
                                return !n || i
                            }).length
                        }, t.handleSubmit = function() {
                            return r.__awaiter(t, void 0, void 0, function() {
                                var e, t, n, i, a = this;
                                return r.__generator(this, function(r) {
                                    switch (r.label) {
                                        case 0:
                                            return e = Object(c.d)("Additional information is required.", "ReportModalWizard"), this.requiredInputsNonEmpty() ? (t = this.state.reportReason || "other", n = this.createReportDescription(), [4, this.props.onSubmit(t, n, this.state.reportContext)]) : [3, 2];
                                        case 1:
                                            switch (r.sent(), this.props.submitStatus) {
                                                case M.a.FormError:
                                                    this.setState({
                                                        error: e
                                                    });
                                                    break;
                                                case M.a.Success:
                                                    i = Z, ee[t] && (i = ee[t]), this.state.currentCard.nextCard && (i = this.state.currentCard.nextCard), this.setState({
                                                        currentCard: i,
                                                        prevCards: [],
                                                        prevSelections: [],
                                                        currentSelection: null,
                                                        displacedSelections: [],
                                                        userTextInput: {},
                                                        error: ""
                                                    }, function() {
                                                        return a.trackNavigation(I.Submit)
                                                    });
                                                    break;
                                                case M.a.UserError:
                                                    this.setState({
                                                        error: Object(c.d)("This account could not be reported. It may have already been suspended, or the owner may have deleted it.", "ReportModalWizard")
                                                    });
                                                    break;
                                                case M.a.MutationError:
                                                default:
                                                    this.setState({
                                                        error: Object(c.d)("Sorry, a network error occurred when submitting your report. Please try again later.", "ReportModalWizard")
                                                    })
                                            }
                                            return [3, 3];
                                        case 2:
                                            this.props.onError(M.a.FormError), this.setState({
                                                error: e
                                            }), r.label = 3;
                                        case 3:
                                            return [2]
                                    }
                                })
                            })
                        }, t.handleBack = function() {
                            return r.__awaiter(t, void 0, void 0, function() {
                                var e, t, n, i, a, o = this;
                                return r.__generator(this, function(r) {
                                    return e = this.state.currentCard, t = this.state.prevCards[this.state.prevCards.length - 1], n = this.state.prevSelections[this.state.prevSelections.length - 1], i = !n.differentTarget && this.state.targetUnknown, a = this.state.displacedSelections, this.state.currentSelection && (a = a.concat(this.state.currentSelection)), t && n && this.setState({
                                        currentCard: t,
                                        currentSelection: n,
                                        displacedSelections: a,
                                        prevCards: this.state.prevCards.slice(0, -1),
                                        prevSelections: this.state.prevSelections.slice(0, -1),
                                        error: "",
                                        targetUnknown: i
                                    }, function() {
                                        return o.trackNavigation(I.Back, e.value)
                                    }), [2]
                                })
                            })
                        }, t.handleTextInput = function(e, n) {
                            var i = t.state.userTextInput;
                            i[e] = n, t.setState({
                                userTextInput: i
                            })
                        }, t.handleSelection = function(e) {
                            if (t.state.currentCard.items && e !== t.state.currentSelection) {
                                var n = t.state.targetUnknown;
                                if (n) n = 0 === t.state.displacedSelections.filter(function(e) {
                                    return e.differentTarget
                                }).length;
                                var i = t.state.reportContext;
                                (t.state.displacedSelections.filter(function(e) {
                                    return e.reportContext
                                }).length || t.state.currentSelection && t.state.currentSelection.reportContext) && (i = t.props.reportContentType), t.setState({
                                    currentSelection: e,
                                    displacedSelections: [],
                                    userTextInput: {},
                                    targetUnknown: n,
                                    reportContext: i
                                })
                            }
                        }, t.trackNavigation = function(e, n) {
                            t.props.trackAction(e, n, t.state.currentCard.value)
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.componentWillUnmount = function() {
                        this.state.modalCloseTracked || this.props.trackClose(T.Close, this.state.currentCard.value)
                    }, t.prototype.render = function() {
                        var e = this.state.currentCard.type === N.Info && this.state.currentCard.blockPrompt ? o.createElement(S, {
                                targetUser: this.props.targetUser,
                                onBlock: this.props.onBlock,
                                onUnblock: this.props.onUnblock,
                                userBlocked: this.props.userBlocked
                            }) : null,
                            t = this.state.error ? o.createElement(C.Eb, {
                                fullWidth: !0,
                                margin: {
                                    bottom: 1
                                },
                                padding: 1,
                                className: "reporting__error-container"
                            }, this.state.error) : null,
                            n = this.state.prevCards.length || this.state.currentCard.type === N.Info ? null : this.renderPrimer();
                        return o.createElement(C.Eb, {
                            className: "reporting-wizard",
                            display: C.X.Flex,
                            margin: {
                                x: 1
                            },
                            flexDirection: C.Aa.Column,
                            fullHeight: !0,
                            "data-test-card-value": this.state.currentCard.value
                        }, t, o.createElement(C.W, {
                            bold: !0,
                            fontSize: C.Ca.Size4
                        }, this.getTitle()), n, o.createElement(C.Xa, {
                            margin: {
                                y: 1
                            }
                        }, o.createElement(w, {
                            currentCard: this.state.currentCard,
                            currentSelection: this.state.currentSelection,
                            targetUser: this.props.targetUser,
                            targetUserID: this.props.targetUser.id,
                            onChangeRadio: this.handleSelection,
                            onChangeText: this.handleTextInput,
                            userTextInputs: this.state.userTextInput,
                            error: this.props.submitStatus === M.a.FormError && !!this.state.error
                        }), e), this.renderButtons())
                    }, t
                }(o.Component),
                se = n("s8Ou"),
                le = n("0hI/");
            n.d(t, "c", function() {
                    return I
                }), n.d(t, "a", function() {
                    return T
                }), n.d(t, "b", function() {
                    return de
                }),
                function(e) {
                    e.Close = "close", e.Open = "open", e.Submit = "submit_report", e.ToggleSettings = "modal_settings"
                }(D || (D = {})),
                function(e) {
                    e.Back = "back", e.Close = "close", e.Open = "open", e.Next = "next", e.Submit = "submit_report", e.ToggleSettings = "modal_settings"
                }(I || (I = {})),
                function(e) {
                    e.Close = "close", e.Finish = "finish"
                }(T || (T = {}));
            var ce = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.handleSubmit = function(e, t, i) {
                        return r.__awaiter(n, void 0, void 0, function() {
                            var n, a, o, s, l = this;
                            return r.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        if (n = i === f.N.WHISPER_REPORT ? i : this.props.reportContext.contentType, a = f.N[n], null === (o = {
                                                description: t,
                                                reason: e,
                                                content: a,
                                                contentID: this.props.reportContext.contentID,
                                                extra: this.props.reportContext.extra,
                                                targetID: this.props.data.targetUser.id
                                            }).targetID) return this.setState({
                                            submitStatus: M.a.UserError
                                        }), [2];
                                        r.label = 1;
                                    case 1:
                                        return r.trys.push([1, 3, , 4]), [4, this.props.reportUser(Object(p.a)(o))];
                                    case 2:
                                        return r.sent(), this.setState({
                                            submitStatus: M.a.Success
                                        }, function() {
                                            l.state.showWizard || l.trackAction(D.Submit)
                                        }), [3, 4];
                                    case 3:
                                        return s = r.sent(), c.k.error(s, "ReportUser Mutation failed."), this.setState({
                                            submitStatus: M.a.MutationError
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, n.handleChildError = function(e) {
                        return n.setState({
                            submitStatus: e
                        })
                    }, n.handleClose = function() {
                        n.props.onClose && n.props.onClose(n.state.submitStatus, n.state.userBlocked)
                    }, n.onBlock = function() {
                        n.props.blockUserMutation(n.props.data.targetUser.id, void 0, void 0, r.__assign({}, n.props.sessionUser, {
                            __typename: "User"
                        })), n.setState({
                            userBlocked: !0
                        })
                    }, n.onUnblock = function() {
                        n.props.unblockUserMutation(n.props.data.targetUser.id, r.__assign({}, n.props.sessionUser, {
                            __typename: "User"
                        })), n.setState({
                            userBlocked: !1
                        })
                    }, n.trackOpen = function(e) {
                        n.state.openEventSent || (n.state.showWizard ? n.trackWizardAction(I.Open, void 0, e) : n.trackAction(D.Open), n.setState({
                            openEventSent: !0
                        }))
                    }, n.trackClose = function(e, t) {
                        n.state.closeEventSent || (n.state.showWizard ? n.trackWizardAction(I.Close, t, void 0, e) : n.trackAction(D.Close), n.setState({
                            closeEventSent: !0
                        }))
                    }, n.trackWizardAction = function(e, t, i, a) {
                        c.p.tracking.track(b.SpadeEventType.ReportWizardFlowAction, {
                            ui_context: n.props.reportContext.contentType,
                            target_user_id: n.props.reportContext.targetUserID,
                            report_sent: n.state.submitStatus === M.a.Success,
                            modal_type: "wizard_v1",
                            extra_user_id: n.props.reportContext.additionalTrackingID,
                            action: e,
                            close_type: a,
                            report_session_id: n.reportID,
                            current_step: t,
                            navigated_to: i
                        })
                    }, n.trackAction = function(e) {
                        c.p.tracking.track(b.SpadeEventType.ReportFlowAction, {
                            ui_context: n.props.reportContext.contentType,
                            target_user_id: n.props.reportContext.targetUserID,
                            report_sent: n.state.submitStatus === M.a.Success,
                            extra_user_id: n.props.reportContext.additionalTrackingID,
                            action: e,
                            report_session_id: n.reportID
                        })
                    }, n.reportID = Object(h.a)();
                    var i = c.p.experiments.getAssignment(g.b.NewReportingWizard);
                    return n.state = {
                        submitStatus: M.a.Unsubmitted,
                        showWizard: "yes" === i,
                        openEventSent: !1,
                        closeEventSent: !1,
                        userBlocked: !1
                    }, n
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.trackOpen()
                }, t.prototype.componentWillUnmount = function() {
                    this.handleClose(), this.state.showWizard || this.trackClose()
                }, t.prototype.render = function() {
                    if (this.props.data.error) return o.createElement(C.Xa, {
                        margin: {
                            bottom: 1
                        }
                    }, o.createElement(C.W, {
                        fontSize: C.Ca.Size5
                    }, Object(c.d)("There was an unexpected error. Please refresh the page and try again", "ReportUser")));
                    if (this.props.data.loading) return o.createElement(C.ib, {
                        lineCount: 3
                    });
                    if (this.props.data.targetUser) {
                        var e = {
                            onClose: this.handleClose,
                            onError: this.handleChildError,
                            onSubmit: this.handleSubmit,
                            reportContentType: this.props.reportContext.contentType,
                            submitStatus: this.state.submitStatus,
                            title: this.props.title,
                            defaultDescription: this.props.defaultDescription
                        };
                        return this.state.showWizard ? this.props.data.loading ? o.createElement(C.Za, null) : o.createElement(oe, r.__assign({}, e, {
                            user: this.props.sessionUser,
                            onBlock: this.onBlock,
                            onUnblock: this.onUnblock,
                            targetUser: this.props.data.targetUser,
                            trackAction: this.trackWizardAction,
                            trackClose: this.trackClose,
                            userBlocked: this.userBlocked
                        })) : o.createElement(M.b, r.__assign({}, e, {
                            targetUser: this.props.data.targetUser
                        }))
                    }
                    return o.createElement(C.Xa, {
                        margin: {
                            bottom: 1
                        }
                    }, o.createElement(C.W, {
                        fontSize: C.Ca.Size5
                    }, Object(c.d)("The user you are trying to report does not exist", "ReportUser")))
                }, Object.defineProperty(t.prototype, "userBlocked", {
                    get: function() {
                        var e = this;
                        return !!(this.props.data.currentUser && this.props.data.currentUser.blockedUsers && this.props.data.currentUser.blockedUsers.find(function(t) {
                            return !!t && t.id === e.props.reportContext.targetUserID
                        }))
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(o.Component);
            var de = Object(l.compose)(Object(d.a)(se, {
                name: "reportUser"
            }), Object(d.a)(le, {
                options: function(e) {
                    return {
                        variables: {
                            targetUserID: e.reportContext.targetUserID
                        }
                    }
                }
            }), Object(v.b)("ReportUser", {
                autoReportInteractive: !0
            }), Object(u.a)(), Object(m.a)(), Object(s.connect)(function(e) {
                return {
                    sessionUser: e.session.user
                }
            }, null))(ce)
        },
        e7rh: function(e, t, n) {},
        eAdp: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "CreateVideoBookmark"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "CreateVideoBookmarkInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "createVideoBookmark"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "videoBookmark"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "error"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 140
                }
            };
            n.loc.source = {
                body: "mutation CreateVideoBookmark($input: CreateVideoBookmarkInput!) {\ncreateVideoBookmark(input: $input){\nvideoBookmark{\nid\n}\nerror {\ncode\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        ePeS: function(e, t, n) {
            "use strict";
            var i;

            function a(e) {
                switch (e) {
                    case "past":
                        return i.Past;
                    case "future":
                    default:
                        return i.Future
                }
            }
            n.d(t, "a", function() {
                    return i
                }), n.d(t, "b", function() {
                    return a
                }),
                function(e) {
                    e.Future = "future", e.Past = "past"
                }(i || (i = {}))
        },
        ecb7: function(e, t, n) {},
        efEE: function(e, t, n) {},
        f3GI: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return g
            }), n.d(t, "a", function() {
                return b
            });
            var i = n("mrSG"),
                a = n("TSYQ"),
                r = n("17x9"),
                o = n("q1tI"),
                s = n("wIs1"),
                l = n("N0BP"),
                c = n("zxEZ"),
                d = n("Bh3T"),
                u = n("JoTo"),
                m = n("cnlr"),
                p = n("sSlw"),
                h = n("Ue10"),
                g = (n("b7X6"), "channel-page-layout__scroll-area--theatre-mode"),
                f = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e, t = a(((e = {})[g] = !!this.props.theatreMode, e));
                        return o.createElement(h.Xa, i.__assign({
                            className: "channel-page-layout",
                            display: h.X.Flex,
                            flexDirection: h.Aa.Column,
                            flexWrap: h.Ba.NoWrap,
                            fullHeight: !0
                        }, Object(l.a)(this.props)), o.createElement(d.b, {
                            className: t,
                            suppressScrollX: !0,
                            addPaddingWhenPlayerIsPersisting: !0
                        }), o.createElement(u.a, null, o.createElement(m.a, {
                            channelLogin: this.props.ownerLogin
                        })), o.createElement(p.a, null, o.createElement(c.a, {
                            currentPage: this.props.currentPage,
                            channelLogin: this.props.ownerLogin,
                            channelIsHosting: this.props.channelIsHosting
                        })), o.createElement(h.Xa, {
                            padding: {
                                top: 2,
                                x: 3
                            }
                        }, this.props.children))
                    }, t.contextTypes = {
                        scrollToTop: r.func
                    }, t
                }(o.Component),
                b = Object(s.a)(f)
        },
        fKMw: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            });
            var i = n("mrSG"),
                a = n("yR8l"),
                r = n("sMoq");

            function o() {
                var e = this;
                return Object(a.a)(r, {
                    props: function(t) {
                        return {
                            vipUserMutation: function(n) {
                                return i.__awaiter(e, void 0, void 0, function() {
                                    return i.__generator(this, function(e) {
                                        switch (e.label) {
                                            case 0:
                                                return t.mutate ? [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            channelID: t.ownProps.channelID,
                                                            granteeLogin: n
                                                        }
                                                    }
                                                })] : [2];
                                            case 1:
                                                return [2, e.sent().data]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }
        },
        fQWD: function(e, t, n) {
            "use strict";
            var i = n("vHGB");
            n.d(t, "a", function() {
                return i.a
            })
        },
        fhkr: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "leaderboardItem"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "BitsLeaderboard"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "items"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "edges"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "cursor"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "node"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "entryKey"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "rank"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "score"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 106
                }
            };
            n.loc.source = {
                body: "fragment leaderboardItem on BitsLeaderboard {\nitems {\nedges {\ncursor\nnode {\nid\nentryKey\nrank\nscore\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        frkH: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Chat_DenyRejectedChatMessage"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "DenyRejectedChatMessageInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "denyRejectedChatMessage"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "message"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 138
                }
            };
            n.loc.source = {
                body: "mutation Chat_DenyRejectedChatMessage($input: DenyRejectedChatMessageInput!) {\ndenyRejectedChatMessage(input: $input) {\nmessage {\nid\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        g17B: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Chat_ChannelCheermotes"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "cheer"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "emotes"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "prefix"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "tiers"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "bits"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "color"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "images"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "id"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "url"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "theme"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "isAnimated"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "dpiScale"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }]
                                                            }
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "canCheer"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "canShowInBitsCard"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "type"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 207
                }
            };
            n.loc.source = {
                body: "query Chat_ChannelCheermotes($channelID: ID) {\nuser(id: $channelID) {\nid\ncheer {\nid\nemotes {\nprefix\ntiers {\nid\nbits\ncolor\nimages {\nid\nurl\ntheme\nisAnimated\ndpiScale\n}\ncanCheer\ncanShowInBitsCard\n}\ntype\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        gDzh: function(e, t, n) {},
        gIsd: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ReportUserModal_ReportReasons"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "content"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ReportContentType"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "reportReasons"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "content"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "content"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "text"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 114
                }
            };
            n.loc.source = {
                body: "query ReportUserModal_ReportReasons($content: ReportContentType!) {\nreportReasons(content: $content) {\nid\ntext\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        gMwc: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "VideoMarkersChatCommand"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "createdAt"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 115
                }
            };
            n.loc.source = {
                body: "query VideoMarkersChatCommand($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\nstream {\nid\ncreatedAt\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        gO1k: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Chat_DeleteChatMessage"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "DeleteChatMessageInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "deleteChatMessage"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "responseCode"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "message"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "sender"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "login"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "displayName"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "content"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "text"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 182
                }
            };
            n.loc.source = {
                body: "mutation Chat_DeleteChatMessage($input: DeleteChatMessageInput!) {\ndeleteChatMessage(input: $input) {\nresponseCode\nmessage {\nid\nsender {\nid\nlogin\ndisplayName\n}\ncontent {\ntext\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        gTu3: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }),
                function(e) {
                    e[e.Default = 0] = "Default", e[e.Recipient = 1] = "Recipient", e[e.Sender = 2] = "Sender"
                }(i || (i = {}))
        },
        gcd7: function(e, t, n) {
            "use strict";
            var i = n("/MKj"),
                a = n("fvjX"),
                r = n("+pBb"),
                o = n("mrSG"),
                s = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return o.__extends(t, e), t.prototype.componentWillMount = function() {
                        this.props.addCommand(this.props.command, this.props.handler)
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        this.props.command === e.command && this.props.handler === e.handler || (this.props.removeCommand(this.props.command, this.props.handler), this.props.addCommand(e.command, e.handler))
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.removeCommand(this.props.command, this.props.handler)
                    }, t.prototype.render = function() {
                        return null
                    }, t
                }(n("q1tI").PureComponent);
            var l = Object(i.connect)(null, function(e) {
                return Object(a.bindActionCreators)({
                    addCommand: r.x,
                    removeCommand: r.N
                }, e)
            })(s);
            n.d(t, "a", function() {
                return l
            })
        },
        gq0V: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return s
            }), n.d(t, "b", function() {
                return l
            });
            var i = n("q1tI"),
                a = n("/7QA"),
                r = n("5g1g"),
                o = n("wUQP"),
                s = function(e) {
                    var t = e.children;
                    return i.createElement(r.a, {
                        name: "vip_badge_gate"
                    }, t)
                },
                l = function() {
                    return o.a.On === a.b.get("vip_badge_gate", o.a.Off)
                }
        },
        i6WW: function(e, t, n) {
            "use strict";
            var i = n("/7QA"),
                a = n("RcPG"),
                r = new RegExp("(?:^|\\s)(?:https?://)?clips.twitch.tv/(\\w+)(?:/)?(\\w+)?(?:/edit)?(?:$|\\s)?"),
                o = new RegExp("(?:^|\\s)(?:https?:\\/\\/)?(?:www\\.)?twitch\\.tv\\/(\\w+)\\/clip\\/(\\w+)(?:$|\\s)?");
            var s = new RegExp("(?:^|\\s)(?:https?://)?(?:(?:www|go).)?twitch.tv/videos/(\\d+)(?:$|\\s)?");
            n.d(t, "a", function() {
                return c
            });
            var l = /^(?:(https?:\/\/)?((?:[\w#%\-+=:~]+\.)+[a-z]{2,8}(?:\/[\w./#%&()\-+=:?~]*)?))$/;

            function c(e, t) {
                var n = e.match(l);
                if (!n) return null;
                if (t.blockLinks) return {
                    type: a.a.Text,
                    content: " <" + Object(i.d)("deleted link", "CreateMessageData") + "> "
                };
                var c = n[1],
                    d = n[2],
                    u = "" + (c || "https://") + d;
                if (t.parseClips && function(e) {
                        void 0 === e && (e = "");
                        var t = r.test(e) && !e.includes("clips.twitch.tv/2017/"),
                            n = o.test(e);
                        return t || n
                    }(u)) {
                    var m = function(e) {
                        void 0 === e && (e = "");
                        var t = e.match(r);
                        if (t && t.length > 0 && void 0 !== t.index) return t[1];
                        var n = e.match(o);
                        return n && n.length > 0 && void 0 !== n.index ? n[2] : ""
                    }(u);
                    return {
                        type: a.a.ClipLink,
                        content: {
                            slug: m,
                            url: u,
                            displayText: e
                        }
                    }
                }
                if (t.parseVods && function(e) {
                        return void 0 === e && (e = ""), s.test(e)
                    }(u)) {
                    var p = function(e) {
                        void 0 === e && (e = "");
                        var t = e.match(s);
                        return null === t ? "" : t && t.length > 0 && void 0 !== t.index ? t[1] : ""
                    }(u);
                    return {
                        type: a.a.VideoLink,
                        content: {
                            id: p,
                            url: u,
                            displayText: e
                        }
                    }
                }
                return {
                    type: a.a.Link,
                    content: {
                        displayText: e,
                        url: u
                    }
                }
            }
        },
        iS14: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            });
            var i = n("mrSG"),
                a = n("yR8l"),
                r = n("8jSG"),
                o = n("cMjZ"),
                s = n("zixI");

            function l() {
                var e = this;
                return Object(a.a)(s, {
                    props: function(t) {
                        return {
                            unblockUserMutation: function(n, a) {
                                return i.__awaiter(e, void 0, void 0, function() {
                                    return i.__generator(this, function(e) {
                                        switch (e.label) {
                                            case 0:
                                                return t.mutate ? [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            targetUserID: n
                                                        }
                                                    },
                                                    optimisticResponse: {
                                                        unblockUser: {
                                                            __typename: "UnblockUserPayload",
                                                            targetUser: {
                                                                __typename: "User",
                                                                id: n
                                                            }
                                                        }
                                                    },
                                                    update: function(e) {
                                                        var t = e.readFragment({
                                                            id: Object(o.a)(a),
                                                            fragment: r
                                                        });
                                                        t && (t.blockedUsers = t.blockedUsers.filter(function(e) {
                                                            return null !== e && e.id !== n
                                                        }), e.writeFragment({
                                                            id: Object(o.a)(a),
                                                            fragment: r,
                                                            data: t
                                                        }))
                                                    }
                                                })] : [3, 2];
                                            case 1:
                                                return e.sent(), [3, 3];
                                            case 2:
                                                throw new Error("unblockUserMutation is not ready");
                                            case 3:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }
        },
        ifPV: function(e, t, n) {},
        ilCE: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "RaidUpsell_Channel"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "targetChannelLogin"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "sourceChannelLogin"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "targetChannel"
                            },
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "targetChannelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "sourceChannel"
                            },
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "sourceChannelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "viewersCount"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 240
                }
            };
            n.loc.source = {
                body: "query RaidUpsell_Channel($targetChannelLogin: String $sourceChannelLogin: String) {\ntargetChannel: user(login: $targetChannelLogin) {\nid\nlogin\ndisplayName\n}\nsourceChannel: user(login: $sourceChannelLogin) {\nid\nstream {\nid\nviewersCount\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        irYM: function(e, t, n) {
            "use strict";
            var i = n("/MKj"),
                a = n("fvjX"),
                r = n("1/iK"),
                o = n("y5D0"),
                s = n("kRBY"),
                l = n("mrSG"),
                c = n("q1tI"),
                d = n("/7QA"),
                u = n("yR8l"),
                m = n("geRD"),
                p = n("ug+5"),
                h = n("Ue10"),
                g = n("DXJk"),
                f = n("wSZZ"),
                b = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleButton = function(e) {
                            return e && (e.stopPropagation(), e.preventDefault()), t.toggleFollowing()
                        }, t
                    }
                    return l.__extends(t, e), t.prototype.render = function() {
                        var e = Object(d.d)("Remind Me", "FollowEvent"),
                            t = Object(d.d)("Reminder Set", "FollowEvent");
                        if (this.props.small) {
                            var n = e,
                                i = h.tb.Heart;
                            return this.props.areNotificationsEnabled && (n = t, i = h.tb.FollowCheck), c.createElement(h.Yb, {
                                label: n,
                                direction: this.props.tooltipDirection
                            }, c.createElement(h.A, {
                                size: h.B.Default,
                                icon: i,
                                onClick: this.handleButton,
                                ariaLabel: n
                            }))
                        }
                        return c.createElement(h.z, {
                            type: this.props.areNotificationsEnabled ? h.F.Success : h.F.Default,
                            onClick: this.handleButton,
                            icon: this.props.areNotificationsEnabled ? h.tb.FollowCheck : h.tb.Heart,
                            ariaLabel: this.props.areNotificationsEnabled ? t : e
                        }, this.props.areNotificationsEnabled ? t : e)
                    }, t.prototype.toggleFollowing = function() {
                        if (!this.props.isLoggedIn) return this.props.login();
                        this.props.areNotificationsEnabled ? this.triggerUnfollowMutation() : this.triggerFollowMutation(), Object(p.d)({
                            action: this.props.areNotificationsEnabled ? p.b.EmailReminderOff : p.b.EmailReminderOn,
                            channelLogin: this.props.channelLogin || "undefined",
                            channelID: this.props.channelID || "undefined",
                            eventID: this.props.eventID,
                            location: this.props.eventLocation
                        })
                    }, t.prototype.triggerFollowMutation = function() {
                        var e, t = {
                            eventID: this.props.eventID
                        };
                        e = "EventCollection" === this.props.eventTypename ? {
                            followEvent: {
                                __typename: "FollowEventPayload",
                                event: {
                                    __typename: "EventCollection",
                                    id: this.props.eventID,
                                    self: {
                                        __typename: "EventSelfConnection",
                                        isFollowing: !0
                                    }
                                }
                            }
                        } : {
                            followEvent: {
                                __typename: "FollowEventPayload",
                                event: {
                                    __typename: "EventLeaf",
                                    id: this.props.eventID,
                                    self: {
                                        __typename: "EventSelfConnection",
                                        isFollowing: !0
                                    }
                                }
                            }
                        };
                        var n = Object(m.b)(t, e);
                        this.props.followEvent(n)
                    }, t.prototype.triggerUnfollowMutation = function() {
                        var e, t = {
                            eventID: this.props.eventID
                        };
                        e = "EventCollection" === this.props.eventTypename ? {
                            unfollowEvent: {
                                __typename: "UnfollowEventPayload",
                                event: {
                                    __typename: "EventCollection",
                                    id: this.props.eventID,
                                    self: {
                                        __typename: "EventSelfConnection",
                                        isFollowing: !1
                                    }
                                }
                            }
                        } : {
                            unfollowEvent: {
                                __typename: "UnfollowEventPayload",
                                event: {
                                    __typename: "EventLeaf",
                                    id: this.props.eventID,
                                    self: {
                                        __typename: "EventSelfConnection",
                                        isFollowing: !1
                                    }
                                }
                            }
                        };
                        var n = Object(m.b)(t, e);
                        this.props.unfollowEvent(n)
                    }, t
                }(c.PureComponent),
                v = Object(a.compose)(Object(u.a)(g, {
                    name: "followEvent"
                }), Object(u.a)(f, {
                    name: "unfollowEvent"
                }))(b);
            var k = Object(i.connect)(function(e) {
                return {
                    isLoggedIn: Object(s.f)(e)
                }
            }, function(e) {
                return Object(a.bindActionCreators)({
                    login: function() {
                        return Object(o.e)(r.a.EventFollowButton)
                    }
                }, e)
            })(v);
            n.d(t, "a", function() {
                return k
            })
        },
        iyGE: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("yR8l"),
                r = n("Pub/"),
                o = n("HzXE"),
                s = 60,
                l = 60 * s,
                c = 24 * l,
                d = 7 * c,
                u = 4 * d;
            var m = n("4w0E");

            function p(e) {
                var t = this;
                return Object(a.a)(m, {
                    props: function(n) {
                        return {
                            banUserMutation: function(a, m, p) {
                                return void 0 === m && (m = null), void 0 === p && (p = null), i.__awaiter(t, void 0, void 0, function() {
                                    var t;
                                    return i.__generator(this, function(h) {
                                        switch (h.label) {
                                            case 0:
                                                if (t = e(n.ownProps).channelID, !n.mutate) return [3, 5];
                                                h.label = 1;
                                            case 1:
                                                return h.trys.push([1, 3, , 4]), [4, n.mutate({
                                                    variables: {
                                                        input: {
                                                            channelID: t,
                                                            bannedUserLogin: a,
                                                            expiresIn: m && function(e) {
                                                                if (!e) return "0s";
                                                                var t = e,
                                                                    n = "";
                                                                if (t > u) {
                                                                    var i = Math.floor(t / u);
                                                                    t -= i * u, n += i + "mo"
                                                                }
                                                                if (t > d) {
                                                                    var a = Math.floor(t / d);
                                                                    t -= a * d, n += a + "w"
                                                                }
                                                                if (t > c) {
                                                                    var r = Math.floor(t / c);
                                                                    t -= r * c, n += r + "d"
                                                                }
                                                                if (t > l) {
                                                                    var o = Math.floor(t / l);
                                                                    t -= o * l, n += o + "h"
                                                                }
                                                                if (t > s) {
                                                                    var m = Math.floor(t / s);
                                                                    t -= m * s, n += m + "m"
                                                                }
                                                                return t > 0 && (n += t + "s"), n
                                                            }(m),
                                                            reason: p
                                                        }
                                                    },
                                                    update: function(e, n) {
                                                        return function(e, t, n) {
                                                            if (t && t.data && t.data.banUserFromChatRoom && t.data.banUserFromChatRoom.ban && t.data.banUserFromChatRoom.ban.bannedUser && t.data.banUserFromChatRoom.ban.bannedUser.id) {
                                                                var a = Object(r.a)(e, n, t.data.banUserFromChatRoom.ban.bannedUser.id);
                                                                if (!a) return;
                                                                e.writeQuery({
                                                                    query: o,
                                                                    variables: {
                                                                        targetUserID: t.data.banUserFromChatRoom.ban.bannedUser.id,
                                                                        channelID: n
                                                                    },
                                                                    data: i.__assign({}, a, {
                                                                        chatRoomBanStatus: {
                                                                            isPermanent: t.data.banUserFromChatRoom.ban.isPermanent,
                                                                            __typename: "ChatRoomBanStatus"
                                                                        }
                                                                    })
                                                                })
                                                            }
                                                        }(e, n, t)
                                                    }
                                                })];
                                            case 2:
                                                return [2, h.sent().data];
                                            case 3:
                                                throw h.sent(), new Error("Unable to ban user");
                                            case 4:
                                                return [3, 6];
                                            case 5:
                                                throw new Error("Ban user mutation is not ready");
                                            case 6:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }
            n.d(t, "a", function() {
                return p
            })
        },
        "j+2s": function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChatList_Badges"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "badges"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "badge"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcastBadges"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "badge"
                                            },
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "selectedBadge"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "FragmentSpread",
                                                    name: {
                                                        kind: "Name",
                                                        value: "badge"
                                                    },
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "displayBadges"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "FragmentSpread",
                                                    name: {
                                                        kind: "Name",
                                                        value: "badge"
                                                    },
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 256
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery ChatList_Badges($channelLogin: String!) {\nbadges {\n...badge\n}\nuser(login: $channelLogin) {\nid\nbroadcastBadges {\n...badge\n}\nself {\nselectedBadge {\n...badge\n}\ndisplayBadges {\n...badge\n}\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var a = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !a[t] && (a[t] = !0, !0)
                })
            }(n("IKE4").definitions)), e.exports = i
        },
        j0ar: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("TSYQ"),
                r = n("q1tI"),
                o = n("x1M1"),
                s = n("Ue10"),
                l = (n("9KaG"), function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.onImageLoad = function() {
                            n.setState({
                                imageLoaded: !0
                            })
                        }, n.onMouseOver = function() {
                            n.setState({
                                isHovering: !0
                            })
                        }, n.onMouseOut = function() {
                            n.setState({
                                isHovering: !1
                            })
                        }, n.renderImage = function() {
                            var e = null,
                                t = a("chat-image", {
                                    "chat-image__animated": !!n.props.cheerText && n.state.imageLoaded
                                }, n.props.className);
                            if (n.props.srcSet.themed) e = r.createElement(s.Pa, {
                                display: n.state.imageLoaded ? s.X.InlineBlock : s.X.Hide
                            }, r.createElement(o.a, {
                                alt: n.props.alt,
                                className: t,
                                defaultRes: n.props.srcKey,
                                onLoad: n.onImageLoad,
                                onMouseOver: n.onMouseOver,
                                onMouseOut: n.onMouseOut,
                                sources: n.props.srcSet
                            }));
                            else {
                                for (var i = [], l = 0, c = Object.keys(n.props.srcSet.sources); l < c.length; l++) {
                                    var d = c[l];
                                    i.push(n.props.srcSet.sources[d] + " " + d)
                                }
                                e = r.createElement(s.Pa, {
                                    display: n.state.imageLoaded ? s.X.InlineBlock : s.X.Hide
                                }, r.createElement("img", {
                                    className: t,
                                    onLoad: n.onImageLoad,
                                    onMouseOver: n.onMouseOver,
                                    onMouseOut: n.onMouseOut,
                                    src: n.props.srcSet.sources[n.props.srcKey],
                                    srcSet: i.join(","),
                                    alt: n.props.alt
                                }))
                            }
                            return e
                        }, n.renderPlaceholder = function() {
                            return n.state.imageLoaded ? null : r.createElement(s.Pa, {
                                display: s.X.InlineBlock
                            }, r.createElement(s.W, {
                                type: s.Vb.Span,
                                className: "chat-image__placeholder",
                                align: s.fc.Top
                            }, r.createElement(s.ib, {
                                height: 28,
                                width: 28
                            })))
                        }, n.state = {
                            imageLoaded: !1,
                            isHovering: !1
                        }, n
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e;
                        return e = this.state.isHovering && this.state.imageLoaded ? r.createElement(s.Yb, {
                            direction: this.props.tooltipDirection || s.ac.Top,
                            label: this.props.alt,
                            display: s.X.Inline,
                            offsetY: "0.9rem",
                            "data-a-target": "emote-name"
                        }, this.renderPlaceholder(), this.renderImage(), this.props.cheerText) : r.createElement("span", {
                            "data-a-target": "emote-name"
                        }, this.renderPlaceholder(), this.renderImage(), this.props.cheerText), this.props.cheerText ? r.createElement(s.W, {
                            type: s.Vb.Span,
                            noWrap: !0
                        }, e) : e
                    }, t
                }(r.Component));
            n.d(t, "a", function() {
                return l
            })
        },
        jPLR: function(e, t, n) {},
        jeZI: function(e, t, n) {},
        kPBf: function(e, t) {},
        kPCN: function(e, t, n) {},
        kSkr: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "BlockUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "BlockUserInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "blockUser"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "targetUser"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 94
                }
            };
            n.loc.source = {
                body: "mutation BlockUser($input: BlockUserInput!) {\nblockUser(input: $input) {\ntargetUser {\nid\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        km1c: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("TSYQ"),
                r = n("q1tI"),
                o = n("oJmH"),
                s = n("/7QA"),
                l = n("ZS2+"),
                c = n("MJbm"),
                d = n("eJ65"),
                u = n("yR8l"),
                m = n("x7UT"),
                p = n("0Log"),
                h = n("/aPz"),
                g = n("D7An"),
                f = n("gOYK"),
                b = n("d2C5"),
                v = n("jSzL"),
                k = n("Ahlu"),
                C = n("/MKj"),
                y = n("fvjX"),
                E = n("aCAx"),
                S = n("7CzK"),
                N = n("94Uw"),
                _ = n("Ue10"),
                O = (n("/nm5"), n("41XU")),
                w = l.a.wrap(function() {
                    return n.e(144).then(n.bind(null, "7lJP"))
                }, "UserImageUploader"),
                M = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.openModal = function() {
                            var e = t.props.data && t.props.data.user;
                            e && e.id && e.login && t.props.showModal(w, {
                                userID: e.id,
                                login: e.login,
                                displayName: e.displayName || e.login,
                                imageType: N.a.ProfileBanner,
                                showCloser: !0,
                                successCallback: t.imageUploaded
                            })
                        }, t.imageUploaded = function() {
                            t.props.data && t.props.data.refetch()
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e, t, n = "channel-banner__image-default",
                            i = "channel-banner__header-type",
                            o = {
                                "channel-banner--open": !this.props.collapsed,
                                "channel-banner--side-nav": this.props.isSideNavBanner
                            },
                            l = {
                                "channel-banner__image--side-nav": this.props.isSideNavBanner
                            },
                            c = {
                                "channel-banner__edit-overlay-button--side-nav": this.props.isSideNavBanner
                            },
                            d = this.props.data;
                        d && !d.loading && this.props.firstPageLoaded && d.user && d.user.bannerImageURL ? (n = "channel-banner__image-loaded", t = {
                            backgroundImage: "url(" + d.user.bannerImageURL + ")"
                        }) : (l["channel-banner__image--default"] = !0, t = {
                            backgroundImage: "url(" + S + ")"
                        }), this.props.isSideNavBanner && (i = "channel-banner__side-nav-type");
                        var u = null;
                        if (this.props.canEdit) {
                            var m = this.props.isSideNavBanner ? r.createElement(_.Xa, {
                                display: _.X.Flex,
                                padding: {
                                    x: 3
                                },
                                justifyContent: _.Wa.Between,
                                fullWidth: !0
                            }, r.createElement(_.sb, {
                                asset: _.tb.Edit
                            }), r.createElement(_.W, null, Object(s.d)("Edit", "ChannelBanner"))) : r.createElement(_.Xa, null, r.createElement(_.Xa, null, r.createElement(_.sb, {
                                asset: _.tb.Edit
                            })), Object(s.d)("Update Profile Banner", "ChannelBanner"));
                            u = r.createElement(_.Eb, {
                                className: a("channel-banner__edit-overlay", c),
                                background: _.r.Overlay,
                                position: _.jb.Absolute,
                                attachTop: !0,
                                attachLeft: !0,
                                fullWidth: !0
                            }, r.createElement("button", {
                                className: "channel-banner__edit-overlay-button",
                                "data-test-selector": "channel-banner__edit-overlay-interactable",
                                onClick: this.openModal
                            }, r.createElement(_.Xa, {
                                display: _.X.Flex,
                                alignItems: _.f.Center,
                                flexDirection: _.Aa.Column,
                                justifyContent: _.Wa.Center
                            }, m)))
                        }
                        return e = r.createElement("div", {
                            className: a("channel-banner__image", l),
                            "data-test-selector": n,
                            style: t
                        }, u), r.createElement("div", {
                            className: a("channel-banner", o),
                            "data-test-selector": i,
                            onTransitionEnd: this.props.onTransitionEnd
                        }, r.createElement(_.Pa, {
                            fullWidth: !0,
                            fullHeight: !0
                        }, e))
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.closeModal()
                    }, t
                }(r.Component),
                D = Object(u.a)(O, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin || !e.firstPageLoaded
                    }
                })(M);
            var I, T = Object(C.connect)(function(e) {
                    return {
                        firstPageLoaded: e.session.firstPageLoaded
                    }
                }, function(e) {
                    return Object(y.bindActionCreators)({
                        closeModal: E.c,
                        showModal: E.d
                    }, e)
                })(D),
                R = n("tuvy"),
                j = n("i4un"),
                A = n("dIU+"),
                U = n("GnwI"),
                L = n("Ba7Q"),
                B = n("QjI3"),
                x = (n("BOil"), n("HXcb"));
            n.d(t, "a", function() {
                return X
            }), n.d(t, "b", function() {
                return z
            }), n.d(t, "d", function() {
                return H
            }), n.d(t, "c", function() {
                return Q
            });
            var F, P = l.a.wrap(function() {
                return n.e(145).then(n.bind(null, "g9Rq"))
            }, "EditProfileOverlay");
            ! function(e) {
                e.SocialButtonsDefault = "channel-header__social-buttons-default", e.SocialButtonsVariantB = "channel-header__social-buttons-variant-b"
            }(F || (F = {}));
            var H, W = "channel-header__edit-profile-overlay",
                V = "channel-header__verified-badge",
                G = "channel-header__live-indicator",
                X = "yes",
                z = "browser-notifications-upsell-seen";
            ! function(e) {
                e[e.Channel = 1] = "Channel", e[e.Clips = 2] = "Clips", e[e.Collections = 3] = "Collections", e[e.Events = 4] = "Events", e[e.Success = 5] = "Success", e[e.Followers = 6] = "Followers", e[e.Following = 7] = "Following", e[e.Videos = 8] = "Videos"
            }(H || (H = {}));
            var q = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.verifiedBadgeElement = r.createElement(_.Yb, {
                            label: Object(s.d)("Verified", "ChannelHeader"),
                            direction: _.ac.Right
                        }, r.createElement(_.Xa, {
                            className: "channel-header__verified",
                            "data-target": V,
                            display: _.X.Flex,
                            alignItems: _.f.Center,
                            margin: {
                                left: 1
                            }
                        }, r.createElement(_.sb, {
                            asset: _.tb.Verified
                        }))), n.ChannelStatusIndicatorElement = r.createElement(_.Xa, {
                            margin: {
                                left: 1
                            },
                            "data-target": G
                        }, r.createElement(_.Yb, {
                            label: Object(s.d)("Live Now", "ChannelHeader"),
                            direction: _.ac.Right
                        }, r.createElement(_.K, {
                            status: _.M.Live,
                            pulse: !0
                        }))), n.onResetOffline = function() {
                            n.resetOfflineTimer = void 0, n.setState({
                                live: !1
                            })
                        }, n.renderAvatarEditButton = function() {
                            return n.props.data && n.props.data.user && n.props.data.user.id && n.props.data.user.login && n.isChannelEditor() ? r.createElement(_.Eb, {
                                className: W,
                                background: _.r.Overlay,
                                position: _.jb.Absolute,
                                attachTop: !0,
                                attachLeft: !0,
                                fullHeight: !0,
                                fullWidth: !0,
                                display: _.X.InlineFlex,
                                alignItems: _.f.Center,
                                justifyContent: _.Wa.Center
                            }, r.createElement(P, {
                                userID: n.props.data.user.id,
                                login: n.props.data.user.login,
                                displayName: n.props.data.user.displayName || n.props.data.user.login
                            })) : null
                        }, n.toggleChannelBanner = function() {
                            n.setState(function(e) {
                                var t = !e.bannerSlideIn;
                                return t ? {
                                    bannerHidden: !e.bannerHidden,
                                    bannerSlideIn: t
                                } : {
                                    bannerSlideIn: t
                                }
                            })
                        }, n.completedBannerAnimation = function() {
                            n.setState(function(e) {
                                return e.bannerSlideIn ? e : {
                                    bannerHidden: !0
                                }
                            })
                        }, n.onUpdateDebounce = function() {
                            if (n.resizeAnimationFrame && (clearTimeout(n.resizeAnimationFrame), n.resizeAnimationFrame = null), n.channelHeader) {
                                var e = n.channelHeader.querySelector('[data-target="channel-header-left"]');
                                n.updateWidth(n.getWidth(e).width), n.resizeAnimationFrame = setTimeout(n.handleWindowResize, 0)
                            }
                        }, n.handleWindowResize = function() {
                            n.resizeAnimationFrame = null, n.getChannelHeaderSize()
                        }, n.maybeShowBrowserNotificationsUpsell = function() {
                            return i.__awaiter(n, void 0, void 0, function() {
                                return i.__generator(this, function(e) {
                                    switch (e.label) {
                                        case 0:
                                            return !s.m.get(z, !1) && Object(b.a)() && Object(v.c)() && s.p.experiments.getAssignment(g.b.BrowserNotificationsUpsell) === X ? [4, f.a.hasPushSubscription()] : [3, 3];
                                        case 1:
                                            return e.sent() ? [3, 3] : (s.m.set(z, !0), this.props.showBrowserNotificationsUpsellModal(), [4, f.a.userSubscribe(k.a.Channel)]);
                                        case 2:
                                            e.sent(), this.props.closeBrowserNotificationsUpsellModal(), e.label = 3;
                                        case 3:
                                            return [2]
                                    }
                                })
                            })
                        }, n.saveChannelHeaderRef = function(e) {
                            return n.channelHeader = e
                        }, n.toggleLiveNotificationsBtnShown = function(e) {
                            n.setState({
                                showLiveNotificationsButton: e
                            })
                        }, n.state = {
                            live: !1,
                            bannerHidden: !0,
                            bannerSlideIn: !1
                        }, n
                    }
                    return i.__extends(t, e), t.prototype.componentWillMount = function() {
                        this.setState({
                            live: this.isLiveGraphQL(this.props)
                        })
                    }, t.prototype.componentDidMount = function() {
                        window.addEventListener("resize", this.onUpdateDebounce), !this.props.data || this.props.data.loading || this.props.data.error || this.getChannelHeaderSize(), this.reportInteractive()
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        var t = this.props,
                            n = e.pubsub.messages.viewCount,
                            i = t.pubsub.messages.viewCount;
                        e.channelLogin !== t.channelLogin ? (this.clearResetOfflineTimer(), this.setState({
                            live: this.isLiveGraphQL(e),
                            showLiveNotificationsButton: void 0
                        })) : n && n !== i ? (this.clearResetOfflineTimer(), this.resetOfflineTimer = setTimeout(this.onResetOffline, 6e4), this.setState({
                            live: !0
                        })) : this.isLiveGraphQL(e) !== this.isLiveGraphQL(t) && (this.clearResetOfflineTimer(), this.setState({
                            live: this.isLiveGraphQL(e)
                        })), e.data && !e.data.loading && void 0 === this.state.showLiveNotificationsButton && this.setState({
                            showLiveNotificationsButton: this.getFollowingState(e)
                        })
                    }, t.prototype.componentDidUpdate = function() {
                        this.channelHeader && this.updateWidth(this.getWidth(this.channelHeader.querySelector('[data-target="channel-header-left"]')).width), this.onUpdateDebounce(), this.reportInteractive()
                    }, t.prototype.componentWillUnmount = function() {
                        this.clearResetOfflineTimer(), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame), window.removeEventListener("resize", this.onUpdateDebounce)
                    }, t.prototype.updateWidth = function(e) {
                        var t = e !== this.width || this.width !== this.prevWidth;
                        void 0 !== this.width && (this.prevWidth = this.width), this.width !== e && (this.width = e), t && (this.resizeAnimationFrame && (clearTimeout(this.resizeAnimationFrame), this.resizeAnimationFrame = null), this.onUpdateDebounce())
                    }, t.prototype.render = function() {
                        var e, t, n = 0,
                            i = 0,
                            o = 0,
                            l = s.a.defaultAvatarURL;
                        this.props.data && this.props.data.user && !this.props.data.loading && !this.props.data.error && (n = this.props.data.user.videos && this.props.data.user.videos.totalCount || 0, i = this.props.data.user.followers && this.props.data.user.followers.totalCount || 0, o = this.props.data.user.follows && this.props.data.user.follows.totalCount || 0, l = this.props.data.user.profileImageURL || s.a.defaultAvatarURL, e = this.props.data.user.displayName, t = this.props.data.user.roles && this.props.data.user.roles.isPartner);
                        var u, m = this.state.live && !this.isActiveTab(H.Channel),
                            p = this.createChannelLinks(n, i, o),
                            h = {
                                "channel-header__user": !0,
                                "channel-header__user--selected": this.isActiveTab(H.Channel)
                            },
                            g = r.createElement(_.Xa, {
                                display: _.X.Flex,
                                flexWrap: _.Ba.NoWrap,
                                alignItems: _.f.Center,
                                flexShrink: 0
                            }, r.createElement(_.Xa, {
                                className: "channel-header__user-avatar channel-header__user-avatar--active",
                                margin: {
                                    right: 1
                                },
                                display: _.X.Flex,
                                flexShrink: 0,
                                alignItems: _.f.Stretch
                            }, r.createElement(_.Xa, {
                                position: _.jb.Relative
                            }, r.createElement(_.q, {
                                size: 36,
                                src: l,
                                alt: e || ""
                            }), this.renderAvatarEditButton())), e ? r.createElement(_.W, {
                                type: _.Vb.H5
                            }, e) : r.createElement(_.Xa, {
                                alignItems: _.f.Center
                            }, r.createElement(_.ib, {
                                lineCount: 1,
                                width: 120
                            })), m && this.ChannelStatusIndicatorElement, t && this.verifiedBadgeElement);
                        u = this.isActiveTab(H.Channel) ? r.createElement("div", {
                            className: "channel-header__banner-toggle",
                            onClick: this.toggleChannelBanner,
                            "data-target": "channel-header__channel-link",
                            "data-a-target": "user-channel-header-item"
                        }, g) : this.props.channelLogin ? r.createElement(_.U, {
                            to: "/" + this.props.channelLogin || "#",
                            "data-target": "channel-header__channel-link",
                            "data-a-target": "user-channel-header-item",
                            hoverUnderlineNone: !0
                        }, g) : g;
                        var f = this.state.bannerHidden ? _.X.HideAccessible : _.X.Block,
                            b = null,
                            v = this.renderSocialButtons();
                        return this.isActiveTab(H.Channel) && (b = r.createElement(_.Xa, {
                            display: f
                        }, r.createElement(T, {
                            channelLogin: this.props.channelLogin,
                            canEdit: this.isChannelEditor(),
                            collapsed: !this.state.bannerSlideIn,
                            onTransitionEnd: this.completedBannerAnimation
                        }))), r.createElement(_.Xa, {
                            className: "channel-header",
                            flexShrink: 0
                        }, b, r.createElement(_.Xa, {
                            display: _.X.Flex,
                            justifyContent: _.Wa.Between,
                            flexWrap: _.Ba.NoWrap,
                            fullHeight: !0,
                            refDelegate: this.saveChannelHeaderRef,
                            margin: {
                                x: 3
                            }
                        }, r.createElement(_.Xa, {
                            display: _.X.Flex,
                            alignItems: _.f.Stretch,
                            flexShrink: 0,
                            flexWrap: _.Ba.NoWrap,
                            "data-target": "channel-header-left"
                        }, r.createElement(_.Pa, {
                            className: a(h),
                            padding: {
                                y: .5,
                                right: 2
                            },
                            display: _.X.Flex,
                            flexWrap: _.Ba.NoWrap,
                            alignItems: _.f.Center,
                            flexShrink: 0
                        }, u), this.renderTabs(p), r.createElement(_.Xa, {
                            className: "channel-header__item channel-header__item--no-underline",
                            padding: {
                                x: 1
                            },
                            flexShrink: 0,
                            alignSelf: _.g.Center,
                            "data-target": "channel-header-button"
                        }, r.createElement(d.a, {
                            alwaysMountBalloonContent: !0
                        }, r.createElement(_.A, {
                            icon: _.tb.NavMore,
                            ariaLabel: Object(s.d)("More", "ChannelHeader")
                        }), r.createElement(_.u, {
                            direction: _.v.Bottom,
                            noTail: !0
                        }, r.createElement(_.Xa, {
                            padding: {
                                y: 1
                            }
                        }, this.renderDropdown(p)))))), v), r.createElement(c.a, {
                            onResize: this.onUpdateDebounce
                        }))
                    }, t.prototype.isLiveGraphQL = function(e) {
                        if (e.data && e.data.user) return !!e.data.user.stream && "" !== e.data.user.stream.id
                    }, t.prototype.clearResetOfflineTimer = function() {
                        this.resetOfflineTimer && (clearTimeout(this.resetOfflineTimer), this.resetOfflineTimer = void 0)
                    }, t.prototype.generateUserLink = function(e) {
                        void 0 === e && (e = "");
                        var t = this.props.channelLogin;
                        return t ? "/" + t + "/" + e : "#"
                    }, t.prototype.renderTabs = function(e) {
                        var t = this;
                        return e.map(function(e) {
                            var n = e.count ? r.createElement(_.Xa, {
                                    className: "channel-header__item-count",
                                    display: _.X.Flex,
                                    margin: {
                                        left: .5
                                    }
                                }, r.createElement(_.W, {
                                    type: _.Vb.Span,
                                    fontSize: _.Ca.Size5
                                }, e.count)) : null,
                                i = t.generateUserLink(e.pathSuffix),
                                a = e.label.toLowerCase() + "-channel-header-item";
                            return r.createElement(_.Pa, {
                                key: "channel-header__item--" + e.label,
                                alignItems: _.f.Center,
                                flexShrink: 0
                            }, r.createElement(_.U, {
                                className: "channel-header__item channel-header__item--hide " + (e.isSelected ? "channel-header__item--selected" : ""),
                                to: i,
                                "data-target": "channel-header-item",
                                "data-a-target": a,
                                "data-test-selector": a,
                                hoverUnderlineNone: !0
                            }, r.createElement(_.Xa, {
                                padding: {
                                    x: 2,
                                    y: .5
                                },
                                display: _.X.Flex
                            }, r.createElement(_.W, {
                                type: _.Vb.Span,
                                fontSize: _.Ca.Size5
                            }, e.label), n)))
                        })
                    }, t.prototype.renderDropdown = function(e) {
                        var t = this;
                        return e.map(function(e) {
                            var n = e.count ? r.createElement(_.Xa, {
                                    className: "channel-header__item-count",
                                    display: _.X.Flex,
                                    margin: {
                                        left: .5
                                    }
                                }, r.createElement(_.W, {
                                    type: _.Vb.Span
                                }, e.count)) : null,
                                i = t.generateUserLink(e.pathSuffix);
                            return r.createElement(_.Xa, {
                                key: "channel-header__dropdown-item--" + e.label,
                                "data-target": "channel-header-dropdown-item"
                            }, r.createElement(_.Ua, {
                                linkTo: i,
                                disabled: "#" === i
                            }, r.createElement(_.Xa, {
                                className: "channel-header__dropdown-hover-target",
                                padding: {
                                    y: .5,
                                    x: 1
                                },
                                display: _.X.Flex
                            }, r.createElement(_.W, {
                                type: _.Vb.Span
                            }, e.label), n)))
                        })
                    }, t.prototype.createChannelLinks = function(e, t, n) {
                        var i = [{
                            label: Object(s.d)("Videos", "ChannelHeader"),
                            count: Object(s.f)(e),
                            pathSuffix: Object(R.b)() ? "videos" : "videos/all",
                            isSelected: this.isActiveTab(H.Videos)
                        }];
                        return Object(R.b)() || Object(R.a)() || (i = i.concat([{
                            label: Object(s.d)("Clips", "ChannelHeader"),
                            pathSuffix: "clips",
                            isSelected: this.isActiveTab(H.Clips)
                        }, {
                            label: Object(s.d)("Collections", "ChannelHeader"),
                            pathSuffix: "collections",
                            isSelected: this.isActiveTab(H.Collections)
                        }])), i.concat([{
                            label: Object(s.d)("Events", "ChannelHeader"),
                            pathSuffix: "events",
                            isSelected: this.isActiveTab(H.Events)
                        }, {
                            label: Object(s.d)("Followers", "ChannelHeader"),
                            count: Object(s.f)(t),
                            pathSuffix: "followers",
                            isSelected: this.isActiveTab(H.Followers)
                        }, {
                            label: Object(s.d)("Following", "ChannelHeader"),
                            count: Object(s.f)(n),
                            pathSuffix: "following",
                            isSelected: this.isActiveTab(H.Following)
                        }])
                    }, t.prototype.isActiveTab = function(e) {
                        return H[this.props.currentPage] === H[e]
                    }, t.prototype.isChannelEditor = function() {
                        return !!(this.props.data && this.props.data.currentUser && this.props.data.user && this.props.data.currentUser.roles && (this.props.data.currentUser.id === this.props.data.user.id || this.props.data.currentUser.roles.isStaff || this.props.data.currentUser.roles.isSiteAdmin))
                    }, t.prototype.getChannelHeaderSize = function() {
                        if (this.channelHeader) {
                            var e = this.channelHeader.querySelector('[data-target="channel-header-left"]'),
                                t = this.channelHeader.querySelector('[data-target="channel-header-right"]'),
                                n = this.channelHeader.querySelectorAll('[data-target="channel-header-item"]'),
                                i = this.channelHeader.querySelectorAll('[data-target="channel-header-dropdown-item"]');
                            if (n.length) {
                                for (var a = 0; a < n.length; a++) {
                                    var r = n[a];
                                    r.classList.contains("channel-header__item--hide") && (r.classList.remove("channel-header__item--hide"), i[a].classList.add("channel-header__item--hide"))
                                }
                                var o = this.getWidth(this.channelHeader).width,
                                    s = this.getWidth(e).width + this.getWidth(t).width + 20 - o,
                                    l = [];
                                if (s > 0) {
                                    var c = function(e) {
                                            var t = n[e];
                                            if (!t.classList.contains("channel-header__item--hide")) {
                                                var a = d.getWidth(t);
                                                if (l.push(function() {
                                                        t.classList.add("channel-header__item--hide"), i[e].classList.remove("channel-header__item--hide")
                                                    }), (s -= a.width) <= 0) return "break"
                                            }
                                        },
                                        d = this;
                                    for (a = n.length - 1; a >= 0; a--) {
                                        if ("break" === c(a)) break
                                    }
                                }
                                l.forEach(function(e) {
                                    return e()
                                });
                                var u = this.channelHeader.querySelector('[data-target="channel-header-button"]');
                                if (u) {
                                    var m = !this.channelHeader.querySelectorAll('[data-target="channel-header-item"].channel-header__item--hide').length;
                                    u.classList.toggle("channel-header__item--hide", m)
                                }
                            }
                        }
                    }, t.prototype.getWidth = function(e) {
                        return e ? {
                            width: e.clientWidth
                        } : {
                            width: 0
                        }
                    }, t.prototype.reportInteractive = function() {
                        !this.props.data || this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
                    }, t.prototype.renderSocialButtons = function() {
                        var e = this.getFollowingState(),
                            t = null,
                            n = F.SocialButtonsDefault;
                        if (Object(j.c)()) {
                            var i = a("channel-header__follow-btn", {
                                    "channel-header__follow-btn--following": !!this.state.showLiveNotificationsButton
                                }),
                                o = a("channel-header__notification-toggle-container", {
                                    "channel-header__notification-toggle-container--visible": !!this.state.showLiveNotificationsButton
                                });
                            n = F.SocialButtonsVariantB, t = r.createElement(r.Fragment, null, r.createElement(_.Xa, {
                                className: "channel-header__follow-btn-container",
                                display: _.X.Flex,
                                overflow: _.cb.Hidden,
                                alignItems: _.f.Center,
                                padding: {
                                    x: 1
                                },
                                fullHeight: !0
                            }, r.createElement(_.Xa, {
                                display: _.X.Flex,
                                justifyContent: _.Wa.Center,
                                flexDirection: _.Aa.Column,
                                margin: {
                                    right: 1
                                }
                            }, r.createElement(_.Xa, {
                                display: _.X.InlineFlex,
                                justifyContent: _.Wa.Center
                            }, r.createElement("div", {
                                className: i
                            }, r.createElement(A.a, {
                                updateContainerWidth: this.onUpdateDebounce,
                                channelLogin: this.props.channelLogin,
                                onFollow: this.maybeShowBrowserNotificationsUpsell,
                                followUIType: A.b.IconAndText,
                                unfollowUIType: A.b.IconOnly,
                                onToggleAnimationComplete: this.toggleLiveNotificationsBtnShown,
                                hideDropdownWhenFollowing: !0,
                                fullWidthButton: !0,
                                hollowIcons: !0,
                                animatedButton: !0,
                                useContextualModals: !0
                            })))), r.createElement("div", {
                                className: o
                            }, r.createElement(L.a, {
                                channelLogin: this.props.channelLogin,
                                toggleType: L.b.Button,
                                tabIndex: this.state.showLiveNotificationsButton ? 0 : -1,
                                followData: this.getFollowData(),
                                showTooltips: !0
                            }))), r.createElement(_.Xa, null, r.createElement(B.a, {
                                updateContainerWidth: this.onUpdateDebounce,
                                channelLogin: this.props.channelLogin,
                                hideEsportsSubscription: this.props.hideEsportsSubscription,
                                subscribedButtonType: _.F.Default,
                                unsubscribedButtonType: e ? _.F.Default : _.F.Hollow,
                                forceIcon: !0
                            })))
                        } else(this.props.channelIsHosting || Object(j.e)()) && (n = F.SocialButtonsDefault, t = r.createElement(r.Fragment, null, r.createElement(_.Xa, {
                            display: _.X.Flex,
                            alignItems: _.f.Stretch,
                            margin: {
                                left: 1
                            }
                        }, r.createElement(A.a, {
                            updateContainerWidth: this.onUpdateDebounce,
                            channelLogin: this.props.channelLogin,
                            onFollow: this.maybeShowBrowserNotificationsUpsell,
                            followUIType: A.b.IconAndText,
                            unfollowUIType: A.b.IconOnly,
                            useContextualModals: !0
                        })), r.createElement(_.Xa, {
                            margin: {
                                left: 1
                            }
                        }, r.createElement(B.a, {
                            updateContainerWidth: this.onUpdateDebounce,
                            channelLogin: this.props.channelLogin,
                            hideEsportsSubscription: this.props.hideEsportsSubscription
                        }))));
                        return r.createElement(_.Xa, {
                            display: _.X.Flex,
                            flexWrap: _.Ba.NoWrap,
                            flexShrink: 0,
                            alignItems: _.f.Center,
                            className: "channel-header__right",
                            "data-test-selector": n,
                            "data-target": "channel-header-right"
                        }, t)
                    }, t.prototype.getFollowingState = function(e) {
                        return void 0 === e && (e = this.props), !!(e.data && e.data.user && e.data.user.self && e.data.user.self.follower) && null !== e.data.user.self.follower.disableNotifications
                    }, t.prototype.getFollowData = function() {
                        if (this.props.data && this.props.data.user && this.props.data.user.id) return this.props.data.user
                    }, t
                }(r.Component),
                Q = Object(o.compose)(Object(u.a)(x, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(m.a)([{
                    topic: function(e) {
                        return e.channelLogin ? Object(h.J)(e.channelLogin) : ""
                    },
                    skip: function(e) {
                        return !e.channelLogin || !e.firstPageLoaded
                    },
                    mapMessageTypesToProps: (I = {}, I[p.PubsubMessageType.ViewCount] = "viewCount", I)
                }]), Object(U.b)("ChannelHeader"))(q)
        },
        "ky+Y": function(e, t, n) {},
        lNGo: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            });
            var i = n("mrSG"),
                a = n("/7QA"),
                r = n("2xye"),
                o = n("04j6"),
                s = n("oi4T"),
                l = function(e) {
                    return i.__awaiter(void 0, void 0, void 0, function() {
                        var t, n, l, c;
                        return i.__generator(this, function(d) {
                            switch (d.label) {
                                case 0:
                                    t = null, d.label = 1;
                                case 1:
                                    return d.trys.push([1, 3, , 4]), [4, a.p.apollo.client.query({
                                        query: o,
                                        variables: {
                                            id: e.channelID
                                        }
                                    })];
                                case 2:
                                    return t = d.sent(), [3, 4];
                                case 3:
                                    return n = d.sent(), a.k.error(n, "ChatEvent query failed."), [3, 4];
                                case 4:
                                    return t && t.data || a.k.warn("ChatEvent query failed; Chat tracking data sent may be incomplete."), l = t && t.data && t.data.user || null, c = i.__assign({}, Object(s.a)(e), {
                                        broadcast_id: a.o.getVideoPlayerTrackingData().broadcastID,
                                        channel_id: e.channelID,
                                        emote_picker_sid: e.emotePickerSessionID,
                                        game: l && l.stream && l.stream.game && l.stream.game.name,
                                        live: !!(l && l.stream && l.stream.id.length > 0),
                                        partner: l && l.isPartner || !1,
                                        play_session_id: a.o.getVideoPlayerTrackingData().playSessionID,
                                        player: e.player,
                                        ritual_nca: e.fromNewChatterRitual || !1,
                                        sub_only_mode: e.subOnlyMode
                                    }), a.o.track(r.SpadeEventType.Chat, c), [2]
                            }
                        })
                    })
                }
        },
        lZdE: function(e, t, n) {
            "use strict";

            function i(e) {
                return e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")
            }
            n.d(t, "a", function() {
                return i
            })
        },
        "lmt/": function(e, t, n) {
            "use strict";
            var i = n("f3GI");
            n.d(t, "a", function() {
                return i.a
            })
        },
        "lpj/": function(e, t, n) {},
        lw3P: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = n("yR8l"),
                a = n("ru7j");

            function r() {
                return Object(i.a)(a, {
                    props: function(e) {
                        return e.data && !e.data.loading && !e.data.error && e.data.currentUser && e.data.currentUser.blockedUsers ? {
                            blockedUsers: e.data.currentUser.blockedUsers.reduce(function(e, t) {
                                return t && t.id && e.push(t.id), e
                            }, [])
                        } : {
                            blockedUsers: []
                        }
                    },
                    skip: function(e) {
                        return !(e.isLoggedIn || e.authToken)
                    }
                })
            }
        },
        mBWp: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Whispers_Tracking_CurrentUser"
                    },
                    variableDefinitions: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "hasTurbo"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "availability"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 86
                }
            };
            n.loc.source = {
                body: "query Whispers_Tracking_CurrentUser {\ncurrentUser {\nid\nhasTurbo\navailability\nlogin\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        mSxK: function(e, t, n) {
            "use strict";
            var i = n("km1c"),
                a = n("/MKj"),
                r = n("fvjX"),
                o = n("aCAx"),
                s = n("wxwP");
            var l = Object(a.connect)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded
                }
            }, function(e) {
                return Object(r.bindActionCreators)({
                    showBrowserNotificationsUpsellModal: function() {
                        return Object(o.d)(s.a, {})
                    },
                    closeBrowserNotificationsUpsellModal: o.c
                }, e)
            })(i.c);
            n.d(t, "d", function() {
                return i.d
            }), n.d(t, !1, function() {}), n.d(t, "a", function() {
                return i.a
            }), n.d(t, "b", function() {
                return i.b
            }), n.d(t, "c", function() {
                return l
            })
        },
        mmRu: function(e, t, n) {
            "use strict";
            var i = n("/MKj"),
                a = n("mrSG"),
                r = n("q1tI"),
                o = n("u5aL"),
                s = n("/7QA"),
                l = n("Ue10"),
                c = function(e) {
                    return r.createElement(l.A, {
                        icon: l.tb.Emoticons,
                        ariaLabel: Object(s.d)("Emote picker", "EmotePickerButton"),
                        type: e.isActive ? l.C.Default : l.C.Secondary,
                        onClick: e.onClick,
                        "data-a-target": "emote-picker-button"
                    })
                },
                d = n("oJmH"),
                u = n("fvjX"),
                m = n("lZCe"),
                p = n("ZS2+"),
                h = n("yR8l"),
                g = n("x7UT"),
                f = n("Mj6i"),
                b = n("UUve"),
                v = n("1/iK"),
                k = n("aCAx"),
                C = n("D7An"),
                y = n("kRBY"),
                E = n("+pBb"),
                S = n("KriR"),
                N = n("GzyO"),
                _ = n("OpME"),
                O = n("cpJf"),
                w = n("W8Fi"),
                M = n("0WFu"),
                D = function(e, t) {
                    return t.map(function(t) {
                        return t.emotes && t.emoteSetID && !e.has(parseInt(t.emoteSetID, 10)) ? a.__assign({}, t, {
                            emotes: t.emotes.map(function(e) {
                                return a.__assign({}, e, {
                                    isLocked: !0
                                })
                            })
                        }) : t
                    }).map(function(e) {
                        return a.__assign({}, e, {
                            emotes: Object(_.e)(e.emotes, e.emoteSetID)
                        })
                    })
                },
                I = function(e) {
                    return e.tier && !isNaN(parseInt(e.tier, 10)) ? parseInt(e.tier, 10) / 1e3 : 1
                },
                T = n("GnwI"),
                R = n("br9A"),
                j = n("TSYQ"),
                A = n("8/mp"),
                U = n("8Ad5");

            function L(e) {
                return e.charCode === U.a.Enter || e.charCode === U.a.Space
            }
            var B, x = n("2xye"),
                F = n("7SjK"),
                P = n("4rCz"),
                H = (n("/Kya"), function(e) {
                    var t = {
                            "emote-picker__tab": !0
                        },
                        n = null,
                        i = null;
                    if (e.channelTabVisible) {
                        var o = j(a.__assign({}, t, {
                            "emote-picker__tab--active": e.channelTabEnabled && e.channelTabSelected,
                            "emote-picker__tab--disabled": !e.channelTabEnabled
                        }));
                        n = r.createElement(l.Pa, {
                            padding: {
                                x: 1
                            }
                        }, r.createElement("div", {
                            key: "ChannelTabLink",
                            id: "emote-picker__channel",
                            className: o,
                            onClick: e.channelTabEnabled ? e.selectChannelTab : void 0,
                            onKeyPress: e.channelTabEnabled ? e.selectChannelTabKeypress : void 0,
                            "data-a-target": "emote-channel-tab",
                            tabIndex: 0
                        }, r.createElement("span", null, Object(P.d)("Channel", "EmotePicker"))))
                    }
                    if (e.allTabVisible) {
                        var s = j(a.__assign({}, t, {
                            "emote-picker__tab--active": !(e.channelTabSelected && e.channelTabEnabled)
                        }));
                        i = r.createElement(l.Pa, {
                            padding: {
                                x: 1
                            }
                        }, r.createElement("div", {
                            key: "allTabLink",
                            id: "emote-picker__all",
                            className: s,
                            onClick: e.selectAllTab,
                            onKeyPress: e.selectAllTabKeypress,
                            "data-a-target": "emote-all-tab",
                            tabIndex: 0
                        }, r.createElement("span", null, Object(P.d)("All", "EmotePicker"))))
                    }
                    return r.createElement(l.Eb, {
                        background: l.r.Base,
                        borderTop: !0,
                        className: "emote-picker__tabs-container"
                    }, n, i)
                }),
                W = n("DnOo"),
                V = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        var e = [];
                        if (this.props.subscribeTexts)
                            for (var t = 0; t <= this.props.plan.level; t++) {
                                var n = this.props.subscribeTexts[t];
                                n && (t < this.props.plan.level ? (e.push(r.createElement("span", {
                                    key: "upsell-predicate:" + t
                                }, n)), e.push(r.createElement("span", {
                                    key: "upsell-plus:" + t
                                }, " + "))) : this.props.plan.level > 0 ? e.push(r.createElement("strong", {
                                    key: "upsell-strong-end:" + this.props.plan.level
                                }, n)) : e.push(r.createElement("span", {
                                    key: "upsell-end:" + t
                                }, n)))
                            }
                        if (!this.props.plan.emoteSetID) return null;
                        var i = {
                                id: this.props.plan.emoteSetID,
                                emotes: this.props.plan.emotes || []
                            },
                            a = {};
                        if (this.props.plan.tier) {
                            var o = Object(M.a)(this.props.plan.tier);
                            null === o && (o = 1), a.purchase = Object(s.d)("Tier { tierNum }", {
                                tierNum: o
                            }, "assembleSubscribeTexts")
                        }
                        return r.createElement(l.Xa, {
                            className: "emote-picker-plan-upsell",
                            display: l.X.Flex,
                            flexDirection: l.Aa.Column,
                            alignItems: l.f.Center,
                            margin: {
                                bottom: 1
                            }
                        }, r.createElement(F.a, {
                            emotes: i.emotes,
                            locked: !0
                        }), r.createElement(l.Xa, {
                            margin: 1,
                            alignItems: l.f.Center
                        }, e), r.createElement(W.a, {
                            isSubbedToTier: !1,
                            tierPrice: a.purchase || "",
                            handleSubAction: this.props.handleSubAction,
                            productName: this.props.plan.name,
                            url: this.props.plan.url,
                            isEsportChannel: this.props.isEsportChannel
                        }))
                    }, t
                }(r.Component),
                G = (n("JGCS"), function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.channelTabSelectionKeypress = function(e) {
                            L(e) && n.selectChannelTab(e)
                        }, n.allTabSelectionKeypress = function(e) {
                            L(e) && n.selectAllTab(e)
                        }, n.onClickEmote = function(e) {
                            if (n.props.onClickEmote) {
                                n.props.onClickEmote(e.displayName || e.token, e.id);
                                var t = {
                                    channel_id: n.props.channelID,
                                    chatroom_id: n.props.roomID,
                                    emote_picker_sid: n.props.emotePickerSessionID,
                                    emote_id: e.id,
                                    emoticon_set_id: e.setID,
                                    generated_by: n.props.emotePickerSource
                                };
                                s.o.track(x.SpadeEventType.EmotePickerClickthrough, t)
                            }
                        }, n.closeOnEsc = function(e) {
                            e.keyCode === U.a.Esc && n.props.toggleVisibility()
                        }, n.handleFilterChange = function(e) {
                            var t = e.target.value,
                                i = t.toLowerCase(),
                                a = n.filterAvailableUpsells(n.props.availableUpsells, i),
                                r = n.filterEmoteSets(n.props.ownedChannelEmoteSets, i);
                            n.setState({
                                filter: i,
                                filteredAllEmoteSets: n.filterEmoteSets(n.props.allEmoteSets, i),
                                filteredAvailableUpsells: a,
                                filteredOwnedChannelEmoteSets: r,
                                inputValue: t,
                                channelTabEnabled: r.length > 0 || a.length > 0
                            })
                        }, n.state = {
                            filter: "",
                            filteredOwnedChannelEmoteSets: t.ownedChannelEmoteSets,
                            filteredAvailableUpsells: t.availableUpsells,
                            filteredAllEmoteSets: t.allEmoteSets,
                            inputValue: "",
                            channelTabSelected: !0,
                            channelTabEnabled: t.ownedChannelEmoteSets.length > 0 || t.availableUpsells.length > 0
                        }, n.selectAllTab = function() {
                            return n.setChannelTabSelected(!1)
                        }, n.selectChannelTab = function() {
                            return n.setChannelTabSelected(!0)
                        }, n
                    }
                    return a.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        if (e.channelID && e.emotePickerSessionID && !this.props.emotePickerSessionID) {
                            var t = {
                                channel_id: e.channelID,
                                emote_picker_sid: e.emotePickerSessionID,
                                generated_by: e.emotePickerSource,
                                chatroom_id: e.roomID
                            };
                            s.o.track(x.SpadeEventType.ViewedEmotePicker, t)
                        }
                        if (!e.gqlError)
                            if (this.state.filter.length > 0) {
                                var n = this.filterAvailableUpsells(this.props.availableUpsells, this.state.filter),
                                    i = this.filterEmoteSets(this.props.ownedChannelEmoteSets, this.state.filter);
                                this.setState({
                                    filteredAllEmoteSets: this.filterEmoteSets(this.props.allEmoteSets, this.state.filter),
                                    filteredAvailableUpsells: n,
                                    filteredOwnedChannelEmoteSets: i,
                                    channelTabEnabled: i.length > 0 || n.length > 0
                                })
                            } else this.setState({
                                filteredOwnedChannelEmoteSets: e.ownedChannelEmoteSets,
                                filteredAvailableUpsells: e.availableUpsells,
                                filteredAllEmoteSets: e.allEmoteSets,
                                channelTabEnabled: e.ownedChannelEmoteSets.length > 0 || e.availableUpsells.length > 0
                            })
                    }, t.prototype.render = function() {
                        return r.createElement(l.u, {
                            "data-a-target": "emote-picker",
                            direction: this.props.direction ? this.props.direction : l.v.TopRight,
                            size: this.props.size ? this.props.size : l.w.Medium,
                            noTail: !0,
                            show: !0
                        }, r.createElement(l.Xa, {
                            className: j("emote-picker")
                        }, this.renderTabContent(), r.createElement(l.Xa, {
                            className: "emote-picker__controls-container",
                            position: l.jb.Relative
                        }, r.createElement(l.Eb, {
                            padding: 1,
                            borderTop: !0
                        }, r.createElement(l.Ra, {
                            autoFocus: !0,
                            onChange: this.handleFilterChange,
                            onKeyDown: this.closeOnEsc,
                            placeholder: Object(s.d)("Search for Emotes", "EmotePicker"),
                            type: l.Ta.Text,
                            value: this.state.inputValue
                        })), r.createElement(H, {
                            allTabVisible: this.props.allEmoteSets.length > 0,
                            channelTabEnabled: this.state.channelTabEnabled,
                            channelTabSelected: this.state.channelTabSelected,
                            channelTabVisible: !!this.props.channelTabVisible,
                            selectAllTab: this.selectAllTab,
                            selectAllTabKeypress: this.allTabSelectionKeypress,
                            selectChannelTab: this.selectChannelTab,
                            selectChannelTabKeypress: this.channelTabSelectionKeypress
                        }))))
                    }, t.prototype.renderTabContent = function() {
                        var e = this,
                            t = [];
                        if (this.props.gqlError) t.push(r.createElement(l.Xa, {
                            key: "emotePicker-error"
                        }, r.createElement(l.W, {
                            color: l.O.Error
                        }, Object(s.d)("Unable to load available emotes.", "EmotePicker"))));
                        else if (this.props.loading) t.push(r.createElement(l.Xa, {
                            alignItems: l.f.Center,
                            display: l.X.Flex,
                            key: "loading",
                            fullHeight: !0,
                            fullWidth: !0,
                            justifyContent: l.Wa.Center
                        }, r.createElement(l.Za, {
                            key: "LoadingSpinner"
                        })));
                        else if (this.state.channelTabEnabled && this.state.channelTabSelected) {
                            if (this.state.filteredOwnedChannelEmoteSets.length > 0) {
                                var n = this.state.filteredOwnedChannelEmoteSets[0].emotes.map(function(t) {
                                    return t.setID = e.state.filteredOwnedChannelEmoteSets[0].id, t
                                });
                                t.push(r.createElement(l.Xa, {
                                    className: "emote-picker__content-block",
                                    key: "ownedChannelEmoteSets",
                                    padding: 1,
                                    position: l.jb.Relative
                                }, r.createElement(F.a, {
                                    emotes: n,
                                    onClickEmote: this.onClickEmote
                                })))
                            }
                            t = t.concat(this.state.filteredAvailableUpsells.map(function(t) {
                                return r.createElement(l.Xa, {
                                    className: "emote-picker__content-block",
                                    key: "planUpsell:" + t.level,
                                    padding: 1,
                                    position: l.jb.Relative
                                }, r.createElement(V, {
                                    plan: t,
                                    isEsportChannel: e.props.isEsportChannel,
                                    subscribeTexts: e.props.subscribeTexts,
                                    handleSubAction: e.props.handleSubAction
                                }))
                            }))
                        } else t = this.state.filteredAllEmoteSets.map(function(t) {
                            var n = [];
                            return t.emotes.forEach(function(e) {
                                e.setID = t.id, n.push(e)
                            }), r.createElement(l.Xa, {
                                key: "emoteGrid" + t.id,
                                position: l.jb.Relative,
                                padding: {
                                    top: 1,
                                    bottom: 2
                                },
                                className: "emote-picker__content-block"
                            }, r.createElement(F.a, {
                                emotes: n,
                                onClickEmote: e.onClickEmote
                            }))
                        });
                        return t.length > 0 ? r.createElement(A.b, {
                            className: "emote-picker__tab-content"
                        }, r.createElement(l.Xa, {
                            padding: 1
                        }, t)) : null
                    }, t.prototype.filterEmoteSet = function(e, t) {
                        return e.filter(function(e) {
                            return e.token.toLowerCase().includes(t)
                        })
                    }, t.prototype.setChannelTabSelected = function(e) {
                        this.setState({
                            channelTabSelected: e
                        })
                    }, t.prototype.filterEmoteSets = function(e, t) {
                        for (var n = [], i = 0, a = e; i < a.length; i++) {
                            var r = a[i],
                                o = this.filterEmoteSet(r.emotes, t);
                            o.length > 0 && n.push({
                                id: r.id,
                                emotes: o
                            })
                        }
                        return n
                    }, t.prototype.filterAvailableUpsells = function(e, t) {
                        for (var n = [], i = 0, r = e; i < r.length; i++) {
                            var o = r[i];
                            if (o.emotes) {
                                var s = this.filterEmoteSet(o.emotes, t);
                                s.length > 0 && n.push(a.__assign({}, o, {
                                    emotes: s
                                }))
                            }
                        }
                        return n
                    }, t = a.__decorate([Object(T.b)("EmotePickerMenu", {
                        autoReportInteractive: !0
                    })], t)
                }(r.Component)),
                X = (n("zyUW"), function(e) {
                    var t = null;
                    return e.imgSrc && (t = r.createElement(r.Fragment, null, r.createElement(l.S, {
                        className: "emote-grid-section__header-image",
                        src: e.imgSrc,
                        alt: e.label
                    }), r.createElement(l.Xa, {
                        padding: {
                            right: .5
                        }
                    }))), r.createElement(l.Xa, {
                        position: l.jb.Relative,
                        padding: 1,
                        className: "emote-grid-section"
                    }, r.createElement(l.Eb, {
                        alignItems: l.f.Center,
                        display: l.X.Flex,
                        padding: {
                            x: 1,
                            bottom: .5
                        }
                    }, t, r.createElement(l.W, {
                        align: l.fc.Middle,
                        bold: !0,
                        color: l.O.Alt
                    }, e.label)), r.createElement(F.a, {
                        context: e.context,
                        emotes: e.emotes,
                        onClickEmote: e.onClickEmote,
                        spaced: !0
                    }))
                }),
                z = n("17x9"),
                q = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.checkVisible = function(e, n) {
                            t.props.checkVisible(e, n)
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.unregister = this.context.registerReceiver(this)
                    }, t.prototype.componentWillUnmount = function() {
                        this.unregister && this.unregister()
                    }, t.prototype.render = function() {
                        return r.createElement(r.Fragment, null, this.props.children)
                    }, t.contextTypes = {
                        registerReceiver: z.func
                    }, t
                }(r.Component),
                Q = (n("cr2a"), function(e) {
                    return r.createElement(l.Xa, {
                        className: "emote-picker-tab-item " + (e.isActive ? "emote-picker-tab-item--active" : ""),
                        position: l.jb.Relative
                    }, r.createElement(l.Ua, {
                        "data-a-target": e.label,
                        onClick: e.onClick
                    }, r.createElement(l.Xa, {
                        padding: 1,
                        display: l.X.InlineFlex
                    }, r.createElement(l.sb, {
                        asset: e.icon
                    }))))
                }),
                Y = n("a5fV"),
                K = (n("GLn2"), function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        var e = this,
                            t = this.props.channelSubscriptionProducts.find(function(t) {
                                return !!t.emotes.find(function(t) {
                                    return e.props.subUpsellClickedEmote.id === t.id
                                })
                            }),
                            n = this.props.channelSubscriptionProducts.filter(function(e) {
                                return !e.emotes.find(function(e) {
                                    return !e.isLocked
                                })
                            }).sort(function(e, t) {
                                var n = I(e);
                                return I(t) - n
                            });
                        if (t && this.props.subUpsellClickedEmote.srcSet && this.props.channelDisplayName) {
                            var i = I(t),
                                o = Object(s.d)("Subscribe at Tier {tierNumber}", {
                                    tierNumber: i
                                }, "EmotePickerCard"),
                                c = [],
                                d = [];
                            n.forEach(function(e) {
                                if (I(e) <= i) {
                                    var t = e.emotes.map(function(e) {
                                        return a.__assign({}, e, {
                                            isLocked: !1
                                        })
                                    });
                                    d.push.apply(d, t)
                                } else c.push.apply(c, e.emotes)
                            });
                            var u = c.concat(d),
                                m = t.price.toString() || "";
                            if (t.priceInfo) {
                                var p = t.priceInfo;
                                m = Object(Y.a)(Object(Y.b)(p.total, p.exponent), p.currency)
                            }
                            return r.createElement(l.Xa, {
                                className: "emote-sub-upsell"
                            }, r.createElement(l.Eb, {
                                padding: {
                                    top: .5
                                }
                            }, r.createElement(l.z, {
                                type: l.F.Text,
                                icon: l.tb.AngleLeft,
                                onClick: this.props.onBackClick,
                                size: l.D.Small
                            }, Object(s.d)("Back", "EmotePickerCard"))), r.createElement(l.Eb, {
                                display: l.X.Flex,
                                padding: {
                                    x: 2,
                                    bottom: 1
                                }
                            }, r.createElement(l.Xa, {
                                flexGrow: 0,
                                flexShrink: 0,
                                padding: {
                                    top: .5
                                }
                            }, r.createElement(l.S, {
                                src: this.getBigImageSrc(this.props.subUpsellClickedEmote.srcSet),
                                alt: this.props.subUpsellClickedEmote.displayName || ""
                            })), r.createElement(l.Xa, {
                                flexGrow: 1,
                                flexShrink: 1,
                                padding: {
                                    left: 1
                                }
                            }, r.createElement(l.W, {
                                bold: !0
                            }, this.renderCopyHeader(i.toString())), r.createElement(l.W, null, this.renderCopyBody(i.toString(), d.length)))), r.createElement(l.Xa, {
                                display: l.X.Flex,
                                alignItems: l.f.Center,
                                justifyContent: l.Wa.Center,
                                padding: {
                                    x: 2
                                }
                            }, r.createElement(W.a, {
                                customSubscribeNowMessage: o,
                                isSubbedToTier: !1,
                                fullWidth: !0,
                                tierPrice: m,
                                handleSubAction: this.props.handleSubAction,
                                productName: t.name,
                                url: t.url,
                                isEsportChannel: this.props.isEsportChannel
                            })), r.createElement(l.ec, null, r.createElement("hr", {
                                className: "emote-sub-upsell__divider"
                            })), r.createElement(A.b, {
                                className: "emote-sub-upsell__content"
                            }, r.createElement(l.Xa, null, r.createElement(l.Xa, {
                                padding: {
                                    x: 2
                                }
                            }, r.createElement(l.W, {
                                bold: !0
                            }, Object(s.d)("{numUnlocked} Emotes Included", {
                                numUnlocked: d.length
                            }, "EmotePickerCard"))), r.createElement(l.Xa, {
                                padding: {
                                    x: 1,
                                    top: .5,
                                    bottom: 3
                                }
                            }, r.createElement(F.a, {
                                emotes: u,
                                spaced: !0,
                                onClickEmote: this.props.onClickEmote
                            })))))
                        }
                        return null
                    }, t.prototype.renderCopyHeader = function(e) {
                        return Object(s.d)("{channelDisplayName} - Tier {tierNumber} Subscription", {
                            tierNumber: e,
                            channelDisplayName: this.props.channelDisplayName
                        }, "EmotePickerCard")
                    }, t.prototype.renderCopyBody = function(e, t) {
                        return 1 === t ? Object(s.d)("To unlock 1 emote and more subscriber benefits, subscribe at Tier {tierNumber}", {
                            tierNumber: e
                        }, "EmotePickerCard") : Object(s.d)("To unlock {numEmotes} emotes and more subscriber benefits, subscribe at Tier {tierNumber}.", {
                            tierNumber: e,
                            numEmotes: t
                        }, "EmotePickercard")
                    }, t.prototype.getBigImageSrc = function(e) {
                        var t = e.split(" ");
                        return 6 === t.length ? t[2] : t[0]
                    }, t
                }(r.Component)),
                $ = n("XQnt"),
                Z = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return a.__extends(t, e), t.prototype.componentDidMount = function() {
                        (!this.props.channelID || this.props.data && !this.props.data.loading) && this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        return null === this.props.subUpsellClickedEmote ? null : r.createElement(K, {
                            channelDisplayName: this.props.channelDisplayName,
                            channelSubscriptionProducts: this.subscriptionProducts,
                            handleSubAction: this.props.handleSubAction,
                            isEsportChannel: this.props.isEsportChannel,
                            onBackClick: this.props.onBackClick,
                            onClickEmote: this.props.onClickEmote,
                            subUpsellClickedEmote: this.props.subUpsellClickedEmote
                        })
                    }, Object.defineProperty(t.prototype, "subscriptionProducts", {
                        get: function() {
                            if (this.props.data && this.props.data.user && this.props.data.user.subscriptionProducts) {
                                var e = this.props.data.user.subscriptionProducts.filter(function(e) {
                                    return e
                                });
                                return D(this.props.ownedSetIDs, e)
                            }
                            return this.props.channelSubscriptionProducts
                        },
                        enumerable: !0,
                        configurable: !0
                    }), t
                }(r.Component),
                J = Object(d.compose)(Object(h.a)($, {
                    options: function(e) {
                        return {
                            variables: {
                                channelID: e.channelID
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelID
                    }
                }), Object(T.b)("EmoteSubUpsell"))(Z);
            ! function(e) {
                e.FrequentlyUsed = "frequently_used", e.CurrentChannel = "current_channel", e.OtherChannel = "other_subbed_channel", e.Unlocked = "unlocked", e.Global = "global"
            }(B || (B = {}));
            var ee;
            ! function(e) {
                e.FrequentlyUsedEmotes = "FREQUENTLY_USED_EMOTES", e.ChannelEmotes = "CHANNEL_EMOTES", e.AllEmotes = "ALL_EMOTES"
            }(ee || (ee = {}));
            var te = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.onTabNavClick = function(e) {
                            if (n.scroll && n.scroll.scrollContent && e.currentTarget.getAttribute("data-a-target")) {
                                var t = e.currentTarget.getAttribute("data-a-target"),
                                    i = ee.FrequentlyUsedEmotes;
                                switch (t) {
                                    case ee.FrequentlyUsedEmotes:
                                        n.frequentlyUsedEmotesRef && (n.frequentlyUsedEmotesRef.scrollIntoView(), i = ee.FrequentlyUsedEmotes);
                                        break;
                                    case ee.ChannelEmotes:
                                        n.channelEmotesRef && (n.channelEmotesRef.scrollIntoView(), i = ee.ChannelEmotes);
                                        break;
                                    case ee.AllEmotes:
                                        n.allEmotesRef && (n.allEmotesRef.scrollIntoView(), i = ee.AllEmotes)
                                }
                                n.setState({
                                    selectedNavTab: i
                                })
                            }
                        }, n.onClickEmote = function(e, t) {
                            if (n.props.onClickEmote && !e.isLocked) {
                                n.props.onClickEmote(e.displayName || e.token, e.id);
                                var i = {
                                    channel_id: n.props.channelID,
                                    chatroom_id: n.props.roomID,
                                    context: t,
                                    emote_picker_sid: n.props.emotePickerSessionID,
                                    emote_id: e.id,
                                    emoticon_set_id: e.setID,
                                    generated_by: n.props.emotePickerSource
                                };
                                s.o.track(x.SpadeEventType.EmotePickerClickthrough, i)
                            } else e.isLocked && n.onClickLockedEmote(e)
                        }, n.saveScrollRef = function(e) {
                            return n.scroll = e
                        }, n.saveAllEmotesRef = function(e) {
                            return n.allEmotesRef = e
                        }, n.saveChannelEmotesRef = function(e) {
                            return n.channelEmotesRef = e
                        }, n.saveFrequentlyUsedEmotesRef = function(e) {
                            return n.frequentlyUsedEmotesRef = e
                        }, n.checkVisible = function(e, t) {
                            if (t) {
                                var i = n.state.selectedNavTab;
                                n.channelEmotesRef ? t.offset > 0 && t.offset < n.channelEmotesRef.offsetTop ? i = ee.FrequentlyUsedEmotes : t.offset > n.channelEmotesRef.offsetTop && t.offset < n.allEmotesRef.offsetTop ? i = ee.ChannelEmotes : t.offset > n.allEmotesRef.offsetTop && (i = ee.AllEmotes) : t.offset > 0 && t.offset < n.allEmotesRef.offsetTop ? i = ee.FrequentlyUsedEmotes : t.offset > n.allEmotesRef.offsetTop && (i = ee.AllEmotes), n.state.selectedNavTab !== i && n.setState({
                                    selectedNavTab: i
                                })
                            }
                        }, n.onClickLockedEmote = function(e) {
                            n.setState({
                                subUpsellClickedEmote: e
                            })
                        }, n.onBackClick = function() {
                            n.setState({
                                subUpsellClickedEmote: null,
                                selectedNavTab: ee.FrequentlyUsedEmotes
                            })
                        }, n.handleFilterChange = function(e) {
                            var t = e.target.value,
                                i = t.toLowerCase();
                            n.setState({
                                filter: i,
                                inputValue: t,
                                filteredEmotes: n.filterEmoteSets(n.props.allEmoteSets, i),
                                selectedNavTab: ee.FrequentlyUsedEmotes
                            })
                        }, n.filterEmoteSets = function(e, t) {
                            var n = [];
                            e.forEach(function(e) {
                                e.emotes.filter(function(e) {
                                    return e.token.toLowerCase().includes(t)
                                }).forEach(function(t) {
                                    t.setID = e.id, n.push(t)
                                })
                            });
                            var i = Object(N.d)(),
                                a = 0 === Object.keys(i).length ? void 0 : i;
                            return Object(_.f)(n, t, a)
                        }, n.updateChannelEmotes = function(e) {
                            var t = e.channelSubscriptionProducts.reduce(function(e, t) {
                                return e.concat(t.emotes)
                            }, []);
                            if (0 === t.length || !e.channelDisplayName) return null;
                            var i = [],
                                a = [];
                            t.forEach(function(e) {
                                e.isLocked ? i.push(e) : a.push(e)
                            });
                            var r = a.concat(i);
                            n.setState({
                                sortedChannelEmotes: r
                            })
                        }, n.state = {
                            filter: "",
                            filteredEmotes: [],
                            inputValue: "",
                            selectedNavTab: ee.FrequentlyUsedEmotes,
                            sortedChannelEmotes: [],
                            subUpsellClickedEmote: null
                        }, n
                    }
                    return a.__extends(t, e), t.prototype.componentDidMount = function() {
                        if (this.props.channelID) {
                            var e = {
                                channel_id: this.props.channelID,
                                emote_picker_sid: this.props.emotePickerSessionID,
                                generated_by: this.props.emotePickerSource,
                                chatroom_id: this.props.roomID
                            };
                            s.o.track(x.SpadeEventType.ViewedEmotePicker, e), this.updateChannelEmotes(this.props)
                        }
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        this.props.channelID !== e.channelID && this.updateChannelEmotes(e)
                    }, t.prototype.render = function() {
                        return r.createElement(l.u, {
                            "data-a-target": "emote-picker",
                            direction: this.props.direction ? this.props.direction : l.v.TopRight,
                            size: this.props.size ? this.props.size : l.w.Medium,
                            noTail: !0,
                            show: !0
                        }, r.createElement(l.Xa, {
                            className: "emote-picker"
                        }, this.renderView()))
                    }, t.prototype.renderView = function() {
                        var e = null;
                        return null === this.state.subUpsellClickedEmote && (e = r.createElement(r.Fragment, null, r.createElement(l.Eb, {
                            padding: {
                                top: 2,
                                x: 2
                            }
                        }, r.createElement(l.Ra, {
                            autoFocus: !0,
                            onChange: this.handleFilterChange,
                            placeholder: Object(s.d)("Search for Emotes", "EmotePickerCard"),
                            type: l.Ta.Text,
                            value: this.state.inputValue
                        })), this.renderTabContent())), r.createElement(r.Fragment, null, r.createElement(J, {
                            channelDisplayName: this.props.channelDisplayName,
                            channelID: this.props.channelID,
                            channelSubscriptionProducts: this.props.channelSubscriptionProducts,
                            isEsportChannel: this.props.isEsportChannel || !1,
                            handleSubAction: this.props.handleSubAction,
                            onBackClick: this.onBackClick,
                            onClickEmote: this.onClickLockedEmote,
                            ownedSetIDs: this.props.ownedSetIDs,
                            subUpsellClickedEmote: this.state.subUpsellClickedEmote
                        }), e)
                    }, t.prototype.renderTabContent = function() {
                        return this.props.gqlError ? r.createElement(l.Xa, null, r.createElement(l.W, {
                            "data-test-selector": "emote-picker-menu-error-text",
                            color: l.O.Error
                        }, Object(s.d)("Unable to load available emotes.", "EmotePickerCard"))) : this.props.loading ? r.createElement(l.Xa, {
                            alignItems: l.f.Center,
                            display: l.X.Flex,
                            fullHeight: !0,
                            fullWidth: !0,
                            justifyContent: l.Wa.Center,
                            padding: 1
                        }, r.createElement(l.Za, null)) : "" !== this.state.filter ? this.renderSearchContent() : r.createElement(r.Fragment, null, r.createElement(A.b, {
                            scrollRef: this.saveScrollRef,
                            className: "emote-picker__tab-content"
                        }, r.createElement(l.Xa, {
                            padding: {
                                bottom: 2
                            }
                        }, r.createElement(q, {
                            checkVisible: this.checkVisible
                        }, this.getFrequentlyUsedEmoteGrid(), this.getCurrentChannelEmoteGrid(), this.getOtherSubEmoteGrids(), this.getResidualEmoteGrids()))), this.renderTabNav())
                    }, t.prototype.getFrequentlyUsedEmoteGrid = function() {
                        return 0 === this.props.frequentlyUsedEmotes.length ? null : r.createElement(l.Xa, {
                            refDelegate: this.saveFrequentlyUsedEmotesRef
                        }, r.createElement(X, {
                            context: B.FrequentlyUsed,
                            emotes: this.props.frequentlyUsedEmotes,
                            label: Object(s.d)("Frequently Used", "EmotePickerCard"),
                            onClickEmote: this.onClickEmote
                        }))
                    }, t.prototype.getCurrentChannelEmoteGrid = function() {
                        return 0 !== this.state.sortedChannelEmotes.length && this.props.channelDisplayName ? r.createElement(l.Xa, {
                            className: "emote-picker__content-block",
                            refDelegate: this.saveChannelEmotesRef
                        }, r.createElement(X, {
                            context: B.CurrentChannel,
                            emotes: this.state.sortedChannelEmotes,
                            imgSrc: this.props.channelProfileImageURL || void 0,
                            label: this.props.channelDisplayName,
                            onClickEmote: this.onClickEmote
                        })) : null
                    }, t.prototype.getOtherSubEmoteGrids = function() {
                        var e = this,
                            t = [];
                        return this.props.otherChannelEmoteSets.forEach(function(n) {
                            n.owner && n.owner.displayName && t.push(r.createElement(l.Xa, {
                                key: "emote-grid--" + n.id + "-emotes",
                                className: "emote-picker__content-block"
                            }, r.createElement(X, {
                                context: B.OtherChannel,
                                emotes: n.emotes,
                                imgSrc: n.owner.profileImageURL || void 0,
                                label: n.owner.displayName,
                                onClickEmote: e.onClickEmote
                            })))
                        }), r.createElement(r.Fragment, null, t)
                    }, t.prototype.getResidualEmoteGrids = function() {
                        var e = [];
                        return this.props.unlockedEmotes.length > 0 && e.push(r.createElement(l.Xa, {
                            key: "emote-grid--unlocked-emotes",
                            className: "emote-picker__content-block"
                        }, r.createElement(X, {
                            context: B.Unlocked,
                            emotes: this.props.unlockedEmotes,
                            label: Object(s.d)("Unlocked", "EmotePickerCard"),
                            onClickEmote: this.onClickEmote
                        }))), this.props.globalEmotes.length > 0 && e.push(r.createElement(l.Xa, {
                            key: "emote-grid--global-emotes",
                            className: "emote-picker__content-block"
                        }, r.createElement(X, {
                            context: B.Global,
                            emotes: this.props.globalEmotes,
                            label: Object(s.d)("Global", "EmotePickerCard"),
                            onClickEmote: this.onClickEmote
                        }))), r.createElement(l.Xa, {
                            refDelegate: this.saveAllEmotesRef
                        }, e)
                    }, t.prototype.renderSearchContent = function() {
                        var e = Object(s.d)('No Search Results for "{inputValue}"', {
                            inputValue: this.state.inputValue
                        }, "EmotePickerCard");
                        return this.state.filteredEmotes.length > 0 && (e = Object(s.d)('Search Results for "{inputValue}"', {
                            inputValue: this.state.inputValue
                        }, "EmotePickerCard")), r.createElement(A.b, {
                            className: "emote-picker__tab-content"
                        }, r.createElement(l.Xa, {
                            position: l.jb.Relative,
                            padding: {
                                x: 1,
                                top: 1,
                                bottom: 3
                            },
                            className: "emote-picker__content-block"
                        }, r.createElement(l.Eb, {
                            padding: {
                                x: 1
                            }
                        }, r.createElement(l.W, {
                            bold: !0
                        }, e)), r.createElement(F.a, {
                            emotes: this.state.filteredEmotes,
                            onClickEmote: this.onClickEmote,
                            spaced: !0
                        })))
                    }, t.prototype.renderTabNav = function() {
                        var e = null;
                        return this.state.sortedChannelEmotes.length > 0 && (e = r.createElement(Q, {
                            isActive: this.state.selectedNavTab === ee.ChannelEmotes,
                            label: ee.ChannelEmotes,
                            icon: l.tb.NavChannels,
                            onClick: this.onTabNavClick
                        })), r.createElement(l.Eb, {
                            background: l.r.Alt,
                            display: l.X.Flex,
                            className: "emote-picker__tab-nav-container"
                        }, r.createElement(Q, {
                            isActive: this.state.selectedNavTab === ee.FrequentlyUsedEmotes,
                            label: ee.FrequentlyUsedEmotes,
                            icon: l.tb.GlyphLength,
                            onClick: this.onTabNavClick
                        }), e, r.createElement(Q, {
                            isActive: this.state.selectedNavTab === ee.AllEmotes,
                            label: ee.AllEmotes,
                            icon: l.tb.EmoticonsAll,
                            onClick: this.onTabNavClick
                        }))
                    }, t
                }(r.Component),
                ne = n("DB+C"),
                ie = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        n.handleSubEvent = function(e) {
                            e.action === R.a.ClickCheckout && n.checkAndDisplaySubscriptionCheckout(), Object(R.b)(a.__assign({}, e, {
                                action: R.a.ClickCheckout,
                                channelID: n.props.channelData && n.props.channelData.user && n.props.channelData.user.id || "",
                                channelLogin: n.props.channelData && n.props.channelData.user && n.props.channelData.user.displayName || "",
                                isMenuOpen: null,
                                hasSubCredit: null,
                                sub_location: "emote_picker",
                                modal: !1,
                                showPrimeContent: !0,
                                giftRecipient: null
                            }))
                        };
                        var i = {
                            allEmoteSets: [],
                            availableUpsells: [],
                            channelSubscriptionProducts: [],
                            channelDisplayName: void 0,
                            channelTabVisible: !1,
                            frequentlyUsedEmotes: [],
                            globalEmotes: [],
                            gqlError: t.emoteSetsData && !!t.emoteSetsData.error || t.channelData && !!t.channelData.error || !1,
                            gqlLoading: t.emoteSetsData && !!t.emoteSetsData.loading || t.channelData && !!t.channelData.loading || !1,
                            otherChannelEmoteSets: [],
                            ownedChannelEmoteSets: [],
                            ownedSetIDs: new Set([]),
                            subscribeTexts: [],
                            unlockedEmotes: []
                        };
                        return i = n.applyDataPropsToState(t, i), n.state = a.__assign({}, i), n
                    }
                    return a.__extends(t, e), t.prototype.componentDidMount = function() {
                        Object(N.b)(), this.checkDataLoaded(this.props) && (this.props.onLoad && this.props.onLoad(this.checkForContent(this.props)), this.props.latencyTracking.reportInteractive())
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        if (e.emoteSetsData && e.emoteSetsData.error || e.channelData && e.channelData.error) this.setState({
                            gqlError: !0
                        });
                        else {
                            var t = this.applyDataPropsToState(e, this.state);
                            this.props.pubsub.messages.subscriptionInfo !== e.pubsub.messages.subscriptionInfo && (this.props.channelData && this.props.channelData.refetch(), this.props.emoteSetsData && this.props.emoteSetsData.refetch()), this.checkDataLoaded(e) && (e.latencyTracking.reportInteractive(), e.onLoad && e.onLoad(this.checkForContent(e)), t.gqlLoading = !1), this.setState(a.__assign({}, t, {
                                gqlError: !1
                            }))
                        }
                        if (e.visible && !this.props.visible && e.emoteSetsData && e.emoteSetsData.emoteMap) {
                            var n = Object(N.c)(e.emoteSetsData.emoteMap);
                            this.props.openEmotePicker(), this.setState({
                                frequentlyUsedEmotes: n
                            })
                        } else this.props.visible && !e.visible && this.props.closeEmotePicker()
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.closeEmotePicker()
                    }, t.prototype.render = function() {
                        if (!this.props.visible) return null;
                        var e = this.props.channelData && this.props.channelData.user && this.props.channelData.user.campaignProperties && this.props.channelData.user.campaignProperties.domains && this.props.channelData.user.campaignProperties.domains.length > 0 || !1,
                            t = r.createElement(G, {
                                allEmoteSets: this.state.allEmoteSets,
                                availableUpsells: this.state.availableUpsells,
                                channelTabVisible: this.state.channelTabVisible,
                                channelID: this.props.channelOwnerID,
                                direction: this.props.direction,
                                emotePickerSessionID: this.props.emotePickerSessionID,
                                emotePickerSource: this.props.emotePickerSource,
                                gqlError: this.state.gqlError,
                                handleSubAction: this.handleSubEvent,
                                isEsportChannel: e,
                                loading: this.state.gqlLoading,
                                onClickEmote: this.props.onClickEmote,
                                ownedChannelEmoteSets: this.state.ownedChannelEmoteSets,
                                roomID: this.props.roomID,
                                size: this.props.size,
                                subscribeTexts: this.state.subscribeTexts,
                                toggleVisibility: this.props.toggleVisibility
                            }),
                            n = r.createElement(te, {
                                allEmoteSets: this.state.allEmoteSets,
                                channelID: this.props.channelOwnerID,
                                channelDisplayName: this.state.channelDisplayName,
                                channelProfileImageURL: this.state.channelProfileImageURL,
                                channelSubscriptionProducts: this.state.channelSubscriptionProducts,
                                direction: this.props.direction,
                                emotePickerSessionID: this.props.emotePickerSessionID,
                                emotePickerSource: this.props.emotePickerSource,
                                frequentlyUsedEmotes: this.state.frequentlyUsedEmotes,
                                globalEmotes: this.state.globalEmotes,
                                gqlError: this.state.gqlError,
                                handleSubAction: this.handleSubEvent,
                                isEsportChannel: e,
                                loading: this.state.gqlLoading,
                                onClickEmote: this.props.onClickEmote,
                                ownedSetIDs: this.state.ownedSetIDs,
                                otherChannelEmoteSets: this.state.otherChannelEmoteSets,
                                roomID: this.props.roomID,
                                size: this.props.size,
                                toggleVisibility: this.props.toggleVisibility,
                                unlockedEmotes: this.state.unlockedEmotes
                            });
                        return r.createElement(m.a, {
                            assignments: {
                                fallback: function() {
                                    return t
                                },
                                off: function() {
                                    return t
                                },
                                on: function() {
                                    return n
                                }
                            },
                            name: C.b.EmotePickerV2
                        })
                    }, t.prototype.checkDataLoaded = function(e) {
                        var t = !e.channelOwnerID || e.channelData && !e.channelData.loading,
                            n = !e.isLoggedIn || e.emoteSetsData && !e.emoteSetsData.loading;
                        return t && n
                    }, t.prototype.checkForContent = function(e) {
                        var t = e.emoteSetsData && e.emoteSetsData.emoteSets && e.emoteSetsData.emoteSets.length > 0 || !1,
                            n = e.channelData && e.channelData.user && e.channelData.user.subscriptionProducts.filter(this.subscriptionProductHasEmotes).length > 0 || !1;
                        return t || n
                    }, t.prototype.applyDataPropsToState = function(e, t) {
                        var n = a.__assign({}, t);
                        if (e.emoteSetsData && e.emoteSetsData.emoteSets && e.emoteSetsData.emoteSets.length > 0) {
                            n.ownedSetIDs = new Set;
                            for (var i = 0, r = e.emoteSetsData.emoteSets; i < r.length; i++) {
                                var o = r[i];
                                o && o.id && n.ownedSetIDs.add(parseInt(o.id, 10))
                            }
                            n.allEmoteSets = Object(_.a)(e.emoteSetsData.emoteSets);
                            var l = [],
                                c = [],
                                d = [];
                            n.allEmoteSets.forEach(function(t) {
                                t.owner || "0" !== t.id ? t.owner && "" !== t.owner.id ? e.channelData && e.channelData.user && e.channelData.user.id === t.owner.id || l.push(t) : d.push.apply(d, t.emotes) : c.push.apply(c, t.emotes)
                            }), n.otherChannelEmoteSets = function(e) {
                                var t = {};
                                e.forEach(function(e) {
                                    var n;
                                    e.owner && e.owner.id && (t[e.owner.id] ? (n = t[e.owner.id].emotes).push.apply(n, e.emotes) : t[e.owner.id] = a.__assign({}, e))
                                });
                                var n = [];
                                return Object.keys(t).forEach(function(e) {
                                    n.push(t[e])
                                }), n
                            }(l), n.globalEmotes = c, n.unlockedEmotes = d
                        }
                        if (e.channelData && e.channelData.user) {
                            var u = void 0;
                            e.channelData.user.self && e.channelData.user.self.subscriptionBenefit && (u = e.channelData.user.self.subscriptionBenefit.platform), n.availableUpsells = function(e, t, n) {
                                var i = [];
                                return !n || n !== O.b.IOS && n !== O.b.Android ? (t.forEach(function(n, r) {
                                    var o = n.price;
                                    0 === r && Object(w.g)(t) && (o = Object(w.c)(t[0])), n.emotes && n.emotes.length && n.emoteSetID && !e.has(parseInt(n.emoteSetID, 10)) && i.push(a.__assign({}, n, {
                                        emotes: Object(_.e)(n.emotes, n.emoteSetID),
                                        level: r,
                                        price: o
                                    }))
                                }), i) : i
                            }(n.ownedSetIDs, e.channelData.user.subscriptionProducts, u), n.channelDisplayName = e.channelData.user.displayName, n.channelProfileImageURL = e.channelData.user.profileImageURL, n.channelSubscriptionProducts = D(n.ownedSetIDs, e.channelData.user.subscriptionProducts), n.ownedChannelEmoteSets = function(e, t) {
                                for (var n = [{
                                        id: "0",
                                        emotes: []
                                    }], i = 0, a = t; i < a.length; i++) {
                                    var r = a[i];
                                    r.emotes && r.emoteSetID && e.has(parseInt(r.emoteSetID, 10)) && (n[0].emotes = n[0].emotes.concat(Object(_.e)(r.emotes, r.emoteSetID)))
                                }
                                return n[0].emotes.length ? n : []
                            }(n.ownedSetIDs, e.channelData.user.subscriptionProducts), n.subscribeTexts = function(e) {
                                for (var t = [], n = 0; n < e.length; n++) {
                                    var i = e[n],
                                        a = Object(M.a)(i.tier);
                                    null === a && (a = 1), 0 === n && i.emotes && i.emotes.length > 1 ? t[n] = Object(s.d)("Unlock {numEmotes, number} Sub Emotes", {
                                        numEmotes: i.emotes.length
                                    }, "assembleSubscribeTexts") : 0 === n ? t[n] = Object(s.d)("Unlock 1 Sub Emote", "assembleSubscribeTexts") : i.emotes && i.emotes.length > 1 ? t[n] = Object(s.d)("{numEmotes, number} Extra Tier {tier} Sub Emotes", {
                                        numEmotes: i.emotes.length,
                                        tier: a
                                    }, "assembleSubscribeTexts") : i.emotes && i.emotes.length && (t[n] = Object(s.d)("1 Extra Tier {tier} Sub Emote", {
                                        tier: a
                                    }, "assembleSubscribeTexts"))
                                }
                                return t
                            }(e.channelData.user.subscriptionProducts)
                        }
                        return n.channelTabVisible = e.channelData && e.channelData.user && e.channelData.user.subscriptionProducts.filter(this.subscriptionProductHasEmotes).length > 0 || !1, n
                    }, t.prototype.subscriptionProductHasEmotes = function(e) {
                        return void 0 !== e.emoteSetID && !!e.emotes && e.emotes.length > 0
                    }, t.prototype.checkAndDisplaySubscriptionCheckout = function() {
                        var e = s.n.get(b.c, ""),
                            t = s.n.get(b.d, ""),
                            n = s.n.get(b.b, ""),
                            i = Number(n);
                        e && (this.props.channelData && this.props.channelData.user && this.props.channelData.user.subscriptionProducts.map(function(e) {
                            return e.name
                        }).includes(e) ? this.props.sessionUser ? this.props.showSubscriptionCheckoutModal({
                            recipientLogin: t,
                            productName: e,
                            mysteryGiftCount: i,
                            trackingContext: {
                                source: S.c.EmotePicker
                            }
                        }) : this.props.showLoginModal() : Object(b.e)())
                    }, t
                }(r.Component);
            var ae = Object(d.compose)(Object(i.connect)(function(e) {
                    return {
                        currentUserID: e.session.user && e.session.user.id,
                        emotePickerSessionID: e.chat && e.chat.emotePickerSessionID || null,
                        sessionUser: e.session.user,
                        isLoggedIn: Object(y.f)(e)
                    }
                }, function(e) {
                    return Object(u.bindActionCreators)({
                        closeEmotePicker: E.A,
                        openEmotePicker: E.M,
                        showLoginModal: Object(b.f)(v.a.EmotePickerSubscriptionButton),
                        showSubscriptionCheckoutModal: function(e) {
                            var t = a.__rest(e, []);
                            return Object(k.d)(p.a, {
                                component: "CheckoutModal",
                                loader: function() {
                                    return Promise.all([n.e(0), n.e(212)]).then(n.bind(null, "KJv/"))
                                },
                                componentProps: t
                            })
                        }
                    }, e)
                }), Object(h.a)(ne, {
                    name: "channelData",
                    skip: function(e) {
                        return !e.channelOwnerID
                    },
                    options: function(e) {
                        return {
                            variables: {
                                channelOwnerID: e.channelOwnerID
                            }
                        }
                    }
                }), Object(g.a)([{
                    topic: function(e) {
                        return "user-subscribe-events-v1." + e.currentUserID
                    },
                    mapMessageTypesToProps: {
                        "*": "subscriptionInfo"
                    },
                    skip: function(e) {
                        return !e.currentUserID
                    }
                }]), Object(T.b)("EmotePicker"), Object(f.a)())(ie),
                re = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            hasInteracted: !1,
                            isEmotePickerMenuVisible: !1,
                            isEmotePickerButtonVisible: !1
                        }, t.onClickOut = function() {
                            t.setState({
                                isEmotePickerMenuVisible: !1
                            })
                        }, t.onClickEmote = function(e, n) {
                            t.props.onClickEmote && t.props.onClickEmote(e, n)
                        }, t.toggleEmotePicker = function() {
                            t.setState(function(e) {
                                return {
                                    isEmotePickerMenuVisible: !e.isEmotePickerMenuVisible
                                }
                            })
                        }, t.onEmotePickerDataLoaded = function(e) {
                            e && t.setState({
                                isEmotePickerButtonVisible: !0
                            })
                        }, t.onInteraction = function() {
                            return t.setState({
                                hasInteracted: !0
                            })
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive(), this.props.inputRef && (this.props.inputRef.addEventListener("mouseenter", this.onInteraction), this.props.inputRef.addEventListener("focus", this.onInteraction))
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.inputRef && (this.props.inputRef.removeEventListener("mouseenter", this.onInteraction), this.props.inputRef.removeEventListener("focus", this.onInteraction))
                    }, t.prototype.render = function() {
                        var e = null;
                        this.state.isEmotePickerButtonVisible && (e = r.createElement(c, {
                            onClick: this.toggleEmotePicker,
                            isActive: this.state.isEmotePickerMenuVisible
                        }));
                        var t = null;
                        this.hasInteractedOrPageload && (t = r.createElement(ae, {
                            channelOwnerID: this.props.channelOwnerID,
                            emotePickerSource: this.props.emotePickerSource,
                            onClickEmote: this.onClickEmote,
                            onLoad: this.onEmotePickerDataLoaded,
                            toggleVisibility: this.toggleEmotePicker,
                            visible: this.state.isEmotePickerMenuVisible,
                            direction: this.props.direction
                        }));
                        var n = r.createElement(l.Xa, a.__assign({
                            className: "emote-picker-and-button"
                        }, this.layoutProps), e, t);
                        return this.props.shouldCloseOnClickOut ? r.createElement(o.a, {
                            onClickOut: this.onClickOut
                        }, n) : n
                    }, Object.defineProperty(t.prototype, "hasInteractedOrPageload", {
                        get: function() {
                            return !(!this.props.firstPageLoaded && !this.state.hasInteracted)
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(t.prototype, "layoutProps", {
                        get: function() {
                            var e = {
                                attachTop: !!this.props.attachTop,
                                attachRight: !!this.props.attachRight,
                                attachBottom: !!this.props.attachBottom,
                                attachLeft: !!this.props.attachLeft,
                                padding: this.props.padding
                            };
                            return this.props.position && (e.position = this.props.position), e
                        },
                        enumerable: !0,
                        configurable: !0
                    }), t
                }(r.Component),
                oe = Object(T.b)("EmotePicker")(re);
            var se = Object(i.connect)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded
                }
            })(oe);
            n.d(t, "a", function() {
                return se
            }), n.d(t, "c", function() {
                return ae
            }), n.d(t, !1, function() {
                return O.a
            }), n.d(t, !1, function() {
                return O.d
            }), n.d(t, !1, function() {
                return O.c
            }), n.d(t, !1, function() {
                return O.b
            }), n.d(t, "b", function() {
                return c
            })
        },
        nInp: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return r
            }), n.d(t, "a", function() {
                return o
            });
            var i = n("XIZb"),
                a = Object(i.a)("MessageBuffer"),
                r = a.withChatServiceProvider,
                o = (0, a.withContext)(function(e) {
                    return {
                        messageBufferAPI: e.serviceAPI,
                        setMessageBufferAPI: e.setServiceAPI
                    }
                })
        },
        nkgB: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "MessageBuffer_Channel"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "chatSettings"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "chatDelayMs"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 118
                }
            };
            n.loc.source = {
                body: "query MessageBuffer_Channel($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\nchatSettings {\nchatDelayMs\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        oK83: function(e, t, n) {
            "use strict";
            var i, a;
            n.d(t, "a", function() {
                    return i
                }), n.d(t, "b", function() {
                    return a
                }),
                function(e) {
                    e[e.recent_raids = 0] = "recent_raids", e[e.chat_message = 1] = "chat_message", e[e.room_message = 2] = "room_message", e[e.extension_message = 3] = "extension_message", e[e.viewer_list = 4] = "viewer_list", e[e.viewer_list_mod_section = 5] = "viewer_list_mod_section", e[e.member_list = 6] = "member_list", e[e.test = 7] = "test"
                }(i || (i = {})),
                function(e) {
                    e[e.Viewer = 0] = "Viewer", e[e.Extension = 1] = "Extension"
                }(a || (a = {}))
        },
        oe5X: function(e, t, n) {
            "use strict";
            var i = n("XmgI"),
                a = n("RcPG"),
                r = n("0FG4"),
                o = n("i6WW"),
                s = n("gTu3"),
                l = n("6j5V"),
                c = /^(['"*([{</]*)@((?:[^\u0000-\u007F]|[\w-])+)/;

            function d(e, t) {
                if (!t) return !1;
                var n = t.displayName,
                    i = t.login;
                return e === n || e.toLowerCase() === i
            }

            function u(e, t) {
                void 0 === t && (t = {});
                var n = t.cheers,
                    u = t.emotes,
                    g = t.links,
                    f = t.mentions,
                    b = p(e),
                    v = "",
                    k = 0;
                return m(b.reduce(function(e, t, m) {
                    if (h(t)) return v = "", e;
                    if (0 === v.length && (k = m), v += t, m !== b.length - 1 && !h(b[m + 1])) return e;
                    var p = u && Object(r.c)(v, k, u);
                    if (p) return e.concat(p);
                    var C = n && Object(i.e)(v, n);
                    if (C) return e.concat(C);
                    var y = g && Object(o.a)(v, g);
                    if (y) return e.concat(y);
                    var E = f && function(e, t) {
                        var n = e.match(c);
                        if (!n) return d(e, t.sessionUser) ? [{
                            type: a.a.CurrentUserHighlight,
                            content: e
                        }] : null;
                        var i = [],
                            r = n[1],
                            o = n[2],
                            u = e.slice(n[0].length);
                        r.length && i.push(Object(l.a)(r));
                        var m = s.a.Default;
                        return d(o, t.sessionUser) ? m = s.a.Recipient : t.sessionUser && t.sessionUser.login === t.senderLogin && (m = s.a.Sender), i.push({
                            type: a.a.Mention,
                            content: {
                                recipient: o,
                                currentUserMentionRelation: m
                            }
                        }), u.length && i.push(Object(l.a)(u)), i
                    }(v, f);
                    return E ? e.concat([E]) : e.concat(Object(l.a)(v))
                }, []))
            }

            function m(e) {
                return e.reduce(function(e, t, n) {
                    return 0 === n ? [].concat.call(e, t) : [].concat.call(e, Object(l.a)(" "), t)
                }, []).reduce(function(e, t, n) {
                    if (0 === n) return e.concat(t);
                    var i = e[e.length - 1];
                    return t.type === a.a.Text && i.type === a.a.Text ? (i.content = "" + i.content + t.content, e) : e.concat(t)
                }, [])
            }

            function p(e) {
                return e.match(/[^\uD800-\uDFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDFFF]/g) || []
            }

            function h(e) {
                return /\s/.test(e)
            }
            n.d(t, "a", function() {
                return u
            }), n.d(t, !1, function() {
                return m
            }), n.d(t, !1, function() {
                return p
            })
        },
        oi4T: function(e, t, n) {
            "use strict";
            var i, a = n("mrSG"),
                r = n("/7QA"),
                o = n("2xye");
            ! function(e) {
                e.Everyone = "everyone", e.ModsOnly = "mod", e.StreamChat = "twitch_chat", e.SubsOnly = "sub"
            }(i || (i = {}));
            var s = n("UJc8");
            n.d(t, "a", function() {
                return l
            }), n.d(t, "b", function() {
                return c
            }), n.d(t, "c", function() {
                return d
            });
            var l = function(e) {
                    var t;
                    switch (e.roomMinimumRole) {
                        case s.b.Everyone:
                            t = i.Everyone;
                            break;
                        case s.b.Moderator:
                            t = i.ModsOnly;
                            break;
                        case s.b.Subscriber:
                            t = i.SubsOnly;
                            break;
                        default:
                            t = i.StreamChat
                    }
                    var n = {
                        channel: e.channelLogin,
                        chatroom_type: t,
                        is_host_mode: e.isHostMode,
                        is_using_web_sockets: !0
                    };
                    return e.roomID && (n.chatroom_id = e.roomID), n
                },
                c = function(e) {
                    r.o.track(o.SpadeEventType.ChatRoomJoined, l(e))
                },
                d = function(e) {
                    r.o.track(o.SpadeEventType.ChatRoomWatched, a.__assign({}, l(e), {
                        channel_id: e.channelID
                    }))
                }
        },
        okS7: function(e, t, n) {
            "use strict";
            n("kPBf");
            var i, a = n("mrSG"),
                r = n("17x9"),
                o = n("q1tI"),
                s = n("8Ad5"),
                l = n("TSYQ"),
                c = n("/7QA"),
                d = n("u5aL"),
                u = n("8/mp"),
                m = n("Ue10"),
                p = (n("JzSO"), "autocomplete-balloon-matches"),
                h = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {}, t.resizeAnimationFrame = 0, t.messages = {
                            noMatches: Object(c.d)("No matches.", "AutocompleteBalloon")
                        }, t.logger = c.k.withCategory("AutocompleteBalloon"), t.renderMatches = function() {
                            return t.props.matches.map(function(e, n) {
                                var i = t.state.selectedMatch,
                                    a = i && i.replacement === e.replacement,
                                    r = l("autocomplete-balloon__item", {
                                        "autocomplete-balloon__item--selected": a
                                    });
                                return o.createElement(m.Xa, {
                                    key: "autocomplete-match-" + n,
                                    refDelegate: a ? t.focusOnOption : void 0,
                                    "data-test-selector": p
                                }, o.createElement(m.Pa, {
                                    display: m.X.Block,
                                    fullWidth: !0
                                }, o.createElement("button", {
                                    onMouseEnter: t.handleMatchMouseEnter,
                                    className: r,
                                    "data-a-target": e.replacement,
                                    "data-click-index": n,
                                    onClick: t.onMatchClick
                                }, o.createElement(m.Xa, {
                                    padding: {
                                        x: .5
                                    },
                                    display: m.X.Flex,
                                    alignItems: m.f.Center
                                }, e.element))))
                            })
                        }, t.handleMatchMouseEnter = function(e) {
                            var n = t.getMatchFromEvent(e);
                            n && t.setState({
                                selectedMatch: n
                            })
                        }, t.onMatchClick = function(e) {
                            var n = t.getMatchFromEvent(e);
                            n && t.props.onMatchSelect(n)
                        }, t.getMatchFromEvent = function(e) {
                            var n = t.props.matches,
                                i = e.currentTarget.getAttribute("data-click-index");
                            return !i || +i >= n.length ? (t.logger.error(new Error, "The index received from the UI element was not found in props.matches."), null) : n[+i]
                        }, t.handleKeydown = function(e) {
                            var n = e.charCode || e.keyCode,
                                i = function() {
                                    e.preventDefault(), e.stopPropagation()
                                };
                            switch (n) {
                                case s.a.Tab:
                                case s.a.Enter:
                                    i(), t.props.matches.length && t.state.selectedMatch ? t.props.onMatchSelect(t.state.selectedMatch) : t.props.onDismiss();
                                    break;
                                case s.a.Up:
                                case s.a.Down:
                                    if (!t.state.selectedMatch || !t.props.matches.length) return;
                                    var a = t.props.matches.indexOf(t.state.selectedMatch);
                                    if (-1 === a) return void t.logger.error(new Error, "The selected match was not found in props.matches.");
                                    i();
                                    var r = n === s.a.Up ? -1 : 1,
                                        o = t.getIndexWithinLength(a + r, t.props.matches.length),
                                        l = t.props.matches[o];
                                    t.setState({
                                        selectedMatch: l
                                    })
                            }
                        }, t.getIndexWithinLength = function(e, t) {
                            var n = e % t;
                            return n < 0 ? n + t : n
                        }, t.onResize = function() {
                            t.resizeAnimationFrame || (t.resizeAnimationFrame = requestAnimationFrame(t.setContainerHeight))
                        }, t.setContainerHeight = function() {
                            var e = t.props.containerElement && t.props.containerElement.clientHeight || 1080;
                            t.setState({
                                containerHeight: e
                            }), t.resizeAnimationFrame = 0
                        }, t.focusOnOption = function(e) {
                            if (e && t.autocompleteBalloonElement) {
                                var n = e.getBoundingClientRect(),
                                    i = t.autocompleteBalloonElement.getBoundingClientRect();
                                (n.bottom > i.bottom || n.top < i.top) && e.scrollIntoView()
                            }
                        }, t.setAutocompleteBalloonElement = function(e) {
                            t.autocompleteBalloonElement = e
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.componentDidMount = function() {
                        window.addEventListener("keydown", this.handleKeydown, !0), window.addEventListener("resize", this.onResize, !0), this.setContainerHeight(), this.props.matches.length > 0 && this.setState({
                            selectedMatch: this.props.matches[0]
                        })
                    }, t.prototype.componentWillUnmount = function() {
                        window.removeEventListener("resize", this.onResize, !0), window.removeEventListener("keydown", this.handleKeydown, !0), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame)
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        var t = this,
                            n = e.matches.reduce(function(e, n, i) {
                                return t.state.selectedMatch ? n.replacement === t.state.selectedMatch.replacement ? i : e : 0
                            }, 0);
                        this.setState({
                            selectedMatch: e.matches[n]
                        })
                    }, t.prototype.render = function() {
                        var e;
                        return e = 0 === this.props.matches.length ? o.createElement(m.Xa, {
                            padding: {
                                x: .5
                            },
                            "data-test-selector": "autocomplete-balloon-no-matches"
                        }, o.createElement(m.W, {
                            type: m.Vb.Span,
                            color: m.O.Alt2
                        }, this.messages.noMatches)) : this.renderMatches(), o.createElement(m.Xa, {
                            position: m.jb.Relative
                        }, o.createElement(d.a, {
                            onClickOut: this.props.onDismiss
                        }, o.createElement(m.u, {
                            direction: m.v.TopLeft,
                            "data-a-target": "autocomplete-balloon",
                            "data-test-selector": "autocomplete-balloon",
                            show: !0
                        }, o.createElement(m.Pa, {
                            "data-test-selector": "autocomplete-matches-container",
                            className: "autocomplete-balloon",
                            overflow: m.cb.Hidden,
                            display: m.X.Flex,
                            flexDirection: m.Aa.Column
                        }, o.createElement("div", {
                            style: {
                                maxHeight: this.state.containerHeight
                            },
                            ref: this.setAutocompleteBalloonElement
                        }, o.createElement(u.b, null, o.createElement(m.Xa, {
                            padding: {
                                y: 1
                            }
                        }, e)))))))
                    }, t
                }(o.Component),
                g = n("uu1w"),
                f = n("2xye"),
                b = {
                    Chat: "chat",
                    Feed: "feed",
                    Whisper: "whisper"
                },
                v = ":",
                k = "#",
                C = "@",
                y = function(e) {
                    switch (e) {
                        case g.a.Emote:
                            return v;
                        case g.a.Hashtag:
                            return k;
                        case g.a.Mention:
                            return C;
                        default:
                            return void c.k.warn("Chat Suggestions tracking was passed an unknown autocomplete type.")
                    }
                },
                E = function(e) {
                    var t = y(e.autocompleteType);
                    if (t) {
                        var n = {
                            channel: e.channelLogin,
                            completed_text: e.completedText,
                            source: e.source,
                            start_character: t
                        };
                        c.o.track(f.SpadeEventType.ChatSuggestionComplete, n)
                    }
                };
            ! function(e) {
                e.Input = "input", e.TextArea = "textarea"
            }(i || (i = {}));
            var S = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            autocompleteType: g.a.None,
                            matchedCursorPosition: 0,
                            matches: null,
                            value: ""
                        }, t.providers = [], t.onChange = function(e) {
                            t.setState({
                                value: e.target.value
                            }, function() {
                                t.getMatches()
                            }), t.props.onChange && t.props.onChange(e)
                        }, t.onKeyDown = function(e) {
                            var n = function() {
                                    t.props.onKeyDown && t.props.onKeyDown(e)
                                },
                                i = function() {
                                    e.preventDefault(), e.stopPropagation()
                                },
                                a = e.charCode || e.keyCode;
                            if (a !== s.a.Enter) {
                                switch (a) {
                                    case s.a.Tab:
                                        if (!t.state.matches) t.getMatches(!0) && i();
                                        break;
                                    case s.a.Esc:
                                        t.state.matches && (i(), t.resetDisplayState())
                                }
                                n()
                            } else n()
                        }, t.setComponentRefDelegate = function(e) {
                            t.componentRef = e, t.props.componentRefDelegate && t.props.componentRefDelegate(e)
                        }, t.getMatches = function(e) {
                            var n = t.state.value;
                            if (0 === t.providers.length || 0 === n.length) return t.resetDisplayState(), !1;
                            var i = t.getCurrentCursorPosition();
                            if (i > n.length);
                            else
                                for (; i < n.length && !/\s/.test(n.charAt(i));) i++;
                            var a = n.substring(0, i);
                            if (0 === a.length || /\s/.test(a.substring(a.length - 1))) return t.resetDisplayState(), !1;
                            for (var r = a.split(/\s/), o = r[r.length - 1], s = 0, l = t.providers; s < l.length; s++) {
                                var c = l[s];
                                if (!e || c.canBeTriggeredByTab) {
                                    var d = c.getMatches(o, e);
                                    if (d) return t.setState({
                                        autocompleteType: c.autocompleteType,
                                        matchedCursorPosition: i,
                                        matches: d
                                    }), !0
                                }
                            }
                            return t.resetDisplayState(), !1
                        }, t.resetDisplayState = function(e, n) {
                            var i = a.__assign({}, t.state, {
                                autocompleteType: g.a.None,
                                matches: null
                            }, e || {});
                            t.setState(i, n)
                        }, t.insertReplacement = function(e) {
                            var n = t.state.value,
                                i = t.state.matchedCursorPosition,
                                r = n.substring(0, i),
                                o = r.lastIndexOf(e.current);
                            if (-1 === o) r = r.concat(e.replacement + " "), i = r.length;
                            else {
                                var s = r.substring(0, o),
                                    l = n.length > o + e.current.length ? n.substring(o + e.current.length) : "",
                                    c = l.startsWith(" ") ? e.replacement : e.replacement + " ";
                                r = "" + s + c + l, i = s.length + c.length
                            }
                            E(a.__assign({}, t.props.trackingParams || {}, {
                                autocompleteType: t.state.autocompleteType,
                                completedText: e.replacement,
                                source: t.props.suggestionSource
                            })), t.resetDisplayState({
                                value: r
                            }, function() {
                                t.setCursorPosition(i)
                            })
                        }, t.getCurrentCursorPosition = function() {
                            return t.componentRef.selectionStart || 0
                        }, t.setCursorPosition = function(e) {
                            t.componentRef && (t.componentRef.setSelectionRange(e, e), t.componentRef.focus())
                        }, t.registerAutocompleteProvider = function(e) {
                            return t.providers.push(e),
                                function() {
                                    var n = t.providers.indexOf(e);
                                    t.providers.splice(n, 1)
                                }
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.refDelegate && this.props.refDelegate(this)
                    }, t.prototype.getChildContext = function() {
                        return {
                            registerAutocompleteProvider: this.registerAutocompleteProvider
                        }
                    }, t.prototype.componentWillUpdate = function(e, t) {
                        !this.state.matches && t.matches && function(e) {
                            var t = y(e.autocompleteType);
                            if (t) {
                                var n = {
                                    source: e.source,
                                    start_character: t
                                };
                                c.o.track(f.SpadeEventType.ChatSuggestion, n)
                            }
                        }({
                            autocompleteType: t.autocompleteType,
                            source: e.suggestionSource
                        })
                    }, t.prototype.componentDidUpdate = function(e, t) {
                        t.value !== this.state.value && this.props.onValueUpdate && this.props.onValueUpdate(this.state.value)
                    }, t.prototype.render = function() {
                        var e = a.__assign({}, this.props, {
                            onChange: this.onChange,
                            onKeyDown: this.onKeyDown,
                            refDelegate: this.setComponentRefDelegate,
                            value: this.state.value
                        });
                        return o.createElement(m.Xa, null, this.state.matches && o.createElement(h, {
                            matches: this.state.matches,
                            onMatchSelect: this.insertReplacement,
                            onDismiss: this.resetDisplayState,
                            containerElement: this.props.containerElement
                        }), this.props.componentType === i.Input ? o.createElement(m.Ra, a.__assign({}, e, {
                            type: e.type || m.Ta.Text
                        })) : o.createElement(m.Sb, a.__assign({}, e)), this.props.children)
                    }, t.prototype.getValue = function() {
                        return this.state.value
                    }, t.prototype.setValue = function(e) {
                        this.resetDisplayState({
                            value: e
                        })
                    }, t.childContextTypes = {
                        registerAutocompleteProvider: r.func
                    }, t
                }(o.Component),
                N = n("lZdE"),
                _ = n("OpME"),
                O = (n("gDzh"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.autocompleteType = g.a.Emote, t.canBeTriggeredByTab = !1, t.getMatches = function(e) {
                            return e.startsWith(":") ? e.length < 3 ? null : t.getMatchedEmotes(e) : null
                        }, t.getMatchedEmotes = function(e) {
                            var n = t.state.hydratedEmotes;
                            if (!n || 0 === n.length) return null;
                            var i = e.substring(1),
                                a = n.reduce(function(e, n) {
                                    var a = n.emotes.filter(function(e) {
                                        if (e.token) return t.doesEmoteMatchTerm(e, i)
                                    });
                                    return e.concat([a])
                                }, []).filter(function(e) {
                                    return e.length > 0
                                }).reduce(function(e, t) {
                                    return e.concat(t)
                                }, []);
                            return a = Object(_.d)(a), (a = Object(_.f)(a, i)).map(function(e) {
                                return {
                                    current: ":" + i,
                                    replacement: e.token,
                                    element: t.renderEmoteSuggestion(e)
                                }
                            })
                        }, t.doesEmoteMatchTerm = function(e, t) {
                            var n = new RegExp("^" + Object(N.a)(t), "i");
                            if (e.token.match(n)) return !0;
                            var i = new RegExp("" + Object(N.a)(t.charAt(0)).toUpperCase()),
                                a = new RegExp("^" + Object(N.a)(t.slice(1)), "i"),
                                r = e.token.match(i);
                            return !!(r && r.index && e.token.slice(r.index + 1).match(a))
                        }, t.renderEmoteSuggestion = function(e) {
                            return [o.createElement(m.Xa, {
                                padding: {
                                    right: .5
                                },
                                flexShrink: 0,
                                key: "emote-img-" + e.id
                            }, o.createElement("img", {
                                className: "emote-autocomplete-provider__image",
                                srcSet: e.srcSet
                            })), o.createElement(m.W, {
                                type: m.Vb.Span,
                                key: "emote-text-" + e.id,
                                ellipsis: !0
                            }, e.token)]
                        }, t.hydrateEmotes = function(e) {
                            for (var n = [], i = 0, a = e; i < a.length; i++) {
                                var r = a[i];
                                r && r.id && r.emotes && n.push({
                                    id: r.id,
                                    emotes: Object(_.b)(r.emotes)
                                })
                            }
                            t.setState({
                                hydratedEmotes: n
                            })
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        e.emotes && this.props.emotes !== e.emotes && this.hydrateEmotes(e.emotes)
                    }, t.prototype.componentWillMount = function() {
                        this.hydrateEmotes(this.props.emotes)
                    }, t.prototype.componentDidMount = function() {
                        this.unregister = this.context.registerAutocompleteProvider(this)
                    }, t.prototype.componentWillUnmount = function() {
                        this.unregister()
                    }, t.prototype.render = function() {
                        return null
                    }, t.contextTypes = {
                        registerAutocompleteProvider: r.func
                    }, t
                }(o.Component));
            n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "b", function() {
                return S
            }), n.d(t, "a", function() {
                return i
            }), n.d(t, !1, function() {}), n.d(t, "d", function() {
                return O
            }), n.d(t, "c", function() {
                return b
            })
        },
        p52R: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }),
                function(e) {
                    e.Admin = "admin", e.GlobalMod = "global_mod", e.Moderator = "mod", e.Owner = "owner", e.Staff = "staff", e.Subscriber = "subscriber", e.User = ""
                }(i || (i = {}))
        },
        qKeE: function(e, t, n) {},
        qnat: function(e, t, n) {
            "use strict";
            var i, a, r = n("mrSG"),
                o = n("q1tI"),
                s = n("fvjX"),
                l = n("yR8l"),
                c = n("eDVu"),
                d = n("0Log"),
                u = n("/aPz"),
                m = n("TSYQ"),
                p = n("/7QA"),
                h = n("8/mp"),
                g = n("Ue10");
            n("CK1f");
            ! function(e) {
                e[e.Gold = 0] = "Gold", e[e.Silver = 1] = "Silver", e[e.Bronze = 2] = "Bronze", e[e.Default = 3] = "Default"
            }(i || (i = {})),
            function(e) {
                e[e.Big = 0] = "Big", e[e.Small = 1] = "Small"
            }(a || (a = {}));
            var f, b = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        var e = this.renderMedalSVG(this.props.medal, this.props.size),
                            t = m("bits-leaderboard-medal__profile-image", {
                                "bits-leaderboard-medal__profile-image--big": this.props.size === a.Big
                            }, {
                                "bits-leaderboard-medal__profile-image--small": this.props.size === a.Small
                            }),
                            n = null;
                        return this.props.profileImageUrl && (n = o.createElement(g.Pa, {
                            position: g.jb.Absolute
                        }, o.createElement("img", {
                            className: t,
                            src: this.props.profileImageUrl
                        }))), o.createElement(g.Xa, {
                            className: "bits-leaderboard-medal",
                            display: g.X.Flex,
                            position: g.jb.Relative
                        }, e, n)
                    }, t.prototype.renderMedalSVG = function(e, t) {
                        var n = t === a.Big ? "bits-leaderboard-medal__big" : "bits-leaderboard-medal__small",
                            r = null;
                        switch (e) {
                            case i.Gold:
                                r = o.createElement(C, null);
                                break;
                            case i.Silver:
                                r = o.createElement(y, null);
                                break;
                            case i.Bronze:
                                r = o.createElement(v, null);
                                break;
                            default:
                                r = o.createElement(k, null)
                        }
                        return o.createElement(g.Pa, {
                            className: n
                        }, r)
                    }, t
                }(o.Component),
                v = function(e) {
                    return o.createElement("svg", {
                        className: e.className,
                        viewBox: "0 0 32 32",
                        xmlns: "http://www.w3.org/2000/svg",
                        xmlnsXlink: "http://www.w3.org/1999/xlink"
                    }, o.createElement("defs", null, o.createElement("linearGradient", {
                        x1: "14.834%",
                        y1: "10.25%",
                        x2: "82.068%",
                        y2: "89.469%",
                        id: "bits-leaderboard-bronze-linearGradient-1"
                    }, o.createElement("stop", {
                        stopColor: "#DF904C",
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#A65611",
                        offset: "100%"
                    })), o.createElement("path", {
                        id: "bits-leaderboard-bronze-path-2",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), o.createElement("linearGradient", {
                        x1: "19.142%",
                        y1: "10.021%",
                        x2: "79.509%",
                        y2: "86.458%",
                        id: "bits-leaderboard-bronze-linearGradient-3"
                    }, o.createElement("stop", {
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#494949",
                        offset: "9.355%"
                    }), o.createElement("stop", {
                        stopColor: "#BCBCBC",
                        offset: "13.369%"
                    }), o.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "20.419%"
                    }), o.createElement("stop", {
                        stopColor: "#818181",
                        offset: "25.723%"
                    }), o.createElement("stop", {
                        stopColor: "#5D5D5D",
                        offset: "39.965%"
                    }), o.createElement("stop", {
                        stopColor: "#EFEFEF",
                        offset: "45.279%"
                    }), o.createElement("stop", {
                        stopColor: "#7A7A7A",
                        offset: "50.012%"
                    }), o.createElement("stop", {
                        stopColor: "#717171",
                        offset: "57.677%"
                    }), o.createElement("stop", {
                        stopColor: "#B5B5B5",
                        offset: "63.526%"
                    }), o.createElement("stop", {
                        stopColor: "#888",
                        offset: "69.88%"
                    }), o.createElement("stop", {
                        stopColor: "#F1F1F1",
                        offset: "75.215%"
                    }), o.createElement("stop", {
                        stopColor: "#B9B9B9",
                        offset: "79.325%"
                    }), o.createElement("stop", {
                        stopColor: "#545454",
                        offset: "92.875%"
                    }), o.createElement("stop", {
                        offset: "100%"
                    })), o.createElement("linearGradient", {
                        x1: "19.604%",
                        y1: "10.043%",
                        x2: "84.81%",
                        y2: "89.074%",
                        id: "bits-leaderboard-bronze-linearGradient-4"
                    }, o.createElement("stop", {
                        stopColor: "#F2C6A5",
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#864223",
                        offset: "100%"
                    })), o.createElement("circle", {
                        id: "bits-leaderboard-bronze-path-5",
                        cx: "16",
                        cy: "16",
                        r: "11"
                    })), o.createElement("g", {
                        id: "bits-leaderboard-bronze-Symbols",
                        fill: "none",
                        fillRule: "evenodd"
                    }, o.createElement("g", {
                        id: "bits-leaderboard-bronze-Medal-3-bronze-lg"
                    }, o.createElement("g", {
                        id: "bits-leaderboard-bronze-Star-Copy-2B"
                    }, o.createElement("use", {
                        fill: "#DE9572",
                        xlinkHref: "#bits-leaderboard-bronze-path-2"
                    }), o.createElement("path", {
                        stroke: "url(#bits-leaderboard-bronze-linearGradient-1)",
                        d: "M16 29.53l-2.59 1.988-1.803-2.72-3.095 1.039-.823-3.16-3.264-.021.248-3.256-3.08-1.08 1.29-2.998-2.562-2.023 2.195-2.416-1.768-2.745 2.861-1.573-.78-3.17 3.216-.559.292-3.252L9.56 4.1l1.332-2.98 2.881 1.534L16 .267l2.227 2.387 2.881-1.535L22.44 4.1l3.223-.516.292 3.252 3.216.559-.78 3.17 2.86 1.573-1.767 2.745 2.195 2.416-2.563 2.023 1.292 2.998-3.08 1.08.247 3.256-3.264.021-.823 3.16-3.095-1.04-1.803 2.721L16 29.53z"
                    })), o.createElement("path", {
                        id: "bits-leaderboard-bronze-Star-Copy-3B",
                        fill: "url(#bits-leaderboard-bronze-linearGradient-3)",
                        opacity: ".4",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), o.createElement("g", {
                        id: "bits-leaderboard-bronze-Oval-Copy-B"
                    }, o.createElement("use", {
                        fill: "#A96643",
                        xlinkHref: "#bits-leaderboard-bronze-path-5"
                    }), o.createElement("circle", {
                        stroke: "url(#bits-leaderboard-bronze-linearGradient-4)",
                        cx: "16",
                        cy: "16",
                        r: "11.5"
                    })))))
                },
                k = function(e) {
                    return o.createElement("svg", {
                        className: e.className,
                        viewBox: "0 0 20 20",
                        xmlns: "http://www.w3.org/2000/svg",
                        xmlnsXlink: "http://www.w3.org/1999/xlink"
                    }, o.createElement("defs", null, o.createElement("path", {
                        id: "bits-leaderboard-default-path-1",
                        d: "M10 16.88l-1.31676 1.01089-.91717-1.38367-1.57365.52857-.4182-1.6065-1.66001-.01104.12608-1.65525-1.56648-.54944.65672-1.52462-1.3032-1.0283L3.1435 9.43184l-.8987-1.39573 1.45468-.79978-.39681-1.61193 1.63555-.2841.14808-1.65343 1.63918.26234.67692-1.51576 1.46519.78037L10 2l1.13241 1.21383 1.46519-.78037.67692 1.51576 1.63918-.26234.14808 1.65342 1.63555.28411-.3968 1.61193 1.45467.79978-.8987 1.39573 1.11618 1.22878-1.3032 1.02831.6567 1.52462-1.56647.54944.12608 1.65525-1.66.01104-.41821 1.6065-1.57365-.52857-.91717 1.38367z"
                    })), o.createElement("g", {
                        id: "bits-leaderboard-default-Symbols",
                        fill: "none",
                        fillRule: "evenodd"
                    }, o.createElement("g", {
                        id: "bits-leaderboard-default-bitbadge/blank"
                    }, o.createElement("g", {
                        id: "bits-leaderboard-default-Star"
                    }, o.createElement("use", {
                        fill: "#D7CCEB",
                        xlinkHref: "#bits-leaderboard-default-path-1"
                    }), o.createElement("path", {
                        stroke: "#D7CCEB",
                        d: "M10 17.51035l-1.4374 1.10351-1.0012-1.51044-1.71783.577-.45652-1.7537-1.8121-.01204.13763-1.8069-1.71-.59979.71688-1.6643-1.4226-1.12253L2.5153 9.3798l-.98104-1.52362 1.58796-.87305-.43317-1.75961 1.7854-.31014.16165-1.80492 1.78937.28638.73894-1.65463 1.59943.85187L10 1.26703l1.23616 1.32505 1.59943-.85187.73894 1.65463 1.78937-.28638.16165 1.80492 1.7854.31014-.43317 1.7596 1.58796.87306-.98104 1.52362 1.21844 1.34136-1.4226 1.12252.71688 1.66431-1.71.59978.13763 1.8069-1.8121.01205-.45652 1.7537-1.71782-.577-1.00121 1.51044L10 17.51036z"
                    })), o.createElement("circle", {
                        id: "bits-leaderboard-default-Oval-2",
                        fill: "#EEE9F6",
                        cx: "10",
                        cy: "10",
                        r: "6"
                    }))))
                },
                C = function(e) {
                    return o.createElement("svg", {
                        className: e.className,
                        viewBox: "0 0 32 32",
                        xmlns: "http://www.w3.org/2000/svg",
                        xmlnsXlink: "http://www.w3.org/1999/xlink"
                    }, o.createElement("defs", null, o.createElement("linearGradient", {
                        x1: "15.783%",
                        y1: "9.653%",
                        x2: "82.407%",
                        y2: "91.627%",
                        id: "bits-leaderboard-gold-linearGradient-1"
                    }, o.createElement("stop", {
                        stopColor: "#D8B258",
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#A4770E",
                        offset: "100%"
                    })), o.createElement("path", {
                        id: "bits-leaderboard-gold-path-2",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), o.createElement("linearGradient", {
                        x1: "17.025%",
                        y1: "7.356%",
                        x2: "84.092%",
                        y2: "91.769%",
                        id: "bits-leaderboard-gold-linearGradient-3"
                    }, o.createElement("stop", {
                        stopColor: "#E5B561",
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#EEC05F",
                        offset: "12.638%"
                    }), o.createElement("stop", {
                        stopColor: "#FFECB9",
                        offset: "20.419%"
                    }), o.createElement("stop", {
                        stopColor: "#DCB35E",
                        offset: "30.58%"
                    }), o.createElement("stop", {
                        stopColor: "#E0B55B",
                        offset: "45.279%"
                    }), o.createElement("stop", {
                        stopColor: "#CDA148",
                        offset: "62.771%"
                    }), o.createElement("stop", {
                        stopColor: "#E9CC8F",
                        offset: "76.584%"
                    }), o.createElement("stop", {
                        stopColor: "#ECBE5D",
                        offset: "83.038%"
                    }), o.createElement("stop", {
                        stopColor: "#C09A4C",
                        offset: "100%"
                    })), o.createElement("linearGradient", {
                        x1: "83.2%",
                        y1: "89.733%",
                        x2: "12.813%",
                        y2: "3.179%",
                        id: "bits-leaderboard-gold-linearGradient-4"
                    }, o.createElement("stop", {
                        stopColor: "#9A790A",
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#FFEFB9",
                        offset: "87.642%"
                    }), o.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "100%"
                    })), o.createElement("circle", {
                        id: "bits-leaderboard-gold-path-5",
                        cx: "16",
                        cy: "16",
                        r: "11"
                    })), o.createElement("g", {
                        id: "bits-leaderboard-gold-Symbols",
                        fill: "none",
                        fillRule: "evenodd"
                    }, o.createElement("g", {
                        id: "bits-leaderboard-gold-Medal-1-gold-lg"
                    }, o.createElement("g", {
                        id: "bits-leaderboard-gold-Star"
                    }, o.createElement("use", {
                        fill: "#D6A94C",
                        xlinkHref: "#bits-leaderboard-gold-path-2"
                    }), o.createElement("path", {
                        stroke: "url(#bits-leaderboard-gold-linearGradient-1)",
                        d: "M16 29.53l-2.59 1.988-1.803-2.72-3.095 1.039-.823-3.16-3.264-.021.248-3.256-3.08-1.08 1.29-2.998-2.562-2.023 2.195-2.416-1.768-2.745 2.861-1.573-.78-3.17 3.216-.559.292-3.252L9.56 4.1l1.332-2.98 2.881 1.534L16 .267l2.227 2.387 2.881-1.535L22.44 4.1l3.223-.516.292 3.252 3.216.559-.78 3.17 2.86 1.573-1.767 2.745 2.195 2.416-2.563 2.023 1.292 2.998-3.08 1.08.247 3.256-3.264.021-.823 3.16-3.095-1.04-1.803 2.721L16 29.53z"
                    })), o.createElement("path", {
                        id: "bits-leaderboard-gold-Star",
                        fill: "url(#bits-leaderboard-gold-linearGradient-3)",
                        d: "M16 28.58l-2.469 2.215-1.615-2.897-3.055 1.294-.587-3.265-3.31.232.505-3.279-3.206-.855 1.543-2.937-2.755-1.85 2.413-2.277-2.005-2.643 3.021-1.371-1.037-3.151 3.302-.316.042-3.317 3.226.774 1.117-3.124 2.8 1.78L16 1l2.07 2.592 2.8-1.78 1.117 3.125 3.226-.774.042 3.317 3.302.316-1.037 3.151 3.021 1.37-2.005 2.644 2.413 2.278-2.755 1.849 1.543 2.937-3.206.855.505 3.28-3.31-.233-.587 3.265-3.055-1.294-1.615 2.897z"
                    }), o.createElement("g", {
                        id: "bits-leaderboard-gold-Oval"
                    }, o.createElement("use", {
                        fill: "#BE912A",
                        xlinkHref: "#bits-leaderboard-gold-path-5"
                    }), o.createElement("circle", {
                        stroke: "url(#bits-leaderboard-gold-linearGradient-4)",
                        cx: "16",
                        cy: "16",
                        r: "11.5"
                    })))))
                },
                y = function(e) {
                    return o.createElement("svg", {
                        className: e.className,
                        viewBox: "0 0 32 32",
                        xmlns: "http://www.w3.org/2000/svg",
                        xmlnsXlink: "http://www.w3.org/1999/xlink"
                    }, o.createElement("defs", null, o.createElement("linearGradient", {
                        x1: "18.738%",
                        y1: "20.297%",
                        x2: "79.716%",
                        y2: "88.714%",
                        id: "bits-leaderboard-silver-linearGradient-1"
                    }, o.createElement("stop", {
                        stopColor: "#D0D8DB",
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#7E848A",
                        offset: "100%"
                    })), o.createElement("path", {
                        id: "bits-leaderboard-silver-path-2",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), o.createElement("linearGradient", {
                        x1: "19.638%",
                        y1: "10.855%",
                        x2: "81.99%",
                        y2: "89.124%",
                        id: "bits-leaderboard-silver-linearGradient-3"
                    }, o.createElement("stop", {
                        stopColor: "#202020",
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#BCBCBC",
                        offset: "13.369%"
                    }), o.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "20.779%"
                    }), o.createElement("stop", {
                        stopColor: "#313131",
                        offset: "30.58%"
                    }), o.createElement("stop", {
                        stopColor: "#EFEFEF",
                        offset: "45.279%"
                    }), o.createElement("stop", {
                        stopColor: "#B5B5B5",
                        offset: "61.521%"
                    }), o.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "74.572%"
                    }), o.createElement("stop", {
                        stopColor: "#656565",
                        offset: "87.343%"
                    }), o.createElement("stop", {
                        stopColor: "#C4C4C4",
                        offset: "100%"
                    })), o.createElement("linearGradient", {
                        x1: "0%",
                        y1: "0%",
                        x2: "99.438%",
                        y2: "96.312%",
                        id: "bits-leaderboard-silver-linearGradient-4"
                    }, o.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "3.677%"
                    }), o.createElement("stop", {
                        offset: "100%"
                    })), o.createElement("linearGradient", {
                        x1: "8.437%",
                        y1: "13.448%",
                        x2: "86.525%",
                        y2: "83.33%",
                        id: "bits-leaderboard-silver-linearGradient-5"
                    }, o.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#EAEEF2",
                        offset: "9.632%"
                    }), o.createElement("stop", {
                        stopColor: "#686C71",
                        offset: "100%"
                    })), o.createElement("circle", {
                        id: "bits-leaderboard-silver-path-6",
                        cx: "16",
                        cy: "16",
                        r: "11"
                    })), o.createElement("g", {
                        id: "bits-leaderboard-silver-Symbols",
                        fill: "none",
                        fillRule: "evenodd"
                    }, o.createElement("g", {
                        id: "bits-leaderboard-silver-Medal-2-silver-lg"
                    }, o.createElement("g", {
                        id: "bits-leaderboard-silver-Star-Copy-2"
                    }, o.createElement("use", {
                        fill: "#CBC8D0",
                        xlinkHref: "#bits-leaderboard-silver-path-2"
                    }), o.createElement("path", {
                        stroke: "url(#bits-leaderboard-silver-linearGradient-1)",
                        d: "M16 29.53l-2.59 1.988-1.803-2.72-3.095 1.039-.823-3.16-3.264-.021.248-3.256-3.08-1.08 1.29-2.998-2.562-2.023 2.195-2.416-1.768-2.745 2.861-1.573-.78-3.17 3.216-.559.292-3.252L9.56 4.1l1.332-2.98 2.881 1.534L16 .267l2.227 2.387 2.881-1.535L22.44 4.1l3.223-.516.292 3.252 3.216.559-.78 3.17 2.86 1.573-1.767 2.745 2.195 2.416-2.563 2.023 1.292 2.998-3.08 1.08.247 3.256-3.264.021-.823 3.16-3.095-1.04-1.803 2.721L16 29.53z"
                    })), o.createElement("path", {
                        id: "bits-leaderboard-silver-Star-Copy-3",
                        fill: "url(#bits-leaderboard-silver-linearGradient-3)",
                        opacity: ".6",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), o.createElement("path", {
                        id: "bits-leaderboard-silver-Star-Copy-4-grad",
                        fill: "url(#bits-leaderboard-silver-linearGradient-4)",
                        opacity: ".6",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), o.createElement("g", {
                        id: "bits-leaderboard-silver-Oval-Copy"
                    }, o.createElement("use", {
                        fill: "#A3A7AA",
                        xlinkHref: "#bits-leaderboard-silver-path-6"
                    }), o.createElement("circle", {
                        stroke: "url(#bits-leaderboard-silver-linearGradient-5)",
                        cx: "16",
                        cy: "16",
                        r: "11.5"
                    })))))
                },
                E = n("3CMh"),
                S = n("6MRn"),
                N = n("4h+t"),
                _ = (n("ky+Y"), function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        if (this.props.data && (this.props.data.loading || this.props.data.error)) return o.createElement(g.Xa, {
                            display: g.X.InlineFlex,
                            alignItems: g.f.Center,
                            flexGrow: 1
                        });
                        var e = this.props.bitsConfig ? this.props.bitsConfig : Object(N.a)(),
                            t = null,
                            n = "";
                        if (this.props.data && this.props.data.user) {
                            n = this.props.data.user.displayName || this.props.data.user.login;
                            var i = o.createElement(g.W, {
                                ellipsis: !0
                            }, n);
                            this.props.selfId && this.props.selfId === this.props.id && (i = o.createElement(g.W, {
                                ellipsis: !0,
                                color: g.O.Link,
                                bold: !0
                            }, n)), t = o.createElement(g.Xa, {
                                ellipsis: !0,
                                className: "bits-leaderboard-expanded-leaderboard-entry__username",
                                margin: {
                                    x: 1
                                },
                                display: g.X.InlineBlock
                            }, i)
                        }
                        var a, r = null;
                        r = this.props.selfId && this.props.selfId === this.props.value ? o.createElement(g.gb, {
                            label: this.props.rank.toString(),
                            type: g.hb.Brand
                        }) : o.createElement(g.W, {
                            color: g.O.Link,
                            bold: !0
                        }, this.props.rank);
                        var s = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || p.a.defaultAvatarURL;
                        return a = o.createElement(g.Xa, {
                            overflow: g.cb.Hidden,
                            display: g.X.InlineFlex,
                            flexGrow: 1,
                            fullWidth: !0,
                            alignItems: g.f.Center
                        }, o.createElement(g.Xa, {
                            className: "bits-leaderboard-expanded-leaderboard-entry__rank",
                            padding: {
                                right: .5
                            }
                        }, r), o.createElement("img", {
                            src: s,
                            className: "bits-leaderboard-expanded-leaderboard-entry__avatar"
                        }), t, o.createElement(g.Xa, {
                            flexShrink: 0,
                            className: "bits-leaderboard-expanded-leaderboard-entry__score",
                            margin: {
                                left: "auto"
                            },
                            display: g.X.InlineBlock
                        }, o.createElement(E.a, {
                            animated: !1,
                            showImage: !0,
                            showAmount: !0,
                            prefix: "Cheer",
                            bitsConfig: e,
                            size: E.b.ExtremelySmall,
                            display: g.X.InlineFlex,
                            amount: this.props.score,
                            formattedNumber: !0,
                            alignItems: g.f.Center
                        }))), o.createElement(g.Xa, {
                            className: "bits-leaderboard-expanded-leaderboard-entry",
                            display: g.X.Block,
                            alignItems: g.f.Center
                        }, a)
                    }, t
                }(o.Component)),
                O = Object(s.compose)(Object(l.a)(S, {
                    name: "data",
                    skip: function(e) {
                        return !e.id
                    },
                    options: function(e) {
                        return {
                            variables: {
                                userID: e.value,
                                profileImageWidth: 50
                            }
                        }
                    }
                }))(_),
                w = (n("U80U"), function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        if (this.props.data && (this.props.data.loading || this.props.data.error)) return o.createElement(g.Xa, {
                            display: g.X.InlineFlex,
                            alignItems: g.f.Center,
                            flexGrow: 1
                        });
                        var e = this.props.bitsConfig ? this.props.bitsConfig : Object(N.a)(),
                            t = null,
                            n = "";
                        if (this.props.data && this.props.data.user) {
                            n = this.props.data.user.displayName || this.props.data.user.login;
                            var i = o.createElement(g.W, {
                                ellipsis: !0,
                                bold: !0
                            }, n);
                            this.props.selfId && this.props.selfId === this.props.value && (i = o.createElement(g.W, {
                                ellipsis: !0,
                                color: g.O.Link,
                                bold: !0
                            }, n)), t = o.createElement(g.Xa, {
                                ellipsis: !0,
                                className: "bits-leaderboard-expanded-top-three-entry__username",
                                margin: {
                                    x: .5
                                },
                                display: g.X.InlineBlock
                            }, i)
                        }
                        var r, s = null;
                        s = this.props.selfId && this.props.selfId === this.props.value ? o.createElement(g.gb, {
                            label: this.props.rank.toString(),
                            type: g.hb.Brand
                        }) : o.createElement(g.W, {
                            color: g.O.Link,
                            bold: !0
                        }, this.props.rank);
                        var l = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || p.a.defaultAvatarURL;
                        return r = o.createElement(g.Xa, {
                            overflow: g.cb.Hidden,
                            display: g.X.InlineFlex,
                            flexGrow: 1,
                            fullWidth: !0,
                            alignItems: g.f.Center
                        }, o.createElement(g.Xa, {
                            className: "bits-leaderboard-expanded-top-three-entry__rank"
                        }, s), o.createElement(b, {
                            size: a.Big,
                            medal: this.props.medal,
                            profileImageUrl: l
                        }), t, o.createElement(g.Xa, {
                            flexShrink: 0,
                            className: "bits-leaderboard-expanded-top-three-entry__score",
                            margin: {
                                left: "auto"
                            },
                            display: g.X.InlineBlock
                        }, o.createElement(E.a, {
                            animated: !1,
                            showImage: !0,
                            showAmount: !0,
                            prefix: "Cheer",
                            bitsConfig: e,
                            size: E.b.ExtremelySmall,
                            display: g.X.InlineFlex,
                            amount: this.props.score,
                            formattedNumber: !0,
                            alignItems: g.f.Center
                        }))), o.createElement(g.Xa, {
                            className: "bits-leaderboard-expanded-top-three-entry",
                            display: g.X.Block
                        }, r)
                    }, t
                }(o.Component)),
                M = Object(s.compose)(Object(l.a)(S, {
                    name: "data",
                    skip: function(e) {
                        return !e.id
                    },
                    options: function(e) {
                        return {
                            variables: {
                                userID: e.value,
                                profileImageWidth: 50
                            }
                        }
                    }
                }))(w);
            ! function(e) {
                e.Weekly = "WEEK", e.AllTime = "ALLTIME", e.Monthly = "MONTH"
            }(f || (f = {}));
            n("2C+f");
            var D = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderExpandArrow = function() {
                        return o.createElement(g.Xa, {
                            position: g.jb.Absolute,
                            attachRight: !0,
                            attachTop: !0,
                            className: "bits-leaderboard-expanded__arrow",
                            display: g.X.Flex,
                            alignItems: g.f.Stretch
                        }, o.createElement(g.z, {
                            size: g.D.Small,
                            fullWidth: !0,
                            type: g.F.Text,
                            onClick: t.props.toggleExpand
                        }, o.createElement(g.sb, {
                            asset: g.tb.AngleUp,
                            height: 20,
                            width: 20
                        })))
                    }, t
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    var e = this.shouldRenderBottomContent(),
                        t = this.renderTopThreeEntries(),
                        n = this.renderTopTenEntries(),
                        i = this.renderExpandArrow(),
                        a = this.renderTopSection(),
                        r = null,
                        s = null;
                    e && ((r = this.renderUserPlaceEntry()) || (s = this.renderBottomSection()));
                    var l = {
                            "bits-leaderboard-expanded__top-three-break": !!this.props.topEdges && this.props.topEdges.length > 3
                        },
                        c = {
                            "bits-leaderboard-expanded__top-ten-break": !!this.props.topEdges && this.props.topEdges.length > 0
                        };
                    return o.createElement(g.Eb, {
                        background: g.r.Base,
                        padding: {
                            top: 1
                        },
                        position: g.jb.Relative
                    }, a, o.createElement(h.b, {
                        className: "bits-leaderboard-expanded__scrollable",
                        suppressScrollX: !0
                    }, o.createElement(g.Xa, null, o.createElement("ul", null, t, o.createElement(g.Xa, {
                        className: m(l)
                    }), n, o.createElement(g.Xa, {
                        className: m(c)
                    }), r), s)), i)
                }, t.prototype.renderTopThreeEntries = function() {
                    if (!this.props.topEdges) return null;
                    var e = [];
                    return this.props.topEdges[0] && e.push(this.renderTopThreeEntry(this.props.topEdges[0], i.Gold)), this.props.topEdges[1] && e.push(this.renderTopThreeEntry(this.props.topEdges[1], i.Silver)), this.props.topEdges[2] && e.push(this.renderTopThreeEntry(this.props.topEdges[2], i.Bronze)), e
                }, t.prototype.renderTopSection = function() {
                    var e = Object(p.d)("Weekly Top Cheerers", "Bits--PinnedCheerV2"),
                        t = this.props.secondsRemaining ? this.props.secondsRemaining : 0,
                        n = Math.floor(t / 86400),
                        i = o.createElement(g.W, {
                            type: g.Vb.Span
                        }, Object(p.d)("{time, plural, one {Resets in {time} day} other {Resets in {time} days}}", {
                            time: n
                        }, "Bits--PinnedCheerV2"));
                    return n < 1 && (i = o.createElement(g.W, {
                        type: g.Vb.Span
                    }, Object(p.d)("Resets in less than a day", "Bits--PinnedCheerV2"))), this.props.leaderboardMode === f.AllTime ? (e = Object(p.d)("All-time Top Cheerers", "Bits--PinnedCheerV2"), i = null) : this.props.leaderboardMode === f.Monthly && (e = Object(p.d)("Monthly Top Cheerers", "Bits--PinnedCheerV2")), o.createElement(g.Xa, {
                        display: g.X.Flex,
                        alignItems: g.f.Center,
                        flexDirection: g.Aa.Column
                    }, o.createElement(g.W, {
                        type: g.Vb.H5,
                        bold: !0
                    }, e), i, o.createElement(g.Xa, {
                        className: "bits-leaderboard-expanded__section-break",
                        margin: {
                            y: 1
                        }
                    }))
                }, t.prototype.renderBottomSection = function() {
                    var e = !!this.props.topEdges && this.props.topEdges.length > 0;
                    return o.createElement(g.Xa, {
                        padding: {
                            bottom: 1
                        }
                    }, o.createElement(g.Eb, {
                        borderTop: e
                    }, o.createElement(g.Xa, {
                        display: g.X.Flex,
                        flexDirection: g.Aa.Column,
                        alignItems: g.f.Center,
                        margin: {
                            top: 1
                        }
                    }, o.createElement(g.sb, {
                        asset: g.tb.Bits,
                        type: g.ub.Brand
                    }), o.createElement(g.W, {
                        type: g.Vb.Span,
                        bold: !0
                    }, Object(p.d)("Cheer your way to the top!", "Bits--PinnedCheersV2")), o.createElement(g.U, {
                        to: "https://blog.twitch.tv/earn-new-rewards-for-supporting-your-favorite-creators-da6b34a98827",
                        targetBlank: !0,
                        hoverUnderlineNone: !1
                    }, o.createElement(g.W, {
                        bold: !0
                    }, Object(p.d)("Learn More", "Bits--PinnedCheersV2"))))))
                }, t.prototype.renderTopThreeEntry = function(e, t) {
                    return o.createElement(g.Xa, {
                        key: e.node.id,
                        padding: {
                            x: 1,
                            top: .5
                        }
                    }, o.createElement(M, {
                        id: e.node.id,
                        value: e.node.entryKey,
                        score: e.node.score,
                        bitsConfig: this.props.bitsConfig,
                        medal: t,
                        selfId: this.props.selfId,
                        rank: e.node.rank
                    }))
                }, t.prototype.renderTopTenEntries = function() {
                    var e = this;
                    return this.props.topEdges ? this.props.topEdges.slice(3, 10).map(function(t) {
                        return e.renderTopTenEntry(t.node)
                    }) : null
                }, t.prototype.renderTopTenEntry = function(e) {
                    return o.createElement(g.Xa, {
                        key: e.id,
                        padding: {
                            x: 1,
                            top: .5
                        }
                    }, o.createElement(O, {
                        id: e.id,
                        value: e.entryKey,
                        score: e.score,
                        bitsConfig: this.props.bitsConfig,
                        selfId: this.props.selfId,
                        rank: e.rank
                    }))
                }, t.prototype.shouldRenderBottomContent = function() {
                    var e = this;
                    if (!this.props.topEdges) return !1;
                    var t = !0;
                    return this.props.topEdges.forEach(function(n) {
                        n.node.entryKey === e.props.selfId && (t = !1)
                    }), t
                }, t.prototype.renderUserPlaceEntry = function() {
                    if (!this.props.userPlaceEdge) return null;
                    var e = this.renderTopTenEntry(this.props.userPlaceEdge);
                    return o.createElement(g.Xa, {
                        padding: {
                            top: .5
                        }
                    }, o.createElement(g.Eb, {
                        borderTop: !0
                    }, o.createElement(g.Xa, {
                        padding: {
                            y: .5
                        }
                    }, e)))
                }, t
            }(o.Component);

            function I(e) {
                switch (e) {
                    case 1:
                        return Object(p.d)("Cheer now to be #1!", "Bits--PinnedCheerV2");
                    case 2:
                        return Object(p.d)("Cheer to take #2!", "Bits--PinnedCheerV2");
                    case 3:
                        return Object(p.d)("Cheer to take #3!", "Bits--PinnedCheerV2");
                    default:
                        return Object(p.d)("...", "Bits--PinnedCheerV2")
                }
            }
            n("986b");
            var T = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        if (this.props.data && (this.props.data.loading || this.props.data.error)) return o.createElement(g.Xa, {
                            display: g.X.InlineBlock,
                            alignItems: g.f.Center,
                            flexGrow: 1
                        });
                        var e, t = this.props.bitsConfig ? this.props.bitsConfig : Object(N.a)(),
                            n = null,
                            r = "";
                        if (this.props.data && this.props.data.user) {
                            r = this.props.data.user.displayName || this.props.data.user.login;
                            var s = o.createElement(g.W, {
                                ellipsis: !0,
                                bold: !0
                            }, r);
                            this.props.selfId && this.props.selfId === this.props.entryKey && (s = o.createElement(g.gb, {
                                label: r,
                                type: g.hb.Brand
                            })), n = o.createElement(g.Xa, {
                                ellipsis: !0,
                                className: "bits-leaderboard-header-first-entry__username"
                            }, s)
                        }
                        if (this.props.isEmpty || this.props.data && !this.props.data.user) {
                            var l = I(1);
                            e = o.createElement(g.Xa, {
                                className: "bits-leaderboard-header-first-entry__container",
                                overflow: g.cb.Hidden,
                                display: g.X.InlineFlex,
                                alignItems: g.f.Center,
                                flexGrow: 1
                            }, o.createElement(g.Xa, {
                                flexShrink: 0
                            }, o.createElement(b, {
                                size: a.Big,
                                medal: i.Default
                            })), o.createElement(g.Xa, {
                                className: "bits-leaderboard-header-first-entry__text",
                                margin: {
                                    left: .5
                                }
                            }, o.createElement(g.W, {
                                color: g.O.Link,
                                bold: !0
                            }, l)))
                        } else {
                            var c = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || p.a.defaultAvatarURL;
                            e = o.createElement(g.Xa, {
                                className: "bits-leaderboard-header-first-entry__container",
                                overflow: g.cb.Hidden,
                                display: g.X.InlineFlex,
                                alignItems: g.f.Center,
                                flexGrow: 1
                            }, o.createElement(g.Xa, {
                                flexShrink: 0
                            }, o.createElement(b, {
                                size: a.Big,
                                medal: i.Gold,
                                profileImageUrl: c
                            })), o.createElement(g.Xa, {
                                className: "bits-leaderboard-header-first-entry__text",
                                margin: {
                                    left: .5
                                }
                            }, n, o.createElement(g.Xa, {
                                className: "bits-leaderboard-header-first-entry__score"
                            }, o.createElement(E.a, {
                                animated: !1,
                                showImage: !0,
                                showAmount: !0,
                                prefix: "Cheer",
                                bitsConfig: t,
                                size: E.b.ExtremelySmall,
                                display: g.X.InlineFlex,
                                amount: this.props.score,
                                formattedNumber: !0,
                                alignItems: g.f.Center
                            }))))
                        }
                        this.props.isEmpty || (e = o.createElement(g.Yb, {
                            label: r,
                            direction: g.ac.Bottom
                        }, e));
                        var d = {
                            "bits-leaderboard-header-first-entry": !0,
                            "bits-leaderboard-header-first-entry__empty": this.props.isEmpty
                        };
                        return o.createElement(g.Xa, {
                            className: m(d),
                            flexShrink: 0
                        }, e)
                    }, t
                }(o.Component),
                R = Object(s.compose)(Object(l.a)(S, {
                    name: "data",
                    skip: function(e) {
                        return !e.id || !e.entryKey
                    },
                    options: function(e) {
                        return {
                            variables: {
                                userID: e.entryKey,
                                profileImageWidth: 50
                            }
                        }
                    }
                }))(T),
                j = (n("ifPV"), function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        if (this.props.data && (this.props.data.loading || this.props.data.error)) return o.createElement(g.Xa, {
                            display: g.X.InlineFlex,
                            alignItems: g.f.Center,
                            flexGrow: 1
                        });
                        var e, t = this.props.bitsConfig ? this.props.bitsConfig : Object(N.a)(),
                            n = null,
                            r = "";
                        if (this.props.data && this.props.data.user) {
                            r = this.props.data.user.displayName || this.props.data.user.login;
                            var s = o.createElement(g.W, {
                                ellipsis: !0,
                                bold: !0
                            }, r);
                            this.props.selfId && this.props.selfId === this.props.entryKey && (s = o.createElement(g.gb, {
                                label: r,
                                type: g.hb.Brand
                            })), n = o.createElement(g.Xa, {
                                ellipsis: !0,
                                className: "bits-leaderboard-header-runner-up-entry__username",
                                flexShrink: 1,
                                margin: {
                                    x: .5
                                }
                            }, s)
                        }
                        if (this.props.isEmpty || this.props.data && !this.props.data.user) {
                            var l = I(this.props.rank ? this.props.rank : 0);
                            e = o.createElement(g.Xa, {
                                overflow: g.cb.Hidden,
                                display: g.X.Flex,
                                alignItems: g.f.Center,
                                flexGrow: 0,
                                fullWidth: !0
                            }, o.createElement(g.Xa, {
                                flexShrink: 0
                            }, o.createElement(b, {
                                size: a.Small,
                                medal: i.Default
                            })), o.createElement(g.Xa, {
                                ellipsis: !0,
                                className: "bits-leaderboard-header-runner-up-entry__username",
                                flexShrink: 1,
                                margin: {
                                    x: .5
                                }
                            }, o.createElement(g.W, {
                                color: g.O.Link,
                                bold: !0
                            }, l)))
                        } else {
                            var c = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || p.a.defaultAvatarURL;
                            e = o.createElement(g.Xa, {
                                overflow: g.cb.Hidden,
                                display: g.X.Flex,
                                alignItems: g.f.Center,
                                flexGrow: 0,
                                fullWidth: !0
                            }, o.createElement(g.Xa, {
                                flexShrink: 0
                            }, o.createElement(b, {
                                size: a.Small,
                                medal: this.props.medal,
                                profileImageUrl: c
                            })), n, o.createElement(g.Xa, {
                                flexShrink: 0,
                                className: "bits-leaderboard-header-runner-up-entry__score",
                                margin: {
                                    left: "auto"
                                }
                            }, o.createElement(E.a, {
                                animated: !1,
                                showImage: !0,
                                showAmount: !0,
                                prefix: "Cheer",
                                bitsConfig: t,
                                size: E.b.ExtremelySmall,
                                display: g.X.InlineFlex,
                                amount: this.props.score,
                                formattedNumber: !0,
                                alignItems: g.f.Center
                            })))
                        }
                        return this.props.isEmpty || (e = o.createElement(g.Yb, {
                            label: r,
                            direction: g.ac.Bottom
                        }, e)), o.createElement(g.Xa, {
                            className: "bits-leaderboard-header-runner-up-entry",
                            display: g.X.Flex,
                            alignItems: g.f.Center
                        }, e)
                    }, t
                }(o.Component)),
                A = Object(s.compose)(Object(l.a)(S, {
                    name: "data",
                    skip: function(e) {
                        return !e.id || !e.entryKey
                    },
                    options: function(e) {
                        return {
                            variables: {
                                userID: e.entryKey,
                                profileImageWidth: 50
                            }
                        }
                    }
                }))(j),
                U = (n("MBj5"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.renderFirstPlaceEntry = function() {
                            var e, n = null;
                            return t.props.topEdges && t.props.topEdges[0] && (n = t.props.topEdges[0]), e = n ? o.createElement(R, {
                                selfId: t.props.selfId,
                                id: n.node.id,
                                entryKey: n.node.entryKey,
                                score: n.node.score,
                                bitsConfig: t.props.bitsConfig
                            }) : o.createElement(R, {
                                isEmpty: !0
                            }), o.createElement(g.Pa, {
                                key: 1
                            }, e)
                        }, t.renderExpandArrow = function() {
                            return o.createElement(g.Xa, {
                                className: "pinned-cheer-v2-header--arrow",
                                alignItems: g.f.Stretch,
                                fullHeight: !0,
                                display: g.X.InlineFlex,
                                attachTop: !0,
                                position: g.jb.Absolute
                            }, o.createElement(g.z, {
                                size: g.D.Small,
                                fullWidth: !0,
                                type: g.F.Text,
                                onClick: t.props.toggleExpand
                            }, o.createElement(g.sb, {
                                asset: g.tb.AngleDown,
                                height: 20,
                                width: 20
                            })))
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        var e = this.renderFirstPlaceEntry(),
                            t = null,
                            n = null,
                            a = this.renderExpandArrow();
                        if (this.props.topEdges && this.props.topEdges[0]) {
                            t = this.renderRunnerUpEntry(2, i.Silver);
                            var r = this.props.topEdges[1] ? 3 : 0;
                            n = this.renderRunnerUpEntry(r, i.Bronze)
                        }
                        return o.createElement(g.Eb, {
                            className: "pinned-cheer-v2-header",
                            background: g.r.Base,
                            position: g.jb.Relative
                        }, o.createElement(g.Xa, {
                            className: "pinned-cheer-v2-header__users",
                            display: g.X.InlineFlex,
                            flexWrap: g.Ba.NoWrap,
                            justifyContent: g.Wa.Between,
                            fullHeight: !0
                        }, e, o.createElement(g.Xa, {
                            className: "pinned-cheer-v2-header__runner-up-entries",
                            display: g.X.Flex,
                            flexShrink: 1,
                            flexWrap: g.Ba.NoWrap,
                            justifyContent: g.Wa.Between,
                            flexDirection: g.Aa.Column
                        }, t, n)), a)
                    }, t.prototype.renderRunnerUpEntry = function(e, t) {
                        var n, a = null;
                        return e > 0 && this.props.topEdges && this.props.topEdges[e - 1] && (a = this.props.topEdges[e - 1]), n = a ? o.createElement(A, {
                            selfId: this.props.selfId,
                            id: a.node.id,
                            entryKey: a.node.entryKey,
                            score: a.node.score,
                            medal: t,
                            bitsConfig: this.props.bitsConfig
                        }) : o.createElement(A, {
                            isEmpty: !0,
                            medal: i.Default,
                            rank: e
                        }), o.createElement(g.Pa, {
                            key: e
                        }, n)
                    }, t
                }(o.Component)),
                L = n("+LJB"),
                B = n("RiD7"),
                x = n("Qime"),
                F = (n("MIhh"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            isExpanded: !1
                        }, t.toggleIsExpanded = function() {
                            t.setState(function(e) {
                                return {
                                    isExpanded: !e.isExpanded
                                }
                            }, function() {
                                t.state.isExpanded && t.onExpandClick()
                            })
                        }, t.onExpandClick = function() {
                            var e = t.props,
                                n = e.channelID,
                                i = e.userID,
                                a = e.data.user;
                            if (a && a.cheer && a.cheer.leaderboard && a.cheer.settings && a.cheer.settings.leaderboard && a.cheer.settings.leaderboard.isEnabled) {
                                var r = a.cheer.settings.leaderboard.timePeriodType,
                                    o = a.cheer.leaderboard.items.edges.slice(0, 10),
                                    s = !1;
                                i && (s = o.findIndex(function(e) {
                                    return e.node.entryKey === i
                                }) >= 0), Object(B.i)({
                                    leaderboardSize: o.length,
                                    leaderboardMode: r || f.AllTime,
                                    userPresentInLeaderboard: s,
                                    userID: i,
                                    channelID: n
                                })
                            }
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        var e;
                        return e = this.renderLeaderboard(), o.createElement(g.Xa, {
                            zIndex: g.ic.Default
                        }, e)
                    }, t.prototype.renderLeaderboard = function() {
                        if (this.props.data.error || !(this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.leaderboard)) return null;
                        if (!this.props.data.user.cheer.settings || !this.props.data.user.cheer.settings.leaderboard || !this.props.data.user.cheer.settings.leaderboard.isEnabled) return null;
                        var e = this.props.data.user.cheer.leaderboard.items.edges.slice(0, 10),
                            t = null,
                            n = this.props.data.user.cheer.settings.leaderboard.timePeriodType || f.AllTime;
                        this.props.data.user.self && this.props.data.user.self.bitsLeaderboardItem && (t = this.props.data.user.self.bitsLeaderboardItem);
                        var i = null;
                        this.state.isExpanded && (i = o.createElement(D, {
                            topEdges: e,
                            userPlaceEdge: t,
                            toggleExpand: this.toggleIsExpanded,
                            selfId: this.props.userID,
                            bitsConfig: this.props.bitsConfig,
                            leaderboardMode: n,
                            secondsRemaining: this.props.data.user.cheer.leaderboard.secondsRemaining
                        }));
                        var a = null;
                        return this.state.isExpanded || (a = o.createElement(U, {
                            topEdges: e,
                            toggleExpand: this.toggleIsExpanded,
                            selfId: this.props.userID,
                            bitsConfig: this.props.bitsConfig
                        })), o.createElement(g.Xa, {
                            className: "pinned-cheer-v2",
                            zIndex: g.ic.Default
                        }, o.createElement(g.Eb, {
                            borderBottom: !0
                        }, a, i))
                    }, t
                }(o.Component)),
                P = Object(s.compose)(Object(l.a)(x, {
                    name: "data",
                    options: function(e) {
                        return {
                            variables: {
                                channelID: e.channelID
                            }
                        }
                    }
                }), Object(c.a)(function(e) {
                    return {
                        query: x,
                        variables: {
                            channelID: e.channelID
                        },
                        topic: Object(u.d)(e.channelID),
                        type: d.PubsubMessageType.BitsChannelSettingsEvent,
                        mutator: function(e, t) {
                            if (t) return t && t.user && null !== t.user.cheer && null !== t.user.cheer.leaderboard && null !== t.user.cheer.settings.leaderboard && void 0 !== e.updates.leaderboard_enabled && (t.user.cheer.settings.leaderboard.isEnabled = e.updates.leaderboard_enabled), t
                        }
                    }
                }), Object(c.a)(function(e) {
                    return Object(L.a)(x, e.channelID, e.data.user && e.data.user.cheer && e.data.user.cheer.leaderboard, e.userID)
                }))(F),
                H = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            cheerIsTall: !1,
                            recentCheerID: null,
                            recentCheerExpireTime: null,
                            pcheersV2Enabled: !1
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        return o.createElement(P, {
                            channelID: this.props.channelID,
                            userID: this.props.userID,
                            badgeData: this.props.badgeData,
                            bitsConfig: this.props.bitsConfig,
                            blockLinks: this.props.blockLinks,
                            currentUserDisplayName: this.props.currentUserDisplayName,
                            currentUserLogin: this.props.currentUserLogin
                        })
                    }, t
                }(o.Component),
                W = n("/MKj"),
                V = n("kRBY");
            var G = Object(W.connect)(function(e) {
                var t = Object(V.e)(e);
                return {
                    isStaff: t && t.roles && t.roles.isStaff
                }
            })(H);
            n.d(t, !1, function() {
                return H
            }), n.d(t, "a", function() {
                return G
            })
        },
        r2XO: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("q1tI"),
                r = n("/MKj"),
                o = n("fvjX"),
                s = n("/7QA"),
                l = n("x7UT"),
                c = n("0Log"),
                d = n("/aPz"),
                u = n("SceP"),
                m = n("ZtEv"),
                p = n("VS9Q");
            var h = n("nInp"),
                g = n("DLhE"),
                f = n("MJbm"),
                b = n("8/mp"),
                v = n("TSYQ"),
                k = n("oJmH"),
                C = n("yR8l"),
                y = n("geRD"),
                E = n("b5C3"),
                S = n("XmgI"),
                N = n("0Lz3"),
                _ = n("uIkQ"),
                O = n("+pBb"),
                w = n("tY8L"),
                M = n("ZVTe"),
                D = n("DMoW"),
                I = n("kRBY"),
                T = n("TApp"),
                R = n("KGti"),
                j = n("sblI"),
                A = n("iyGE"),
                U = n("gO1k");
            var L = n("a2UF"),
                B = n("AREq");
            var x = n("Av0x"),
                F = n("5g1g"),
                P = n("Ue10"),
                H = (n("L6L7"), function(e) {
                    var t = e.onBanUser,
                        n = P.tb.Ban,
                        i = Object(s.d)("Ban {login}", {
                            login: e.senderLogin
                        }, "ModerationIcons"),
                        r = "chat-ban-button",
                        o = null;
                    return e.isMessageBanned && (t = e.onUnbanUser, n = P.tb.FollowCheck, i = Object(s.d)("Unban {login}", {
                        login: e.senderLogin
                    }, "ModerationIcons"), r = "chat-unban-button"), !e.isMessageDeleted && e.canDelete && (o = a.createElement(F.a, {
                        name: "single_message_delete"
                    }, a.createElement(P.Eb, {
                        display: P.X.InlineFlex,
                        verticalAlign: P.fc.Bottom
                    }, a.createElement(P.Yb, {
                        align: P.Zb.Left,
                        label: Object(s.d)("Delete message", "ModerationIcons")
                    }, a.createElement("button", {
                        className: "mod-icon",
                        onClick: e.onDelete,
                        "data-test-selector": "chat-delete-button"
                    }, a.createElement(P.sb, {
                        width: 16,
                        height: 16,
                        type: P.ub.Inherit,
                        asset: P.tb.Trash
                    })))))), a.createElement(P.Eb, {
                        color: P.O.Alt2,
                        display: P.X.Inline,
                        margin: {
                            right: .5
                        }
                    }, a.createElement(P.Eb, {
                        display: P.X.InlineFlex,
                        verticalAlign: P.fc.Bottom
                    }, a.createElement(P.Yb, {
                        align: P.Zb.Left,
                        label: i
                    }, a.createElement("button", {
                        className: "mod-icon",
                        onClick: t,
                        "data-test-selector": r
                    }, a.createElement(P.sb, {
                        width: 16,
                        height: 16,
                        type: P.ub.Inherit,
                        asset: n
                    })))), a.createElement(P.Eb, {
                        display: P.X.InlineFlex,
                        verticalAlign: P.fc.Bottom
                    }, a.createElement(P.Yb, {
                        align: P.Zb.Left,
                        label: Object(s.d)("Timeout {login}", {
                            login: e.senderLogin
                        }, "ModerationIcons")
                    }, a.createElement("button", {
                        className: "mod-icon",
                        onClick: e.onTimeoutUser,
                        "data-test-selector": "chat-timeout-button"
                    }, a.createElement(P.sb, {
                        width: 16,
                        height: 16,
                        type: P.ub.Inherit,
                        asset: P.tb.Timeout
                    })))), o)
                }),
                W = 600,
                V = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onBanUser = function() {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var e, t;
                                return i.__generator(this, function(n) {
                                    switch (n.label) {
                                        case 0:
                                            if (this.props.confirmModerationAction && !this.props.confirmModerationAction()) return [3, 4];
                                            e = Object(T.a)(Object(s.d)("Unable to ban user.", "ModerationIcons")), n.label = 1;
                                        case 1:
                                            return n.trys.push([1, 3, , 4]), [4, this.props.banUserMutation(this.props.senderLogin)];
                                        case 2:
                                            return (t = n.sent().banUserFromChatRoom) ? t.error ? this.pushMessage(Object(T.a)(Object(B.a)(this.props.senderLogin, t.error.code))) : this.pushMessage(Object(j.a)(m.e.Ban, this.props.senderLogin, null, null)) : this.pushMessage(e), [3, 4];
                                        case 3:
                                            return n.sent(), this.pushMessage(e), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, t.onTimeoutUser = function() {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var e, t;
                                return i.__generator(this, function(n) {
                                    switch (n.label) {
                                        case 0:
                                            if (this.props.confirmModerationAction && !this.props.confirmModerationAction()) return [3, 4];
                                            e = Object(T.a)(Object(s.d)("Unable to timeout user.", "ModerationIcons")), n.label = 1;
                                        case 1:
                                            return n.trys.push([1, 3, , 4]), [4, this.props.banUserMutation(this.props.senderLogin, W)];
                                        case 2:
                                            return (t = n.sent().banUserFromChatRoom) ? t.error ? this.pushMessage(Object(T.a)(Object(B.a)(this.props.senderLogin, t.error.code, !0))) : this.pushMessage(Object(j.a)(m.e.Timeout, this.props.senderLogin, null, W)) : this.pushMessage(e), [3, 4];
                                        case 3:
                                            return n.sent(), this.pushMessage(e), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, t.onUnbanUser = function() {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var e, t, n;
                                return i.__generator(this, function(i) {
                                    switch (i.label) {
                                        case 0:
                                            if (this.props.confirmModerationAction && !this.props.confirmModerationAction()) return [3, 4];
                                            e = Object(T.a)(Object(s.d)("Unable to unban user.", "ModerationIcons")), i.label = 1;
                                        case 1:
                                            return i.trys.push([1, 3, , 4]), [4, this.props.unbanUserMutation(this.props.senderLogin)];
                                        case 2:
                                            return (t = i.sent().unbanUserFromChatRoom) ? t.error ? this.pushMessage(Object(T.a)(Object(x.a)(this.props.senderLogin, t.error.code))) : this.props.sessionUser && (n = Object(R.l)(c.ModerationActions.Unban, this.props.sessionUser.login, this.props.sessionUser.id, this.props.targetUserID, this.props.senderLogin, void 0, void 0), this.pushMessage(n)) : this.pushMessage(e), [3, 4];
                                        case 3:
                                            return i.sent(), this.pushMessage(e), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, t.onDelete = function() {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var e, t, n, a;
                                return i.__generator(this, function(i) {
                                    switch (i.label) {
                                        case 0:
                                            if (this.props.confirmModerationAction && !this.props.confirmModerationAction()) return [3, 4];
                                            i.label = 1;
                                        case 1:
                                            return i.trys.push([1, 3, , 4]), e = {
                                                channelID: this.props.channelID,
                                                messageID: this.props.messageID
                                            }, [4, this.props.deleteChatMessageMutation(Object(y.a)(e))];
                                        case 2:
                                            return (t = i.sent().data.deleteChatMessage) && t.responseCode !== D.u.SUCCESS && (n = t.message && t.message.sender && t.message.sender.displayName || this.props.senderLogin, a = Object(T.a)(function(e, t) {
                                                switch (e) {
                                                    case D.u.FORBIDDEN:
                                                        return Object(s.d)("You don't have permission to delete messages.", "DeleteChatMessageErrorCode");
                                                    case D.u.TARGET_IS_BROADCASTER:
                                                        return Object(s.d)("You cannot delete the broadcaster's messages.", "DeleteChatMessageErrorCode");
                                                    case D.u.TARGET_IS_MODERATOR:
                                                        return Object(s.d)("You cannot delete messages from moderator {senderDisplayName}", {
                                                            senderDisplayName: t
                                                        }, "DeleteChatMessageErrorCode");
                                                    default:
                                                        throw new Error("Unrecognized operation result")
                                                }
                                            }(t.responseCode, n)), this.pushMessage(a)), [3, 4];
                                        case 3:
                                            return i.sent(), a = Object(T.a)(Object(s.d)("Unable to delete message.", "ModerationIcons")), this.pushMessage(a), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, t.pushMessage = function(e) {
                            t.props.onPushMessage && t.props.onPushMessage(e)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return this.props.sessionUser && this.props.sessionUser.id === this.props.targetUserID ? null : a.createElement(H, {
                            isMessageDeleted: this.props.isMessageDeleted,
                            isMessageBanned: this.props.isMessageBanned,
                            canDelete: !!this.props.messageID,
                            onBanUser: this.onBanUser,
                            onTimeoutUser: this.onTimeoutUser,
                            onUnbanUser: this.onUnbanUser,
                            onDelete: this.onDelete,
                            senderLogin: this.props.senderLogin
                        })
                    }, t
                }(a.Component),
                G = function(e) {
                    return {
                        channelID: e.channelID
                    }
                };
            var X = Object(k.compose)(Object(A.a)(G), Object(L.a)(G), function() {
                    var e = this;
                    return Object(C.a)(U, {
                        props: function(t) {
                            return {
                                deleteChatMessageMutation: function(n) {
                                    return i.__awaiter(e, void 0, void 0, function() {
                                        return i.__generator(this, function(e) {
                                            switch (e.label) {
                                                case 0:
                                                    if (!t.mutate) return [3, 5];
                                                    e.label = 1;
                                                case 1:
                                                    return e.trys.push([1, 3, , 4]), [4, t.mutate(n)];
                                                case 2:
                                                    return [2, {
                                                        data: e.sent().data
                                                    }];
                                                case 3:
                                                    throw e.sent(), new Error("Unable to delete message");
                                                case 4:
                                                    return [3, 6];
                                                case 5:
                                                    throw new Error("Delete chat message mutation is not ready");
                                                case 6:
                                                    return [2]
                                            }
                                        })
                                    })
                                }
                            }
                        }
                    })
                }(), Object(r.connect)(function(e) {
                    return {
                        sessionUser: Object(I.e)(e)
                    }
                }))(V),
                z = n("cys1"),
                q = n("EE1E"),
                Q = n("oK83"),
                Y = (n("uYvD"), "chat-deleted-message-placeholder"),
                K = "chat-hidden-message-placeholder",
                $ = "chat-hidden-username-placeholder",
                Z = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            alwaysShowMessage: !1
                        }, t.renderModerationIcons = function() {
                            return t.props.isCurrentUserModerator && t.props.showModerationIcons ? a.createElement(X, {
                                targetUserID: t.props.message.user.userID,
                                confirmModerationAction: t.props.confirmModerationAction,
                                channelID: t.props.channelID,
                                isMessageDeleted: t.props.message.deleted,
                                isMessageBanned: t.props.message.banned,
                                senderLogin: t.props.message.user.userLogin,
                                messageID: t.props.message.id,
                                onPushMessage: t.props.onPushMessage
                            }) : null
                        }, t.renderMessageBody = function() {
                            if (t.props.isHidden && !t.state.alwaysShowMessage && t.props.isCurrentUserModerator) {
                                var e = Object(s.d)("message hidden from blocked user", "ChatLine");
                                return a.createElement("span", {
                                    key: "hidden_message",
                                    className: "chat-line__message--hidden",
                                    "data-a-target": K
                                }, a.createElement("a", {
                                    href: "",
                                    onClick: t.hiddenMessageClickHandler
                                }, "<" + e + ">"))
                            }
                            if (t.props.isDeleted && !t.state.alwaysShowMessage) {
                                var n = Object(s.d)("message deleted", "ChatLine");
                                return t.props.isCurrentUserModerator || t.props.isCurrentUserStaff ? a.createElement("span", {
                                    key: "deleted",
                                    className: "chat-line__message--deleted",
                                    "data-a-target": Y
                                }, a.createElement("a", {
                                    href: "",
                                    onClick: t.alwaysShowMessage
                                }, "<" + n + ">")) : a.createElement("span", {
                                    key: "deleted",
                                    className: "chat-line__message--deleted",
                                    "data-a-target": Y
                                }, "<" + n + ">")
                            }
                            return Object(z.f)(t.props.message.messageParts)
                        }, t.renderMessageAuthor = function() {
                            var e = t.props,
                                n = e.badgeSets,
                                i = e.message,
                                r = e.theme,
                                o = e.useHighContrastColors;
                            return t.props.isHidden && !t.state.alwaysShowMessage && t.props.isCurrentUserModerator ? a.createElement("span", {
                                key: "hidden_username",
                                className: "chat-line__username--hidden",
                                "data-a-target": $
                            }, a.createElement("a", {
                                href: "",
                                onClick: t.hiddenMessageClickHandler
                            }, Object(s.d)("User Hidden", "ChatLine"))) : a.createElement(a.Fragment, null, t.renderModerationIcons(), a.createElement(_.b, {
                                badgeSets: n,
                                badgesToRender: i.badges
                            }), a.createElement("button", {
                                onClick: t.usernameClickHandler,
                                className: "chat-line__username"
                            }, a.createElement(M.a, {
                                userData: i.user,
                                highContrastUsernameColor: o,
                                theme: r
                            })))
                        }, t.alwaysShowMessage = function(e) {
                            e && e.preventDefault(), t.setState({
                                alwaysShowMessage: !0
                            })
                        }, t.hiddenMessageClickHandler = function(e) {
                            t.alwaysShowMessage(e), t.props.message.user.userID && t.props.onHiddenMessageClick(t.props.message.user.userID)
                        }, t.usernameClickHandler = function(e) {
                            t.props.onUsernameClick(t.props.message.user.userLogin, Q.a.chat_message, t.props.message.id, e.currentTarget.getBoundingClientRect().bottom)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = this.props,
                            t = e.className,
                            n = e.message,
                            i = e.showTimestamps,
                            r = e.theme,
                            o = e.useHighContrastColors,
                            s = {},
                            l = ": ";
                        if (n.messageType === m.c.Action) {
                            var c = n.user.color;
                            o && c && (c = "#" + Object(q.a)(c, r)), s = {
                                color: c
                            }, l = " "
                        }
                        var d = null;
                        return i && (d = Object(z.l)(n.timestamp)), a.createElement("div", {
                            className: v(t, "chat-line__message"),
                            style: s,
                            "data-a-target": "chat-line-message"
                        }, d, this.renderMessageAuthor(), a.createElement("span", {
                            key: "separator",
                            "aria-hidden": "true"
                        }, l), this.renderMessageBody())
                    }, t
                }(a.Component);
            var J = Object(k.compose)(Object(r.connect)(void 0, function(e) {
                    return Object(o.bindActionCreators)({
                        onUsernameClick: w.e,
                        onHiddenMessageClick: O.Q
                    }, e)
                }))(Z),
                ee = n("p52R"),
                te = n("a1OF"),
                ne = n("9yes"),
                ie = n("R2Ti"),
                ae = n("g17B"),
                re = n("frkH"),
                oe = n("4zGI"),
                se = {
                    badges: {
                        twitchbot: "1"
                    },
                    bits: 0,
                    color: "#6441A5",
                    displayName: "AutoMod",
                    id: "automod",
                    userID: "automod",
                    username: "automod",
                    userType: ee.a.GlobalMod,
                    emotes: {}
                };

            function le(e) {
                var t;
                switch (e) {
                    case "aggressive":
                        t = Object(s.d)("aggressive", "AutoModLine");
                        break;
                    case "sexual":
                        t = Object(s.d)("sexual", "AutoModLine");
                        break;
                    case "profanity":
                        t = Object(s.d)("profanity", "AutoModLine");
                        break;
                    case "identity":
                        t = Object(s.d)("identity", "AutoModLine");
                        break;
                    default:
                        return Object(s.d)("Message is being held for review. Allow will post it to chat.", "AutoModLine")
                }
                return Object(s.d)("Held a message for reason: {category}. Allow will post it to chat.", {
                    category: t
                }, "AutoModLine")
            }
            var ce = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            isResolved: !1
                        }, t.getAllowMessageCallback = function(e) {
                            return e !== m.a.CheerMessageRejectedPrompt ? t.allowAutoModRejectedMessage : t.allowAutoModRejectedCheerMessage
                        }, t.getDenyMessageCallback = function(e) {
                            return e !== m.a.CheerMessageRejectedPrompt ? t.denyAutoModRejectedMessage : t.denyAutoModRejectedCheerMessage
                        }, t.allowAutoModRejectedMessage = function() {
                            t.setState({
                                isResolved: !0
                            });
                            var e = t.props.message;
                            e.autoModType === m.a.MessageRejectedPrompt && t.props.allowRejectedChatMessage && t.props.allowRejectedChatMessage(Object(y.a)({
                                id: e.rejectedMessage.id
                            }))
                        }, t.denyAutoModRejectedMessage = function() {
                            t.setState({
                                isResolved: !0
                            });
                            var e = t.props.message;
                            e.autoModType === m.a.MessageRejectedPrompt && t.props.denyRejectedChatMessage && t.props.denyRejectedChatMessage(Object(y.a)({
                                id: e.rejectedMessage.id
                            }))
                        }, t.allowAutoModRejectedCheerMessage = function() {
                            t.setState({
                                isResolved: !0
                            });
                            var e = t.props,
                                n = e.message,
                                i = e.allowRejectedCheer;
                            if (n.autoModType === m.a.CheerMessageRejectedPrompt && i) {
                                var a = {
                                    id: n.rejectedMessage.id,
                                    targetUserID: n.targetUserID
                                };
                                i(Object(y.a)(a))
                            }
                        }, t.denyAutoModRejectedCheerMessage = function() {
                            t.setState({
                                isResolved: !0
                            });
                            var e = t.props,
                                n = e.message,
                                i = e.denyRejectedCheer;
                            if (n.autoModType === m.a.CheerMessageRejectedPrompt && i) {
                                var a = {
                                    id: n.rejectedMessage.id,
                                    targetUserID: n.targetUserID
                                };
                                i(Object(y.a)(a))
                            }
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e, t = this.props.message,
                            n = i.__assign({}, se);
                        switch (t.autoModType) {
                            case m.a.MessageRejectedPrompt:
                                e = le(t.category);
                                break;
                            case m.a.CheerMessageRejectedPrompt:
                                e = le(t.category);
                                var r = {
                                    emotes: []
                                };
                                this.props.data && this.props.data.user && this.props.data.user.cheer && (r = this.props.data.user.cheer);
                                var o = Object(S.f)(t.originalMessage, Object(N.a)(r.emotes || []));
                                t.rejectedMessage = i.__assign({}, t.rejectedMessage, {
                                    messageParts: o
                                });
                                break;
                            case m.a.MessageRejected:
                                e = Object(s.d)("Hey! Your message is being checked by mods and has not been sent.", "AutoModLine");
                                break;
                            case m.a.MessageAllowed:
                                e = Object(s.d)("Mods have allowed your message. Happy chatting!", "AutoModLine");
                                var l = (e += " VoHiYo").match("VoHiYo");
                                l && void 0 !== l.index && (n.emotes["" + l.index] = {
                                    startIndex: l.index,
                                    id: "81274"
                                });
                                break;
                            case m.a.MessageDenied:
                                e = Object(s.d)("Mods have removed your message.", "AutoModLine");
                                break;
                            case m.a.CheerMessageDenied:
                                e = Object(s.d)("Mods have removed your text message. Your Cheermote was sent.", "AutoModLine");
                                break;
                            case m.a.CheerMessageTimeout:
                                e = Object(s.d)("Mods did not approve your message in time.  Your Cheermote was sent without the text.", "AutoModLine");
                                break;
                            case m.a.MessageModApproved:
                            case m.a.MessageModDenied:
                                return null;
                            default:
                                throw new Error("Invalid message type")
                        }
                        var c = Object(te.a)(e, n, S.a, !1);
                        switch (t.autoModType) {
                            case m.a.MessageRejectedPrompt:
                            case m.a.CheerMessageRejectedPrompt:
                                if (!(t.autoModType !== m.a.CheerMessageRejectedPrompt || this.props.data && this.props.data.user && this.props.data.user.cheer)) return null;
                                if (t.rejectedMessage.deleted) return null;
                                if (this.state.isResolved) return a.createElement(P.Xa, {
                                    className: "chat-line__status"
                                }, Object(s.d)("Thank you for your feedback!", "ChatLine"));
                                return a.createElement(P.Xa, {
                                    className: "chat-line__message"
                                }, a.createElement(E.a, {
                                    badgeSets: this.props.badgeSets,
                                    badgesToRender: c.badges
                                }), a.createElement(M.a, {
                                    userData: c.user
                                }), a.createElement("span", {
                                    key: "separator"
                                }, ": "), Object(z.f)(c.messageParts), a.createElement(P.Xa, {
                                    key: "automod-prompt",
                                    className: "chat-line__nested-component--float-right"
                                }, a.createElement(P.z, {
                                    size: P.D.Small,
                                    onClick: this.getAllowMessageCallback(t.autoModType),
                                    type: P.F.Text
                                }, Object(s.d)("Allow", "AutoModLine")), a.createElement(P.W, {
                                    type: P.Vb.Span
                                }, "•"), a.createElement(P.z, {
                                    size: P.D.Small,
                                    onClick: this.getDenyMessageCallback(t.autoModType),
                                    type: P.F.Text
                                }, Object(s.d)("Deny", "AutoModLine"))), a.createElement(J, i.__assign({}, this.props, {
                                    isCurrentUserStaff: !1,
                                    isDeleted: !1,
                                    isHidden: !1,
                                    showTimestamps: !1,
                                    className: v(["chat-line__message--alert", "chat-line__message--special", "chat-line__message--clearfix"]),
                                    message: t.rejectedMessage
                                })));
                            case m.a.MessageRejected:
                            case m.a.MessageAllowed:
                            case m.a.MessageDenied:
                            case m.a.CheerMessageDenied:
                            case m.a.CheerMessageTimeout:
                                return a.createElement(P.Xa, {
                                    className: v(["chat-line__message", "chat-line__message--special", "chat-line__message--alert"])
                                }, a.createElement(E.a, {
                                    badgeSets: this.props.badgeSets,
                                    badgesToRender: c.badges
                                }), a.createElement(M.a, {
                                    userData: c.user
                                }), a.createElement("span", {
                                    key: "separator"
                                }, ": "), Object(z.f)(c.messageParts));
                            default:
                                throw new Error("Invalid message type")
                        }
                    }, t
                }(a.Component),
                de = Object(k.compose)(Object(C.a)(ne, {
                    name: "allowRejectedChatMessage",
                    options: {}
                }), Object(C.a)(re, {
                    name: "denyRejectedChatMessage",
                    options: {}
                }), Object(C.a)(ie, {
                    name: "allowRejectedCheer"
                }), Object(C.a)(oe, {
                    name: "denyRejectedCheer"
                }), Object(C.a)(ae, {
                    name: "data",
                    options: function(e) {
                        return {
                            variables: {
                                channelID: e.channelID
                            }
                        }
                    }
                }))(ce),
                ue = n("QVaV"),
                me = n("8SX2"),
                pe = n("CiVV"),
                he = function(e) {
                    var t = e.event,
                        n = t.promoGiftTotal,
                        i = t.promoName,
                        r = t.user,
                        o = a.createElement(me.a, {
                            contentID: r.id,
                            login: r.username,
                            sourceType: Q.a.chat_message
                        }, Object(ue.a)(r.username, r.displayName)),
                        l = i && n ? Object(s.d)("{recipientButton} is continuing the Gift Sub they got from an anonymous gifter!        They're one of {promoGiftTotal} gift subs to continue this {promoName}.", {
                            promoGiftTotal: n,
                            promoName: i,
                            recipientButton: o
                        }, "AnonGiftPaidUpgradeNoticeLine") : Object(s.d)("{recipientButton} is continuing the Gift Sub they got from an anonymous gifter!", {
                            recipientButton: o
                        }, "AnonGiftPaidUpgradeNoticeLine");
                    return a.createElement(P.Xa, {
                        alignItems: P.f.Start,
                        display: P.X.Flex
                    }, a.createElement(P.Eb, {
                        color: P.O.Alt2,
                        display: P.X.Flex,
                        flexDirection: P.Aa.Column,
                        flexShrink: 0,
                        margin: {
                            right: .5
                        }
                    }, Object(pe.a)()), a.createElement(P.W, {
                        color: P.O.Alt2,
                        type: P.Vb.Span
                    }, l))
                };
            he.displayName = "AnonGiftPaidUpgradeNoticeLine";
            var ge = n("0WFu"),
                fe = "All-Access Pass",
                be = function(e) {
                    var t = e.event,
                        n = a.createElement(me.a, {
                            contentID: t.recipientID,
                            login: t.recipientLogin,
                            sourceType: Q.a.chat_message
                        }, Object(ue.a)(t.recipientLogin, t.recipientDisplayName));
                    return a.createElement(P.Xa, {
                        alignItems: P.f.Start,
                        display: P.X.Flex
                    }, a.createElement(P.Eb, {
                        color: P.O.Alt2,
                        display: P.X.Flex,
                        flexDirection: P.Aa.Column,
                        flexShrink: 0,
                        margin: {
                            right: .5
                        }
                    }, Object(pe.a)()), a.createElement(P.W, {
                        color: P.O.Alt2,
                        type: P.Vb.Span
                    }, function(e, t) {
                        return e.planName === fe ? Object(s.d)("An anonymous gifter gave {recipientButton} an All-Access Pass!", {
                            recipientButton: t
                        }, "AnonSubGiftNoticeLine") : "custom" === e.plan ? Object(s.d)("An anonymous gifter gave {recipientButton} a Sub!", {
                            recipientButton: t
                        }, "AnonSubGiftNoticeLine") : Object(s.d)("An anonymous gifter gave {recipientButton} a Tier {tierNumber} Sub!", {
                            recipientButton: t,
                            tierNumber: Object(ge.a)(e.plan) || 1
                        }, "AnonSubGiftNoticeLine")
                    }(t.methods, n)))
                };
            be.displayName = "AnonSubGiftNoticeLine";
            var ve = function(e) {
                var t = e.event,
                    n = t.channel,
                    i = t.massGiftCount,
                    r = t.plan,
                    o = "custom" === r ? Object(s.d)("{massGiftCount, plural,        one {An anonymous gifter is gifting {massGiftCount} Sub to {channel}'s community!}        other {An anonymous gifter is gifting {massGiftCount} Subs to {channel}'s community!}}", {
                        channel: n,
                        massGiftCount: i
                    }, "AnonSubMysteryGiftNoticeLine") : Object(s.d)("{massGiftCount, plural,        one {An anonymous gifter is gifting {massGiftCount} Tier {tierNumber} Sub to {channel}'s community!}        other {An anonymous gifter is gifting {massGiftCount} Tier {tierNumber} Subs to {channel}'s community!}}", {
                        channel: n,
                        massGiftCount: i,
                        tierNumber: Object(ge.a)(r) || 1
                    }, "AnonSubMysteryGiftNoticeLine");
                return a.createElement(P.Xa, {
                    alignItems: P.f.Start,
                    display: P.X.Flex
                }, a.createElement(P.Eb, {
                    color: P.O.Alt2,
                    display: P.X.Flex,
                    flexDirection: P.Aa.Column,
                    flexShrink: 0,
                    margin: {
                        right: .5
                    }
                }, Object(pe.a)()), a.createElement(P.W, {
                    color: P.O.Alt2,
                    type: P.Vb.Span
                }, o))
            };
            ve.displayName = "AnonSubMysteryGiftNoticeLine";
            var ke = function(e) {
                var t = e.event,
                    n = a.createElement(me.a, {
                        contentID: t.user.id,
                        login: t.user.username,
                        sourceType: Q.a.chat_message
                    }, Object(ue.a)(t.user.username, t.user.displayName)),
                    i = a.createElement(me.a, {
                        contentID: t.user.id,
                        login: t.senderLogin,
                        sourceType: Q.a.chat_message
                    }, Object(ue.a)(t.senderLogin, t.senderName));
                return a.createElement(P.W, {
                    color: P.O.Alt2,
                    type: P.Vb.Span
                }, t.promoName && t.promoGiftTotal ? Object(s.d)("{recipientButton} is continuing the Gift Sub they got from {gifterButton}!            They're one of {promoGiftTotal} gift subs to continue this {promoName}.", {
                    gifterButton: i,
                    promoGiftTotal: t.promoGiftTotal,
                    promoName: t.promoName,
                    recipientButton: n
                }, "GiftPaidUpgradeNoticeLine") : Object(s.d)("{recipientButton} is continuing the Gift Sub they got from {gifterButton}!", {
                    gifterButton: i,
                    recipientButton: n
                }, "GiftPaidUpgradeNoticeLine"))
            };
            ke.displayName = "GiftPaidUpgradeNoticeLine";
            n("xDdc");
            var Ce = function(e) {
                return a.createElement(P.Xa, {
                    className: "user-notice-line",
                    margin: {
                        y: .5
                    },
                    padding: {
                        right: 2,
                        y: .5
                    }
                }, e.children)
            };
            Ce.displayName = "UserNoticeLine";
            var ye = n("OvAg"),
                Ee = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = this.props.message.params,
                            t = this.props.data,
                            n = t.channel,
                            i = t.loading,
                            r = t.error;
                        if (i || r) return null;
                        var o = Object(s.d)("{displayName} is raiding with a party of {viewerCount}.", {
                            displayName: a.createElement("strong", null, n.displayName),
                            viewerCount: a.createElement("strong", null, e.viewerCount)
                        }, "RaidIncomingMessage");
                        return a.createElement(Ce, {
                            "data-test-selector": "incoming-raid"
                        }, a.createElement(P.Xa, {
                            display: P.X.Flex,
                            alignItems: P.f.Center
                        }, a.createElement(P.q, {
                            alt: n.displayName,
                            src: n.profileImageURL,
                            size: 30
                        }), a.createElement(P.Eb, {
                            color: P.O.Base,
                            margin: {
                                left: 1
                            }
                        }, o)))
                    }, t
                }(a.Component),
                Se = Object(C.a)(ye, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.message.params.login
                            }
                        }
                    }
                })(Ee),
                Ne = n("5zf8"),
                _e = n("x0+1"),
                Oe = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = this.props.moderationActionEvent,
                            t = e.createdByLogin,
                            n = null;
                        if (e.moderationActionType === m.d.AutoModEnabled) n = Object(s.d)("AutoMod has been enabled for this channel.", "ModerationActionLine");
                        else if (e.level === R.a.Channel) switch (e.moderationActionType) {
                            case m.d.Clear:
                                n = Object(s.d)("{user} cleared chat for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case m.d.EmoteOnly:
                                n = Object(s.d)("{user} enabled emote-only mode for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case m.d.EmoteOnlyOff:
                                n = Object(s.d)("{user} disabled emote-only for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case m.d.FollowersOnly:
                                var i = (e.args || [""]).join(" ").trim(),
                                    r = parseInt(i, 10);
                                n = r ? Object(s.d)("{user} enabled {length} followers-only mode for this room.", {
                                    user: t,
                                    length: Object(Ne.b)(60 * r)
                                }, "ModerationActionLine") : Object(s.d)("{user} enabled followers-only mode for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case m.d.FollowersOnlyOff:
                                n = Object(s.d)("{user} disabled followers-only mode for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case m.d.R9kBeta:
                                n = Object(s.d)("{user} enabled r9k mode for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case m.d.R9kBetaOff:
                                n = Object(s.d)("{user} disabled r9k mode for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case m.d.Slow:
                                var o = (e.args || ["120"]).join(" ").trim(),
                                    l = parseInt(o, 10);
                                n = Object(s.d)("{user} enabled {slowTime}-second slow mode for this room.", {
                                    user: t,
                                    slowTime: l
                                }, "ModerationActionLine");
                                break;
                            case m.d.SlowOff:
                                n = Object(s.d)("{user} disabled slow mode for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case m.d.SubscribersOnly:
                                n = Object(s.d)("{user} enabled subscribers-only mode for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case m.d.SubscribersOnlyOff:
                                n = Object(s.d)("{user} disabled subscribers-only mode for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            default:
                                var c = e.args && e.args.join(" ").trim(),
                                    d = c && c.length > 0 ? "/" + e.moderationActionType + " " + c : "" + e.moderationActionType;
                                n = Object(s.d)("{user} used: {command}.", {
                                    user: e.createdByLogin,
                                    command: d
                                }, "ModerationActionLine")
                        } else {
                            var u = e.targetUserLogin,
                                p = e.duration,
                                h = e.reason,
                                g = e.messageBody;
                            switch (e.moderationActionType) {
                                case m.d.Timeout:
                                    n = p && h ? Object(s.d)("{user} timed out {target} for {duration} seconds. Reason: {reason}.", {
                                        user: t,
                                        target: u,
                                        duration: p,
                                        reason: h
                                    }, "ModerationActionLine") : p ? Object(s.d)("{user} timed out {target} for {duration} seconds.", {
                                        user: t,
                                        target: u,
                                        duration: p
                                    }, "ModerationActionLine") : Object(s.d)("{user} timed out {target}.", {
                                        user: t,
                                        target: u
                                    }, "ModerationActionLine");
                                    break;
                                case m.d.Ban:
                                    n = h ? Object(s.d)("{user} banned {target}. Reason: {reason}.", {
                                        user: t,
                                        target: u,
                                        reason: h
                                    }, "ModerationActionLine") : Object(s.d)("{user} banned {target}.", {
                                        user: t,
                                        target: u
                                    }, "ModerationActionLine");
                                    break;
                                case m.d.Untimeout:
                                    n = Object(s.d)("{user} removed time out on {target}.", {
                                        user: t,
                                        target: u
                                    }, "ModerationActionLine");
                                    break;
                                case m.d.Unban:
                                    n = Object(s.d)("{user} removed ban on {target}.", {
                                        user: t,
                                        target: u
                                    }, "ModerationActionLine");
                                    break;
                                case m.d.Mod:
                                    n = Object(s.d)("{user} granted moderator privileges to {target}.", {
                                        user: t,
                                        target: u
                                    }, "ModerationActionLine");
                                    break;
                                case m.d.Unmod:
                                    n = Object(s.d)("{user} removed moderator privileges for {target}.", {
                                        user: t,
                                        target: u
                                    }, "ModerationActionLine");
                                    break;
                                case m.d.Delete:
                                    var f = g || "";
                                    n = a.createElement(_e.a, {
                                        targetLogin: u,
                                        moderatorLogin: t,
                                        messageBody: f
                                    });
                                    break;
                                default:
                                    return null
                            }
                        }
                        return n ? a.createElement(P.Xa, {
                            className: "chat-line__status"
                        }, a.createElement(P.W, {
                            type: P.Vb.Span
                        }, n)) : null
                    }, t
                }(a.Component);

            function we() {
                return {
                    raid_error_self: Object(s.d)("You cannot raid your own channel.", "RaidErrorSelfMessage"),
                    raid_error_forbidden: Object(s.d)("You cannot raid this channel.", "RaidErrorAlreadyRaidingMessage"),
                    raid_error_already_raiding: Object(s.d)("You already have a raid in progress.", "RaidErrorForbiddenMessage"),
                    raid_error_too_many_viewers_to_raid: Object(s.d)("Sorry, raids can only support up to 20,000 viewers right now.", "RaidErrorTooManyViewersMessage"),
                    raid_error_unexpected: Object(s.d)("There was a problem starting the raid. Please try again in a minute.", "RaidErrorUnexpectedMessage"),
                    unraid_error_unexpected: Object(s.d)("There was a problem stopping the raid. Please try again in a minute.", "UnraidErrorUnexpectedMessage"),
                    unraid_error_no_active_raid: Object(s.d)("You do not have an active raid.", "UnraidErrorNoActiveRaidMessage"),
                    raid_notice_restricted_chat: Object(s.d)("This channel has follower or subscriber only chat.", "RaidNoticeRestrictedChatMessage"),
                    raid_notice_mature: Object(s.d)("This channel is intended for mature audiences.", "RaidNoticeMatureMessage"),
                    raid_notice_owner: Object(s.d)("This channel has started a raid, type {unraidCommand} if you want to cancel.", {
                        unraidCommand: "/unraid"
                    }, "RaidNoticeOwnerMessage")
                }
            }
            var Me = function(e) {
                return a.createElement("span", null, we()[e.message.msgid])
            };
            Me.displayName = "RaidNoticeLine";
            var De = n("+GjP"),
                Ie = function(e) {
                    var t = a.createElement(me.a, {
                            contentID: e.event.user.id,
                            login: e.event.user.username,
                            sourceType: Q.a.chat_message
                        }, Object(ue.a)(e.event.user.username, e.event.user.displayName)),
                        n = null;
                    return n = e.event.methods.prime ? Object(s.d)("{userLogin} just subscribed with {service}!", {
                        userLogin: t,
                        service: function(e) {
                            var t = Object(De.e)("https://twitch.amazon.com/prime", {
                                ref: "subscriptionMessage",
                                channel: e
                            });
                            return a.createElement("a", {
                                className: "chat-line__message--link",
                                href: t,
                                target: "_blank",
                                rel: "noopener"
                            }, Object(s.d)("Twitch Prime", "SubNoticeLine"))
                        }(e.event.channel)
                    }, "SubNoticeLine") : Object(s.d)("{userLogin} just subscribed with a Tier {tierNumber} sub!", {
                        userLogin: t,
                        tierNumber: Object(ge.a)(e.event.methods.plan) || 1
                    }, "SubNoticeLine"), a.createElement(P.W, {
                        color: P.O.Alt2,
                        type: P.Vb.Span
                    }, n)
                };
            Ie.displayName = "SubNoticeLine";
            var Te = function(e) {
                return a.createElement(P.Eb, {
                    color: P.O.Alt2,
                    display: P.X.Inline
                }, a.createElement(Ie, {
                    event: e.event
                }), a.createElement("span", null, " "), Object(s.d)("{userLogin} subscribed for {months} months in a row!", {
                    userLogin: a.createElement(me.a, {
                        contentID: e.event.user.id,
                        login: e.event.user.username,
                        sourceType: Q.a.chat_message
                    }, Object(ue.a)(e.event.user.username, e.event.user.displayName)),
                    months: e.event.months
                }, "ResubNoticeLine"))
            };
            Te.displayName = "ResubNoticeLine";
            var Re = n("yZCp"),
                je = function(e) {
                    var t = e.event.message,
                        n = t.user.isIntl ? t.user.userDisplayName + " (" + t.user.userLogin + ")" : t.user.userDisplayName,
                        i = Object(s.d)("{user} is new here. Say hello!", {
                            user: a.createElement(me.a, {
                                contentID: t.id,
                                login: t.user.userLogin,
                                sourceType: Q.a.chat_message
                            }, "@", n)
                        }, "NewChatterRitual");
                    return a.createElement(P.Eb, {
                        color: P.O.Alt2
                    }, i)
                };
            je.displayName = "RitualNoticeLine";
            var Ae = function(e) {
                var t = e.event,
                    n = a.createElement(me.a, {
                        contentID: t.user.id,
                        login: t.user.username,
                        sourceType: Q.a.chat_message
                    }, Object(ue.a)(t.user.username, t.user.displayName)),
                    i = a.createElement(me.a, {
                        contentID: t.user.id,
                        login: t.recipientLogin,
                        sourceType: Q.a.chat_message
                    }, Object(ue.a)(t.recipientLogin, t.recipientDisplayName)),
                    r = null;
                return r = "All-Access Pass" === t.methods.planName ? function(e, t) {
                    return Object(s.d)("{gifterButton} just gifted an All-Access Pass to {recipientButton}!", {
                        gifterButton: e,
                        recipientButton: t
                    }, "SubGiftNoticeLine")
                }(n, i) : "custom" === t.methods.plan ? function(e, t, n) {
                    return 1 === n ? Object(s.d)("{gifterButton} gifted a Sub to {recipientButton}! It's their first Gift Sub in the channel!", {
                        gifterButton: e,
                        recipientButton: t
                    }, "SubGiftNoticeLine") : n > 1 ? Object(s.d)("{gifterButton} gifted a Sub to {recipientButton}! They've given {senderCount} Gift Subs in the channel!", {
                        gifterButton: e,
                        recipientButton: t,
                        senderCount: n
                    }, "SubGiftNoticeLine") : Object(s.d)("{gifterButton} gifted a subscription to {recipientButton}!", {
                        gifterButton: e,
                        recipientButton: t
                    }, "SubGiftNoticeLine")
                }(n, i, t.senderCount) : function(e, t, n, i) {
                    return 1 === n ? Object(s.d)("{gifterButton} gifted a Tier {tierNumber} Sub to {recipientButton}! It's their first Gift Sub in the channel!", {
                        gifterButton: e,
                        recipientButton: t,
                        tierNumber: i
                    }, "SubGiftNoticeLine") : n > 1 ? Object(s.d)("{gifterButton} gifted a Tier {tierNumber} Sub to {recipientButton}! They've given {senderCount} Gift Subs in the channel!", {
                        gifterButton: e,
                        recipientButton: t,
                        senderCount: n,
                        tierNumber: i
                    }, "SubGiftNoticeLine") : Object(s.d)("{gifterButton} gifted a Tier {tierNumber} Sub to {recipientButton}!", {
                        gifterButton: e,
                        recipientButton: t,
                        tierNumber: i
                    }, "SubGiftNoticeLine")
                }(n, i, t.senderCount, Object(ge.a)(t.methods.plan) || 1), a.createElement(P.W, {
                    color: P.O.Alt2,
                    type: P.Vb.Span
                }, r)
            };
            Ae.displayName = "SubGiftNoticeLine";
            var Ue = function(e) {
                var t = e.event,
                    n = a.createElement(me.a, {
                        contentID: t.user.id,
                        login: t.user.username,
                        sourceType: Q.a.chat_message
                    }, Object(ue.a)(t.user.username, t.user.displayName)),
                    i = null;
                return i = "custom" === t.plan ? function(e, t, n, i) {
                    return 1 === i ? Object(s.d)("{massGiftCount, plural, one {{gifterButton} is gifting {massGiftCount} Sub to {channel}'s community. It's their first Gift Sub in the channel!} other {{gifterButton} is gifting {massGiftCount} Subs to {channel}'s community. It's their first Gift Sub in the channel!}}", {
                        channel: t,
                        gifterButton: e,
                        massGiftCount: n
                    }, "SubMysteryGiftNoticeLine") : i > 1 ? Object(s.d)("{massGiftCount, plural, one {{gifterButton} is gifting {massGiftCount} Sub to {channel}'s community. They've gifted a total of {senderCount} in the channel!} other {{gifterButton} is gifting {massGiftCount} Subs to {channel}'s community. They've gifted a total of {senderCount} in the channel!}}", {
                        channel: t,
                        gifterButton: e,
                        massGiftCount: n,
                        senderCount: i
                    }, "SubMysteryGiftNoticeLine") : Object(s.d)("{massGiftCount, plural, one {{gifterButton} is gifting {massGiftCount} Sub to {channel}'s community!} other {{gifterButton} is gifting {massGiftCount} Subs to {channel}'s community!}}", {
                        channel: t,
                        gifterButton: e,
                        massGiftCount: n
                    }, "SubMysteryGiftNoticeLine")
                }(n, t.channel, t.massGiftCount, t.senderCount) : function(e, t, n, i, a) {
                    return 1 === i ? Object(s.d)("{massGiftCount, plural, one {{gifterButton} is gifting {massGiftCount} Tier {tierNumber} Sub to {channel}'s community. It's their first Gift Sub in the channel!} other {{gifterButton} is gifting {massGiftCount} Tier {tierNumber} Subs to {channel}'s community. It's their first Gift Sub in the channel!}}", {
                        channel: t,
                        gifterButton: e,
                        massGiftCount: n,
                        tierNumber: a
                    }, "SubMysteryGiftNoticeLine") : i > 1 ? Object(s.d)("{massGiftCount, plural, one {{gifterButton} is gifting {massGiftCount} Tier {tierNumber} Sub to {channel}'s community. They've gifted a total of {senderCount} in the channel!} other {{gifterButton} is gifting {massGiftCount} Tier {tierNumber} Subs to {channel}'s community. They've gifted a total of {senderCount} in the channel!}}", {
                        channel: t,
                        gifterButton: e,
                        massGiftCount: n,
                        senderCount: i,
                        tierNumber: a
                    }, "SubMysteryGiftNoticeLine") : Object(s.d)("{massGiftCount, plural, one {{gifterButton} is gifting {massGiftCount} Tier {tierNumber} Sub to {channel}'s community!} other {{gifterButton} is gifting {massGiftCount} Tier {tierNumber} Subs to {channel}'s community!}}", {
                        channel: t,
                        gifterButton: e,
                        massGiftCount: n,
                        tierNumber: a
                    }, "SubMysteryGiftNoticeLine")
                }(n, t.channel, t.massGiftCount, t.senderCount, Object(ge.a)(t.plan) || 1), a.createElement(P.W, {
                    color: P.O.Alt2,
                    type: P.Vb.Span
                }, i)
            };
            Ue.displayName = "SubMysteryGiftNoticeLine";
            var Le, Be = n("+kC+"),
                xe = n("cr+I"),
                Fe = Object(k.compose)(Object(C.a)(Be, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.channelID
                            }
                        }
                    }
                }))(function(e) {
                    var t = e.data;
                    if (t.loading) return null;
                    var n = null;
                    if (!t.error && t.user && t.user.subscriptionProducts && t.user.subscriptionProducts.length > 0) {
                        var i = t.user.subscriptionProducts.find(function(e) {
                            return !!e && !!e.url
                        });
                        i && (n = i.url)
                    }
                    if (!n) return a.createElement(P.Xa, null, Object(s.d)("This room is in subscribers only mode.", "SubsOnlyUpsellLine"));
                    var r = a.createElement(P.U, {
                        targetBlank: !0,
                        to: n + "?" + xe.stringify({
                            ref: "subscriber_only_mode_chat"
                        })
                    }, n);
                    return a.createElement(P.Xa, null, Object(s.d)("This room is in subscribers only mode. To talk, purchase a channel subscription at {productLink}", {
                        productLink: r
                    }, "SubsOnlyUpsellLine"))
                }),
                Pe = n("k8pZ");
            ! function(e) {
                e.Timestamp = "extension-message-timestamp", e.ExtensionName = "extension-message-name"
            }(Le || (Le = {}));
            var He = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onExtensionNameClick = function(e) {
                        var n = t.props.message;
                        t.props.onExtensionNameClick(n.extension.clientID, n.extension.version, n.id, e.currentTarget.getBoundingClientRect().bottom)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (!this.props.installedExtensions) return null;
                    var e = this.props.message;
                    if (!this.props.installedExtensions.some(function(t) {
                            var n = t.extension;
                            return n.clientId === e.extension.clientID && n.version === e.extension.version
                        })) return null;
                    var t = this.props.message.extension.displayBadges;
                    return a.createElement(P.Xa, {
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, a.createElement("div", {
                        id: this.props.message.id,
                        className: "room-message"
                    }, this.renderTimestamp(), a.createElement(_.b, {
                        badgeSets: this.props.badgeSets,
                        badgesToRender: t
                    }), this.renderMessageAuthor(this.props.message.extension), a.createElement("span", null, ": "), this.renderMessageBody()))
                }, t.prototype.renderTimestamp = function() {
                    return this.props.showTimestamps ? a.createElement("span", {
                        key: "timestamp",
                        className: "room-message__timestamp",
                        "data-test-selector": Le.Timestamp
                    }, Object(z.a)(new Date(this.props.message.sentAt))) : null
                }, t.prototype.renderMessageBody = function() {
                    var e = Object(p.g)(this.props.message);
                    return Object(z.f)(e, {
                        forceClipsNetworkRequest: !0
                    })
                }, t.prototype.renderMessageAuthor = function(e) {
                    return a.createElement("button", {
                        onClick: this.onExtensionNameClick,
                        "data-test-selector": Le.ExtensionName
                    }, a.createElement("span", {
                        key: e.clientID + "-" + e.version + "-messageauthor"
                    }, a.createElement("span", {
                        key: "username-display",
                        style: {
                            color: e.chatColor
                        }
                    }, a.createElement(P.W, {
                        bold: !0
                    }, e.displayName))))
                }, t
            }(a.Component);
            var We, Ve = Object(r.connect)(function(e, t) {
                    return {
                        installedExtensions: Object(Pe.a)(e, t.channelID)
                    }
                }, function(e) {
                    return Object(o.bindActionCreators)({
                        onExtensionNameClick: w.d
                    }, e)
                })(He),
                Ge = "https://www.twitch.tv/settings/connections";
            ! function(e) {
                e.Kickback = "msg_blizzard", e.Enabled = "blizzard_connect_on", e.Disabled = "blizzard_connect_off", e.AlreadyEnabled = "already_blizzard_mode_on", e.AlreadyDisabled = "already_blizzard_mode_off"
            }(We || (We = {}));
            var Xe = function(e) {
                var t = null;
                switch (e.type) {
                    case We.Kickback:
                        var n = a.createElement(P.U, {
                            targetBlank: !0,
                            to: Ge
                        }, Ge);
                        t = Object(s.d)("You must connect your Blizzard account to send messages in this room. You can connect your Blizzard account in your Twitch settings at {settingsLink}", {
                            settingsLink: n
                        }, "BlizzardConnectModeNoticeLine");
                        break;
                    case We.Enabled:
                        t = Object(s.d)("This room now requires a Blizzard account connection to chat.", "BlizzardConnectModeNoticeLine");
                        break;
                    case We.Disabled:
                        t = Object(s.d)("This room no longer requires a Blizzard account connection to chat.", "BlizzardConnectModeNoticeLine");
                        break;
                    case We.AlreadyEnabled:
                        t = Object(s.d)("This room already requires a Blizzard account connection to chat.", "BlizzardConnectModeNoticeLine");
                        break;
                    case We.AlreadyDisabled:
                        t = Object(s.d)("This room does not require a Blizzard account connection to chat.", "BlizzardConnectModeNoticeLine");
                        break;
                    default:
                        return null
                }
                return a.createElement(P.Xa, null, t)
            };
            Xe.displayName = "BlizzardConnectNoticeLine";
            n("NWfm");
            var ze, qe = "timeout_success",
                Qe = "untimeout_success",
                Ye = "ban_success",
                Ke = "unban_success",
                $e = "delete_message_success",
                Ze = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.shouldComponentUpdate = function(e) {
                        if (!e.doesNotUpdate) return !0;
                        if (e.isCurrentUserModerator !== this.props.isCurrentUserModerator) return !0;
                        if (e.showModerationIcons !== this.props.showModerationIcons) return !0;
                        if (e.showTimestamps !== this.props.showTimestamps) return !0;
                        if (e.useHighContrastColors !== this.props.useHighContrastColors) return !0;
                        if (e.theme !== this.props.theme) return !0;
                        switch (e.message.type) {
                            case m.b.Message:
                                if (e.message.deleted) return !0;
                                break;
                            case m.b.Resubscription:
                            case m.b.Ritual:
                                if (e.message.message && e.message.message.deleted) return !0;
                                break;
                            case m.b.AutoMod:
                                if (e.message.autoModType === m.a.MessageRejectedPrompt && (e.showAutoModActions !== this.props.showAutoModActions || e.message.rejectedMessage.deleted)) return !0;
                                break;
                            case m.b.Hosting:
                            case m.b.Unhost:
                            case m.b.SlowMode:
                            case m.b.SubscriberOnlyMode:
                            case m.b.FollowerOnlyMode:
                            case m.b.EmoteOnlyMode:
                            case m.b.R9KMode:
                            case m.b.Clear:
                            case m.b.Unraid:
                            case m.b.Notice:
                            case m.b.Moderation:
                            case m.b.ModerationAction:
                                if (e.showModerationActions !== this.props.showModerationActions) return !0
                        }
                        return !1
                    }, t.prototype.render = function() {
                        var e = this.props.message,
                            t = null;
                        if (this.props.isCurrentUserModerator) {
                            if (this.props.showModerationActions) switch (e.type) {
                                case m.b.Hosting:
                                case m.b.Unhost:
                                case m.b.SlowMode:
                                case m.b.SubscriberOnlyMode:
                                case m.b.FollowerOnlyMode:
                                case m.b.EmoteOnlyMode:
                                case m.b.R9KMode:
                                case m.b.Clear:
                                case m.b.Unraid:
                                    return null
                            }
                            if (this.props.showModerationIcons) switch (e.type) {
                                case m.b.Subscription:
                                case m.b.SubGift:
                                case m.b.SubMysteryGift:
                                case m.b.Resubscription:
                                case m.b.GiftPaidUpgrade:
                                case m.b.AnonGiftPaidUpgrade:
                                    t = a.createElement(X, {
                                        channelID: this.props.channelID,
                                        onPushMessage: this.props.onPushMessage,
                                        senderLogin: e.user.username,
                                        targetUserID: e.user.userID
                                    })
                            }
                        }
                        switch (e.type) {
                            case m.b.AutoMod:
                                return e.autoModType !== m.a.MessageRejectedPrompt || this.props.isCurrentUserModerator && this.props.showAutoModActions ? a.createElement(de, {
                                    channelID: this.props.channelID,
                                    message: e,
                                    badgeSets: this.props.badgeSets,
                                    currentUserDisplayName: this.props.currentUserDisplayName,
                                    isCurrentUserModerator: this.props.isCurrentUserModerator,
                                    showModerationIcons: this.props.showModerationIcons,
                                    currentUserLogin: this.props.currentUserLogin,
                                    confirmModerationAction: this.props.confirmModerationAction
                                }) : null;
                            case m.b.ModerationAction:
                                return this.props.isCurrentUserModerator && this.props.showModerationActions ? a.createElement(Oe, {
                                    moderationActionEvent: e
                                }) : null;
                            case m.b.Connected:
                                return a.createElement(P.Xa, {
                                    className: "chat-line__status",
                                    "data-a-target": "chat-welcome-message"
                                }, a.createElement(P.W, {
                                    type: P.Vb.Span
                                }, Object(s.d)("Welcome to the chat room!", "ChatLine")));
                            case m.b.Disconnected:
                                return e.reason ? a.createElement(P.Xa, {
                                    className: "chat-line__status"
                                }, a.createElement(P.W, {
                                    type: P.Vb.Span
                                }, Object(s.d)("You have been disconnected from chat for the following reason: {reason}", {
                                    reason: e.reason
                                }, "ChatLine"))) : a.createElement(P.Xa, {
                                    className: "chat-line__status"
                                }, a.createElement(P.W, {
                                    type: P.Vb.Span
                                }, Object(s.d)("Sorry, we were unable to connect to chat. Attempting to reconnect...", "ChatLine")));
                            case m.b.Hosted:
                                return a.createElement(P.Xa, {
                                    className: "chat-line__status"
                                }, a.createElement(P.W, {
                                    type: P.Vb.Span
                                }, Object(z.e)(e)));
                            case m.b.Hosting:
                                return a.createElement(P.Xa, {
                                    className: "chat-line__status"
                                }, a.createElement(P.W, {
                                    type: P.Vb.Span
                                }, Object(s.d)("Now hosting {channel}", {
                                    channel: e.hostedChannel
                                }, "ChatLine")));
                            case m.b.Unhost:
                                return a.createElement(P.Xa, {
                                    className: "chat-line__status"
                                }, a.createElement(P.W, {
                                    type: P.Vb.Span
                                }, Object(s.d)("No longer hosting.", "ChatLine")));
                            case m.b.Message:
                                return this.props.onRenderReportChatSent && e.user.userLogin === this.props.currentUserLogin && this.props.onRenderReportChatSent(), a.createElement(J, {
                                    channelID: this.props.channelID,
                                    badgeSets: this.props.badgeSets,
                                    message: e,
                                    isDeleted: e.deleted,
                                    isHidden: e.hidden,
                                    showModerationIcons: this.props.showModerationIcons,
                                    showTimestamps: this.props.showTimestamps,
                                    useHighContrastColors: !!this.props.useHighContrastColors,
                                    isCurrentUserModerator: this.props.isCurrentUserModerator,
                                    isCurrentUserStaff: this.props.isCurrentUserStaff,
                                    currentUserDisplayName: this.props.currentUserDisplayName,
                                    currentUserLogin: this.props.currentUserLogin,
                                    confirmModerationAction: this.props.confirmModerationAction,
                                    onPushMessage: this.props.onPushMessage,
                                    theme: this.props.theme
                                });
                            case m.b.Moderation:
                                return this.props.isCurrentUserModerator && !this.props.showModerationActions ? a.createElement(P.Xa, {
                                    className: "chat-line__moderation"
                                }, Object(z.g)(e)) : null;
                            case m.b.Subscription:
                                return a.createElement(Ce, null, t, a.createElement(Ie, {
                                    event: e
                                }));
                            case m.b.SubGift:
                                return a.createElement(Ce, null, t, a.createElement(Ae, {
                                    event: e
                                }));
                            case m.b.AnonSubGift:
                                return a.createElement(Ce, null, a.createElement(be, {
                                    event: e
                                }));
                            case m.b.SubMysteryGift:
                                return a.createElement(Ce, null, t, a.createElement(Ue, {
                                    event: e
                                }));
                            case m.b.AnonSubMysteryGift:
                                return a.createElement(Ce, null, a.createElement(ve, {
                                    event: e
                                }));
                            case m.b.RewardGift:
                                return a.createElement(Re.a, {
                                    event: e,
                                    channelID: this.props.channelID
                                });
                            case m.b.BitsCharity:
                                return a.createElement(P.Xa, {
                                    className: "chat-line__bits-charity",
                                    padding: {
                                        right: 2,
                                        y: .5
                                    }
                                }, Object(z.b)(e));
                            case m.b.Resubscription:
                                var n = null;
                                return e.message && (n = a.createElement(J, {
                                    badgeSets: this.props.badgeSets,
                                    confirmModerationAction: this.props.confirmModerationAction,
                                    channelID: this.props.channelID,
                                    className: "chat-line--inline",
                                    currentUserDisplayName: this.props.currentUserDisplayName,
                                    currentUserLogin: this.props.currentUserLogin,
                                    isCurrentUserModerator: this.props.isCurrentUserModerator,
                                    isCurrentUserStaff: this.props.isCurrentUserStaff,
                                    isDeleted: e.message.deleted,
                                    isHidden: e.message.hidden,
                                    message: e.message,
                                    onPushMessage: this.props.onPushMessage,
                                    showModerationIcons: this.props.showModerationIcons,
                                    showTimestamps: this.props.showTimestamps,
                                    useHighContrastColors: !!this.props.useHighContrastColors
                                })), a.createElement(Ce, null, !n && t, a.createElement(Te, {
                                    event: e
                                }), a.createElement(P.Xa, null, n));
                            case m.b.GiftPaidUpgrade:
                                return a.createElement(Ce, null, t, a.createElement(ke, {
                                    event: e
                                }));
                            case m.b.AnonGiftPaidUpgrade:
                                return a.createElement(Ce, null, t, a.createElement(he, {
                                    event: e
                                }));
                            case m.b.RoomMods:
                                return a.createElement(P.Xa, {
                                    className: "chat-line__status"
                                }, Object(z.i)(e.moderatorLogins));
                            case m.b.SlowMode:
                                return a.createElement(P.Xa, {
                                    className: "chat-line__status"
                                }, Object(z.j)(e));
                            case m.b.SubscriberOnlyMode:
                                return a.createElement(P.Xa, {
                                    className: "chat-line__status"
                                }, Object(z.k)(e));
                            case m.b.FollowerOnlyMode:
                                return a.createElement(P.Xa, {
                                    className: "chat-line__status"
                                }, Object(z.d)(e));
                            case m.b.EmoteOnlyMode:
                                return a.createElement(P.Xa, {
                                    className: "chat-line__status"
                                }, Object(z.c)(e));
                            case m.b.R9KMode:
                                return a.createElement(P.Xa, {
                                    className: "chat-line__status"
                                }, Object(z.h)(e));
                            case m.b.Clear:
                                return a.createElement(P.Xa, {
                                    className: "chat-line__status"
                                }, Object(s.d)("Chat was cleared by a moderator", "ChatLine"));
                            case m.b.Notice:
                                if (function(e) {
                                        return e.msgid in we()
                                    }(e)) return a.createElement(P.Xa, {
                                    className: "chat-line__status"
                                }, a.createElement(Me, {
                                    message: e
                                }));
                                switch (e.msgid) {
                                    case "msg_subsonly":
                                        return a.createElement(P.Xa, {
                                            className: "chat-line__status"
                                        }, a.createElement(Fe, {
                                            channelID: this.props.channelID
                                        }));
                                    case We.Kickback:
                                    case We.Enabled:
                                    case We.Disabled:
                                    case We.AlreadyEnabled:
                                    case We.AlreadyDisabled:
                                        return a.createElement(P.Xa, {
                                            className: "chat-line__status"
                                        }, a.createElement(Xe, {
                                            type: e.msgid
                                        }))
                                }
                                if (this.props.isCurrentUserModerator) switch (e.msgid) {
                                    case $e:
                                    case qe:
                                    case Ye:
                                        return null;
                                    case Qe:
                                    case Ke:
                                        if (this.props.showModerationActions) return null
                                }
                                return a.createElement(P.Xa, {
                                    className: "chat-line__status"
                                }, e.message);
                            case m.b.Info:
                                return a.createElement(P.Xa, {
                                    className: "chat-line__status"
                                }, e.message);
                            case m.b.Raid:
                                return a.createElement(Se, {
                                    message: e
                                });
                            case m.b.Unraid:
                                return a.createElement(Ce, null, a.createElement(P.W, {
                                    color: P.O.Alt2
                                }, Object(s.d)("The raid has been cancelled.", "RaidCancelMessage")));
                            case m.b.Ritual:
                                return a.createElement(Ce, null, a.createElement(je, {
                                    event: e
                                }), a.createElement(J, {
                                    badgeSets: this.props.badgeSets,
                                    confirmModerationAction: this.props.confirmModerationAction,
                                    channelID: this.props.channelID,
                                    className: "chat-line--inline",
                                    currentUserDisplayName: this.props.currentUserDisplayName,
                                    currentUserLogin: this.props.currentUserLogin,
                                    isCurrentUserModerator: this.props.isCurrentUserModerator,
                                    isCurrentUserStaff: this.props.isCurrentUserStaff,
                                    isDeleted: e.message.deleted,
                                    isHidden: e.message.hidden,
                                    message: e.message,
                                    onPushMessage: this.props.onPushMessage,
                                    showModerationIcons: this.props.showModerationIcons,
                                    showTimestamps: this.props.showTimestamps,
                                    useHighContrastColors: !!this.props.useHighContrastColors
                                }));
                            case m.b.ExtensionMessage:
                                return a.createElement(Ve, {
                                    badgeSets: this.props.badgeSets,
                                    channelID: this.props.channelID,
                                    currentUserLogin: this.props.currentUserLogin,
                                    message: e,
                                    showTimestamps: this.props.showTimestamps
                                });
                            default:
                                return null
                        }
                    }, t
                }(a.Component),
                Je = n("GnwI"),
                et = (n("HjUq"), ["scroll", "wheel", "mousewheel", "DOMMouseScroll", "keyup", "mousedown"]),
                tt = 10,
                nt = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            isAutoScrolling: !0
                        }, t.saveScrollRef = function(e) {
                            return t.scroll = e
                        }, t.handleScrollEvent = function(e) {
                            t.scroll && t.scroll.scrollContent && (e.which > 0 || "mousedown" === e.type || "mousewheel" === e.type || "wheel" === e.type) && (t.scroll.scrollContent.scrollHeight - t.scroll.scrollContent.scrollTop - t.scroll.scrollContent.offsetHeight <= tt ? t.setState({
                                isAutoScrolling: !0
                            }) : t.setState({
                                isAutoScrolling: !1
                            }))
                        }, t.handleResize = function() {
                            t.state.isAutoScrolling && t.scrollToBottom()
                        }, t.handleClickMoreMessages = function() {
                            t.setState({
                                isAutoScrolling: !0
                            }, t.scrollToBottom)
                        }, t.scrollToBottom = function() {
                            t.scroll && t.scroll.scrollContent && (t.scroll.scrollContent.scrollTop = t.scroll.scrollContent.scrollHeight)
                        }, t.reportChatRenderSent = function() {
                            t.props.chatRenderSentEvent && t.props.latencyTracking.reportCustomEvent(t.props.chatRenderSentEvent)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        var e = this;
                        et.forEach(function(t) {
                            e.scroll && e.scroll.scrollContent && e.scroll.scrollContent.addEventListener(t, e.handleScrollEvent)
                        })
                    }, t.prototype.componentWillUnmount = function() {
                        var e = this;
                        et.forEach(function(t) {
                            e.scroll && e.scroll.scrollContent && e.scroll.scrollContent.removeEventListener(t, e.handleScrollEvent)
                        })
                    }, t.prototype.componentDidUpdate = function(e) {
                        this.state.isAutoScrolling && this.props.messages !== e.messages && this.scrollToBottom()
                    }, t.prototype.render = function() {
                        var e = this,
                            t = this.props.messages.map(function(t) {
                                return a.createElement(Ze, {
                                    badgeSets: e.props.badgeSets,
                                    channelID: e.props.channelID,
                                    isCurrentUserModerator: e.props.isCurrentUserModerator,
                                    isCurrentUserStaff: e.props.isCurrentUserStaff,
                                    message: t,
                                    key: t.id,
                                    showAutoModActions: e.props.showAutoModActions,
                                    showModerationActions: e.props.showModerationActions,
                                    showModerationIcons: e.props.showModerationIcons,
                                    showTimestamps: e.props.showTimestamps,
                                    useHighContrastColors: e.props.useHighContrastColors,
                                    currentUserDisplayName: e.props.currentUserDisplayName,
                                    currentUserLogin: e.props.currentUserLogin,
                                    confirmModerationAction: e.props.confirmModerationAction,
                                    onPushMessage: e.props.onPushMessage,
                                    doesNotUpdate: !0,
                                    theme: e.props.theme,
                                    onRenderReportChatSent: e.reportChatRenderSent
                                })
                            });
                        return a.createElement(P.Xa, {
                            refDelegate: this.props.containerRef,
                            className: "chat-list",
                            display: P.X.Flex,
                            flexDirection: P.Aa.Column,
                            flexWrap: P.Ba.NoWrap,
                            overflow: P.cb.Hidden,
                            flexGrow: 1
                        }, a.createElement(f.a, {
                            onResize: this.handleResize
                        }), a.createElement(P.Pa, {
                            flexGrow: 1
                        }, a.createElement(b.b, {
                            className: "chat-list__lines",
                            scrollRef: this.saveScrollRef,
                            "data-a-target": "chat-scroller"
                        }, a.createElement(P.Pa, {
                            flexGrow: 1,
                            fullHeight: !0,
                            padding: {
                                bottom: 1
                            }
                        }, a.createElement("div", {
                            role: "log"
                        }, t)))), a.createElement(P.Xa, {
                            className: "chat-list__more-messages-placeholder",
                            position: P.jb.Relative,
                            margin: {
                                x: 2
                            }
                        }, this.moreMessages()))
                    }, t.prototype.moreMessages = function() {
                        return this.state.isAutoScrolling ? null : a.createElement(P.Pa, {
                            display: P.X.Flex,
                            justifyContent: P.Wa.Center,
                            alignItems: P.f.Center,
                            position: P.jb.Absolute,
                            padding: .5,
                            attachBottom: !0,
                            fullWidth: !0
                        }, a.createElement(P.Eb, {
                            className: "chat-list__more-messages",
                            borderRadius: P.x.Medium
                        }, a.createElement("div", {
                            onClick: this.handleClickMoreMessages
                        }, Object(s.d)("More messages below.", "ChatList"))))
                    }, t
                }(a.Component),
                it = Object(Je.b)("ChatListPresentation", {
                    autoReportInteractive: !0
                })(nt),
                at = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            messages: []
                        }, t.onBufferUpdate = function() {
                            t.syncBufferHandle || (t.syncBufferHandle = setTimeout(t.syncBufferedMessages, 0))
                        }, t.syncBufferedMessages = function() {
                            t.props.messageBufferAPI && t.setState({
                                messages: t.props.messageBufferAPI.getMessages()
                            }), t.clearBufferHandle()
                        }, t.clearBufferHandle = function() {
                            t.syncBufferHandle && (clearTimeout(t.syncBufferHandle), t.syncBufferHandle = 0)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.messageBufferAPI && (this.props.messageBufferAPI.addUpdateHandler(this.onBufferUpdate), this.setState({
                            messages: this.props.messageBufferAPI.getMessages()
                        }))
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        var t = e.pubsub.messages.chatRichEmbedInfo,
                            n = e.pubsub.messages.extensionMessage;
                        t && this.props.pubsub.messages.chatRichEmbedInfo !== t && s.p.apollo.client.writeQuery({
                            query: u,
                            variables: {
                                slug: t.data.twitch_metadata.clip_metadata.slug
                            },
                            data: function(e) {
                                var t = e.data.twitch_metadata.clip_metadata;
                                return {
                                    clip: {
                                        __typename: "Clip",
                                        slug: t.slug,
                                        id: t.id,
                                        url: e.data.request_url,
                                        title: e.data.title,
                                        thumbnailURL: e.data.thumbnail_url,
                                        curator: t.curator_id ? {
                                            displayName: e.data.author_name,
                                            id: t.curator_id,
                                            __typename: "User"
                                        } : null,
                                        broadcaster: t.channel_display_name ? {
                                            displayName: t.channel_display_name,
                                            id: t.broadcaster_id,
                                            __typename: "User"
                                        } : null
                                    }
                                }
                            }(t)
                        }), this.props.messageBufferAPI !== e.messageBufferAPI && (this.props.messageBufferAPI && this.props.messageBufferAPI.removeUpdateHandler(this.onBufferUpdate), e.messageBufferAPI && (e.messageBufferAPI.addUpdateHandler(this.onBufferUpdate), this.setState({
                            messages: e.messageBufferAPI.getMessages()
                        }))), n && this.props.pubsub.messages.extensionMessage !== n && this.props.onPushMessage(function(e) {
                            var t = e.data;
                            return {
                                type: m.b.ExtensionMessage,
                                id: t.id,
                                sentAt: t.sent_at,
                                extension: {
                                    clientID: t.sender.extension_client_id,
                                    version: t.sender.extension_version,
                                    displayName: t.sender.display_name,
                                    displayBadges: Object(p.b)(t.sender.badges),
                                    chatColor: t.sender.chat_color
                                },
                                content: {
                                    text: t.content.text,
                                    fragments: Object(p.c)(t.content.fragments)
                                }
                            }
                        }(n))
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.messageBufferAPI && this.props.messageBufferAPI.removeUpdateHandler(this.onBufferUpdate), this.clearBufferHandle()
                    }, t.prototype.render = function() {
                        return a.createElement(it, {
                            channelID: this.props.channelID,
                            badgeSets: this.props.badgeSets,
                            currentUserDisplayName: this.props.currentUserDisplayName,
                            channelLogin: this.props.channelLogin,
                            onPushMessage: this.props.onPushMessage,
                            isCurrentUserModerator: this.props.isCurrentUserModerator,
                            isCurrentUserStaff: this.props.isCurrentUserStaff,
                            isEmbedded: this.props.isEmbedded,
                            messages: this.state.messages,
                            showAutoModActions: this.props.showAutoModActions,
                            showModerationActions: this.props.showModerationActions,
                            showModerationIcons: this.props.showModerationIcons,
                            showTimestamps: this.props.showTimestamps,
                            theme: this.props.theme,
                            useHighContrastColors: this.props.useHighContrastColors,
                            currentUserLogin: this.props.currentUserLogin,
                            containerRef: this.props.containerRef,
                            chatRenderSentEvent: this.props.chatRenderSentEvent,
                            confirmModerationAction: this.props.confirmModerationAction
                        })
                    }, t
                }(a.Component);
            var rt = Object(o.compose)(Object(r.connect)(function(e) {
                return {
                    chatRenderSentEvent: Object(g.b)(e),
                    showAutoModActions: e.chat.showAutoModActions,
                    showModerationActions: e.chat.showModerationActions,
                    showModerationIcons: e.chat.showModIcons,
                    showTimestamps: e.chat.showTimestamps,
                    useHighContrastColors: e.chat.useHighContrastColors
                }
            }), Object(l.a)([{
                skip: function(e) {
                    return !e.channelID
                },
                topic: function(e) {
                    return e.channelID ? Object(d.y)(e.channelID) : ""
                },
                mapMessageTypesToProps: (ze = {}, ze[c.PubsubMessageType.StreamChatRoomChatRichEmbed] = "chatRichEmbedInfo", ze[c.PubsubMessageType.StreamChatRoomExtensionMessage] = "extensionMessage", ze)
            }]), h.a)(at);
            n.d(t, !1, function() {
                return at
            }), n.d(t, "a", function() {
                return rt
            })
        },
        r2Xj: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            });
            var i = {
                DarkMode: "darkMode",
                FollowerDuration: "followerDuration",
                FollowerMode: "followerMode",
                HideChat: "hideChat",
                ShowMessageFlags: "showMessageFlags",
                ShowAutoModActions: "showAutoModActions",
                ShowModActions: "showModerationActions",
                ShowModIcons: "showModIcons",
                ShowTimestamps: "showTimestamps",
                UseHighContrastColors: "useHighContrastColors",
                SlowMode: "slowMode"
            }
        },
        r62z: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            }), n.d(t, "c", function() {
                return c
            }), n.d(t, "b", function() {
                return d
            }), n.d(t, "d", function() {
                return u
            });
            var i = n("+GjP"),
                a = "https://www.facebook.com/sharer/sharer.php",
                r = "https://www.twitter.com/share",
                o = "https://www.reddit.com/submit",
                s = "https://vk.com/share.php";

            function l(e) {
                return Object(i.e)(a, {
                    u: e
                })
            }

            function c(e, t) {
                return Object(i.e)(r, {
                    url: e,
                    text: t
                })
            }

            function d(e, t) {
                return Object(i.e)(o, {
                    url: e,
                    title: t
                })
            }

            function u(e) {
                return Object(i.e)(s, {
                    url: e
                })
            }
        },
        r93r: function(e, t, n) {
            "use strict";
            n.r(t);
            var i = n("mrSG"),
                a = n("cr+I"),
                r = n("q1tI"),
                o = n("/7QA"),
                s = n("8/mp"),
                l = n("GnwI"),
                c = n("fvjX"),
                d = n("yR8l"),
                u = n("kduP"),
                m = n("rO6o"),
                p = n("irYM"),
                h = n("LfZz"),
                g = n("Jhye");
            var f = n("ug+5"),
                b = n("Ue10"),
                v = Object(l.b)("EventListCard", {
                    autoReportInteractive: !0
                })(function(e) {
                    var t = new Date(e.event.startAt),
                        n = new Date(e.event.endAt),
                        a = t > new Date,
                        s = Object(u.b)(e.event.id),
                        l = !(!e.event.self || !e.event.self.isFollowing),
                        c = e.upwardBalloons ? b.v.Top : b.v.Bottom,
                        d = e.upwardBalloons ? b.ac.Top : b.ac.Bottom,
                        v = e.event.game && e.event.game.displayName || "-",
                        k = e.channel && (e.channel.displayName || e.channel.login) || "-",
                        C = null,
                        y = null,
                        E = null;
                    return e.channel && e.channel.id && e.channel.login && (a && (C = r.createElement(b.Xa, {
                        margin: {
                            right: 1
                        }
                    }, r.createElement(p.a, {
                        eventID: e.event.id,
                        eventTypename: e.event.__typename,
                        areNotificationsEnabled: l,
                        channelLogin: e.channel.login,
                        channelID: e.channel.id,
                        eventLocation: f.a.ChannelEvents,
                        tooltipDirection: d
                    }))), y = r.createElement(b.Xa, {
                        margin: {
                            right: 1
                        }
                    }, r.createElement(g.a, {
                        id: e.event.id,
                        title: e.event.title,
                        channelLogin: e.channel.login,
                        channelID: e.channel.id,
                        eventLocation: f.a.ChannelEvents,
                        balloonDirection: c
                    })), E = r.createElement(h.a, {
                        targetUser: {
                            id: e.channel.id,
                            displayName: k
                        },
                        eventID: e.event.id,
                        balloonDirection: c
                    })), r.createElement(b.Eb, {
                        margin: {
                            y: 1
                        },
                        background: b.r.Base,
                        elevation: 1
                    }, r.createElement(b.G, {
                        row: !0
                    }, r.createElement(b.Pa, {
                        flexShrink: 0
                    }, r.createElement(b.U, {
                        to: s
                    }, r.createElement(b.I, {
                        size: b.J.Size32,
                        aspect: b.p.Aspect16x9,
                        src: e.event.imageURL,
                        alt: e.event.title
                    }, r.createElement(m.a, {
                        date: t
                    })))), r.createElement(b.H, null, r.createElement(b.Xa, {
                        margin: {
                            x: 2
                        }
                    }, r.createElement(b.Pa, {
                        margin: {
                            bottom: 1
                        }
                    }, r.createElement(b.U, {
                        to: s
                    }, r.createElement(b.W, {
                        type: b.Vb.H4
                    }, e.event.title))), r.createElement(b.W, {
                        color: b.O.Alt2
                    }, function(e, t) {
                        var n = new Date,
                            a = {
                                weekday: "long",
                                month: "short",
                                day: "numeric"
                            },
                            r = {
                                timeZoneName: "short"
                            };
                        n.getFullYear() !== e.getFullYear() && (a = i.__assign({}, a, {
                            year: "numeric"
                        })), e.getDate() !== t.getDate() && (r = i.__assign({}, r, {
                            weekday: "long",
                            month: "short",
                            day: "numeric"
                        }), n.getFullYear() !== t.getFullYear() && (r = i.__assign({}, r, {
                            year: "numeric"
                        })));
                        var s = Object(o.j)(e, a),
                            l = Object(o.j)(t, r);
                        return Object(o.d)("{startTime} - {endTime}", {
                            startTime: s,
                            endTime: l
                        }, "EventListCard")
                    }(t, n)), r.createElement(b.W, {
                        color: b.O.Alt2
                    }, Object(o.d)("{channelName} streaming {gameName}", {
                        channelName: k,
                        gameName: v
                    }, "EventListCard")), r.createElement(b.Xa, {
                        display: b.X.Flex,
                        margin: {
                            top: 2
                        }
                    }, C, y, r.createElement(b.Xa, {
                        margin: {
                            right: 1
                        }
                    }, r.createElement(b.z, {
                        type: b.F.Hollow,
                        linkTo: s
                    }, Object(o.d)("View Details", "EventListCard"))), E)))))
                }),
                k = n("4hz/"),
                C = n("ePeS"),
                y = n("xMut"),
                E = {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin,
                                limit: 20,
                                before: e.filter === C.a.Future ? null : (new Date).toISOString(),
                                after: e.filter !== C.a.Future ? null : (new Date).toISOString(),
                                sortOrder: e.filter === C.a.Future ? "ASC" : "DESC"
                            }
                        }
                    },
                    props: function(e) {
                        return i.__assign({}, e, {
                            loadMore: function() {
                                if (e.data.user && e.data.user.eventLeaves && e.data.user.eventLeaves.edges) {
                                    var t = e.data.user.eventLeaves.edges[Math.max(e.data.user.eventLeaves.edges.length - 1, 0)],
                                        n = t && t.cursor || "";
                                    return e.data.fetchMore({
                                        query: y,
                                        variables: i.__assign({}, e.data.variables, {
                                            cursor: n
                                        }),
                                        updateQuery: function(e, t) {
                                            var n = t.fetchMoreResult,
                                                a = e.user && e.user.eventLeaves && e.user.eventLeaves.edges || [];
                                            return n.user && n.user.eventLeaves && n.user.eventLeaves.edges && (a = a.concat(n.user.eventLeaves.edges)), {
                                                user: i.__assign({}, n.user, {
                                                    eventLeaves: i.__assign({}, n.user && n.user.eventLeaves || {}, {
                                                        edges: a
                                                    })
                                                })
                                            }
                                        }
                                    })
                                }
                            }
                        })
                    }
                },
                S = Object(c.compose)(Object(d.a)(y, E), Object(l.b)("ChannelEventsSchedule", {
                    autoReportInteractive: !0
                }))(function(e) {
                    var t = null,
                        n = null,
                        i = null,
                        a = !1;
                    if (!e.data.loading && !e.data.error && e.data.user && e.data.user.eventLeaves) e.data.user.eventLeaves.edges && 0 !== e.data.user.eventLeaves.edges.length ? i = e.data.user.eventLeaves.edges.map(function(e, t, n) {
                        if (!e || !e.node) return null;
                        var i = t === n.length - 1,
                            a = null;
                        switch (e.node.channel && e.node.channel.id && e.node.channel.login && (a = {
                            id: e.node.channel.id,
                            login: e.node.channel.login,
                            displayName: e.node.channel.displayName
                        }), e.node.__typename) {
                            case "EventLeaf":
                                return r.createElement(v, {
                                    key: e.node.id,
                                    event: e.node,
                                    channel: a,
                                    upwardBalloons: i
                                });
                            default:
                                return null
                        }
                    }) : t = Object(o.d)("Nothing here yet", "ChannelEventsSchedule"), a = e.data.user.eventLeaves.pageInfo.hasNextPage;
                    else if (e.data.error) t = Object(o.d)("Error loading events", "ChannelEventsSchedule");
                    else if (e.data.loading && (!e.data.user || !e.data.user.eventLeaves)) return r.createElement(k.a, null);
                    return null !== t && (n = r.createElement(b.Xa, {
                        margin: {
                            top: 5
                        },
                        display: b.X.Flex,
                        flexDirection: b.Aa.Row,
                        justifyContent: b.Wa.Center
                    }, r.createElement(b.W, {
                        type: b.Vb.H4,
                        color: b.O.Alt2,
                        italic: !0
                    }, t))), r.createElement(b.Xa, null, i, n, e.data.loading && r.createElement(b.Za, {
                        fillContent: !0
                    }), r.createElement(s.a, {
                        loadMore: e.loadMore,
                        enabled: a
                    }))
                }),
                N = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleToggleChange = function(e) {
                            var n = Object(C.b)(e.currentTarget.value),
                                i = a.parse(t.props.searchQuery);
                            n !== C.a.Future ? i.filter = n : delete i.filter, t.props.onEventToggle(a.stringify(i))
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = this.props.channelLogin,
                            t = a.parse(this.props.searchQuery),
                            n = Object(C.b)(t.filter);
                        return r.createElement(b.Xa, {
                            display: b.X.Flex,
                            flexGrow: 1,
                            fullHeight: !0
                        }, r.createElement(b.Pa, {
                            fullWidth: !0
                        }, r.createElement(s.b, null, r.createElement(b.Xa, {
                            fullWidth: !0,
                            padding: {
                                y: 2,
                                x: 3
                            }
                        }, r.createElement(b.wb, null, r.createElement(b.xb, {
                            name: "events-toggle",
                            label: Object(o.d)("Future Events", "ChannelEventsPage"),
                            defaultChecked: n === C.a.Future,
                            onChange: this.handleToggleChange,
                            value: C.a.Future
                        }), r.createElement(b.xb, {
                            name: "events-toggle",
                            label: Object(o.d)("Past Events", "ChannelEventsPage"),
                            defaultChecked: n === C.a.Past,
                            onChange: this.handleToggleChange,
                            value: C.a.Past
                        })), r.createElement(S, {
                            filter: n,
                            channelLogin: e
                        })))))
                    }, t
                }(r.Component),
                _ = Object(l.b)("ChannelEventsContent", {
                    autoReportInteractive: !0
                })(N);
            n.d(t, "ChannelEventsContentComponent", function() {
                return N
            }), n.d(t, "ChannelEventsContent", function() {
                return _
            })
        },
        rO6o: function(e, t, n) {
            "use strict";
            var i = n("q1tI"),
                a = n("/7QA"),
                r = n("Ue10"),
                o = (n("z3xZ"), function(e) {
                    var t = Object(a.c)(e.date, {
                            month: "short"
                        }),
                        n = Object(a.c)(e.date, {
                            day: "numeric"
                        });
                    return i.createElement(r.Eb, {
                        background: r.r.Base,
                        elevation: 2,
                        display: r.X.Flex,
                        flexDirection: r.Aa.Column,
                        className: "event-calendar-date",
                        margin: {
                            top: .5,
                            left: .5
                        },
                        position: r.jb.Absolute,
                        attachTop: !0,
                        attachLeft: !0,
                        flexWrap: r.Ba.NoWrap
                    }, i.createElement(r.Eb, {
                        className: "event-calendar-date__month",
                        display: r.X.Flex,
                        justifyContent: r.Wa.Center,
                        background: r.r.AccentAlt2
                    }, i.createElement(r.W, {
                        fontSize: r.Ca.Size6,
                        transform: r.Ub.Uppercase,
                        color: r.O.Overlay
                    }, t)), i.createElement(r.Xa, {
                        display: r.X.Flex,
                        justifyContent: r.Wa.Center
                    }, i.createElement(r.W, {
                        fontSize: r.Ca.Size3,
                        color: r.O.Base
                    }, n)))
                });
            n.d(t, "a", function() {
                return o
            })
        },
        rVcM: function(e, t, n) {},
        ru7j: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "BlockedUsers"
                    },
                    variableDefinitions: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "blockedUsers"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 61
                }
            };
            n.loc.source = {
                body: "query BlockedUsers {\ncurrentUser {\nid\nblockedUsers {\nid\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        ry0r: function(e, t, n) {
            "use strict";
            var i, a = n("/MKj"),
                r = n("kRBY"),
                o = n("mrSG"),
                s = n("q1tI"),
                l = n("oJmH"),
                c = n("/7QA"),
                d = n("yR8l"),
                u = n("eDVu"),
                m = n("0Log"),
                p = n("geRD"),
                h = n("/aPz"),
                g = n("DMoW"),
                f = n("TSYQ"),
                b = n("4rCz"),
                v = n("Ue10");
            n("OCTF");
            ! function(e) {
                e.CloseButton = "bits-card-wrapper-close-button-selector", e.OuterWrapper = "bits-card-wrapper-outer-selector", e.InnerWrapper = "bits-card-wrapper-inner-selector"
            }(i || (i = {}));
            var k, C = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return o.__extends(t, e), t.prototype.render = function() {
                        var e = this.props,
                            t = e.onUserClose,
                            n = e.children,
                            a = e.className,
                            r = e.dataATarget,
                            o = e.closeDataATarget,
                            l = t ? s.createElement(v.Xa, {
                                position: v.jb.Absolute,
                                padding: {
                                    top: .5,
                                    right: .5
                                },
                                attachRight: !0,
                                attachTop: !0,
                                zIndex: v.ic.Above
                            }, s.createElement(v.A, {
                                ariaLabel: Object(b.d)("close bits card", "BitsCard"),
                                "data-a-target": o,
                                "data-test-selector": i.CloseButton,
                                onClick: t,
                                icon: v.tb.Close,
                                type: v.C.Secondary,
                                size: v.B.Small
                            })) : null;
                        return s.createElement(v.Eb, {
                            "data-test-selector": i.OuterWrapper,
                            className: f("bits-card-wrapper", a),
                            "data-a-target": r,
                            display: v.X.Flex,
                            flexDirection: v.Aa.Column,
                            position: v.jb.Absolute,
                            background: v.r.Base,
                            elevation: 3,
                            zIndex: v.ic.Above,
                            fullWidth: !0,
                            border: !0
                        }, l, s.createElement(v.Xa, {
                            "data-test-selector": i.InnerWrapper,
                            display: v.X.Flex,
                            flexDirection: v.Aa.Column,
                            alignItems: v.f.Center,
                            justifyContent: v.Wa.Center,
                            flexGrow: 1,
                            fullWidth: !0
                        }, n))
                    }, t.defaultProps = {
                        dataATarget: "bits-card",
                        closeDataATarget: "bits-card-close-button"
                    }, t
                }(s.PureComponent),
                y = n("zrSb"),
                E = function() {
                    return s.createElement(v.Xa, {
                        textAlign: v.Rb.Center,
                        padding: 1
                    }, s.createElement(v.W, {
                        italic: !0
                    }, Object(c.d)("Have no fear, your Bits inventory is safe! The ability to Cheer will return shortly.", "BitsCard")))
                },
                S = n("jv9u"),
                N = n("/0dD"),
                _ = (n("wtKP"), function(e) {
                    var t = void 0 !== e.progress,
                        n = s.createElement("img", {
                            className: "cheer-badge__image",
                            src: e.badge.image1x,
                            alt: e.badge.title,
                            srcSet: e.badge.image1x + " 1x, " + e.badge.image2x + " 2x, " + e.badge.image4x + " 4x"
                        });
                    if (!t) return n;
                    var i = e.progress ? Math.max(Math.round(18 * (1 - e.progress)), 1) : 18;
                    return s.createElement("div", {
                        className: "cheer-badge__progress-container"
                    }, n, s.createElement("div", {
                        className: "cheer-badge__progress-overlay",
                        style: {
                            width: i + "px"
                        },
                        "data-test-selector": "cheer-progress"
                    }))
                }),
                O = n("VeT4"),
                w = n("5zXJ"),
                M = function(e) {
                    var t;
                    e.selfBitsBadge && (e.selfBitsBadge.current || e.selfBitsBadge.next) && (t = s.createElement(v.Xa, {
                        padding: {
                            bottom: .5
                        }
                    }, e.selfBitsBadge.current && s.createElement(v.Xa, {
                        display: v.X.Inline,
                        margin: {
                            right: .5
                        }
                    }, s.createElement(_, {
                        badge: e.selfBitsBadge.current
                    })), e.selfBitsBadge.next && s.createElement(_, {
                        badge: e.selfBitsBadge.next,
                        progress: e.selfBitsBadge.progress
                    }), e.selfBitsBadge.nextBits && Object(c.d)("Next badge unlocks in {bitsToNextBadge} Bits!", {
                        bitsToNextBadge: e.selfBitsBadge.nextBits - e.selfBitsBadge.totalBits
                    }, "Bits--BalanceFooter")));
                    var n = Object(c.d)("{bitsGem} Log in to see your Bits balance", {
                        bitsGem: s.createElement(O.a, {
                            count: 100,
                            withImage: !0,
                            bitsConfig: e.bitsConfig,
                            themeOverride: N.a.Dark
                        })
                    }, "Bits--BalanceFooter");
                    return void 0 !== e.balance && null !== e.balance && (n = Object(c.d)("You have {currentBits}", {
                        currentBits: s.createElement(O.a, {
                            count: e.balance,
                            withImage: !0,
                            withText: !0,
                            bitsConfig: e.bitsConfig,
                            themeOverride: N.a.Dark
                        })
                    }, "Bits--BalanceFooter")), s.createElement(v.Xa, {
                        flexGrow: 1,
                        padding: 1,
                        className: "bits-balance-footer"
                    }, t, s.createElement(v.Xa, {
                        display: v.X.Flex,
                        flexGrow: 1,
                        alignItems: v.f.Center,
                        justifyContent: v.Wa.Between
                    }, s.createElement("div", null, n), s.createElement(v.z, {
                        disabled: void 0 === e.balance || void 0 !== e.balance && e.balance > w.n,
                        onClick: e.onClickGetBits,
                        "data-test-selector": "get-bits-button",
                        "data-a-target": "get-bits-button"
                    }, Object(c.d)("Get Bits", "Bits--BalanceFooter"))))
                },
                D = function(e) {
                    return s.createElement(v.Xa, {
                        flexGrow: 1
                    }, s.createElement(v.Xa, {
                        className: "undo-prompt__footer",
                        padding: 1,
                        display: v.X.Flex,
                        justifyContent: v.Wa.Between
                    }, s.createElement(v.z, {
                        onClick: e.onCancel || void 0,
                        type: v.F.Hollow,
                        overlay: !0,
                        "data-test-selector": "cancel-button"
                    }, Object(c.d)("Cancel", "Bits--UndoPrompt")), s.createElement(v.z, {
                        onClick: e.onConfirm || void 0,
                        "data-test-selector": "confirm-button"
                    }, Object(c.d)("Send", "Bits--UndoPrompt"))), s.createElement(v.mb, {
                        animationDirection: v.nb.Down,
                        size: v.ob.ExtraSmall,
                        animationDuration: w.v.UNDO_PROMPT_DURATION / 1e3
                    }))
                },
                I = function(e) {
                    return e.event, s.createElement(M, {
                        bitsConfig: e.bitsConfig,
                        onClickGetBits: e.onClickGetBits,
                        balance: e.balance,
                        selfBitsBadge: e.selfBitsBadge
                    })
                },
                T = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return o.__extends(t, e), t.prototype.render = function() {
                        return this.props.isSending ? this.props.totalBits >= w.r ? s.createElement(D, {
                            onCancel: this.props.onCancelSend,
                            onConfirm: this.props.onConfirmSend
                        }) : null : this.props.event ? s.createElement(I, {
                            event: this.props.event,
                            selfBitsBadge: this.props.userSelfBitsBadge,
                            bitsConfig: this.props.bitsConfig,
                            onClickGetBits: this.props.handleClickBuy,
                            balance: this.props.bitsBalance
                        }) : s.createElement(M, {
                            selfBitsBadge: this.props.userSelfBitsBadge,
                            bitsConfig: this.props.bitsConfig,
                            onClickGetBits: this.props.handleClickBuy,
                            balance: this.props.bitsBalance
                        })
                    }, t
                }(s.PureComponent),
                R = n("wUQP"),
                j = function(e) {
                    return s.createElement(v.Xa, {
                        display: v.X.Flex,
                        flexGrow: 1,
                        flexDirection: v.Aa.Column,
                        justifyContent: v.Wa.Center,
                        alignItems: v.f.Center,
                        padding: 1
                    }, s.createElement(v.Xa, {
                        padding: {
                            top: 1
                        }
                    }, s.createElement(v.W, {
                        type: v.Vb.H5,
                        color: v.O.Link,
                        bold: !0
                    }, Object(c.d)("Cheer to support your streamer and Direct Relief!", "Bits--CharityCheerIntro"))), s.createElement(v.S, {
                        src: "https://d3aqoihi2n8ty8.cloudfront.net/charity-banner/direct-relief_bits-banner.png",
                        alt: Object(c.d)("Twitch + Direct Relief", "Bits--CharityCheerIntro")
                    }), s.createElement(v.W, null, Object(c.d)("Twitch will donate $2 for every 1000 Bits using the limited time Charity Cheermote (charity) or #charity with any Cheermote <x:link>Details</x:link>", {
                        "x:link": function(e) {
                            return s.createElement(v.U, {
                                linkTo: "http://link.twitch.tv/hashtag-charity"
                            }, e)
                        }
                    }, "Bits--CharityCheerIntro")), s.createElement(v.Xa, {
                        padding: {
                            top: 1,
                            bottom: 1
                        }
                    }, s.createElement("a", {
                        href: "#",
                        onClick: e.onClickHelp,
                        "data-test-selector": "help-link"
                    }, Object(c.d)("How do I cheer?", "Bits--CharityCheerIntro"))))
                },
                A = n("dx/T"),
                U = function(e) {
                    return s.createElement(v.Xa, {
                        display: v.X.Flex,
                        flexGrow: 1,
                        flexDirection: v.Aa.Column,
                        justifyContent: v.Wa.Center,
                        alignItems: v.f.Center,
                        padding: 1
                    }, s.createElement(v.Xa, {
                        padding: {
                            top: 2,
                            bottom: 2
                        }
                    }, s.createElement(v.W, {
                        type: v.Vb.H5,
                        color: v.O.Link,
                        bold: !0
                    }, Object(c.d)("Cheering Supports Your Streamer!", "Bits--CheermoteIntro"))), s.createElement(v.W, null, Object(c.d)("Select a Cheermote to start your Cheer", "Bits--CheermoteIntro")), s.createElement(v.Xa, {
                        padding: {
                            top: 2,
                            bottom: 1
                        }
                    }, s.createElement("a", {
                        href: "#",
                        onClick: e.onClickHelp,
                        "data-test-selector": "help-link"
                    }, Object(c.d)("How do I cheer?", "Bits--CheermoteIntro"))))
                },
                L = n("3CMh"),
                B = function(e) {
                    var t = e.headline || e.prefix + (e.tier || "");
                    if (e.tournament && e.tier <= 0) {
                        var n = e.tournament.teams.find(function(t) {
                            return t.id === e.prefix
                        });
                        n && (t = n.name + " - " + e.prefix)
                    }
                    return s.createElement(v.Xa, {
                        display: v.X.Flex,
                        flexDirection: v.Aa.Column,
                        alignItems: v.f.Center,
                        padding: 1
                    }, s.createElement(v.W, {
                        type: v.Vb.H4,
                        bold: !0
                    }, t), s.createElement(L.a, {
                        prefix: e.prefix,
                        amount: e.tier,
                        bitsConfig: e.bitsConfig,
                        showImage: !0,
                        showAmount: e.tier > 0
                    }))
                },
                x = (n("Aa/l"), function(e) {
                    var t = null;
                    return e.minToCheer > 1 && (t = s.createElement(v.W, {
                        "data-test-selector": "min-to-cheer-selector",
                        color: v.O.Alt2,
                        italic: !0
                    }, Object(c.d)("This channel has a Cheer minimum of {minToCheer} Bits", {
                        minToCheer: e.minToCheer
                    }, "Bits--CheermoteTierIntro"))), s.createElement(v.Xa, {
                        display: v.X.Flex,
                        flexGrow: 1,
                        flexDirection: v.Aa.Column,
                        alignItems: v.f.Center,
                        justifyContent: v.Wa.Center,
                        padding: 1,
                        className: "cheermote-tier-intro"
                    }, s.createElement(v.Xa, {
                        padding: {
                            x: 4
                        },
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(v.W, {
                        color: v.O.Alt2
                    }, Object(c.d)("Cheermotes have multiple tiers, rollover below to see each one!", "Bits--CheermoteTierIntro"))), t)
                }),
                F = n("4VQm"),
                P = (n("ecb7"), function(e) {
                    var t = e.prefixes.map(function(t, n) {
                        if (t.alt && t.cheerAmount) return s.createElement(v.Pa, {
                            className: "pending-cheer-list__list-item",
                            key: n,
                            padding: {
                                x: 1
                            }
                        }, s.createElement("li", null, s.createElement(L.a, {
                            prefix: t.alt,
                            amount: t.cheerAmount > w.p ? w.p : t.cheerAmount,
                            bitsConfig: e.bitsConfig,
                            size: L.b.Small,
                            showAmount: !0,
                            showImage: !0
                        })))
                    });
                    return s.createElement(v.Xa, {
                        display: v.X.Flex,
                        flexDirection: v.Aa.Row,
                        alignItems: v.f.End,
                        justifyContent: v.Wa.Center,
                        flexWrap: v.Ba.Wrap,
                        margin: {
                            top: 1
                        },
                        className: "pending-cheer-list"
                    }, t)
                });
            ! function(e) {
                e.MinCheer = "sponsored-campaign-minimum-cheer", e.OverBitsTotal = "sponsored-campaign-over-total", e.CannotBeSponsored = "sponsored-campaign-cannot-be-sponsored", e.OverUserLimit = "sponsored-campaign-over-user-limit"
            }(k || (k = {}));
            var H, W = function(e) {
                    var t = 0;
                    if (e.prefixes.forEach(function(n) {
                            n.alt === e.sponsoredCampaignPrefix && n.cheerAmount && (t += n.cheerAmount)
                        }), t <= 0) return null;
                    if (t < e.sponsoredCampaign.minimumBitsAmount) {
                        var n = Object(c.d)("This Cheermote has a minimum of {minBits} Bits for {brand} to add extra Bits.", {
                            minBits: e.sponsoredCampaign.minimumBitsAmount,
                            brand: e.sponsoredCampaign.brandName
                        }, "Bits--PendingCheer");
                        return s.createElement(v.W, {
                            "data-test-selector": k.MinCheer,
                            color: v.O.Error
                        }, n)
                    }
                    if (e.sponsoredBitsBonus + e.sponsoredCampaign.bitsUsed > e.sponsoredCampaign.bitsTotal) {
                        n = Object(c.d)("Not enough bits from the sponsored pool to support your cheer with the {brand} Cheermote.", {
                            brand: e.sponsoredCampaign.brandName
                        }, "Bits--PendingCheer");
                        return s.createElement(v.W, {
                            "data-test-selector": k.OverBitsTotal,
                            color: v.O.Error
                        }, n)
                    }
                    if (e.sponsoredCampaign.self) {
                        if (!e.sponsoredCampaign.self.canBeSponsored) {
                            n = Object(c.d)("You are not eligible to use the {brand} Cheermote.", {
                                brand: e.sponsoredCampaign.brandName
                            }, "Bits--PendingCheer");
                            return s.createElement(v.W, {
                                "data-test-selector": k.CannotBeSponsored,
                                color: v.O.Error
                            }, n)
                        }
                        if (e.sponsoredCampaign.self.bitsUsed + e.sponsoredBitsBonus > e.sponsoredCampaign.userLimit) {
                            n = Object(c.d)("You have reached the user limit for use of the {brand} Cheermote.", {
                                brand: e.sponsoredCampaign.brandName
                            }, "Bits--PendingCheer");
                            return s.createElement(v.W, {
                                "data-test-selector": k.OverUserLimit,
                                color: v.O.Error
                            }, n)
                        }
                    }
                    return null
                },
                V = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return o.__extends(t, e), t.prototype.render = function() {
                        return this.props.event, null
                    }, t
                }(s.Component),
                G = n("XmgI"),
                X = (n("H0r1"), (H = {})[g.P.USER_BANNED] = "user-banned-selector", H[g.P.USER_INELIGIBLE] = "user-ineligible-selector", H[g.P.USER_SUSPENDED] = "user-suspended-selector", H[g.P.CHANNEL_INELIGIBLE] = "channel-ineligible-selector", H[g.P.ZALGO_MESSAGE] = "zalgo-message-selector", H[g.P.CHANNEL_BLOCKED_TERMS] = "channel-blocked-terms-selector", H[g.P.INVALID_EVENT_ID] = "invalid-event-id-selector", H[g.P.REQUEST_THROTTLED] = "request-throttled-selector", H[g.P.UNKNOWN] = "unknown-selector", H),
                z = function(e) {
                    var t;
                    if (e.prefixes && 1 === e.prefixes.length) {
                        var n = e.prefixes[0].alt;
                        n && (t = s.createElement(v.Xa, {
                            padding: {
                                top: 2
                            }
                        }, s.createElement(L.a, {
                            prefix: n,
                            amount: e.amount > w.p ? w.p : e.amount,
                            bitsConfig: e.bitsConfig,
                            showImage: !0,
                            showAmount: !0
                        })))
                    } else if (e.prefixes) t = s.createElement(v.Xa, {
                        margin: {
                            top: 1
                        }
                    }, s.createElement(F.b, {
                        className: "pending-cheer__scroll-container"
                    }, s.createElement(P, {
                        prefixes: e.prefixes,
                        bitsConfig: e.bitsConfig
                    })));
                    else {
                        var i = Object(c.d)("You are using a total of {totalBits} Bits to cheer in {channelName}!", {
                            totalBits: s.createElement("strong", null, e.amount),
                            channelName: e.channelDisplayName
                        }, "Bits--PendingCheer");
                        t = s.createElement(v.Xa, {
                            "data-test-selector": "default-pending-cheer-message-selector",
                            padding: {
                                top: 2,
                                x: 5
                            }
                        }, s.createElement(v.W, {
                            color: v.O.Alt2,
                            "data-a-target": "total-bits-message"
                        }, i))
                    }
                    var a = null;
                    e.prefixes && e.sponsoredCampaign && e.sponsoredCampaignPrefix && (a = s.createElement(W, {
                        prefixes: e.prefixes,
                        sponsoredCampaign: e.sponsoredCampaign,
                        sponsoredCampaignPrefix: e.sponsoredCampaignPrefix,
                        sponsoredBitsBonus: e.sponsoredBitsBonus
                    }));
                    var r = function(e) {
                            if (e.smallestCheermote < e.minPerEmote || e.bitsSendHasError && e.bitsSendErrorCode === g.P.EMOTE_AMOUNT_BELOW_MIN_BITS) {
                                var t = Object(c.d)("This channel has set a minimum of {minPerEmote} Bits to use a Cheer emote in chat.", {
                                    minPerEmote: e.minPerEmote
                                }, "Bits--PendingCheer");
                                return s.createElement(v.W, {
                                    "data-test-selector": "minimum-cheermote-selector",
                                    color: v.O.Error,
                                    italic: !0,
                                    "data-a-target": "min-emote-bits-error"
                                }, t)
                            }
                            if (e.chatMessage && e.chatMessage.length > w.o || e.bitsSendHasError && e.bitsSendErrorCode === g.P.MESSAGE_LENGTH_EXCEEDED) {
                                var n = Object(c.d)("You have exceeded the maximum number of characters you can use in your cheer.", "Bits--PendingCheer");
                                return s.createElement(v.W, {
                                    "data-test-selector": "message-length-exceeded-selector",
                                    color: v.O.Error,
                                    italic: !0
                                }, n)
                            }
                            if (e.bitsSendHasError) {
                                var i = X[e.bitsSendErrorCode] || X[g.P.UNKNOWN],
                                    a = void 0;
                                switch (e.bitsSendErrorCode) {
                                    case g.P.ZALGO_MESSAGE:
                                        a = Object(c.d)("You have unsupported characters in your message, please remove them and try again.", "Bits--PendingCheer");
                                        break;
                                    case g.P.USER_BANNED:
                                    case g.P.USER_INELIGIBLE:
                                    case g.P.USER_SUSPENDED:
                                    case g.P.CHANNEL_INELIGIBLE:
                                        a = Object(c.d)("Sorry, you are unable to send bits in this channel at this time.", "Bits--PendingCheer");
                                        break;
                                    case g.P.CHANNEL_BLOCKED_TERMS:
                                        a = Object(c.d)("You have blocked words in your message, please remove them and try again.", "Bits--PendingCheer");
                                        break;
                                    case g.P.INVALID_EVENT_ID:
                                    case g.P.REQUEST_THROTTLED:
                                    case g.P.UNKNOWN:
                                    default:
                                        a = Object(c.d)("Something went wrong when processing your cheer, please try again later.", "Bits--PendingCheer")
                                }
                                return s.createElement(v.W, {
                                    "data-test-selector": i,
                                    color: v.O.Error,
                                    italic: !0
                                }, a)
                            }
                            return null
                        }(e),
                        o = function(e) {
                            if (e.largestCheermote > w.p || e.bitsSendHasError && e.bitsSendErrorCode === g.P.TOO_LARGE_BITS_EMOTE) {
                                var t = Object(c.d)("{maximumCheerSize} is the largest Cheer emote, add another emote to Cheer louder!", {
                                    maximumCheerSize: w.p
                                }, "Bits--PendingCheer");
                                return s.createElement(v.W, {
                                    "data-test-selector": "largest-cheermote-selector",
                                    "data-a-target": "max-cheer-bits-error"
                                }, t)
                            }
                            if (0 === e.bitsBalance) return s.createElement(v.W, {
                                "data-test-selector": "zero-balance-selector",
                                "data-a-target": "zero-bits-error"
                            }, Object(c.d)("Please get Bits. You have 0 Bits and cannot send a Cheer", "Bits--PendingCheer"));
                            if (e.bitsBalance && e.amount > e.bitsBalance) return s.createElement(v.W, {
                                "data-test-selector": "purchase-more-selector",
                                "data-a-target": "need-more-bits-error"
                            }, Object(c.d)("Please purchase {neededBits} more Bits to Cheer", {
                                neededBits: e.amount - e.bitsBalance
                            }, "Bits--PendingCheer"));
                            if (e.amount < e.minToCheer || e.bitsSendHasError && e.bitsSendErrorCode === g.P.AMOUNT_BELOW_MIN_BITS) {
                                var n = Object(c.d)("Add {moreBitsAmount} more Bits to reach this channel's minimum Cheer.", {
                                    moreBitsAmount: e.minToCheer - e.amount
                                }, "Bits--PendingCheer");
                                return s.createElement(v.W, {
                                    "data-test-selector": "minimum-cheer-selector",
                                    "data-a-target": "min-cheer-bits-error"
                                }, n)
                            }
                            if (e.amount > w.q || e.bitsSendHasError && e.bitsSendErrorCode === g.P.TOO_LARGE_CHEER) {
                                var i = Object(c.d)("{maximumCheerSize} is the maximum amount of Bits you can send in one message, send multiple messages if you want to Cheer more!", {
                                    maximumCheerSize: w.q
                                }, "Bits--PendingCheer");
                                return s.createElement(v.W, {
                                    "data-test-selector": "minimum-cheer-selector",
                                    "data-a-target": "max-message-bits-error"
                                }, i)
                            }
                            if (e.chatMessage && Object(G.c)(e.chatMessage, e.bitsConfig)) {
                                var a = Object(c.d)("message contains at least one display only Cheermote.", "Bits--PendingCheer");
                                return s.createElement(v.W, {
                                    "data-test-selector": "display-only-cheermote-selector",
                                    "data-a-target": "display-only-bits-error"
                                }, a)
                            }
                            return null
                        }(e),
                        l = s.createElement(L.a, {
                            amount: e.amount + e.bonusBits,
                            prefix: w.l,
                            bitsConfig: e.bitsConfig,
                            display: v.X.Inline,
                            showImage: !1,
                            showAmount: !0,
                            size: L.b.Medium
                        });
                    return s.createElement(v.Xa, null, s.createElement(v.Xa, {
                        display: v.X.Flex,
                        flexDirection: v.Aa.Column,
                        alignItems: v.f.Center,
                        padding: 1,
                        className: "pending-cheer"
                    }, s.createElement(v.W, {
                        fontSize: v.Ca.Size4,
                        bold: !0
                    }, Object(c.d)("Cheering {totalBits} Bits", {
                        totalBits: l
                    }, "Bits--PendingCheer")), !r && t, !r && !o && a && s.createElement(v.Xa, {
                        padding: {
                            top: 1
                        }
                    }, a), !r && o && s.createElement(v.Eb, {
                        padding: {
                            top: 1
                        },
                        color: v.O.Error
                    }, o), r && s.createElement(v.Xa, {
                        padding: {
                            top: 3,
                            x: 3
                        }
                    }, r)), !r && !o && s.createElement(V, {
                        event: e.event,
                        amount: e.amount,
                        "data-test-selector": "event-reminder-selector"
                    }))
                },
                q = n("x1M1"),
                Q = (n("zmH+"), {
                    themed: !0,
                    dark: {
                        "1x": w.b + "/dark/animated/promo/intro.gif"
                    },
                    light: {
                        "1x": w.b + "/light/animated/promo/intro.gif"
                    }
                }),
                Y = function() {
                    return s.createElement(v.Xa, {
                        display: v.X.Flex,
                        flexDirection: v.Aa.Column,
                        alignItems: v.f.Center,
                        justifyContent: v.Wa.Center,
                        flexGrow: 1,
                        className: "bits-sending"
                    }, s.createElement(v.Xa, {
                        padding: {
                            bottom: 1
                        }
                    }, s.createElement(q.a, {
                        sources: Q
                    })), s.createElement(v.W, {
                        italic: !0
                    }, Object(c.d)("Your Cheer is currently processing.", "Bits--SendingBits")))
                };

            function K(e) {
                var t = {
                    maximumFractionDigits: 1
                };
                return e < 1e4 ? Object(c.f)(e, t) : e < 1e5 ? Object(c.g)(100 * Math.floor(e / 100), t) : e < 1e6 ? Object(c.g)(1e3 * Math.floor(e / 1e3), t) : Object(c.g)(1e5 * Math.floor(e / 1e5), t)
            }
            n("Yr1V");
            var $, Z = function(e) {
                    var t = K(e.sponsorCampaign.bitsTotal - e.sponsorCampaign.bitsUsed),
                        n = K(e.sponsorCampaign.bitsTotal);
                    return s.createElement(v.Eb, {
                        background: v.r.AccentAlt2,
                        color: v.O.Overlay,
                        display: v.X.Flex,
                        flexGrow: 1,
                        flexDirection: v.Aa.Column,
                        position: v.jb.Relative,
                        justifyContent: v.Wa.Center,
                        alignItems: v.f.Center,
                        padding: 1
                    }, s.createElement(v.Xa, {
                        padding: {
                            top: 1,
                            bottom: 1
                        }
                    }, s.createElement(v.W, {
                        type: v.Vb.H5,
                        bold: !0
                    }, Object(c.d)("Give more Bits to this streamer!", "Bits--SponsorIntro"))), s.createElement(v.Xa, {
                        display: v.X.Flex,
                        flexDirection: v.Aa.Row,
                        fullWidth: !0,
                        padding: {
                            bottom: 1
                        }
                    }, s.createElement(v.Pa, {
                        padding: {
                            right: 1
                        }
                    }, s.createElement(v.S, {
                        src: e.sponsorCampaign.brandImageURL,
                        alt: e.sponsorCampaign.brandName
                    })), s.createElement(v.Xa, {
                        display: v.X.Flex,
                        flexDirection: v.Aa.Column,
                        flexGrow: 1
                    }, s.createElement(v.Pa, {
                        alignSelf: v.g.Baseline
                    }, s.createElement(v.W, null, Object(c.d)("{brandName} Bits", {
                        brandName: e.sponsorCampaign.brandName
                    }, "Bits--SponsorIntro"))), s.createElement(v.mb, {
                        value: e.sponsorCampaign.bitsPercentageRemaining,
                        mask: !0
                    }), s.createElement(v.Xa, {
                        display: v.X.Flex,
                        flexDirection: v.Aa.Row,
                        justifyContent: v.Wa.Between
                    }, s.createElement(v.W, {
                        fontSize: v.Ca.Size7
                    }, Object(c.d)("{bitsRemaining} Remiaining", {
                        bitsRemaining: t
                    }, "Bits--SponsorIntro")), s.createElement(v.W, {
                        fontSize: v.Ca.Size7
                    }, Object(c.d)("{totalBits}", {
                        totalBits: n
                    }, "Bits--SponsorIntro"))))), s.createElement(v.W, {
                        fontSize: v.Ca.Size7
                    }, Object(c.d)("The {brandName} Cheermote gives {sponsorPercentage}% bonus Bits when you Cheer {minimumSponsorBits} or more!", {
                        minimumSponsorBits: e.sponsorCampaign.thresholds[0].minimumBits,
                        brandName: e.sponsorCampaign.brandName,
                        sponsorPercentage: 100 * e.sponsorCampaign.thresholds[0].matchedPercent
                    }, "Bits--SponsorIntro"), s.createElement(v.U, {
                        type: v.V.Overlay,
                        to: "https://www.twitch.tv/"
                    }, Object(c.d)(" Details", "Bits--SponsorIntro"))), s.createElement(v.Eb, {
                        background: v.r.AccentAlt2,
                        position: v.jb.Absolute,
                        className: "sponsored-cheermote__tail"
                    }))
                },
                J = (n("u0cu"), function(e) {
                    var t = Object(c.d)("You are using {totalBits} Bits to cheer in {channelName}'s chat.", {
                            totalBits: e.totalBits,
                            channelName: e.channelDisplayName
                        }, "Bits--UndoPrompt"),
                        n = null;
                    if (e.prefixes && e.prefixes.length > 1) n = s.createElement(F.b, {
                        className: "bits-undo-prompt__scroll-container"
                    }, s.createElement(v.Xa, {
                        margin: {
                            top: 1
                        }
                    }, s.createElement(P, {
                        prefixes: e.prefixes,
                        bitsConfig: e.bitsConfig
                    })));
                    else {
                        var i = e.prefixes[0].alt;
                        i && (n = s.createElement(v.Xa, {
                            padding: {
                                bottom: 1
                            }
                        }, s.createElement(L.a, {
                            prefix: i,
                            amount: e.totalBits,
                            bitsConfig: e.bitsConfig,
                            showAmount: !0,
                            showImage: !0
                        })))
                    }
                    return s.createElement(v.Xa, {
                        display: v.X.Flex,
                        flexDirection: v.Aa.Column,
                        alignItems: v.f.Center,
                        justifyContent: v.Wa.Center,
                        flexGrow: 1,
                        padding: 1,
                        className: "bits-undo-prompt"
                    }, n, s.createElement(v.W, null, t))
                }),
                ee = function() {
                    return s.createElement(v.Xa, {
                        className: "hgg-2018-introduction"
                    }, s.createElement(v.Xa, {
                        padding: {
                            top: 1
                        }
                    }, s.createElement(v.W, {
                        fontSize: v.Ca.Size5,
                        bold: !0
                    }, Object(c.d)("Cheer with Bits and unlock loot!", "HGG2018Introduction"))), s.createElement(v.Xa, {
                        fullWidth: !0,
                        display: v.X.Flex,
                        flexDirection: v.Aa.Column,
                        alignContent: v.e.Stretch
                    }, s.createElement(v.S, {
                        className: "hgg-2018-introduction__banner-image",
                        src: w.c + "/hearthstone2018/marketing/bitscardbanner.png",
                        srcSet: {
                            "2x": w.c + "/hearthstone2018/marketing/bitscardbanner.png"
                        },
                        alt: Object(c.d)("Hearthstone Global Games", "HGG2018Introduction")
                    })), s.createElement(v.Xa, {
                        padding: {
                            x: 2,
                            top: 1,
                            bottom: .5
                        }
                    }, s.createElement(v.W, null, Object(c.d)("Unlock in-game loot and Twitch emotes when you Cheer with Bits to support your favorite team.", "HGG2018Introduction"))), s.createElement(v.Xa, {
                        padding: {
                            bottom: 1
                        }
                    }, s.createElement(v.U, {
                        to: "https://watch.twitch.tv/HGGCheer",
                        targetBlank: !0,
                        hoverUnderlineNone: !1
                    }, Object(c.d)("Details", "HGG2018Introduction"))))
                },
                te = (n("qKeE"), function() {
                    return s.createElement(v.Xa, {
                        className: "hgc-2018-introduction"
                    }, s.createElement(v.Xa, {
                        padding: {
                            top: 2,
                            bottom: 1
                        }
                    }, s.createElement(v.W, {
                        fontSize: v.Ca.Size5,
                        bold: !0
                    }, Object(c.d)("Cheer with Bits and unlock loot!", "HGC2018Introduction"))), s.createElement(v.Xa, {
                        className: "hgc-2018-introduction__banner-background",
                        padding: {
                            top: 1
                        }
                    }, s.createElement(v.Pa, {
                        position: v.jb.Absolute,
                        attachRight: !0,
                        attachLeft: !0,
                        margin: "auto"
                    }, s.createElement(v.S, {
                        className: "hgc-2018-introduction__banner-image",
                        src: w.c + "/hgc2018/hgc-logo/1x.png",
                        srcSet: {
                            "2x": w.c + "/hgc2018/hgc-logo/2x.png"
                        },
                        alt: Object(c.d)("Heroes of the Storm Global Championship", "HGC2018Introduction")
                    }))), s.createElement(v.Xa, {
                        padding: {
                            x: 2,
                            top: 1,
                            bottom: .5
                        }
                    }, s.createElement(v.W, null, Object(c.d)("Unlock in-game loot and Twitch emotes when you Cheer with Bits to support your favorite team.", "HGC2018Introduction"))), s.createElement(v.Xa, {
                        padding: {
                            bottom: 1
                        }
                    }, s.createElement(v.U, {
                        to: "https://link.twitch.tv/hgccheer2018",
                        targetBlank: !0,
                        hoverUnderlineNone: !1
                    }, Object(c.d)("Details", "HGC2018Introduction"))))
                }),
                ne = (n("TTKc"), function() {
                    return s.createElement(v.Xa, {
                        className: "owl-2018-introduction"
                    }, s.createElement(v.Xa, {
                        padding: {
                            top: 2,
                            bottom: 1
                        }
                    }, s.createElement(v.W, {
                        fontSize: v.Ca.Size5,
                        bold: !0
                    }, Object(c.d)("Cheer with Bits and unlock loot!", "OWL2018Introduction"))), s.createElement(v.Xa, {
                        className: "owl-2018-introduction__banner-background",
                        padding: {
                            top: 1
                        }
                    }, s.createElement("img", {
                        className: "owl-2018-introduction__banner-image",
                        src: w.c + "/owl-2017/overwatch-wide.png"
                    })), s.createElement(v.Xa, {
                        padding: {
                            x: 2,
                            top: 1,
                            bottom: .5
                        }
                    }, s.createElement(v.W, null, Object(c.d)("Unlock an emote set by cheering 250 Bits or more! Cheer 500 Bits or more and you’ll unlock a second set and share emotes with Chat!", "OWL2018Introduction"))), s.createElement(v.Xa, {
                        padding: {
                            bottom: 1
                        }
                    }, s.createElement(v.U, {
                        to: "http://link.twitch.tv/owl-drops-onsite-bitscard-blogus",
                        targetBlank: !0,
                        hoverUnderlineNone: !1
                    }, Object(c.d)("Details", "OWL2018Introduction"))))
                });
            ! function(e) {
                e.CratesChristmas = "CratesChristmas", e.OWL2018 = "owl2018", e.HGC2018 = "hgc2018", e.WORLDCUP2018 = "worldcup2018", e.HGG2018 = "hearthstone2018", e.HGG2018TEST = "hearthstone2018-test"
            }($ || ($ = {}));
            var ie = function(e) {
                    switch (e.event) {
                        case $.HGC2018:
                            return s.createElement(te, null);
                        case $.OWL2018:
                            return s.createElement(ne, null);
                        case $.HGG2018:
                        case $.HGG2018TEST:
                            return s.createElement(ee, null);
                        default:
                            return s.createElement(U, {
                                onClickHelp: e.onClickHelp
                            })
                    }
                },
                ae = function(e) {
                    if (e.isSending) return e.totalBits < w.r ? s.createElement(Y, null) : s.createElement(J, {
                        bitsConfig: e.bitsConfig,
                        channelDisplayName: e.displayName,
                        prefixes: e.currentCheers,
                        totalBits: e.totalBits
                    });
                    if (e.hoveredCheermote) return s.createElement(B, {
                        event: e.event,
                        tournament: e.tournament,
                        bitsConfig: e.bitsConfig,
                        prefix: e.hoveredCheermote,
                        tier: e.hoveredTier
                    });
                    var t = function(e) {
                            var t = null;
                            return e.orderedActions.forEach(function(e) {
                                e.campaign && (t = e.campaign)
                            }), t
                        }(e.bitsConfig),
                        n = function(e) {
                            var t = "";
                            return e.orderedActions.forEach(function(e) {
                                e.campaign && (t = e.prefix)
                            }), t
                        }(e.bitsConfig),
                        i = c.b.get(w.u, R.a.Off);
                    if (e.totalBits) return s.createElement(z, {
                        bitsConfig: e.bitsConfig,
                        prefixes: e.currentCheers,
                        amount: e.totalBits,
                        bonusBits: e.bonusBits,
                        channelDisplayName: e.displayName,
                        bitsBalance: e.bitsBalance,
                        largestCheermote: e.largestCheermote,
                        smallestCheermote: e.smallestCheermote,
                        minPerEmote: e.emoteMinimumBits,
                        minToCheer: e.cheerMinimumBits,
                        event: e.event,
                        sponsoredCampaign: t,
                        sponsoredCampaignPrefix: n,
                        sponsoredBitsBonus: e.bonusBits,
                        bitsSendErrorCode: e.bitsSendErrorCode,
                        bitsSendHasError: e.bitsSendHasError,
                        chatMessage: e.chatMessage
                    });
                    if (e.helpRequested) return s.createElement(A.a, null);
                    var a = c.b.get(w.d, R.a.Off);
                    if (e.chosenCheermote) {
                        var r = e.cheerMinimumBits;
                        return s.createElement(x, {
                            minToCheer: r
                        })
                    }
                    return e.event ? s.createElement(ie, {
                        event: e.event,
                        onClickHelp: e.showHelp,
                        channelID: e.channelID
                    }) : t && (i === R.a.On || i === R.a.StaffOnly && e.isStaff) ? s.createElement(Z, {
                        sponsorCampaign: t
                    }) : a === R.a.On ? s.createElement(j, {
                        onClickHelp: e.showHelp
                    }) : s.createElement(U, {
                        onClickHelp: e.showHelp
                    })
                };
            var re = n("XDQu"),
                oe = n("8/mp"),
                se = (n("AcdH"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleCheermoteHover = function(e) {
                            var n = e.currentTarget.getAttribute("data-key");
                            n && t.props.onHover(n)
                        }, t.handleCheermoteUnhover = function() {
                            t.props.onHoverLeave()
                        }, t.handleCheermoteClick = function(e) {
                            var n = e.currentTarget.getAttribute("data-key");
                            n && t.props.onClick(n)
                        }, t
                    }
                    return o.__extends(t, e), t.prototype.render = function() {
                        var e = this,
                            t = this.props.bitsConfig.orderedActions.filter(function(e) {
                                return e.type !== w.h && e.type !== w.f
                            }).map(function(e) {
                                var t = e.indexedTiers.get(w.m);
                                return t ? {
                                    imgSrc: t.indexedImages.LIGHT.static.get(2),
                                    imgSrcDark: t.indexedImages.DARK.static.get(2),
                                    key: e.prefix
                                } : null
                            }).map(function(t, n) {
                                return t && t.key ? s.createElement(v.Pa, {
                                    key: t.key,
                                    margin: {
                                        bottom: 1
                                    }
                                }, s.createElement("li", {
                                    className: "cheermote-prefix-selector__cheermote"
                                }, s.createElement("button", {
                                    className: "cheermote-prefix-selector__item-button",
                                    "data-key": t.key,
                                    onMouseEnter: e.handleCheermoteHover,
                                    onMouseLeave: e.handleCheermoteUnhover,
                                    onClick: e.handleCheermoteClick,
                                    "data-a-target": "cheermote-" + t.key.replace(":", "")
                                }, s.createElement("img", {
                                    alt: t.key,
                                    src: e.props.darkModeEnabled ? t.imgSrcDark : t.imgSrc
                                })))) : s.createElement("li", {
                                    key: "null-cheermote-" + n
                                }, s.createElement("button", {
                                    className: "cheermote-prefix-selector__item-button",
                                    disabled: !0
                                }, s.createElement("div", {
                                    className: "cheermote-prefix-selector__placeholder"
                                })))
                            }),
                            n = s.createElement(v.Pa, {
                                className: "cheermote-prefix-selector__cheermotes",
                                display: v.X.Flex,
                                flexWrap: v.Ba.Wrap,
                                flexDirection: v.Aa.Row,
                                justifyContent: v.Wa.Start,
                                alignItems: v.f.End,
                                padding: {
                                    bottom: 1
                                }
                            }, s.createElement("ul", null, t));
                        return s.createElement(v.Xa, {
                            flexGrow: 1,
                            overflow: v.cb.Hidden,
                            className: "cheermote-prefix-selector"
                        }, s.createElement(oe.b, null, n))
                    }, t
                }(s.PureComponent));
            var le = Object(a.connect)(function(e) {
                    return {
                        darkModeEnabled: Object(re.a)(e) === N.a.Dark
                    }
                })(se),
                ce = (n("ECxT"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleCheermoteHover = function(e) {
                            var n = e.currentTarget.getAttribute("data-key");
                            n && t.props.onHover(n)
                        }, t.handleCheermoteUnhover = function() {
                            t.props.onHoverLeave()
                        }, t.handleCheermoteClick = function(e) {
                            var n = e.currentTarget.getAttribute("data-key");
                            n && t.props.onClick(n)
                        }, t
                    }
                    return o.__extends(t, e), t.prototype.render = function() {
                        var e = this,
                            t = this.props.bitsConfig.indexedActions[this.props.chosenCheermote.toLowerCase()],
                            n = t.orderedTiers.filter(function(e) {
                                return e.canCheer && e.canShowInBitsCard
                            }).map(function(e) {
                                return {
                                    imgSrc: e.indexedImages.LIGHT.static.get(2),
                                    imgSrcDark: e.indexedImages.DARK.static.get(2),
                                    key: t.prefix + ":" + e.bits
                                }
                            }).reverse().map(function(t, n) {
                                return t && t.key ? s.createElement("li", {
                                    key: t.key,
                                    className: "cheermote-tier-selector__cheermote"
                                }, s.createElement("button", {
                                    className: "cheermote-tier-selector__item-button",
                                    "data-key": t.key,
                                    onMouseEnter: e.handleCheermoteHover,
                                    onMouseLeave: e.handleCheermoteUnhover,
                                    onClick: e.handleCheermoteClick,
                                    "data-a-target": "cheermote-" + t.key.replace(":", "")
                                }, s.createElement("img", {
                                    alt: t.key,
                                    src: e.props.darkModeEnabled ? t.imgSrcDark : t.imgSrc
                                })), s.createElement(L.a, {
                                    bitsConfig: e.props.bitsConfig,
                                    prefix: "",
                                    amount: +t.key.split(":")[1],
                                    showImage: !1,
                                    showAmount: !0,
                                    size: L.b.Small
                                })) : s.createElement("li", {
                                    key: "null-cheermote-" + n
                                }, s.createElement("button", {
                                    className: "cheermote-tier-selector__item-button",
                                    disabled: !0
                                }, s.createElement("div", {
                                    className: "cheermote-tier-selector__placeholder"
                                })))
                            }),
                            i = s.createElement(v.Xa, {
                                padding: {
                                    right: 2
                                },
                                fullWidth: !0,
                                className: "cheermote-tier-selector__back-button"
                            }, s.createElement(v.z, {
                                "data-a-target": "bits-card-back-button",
                                type: v.F.Text,
                                fullWidth: !0,
                                onClick: this.props.onClose
                            }, Object(c.d)("Show All Cheermotes", "CheermoteCarousel"))),
                            a = s.createElement(v.Pa, {
                                className: "cheermote-tier-selector__cheermotes",
                                display: v.X.Flex,
                                flexWrap: v.Ba.Wrap,
                                flexDirection: v.Aa.Row,
                                justifyContent: v.Wa.Between,
                                alignItems: v.f.End,
                                padding: {
                                    bottom: 1
                                }
                            }, s.createElement("ul", null, n, i));
                        return s.createElement(v.Xa, {
                            flexGrow: 1,
                            overflow: v.cb.Hidden,
                            className: "cheermote-tier-selector"
                        }, a)
                    }, t
                }(s.PureComponent));
            var de = Object(a.connect)(function(e) {
                    return {
                        darkModeEnabled: Object(re.a)(e) === N.a.Dark
                    }
                })(ce),
                ue = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return o.__extends(t, e), t.prototype.render = function() {
                        return this.props.helpRequested && !this.props.currentCheers.length ? null : this.props.chosenCheermote ? s.createElement(de, {
                            bitsConfig: this.props.bitsConfig,
                            chosenCheermote: this.props.chosenCheermote,
                            onHover: this.props.handleTierHover,
                            onHoverLeave: this.props.handleUnhover,
                            onClick: this.props.handleTierClick,
                            onClose: this.props.clearChosenCheermote
                        }) : s.createElement(le, {
                            bitsConfig: this.props.bitsConfig,
                            onHover: this.props.handleCheermoteHover,
                            onHoverLeave: this.props.handleUnhover,
                            onClick: this.props.handleCheermoteClick
                        })
                    }, t
                }(s.PureComponent),
                me = n("ebRM"),
                pe = n("RiD7"),
                he = n("UajW"),
                ge = (n("c+1r"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            chosenCheermote: null,
                            hoveredCheermote: null,
                            hoveredTier: 0,
                            totalBits: 0,
                            bonusBits: 0,
                            largestCheermote: 0,
                            smallestCheermote: 0
                        }, t.unhoverTimeout = 0, t.handleTierHover = function(e) {
                            clearTimeout(t.unhoverTimeout);
                            var n = e.split(":");
                            n.length < 2 || (t.setState({
                                hoveredTier: +n[1],
                                hoveredCheermote: n[0]
                            }), t.props.trackBitsCardInteraction(pe.a.PreviewEmote, {
                                emoteType: n[0],
                                emoteLevel: +n[1]
                            }))
                        }, t.handleUnhover = function() {
                            t.unhoverTimeout = setTimeout(t.clearHovered, 500)
                        }, t.clearHovered = function() {
                            t.setState({
                                hoveredTier: 0,
                                hoveredCheermote: null
                            })
                        }, t.handleTierClick = function(e) {
                            t.props.onClickCheermote(e.split(":").join(""))
                        }, t.handleCheermoteHover = function(e) {
                            clearTimeout(t.unhoverTimeout), t.setState({
                                hoveredCheermote: e,
                                hoveredTier: 0
                            }), t.props.trackBitsCardInteraction(pe.a.PreviewEmote, {
                                emoteType: e,
                                emoteLevel: 100
                            })
                        }, t.handleCheermoteClick = function(e) {
                            t.setState({
                                chosenCheermote: e,
                                hoveredCheermote: null,
                                hoveredTier: 0
                            })
                        }, t.clearChosenCheermote = function() {
                            t.setState({
                                chosenCheermote: null,
                                hoveredCheermote: null,
                                hoveredTier: 0
                            })
                        }, t
                    }
                    return o.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        var t = this.props.visible || !!this.props.currentCheers.length,
                            n = e.visible || !!e.currentCheers.length;
                        if (t && !n && this.setState({
                                chosenCheermote: null,
                                hoveredCheermote: null,
                                hoveredTier: 0
                            }), this.props.currentCheers !== e.currentCheers) {
                            var i = Object(me.a)(e.currentCheers),
                                a = i.total,
                                r = i.bonus,
                                o = i.largestCheermote,
                                s = i.smallestCheermote;
                            this.setState({
                                totalBits: a,
                                bonusBits: r,
                                largestCheermote: o,
                                smallestCheermote: s
                            })
                        }
                    }, t.prototype.componentDidMount = function() {
                        var e = Object(me.a)(this.props.currentCheers),
                            t = e.total,
                            n = e.bonus,
                            i = e.largestCheermote,
                            a = e.smallestCheermote;
                        this.setState({
                            totalBits: t,
                            bonusBits: n,
                            largestCheermote: i,
                            smallestCheermote: a
                        }), this.props.onMount && this.props.onMount()
                    }, t.prototype.render = function() {
                        var e = this.props,
                            t = e.cheerMessageAutoModded,
                            n = e.visible,
                            i = e.currentCheers,
                            a = e.data,
                            r = e.bitsConfig,
                            o = e.isSending,
                            l = e.helpRequested,
                            d = e.channelID,
                            u = e.showHelp,
                            m = e.isStaff,
                            p = e.bitsSendErrorCode,
                            h = e.bitsSendHasError,
                            g = e.handleClickBuy,
                            f = e.onCancelSend,
                            b = e.onConfirmSend,
                            k = e.chatMessage;
                        if (t || !n && !i.length) return null;
                        if (!a || a.loading) return s.createElement(S.a, null);
                        if (a.error || !r) return s.createElement(E, null);
                        var C, y = this.props.helpRequested && !this.props.currentCheers.length,
                            N = null;
                        return a.user.cheer.settings.event && (N = a.user.cheer.settings.event.toLowerCase().replace("_", "-")), y && (C = s.createElement(v.Xa, {
                            position: v.jb.Absolute,
                            padding: {
                                left: .5,
                                top: .5
                            },
                            attachLeft: !0,
                            attachTop: !0
                        }, s.createElement(v.z, {
                            onClick: this.props.closeHelp,
                            "data-a-target": "bits-card-back-button",
                            icon: v.tb.ChatSettingsBack,
                            type: v.F.Text,
                            size: v.D.Small
                        }, Object(c.d)("Back", "BitsCard")))), s.createElement(s.Fragment, null, !o && C, s.createElement(v.Eb, {
                            className: "t-bits-card__contents",
                            display: v.X.Flex,
                            flexGrow: 0,
                            flexDirection: v.Aa.Column,
                            alignContent: v.e.Stretch,
                            textAlign: v.Rb.Center,
                            borderBottom: !o,
                            fullWidth: !0
                        }, s.createElement(ae, {
                            bitsBalance: a.currentUser && a.currentUser.bitsBalance,
                            bitsConfig: r,
                            cheerMinimumBits: a.user.cheer.settings.cheerMinimumBits,
                            chosenCheermote: this.state.chosenCheermote,
                            currentCheers: i,
                            displayName: a.user.displayName,
                            emoteMinimumBits: a.user.cheer.settings.emoteMinimumBits,
                            event: N,
                            helpRequested: l,
                            hoveredCheermote: this.state.hoveredCheermote,
                            hoveredTier: this.state.hoveredTier,
                            isSending: o,
                            largestCheermote: this.state.largestCheermote,
                            smallestCheermote: this.state.smallestCheermote,
                            totalBits: this.state.totalBits,
                            bonusBits: this.state.bonusBits,
                            tournament: a.user.tournament,
                            channelID: d,
                            showHelp: u,
                            isStaff: m,
                            bitsSendErrorCode: p,
                            bitsSendHasError: h,
                            chatMessage: k
                        })), !o && s.createElement(ue, {
                            bitsConfig: r,
                            chosenCheermote: this.state.chosenCheermote,
                            currentCheers: i,
                            eventString: N,
                            helpRequested: l,
                            handleCheermoteClick: this.handleCheermoteClick,
                            handleCheermoteHover: this.handleCheermoteHover,
                            handleTierClick: this.handleTierClick,
                            handleTierHover: this.handleTierHover,
                            handleUnhover: this.handleUnhover,
                            clearChosenCheermote: this.clearChosenCheermote
                        }), s.createElement(v.Xa, {
                            className: "t-bits-card__footer",
                            fullWidth: !0,
                            display: v.X.Flex
                        }, s.createElement(T, {
                            bitsBalance: a.currentUser && a.currentUser.bitsBalance,
                            bitsConfig: r,
                            event: N,
                            isSending: o,
                            totalBits: this.state.totalBits,
                            userSelfBitsBadge: a.user.self && a.user.self.bitsBadge,
                            handleClickBuy: g,
                            onCancelSend: f,
                            onConfirmSend: b
                        })))
                    }, t
                }(s.Component)),
                fe = Object(l.compose)(Object(u.a)(function(e) {
                    return {
                        query: he,
                        variables: {
                            name: e.channelID
                        },
                        topic: Object(h.d)(e.channelID),
                        type: m.PubsubMessageType.BitsChannelSettingsEvent,
                        mutator: function(e, t) {
                            if (t) return void 0 !== e.updates.minimum_bits && (t.user.cheer.settings.cheerMinimumBits = e.updates.minimum_bits), void 0 !== e.updates.minimum_bits_emote && (t.user.cheer.settings.emoteMinimumBits = e.updates.minimum_bits_emote), t
                        }
                    }
                }), Object(d.a)(he, {
                    name: "data",
                    skip: function(e) {
                        return !e.channelID
                    },
                    options: function(e) {
                        return {
                            variables: {
                                name: e.channelID,
                                withCheerBombEventEnabled: !1
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                }))(ge),
                be = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return o.__extends(t, e), t.prototype.render = function() {
                        return s.createElement(v.Xa, {
                            padding: 1,
                            textAlign: v.Rb.Center
                        }, s.createElement(v.W, {
                            color: v.O.Error,
                            italic: !0
                        }, Object(c.d)("You cannot Cheer in your own channel.", "BitsCard")))
                    }, t
                }(s.PureComponent),
                ve = n("opIq"),
                ke = n("bYOw"),
                Ce = n("H31v"),
                ye = n("8nkl"),
                Ee = n("ao1a"),
                Se = n("Gcqi"),
                Ne = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            helpRequested: !1,
                            buyingBits: !1,
                            backTargetsIntro: !1
                        }, t.lastRefetchTime = 0, t.showHelp = function(e) {
                            e.preventDefault(), t.setState({
                                helpRequested: !0
                            }), t.props.trackBitsCardInteraction(pe.a.NewUserHelpRequested)
                        }, t.closeHelp = function() {
                            return t.setState({
                                helpRequested: !1
                            })
                        }, t.handleClickBuy = function() {
                            t.setState({
                                buyingBits: !0
                            }), t.props.trackBitsCardInteraction(pe.a.BuyMain)
                        }, t.handleCloseBuy = function() {
                            return t.setState({
                                buyingBits: !1
                            })
                        }, t.handleSkip = function() {
                            t.closeHelp(), t.mutateFirstCheerTutorialState({
                                hasAbandoned: !1,
                                hasSkipped: !0
                            }), t.props.trackBitsCardInteraction(pe.a.NewUserSkipTutorial)
                        }, t.handleCloseIntro = function() {
                            t.closeHelp(), t.props.currentCheers.length ? t.mutateFirstCheerTutorialState({
                                hasAbandoned: !1,
                                hasSkipped: !0
                            }) : t.props.onUserClose(), t.props.trackBitsCardInteraction(pe.a.NewUserCloseTutorial)
                        }, t.handleClickFirstTimePurchaseDiscount = function() {
                            t.setState({
                                buyingBits: !0,
                                helpRequested: !1,
                                backTargetsIntro: !0
                            }), t.mutateFirstCheerTutorialState({
                                hasAbandoned: !0,
                                hasSkipped: !1
                            }), t.props.trackBitsCardInteraction(pe.a.NewUserFirstTimePurchaseDiscountClick)
                        }, t.handleBackFromBuy = function() {
                            t.setState({
                                helpRequested: t.state.backTargetsIntro,
                                buyingBits: !1
                            })
                        }, t.onMountBitsCardMain = function() {
                            t.setState({
                                backTargetsIntro: !1
                            })
                        }, t.mutateFirstCheerTutorialState = function(e) {
                            return o.__awaiter(t, void 0, void 0, function() {
                                var t, n, i, a, r, s, l;
                                return o.__generator(this, function(d) {
                                    switch (d.label) {
                                        case 0:
                                            if (!(t = this.props.data && this.props.data.currentUser)) return [3, 4];
                                            n = t.bitsUserSettings, i = t.id, a = n && n.firstCheerTutorial || {
                                                hasAbandoned: !1,
                                                hasSkipped: !1
                                            }, r = {
                                                hasAbandoned: e.hasAbandoned,
                                                hasSkipped: e.hasSkipped
                                            }, s = {
                                                setBitsUserSettings: {
                                                    __typename: "SetBitsUserSettingsPayload",
                                                    currentUser: {
                                                        __typename: "User",
                                                        id: i || null,
                                                        bitsUserSettings: {
                                                            __typename: "BitsUserSettings",
                                                            firstCheerTutorial: o.__assign({
                                                                __typename: "FirstCheerTutorial"
                                                            }, a, r)
                                                        }
                                                    }
                                                }
                                            }, d.label = 1;
                                        case 1:
                                            return d.trys.push([1, 3, , 4]), [4, this.props.setBitsUserSettings(Object(p.b)({
                                                abandonedFirstCheerTutorial: e.hasAbandoned,
                                                skippedFirstCheerTutorial: e.hasSkipped
                                            }, s))];
                                        case 2:
                                            return d.sent(), [3, 4];
                                        case 3:
                                            return l = d.sent(), c.k.error(l, "Failed to set bits user settings."), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, t
                    }
                    return o.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        var t = this.props.visible || !!this.props.currentCheers.length,
                            n = e.visible || !!e.currentCheers.length;
                        if (!t && n) {
                            var i = Date.now();
                            i - this.lastRefetchTime > 1e3 && this.props.data && e.data && !e.data.loading && (this.lastRefetchTime = i, e.data.refetch())
                        }
                        t && !n && this.setState({
                            buyingBits: !1
                        })
                    }, t.prototype.render = function() {
                        if (this.props.cheerMessageAutoModded || !this.props.visible && !this.props.currentCheers.length) return null;
                        if (!this.props.data || this.props.data.loading) return s.createElement(C, {
                            onUserClose: this.props.onUserClose
                        }, s.createElement(S.a, null));
                        if (this.props.data.error || !this.props.bitsConfig) return s.createElement(C, {
                            onUserClose: this.props.onUserClose
                        }, s.createElement(E, null));
                        if (this.props.data.currentUser && this.props.data.currentUser.login === this.props.channelLogin) return s.createElement(C, {
                            onUserClose: this.props.onUserClose
                        }, s.createElement(be, null));
                        var e = this.props.data && this.props.data.currentUser,
                            t = e && e.bitsUserState,
                            n = e && e.bitsUserSettings;
                        if (Object(Ee.b)(t)) {
                            if (this.state.buyingBits) return s.createElement(C, {
                                onUserClose: this.handleCloseBuy,
                                closeDataATarget: "bits-buy-card-close-button"
                            }, s.createElement(ve.a, {
                                bitsConfig: this.props.bitsConfig,
                                channelLogin: this.props.channelLogin,
                                closeAllBits: this.props.onUserClose,
                                onClose: this.handleCloseBuy,
                                onBack: this.handleBackFromBuy,
                                trackBitsCardInteraction: this.props.trackBitsCardInteraction,
                                location: pe.b.ChatTooltip,
                                shouldShowNewUserCheerUX: !0
                            }));
                            if (Object(Ee.d)(t, n) || Object(Ee.b)(t) && this.state.helpRequested) return s.createElement(C, {
                                onUserClose: this.handleCloseIntro,
                                closeDataATarget: "bits-intro-close-button"
                            }, s.createElement(v.Xa, {
                                padding: 1
                            }, s.createElement(y.a, {
                                onUserSkip: this.handleSkip,
                                onUserClickFirstTimePurchaseDiscount: this.handleClickFirstTimePurchaseDiscount,
                                trackBitsCardInteraction: this.props.trackBitsCardInteraction
                            })))
                        }
                        return this.state.buyingBits ? s.createElement(C, {
                            onUserClose: this.handleCloseBuy,
                            closeDataATarget: "bits-buy-card-close-button"
                        }, s.createElement(ve.a, {
                            bitsConfig: this.props.bitsConfig,
                            channelLogin: this.props.channelLogin,
                            closeAllBits: this.props.onUserClose,
                            onClose: this.handleCloseBuy,
                            trackBitsCardInteraction: this.props.trackBitsCardInteraction,
                            location: pe.b.ChatTooltip,
                            size: ke.b.Scrollview
                        })) : s.createElement(C, {
                            onUserClose: this.props.currentCheers.length ? void 0 : this.props.onUserClose
                        }, s.createElement(fe, {
                            onMount: this.onMountBitsCardMain,
                            bitsConfig: this.props.bitsConfig,
                            channelID: this.props.channelID,
                            channelLogin: this.props.channelLogin,
                            cheerMessageAutoModded: this.props.cheerMessageAutoModded,
                            visible: this.props.visible,
                            currentCheers: this.props.currentCheers,
                            isSending: this.props.isSending,
                            isStaff: this.props.isStaff,
                            onClickCheermote: this.props.onClickCheermote,
                            onCancelSend: this.props.onCancelSend,
                            onConfirmSend: this.props.onConfirmSend,
                            trackBitsCardInteraction: this.props.trackBitsCardInteraction,
                            bitsSendErrorCode: this.props.bitsSendErrorCode,
                            bitsSendHasError: this.props.bitsSendHasError,
                            helpRequested: this.state.helpRequested,
                            showHelp: this.showHelp,
                            closeHelp: this.closeHelp,
                            handleClickBuy: this.handleClickBuy,
                            chatMessage: this.props.chatMessage
                        }))
                    }, t
                }(s.Component),
                _e = Object(l.compose)(Object(d.a)(Se, {
                    name: "data",
                    skip: function(e) {
                        return !e.channelID
                    },
                    options: function() {
                        return {
                            variables: {
                                isActiveFirstCheerExperiment: Object(Ee.a)()
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                }), Object(d.a)(ye, {
                    name: "setBitsUserSettings"
                }), Object(u.a)(function(e) {
                    return {
                        query: Se,
                        variables: {
                            isActiveFirstCheerExperiment: Object(Ee.a)()
                        },
                        topic: e.user ? Object(h.D)(e.user.id) : "",
                        type: m.PubsubMessageType.UserBitsFirstPurchase,
                        skip: !e.user || !Object(Ee.a)(),
                        mutator: function(t, n) {
                            return !n.currentUser || t.message_type !== Ce.b.FirstPurchase || e.user && t.data.user_id !== e.user.id ? n : (n.currentUser.bitsUserState === g.d.NEW_USER && (n.currentUser.bitsUserState = g.d.ACQUIRED), n)
                        }
                    }
                }))(Ne);
            var Oe = Object(a.connect)(function(e) {
                return {
                    user: Object(r.e)(e),
                    isStaff: Object(r.g)(e)
                }
            })(_e);
            n.d(t, "a", function() {
                return Oe
            })
        },
        s8Ou: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "ReportUserModal_ReportUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ReportContentInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "reportContent"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "contentID"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 111
                }
            };
            n.loc.source = {
                body: "mutation ReportUserModal_ReportUser($input: ReportContentInput!) {\nreportContent(input: $input) {\ncontentID\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        sAMt: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChatUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "login"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 62
                }
            };
            n.loc.source = {
                body: "query ChatUser($login: String!) {\nuser(login: $login) {\nid\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        sMoq: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "VIPUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "GrantVIPInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "grantVIP"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "channel"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "grantee"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "login"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "error"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 122
                }
            };
            n.loc.source = {
                body: "mutation VIPUser($input: GrantVIPInput!){\ngrantVIP(input: $input) {\nchannel {\nid\n}\ngrantee {\nid\nlogin\n}\nerror {\ncode\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        sU0Q: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "VideoChatCard_Video"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "videoID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "video"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "videoID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "title"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "previewThumbnailURL"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "90"
                                        }
                                    }, {
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "height"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "51"
                                        }
                                    }],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "publishedAt"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "owner"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "login"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "displayName"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 162
                }
            };
            n.loc.source = {
                body: "query VideoChatCard_Video($videoID: ID!) {\nvideo(id: $videoID) {\nid\ntitle\npreviewThumbnailURL(width: 90 height: 51)\npublishedAt\nowner {\nid\nlogin\ndisplayName\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        sblI: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            });
            var i = n("0Log"),
                a = n("ZtEv"),
                r = n("aF6k");
            i.ModerationActions.Ban, i.ModerationActions.Timeout, i.ModerationActions.Unban, i.ModerationActions.Untimeout;

            function o(e, t, n, i) {
                return {
                    type: a.b.Moderation,
                    moderationType: e,
                    id: Object(r.a)(t + "-mod"),
                    userLogin: t,
                    reason: n,
                    duration: i
                }
            }
        },
        tFCv: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("q1tI"),
                r = n("/MKj"),
                o = n("9C/b"),
                s = n("fvjX"),
                l = n("ZS2+"),
                c = n("/0dD"),
                d = n("SDEh"),
                u = n("edgk"),
                m = n("1/iK"),
                p = n("y5D0"),
                h = n("jZLd"),
                g = n("kRBY"),
                f = n("XDQu"),
                b = n("+pBb"),
                v = n("tY8L"),
                k = n("r2Xj"),
                C = n("WytW"),
                y = n("F6GT"),
                E = n("x0gr"),
                S = l.a.wrap(function() {
                    return n.e(199).then(n.bind(null, "8MX0"))
                }, "ChatSettingsComponent"),
                N = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            editAppearance: !1,
                            shouldMountChild: !1
                        }, t.handleSettingsToggle = function(e) {
                            t.setState({
                                shouldMountChild: !0
                            }), t.props.onToggle && t.props.onToggle(e), t.state.editAppearance && t.setState({
                                editAppearance: !1
                            })
                        }, t.onEdit = function() {
                            t.setState({
                                editAppearance: !0
                            })
                        }, t.onLeaveEdit = function() {
                            t.setState({
                                editAppearance: !1
                            })
                        }, t.onDarkModeToggle = function() {
                            var e = t.props.darkModeEnabled ? c.a.Light : c.a.Dark;
                            t.props.onThemeChanged(e, !t.props.isPopout), Object(E.a)({
                                channelLogin: t.props.channelLogin,
                                isHostMode: t.props.isHostMode,
                                newValue: !t.props.darkModeEnabled,
                                settingName: k.a.DarkMode
                            })
                        }, t.onTimestampToggle = function() {
                            Object(y.b)("showTimestamps", !t.props.showTimestamps), t.props.showTimestamps ? t.props.onTimestampsDisable() : t.props.onTimestampsEnable(), Object(E.a)({
                                channelLogin: t.props.channelLogin,
                                isHostMode: t.props.isHostMode,
                                newValue: !t.props.showTimestamps,
                                settingName: k.a.ShowTimestamps
                            })
                        }, t.onHighContrastColorsToggle = function() {
                            Object(y.b)("useHighContrastColors", !t.props.useHighContrastColors), t.props.useHighContrastColors ? t.props.onUseHighContrastColorsDisable() : t.props.onUseHighContrastColorsEnable(), Object(E.a)({
                                channelLogin: t.props.channelLogin,
                                isHostMode: t.props.isHostMode,
                                newValue: !t.props.useHighContrastColors,
                                settingName: k.a.UseHighContrastColors
                            })
                        }, t.onChatHide = function() {
                            t.props.onChatHide(), Object(E.a)({
                                channelLogin: t.props.channelLogin,
                                isHostMode: t.props.isHostMode,
                                newValue: !0,
                                settingName: k.a.HideChat
                            })
                        }, t.onChatPopout = function() {
                            t.props.isPopout || t.props.onChatHide();
                            var e = window.open("/popout/" + t.props.channelLogin + "/chat?popout=", "_blank", "right=50,top=50,width=400,height=600,resizable=yes,scrollbars=no,toolbar=no,location=no,directories=no,status=no,menubar=no,copyhistory=no");
                            e && !Object(d.a)() && (e.focus(), Object(u.a)(e, function() {
                                t.props.onChatUnhide()
                            }))
                        }, t.onColorSelected = function(e) {
                            t.props.isLoggedIn ? t.props.onChatCommand(Object(C.a)(e)) : t.props.login()
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return a.createElement(a.Fragment, null, a.createElement(S.Preload, null), a.createElement(T, {
                            onToggle: this.handleSettingsToggle
                        }, this.state.shouldMountChild && a.createElement(S, {
                            authToken: this.props.authToken,
                            darkModeEnabled: this.props.darkModeEnabled,
                            editAppearance: this.state.editAppearance,
                            isCurrentUserModerator: this.props.isCurrentUserModerator,
                            isHostMode: this.props.isHostMode,
                            isPopout: this.props.isPopout,
                            isEmbedded: this.props.isEmbedded,
                            onChatCommand: this.props.onChatCommand,
                            onChatHide: this.onChatHide,
                            onChatPopout: this.onChatPopout,
                            onShowChatRules: this.props.onShowChatRules,
                            onDarkModeToggle: this.onDarkModeToggle,
                            onTimestampToggle: this.onTimestampToggle,
                            onHighContrastColorsToggle: this.onHighContrastColorsToggle,
                            showTimestamps: this.props.showTimestamps,
                            useHighContrastColors: this.props.useHighContrastColors,
                            theatreModeEnabled: this.props.theatreModeEnabled,
                            onColorSelected: this.onColorSelected,
                            channelLogin: this.props.channelLogin,
                            channelID: this.props.channelID,
                            isLoggedIn: this.props.isLoggedIn,
                            onClickEditAppearance: this.onEdit,
                            onLeaveEditAppearance: this.onLeaveEdit,
                            onShowViewerCard: this.props.onShowViewerCard,
                            containerElement: this.props.containerElement,
                            "data-test-selector": "chat-settings-component"
                        })))
                    }, t
                }(a.Component);
            var _ = Object(r.connect)(function(e) {
                    return {
                        isLoggedIn: Object(g.f)(e),
                        darkModeEnabled: Object(f.a)(e) === c.a.Dark,
                        showTimestamps: e.chat.showTimestamps,
                        useHighContrastColors: e.chat.useHighContrastColors,
                        theatreModeEnabled: e.ui.theatreModeEnabled
                    }
                }, function(e) {
                    return Object(s.bindActionCreators)({
                        login: function() {
                            return Object(p.e)(m.a.Chat)
                        },
                        onChatHide: function() {
                            return b.L()
                        },
                        onChatUnhide: function() {
                            return b.O()
                        },
                        onThemeChanged: function(e) {
                            return Object(h.b)(e, void 0, !1)
                        },
                        onTimestampsDisable: function() {
                            return b.E()
                        },
                        onTimestampsEnable: function() {
                            return b.J()
                        },
                        onUseHighContrastColorsDisable: function() {
                            return b.F()
                        },
                        onUseHighContrastColorsEnable: function() {
                            return b.K()
                        },
                        onShowViewerCard: v.e
                    }, e)
                })(N),
                O = Object(o.a)(_),
                w = n("/7QA"),
                M = n("eJ65"),
                D = n("Ue10"),
                I = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.setToggleBalloonRef = function(e) {
                            return t.toggleBalloonRef = e
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidUpdate = function(e) {
                        this.props.onToggle && this.props.isChatRulesOpen && !e.isChatRulesOpen && this.toggleBalloonRef.toggleBalloon(!1)
                    }, t.prototype.render = function() {
                        return a.createElement(M.a, {
                            onToggle: this.props.onToggle,
                            ref: this.setToggleBalloonRef
                        }, a.createElement(D.A, {
                            icon: D.tb.Gear,
                            ariaLabel: Object(w.d)("Chat settings", "ChatInput"),
                            "data-a-target": "chat-settings",
                            disabled: !!this.props.disabled
                        }), a.createElement(D.u, {
                            direction: D.v.Top,
                            noTail: !0,
                            offsetY: "11px",
                            "data-a-target": "chat-settings-balloon"
                        }, this.props.children))
                    }, t
                }(a.Component);
            var T = Object(r.connect)(function(e) {
                return {
                    isChatRulesOpen: e.chat.isChatRulesOpen
                }
            })(I);
            n.d(t, "a", function() {
                return O
            }), n.d(t, "b", function() {
                return T
            })
        },
        tIid: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            }), n.d(t, "b", function() {
                return s
            });
            var i = n("/7QA"),
                a = "esport_insider_pass_whitelist",
                r = "esports_room_cheering_whitelist";

            function o(e, t, n) {
                return void 0 === n && (n = !1), l(a, e, t, n)
            }

            function s(e, t) {
                return l(r, e, t)
            }

            function l(e, t, n, a) {
                void 0 === a && (a = !1);
                var r = i.b.get(e, []),
                    o = n && n.roles && n.roles.isStaff || a;
                return r.includes(t) || r.includes(t + "-staff") && o
            }
        },
        tY8L: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            }), n.d(t, "b", function() {
                return r
            }), n.d(t, "c", function() {
                return o
            }), n.d(t, "e", function() {
                return s
            }), n.d(t, "d", function() {
                return l
            });
            var i = n("oK83"),
                a = "viewer-card.VIEWER_CARD_HIDDEN",
                r = "viewer-card.VIEWER_CARD_SHOWN";

            function o() {
                return {
                    type: a
                }
            }

            function s(e, t, n, a) {
                return void 0 === a && (a = 0), {
                    type: r,
                    viewerCardOptions: {
                        viewerCardType: i.b.Viewer,
                        initialTopOffset: a,
                        sourceID: n,
                        sourceType: t,
                        targetID: e
                    }
                }
            }

            function l(e, t, n, a) {
                return void 0 === a && (a = 0), {
                    type: r,
                    viewerCardOptions: {
                        viewerCardType: i.b.Extension,
                        initialTopOffset: a,
                        sourceID: n,
                        targetID: e,
                        extensionVersion: t
                    }
                }
            }
        },
        u0cu: function(e, t, n) {},
        u9fF: function(e, t, n) {},
        uIkQ: function(e, t, n) {
            "use strict";
            var i = n("b5C3"),
                a = n("fQWD"),
                r = n("ZEQw"),
                o = (n("yzyL"), n("mrSG")),
                s = function() {
                    function e(e, t, n) {
                        this.globalsBySet = new Map, this.channelsBySet = new Map, this.indexBadges(e, this.globalsBySet, n), Array.isArray(t) && this.indexBadges(t, this.channelsBySet, n)
                    }
                    return e.prototype.getBadge = function(e, t) {
                        var n = this.channelsBySet.get(e);
                        return n && n.has(t) ? n.get(t) || null : void 0 !== (n = this.globalsBySet.get(e)) && n.get(t) || null
                    }, e.prototype.indexBadges = function(e, t, n) {
                        e.forEach(function(e) {
                            n && e.clickAction === r.c && (e = o.__assign({}, e, {
                                channelName: n
                            }));
                            var i = t.get(e.setID);
                            i || (i = new Map, t.set(e.setID, i)), i.set(e.version, e)
                        })
                    }, e
                }();
            new s([], [], "");
            n.d(t, "b", function() {
                return i.a
            }), n.d(t, "a", function() {
                return a.a
            }), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "c", function() {
                return s
            })
        },
        uYvD: function(e, t, n) {},
        "ug+5": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return a
            }), n.d(t, "c", function() {
                return s
            }), n.d(t, "d", function() {
                return l
            });
            var i, a, r = n("/7QA"),
                o = n("2xye");

            function s(e) {
                var t = {
                    share_medium: e.shareMedium,
                    event_id: e.eventID,
                    channel: e.channelLogin,
                    channel_id: e.channelID,
                    location: e.location
                };
                return r.p.tracking.track(o.SpadeEventType.EventShare, t)
            }

            function l(e) {
                var t = {
                    action: e.action,
                    channel: e.channelLogin,
                    channel_id: e.channelID,
                    event_id: e.eventID,
                    location: e.location
                };
                return r.p.tracking.track(o.SpadeEventType.EventFollowing, t)
            }! function(e) {
                e.ChannelEvents = "channel_events", e.DashboardEvents = "dashboard_events", e.EventDetails = "event_details", e.EventManagment = "event_managment", e.EventSidebar = "event_sidebar"
            }(i || (i = {})),
            function(e) {
                e.RemindMeOpen = "remind_me_open_modal", e.EmailReminderOn = "email_reminder_on", e.EmailReminderOff = "email_reminder_off"
            }(a || (a = {}))
        },
        ugtu: function(e, t, n) {
            "use strict";
            n.d(t, "j", function() {
                return s
            }), n.d(t, "k", function() {
                return l
            }), n.d(t, "l", function() {
                return c
            }), n.d(t, "e", function() {
                return d
            }), n.d(t, "d", function() {
                return u
            }), n.d(t, "h", function() {
                return m
            }), n.d(t, "b", function() {
                return p
            }), n.d(t, "i", function() {
                return h
            }), n.d(t, "c", function() {
                return g
            }), n.d(t, "f", function() {
                return f
            }), n.d(t, "g", function() {
                return b
            }), n.d(t, "a", function() {
                return v
            });
            var i = n("q1tI"),
                a = n("/7QA"),
                r = n("GxR5"),
                o = n("Ue10");

            function s(e) {
                return i.createElement(o.W, {
                    type: o.Vb.Strong
                }, e)
            }

            function l(e, t) {
                return i.createElement(o.U, {
                    to: t,
                    targetBlank: !0
                }, e)
            }

            function c(e, t) {
                return i.createElement(o.U, {
                    onClick: t
                }, e)
            }

            function d() {
                return Object(a.d)("<x:link>Forgot your username</x:link>?", {
                    "x:link": function(e) {
                        return l(e, r.b)
                    }
                }, "ServerMessage")
            }

            function u() {
                return Object(a.d)("<x:link>Forgot your password</x:link>?", {
                    "x:link": function(e) {
                        return l(e, Object(r.e)())
                    }
                }, "ServerMessage")
            }

            function m() {
                return Object(a.d)("Please <x:link>reset your password</x:link>.", {
                    "x:link": function(e) {
                        return l(e, Object(r.e)())
                    }
                }, "ServerMessage")
            }

            function p() {
                return Object(a.d)("Please <x:link>contact support</x:link> for assistance.", {
                    "x:link": function(e) {
                        return l(e, r.a)
                    }
                }, "ServerMessage")
            }

            function h() {
                return Object(a.d)("To learn more, please read <x:link>this article</x:link>.", {
                    "x:link": function(e) {
                        return l(e, r.c)
                    }
                }, "ServerMessage")
            }

            function g(e) {
                return Object(a.d)("Want to <x:click>create a new account</x:click>?", {
                    "x:click": function(t) {
                        return c(t, e)
                    }
                }, "ServerMessage")
            }

            function f(e) {
                return Object(a.d)("Want to <x:click>log in</x:click> instead?", {
                    "x:click": function(t) {
                        return c(t, e)
                    }
                }, "ServerMessage")
            }

            function b(e) {
                return Object(a.d)("If you need a Twitch account, you can <x:click>create one here</x:click>.", {
                    "x:click": function(t) {
                        return c(t, e)
                    }
                }, "ServerMessage")
            }

            function v(e) {
                return Object(a.d)("If you want to use an existing Twitch ID, you can <x:click>connect it here</x:click>.", {
                    "x:click": function(t) {
                        return c(t, e)
                    }
                }, "ServerMessage")
            }
        },
        uu1w: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }),
                function(e) {
                    e.Emote = "emote", e.Mention = "mention", e.Hashtag = "hashtag", e.None = "none"
                }(i || (i = {}))
        },
        uy8m: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }),
                function(e) {
                    e[e.Left = 0] = "Left", e[e.Middle = 1] = "Middle", e[e.Right = 2] = "Right", e[e.Back = 3] = "Back", e[e.Forward = 4] = "Forward"
                }(i || (i = {}))
        },
        vGFN: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            }), n.d(t, "j", function() {
                return b
            }), n.d(t, "h", function() {
                return v
            }), n.d(t, "g", function() {
                return k
            }), n.d(t, "l", function() {
                return C
            }), n.d(t, "o", function() {
                return y
            }), n.d(t, "n", function() {
                return E
            }), n.d(t, "k", function() {
                return S
            }), n.d(t, "m", function() {
                return N
            }), n.d(t, "i", function() {
                return _
            }), n.d(t, "e", function() {
                return O
            }), n.d(t, "d", function() {
                return w
            }), n.d(t, "b", function() {
                return M
            }), n.d(t, "f", function() {
                return D
            }), n.d(t, "c", function() {
                return I
            }), n.d(t, "q", function() {
                return R
            }), n.d(t, "p", function() {
                return j
            });
            var i, a, r, o, s, l, c = n("mrSG"),
                d = n("/7QA"),
                u = n("2xye"),
                m = n("mBWp");

            function p(e) {
                d.p.tracking.track(u.SpadeEventType.WhisperThreadMod, {
                    conversation_id: e.threadID,
                    action: e.action
                })
            }

            function h(e) {
                return c.__awaiter(this, void 0, void 0, function() {
                    var t;
                    return c.__generator(this, function(n) {
                        switch (n.label) {
                            case 0:
                                return [4, T()];
                            case 1:
                                return t = n.sent(), d.p.tracking.track(u.SpadeEventType.WhisperIgnoreUser, {
                                    ui_context: e.context,
                                    from_login: t && t.login,
                                    ignored_login: e.targetUserLogin,
                                    reason: e.reason || i.Other,
                                    source: e.source
                                }), [2]
                        }
                    })
                })
            }

            function g(e, t) {
                return c.__awaiter(this, void 0, void 0, function() {
                    var n;
                    return c.__generator(this, function(i) {
                        switch (i.label) {
                            case 0:
                                return [4, T()];
                            case 1:
                                return n = i.sent(), d.p.tracking.track(u.SpadeEventType.WhisperThreadMod, {
                                    conversation_id: e,
                                    action: t,
                                    login: n && n.login
                                }), [2]
                        }
                    })
                })
            }

            function f(e) {
                d.p.tracking.track(u.SpadeEventType.WhisperAllThreadsMod, {
                    action: e
                })
            }

            function b() {
                f(a.MarkAllRead)
            }

            function v() {
                f(a.EnableDoNotDisturb)
            }

            function k() {
                f(a.DisableDoNotDisturb)
            }

            function C(e, t) {
                h({
                    context: t,
                    targetUserLogin: e,
                    reason: i.Spam,
                    source: "conversations_button"
                })
            }

            function y(e) {
                g(e, s.MarkNotSpam)
            }

            function E(e) {
                g(e, s.Archive)
            }

            function S(e) {
                p({
                    threadID: e,
                    action: r.Mute
                })
            }

            function N(e) {
                p({
                    threadID: e,
                    action: r.Unmute
                })
            }

            function _(e) {
                p({
                    threadID: e,
                    action: r.Expand
                })
            }

            function O(e) {
                p({
                    threadID: e,
                    action: r.Collapse
                })
            }

            function w(e) {
                p({
                    threadID: e,
                    action: r.Close
                })
            }

            function M(e) {
                p({
                    threadID: e,
                    action: r.Archive
                })
            }

            function D(e) {
                d.p.tracking.track(u.SpadeEventType.WhisperThreadCreate, {
                    conversation_id: e.threadID,
                    target_login: e.targetUserlogin,
                    source: "search_target_result",
                    search_result_rank: e.searchResultRank
                })
            }

            function I(e) {
                d.p.tracking.track(u.SpadeEventType.WhisperSearchClick, {
                    query: e.searchQuery,
                    source: "conversation_list",
                    rank: e.searchResultRank,
                    is_conversation: e.isConversation
                })
            }

            function T() {
                var e = this;
                return new Promise(function(t) {
                    setTimeout(function() {
                        return c.__awaiter(e, void 0, void 0, function() {
                            var e, n, i;
                            return c.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        e = null, a.label = 1;
                                    case 1:
                                        return a.trys.push([1, 3, , 4]), [4, d.p.apollo.client.query({
                                            query: m
                                        })];
                                    case 2:
                                        return e = a.sent(), [3, 4];
                                    case 3:
                                        return n = a.sent(), d.k.error(n, "Failed to make query for current user info in WhisperSent reporting"), [3, 4];
                                    case 4:
                                        return i = e && e.data && e.data.currentUser, t(i), [2]
                                }
                            })
                        })
                    })
                })
            }

            function R(e) {
                return c.__awaiter(this, void 0, void 0, function() {
                    var t;
                    return c.__generator(this, function(n) {
                        switch (n.label) {
                            case 0:
                                return [4, T()];
                            case 1:
                                return t = n.sent(), d.p.tracking.track(u.SpadeEventType.WhisperSent, {
                                    to: e.targetUserLogin,
                                    from: t && t.login,
                                    player: "web",
                                    is_turbo: t && t.hasTurbo,
                                    conversation_id: e.threadID,
                                    availability: t && t.availability,
                                    room_type: e.inChannelChat ? l.Channel : l.Conversation
                                }), [2]
                        }
                    })
                })
            }

            function j(e) {
                return c.__awaiter(this, void 0, void 0, function() {
                    var t;
                    return c.__generator(this, function(n) {
                        switch (n.label) {
                            case 0:
                                return [4, T()];
                            case 1:
                                return t = n.sent(), d.p.tracking.track(u.SpadeEventType.WhisperReceived, {
                                    to: t && t.login,
                                    from: e.targetUserLogin,
                                    player: "web",
                                    is_turbo: t && t.hasTurbo,
                                    conversation_id: e.threadID
                                }), [2]
                        }
                    })
                })
            }! function(e) {
                e.Harassment = "Harassment", e.Spam = "Spam", e.Other = "Other"
            }(i || (i = {})),
            function(e) {
                e.MarkAllRead = "mark_all_read", e.EnableDoNotDisturb = "do_not_disturb_on", e.DisableDoNotDisturb = "do_not_disturb_off"
            }(a || (a = {})),
            function(e) {
                e.Mute = "mute", e.Unmute = "unmute", e.Expand = "maximize", e.Collapse = "minimize", e.Close = "close", e.Archive = "archive", e.Open = "open"
            }(r || (r = {})),
            function(e) {
                e.Dock = "dock", e.SpamPropmt = "dock_spam_cta"
            }(o || (o = {})),
            function(e) {
                e.Archive = "archive", e.MarkNotSpam = "mark_not_spam"
            }(s || (s = {})),
            function(e) {
                e.Channel = "channel", e.Conversation = "conversation"
            }(l || (l = {}))
        },
        vHGB: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("q1tI"),
                r = n("ZEQw"),
                o = n("Ue10"),
                s = (n("E78O"), n("/7QA")),
                l = n("2xye"),
                c = function(e) {
                    e.badge_type = e.badge_type.toLowerCase().replace(/( |\s)/g, "_"), s.p.tracking.track(l.SpadeEventType.ChatBadgeClick, e)
                };
            n.d(t, "a", function() {
                return d
            });
            var d = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isHovering: !1
                    }, t.onMouseOver = function() {
                        t.setState({
                            isHovering: !0
                        })
                    }, t.onMouseOut = function() {
                        t.setState({
                            isHovering: !1
                        })
                    }, t.onBadgeClickHandler = function() {
                        c({
                            badge_type: t.props.badge.title,
                            badge_url_target: t.targetURL
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.badge,
                        t = e.title,
                        n = e.image1x,
                        i = e.image2x,
                        r = e.image4x,
                        l = a.createElement("img", {
                            alt: t,
                            "aria-label": Object(s.d)("{badgeTitle} badge", {
                                badgeTitle: t
                            }, "Badge"),
                            className: "chat-badge",
                            src: n,
                            srcSet: n + " 1x, " + i + " 2x, " + r + " 4x",
                            onMouseOver: this.onMouseOver,
                            onMouseOut: this.onMouseOut
                        });
                    return this.targetURL = this.getTargetURL(), "" !== this.targetURL && (l = a.createElement("a", {
                        href: this.targetURL,
                        onClick: this.onBadgeClickHandler,
                        target: "_blank",
                        "data-a-target": "chat-badge"
                    }, l)), this.state.isHovering ? a.createElement(o.Yb, {
                        align: o.Zb.Left,
                        "data-a-target": "chat-badge",
                        display: o.X.Inline,
                        key: n,
                        label: t,
                        offsetY: "0.9rem"
                    }, l) : l
                }, t.prototype.getTargetURL = function() {
                    var e = this.props.badge;
                    switch (e.clickAction) {
                        case r.e:
                            return e.clickURL;
                        case r.c:
                            return e.channelName ? this.getSubscriberLink() : "";
                        case r.d:
                            return "https://www.twitch.tv/products/turbo?ref=chat_badge";
                        default:
                            return ""
                    }
                }, t.prototype.getSubscriberLink = function() {
                    return "https://www.twitch.tv/" + this.props.badge.channelName + "/subscribe?ref=in_chat_subscriber_link"
                }, t
            }(a.Component)
        },
        vKai: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("q1tI"),
                r = n("/MKj"),
                o = n("fvjX"),
                s = n("/7QA"),
                l = n("gcd7"),
                c = n("WytW"),
                d = n("NNSq"),
                u = n("CzFK"),
                m = n("TOso"),
                p = n("NMMG"),
                h = n("l1Uh"),
                g = n("PrJw"),
                f = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleWhisperCommand = function(e) {
                            var n = Object(c.q)(e),
                                i = n.recipientLogin,
                                a = n.body;
                            return i && a ? t.props.isEmbedded || t.props.isPopout ? {
                                deferred: Promise.resolve({
                                    notice: Object(s.d)("Please use the whisper window for whispers.", "WhisperCommandHandler")
                                })
                            } : i.toLowerCase() === t.props.userLogin ? {
                                deferred: Promise.resolve({
                                    notice: Object(s.d)("You cannot whisper to yourself.", "WhisperCommandHandler")
                                })
                            } : t.props.userID ? t.initiateWhisper(i, a) : void 0 : {
                                preserveInput: !0,
                                deferred: Promise.resolve({
                                    notice: Object(s.d)('Usage: "/w [login] [message]"', "WhisperCommandHandler")
                                })
                            }
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return a.createElement(l.a, {
                            command: "w",
                            handler: this.handleWhisperCommand
                        })
                    }, t.prototype.initiateWhisper = function(e, t) {
                        var n = this;
                        return {
                            deferred: new Promise(function(a, r) {
                                return i.__awaiter(n, void 0, void 0, function() {
                                    var n, o, l, c;
                                    return i.__generator(this, function(i) {
                                        switch (i.label) {
                                            case 0:
                                                return i.trys.push([0, 2, , 3]), [4, Object(d.a)(e)];
                                            case 1:
                                                return n = i.sent(), [3, 3];
                                            case 2:
                                                return o = i.sent(), s.k.warn(o, "Failed to fetch user targeted by whisper command.", {
                                                    recipientLogin: e
                                                }), [2, r(o)];
                                            case 3:
                                                return n ? [3, 4] : [2, a({
                                                    notice: Object(s.d)("No user matching that login.", "WhisperCommandHandler")
                                                })];
                                            case 4:
                                                l = Object(p.a)(this.props.userID, n), i.label = 5;
                                            case 5:
                                                return i.trys.push([5, 7, , 8]), Object(g.m)({
                                                    threadID: l,
                                                    targetUserLogin: e,
                                                    inChannelChat: !0
                                                }), [4, Object(m.b)({
                                                    currentUserID: this.props.userID,
                                                    emotes: this.props.emoteMap || {},
                                                    message: t,
                                                    recipientUserID: n
                                                })];
                                            case 6:
                                                return i.sent(), [3, 8];
                                            case 7:
                                                return c = i.sent(), s.k.error(c, "Failed to send whisper using whisper command.", {
                                                    currentUserID: this.props.userID,
                                                    recipientUserID: n
                                                }), [2, a({
                                                    notice: Object(s.d)("Unable to send Whisper at this moment.", "WhisperCommandHandler")
                                                })];
                                            case 8:
                                                return this.props.openThread(l), [2, a({})]
                                        }
                                    })
                                })
                            })
                        }
                    }, t
                }(a.Component);
            var b = Object(r.connect)(null, function(e) {
                return Object(o.bindActionCreators)({
                    openThread: function(e) {
                        return Object(u.l)({
                            threadID: e,
                            collapsed: !0
                        }, Object(h.a)())
                    }
                }, e)
            })(f);
            n.d(t, "a", function() {
                return b
            })
        },
        vSeP: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return r
            }), n.d(t, "a", function() {
                return o
            });
            var i = n("XIZb"),
                a = Object(i.a)("ActiveChatters"),
                r = a.withChatServiceProvider,
                o = (0, a.withContext)(function(e) {
                    return {
                        activeChattersAPI: e.serviceAPI,
                        setActiveChattersAPI: e.setServiceAPI
                    }
                })
        },
        wSZZ: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Events_UnfollowEvent"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "UnfollowEventInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "unfollowEvent"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "event"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "InlineFragment",
                                            typeCondition: {
                                                kind: "NamedType",
                                                name: {
                                                    kind: "Name",
                                                    value: "EventCollection"
                                                }
                                            },
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "self"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "isFollowing"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            kind: "InlineFragment",
                                            typeCondition: {
                                                kind: "NamedType",
                                                name: {
                                                    kind: "Name",
                                                    value: "EventLeaf"
                                                }
                                            },
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "self"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "isFollowing"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 199
                }
            };
            n.loc.source = {
                body: "mutation Events_UnfollowEvent($input: UnfollowEventInput!) {\nunfollowEvent(input: $input) {\nevent {\n...on EventCollection {\nid\nself {\nisFollowing\n}\n}\n...on EventLeaf {\nid\nself {\nisFollowing\n}\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        wbMx: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return i
            }), n.d(t, "a", function() {
                return d
            });
            var i, a = n("mrSG"),
                r = n("q1tI"),
                o = n("/7QA"),
                s = n("Jxh/"),
                l = n("r62z"),
                c = n("Ue10");
            n("jeZI");
            ! function(e) {
                e[e.Twitter = 0] = "Twitter", e[e.Reddit = 1] = "Reddit", e[e.VKontakte = 2] = "VKontakte", e[e.Facebook = 3] = "Facebook", e[e.Copy = 4] = "Copy", e[e.CopyInput = 5] = "CopyInput", e[e.Download = 6] = "Download"
            }(i || (i = {}));
            var d = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.renderLink = function() {
                        var e = "social-button__link " + n.addSocialClassModifier("social-button__link");
                        return n.props.type === i.Download ? r.createElement("a", a.__assign({
                            href: n.props.url,
                            target: "_blank",
                            className: e,
                            onClick: n.onShareClickHandler
                        }, Object(c.jc)(n.props), {
                            download: n.props.text
                        }), n.renderIcon()) : n.isLink() ? r.createElement("a", a.__assign({
                            href: n.getLinkTarget(),
                            target: "_blank",
                            className: e,
                            onClick: n.onShareClickHandler
                        }, Object(c.jc)(n.props)), n.renderIcon()) : r.createElement("button", a.__assign({
                            onClick: n.copyPageUrl,
                            onMouseLeave: n.clearIsCopiedStatus,
                            className: e
                        }, Object(c.jc)(n.props)), n.renderIcon())
                    }, n.onShareClickHandler = function() {
                        n.props.onShareClick && n.props.onShareClick(n.props.type)
                    }, n.clearIsCopiedStatus = function() {
                        n.setState({
                            isCopied: !1
                        })
                    }, n.getUrl = function() {
                        return n.props.url || window.location.href
                    }, n.copyPageUrl = function(e) {
                        e && e.preventDefault(), n.props.onShareClick && n.props.onShareClick(n.props.type), Object(s.a)(n.getUrl()), n.setState({
                            isCopied: !0
                        })
                    }, n.renderIcon = function() {
                        var e = n.getAssetFromType();
                        return r.createElement(c.Xa, {
                            className: "social-button__icon " + n.addSocialClassModifier("social-button__icon"),
                            display: c.X.Flex,
                            alignItems: c.f.Center,
                            justifyContent: c.Wa.Center
                        }, r.createElement(c.sb, {
                            asset: e
                        }))
                    }, n.isLink = function() {
                        return n.props.type !== i.Copy
                    }, n.getTooltipFromType = function() {
                        switch (n.props.type) {
                            case i.Twitter:
                                return "Twitter";
                            case i.Reddit:
                                return "Reddit";
                            case i.Facebook:
                                return "Facebook";
                            case i.VKontakte:
                                return "VKontakte";
                            case i.Download:
                                return Object(o.d)("Download", "SocialButton");
                            case i.Copy:
                                return n.state.isCopied ? Object(o.d)("Copied", "SocialButton") : Object(o.d)("Copy to clipboard", "SocialButton");
                            default:
                                return ""
                        }
                    }, n.getAssetFromType = function() {
                        switch (n.props.type) {
                            case i.Twitter:
                                return c.tb.Twitter;
                            case i.Facebook:
                                return c.tb.Facebook;
                            case i.VKontakte:
                                return c.tb.VKontakte;
                            case i.Reddit:
                                return c.tb.Reddit;
                            case i.Download:
                                return c.tb.Download;
                            case i.Copy:
                            default:
                                return c.tb.Copy
                        }
                    }, n.addSocialClassModifier = function(e) {
                        switch (n.props.type) {
                            case i.Twitter:
                                return e + "--twitter";
                            case i.Reddit:
                                return e + "--reddit";
                            case i.Facebook:
                                return e + "--facebook";
                            case i.VKontakte:
                                return e + "--vkontakte";
                            case i.Download:
                                return e + "--download";
                            case i.Copy:
                                return e + "--copy";
                            default:
                                return ""
                        }
                    }, n.getLinkTarget = function() {
                        var e = n.props,
                            t = e.text,
                            a = e.type,
                            r = n.getUrl(),
                            o = t || "";
                        switch (a) {
                            case i.Reddit:
                                return Object(l.b)(r, o);
                            case i.VKontakte:
                                return Object(l.d)(r);
                            case i.Facebook:
                                return Object(l.a)(r);
                            case i.Twitter:
                                return Object(l.c)(r, o);
                            default:
                                return ""
                        }
                    }, n.state = {
                        isCopied: !1
                    }, n
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(c.Xa, {
                        className: "social-button"
                    }, r.createElement(c.Yb, {
                        label: this.getTooltipFromType(),
                        direction: c.ac.Bottom
                    }, this.renderLink()))
                }, t
            }(r.Component)
        },
        wqI2: function(e, t, n) {},
        wtKP: function(e, t, n) {},
        wxwP: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("q1tI"),
                r = n("/MKj"),
                o = n("fvjX"),
                s = n("/7QA"),
                l = n("CFw/"),
                c = n.n(l),
                d = n("aCAx"),
                u = n("Ue10"),
                m = (n("9RDd"), function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return a.createElement("div", {
                            onClick: this.props.closeModal
                        }, a.createElement(u.i, {
                            type: u.n.FadeIn,
                            duration: u.k.Long,
                            timing: u.m.EaseInOut,
                            enabled: !0
                        }, a.createElement(u.Eb, {
                            className: "browser-push-notifications-upsell",
                            alignItems: u.f.Center,
                            justifyContent: u.Wa.Center,
                            position: u.jb.Fixed,
                            display: u.X.Flex,
                            background: u.r.Overlay,
                            fullHeight: !0,
                            fullWidth: !0,
                            attachTop: !0,
                            attachLeft: !0
                        }, a.createElement(u.Xa, {
                            className: "browser-push-notifications-upsell__container",
                            display: u.X.Flex,
                            textAlign: u.Rb.Center,
                            padding: {
                                x: 1
                            },
                            position: u.jb.Relative
                        }, a.createElement(u.i, {
                            type: u.n.SlideInBottom,
                            duration: u.k.Long,
                            timing: u.m.EaseInOut,
                            enabled: !0
                        }, a.createElement(u.W, {
                            type: u.Vb.H3,
                            fontSize: u.Ca.Size3,
                            lineHeight: u.Ya.Body
                        }, Object(s.d)("Don't miss out when your favorite streamers go live!", "BrowserNotificationsUpsellModal")), a.createElement(u.Xa, {
                            margin: {
                                top: 1
                            }
                        }, a.createElement(u.W, {
                            type: u.Vb.H4,
                            fontSize: u.Ca.Size4,
                            color: u.O.OverlayAlt,
                            lineHeight: u.Ya.Body
                        }, Object(s.d)("Turn on Browser Notifications to get updates even when your browser window is minimized", "BrowserNotificationsUpsellModal")))), a.createElement(u.Xa, {
                            className: "browser-push-notifications-upsell__arrow",
                            position: u.jb.Absolute,
                            attachTop: !0,
                            attachLeft: !0
                        }, a.createElement(u.i, {
                            type: u.n.SlideInBottom,
                            delay: u.j.Short,
                            duration: u.k.Long,
                            timing: u.m.EaseInOut,
                            enabled: !0
                        }, a.createElement("img", {
                            src: c.a
                        })))))))
                    }, t
                }(a.Component));
            var p = Object(r.connect)(null, function(e) {
                return Object(o.bindActionCreators)({
                    closeModal: d.c
                }, e)
            })(m);
            n.d(t, !1, function() {
                return m
            }), n.d(t, "a", function() {
                return p
            })
        },
        "x0+1": function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                a = n("q1tI"),
                r = n("/7QA"),
                o = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            alwaysShowMessage: !1
                        }, t.renderBody = function() {
                            return t.state.alwaysShowMessage ? t.props.messageBody : a.createElement("span", {
                                key: "deleted",
                                className: "chat-line__message--deleted"
                            }, a.createElement("a", {
                                href: "",
                                onClick: t.alwaysShowMessage
                            }, "<" + Object(r.d)("click to show", "MessageDeletedLine") + ">"))
                        }, t.alwaysShowMessage = function(e) {
                            e && e.preventDefault(), t.setState({
                                alwaysShowMessage: !0
                            })
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = this.props,
                            t = e.targetLogin,
                            n = e.moderatorLogin;
                        return n ? Object(r.d)("{moderatorLogin} deleted {targetLogin}'s message: {body}", {
                            moderatorLogin: n,
                            targetLogin: t,
                            body: this.renderBody()
                        }, "MessageDeletedLine") : Object(r.d)("A moderator deleted {targetLogin}'s message: {body}", {
                            targetLogin: t,
                            body: this.renderBody()
                        }, "MessageDeletedLine")
                    }, t
                }(a.Component);
            n.d(t, "a", function() {
                return o
            })
        },
        x0gr: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return l
            }), n.d(t, "a", function() {
                return c
            }), n.d(t, "c", function() {
                return d
            });
            var i = n("mrSG"),
                a = n("/7QA"),
                r = n("2xye"),
                o = n("r2Xj"),
                s = n("oi4T"),
                l = function(e) {
                    a.o.track(r.SpadeEventType.ChatSettingsOpened, Object(s.a)(e))
                },
                c = function(e) {
                    var t = i.__assign({}, Object(s.a)(e), {
                        setting_name: e.settingName,
                        new_value: e.newValue.toString()
                    });
                    a.o.track(r.SpadeEventType.ChatSettingsChanged, t)
                },
                d = function(e) {
                    var t = i.__assign({}, Object(s.a)(e), {
                        setting_name: o.a.FollowerDuration,
                        new_value: e.newValue.toString(),
                        follower_mode_on: e.followerModeOn
                    });
                    a.o.track(r.SpadeEventType.ChatSettingsChanged, t)
                }
        },
        xDdc: function(e, t, n) {},
        xMut: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "EventsPage_EventScheduleQuery"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "limit"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Int"
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "cursor"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Cursor"
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "before"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Time"
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "after"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Time"
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "sortOrder"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SortOrder"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "eventLeaves"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "first"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "limit"
                                            }
                                        }
                                    }, {
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "after"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "cursor"
                                            }
                                        }
                                    }, {
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "criteria"
                                        },
                                        value: {
                                            kind: "ObjectValue",
                                            fields: [{
                                                kind: "ObjectField",
                                                name: {
                                                    kind: "Name",
                                                    value: "endsBefore"
                                                },
                                                value: {
                                                    kind: "Variable",
                                                    name: {
                                                        kind: "Name",
                                                        value: "before"
                                                    }
                                                }
                                            }, {
                                                kind: "ObjectField",
                                                name: {
                                                    kind: "Name",
                                                    value: "endsAfter"
                                                },
                                                value: {
                                                    kind: "Variable",
                                                    name: {
                                                        kind: "Name",
                                                        value: "after"
                                                    }
                                                }
                                            }, {
                                                kind: "ObjectField",
                                                name: {
                                                    kind: "Name",
                                                    value: "sortOrder"
                                                },
                                                value: {
                                                    kind: "Variable",
                                                    name: {
                                                        kind: "Name",
                                                        value: "sortOrder"
                                                    }
                                                }
                                            }]
                                        }
                                    }],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "pageInfo"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "hasNextPage"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "edges"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "cursor"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "node"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "self"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "isFollowing"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }]
                                                            }
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "title"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "startAt"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "endAt"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "game"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "id"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "displayName"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }]
                                                            }
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "channel"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "id"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "login"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "displayName"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }]
                                                            }
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "imageURL"
                                                            },
                                                            arguments: [{
                                                                kind: "Argument",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "width"
                                                                },
                                                                value: {
                                                                    kind: "IntValue",
                                                                    value: "320"
                                                                }
                                                            }, {
                                                                kind: "Argument",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "height"
                                                                },
                                                                value: {
                                                                    kind: "IntValue",
                                                                    value: "180"
                                                                }
                                                            }],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 475
                }
            };
            n.loc.source = {
                body: "query EventsPage_EventScheduleQuery($channelLogin: String! $limit: Int $cursor: Cursor $before: Time $after: Time $sortOrder: SortOrder) {\nuser(login: $channelLogin) {\nid\neventLeaves(first: $limit after: $cursor criteria: {endsBefore: $before endsAfter: $after sortOrder: $sortOrder}) {\npageInfo {\nhasNextPage\n}\nedges {\ncursor\nnode {\nid\nself {\nisFollowing\n}\ntitle\nstartAt\nendAt\ngame {\nid\ndisplayName\n}\nchannel {\nid\nlogin\ndisplayName\n}\nimageURL(width:320 height:180)\n}\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        xXlL: function(e, t, n) {
            "use strict";

            function i(e) {
                return {
                    id: "" + e.id,
                    start: e.start,
                    end: e.end
                }
            }

            function a(e) {
                return {
                    __typename: "WhisperMessageEdge",
                    cursor: "" + e.data_object.id,
                    node: {
                        __typename: "WhisperMessage",
                        id: e.data_object.message_id,
                        nonce: e.data_object.nonce,
                        sentAt: new Date(1e3 * e.data_object.sent_ts).toISOString(),
                        editedAt: null,
                        deletedAt: null,
                        content: {
                            __typename: "MessageBody",
                            content: e.data_object.body,
                            emotes: e.data_object.tags.emotes.map(function(e) {
                                return o(i(e))
                            })
                        },
                        from: {
                            __typename: "User",
                            id: "" + e.data_object.from_id
                        }
                    }
                }
            }

            function r(e) {
                return e.map(function(e) {
                    return o(i(e))
                })
            }

            function o(e) {
                return {
                    from: e.start,
                    to: e.end,
                    emoteID: e.id,
                    id: e.id + ";" + e.start + ";" + e.end,
                    setID: "0",
                    __typename: "EmbeddedEmote"
                }
            }
            n.d(t, "c", function() {
                return a
            }), n.d(t, "b", function() {
                return r
            }), n.d(t, "a", function() {
                return o
            })
        },
        y4Ne: function(e, t, n) {},
        ySk3: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return s
            });
            var i = n("mrSG"),
                a = n("/7QA"),
                r = n("2xye"),
                o = n("oi4T"),
                s = function(e) {
                    var t = i.__assign({}, Object(o.a)(e), {
                        mentioned_user_display_name: e.mentionedUserDisplayName,
                        user: e.userLogin
                    });
                    a.o.track(r.SpadeEventType.ChatMentionUsed, t)
                }
        },
        yXtP: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Chat_UpdateChatColor"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "UpdateChatColorInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "updateChatColor"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "user"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "chatColor"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 120
                }
            };
            n.loc.source = {
                body: "mutation Chat_UpdateChatColor($input: UpdateChatColorInput!){\nupdateChatColor(input: $input) {\nuser {\nid\nchatColor\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        yZCp: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return m
            });
            var i = n("q1tI"),
                a = n("/7QA"),
                r = n("7TkE"),
                o = n.n(r),
                s = n("5zXJ"),
                l = n("VJHF"),
                c = n("8SX2"),
                d = n("Ue10"),
                u = (n("OXQr"), s.c + "/hgc2018/hgc-gift-chat-icon.png"),
                m = function(e) {
                    if (!(e.event.messageID && e.event.userLogin && e.event.displayName)) return null;
                    var t = i.createElement(c.a, {
                            contentID: e.event.messageID,
                            login: e.event.userLogin,
                            sourceType: e.event.sourceType
                        }, e.event.displayName),
                        n = Object(a.d)("{gifterButton}'s Cheer shared rewards to {selectedCount} others in chat.", {
                            gifterButton: t,
                            selectedCount: e.event.selectedCount
                        }, "RewardGiftNoticeLine"),
                        r = Object(a.d)("<x:link>Cheer at least {minCheerAmount} Bits to share rewards with chat!</x:link>", {
                            minCheerAmount: e.event.minCheerAmount,
                            "x:link": function(e) {
                                return i.createElement(d.U, {
                                    to: "https://blog.twitch.tv/earn-overwatch-league-loot-a494e1c21634",
                                    targetBlank: !0
                                }, e)
                            }
                        }, "RewardGiftNoticeLine"),
                        s = o.a;
                    return e.event.domain === l.c && (n = Object(a.d)("{gifterButton}'s Cheer shared Heroes Loot Chests with {selectedCount} other viewers in Chat!", {
                        gifterButton: t,
                        selectedCount: e.event.selectedCount
                    }, "RewardGiftNoticeLine"), r = Object(a.d)("<x:link>Cheer at least {minCheerAmount} Bits at once and share with Chat!</x:link>", {
                        minCheerAmount: e.event.minCheerAmount,
                        "x:link": function(e) {
                            return i.createElement(d.U, {
                                to: "",
                                targetBlank: !0
                            }, e)
                        }
                    }, "RewardGiftNoticeLine"), s = u), i.createElement(d.Xa, {
                        className: "reward-gift-user-notice",
                        margin: {
                            y: .5
                        }
                    }, i.createElement(d.Xa, {
                        display: d.X.Flex,
                        alignItems: d.f.Center,
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, i.createElement(d.Pa, {
                        margin: {
                            right: 1
                        }
                    }, i.createElement("img", {
                        className: "reward-gift-user-notice__icon",
                        src: s
                    })), i.createElement(d.W, {
                        color: d.O.Alt2
                    }, n)), e.event.minCheerAmount > 0 && i.createElement(d.Xa, {
                        className: "reward-gift-user-notice__action",
                        padding: {
                            x: 1,
                            y: 1
                        }
                    }, i.createElement(d.W, {
                        bold: !0,
                        color: d.O.Link
                    }, r)))
                }
        },
        ygQa: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            });
            var i = n("mrSG"),
                a = n("yR8l"),
                r = n("yXtP");

            function o() {
                var e = this;
                return Object(a.a)(r, {
                    props: function(t) {
                        return {
                            updateChatColorMutation: function(n) {
                                return i.__awaiter(e, void 0, void 0, function() {
                                    return i.__generator(this, function(e) {
                                        switch (e.label) {
                                            case 0:
                                                return t.mutate ? [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            color: n
                                                        }
                                                    }
                                                })] : [3, 2];
                                            case 1:
                                                return [2, e.sent().data];
                                            case 2:
                                                throw new Error("Update chat color mutation is not ready")
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }
        },
        yzwe: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return s
            });
            var i, a = n("mrSG"),
                r = n("yR8l"),
                o = n("FAYk");

            function s(e) {
                var t = this;
                return Object(r.a)(o, {
                    props: function(n) {
                        return {
                            unmodUserMutation: function(i) {
                                return a.__awaiter(t, void 0, void 0, function() {
                                    var t;
                                    return a.__generator(this, function(a) {
                                        if (t = e(n.ownProps).channelID, n.mutate) return [2, n.mutate({
                                            variables: {
                                                input: {
                                                    channelID: t,
                                                    targetLogin: i
                                                }
                                            }
                                        }).then(function(e) {
                                            return e.data
                                        })];
                                        throw new Error("unmodUser mutation is not ready")
                                    })
                                })
                            }
                        }
                    }
                })
            }! function(e) {
                e.ChannelNotFound = "CHANNEL_NOT_FOUND", e.Forbidden = "FORBIDDEN", e.UserNotFound = "TARGET_NOT_FOUND", e.UserNotMod = "TARGET_NOT_MOD"
            }(i || (i = {}))
        },
        yzyL: function(e, t) {},
        "z+dA": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChannelPage_SubscribeButton_User"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "login"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "subscriptionProducts"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "emoteSetID"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "canPrimeSubscribe"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "subscriptionBenefit"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "purchasedWithPrime"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "tier"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "endsAt"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isDNRd"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "platform"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "pendingSubscription"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "price"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "startsAt"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "tier"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "type"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "gift"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "isGift"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "requestInfo"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "countryCode"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 355
                }
            };
            n.loc.source = {
                body: "query ChannelPage_SubscribeButton_User($login: String!) {\nuser(login: $login) {\nid\ndisplayName\nsubscriptionProducts {\nid\nemoteSetID\nname\n}\nself {\ncanPrimeSubscribe\nsubscriptionBenefit {\nid\npurchasedWithPrime\ntier\nendsAt\nisDNRd\nplatform\npendingSubscription {\nprice\nstartsAt\ntier\ntype\n}\ngift {\nisGift\n}\n}\n}\n}\ncurrentUser {\nid\n}\nrequestInfo {\ncountryCode\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        z3xZ: function(e, t, n) {},
        zWFo: function(e, t, n) {},
        zixI: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "UnblockUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "UnblockUserInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "unblockUser"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "targetUser"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 100
                }
            };
            n.loc.source = {
                body: "mutation UnblockUser($input: UnblockUserInput!) {\nunblockUser(input: $input) {\ntargetUser {\nid\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "zmH+": function(e, t, n) {},
        zxEZ: function(e, t, n) {
            "use strict";
            var i = n("mSxK");
            n.d(t, "a", function() {
                return i.c
            }), n.d(t, "b", function() {
                return i.d
            })
        },
        zyUW: function(e, t, n) {}
    }
]);