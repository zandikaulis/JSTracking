webpackJsonp([42], {
    1018: function(e, t, n) {
        "use strict";

        function i(e) {
            var t = {
                share_medium: e.shareMedium,
                event_id: e.eventID,
                channel: e.channelLogin,
                channel_id: e.channelID,
                location: e.location
            };
            return s.n.tracking.track(o.SpadeEventType.EventShare, t)
        }

        function a(e) {
            var t = {
                action: e.action,
                channel: e.channelLogin,
                channel_id: e.channelID,
                event_id: e.eventID,
                location: e.location
            };
            return s.n.tracking.track(o.SpadeEventType.EventFollowing, t)
        }
        n.d(t, "a", function() {
            return r
        }), n.d(t, "b", function() {
            return l
        }), t.c = i, t.d = a;
        var r, s = n(2),
            o = n(13);
        ! function(e) {
            e.ChannelEvents = "channel_events", e.EventDetails = "event_details", e.EventManagment = "event_managment"
        }(r || (r = {}));
        var l;
        ! function(e) {
            e.RemindMeOpen = "remind_me_open_modal", e.EmailReminderOn = "email_reminder_on", e.EmailReminderOff = "email_reminder_off"
        }(l || (l = {}))
    },
    1288: function(e, t, n) {
        "use strict";
        var i = n(1),
            a = n(2),
            r = n(3),
            s = (n(1289), function(e) {
                var t = Object(a.c)(e.date, {
                        month: "short"
                    }),
                    n = Object(a.c)(e.date, {
                        day: "numeric"
                    });
                return i.createElement(r._17, {
                    background: r.m.Base,
                    elevation: 2,
                    display: r.H.Flex,
                    flexDirection: r.J.Column,
                    className: "event-calendar-date",
                    margin: {
                        top: .5,
                        left: .5
                    },
                    position: r._2.Absolute,
                    attachTop: !0,
                    attachLeft: !0
                }, i.createElement(r._17, {
                    className: "event-calendar-date__month",
                    display: r.H.Flex,
                    justifyContent: r.T.Center,
                    background: r.m.AccentAlt2
                }, i.createElement(r._21, {
                    fontSize: r.L.Size6,
                    transform: r._25.Uppercase,
                    color: r.F.Overlay
                }, t)), i.createElement(r.U, {
                    display: r.H.Flex,
                    justifyContent: r.T.Center
                }, i.createElement(r._21, {
                    fontSize: r.L.Size3,
                    color: r.F.Base
                }, n)))
            });
        n.d(t, "a", function() {
            return s
        })
    },
    1289: function(e, t) {},
    1290: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                isLoggedIn: Object(c.d)(e)
            }
        }

        function a(e) {
            return Object(s.bindActionCreators)({
                login: function() {
                    return Object(l.f)(o.a.EventFollowButton)
                }
            }, e)
        }
        var r = n(8),
            s = n(10),
            o = n(50),
            l = n(34),
            c = n(18),
            u = n(0),
            d = n(1),
            p = n(30),
            m = n(2),
            h = n(60),
            g = n(22),
            f = n(1018),
            b = n(3),
            v = n(1291),
            k = n(1292),
            S = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleOpen = function(e) {
                        e && Object(f.d)({
                            action: f.b.RemindMeOpen,
                            channelLogin: t.props.channelLogin,
                            channelID: t.props.channelID,
                            eventID: t.props.eventID,
                            location: t.props.eventLocation
                        })
                    }, t.handleToggle = function() {
                        if (!t.props.isLoggedIn) return t.props.login();
                        if (t.props.areNotificationsEnabled) {
                            var e = u.__assign({}, Object(g.a)({
                                eventID: t.props.eventID
                            }), {
                                optimisticResponse: {
                                    unfollowEvent: {
                                        __typename: "UnfollowEventPayload",
                                        event: {
                                            __typename: "Event",
                                            id: t.props.eventID,
                                            self: {
                                                __typename: "EventSelfConnection",
                                                isFollowing: !1
                                            }
                                        }
                                    }
                                }
                            });
                            t.props.unfollowEvent(e)
                        } else {
                            var e = u.__assign({}, Object(g.a)({
                                eventID: t.props.eventID
                            }), {
                                optimisticResponse: {
                                    followEvent: {
                                        __typename: "FollowEventPayload",
                                        event: {
                                            __typename: "Event",
                                            id: t.props.eventID,
                                            self: {
                                                __typename: "EventSelfConnection",
                                                isFollowing: !0
                                            }
                                        }
                                    }
                                }
                            });
                            t.props.followEvent(e)
                        }
                        Object(f.d)({
                            action: t.props.areNotificationsEnabled ? f.b.EmailReminderOff : f.b.EmailReminderOn,
                            channelLogin: t.props.channelLogin,
                            channelID: t.props.channelID,
                            eventID: t.props.eventID,
                            location: t.props.eventLocation
                        })
                    }, t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    return d.createElement(h.a, {
                        onToggle: this.handleOpen
                    }, d.createElement(b.u, {
                        dropdown: !0
                    }, Object(m.d)("Remind Me", "FollowEvent")), d.createElement(b.p, {
                        direction: this.props.balloonDirection
                    }, d.createElement(b.U, {
                        padding: 1
                    }, d.createElement(b._17, {
                        display: b.H.Flex,
                        flexDirection: b.J.Row,
                        flexWrap: b.K.NoWrap,
                        justifyContent: b.T.Between,
                        margin: {
                            bottom: 1
                        },
                        padding: {
                            bottom: 1
                        },
                        borderBottom: !0
                    }, d.createElement(b._21, null, Object(m.d)("Reminders", "FollowEvent")), d.createElement(b._29, {
                        checked: this.props.areNotificationsEnabled,
                        onChange: this.handleToggle
                    })), d.createElement(b._21, {
                        color: b.F.Alt
                    }, Object(m.d)("Turn on reminders to be notified when this event starts.", "FollowEvent")))))
                }, t
            }(d.Component),
            y = Object(p.compose)(Object(p.graphql)(v, {
                name: "followEvent"
            }), Object(p.graphql)(k, {
                name: "unfollowEvent"
            }))(S),
            C = Object(r.a)(i, a)(y);
        n.d(t, "a", function() {
            return C
        })
    },
    1291: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Events_FollowEvent"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "FollowEventInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "followEvent"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "event"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "isFollowing"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 162
            }
        };
        n.loc.source = {
            body: "mutation Events_FollowEvent($input: FollowEventInput!) {\n  followEvent(input: $input) {\n    event {\n      id\n      self {\n        isFollowing\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    1292: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Events_FollowEvent"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnfollowEventInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "unfollowEvent"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "event"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "isFollowing"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 166
            }
        };
        n.loc.source = {
            body: "mutation Events_FollowEvent($input: UnfollowEventInput!) {\n  unfollowEvent(input: $input) {\n    event {\n      id\n      self {\n        isFollowing\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    1293: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                isLoggedIn: Object(d.d)(e)
            }
        }

        function a(e) {
            return Object(o.bindActionCreators)({
                login: function() {
                    return Object(u.f)(l.a.ReportChannel)
                },
                showReportUserModal: function(e) {
                    var t = r.__rest(e, []);
                    return Object(c.d)(p.a, t)
                }
            }, e)
        }
        var r = n(0),
            s = n(8),
            o = n(10),
            l = n(50),
            c = n(49),
            u = n(34),
            d = n(18),
            p = n(769),
            m = n(1),
            h = n(2),
            g = n(60),
            f = n(759),
            b = n(3),
            v = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleReportClick = function() {
                        if (!t.props.isLoggedIn) return t.props.login();
                        var e = "https://www.twitch.tv/events/" + t.props.eventID;
                        t.props.showReportUserModal({
                            reportContext: {
                                contentType: f.a.User,
                                targetUserID: t.props.targetUser.id
                            },
                            title: Object(h.d)("Report {channelName}", {
                                channelName: t.props.targetUser.displayName
                            }, "EventMoreMenu"),
                            defaultDescription: "Report event: " + e
                        })
                    }, t
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    return m.createElement(g.a, null, m.createElement(b.u, {
                        icon: b._9.More,
                        type: b.z.Hollow
                    }), m.createElement(b.p, {
                        direction: this.props.balloonDirection
                    }, m.createElement(b.U, {
                        padding: {
                            y: 1
                        }
                    }, m.createElement(b.S, {
                        onClick: this.handleReportClick
                    }, m.createElement(b.U, {
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, Object(h.d)("Report", "EventMoreMenu"))))))
                }, t
            }(m.Component),
            k = Object(s.a)(i, a)(v);
        n.d(t, "a", function() {
            return k
        })
    },
    1294: function(e, t, n) {
        "use strict";

        function i(e) {
            return "https://www.twitch.tv/events/" + e
        }
        var a = n(0),
            r = n(1),
            s = n(2),
            o = n(966),
            l = n(60),
            c = n(1018),
            u = n(3),
            d = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onShareClicked = function(e) {
                        var n = "";
                        switch (e) {
                            case o.b.Twitter:
                                n = "twitter";
                                break;
                            case o.b.Facebook:
                                n = "facebook";
                                break;
                            case o.b.Reddit:
                                n = "reddit";
                                break;
                            case o.b.VKontakte:
                                n = "vk";
                                break;
                            default:
                                n = "unknown"
                        }
                        Object(c.c)({
                            shareMedium: n,
                            eventID: t.props.id,
                            channelLogin: t.props.channelLogin,
                            channelID: t.props.channelID,
                            location: t.props.eventLocation
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = i(this.props.id);
                    return r.createElement(l.a, null, r.createElement(u.u, {
                        dropdown: !0,
                        type: u.z.Hollow
                    }, Object(s.d)("Share", "ShareEvent")), r.createElement(u.p, {
                        direction: this.props.balloonDirection
                    }, r.createElement(u.U, {
                        padding: 1
                    }, r.createElement(u.U, {
                        display: u.H.Flex,
                        flexDirection: u.J.Row,
                        flexWrap: u.K.NoWrap,
                        justifyContent: u.T.Center
                    }, r.createElement(o.a, {
                        type: o.b.Twitter,
                        text: this.props.title,
                        url: e,
                        onShareClick: this.onShareClicked
                    }), r.createElement(o.a, {
                        type: o.b.Facebook,
                        text: this.props.title,
                        url: e,
                        onShareClick: this.onShareClicked
                    }), r.createElement(o.a, {
                        type: o.b.Reddit,
                        text: this.props.title,
                        url: e,
                        onShareClick: this.onShareClicked
                    }), r.createElement(o.a, {
                        type: o.b.VKontakte,
                        text: this.props.title,
                        url: e,
                        onShareClick: this.onShareClicked
                    }), r.createElement(o.a, {
                        type: o.b.Copy,
                        text: this.props.title,
                        url: e
                    })))))
                }, t
            }(r.Component);
        n.d(t, "a", function() {
            return d
        })
    },
    1682: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "EventsPage_EventScheduleQuery"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "limit"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Int"
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "cursor"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "before"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Time"
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "after"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Time"
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "following"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "events"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "limit"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "after"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "cursor"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "criteria"
                                    },
                                    value: {
                                        kind: "ObjectValue",
                                        fields: [{
                                            kind: "ObjectField",
                                            name: {
                                                kind: "Name",
                                                value: "endsBefore"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "before"
                                                }
                                            }
                                        }, {
                                            kind: "ObjectField",
                                            name: {
                                                kind: "Name",
                                                value: "startsAfter"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "after"
                                                }
                                            }
                                        }]
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "pageInfo"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "hasNextPage"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "self"
                                                        },
                                                        arguments: [],
                                                        directives: [{
                                                            kind: "Directive",
                                                            name: {
                                                                kind: "Name",
                                                                value: "include"
                                                            },
                                                            arguments: [{
                                                                kind: "Argument",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "if"
                                                                },
                                                                value: {
                                                                    kind: "Variable",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "following"
                                                                    }
                                                                }
                                                            }]
                                                        }],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "isFollowing"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "SingleEvent"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "title"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "startAt"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "endAt"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "game"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "displayName"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "channel"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "login"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "displayName"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "imageURL"
                                                                },
                                                                arguments: [{
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "width"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "320"
                                                                    }
                                                                }, {
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "height"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "180"
                                                                    }
                                                                }],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "PremiereEvent"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "title"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "startAt"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "endAt"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "game"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "displayName"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "channel"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "displayName"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "imageURL"
                                                                },
                                                                arguments: [{
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "width"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "320"
                                                                    }
                                                                }, {
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "height"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "180"
                                                                    }
                                                                }],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 1105
            }
        };
        n.loc.source = {
            body: "query EventsPage_EventScheduleQuery($channelLogin: String!, $limit: Int, $cursor: Cursor, $before: Time, $after: Time, $following: Boolean!) {\n  user(login: $channelLogin) {\n    id\n    events(first: $limit, after: $cursor, criteria: {endsBefore: $before, startsAfter: $after}) {\n      pageInfo {\n        hasNextPage\n      }\n      edges {\n        cursor\n        node {\n          id\n          self @include(if: $following) {\n            isFollowing\n          }\n          ...on SingleEvent {\n            title\n            startAt\n            endAt\n            game {\n              id\n              displayName\n            }\n            channel {\n              id\n              login\n              displayName\n            }\n            imageURL(width:320, height:180)\n          }\n          ...on PremiereEvent {\n            title\n            startAt\n            endAt\n            game {\n              id\n              displayName\n            }\n            channel {\n              id\n              displayName\n            }\n            imageURL(width:320, height:180)\n          }\n        }\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    1683: function(e, t) {},
    2025: function(e, t, n) {
        "use strict";

        function i(e, t) {
            var n = new Date,
                i = {
                    weekday: "long",
                    month: "short",
                    day: "numeric"
                },
                a = {
                    timeZoneName: "short"
                };
            n.getFullYear() !== e.getFullYear() && (i = o.__assign({}, i, {
                year: "numeric"
            })), e.getDate() !== t.getDate() && (a = o.__assign({}, a, {
                weekday: "long",
                month: "short",
                day: "numeric"
            }), n.getFullYear() !== t.getFullYear() && (a = o.__assign({}, a, {
                year: "numeric"
            })));
            var r = Object(d.h)(e, i),
                s = Object(d.h)(t, a);
            return Object(d.d)("{startTime} - {endTime}", {
                startTime: r,
                endTime: s
            }, "EventListCard")
        }

        function a(e) {
            switch (e) {
                case "past":
                    return s.Past;
                case "future":
                default:
                    return s.Future
            }
        }

        function r(e) {
            return {
                isLoggedIn: Object(C.d)(e)
            }
        }
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var s, o = n(0),
            l = n(20),
            c = n(1),
            u = n(30),
            d = n(2),
            p = n(29),
            m = n(761),
            h = n(758),
            g = n(13),
            f = n(63),
            b = n(851),
            v = n(908),
            k = n(5),
            S = n(401),
            y = n(8),
            C = n(18),
            _ = n(11),
            E = n(349),
            N = n(1288),
            w = n(1290),
            T = n(1293),
            D = n(1294),
            I = n(1018),
            U = n(3),
            O = function(e) {
                var t = new Date(e.event.startAt),
                    n = new Date(e.event.endAt),
                    a = t > new Date,
                    r = Object(E.c)(e.event.id),
                    s = !(!e.event.self || !e.event.self.isFollowing),
                    o = e.upwardBalloons ? U.q.Top : U.q.Bottom,
                    l = e.event.game && e.event.game.displayName || "-";
                return c.createElement(U._17, {
                    margin: {
                        y: 1
                    },
                    background: U.m.Base,
                    elevation: 1
                }, c.createElement(U.A, {
                    row: !0
                }, c.createElement(U.P, {
                    flexShrink: 0
                }, c.createElement(_.a, {
                    to: r
                }, c.createElement(U.C, {
                    size: U.D.Size32,
                    aspect: U.k.Aspect16x9,
                    imageSrc: e.event.imageURL,
                    imageAlt: e.event.title
                }, c.createElement(N.a, {
                    date: t
                })))), c.createElement(U.B, null, c.createElement(U.U, {
                    margin: {
                        x: 2
                    }
                }, c.createElement(U.P, {
                    margin: {
                        bottom: 1
                    }
                }, c.createElement(_.a, {
                    to: r
                }, c.createElement(U._21, {
                    type: U._26.H4
                }, e.event.title))), c.createElement(U._21, {
                    color: U.F.Alt2
                }, i(t, n)), c.createElement(U._21, {
                    color: U.F.Alt2
                }, Object(d.d)("{channelName} streaming {gameName}", {
                    channelName: e.event.channel.displayName,
                    gameName: l
                }, "EventListCard")), c.createElement(U.U, {
                    display: U.H.Flex,
                    margin: {
                        top: 2
                    }
                }, a && c.createElement(U.U, {
                    margin: {
                        right: 1
                    }
                }, c.createElement(w.a, {
                    eventID: e.event.id,
                    areNotificationsEnabled: s,
                    channelLogin: e.event.channel.login,
                    channelID: e.event.channel.id,
                    eventLocation: I.a.ChannelEvents,
                    balloonDirection: o
                })), c.createElement(U.U, {
                    margin: {
                        right: 1
                    }
                }, c.createElement(D.a, {
                    id: e.event.id,
                    title: e.event.title,
                    channelLogin: e.event.channel.login,
                    channelID: e.event.channel.id,
                    eventLocation: I.a.ChannelEvents,
                    balloonDirection: o
                })), c.createElement(U.U, {
                    margin: {
                        right: 1
                    }
                }, c.createElement(U.u, {
                    type: U.z.Hollow,
                    linkTo: r
                }, Object(d.d)("View Details", "EventListCard"))), c.createElement(T.a, {
                    targetUser: {
                        id: e.event.channel.id,
                        displayName: e.event.channel.displayName
                    },
                    eventID: e.event.id,
                    balloonDirection: o
                }))))))
            },
            M = Object(k.c)("EventListCard", {
                autoReportInteractive: !0
            })(O);
        ! function(e) {
            e.Future = "future", e.Past = "past"
        }(s || (s = {}));
        var F = n(1682),
            P = function(e) {
                var t = null,
                    n = null,
                    i = null,
                    a = !1;
                return e.data.loading || e.data.error ? e.data.error && (t = Object(d.d)("Error loading events", "ChannelEventsSchedule")) : (i = e.data.user.events.edges.map(function(e, t, n) {
                    return c.createElement(M, {
                        key: e.node.id,
                        event: e.node,
                        upwardBalloons: t === n.length - 1
                    })
                }), 0 === e.data.user.events.edges.length && (t = Object(d.d)("Nothing here yet", "ChannelEventsSchedule")), a = e.data.user.events.pageInfo.hasNextPage), null !== t && (n = c.createElement(U.U, {
                    margin: {
                        top: 5
                    },
                    display: U.H.Flex,
                    flexDirection: U.J.Row,
                    justifyContent: U.T.Center
                }, c.createElement(U._21, {
                    type: U._26.H4,
                    color: U.F.Alt2,
                    italic: !0
                }, t))), c.createElement(U.U, null, i, n, e.data.loading && c.createElement(U.X, {
                    fillContent: !0
                }), c.createElement(p.a, {
                    loadMore: e.loadMore,
                    enabled: a
                }))
            },
            x = {
                options: function(e) {
                    return {
                        variables: {
                            channelLogin: e.channelLogin,
                            limit: 20,
                            before: e.filter === s.Future ? null : (new Date).toISOString(),
                            after: e.filter !== s.Future ? null : (new Date).toISOString(),
                            following: e.isLoggedIn && e.filter === s.Future
                        }
                    }
                },
                props: function(e) {
                    return o.__assign({}, e, {
                        loadMore: function() {
                            return e.data.fetchMore({
                                query: F,
                                variables: o.__assign({}, e.data.variables, {
                                    cursor: e.data.user.events.edges[Math.max(e.data.user.events.edges.length - 1, 0)].cursor
                                }),
                                updateQuery: function(e, t) {
                                    var n = t.fetchMoreResult,
                                        i = n;
                                    return {
                                        user: o.__assign({}, i.user, {
                                            events: o.__assign({}, i.user.events, {
                                                edges: e.user.events.edges.concat(i.user.events.edges)
                                            })
                                        })
                                    }
                                }
                            })
                        }
                    })
                }
            },
            L = Object(u.compose)(Object(u.graphql)(F, x), Object(k.c)("ChannelEventsSchedule", {
                autoReportInteractive: !0
            }))(P),
            A = Object(y.a)(r)(L),
            j = (n(1683), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleToggleChange = function(e) {
                        var n = a(e.currentTarget.value),
                            i = l.parse(t.props.location.search);
                        n !== s.Future ? i.filter = n : delete i.filter, t.props.history.replace(o.__assign({}, t.props.location, {
                            search: l.stringify(i)
                        }))
                    }, t
                }
                return o.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.setPageTitle()
                }, t.prototype.componentDidUpdate = function() {
                    this.setPageTitle()
                }, t.prototype.render = function() {
                    var e = this.props.match.params.channelLogin,
                        t = l.parse(this.props.location.search),
                        n = a(t.filter);
                    return c.createElement(U.U, {
                        display: U.H.Flex,
                        flexDirection: U.J.Column,
                        flexWrap: U.K.NoWrap,
                        fullHeight: !0,
                        fullWidth: !0
                    }, c.createElement(b.a, {
                        currentPage: b.b.Events,
                        channelLogin: e
                    }), c.createElement(U.U, {
                        display: U.H.Flex,
                        flexGrow: 1,
                        fullHeight: !0
                    }, c.createElement(U.P, {
                        fullWidth: !0
                    }, c.createElement(p.b, null, c.createElement(U.U, {
                        fullWidth: !0,
                        padding: {
                            y: 2,
                            x: 3
                        }
                    }, c.createElement(U._12, null, c.createElement(U._13, {
                        name: "events-toggle",
                        label: Object(d.d)("Future Events", "ChannelEventsPage"),
                        defaultChecked: n === s.Future,
                        onChange: this.handleToggleChange,
                        value: s.Future
                    }), c.createElement(U._13, {
                        name: "events-toggle",
                        label: Object(d.d)("Past Events", "ChannelEventsPage"),
                        defaultChecked: n === s.Past,
                        onChange: this.handleToggleChange,
                        value: s.Past
                    })), c.createElement(A, {
                        filter: n,
                        channelLogin: e
                    })))), c.createElement(S.b, null, c.createElement(U._17, {
                        className: "channel-events__sidebar",
                        background: U.m.Alt2,
                        display: U.H.Flex,
                        flexGrow: 0,
                        flexShrink: 0,
                        overflow: U.Y.Hidden,
                        flexDirection: U.J.Column,
                        flexWrap: U.K.NoWrap,
                        fullHeight: !0
                    }, c.createElement(v.a, {
                        channelLogin: e,
                        clientID: f.o.config.legacyClientID
                    })))))
                }, t.prototype.setPageTitle = function() {
                    f.o.setPageTitle(Object(d.d)("{channelName}'s Events", {
                        channelName: this.props.match.params.channelLogin
                    }, "ChannelEventsPage"))
                }, t
            }(c.Component)),
            R = Object(u.compose)(Object(k.c)("EventCollectionsPage", {
                destination: h.a.ChannelEvents,
                autoReportInteractive: !0
            }), Object(m.a)({
                location: g.PageviewLocation.ChannelEvents
            }))(j);
        n.d(t, "ChannelEventsPage", function() {
            return R
        })
    },
    354: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e[e.Ready = 0] = "Ready", e[e.Dimensions = 1] = "Dimensions", e[e.RequestAd = 2] = "RequestAd", e[e.OnStart = 3] = "OnStart", e[e.OnCredit = 4] = "OnCredit", e[e.OnFinish = 5] = "OnFinish", e[e.OnClose = 6] = "OnClose", e[e.OnError = 7] = "OnError", e[e.Adblock = 8] = "Adblock", e[e.LimitReached = 9] = "LimitReached"
        }(i || (i = {}))
    },
    754: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e[e.Post = 0] = "Post", e[e.Action = 1] = "Action", e[e.PostWithMention = 2] = "PostWithMention", e[e.Ban = 3] = "Ban", e[e.Timeout = 4] = "Timeout", e[e.AutoModRejectedPrompt = 5] = "AutoModRejectedPrompt", e[e.AutoModMessageRejected = 6] = "AutoModMessageRejected", e[e.AutoModMessageAllowed = 7] = "AutoModMessageAllowed", e[e.AutoModMessageDenied = 8] = "AutoModMessageDenied", e[e.Connected = 9] = "Connected", e[e.Disconnected = 10] = "Disconnected", e[e.Reconnect = 11] = "Reconnect", e[e.Hosting = 12] = "Hosting", e[e.Unhost = 13] = "Unhost", e[e.Subscription = 14] = "Subscription", e[e.Resubscription = 15] = "Resubscription", e[e.SubGift = 16] = "SubGift", e[e.Clear = 17] = "Clear", e[e.SubscriberOnlyMode = 18] = "SubscriberOnlyMode", e[e.FollowerOnlyMode = 19] = "FollowerOnlyMode", e[e.SlowMode = 20] = "SlowMode", e[e.RoomMods = 21] = "RoomMods", e[e.RoomState = 22] = "RoomState", e[e.Raid = 23] = "Raid", e[e.Unraid = 24] = "Unraid", e[e.Notice = 25] = "Notice", e[e.Info = 26] = "Info", e[e.BadgesUpdated = 27] = "BadgesUpdated", e[e.Purchase = 28] = "Purchase"
        }(i || (i = {}))
    },
    755: function(e, t, n) {
        "use strict";

        function i(e) {
            var t = {
                action_name: e.actionName,
                action_type: "click",
                client_time: (new Date).getTime(),
                displayed_balance: e.displayedBalance,
                emote_level: e.emoteLevel,
                emote_type: e.emoteType,
                bits_location: e.location || d.ChatTooltip
            };
            c.m.track(u.SpadeEventType.BitsCardInteraction, t)
        }

        function a(e) {
            return e && m[e] ? m[e] : (c.i.error(new Error('Buy Bits card contains improperly rendered offers, or offers unknown to Science. Tracking as "buy_100"'), 'Buy Bits card contains improperly rendered offers, or offers unknown to Science. Tracking as "buy_100"'), p.Buy100)
        }

        function r(e) {
            var t = {
                channel: e.channel,
                channel_id: e.channelID,
                available: e.available,
                host: "twitch.tv"
            };
            c.m.track(u.SpadeEventType.BitsAdsAvailability, t)
        }

        function s(e) {
            var t = {
                distinct_id: c.n.session.deviceID,
                host: "twitch.tv",
                request_id: e.requestID,
                campaign_id: e.campaignID,
                adblock: e.adblock
            };
            c.m.track(u.SpadeEventType.BitsAdsImpression, t)
        }

        function o(e) {
            var t = c.m.getLastPageview(),
                n = {
                    location: t ? t.location || "" : "",
                    ad_returned: null,
                    campaign_id: e.campaignID,
                    distinct_id: c.n.session.deviceID,
                    host: "twitch.tv",
                    request_id: e.requestID,
                    request_method: e.requestMethod
                };
            c.m.track(u.SpadeEventType.BitsAdsRequest, n)
        }
        t.h = i, n.d(t, "b", function() {
            return d
        }), n.d(t, "a", function() {
            return p
        }), t.d = a, t.e = r, t.f = s, n.d(t, "c", function() {
            return l
        }), t.g = o;
        var l, c = n(2),
            u = n(13),
            d = {
                ChatTooltip: "card",
                GetBitsButton: "get_bits_button",
                BitsLandingPage: "bits_landing_page"
            },
            p = {
                BuyMain: "buy_main",
                Buy100: "buy_100",
                Buy500: "buy_500",
                Buy1000: "buy_1000",
                Buy1500: "buy_1500",
                Buy5000: "buy_5000",
                Buy10000: "buy_10000",
                Buy25000: "buy_25000",
                CloseCard: "menu_close",
                OpenCard: "menu_open",
                PreviewEmote: "emote_preview",
                WatchAd: "watch_ad",
                WatchAnotherAd: "watch_another_ad"
            },
            m = {
                100: p.Buy100,
                500: p.Buy500,
                1e3: p.Buy1000,
                1500: p.Buy1500,
                5e3: p.Buy5000,
                1e4: p.Buy10000,
                25e3: p.Buy25000
            };
        ! function(e) {
            e.ShowAdButton = "show_ad_button"
        }(l || (l = {}))
    },
    756: function(e, t, n) {
        "use strict";

        function i(e) {
            return e + "-" + Date.now() + "}"
        }
        t.a = i
    },
    757: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return s
        });
        var i = n(0),
            a = n(2),
            r = n(18),
            s = function() {
                function e() {}
                return e.get = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "GET"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.put = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "PUT"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.post = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "POST"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.delete = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "DELETE"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.request = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        var a, r;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return t = this.constructOptions(t, n), a = t.headers ? t.headers["Content-Type"] : void 0, t.body = this.serialize(t.body, a), [4, this._fetch(e, t)];
                                case 1:
                                    return r = i.sent(), [4, this.constructLegacyAPIResponse(r)];
                                case 2:
                                    return [2, i.sent()]
                            }
                        })
                    })
                }, e.getAPIURL = function(e) {
                    return new URL(e, a.n.config.apiBaseURL)
                }, e.constructLegacyAPIResponse = function(e) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var t, n, a;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    t = {
                                        status: e.status
                                    }, i.label = 1;
                                case 1:
                                    return i.trys.push([1, 3, , 4]), [4, e.json()];
                                case 2:
                                    return n = i.sent(), e.ok ? t.body = n : t.error = n, [3, 4];
                                case 3:
                                    return a = i.sent(), t.requestError = a, [3, 4];
                                case 4:
                                    return [2, t]
                            }
                        })
                    })
                }, e._fetch = function(e, t) {
                    return void 0 === t && (t = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return [4, fetch(this.getAPIURL(e).toString(), t)];
                                case 1:
                                    return [2, n.sent()]
                            }
                        })
                    })
                }, e.constructOptions = function(e, t) {
                    return e = Object.assign({}, e, {
                        headers: i.__assign({}, this.getDefaultHeaders(e, t), e.headers)
                    })
                }, e.serialize = function(e, t) {
                    return "application/json; charset=UTF-8" === t ? JSON.stringify(e) : e
                }, e.getDefaultHeaders = function(e, t) {
                    var n = a.n.store.getState(),
                        i = {
                            Accept: "application/vnd.twitchtv.v" + (t.version || 5) + "+json; charset=UTF-8",
                            "Accept-Language": "en-us",
                            "Client-ID": a.n.config.legacyClientID,
                            "X-Requested-With": "XMLHttpRequest"
                        };
                    e.body && FormData.prototype.isPrototypeOf(e.body) || (i["Content-Type"] = "application/json; charset=UTF-8");
                    var s = Object(r.c)(n);
                    return s && (i.Authorization = "OAuth " + s.authToken, s.legacyCSRFToken && (i["Twitch-Api-Token"] = s.legacyCSRFToken)), t.excludeHeaders && t.excludeHeaders.forEach(function(e) {
                        i[e] && delete i[e]
                    }), i
                }, e
            }()
    },
    758: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = {
            BrowseCommunities: "browse.communities",
            BrowseCreative: "browse.creative",
            BrowseForYou: "browse.for-you",
            ChannelIndex: "channel.index.index",
            ChannelDashboardAchievements: "channel.dashboard.achievements",
            ChannelDashboardModeration: "channel.dashboard.moderation",
            ChannelDashboardStreamSummary: "channel.dashboard.stream-summary",
            ChannelClips: "channel.clips",
            ChannelClipsManager: "videoManager.clips.channel",
            ChannelCollections: "channel.collections",
            ChannelEvents: "channel.events",
            ChatPopout: "chat",
            DevOnly: "dev",
            DirectoryCommunityByLanguage: "directory.community.language",
            DirectoryCommunityIndex: "directory.community.index",
            DirectoryCommunityDetails: "directory.community.details",
            DirectoryGames: "directory.games",
            DirectoryPopular: "directory.popular",
            DirectoryGameIndex: "directory.game.index",
            DirectoryGameClips: "directory.game.clips",
            DirectoryGameDetails: "directory.game.details",
            DirectoryGameVideos: "directory.game.videos",
            DirectoryFollowingIndex: "directory.following.index",
            DirectoryFollowingGames: "directory.following.games",
            DirectoryFollowingVideos: "directory.following.videos.video-type",
            DirectoryFollowingHosts: "directory.following.hosts",
            DirectoryFollowingLiveChannels: "directory.following.channels",
            DirectoryFollowingCommunities: "directory.following.communities",
            EmailVerification: "emailVerification",
            EventDetails: "event.details",
            Index: "index",
            MyClipsManager: "videoManager.clips",
            NotificationSettingsPage: "settings.notificationSettings",
            OnboardingIndex: "onboarding.index",
            ReportUserPage: "reportUser.page",
            StoreMerchPage: "store.merch",
            SubsLandingPage: "subs.landing",
            SubsBroadcasterPage: "subs.broadcaster",
            TeamsDashboardBasicInfo: "teams.dashboard.basic-info",
            TeamsDashboardCustomize: "teams.dashboard.customize",
            TeamsDashboardFeaturedChannels: "teams.dashboard.featured-channels",
            TeamsDashboardMembers: "teams.dashboard.members",
            TeamsDashboardStats: "teams.dashboard.stats",
            TeamsDashboardRevenue: "teams.dashboard.revenue",
            VideosPage: "videos",
            VideoWatchPage: "video",
            VideoManagerPage: "videoManager.page",
            VideoManagerEditPropertiesPage: "videoManager.edit",
            VideoManagerUploadPage: "videoManager.upload",
            VideoManagerUploadListPage: "videoManager.upload-list"
        }
    },
    759: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e.ChannelFeedComment = "CHANNEL_FEED_COMMENT_REPORT", e.ChannelFeedPost = "CHANNEL_FEED_POST_REPORT", e.Chat = "CHAT_REPORT", e.Clip = "CLIP_REPORT", e.Collection = "COLLECTION_REPORT", e.Community = "COMMUNITY_REPORT", e.Event = "EVENT_REPORT", e.Extension = "EXTENSION_REPORT", e.LiveUp = "LIVE_UP_REPORT", e.Raid = "RAID_REPORT", e.StreamUp = "STREAM_UP_REPORT", e.User = "USER_REPORT", e.VideoChatMessage = "VOD_COMMENT_REPORT", e.Vod = "VOD_REPORT"
        }(i || (i = {}))
    },
    761: function(e, t, n) {
        "use strict";

        function i(e) {
            return function(t) {
                var n = function(n) {
                    function i(t) {
                        var i = n.call(this, t) || this;
                        return i.tracked = !1, i.referenceTracking = {}, i.trackPageview = function() {
                            if (!(i.tracked || e.skip && e.skip(i.props))) {
                                i.tracked = !0, l.n.adBlockSentinel.pageTransition();
                                var t = {};
                                "function" == typeof e.properties ? t = e.properties(i.props) : e.properties && (t = a.__assign({}, e.properties));
                                var n = a.__assign({}, i.props);
                                n.location && n.location.state && (t.medium = n.location.state.medium, t.content = n.location.state.content, t.content_index = n.location.state.content_index);
                                var r = i.referenceTracking,
                                    s = r.content,
                                    o = r.medium,
                                    c = r.content_index;
                                l.n.tracking.trackPageview(a.__assign({
                                    content: s,
                                    medium: o,
                                    content_index: c,
                                    location: e.location
                                }, t))
                            }
                        }, l.i.debug("pageViewTracking", e), t.rootLatencyTracker ? t.rootLatencyTracker.setLocation(e.location) : l.i.warn("No latency tracker exists! This means no data will be sent to Spade.", e), i
                    }
                    return a.__extends(i, n), i.prototype.componentDidMount = function() {
                        var e = this;
                        this.referenceTracking = this.stripTTParams(this.props.history.location), this.trackPageview(), this.props.history.listen(function(t, n) {
                            "REPLACE" !== n && (e.tracked = !1, e.referenceTracking = {})
                        })
                    }, i.prototype.componentDidUpdate = function() {
                        this.trackPageview()
                    }, i.prototype.render = function() {
                        return s.createElement(t, a.__assign({}, this.props))
                    }, i.prototype.stripTTParams = function(e) {
                        var t = "" !== e.search ? r.parse(e.search) : {},
                            n = {
                                content: t.tt_content,
                                content_index: t.tt_content_index,
                                medium: t.tt_medium
                            };
                        if (delete t.tt_content, delete t.tt_content_index, delete t.tt_medium, n.medium || n.content) {
                            var i = "",
                                a = r.stringify(t);
                            a.length > 0 && (i = "?" + a), this.props.history.replace({
                                pathname: e.pathname,
                                hash: e.hash,
                                search: i
                            })
                        }
                        return n
                    }, i
                }(s.Component);
                return Object(o.f)(n)
            }
        }
        var a = n(0),
            r = n(20),
            s = n(1),
            o = n(11),
            l = n(2);
        n.d(t, "a", function() {
            return i
        })
    },
    762: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(4),
            r = n(1),
            s = n(10),
            o = n(2),
            l = n(7),
            c = n(5),
            u = n(768),
            d = n(3),
            p = n(786),
            m = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleChange = function(e) {
                        t.props.onChange(e.target.value)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = null,
                        t = Object(o.d)("Select One...", "ReportUserModal");
                    return e = this.props.data.loading ? [r.createElement("option", {
                        key: "Loading"
                    }, Object(o.d)("Loading...", "ReportReasonsSelect"))] : Object(u.b)(this.props.data.reportReasons).map(function(e) {
                        return r.createElement("option", {
                            key: e.canonical,
                            value: e.canonical
                        }, e.localized)
                    }), r.createElement(d.U, {
                        margin: {
                            bottom: 2
                        }
                    }, r.createElement(d.M, {
                        id: "reporting-modal__select",
                        label: Object(o.d)("Select Reason (required)", "ReportUserModal")
                    }, r.createElement(d._14, {
                        id: "reporting-modal__select",
                        "data-test-selector": "reporting-modal.select",
                        disabled: this.props.data.loading || !!this.props.data.error,
                        onChange: this.handleChange,
                        defaultValue: t
                    }, r.createElement("option", {
                        disabled: !0,
                        key: "default"
                    }, t), e)))
                }, t = i.__decorate([Object(c.c)("ReportReasonSelect")], t)
            }(r.Component),
            h = Object(l.a)(p, {
                options: function(e) {
                    return {
                        variables: {
                            content: e.reportContentType
                        }
                    }
                }
            })(m),
            g = (n(787), n(788));
        n.d(t, "a", function() {
            return b
        }), n.d(t, "b", function() {
            return f
        }), n.d(t, "c", function() {
            return k
        });
        var f, b = "community_rules_violation";
        ! function(e) {
            e[e.Unsubmitted = 0] = "Unsubmitted", e[e.Success = 1] = "Success", e[e.FormError = 2] = "FormError", e[e.MutationError = 3] = "MutationError"
        }(f || (f = {}));
        var v = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        community: null,
                        description: "",
                        reason: null,
                        isCommunityReason: !1,
                        selectedCommunityID: null,
                        selectedCommunityName: null
                    }, t.headerMessage = Object(o.d)("Tell us your concern about this content so that we can review it to determine whether there has been a violation of the {tosLink}. {br} (Abuse of this feature is a violation of the terms of service)", {
                        br: r.createElement("br", null),
                        tosLink: r.createElement("a", {
                            href: "https://www.twitch.tv/p/terms-of-service",
                            target: "_blank"
                        }, Object(o.d)("terms of service", "ReportUser"))
                    }, "ReportUser"), t.selectCommunity = function(e) {
                        t.setState({
                            selectedCommunityID: e.target.value,
                            selectedCommunityName: e.target.name
                        })
                    }, t.handleSubmit = function(e) {
                        e.preventDefault(), t.state.reason && t.state.description.length > 0 ? t.props.onSubmit(t.state.reason || "", t.state.description, t.state.selectedCommunityID, t.state.selectedCommunityName) : t.props.onError(f.FormError)
                    }, t.handleTextAreaChange = function(e) {
                        t.setState({
                            description: e.target.value
                        })
                    }, t.handleReasonChange = function(e) {
                        if (!t.props.data || t.props.data.loading || t.props.data.error || !t.props.data.user) return null;
                        var n = t.props.data.user.directories.nodes.filter(function(e) {
                            return "COMMUNITY" === e.directoryType
                        });
                        n.length && e === b ? t.setState({
                            reason: e,
                            selectedCommunityID: n[0].id,
                            selectedCommunityName: n[0].name,
                            isCommunityReason: !0
                        }) : t.setState({
                            reason: e,
                            isCommunityReason: !1
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(d.U, {
                        display: d.H.Flex,
                        flexDirection: d.J.Column,
                        alignItems: d.c.Center,
                        justifyContent: d.T.Center
                    }, this.renderStatusMessage(), this.renderBody())
                }, t.prototype.renderBody = function() {
                    return this.props.submitStatus === f.Success ? r.createElement("div", null, r.createElement(d.u, {
                        onClick: this.props.onClose
                    }, r.createElement(d.U, {
                        padding: {
                            x: 2
                        }
                    }, Object(o.d)("Close", "ReportUser")))) : r.createElement("div", null, r.createElement(d.U, {
                        "data-test-selector": "reporting.title",
                        margin: {
                            bottom: 1
                        }
                    }, r.createElement(d._21, {
                        type: d._26.H4
                    }, this.props.title), r.createElement(d._17, {
                        color: d.F.Alt2,
                        margin: {
                            top: 1
                        }
                    }, this.headerMessage)), r.createElement("form", null, r.createElement(d._17, {
                        borderTop: !0,
                        borderBottom: !0,
                        margin: {
                            y: 2
                        },
                        padding: {
                            y: 2
                        }
                    }, r.createElement(h, {
                        reportContentType: this.props.reportContentType,
                        onChange: this.handleReasonChange
                    }), this.renderCommunitiesSelector(), r.createElement(d.M, {
                        id: "reporting__text-area",
                        label: Object(o.d)("Description (required)", "ReportUser")
                    }, r.createElement(d._23, {
                        defaultValue: this.props.defaultDescription,
                        onChange: this.handleTextAreaChange
                    }))), r.createElement(d._17, {
                        display: d.H.Flex,
                        justifyContent: d.T.Center
                    }, r.createElement(d.u, {
                        onClick: this.handleSubmit
                    }, r.createElement(d.U, {
                        padding: {
                            x: 2
                        }
                    }, Object(o.d)("Send", "ReportUser"))))))
                }, t.prototype.renderCommunitiesSelector = function() {
                    if (!this.props.data || this.props.data.loading || this.props.data.error || !this.props.data.user) return null;
                    if (this.state.isCommunityReason) {
                        var e = this.props.data.user.directories.nodes.filter(function(e) {
                                return "COMMUNITY" === e.directoryType
                            }),
                            t = e.map(function(e) {
                                return r.createElement("option", {
                                    key: e.id,
                                    value: e.id,
                                    name: e.name
                                }, e.displayName)
                            });
                        return r.createElement(d.U, {
                            margin: {
                                bottom: 2
                            }
                        }, r.createElement(d.M, {
                            id: "reporting__select-community",
                            label: Object(o.d)("Community", "ReportUser")
                        }, r.createElement(d._14, {
                            id: "reporting__select-community",
                            "data-test-selector": "reporting.select-community",
                            disabled: this.props.data.loading || !!this.props.data.error,
                            onChange: this.selectCommunity
                        }, t)))
                    }
                }, t.prototype.renderStatusMessage = function() {
                    var e = null;
                    switch (this.props.submitStatus) {
                        case f.FormError:
                            e = Object(o.d)("Reason and Description are required.", "ReportUser");
                            break;
                        case f.MutationError:
                            e = Object(o.d)("Sorry, a network error occurred when submitting your report. Please try again later.", "ReportUser");
                            break;
                        case f.Success:
                            e = Object(o.d)("Thank you for your report.", "ReportUser");
                            break;
                        default:
                            return null
                    }
                    var t = a({
                        "reporting__error-container": this.props.submitStatus !== f.Success,
                        "reporting__success-container": this.props.submitStatus === f.Success
                    });
                    return r.createElement(d._17, {
                        className: t,
                        fullWidth: this.props.submitStatus !== f.Success,
                        "data-test-selector": "reporting.error",
                        margin: {
                            bottom: 2
                        },
                        padding: 1
                    }, e)
                }, t
            }(r.Component),
            k = Object(s.compose)(Object(l.a)(g, {
                options: function(e) {
                    return {
                        fetchPolicy: "network-only",
                        variables: {
                            userId: e.targetUserID
                        }
                    }
                }
            }))(v)
    },
    763: function(e, t, n) {
        "use strict";

        function i(e) {
            return "subscribe-button-modal-tab-" + e
        }
        var a, r = n(0),
            s = n(1),
            o = n(2),
            l = n(773),
            c = n(123),
            u = n(247),
            d = n(5),
            p = n(772),
            m = n(353),
            h = n(784),
            g = n(774),
            f = n(246),
            b = n(3),
            v = (n(808), "gift-subscription-button"),
            k = "subscribe-button";
        ! function(e) {
            e[e.Prime = 0] = "Prime", e[e.Tier1 = 1] = "Tier1", e[e.Tier2 = 2] = "Tier2", e[e.Tier3 = 3] = "Tier3"
        }(a || (a = {}));
        var S = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.toggleActiveTab = function(e) {
                        if (e.currentTarget.parentElement) switch (e.currentTarget.parentElement.getAttribute("data-a-target")) {
                            case "subscribe-button-modal-tab-" + a.Prime:
                                n.setState({
                                    activeTab: a.Prime,
                                    currentPurchasePrice: n.messages.tier1Price
                                }), n.props.onSelectTierTab(a.Prime);
                                break;
                            case "subscribe-button-modal-tab-" + a.Tier1:
                                n.setState({
                                    activeTab: a.Tier1,
                                    currentPurchasePrice: n.messages.tier1Price
                                }), n.props.onSelectTierTab(a.Tier1);
                                break;
                            case "subscribe-button-modal-tab-" + a.Tier2:
                                n.setState({
                                    activeTab: a.Tier2,
                                    currentPurchasePrice: n.messages.tier2Price
                                }), n.props.onSelectTierTab(a.Tier2);
                                break;
                            case "subscribe-button-modal-tab-" + a.Tier3:
                                n.setState({
                                    activeTab: a.Tier3,
                                    currentPurchasePrice: n.messages.tier3Price
                                }), n.props.onSelectTierTab(a.Tier3);
                                break;
                            default:
                                n.setState({
                                    activeTab: a.Prime,
                                    currentPurchasePrice: n.messages.tier1Price
                                }), n.props.onSelectTierTab(a.Prime)
                        }
                    }, n.getTabTitle = function() {
                        switch (n.state.activeTab) {
                            case a.Prime:
                                return n.messages.freeSubWithPrime;
                            case a.Tier1:
                                return n.messages.tier1Sub;
                            case a.Tier2:
                                return n.messages.tier2Sub;
                            case a.Tier3:
                                return n.messages.tier3Sub;
                            default:
                                return n.messages.tier1Sub
                        }
                    }, n.getTierSubscribeButton = function() {
                        var e = n.props.subscriptionProducts[n.state.activeTab - 1];
                        return n.props.isGift ? n.props.giftRecipient ? s.createElement(b.u, {
                            ariaLabel: n.messages.giftSubscription + " " + n.state.currentPurchasePrice,
                            "data-test-selector": v,
                            onClick: n.reportGiftCheckoutAction,
                            targetBlank: !0,
                            purchase: n.state.currentPurchasePrice,
                            linkTo: Object(c.a)(e.url, {
                                recipient: n.props.giftRecipient
                            })
                        }, n.messages.giftSubscription) : s.createElement(b.u, {
                            ariaLabel: n.messages.giftSubscription + " " + n.state.currentPurchasePrice,
                            "data-test-selector": v,
                            onClick: n.onGiftSelect,
                            purchase: n.state.currentPurchasePrice
                        }, n.messages.giftSubscription) : n.state.subbedTier === n.state.activeTab && n.state.activeTab === a.Prime ? s.createElement(h.a, {
                            authToken: n.props.authToken,
                            "data-a-target": "subscribe-with-prime-button",
                            isSubscribed: n.props.isSubscribed,
                            isSubscribedWithPrime: n.props.subbedTier === p.a,
                            onSubscribedWithPrime: n.onSubscribedWithPrime,
                            reportSubMenuAction: n.props.reportSubMenuAction,
                            subLogin: n.props.subLogin,
                            userHasPrime: n.props.userHasPrime,
                            canPrimeSubscribe: n.props.canPrimeSubscribe
                        }) : s.createElement(m.a, {
                            isSubbedToTier: n.state.subbedTier === n.state.activeTab,
                            tierPrice: n.state.currentPurchasePrice,
                            reportSubAction: n.props.reportSubMenuAction,
                            url: e.url,
                            "data-a-target": "subscribe-now-button",
                            "data-test-selector": k
                        })
                    }, n.onSubscribedWithPrime = function() {
                        n.props.onSubscribedWithPrime && n.props.onSubscribedWithPrime()
                    }, n.reportGiftCheckoutAction = function() {
                        n.props.reportSubMenuAction({
                            action: f.a.BuyGiftSub,
                            checkoutButtonTier: n.state.currentPurchasePrice,
                            giftRecipient: n.props.giftRecipient ? n.props.giftRecipient : null
                        })
                    }, n.onGiftSelect = function() {
                        n.props.reportSubMenuAction({
                            action: f.a.GiftASub,
                            checkoutButtonTier: n.state.currentPurchasePrice
                        }), n.props.onGiftSelect && n.props.onGiftSelect()
                    }, n.mapSubbedTierToTabs = function(e) {
                        e.subbedTier === l.a.Prime ? (n.setState({
                            activeTab: a.Prime,
                            subbedTier: a.Prime
                        }), e.onSelectTierTab(a.Prime)) : e.subbedTier === l.a.Tier1 ? (n.setState({
                            activeTab: a.Tier1,
                            subbedTier: a.Tier1
                        }), e.onSelectTierTab(a.Tier1)) : e.subbedTier === l.a.Tier2 ? (n.setState({
                            activeTab: a.Tier2,
                            subbedTier: a.Tier2
                        }), e.onSelectTierTab(a.Tier2)) : e.subbedTier === l.a.Tier3 ? (n.setState({
                            activeTab: a.Tier3,
                            subbedTier: a.Tier3
                        }), e.onSelectTierTab(a.Tier3)) : e.isGift ? e.onSelectTierTab(n.state.activeTab) : e.onSelectTierTab(a.Prime)
                    }, n.getExtraEmotes = function(e) {
                        return (e === a.Tier2 ? Object(u.b)(n.props.subscriptionProducts[1].emotes) : Object(u.b)(n.props.subscriptionProducts[2].emotes.concat(n.props.subscriptionProducts[1].emotes))).map(function(e) {
                            return s.createElement(b.U, {
                                display: b.H.InlineFlex,
                                margin: {
                                    right: .5
                                },
                                key: e.id
                            }, s.createElement("img", {
                                srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/" + e.srcSet
                            }))
                        })
                    }, n.state = {
                        activeTab: a.Tier1,
                        currentPurchasePrice: n.props.subscriptionProducts[0].price,
                        subbedTier: null
                    }, n
                }
                return r.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.setMessages(this.props), this.mapSubbedTierToTabs(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.setMessages(e)
                }, t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = null;
                    this.state.subbedTier && (e = s.createElement(b.U, {
                        display: b.H.InlineFlex,
                        margin: {
                            right: .5
                        },
                        className: "subscription-balloon-options__subbed-star"
                    }, s.createElement(b._8, {
                        asset: b._9.Star
                    })));
                    var t = s.createElement(b._21, null),
                        n = null,
                        r = null,
                        c = null,
                        u = s.createElement(b.U, {
                            display: b.H.InlineFlex
                        }, this.state.subbedTier === a.Tier3 && e, s.createElement(b._18, {
                            active: this.state.activeTab === a.Tier3,
                            "data-a-target": i(a.Tier3),
                            onClick: this.toggleActiveTab
                        }, this.messages.tier3TabName));
                    this.hasDiscount(this.props) && this.state.activeTab !== a.Prime && (t = s.createElement(b.U, null, s.createElement(b._21, {
                        className: "tw-subscription-modal__old-price"
                    }, s.createElement("s", null, Object(g.a)(this.props.subscriptionProducts[this.state.activeTab - 1].self.oldPrice), " / Month")), s.createElement(b._21, {
                        className: "tw-subscription-modal__new-price",
                        type: b._26.H5,
                        bold: !0
                    }, Object(g.a)(this.props.subscriptionProducts[this.state.activeTab - 1].self.newPrice), " for the first month (Save 50%)"))), this.props.subbedTier !== l.a.Prime || this.props.isGift || (n = s.createElement(b.U, {
                        display: b.H.InlineFlex,
                        margin: {
                            right: 2
                        }
                    }, s.createElement(b.U, {
                        display: b.H.InlineFlex,
                        margin: {
                            right: 1
                        },
                        className: "subscription-balloon-options__prime-crown"
                    }, s.createElement(b._8, {
                        asset: b._9.Crown
                    })), s.createElement(b._18, {
                        active: this.state.activeTab === a.Prime,
                        "data-a-target": i(a.Prime),
                        onClick: this.toggleActiveTab
                    }, this.messages.prime))), this.props.subbedTier && this.props.subbedTier !== l.a.Tier1 || (r = s.createElement(b.U, {
                        display: b.H.InlineFlex,
                        margin: {
                            right: 2
                        }
                    }, this.state.subbedTier === a.Tier1 && e, s.createElement(b._18, {
                        active: this.state.activeTab === a.Tier1,
                        "data-a-target": i(a.Tier1),
                        onClick: this.toggleActiveTab
                    }, this.messages.tier1TabName))), this.props.subbedTier && this.props.subbedTier !== l.a.Prime && this.props.subbedTier !== l.a.Tier1 && this.props.subbedTier !== l.a.Tier2 || (c = s.createElement(b.U, {
                        display: b.H.InlineFlex,
                        margin: {
                            right: 2
                        }
                    }, this.state.subbedTier === a.Tier2 && e, s.createElement(b._18, {
                        active: this.state.activeTab === a.Tier2,
                        "data-a-target": i(a.Tier2),
                        onClick: this.toggleActiveTab
                    }, this.messages.tier2TabName)));
                    var d = null;
                    return (this.messages.tier2EmoteCount > 0 && this.state.activeTab === a.Tier2 || this.messages.tier3EmoteCount > 0 && this.state.activeTab === a.Tier3) && (d = s.createElement(b.U, {
                        display: b.H.InlineFlex,
                        alignItems: b.c.Center
                    }, this.getExtraEmotes(this.state.activeTab), s.createElement(b._21, {
                        bold: !0
                    }, Object(o.d)("Plus {extraEmoteCount, number} extra channel emote(s)", {
                        extraEmoteCount: this.state.activeTab === a.Tier2 ? this.messages.tier2EmoteCount : this.messages.tier3EmoteCount
                    }, "SubTierTabs")))), s.createElement(b.U, {
                        className: "channel-header__subscription-balloon-options"
                    }, s.createElement(b.U, {
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(b._19, null, n, r, c, u)), s.createElement(b.U, null, s.createElement(b.U, {
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(b._21, {
                        type: b._26.H5,
                        bold: !0
                    }, this.getTabTitle())), s.createElement(b.U, {
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(b._21, null, this.messages.subTierBenefits)), d, t, s.createElement(b.U, {
                        margin: {
                            top: 1,
                            right: 1
                        }
                    }, this.getTierSubscribeButton())))
                }, t.prototype.setMessages = function(e) {
                    var t = e.subscriptionProducts[1].emotes.length,
                        n = t + e.subscriptionProducts[2].emotes.length;
                    this.messages = {
                        tier2EmoteCount: t,
                        tier3EmoteCount: n,
                        prime: Object(o.d)("Prime", "SubTierTabs"),
                        subscribed: Object(o.d)("Subscribed", "SubTierTabs"),
                        subTierBenefits: Object(o.d)("Includes {availableEmoteCount, number} emoticon(s), subscriber badge, customizable messages upon subscribing, and ad-free viewing", {
                            availableEmoteCount: e.subscriptionProducts[0].emotes.length
                        }, "SubTierTabs"),
                        tier1Price: e.subscriptionProducts[0].price,
                        tier2Price: e.subscriptionProducts[1].price,
                        tier3Price: e.subscriptionProducts[2].price,
                        tier1TabName: e.subscriptionProducts[0].price,
                        tier2TabName: e.subscriptionProducts[1].price,
                        tier3TabName: e.subscriptionProducts[2].price,
                        subscribeNow: Object(o.d)("Subscribe Now", "SubTierTabs"),
                        freeSubWithPrime: Object(o.d)("Free Channel Sub with Twitch Prime", "SubTierTabs"),
                        giftSubscription: Object(o.d)("Gift A Subscription", "SubTierTabs"),
                        tier1Sub: e.subscriptionProducts[0].displayName,
                        tier2Sub: e.subscriptionProducts[1].displayName,
                        tier3Sub: e.subscriptionProducts[2].displayName
                    }, this.hasDiscount(e) && (this.messages.tier1Price = Object(g.a)(e.subscriptionProducts[0].self.newPrice), this.messages.tier2Price = Object(g.a)(e.subscriptionProducts[1].self.newPrice), this.messages.tier3Price = Object(g.a)(e.subscriptionProducts[2].self.newPrice))
                }, t.prototype.isSubscriptionDiscountReady = function(e) {
                    return void 0 !== e.subscriptionProducts[0].self
                }, t.prototype.hasDiscount = function(e) {
                    return !!this.isSubscriptionDiscountReady(e) && Object(g.b)(e.subscriptionProducts)
                }, t = r.__decorate([Object(d.c)("SubTierTabs")], t)
            }(s.Component),
            y = S;
        n.d(t, !1, function() {
            return v
        }), n.d(t, !1, function() {
            return k
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, !1, function() {
            return i
        }), n.d(t, "a", function() {
            return y
        })
    },
    764: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, "d", function() {
            return r
        }), n.d(t, "e", function() {
            return s
        }), n.d(t, "c", function() {
            return o
        });
        var i = "AD",
            a = "BUNDLE",
            r = "first_time_purchase",
            s = "single_purchase",
            o = "black_friday_2017"
    },
    765: function(e, t, n) {
        "use strict";

        function i(e) {
            return e.type !== d.a && (r(e) && null !== e.promotion && e.promotion.type === d.d)
        }

        function a(e) {
            return e.type !== d.a && (r(e) && null !== e.promotion && e.promotion.type === d.e)
        }

        function r(e) {
            return e.type === d.b && null !== e.promotion && !!e.promotion
        }

        function s(e) {
            var t = 0,
                n = 0,
                i = 0;
            return e.forEach(function(e) {
                e.cheerAmount && (t = Math.max(t, e.cheerAmount), n = n ? Math.min(n, e.cheerAmount) : e.cheerAmount, i += e.cheerAmount)
            }), {
                total: i,
                smallestCheermote: n,
                largestCheermote: t
            }
        }

        function o(e) {
            var t = e.messageBits,
                n = t.total,
                i = t.largestCheermote,
                a = t.smallestCheermote;
            if (n) {
                var r = {
                    cheerAboveMaxBitsPerEmote: i > p.k,
                    totalAboveBalance: n > e.balance,
                    totalBelowCheerMinimum: n < e.cheerMinimumBits,
                    totalBelowEmoteMinimum: a < e.emoteMinimumBits,
                    inputLongerThanMaxBitsMessage: e.inputValue.length > p.j,
                    inputStartsWithCommand: e.inputValue.startsWith("/")
                };
                if (Object.keys(r).some(function(e) {
                        return r[e]
                    })) return c.__assign({
                    canSpend: !1
                }, r)
            }
            return {
                canSpend: !0
            }
        }

        function l(e) {
            var t = e.purchaseUrl;
            if (t) {
                e.trackBitsCardInteraction(Object(m.d)(e.bitsAmount), {
                    location: e.location
                });
                var n = t.replace("{channelID}", e.channelID),
                    i = window.open(n, "Twitch", "width=1024,height=600,scrollbars=yes");
                return !i || Object(u.a)() ? (e.closeAllBits && e.closeAllBits(), void e.trackBitsCardInteraction(m.a.CloseCard, {
                    location: e.location
                })) : (i.focus(), i)
            }
        }
        t.c = i, t.e = a, t.d = r, t.a = s, t.f = o, t.b = l;
        var c = n(0),
            u = n(796),
            d = n(764),
            p = n(245),
            m = n(755)
    },
    767: function(e, t, n) {
        "use strict";
        var i, a = n(4),
            r = n(1),
            s = n(347),
            o = n(350),
            l = n(348),
            c = n(3);
        n(836);
        ! function(e) {
            e[e.Normal = 0] = "Normal", e[e.Small = 1] = "Small", e[e.Medium = 2] = "Medium", e[e.ExtraSmall = 3] = "ExtraSmall"
        }(i || (i = {}));
        var u;
        ! function(e) {
            e[e.ImageAndText = 0] = "ImageAndText", e[e.ImageOnly = 1] = "ImageOnly", e[e.TextOnly = 2] = "TextOnly", e[e.InlineTextOnly = 3] = "InlineTextOnly", e[e.Inline = 4] = "Inline"
        }(u || (u = {}));
        var d = function(e) {
            var t = e.bitsConfig.indexedActions[e.prefix.toLowerCase()];
            t || (t = Object(o.b)());
            var n = t.orderedTiers.find(function(t) {
                return t.bits <= (e.amount || 100)
            });
            n || (n = t.orderedTiers[0]);
            var d = null,
                p = a("cheermote-for-amount__cheer-amount", {
                    "cheermote-for-amount__cheer-amount--small": e.size === i.Small || e.size === i.ExtraSmall
                }, {
                    "cheermote-for-amount__cheer-amount--medium": e.size === i.Medium
                }, {
                    "cheermote-for-amount__display--table-cell": e.display !== u.InlineTextOnly && e.display !== u.Inline
                });
            e.amount && e.display !== u.ImageOnly && (d = r.createElement(c.P, {
                padding: e.size === i.Small ? 0 : void 0,
                textAlign: e.size === i.Small ? c._22.Center : void 0
            }, r.createElement("strong", {
                className: p,
                style: {
                    color: n.color
                }
            }, e.amount)));
            var m = a("cheermote-for-amount__cheer-image", {
                    "cheermote-for-amount__cheer-image--inline": e.display === u.Inline
                }, {
                    "cheermote-for-amount__cheer-image--small": e.size === i.Small
                }, {
                    "cheermote-for-amount__cheer-image--extra-small": e.size === i.ExtraSmall
                }, {
                    "cheermote-for-amount__display--table-cell": e.display !== u.InlineTextOnly && e.display !== u.Inline && e.size !== i.Small
                }),
                h = r.createElement(l.a, {
                    className: m,
                    sources: Object(s.b)(n, 4, e.animated)
                });
            return e.display !== u.TextOnly && e.display !== u.InlineTextOnly || (h = null), e.display === u.InlineTextOnly || e.display === u.Inline ? r.createElement(c.U, {
                className: "cheermote-for-amount",
                display: c.H.Inline
            }, h, d) : r.createElement(c.U, {
                className: "cheermote-for-amount"
            }, h, d)
        };
        n.d(t, "a", function() {
            return d
        }), n.d(t, "b", function() {
            return i
        }), n.d(t, "c", function() {
            return u
        })
    },
    768: function(e, t, n) {
        "use strict";

        function i(e) {
            if (e) {
                var t = e.map(function(e) {
                    return e.id
                });
                return s().filter(function(e) {
                    return t.includes(e.canonical)
                })
            }
            return s()
        }
        var a = function(e, t) {
                return 'community report (<a href="{link}">{link}</a>) {description}'.replace(/{link}/g, "https://www.twitch.tv/communities/{communityName}".replace("{communityName}", e)).replace(/{description}/, t)
            },
            r = n(2),
            s = function() {
                return [{
                    localized: Object(r.d)("Site Suspension Evasion", "ReportUserModal"),
                    canonical: "tos_ban_evasion"
                }, {
                    localized: Object(r.d)("Chat Ban Evasion", "ReportUserModal"),
                    canonical: "chat_ban_evasion"
                }, {
                    localized: Object(r.d)("Self-Harm", "ReportUserModal"),
                    canonical: "selfharm"
                }, {
                    localized: Object(r.d)("Attempts or Threats to Harm", "ReportUserModal"),
                    canonical: "harm"
                }, {
                    localized: Object(r.d)("Harassment", "ReportUserModal"),
                    canonical: "harassment"
                }, {
                    localized: Object(r.d)("Hate Speech", "ReportUserModal"),
                    canonical: "hate_speech"
                }, {
                    localized: Object(r.d)("Offensive Username", "ReportUserModal"),
                    canonical: "offensive_username"
                }, {
                    localized: Object(r.d)("Impersonation", "ReportUserModal"),
                    canonical: "impersonation"
                }, {
                    localized: Object(r.d)("Spam, Scams, or Other Malicious Content", "ReportUserModal"),
                    canonical: "spam"
                }, {
                    localized: Object(r.d)("Porn or Other Sexually Explicit Content", "ReportUserModal"),
                    canonical: "porn"
                }, {
                    localized: Object(r.d)("Nudity or Sexual Behavior/Attire", "ReportUserModal"),
                    canonical: "nudity"
                }, {
                    localized: Object(r.d)("Extreme Violence, Gore, or Other Obscene Content", "ReportUserModal"),
                    canonical: "gore"
                }, {
                    localized: Object(r.d)("Underaged User", "ReportUserModal"),
                    canonical: "underaged"
                }, {
                    localized: Object(r.d)("Cheating in Online Game", "ReportUserModal"),
                    canonical: "cheating"
                }, {
                    localized: Object(r.d)("Prohibited Game", "ReportUserModal"),
                    canonical: "prohibited"
                }, {
                    localized: Object(r.d)("Miscategorized Content or Other Category Violation", "ReportUserModal"),
                    canonical: "miscategorized"
                }, {
                    localized: Object(r.d)("Community Rules Violation", "ReportUserModal"),
                    canonical: "community_rules_violation"
                }, {
                    localized: Object(r.d)("Community is Violating Terms of Service", "ReportUserModal"),
                    canonical: "community_tos_violation"
                }, {
                    localized: Object(r.d)("Bits Acceptable Use Policy Violation", "ReportUserModal"),
                    canonical: "bits_violation"
                }, {
                    localized: Object(r.d)("Other Terms of Service Violation", "ReportUserModal"),
                    canonical: "other"
                }]
            };
        n.d(t, "a", function() {
            return a
        }), n.d(t, "b", function() {
            return i
        })
    },
    769: function(e, t, n) {
        "use strict";

        function i(e) {
            return Object(l.bindActionCreators)({
                closeModal: u.c
            }, e)
        }
        var a = n(770),
            r = n(0),
            s = n(1),
            o = n(8),
            l = n(10),
            c = n(121),
            u = n(49),
            d = n(5),
            p = n(3),
            m = (n(794), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleClose = function(e) {
                        t.props.closeModal(), t.props.onClose && t.props.onClose(e)
                    }, t
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    return s.createElement(p._17, {
                        className: "reporting-modal__container",
                        background: p.m.Base,
                        padding: {
                            x: 2,
                            y: 3
                        }
                    }, s.createElement(a.a, {
                        onClose: this.handleClose,
                        reportContext: this.props.reportContext,
                        title: this.props.title,
                        defaultDescription: this.props.defaultDescription
                    }), s.createElement(c.a, null))
                }, t
            }(s.Component)),
            h = Object(l.compose)(Object(d.c)("ReportUserModal"), Object(o.a)(null, i))(m);
        n.d(t, !1, function() {}), n.d(t, !1, function() {
            return a.a
        }), n.d(t, !1, function() {
            return m
        }), n.d(t, "a", function() {
            return h
        })
    },
    770: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                sessionUser: e.session.user
            }
        }
        n.d(t, "a", function() {
            return S
        });
        var a = n(0),
            r = n(1),
            s = (n.n(r), n(8)),
            o = n(10),
            l = n(2),
            c = n(7),
            u = n(22),
            d = n(13),
            p = n(5),
            m = n(762),
            h = n(759),
            g = n(768),
            f = n(762),
            b = n(789),
            v = (n.n(b), n(790)),
            k = (n.n(v), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        submitStatus: f.b.Unsubmitted
                    }, t.handleSubmit = function(e, n, i, r) {
                        return a.__awaiter(t, void 0, void 0, function() {
                            var t, s, t, o;
                            return a.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        if (e !== m.a) return [3, 5];
                                        t = {
                                            userID: this.props.reportContext.targetUserID,
                                            communityID: i || "",
                                            reason: n
                                        }, a.label = 1;
                                    case 1:
                                        return a.trys.push([1, 3, , 4]), [4, this.props.reportUserInCommunity(Object(u.a)(t))];
                                    case 2:
                                        return a.sent(), l.n.tracking.track(d.SpadeEventType.CommunityModeration, {
                                            community_id: i,
                                            name: r,
                                            is_official: !1,
                                            user_id: this.props.sessionUser && this.props.sessionUser.id,
                                            target_id: this.props.reportContext.targetUserID,
                                            action: "report",
                                            reason: e
                                        }), this.setState({
                                            submitStatus: f.b.Success
                                        }), [3, 4];
                                    case 3:
                                        return s = a.sent(), l.i.error(s, "ReportUserInCommunity Mutation failed."), this.setState({
                                            submitStatus: f.b.MutationError
                                        }), [3, 4];
                                    case 4:
                                        return [3, 9];
                                    case 5:
                                        t = {
                                            description: n,
                                            reason: e,
                                            content: this.props.reportContext.contentType,
                                            contentID: this.props.reportContext.contentID,
                                            extra: this.props.reportContext.extra,
                                            targetID: this.props.reportContext.targetUserID
                                        }, this.props.reportContext.contentType === h.a.Community && this.props.reportContext.extra && (t.description = Object(g.a)(this.props.reportContext.extra, n)), a.label = 6;
                                    case 6:
                                        return a.trys.push([6, 8, , 9]), [4, this.props.reportUser(Object(u.a)(t))];
                                    case 7:
                                        return a.sent(), this.props.reportContext.contentType === h.a.Community && l.n.tracking.track(d.SpadeEventType.CommunityReport, {
                                            community_id: this.props.reportContext.contentID,
                                            name: this.props.reportContext.extra,
                                            is_official: !1,
                                            user_id: this.props.sessionUser && this.props.sessionUser.id,
                                            reason: e
                                        }), this.setState({
                                            submitStatus: f.b.Success
                                        }), [3, 9];
                                    case 8:
                                        return o = a.sent(), l.i.error(o, "ReportUser Mutation failed."), this.setState({
                                            submitStatus: f.b.MutationError
                                        }), [3, 9];
                                    case 9:
                                        return [2]
                                }
                            })
                        })
                    }, t.handleChildError = function(e) {
                        return t.setState({
                            submitStatus: e
                        })
                    }, t.handleClose = function() {
                        t.props.onClose && t.props.onClose(t.state.submitStatus)
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillUnmount = function() {
                    this.handleClose()
                }, t.prototype.render = function() {
                    return r.createElement(f.c, {
                        onClose: this.handleClose,
                        onError: this.handleChildError,
                        onSubmit: this.handleSubmit,
                        reportContentType: this.props.reportContext.contentType,
                        submitStatus: this.state.submitStatus,
                        targetUserID: this.props.reportContext.targetUserID,
                        title: this.props.title,
                        defaultDescription: this.props.defaultDescription
                    })
                }, t
            }(r.Component)),
            S = Object(o.compose)(Object(c.a)(b, {
                name: "reportUserInCommunity"
            }), Object(c.a)(v, {
                name: "reportUser"
            }), Object(p.c)("ReportUser"), Object(s.a)(i, null))(k)
    },
    771: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                authToken: Object(o.a)(e)
            }
        }
        var a = n(0),
            r = n(1),
            s = n(8),
            o = n(18),
            l = n(5),
            c = n(772),
            u = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.reportInteractive = function() {
                        t.props.latencyTracking.reportInteractive()
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(c.b, {
                        authToken: this.props.authToken,
                        hostChannelID: this.props.hostChannelID,
                        hostChannelLogin: this.props.hostChannelLogin,
                        channelLogin: this.props.channelLogin,
                        updateContainerWidth: this.props.updateContainerWidth,
                        reportInteractive: this.reportInteractive
                    })
                }, t = a.__decorate([Object(l.c)("SubscribeButton")], t)
            }(r.Component),
            d = Object(s.a)(i)(u);
        n.d(t, !1, function() {
            return u
        }), n.d(t, "b", function() {
            return d
        }), n.d(t, !1, function() {}), n.d(t, "a", function() {
            return c.a
        }), n.d(t, !1, function() {
            return c.b
        })
    },
    772: function(e, t, n) {
        "use strict";

        function i(e) {
            var t = new Map;
            return t.set(P.b.Prime, null), e.forEach(function(e, n) {
                t.set(n + 1, e)
            }), t
        }
        var a, r = n(0),
            s = n(1),
            o = n(2),
            l = n(60),
            c = n(7),
            u = n(100),
            d = n(773),
            p = n(128),
            m = n(22),
            h = n(35),
            g = n(19),
            f = n(5),
            b = n(61),
            v = n(83),
            k = n(126),
            S = n(352),
            y = n(29),
            C = n(51),
            _ = n(123),
            E = n(797),
            N = n(246),
            w = n(3),
            T = (n(807), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        selectedUser: null
                    }, t.messages = {
                        noResults: Object(o.d)("No Results", "GiftRecipientSearchResult"),
                        buyGift: Object(o.d)("Buy Gift Subscription", "GiftRecipientSearchResult"),
                        searchHint: Object(o.d)("Start typing to see a list of suggestions here.", "GiftRecipientSearchResult")
                    }, t.reportGiftCheckoutAction = function() {
                        t.props.reportSubMenuAction({
                            action: N.a.BuyGiftSub,
                            checkoutButtonTier: t.props.selectedProductPrice,
                            giftRecipient: t.state.selectedUser ? t.state.selectedUser.login : null
                        })
                    }, t.onUserClick = function(e) {
                        for (var n = e.target; n.parentElement && !n.dataset.user_id;) n = n.parentElement;
                        n.dataset.user_id && n.dataset.user_login && n.dataset.user_name ? t.setState({
                            selectedUser: {
                                id: n.dataset.userId || "",
                                login: n.dataset.user_login || "",
                                name: n.dataset.user_name || ""
                            }
                        }) : t.setState({
                            selectedUser: null
                        })
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    (e.isWaiting || e.isErrored || !e.hasInput) && this.setState({
                        selectedUser: null
                    })
                }, t.prototype.render = function() {
                    var e;
                    return e = this.props.isWaiting ? s.createElement(w.U, {
                        fullHeight: !0
                    }, s.createElement(w.X, {
                        fillContent: !0
                    })) : this.props.hasInput ? this.props.isErrored ? this.getErrorMessage() : this.props.userResults && this.props.userResults.totalHits > 0 ? this.getUserResultContent() : this.getNoResultsMessage() : s.createElement(w.U, {
                        margin: 1
                    }, s.createElement(w._21, {
                        color: w.F.Alt2
                    }, this.messages.searchHint)), s.createElement("div", {
                        onKeyDown: this.props.onKeyDown
                    }, s.createElement(w._17, {
                        className: "gift-recipient-search-result-view",
                        background: w.m.Alt,
                        position: w._2.Relative,
                        overflow: w.Y.Hidden,
                        display: w.H.Block,
                        margin: {
                            bottom: 2
                        },
                        borderLeft: !0,
                        borderBottom: !0,
                        borderRight: !0
                    }, s.createElement(w.P, {
                        overflow: w.Y.Hidden,
                        position: w._2.Relative
                    }, s.createElement(y.b, {
                        suppressScrollX: !0
                    }, s.createElement(w.U, null, e, s.createElement(y.a, {
                        enabled: !this.props.isWaiting && this.props.hasInput,
                        loadMore: this.props.loadMore
                    }))))), this.getBuyGiftButton())
                }, t.prototype.getBuyGiftButton = function() {
                    var e = Object(_.a)(this.props.selectedProductURL, {
                            recipient: this.state.selectedUser ? this.state.selectedUser.login : ""
                        }),
                        t = s.createElement(E.a, {
                            subProductId: this.props.selectedProductId,
                            giftRecipient: this.state.selectedUser ? this.state.selectedUser.login : null,
                            onClick: this.reportGiftCheckoutAction,
                            checkoutURL: e
                        }),
                        n = null;
                    if (this.state.selectedUser) {
                        var i = Object(C.a)(this.state.selectedUser.login || "", this.state.selectedUser.name || "");
                        n = s.createElement(w.P, {
                            margin: {
                                x: 1
                            }
                        }, s.createElement(w._21, null, Object(o.d)("for {displayName}", {
                            displayName: s.createElement(w._21, {
                                bold: !0,
                                type: w._26.Span
                            }, i)
                        }, "GiftRecipientSearchResult")))
                    }
                    return s.createElement(w.U, {
                        display: w.H.Flex,
                        alignItems: w.c.Center,
                        fullWidth: !0
                    }, t, n)
                }, t.prototype.getErrorMessage = function() {
                    return s.createElement(w.U, {
                        fullWidth: !0,
                        textAlign: w._22.Center,
                        justifyContent: w.T.Center
                    }, s.createElement(w._21, null, Object(o.d)("Something went wrong", "GiftRecipientSearchResult")))
                }, t.prototype.getUserResultContent = function() {
                    var e = this;
                    return this.props.userResults ? this.props.userResults.results.map(function(t) {
                        var n = Object(C.a)(t.login || "", t.name || "");
                        return s.createElement(w.S, {
                            tabIndex: -1,
                            "data-ts_selectable": !0,
                            "data-tt_content": !0,
                            key: "git-recipient-result__" + t.id,
                            "data-user_id": t.id,
                            "data-user_login": t.login,
                            "data-user_name": t.name,
                            onClick: e.onUserClick,
                            "data-test-selector": "subscribe-button__gift_search_result"
                        }, s.createElement(w.U, {
                            padding: .5
                        }, s.createElement(w.A, {
                            row: !0
                        }, s.createElement(w.C, {
                            imageAlt: t.thumbnailAltText,
                            imageSrc: t.thumbnail ? t.thumbnail : "",
                            size: w.D.Size4,
                            aspect: w.k.Aspect1x1
                        }), s.createElement(w.B, null, s.createElement(w.P, {
                            padding: {
                                x: 1
                            }
                        }, s.createElement(w._21, {
                            type: w._26.H5,
                            ellipsis: !0
                        }, n))))))
                    }) : s.createElement(w._1, null)
                }, t.prototype.getNoResultsMessage = function() {
                    return s.createElement(w.U, {
                        margin: 1
                    }, s.createElement(w._21, {
                        color: w.F.Alt2
                    }, this.messages.noResults))
                }, t = r.__decorate([Object(f.c)("GiftRecipientSearchResultPanel")], t)
            }(s.Component)),
            D = T,
            I = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleChange = function(e) {
                        t.props.onChange(e.target.value)
                    }, t
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    return this.props.selectedSubProduct ? (this.formatMessages(), s.createElement(w.U, {
                        padding: 2
                    }, s.createElement(w.U, null, s.createElement(w.U, {
                        display: w.H.Flex,
                        justifyContent: w.T.Between,
                        alignItems: w.c.Center,
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(w._21, {
                        type: w._26.H4,
                        bold: !0
                    }, this.messages.giftSubscription), s.createElement(w.u, {
                        type: w.z.Text,
                        "data-a-target": "subscribe-back-button",
                        icon: w._9.AngleLeft,
                        onClick: this.props.onBack
                    }, s.createElement(w.U, {
                        alignItems: w.c.Center,
                        display: w.H.InlineFlex
                    }, s.createElement(w._21, null, this.messages.back)))), s.createElement(w.U, null, s.createElement(w._21, null, this.messages.giftSingleMonth), s.createElement(w.U, {
                        display: w.H.Flex,
                        justifyContent: w.T.Center,
                        fullWidth: !0
                    }, s.createElement(w.P, {
                        fullWidth: !0
                    }, s.createElement("div", null, s.createElement(w._11, {
                        onChange: this.handleChange,
                        onKeyDown: this.props.onKeyDown,
                        id: "gift-recipient-search",
                        placeholder: this.messages.searchPlaceholder
                    }), s.createElement(D, {
                        hasInput: this.props.hasInput,
                        userResults: this.props.userResults,
                        isErrored: this.props.isErrored,
                        isWaiting: this.props.isWaiting,
                        loadMore: this.props.loadMore,
                        onKeyDown: this.props.onKeyDown,
                        selectedProductId: this.props.selectedSubProduct.id,
                        selectedProductURL: this.props.selectedSubProduct.url,
                        selectedProductPrice: this.props.selectedSubProduct.price,
                        reportSubMenuAction: this.props.reportSubMenuAction
                    })))))))) : s.createElement(w._1, null)
                }, t.prototype.formatMessages = function() {
                    this.messages = {
                        giftSubscription: Object(o.d)("Choose a Gift Recipient", "GiftRecipientSearch"),
                        giftSingleMonth: Object(o.d)("{subDisplayName}: {giftPrice} Gift Subscription (Single Month)", {
                            subDisplayName: this.props.selectedSubProduct ? this.props.selectedSubProduct.displayName : "",
                            giftPrice: this.props.selectedSubProduct ? this.props.selectedSubProduct.price : ""
                        }, "GiftRecipientSearch"),
                        back: Object(o.d)("Back", "GiftRecipientSearch"),
                        searchPlaceholder: Object(o.d)("Search for a Twitch ID", "GiftRecipientSearch")
                    }
                }, t
            }(s.Component),
            U = 50,
            O = function(e) {
                function t() {
                    var t = e.call(this) || this;
                    return t.onChange = function(e) {
                        if (t.inputTimer && (clearTimeout(t.inputTimer), t.inputTimer = 0), !e) return void t.setState(t.getEmptyState());
                        t.setState({
                            isWaiting: !0
                        }), t.inputTimer = setTimeout(function() {
                            return t.doSearch(e)
                        }, U)
                    }, t.loadMore = function() {
                        return r.__awaiter(t, void 0, void 0, function() {
                            var e, t, n, i;
                            return r.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        if (this.state.queryID || !0 === this.state.exhaustedHits) return [2];
                                        e = this.state.currentPage + 1, a.label = 1;
                                    case 1:
                                        return a.trys.push([1, 3, , 4]), [4, this.searchClient.queryForType(v.a.Users, this.state.term, "", {
                                            page: e
                                        })];
                                    case 2:
                                        return t = a.sent(), [3, 4];
                                    case 3:
                                        return n = a.sent(), this.setState(r.__assign({}, this.getEmptyState(), {
                                            isErrored: !0,
                                            hasInput: !0
                                        })), [2];
                                    case 4:
                                        return t ? (i = Object(S.b)({
                                            searchResults: t,
                                            append: e > 0,
                                            currentUserResults: this.state.currentUserResults
                                        }), this.setState({
                                            currentUserResults: i.currentUserResults,
                                            term: this.state.term,
                                            hasInput: !0,
                                            isWaiting: !1,
                                            currentPage: e,
                                            exhaustedHits: i.exhaustedHits
                                        }), [2]) : (this.setState(r.__assign({}, this.getEmptyState(), {
                                            isErrored: !0,
                                            hasInput: !0
                                        })), [2])
                                }
                            })
                        })
                    }, t.onKeyDown = function(e) {
                        t.state.term && (e.keyCode === b.a.Esc ? t.setState({
                            hasInput: !1
                        }) : e.keyCode === b.a.Up ? t.focusNext(-1) : e.keyCode === b.a.Down && t.focusNext(1))
                    }, t.state = t.getEmptyState(), t.searchClient = new k.a(o.a.algoliaApplicationID, o.a.algoliaAPIKey), t
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    return s.createElement(I, {
                        onChange: this.onChange,
                        loadMore: this.loadMore,
                        onKeyDown: this.onKeyDown,
                        userResults: this.state.currentUserResults,
                        hasInput: this.state.hasInput,
                        isErrored: this.state.isErrored,
                        isWaiting: this.state.isWaiting,
                        onBack: this.props.onBack,
                        selectedSubProduct: this.props.selectedSubProduct,
                        reportSubMenuAction: this.props.reportSubMenuAction
                    })
                }, t.prototype.getEmptyState = function() {
                    return {
                        currentUserResults: {
                            totalHits: 0,
                            results: []
                        },
                        term: "",
                        hasInput: !1,
                        isErrored: !1,
                        queryID: "",
                        isWaiting: !1,
                        currentPage: -1,
                        focusSelectable: !1,
                        exhaustedHits: !1
                    }
                }, t.prototype.doSearch = function(e) {
                    return r.__awaiter(this, void 0, void 0, function() {
                        var t, n, i, a, s, o;
                        return r.__generator(this, function(l) {
                            switch (l.label) {
                                case 0:
                                    this.inputTimer = 0, t = -1, n = g.a(), i = "INPUT" === document.activeElement.tagName, this.setState({
                                        queryID: n,
                                        focusSelectable: !i && !!this.state.currentFocus
                                    }), l.label = 1;
                                case 1:
                                    return l.trys.push([1, 3, , 4]), t = 0, [4, this.searchClient.queryForType(v.a.Users, e, n)];
                                case 2:
                                    return a = l.sent(), [3, 4];
                                case 3:
                                    return s = l.sent(), this.setState(r.__assign({}, this.getEmptyState(), {
                                        isErrored: !0,
                                        hasInput: !0,
                                        term: e
                                    })), [2];
                                case 4:
                                    return a ? this.state.queryID !== a.id ? [2] : (o = Object(S.b)({
                                        searchResults: a,
                                        append: !1
                                    }), this.setState(function(n) {
                                        return r.__assign({}, n, o, {
                                            queryID: "",
                                            term: e,
                                            hasInput: !0,
                                            isWaiting: !1,
                                            currentPage: t
                                        })
                                    }), [2]) : (this.setState(r.__assign({}, this.getEmptyState(), {
                                        isErrored: !0,
                                        hasInput: !0,
                                        term: e
                                    })), [2])
                            }
                        })
                    })
                }, t.prototype.focusNext = function(e) {
                    var t, n = document.querySelectorAll("[data-ts_selectable=true]"),
                        i = document.activeElement,
                        a = Array.prototype.indexOf.call(n, i);
                    if (t = a < 0 ? e > 0 ? 0 : n.length - 1 : a + e, t < 0 && (t = 0), !(t >= n.length)) {
                        var r = n.item(t);
                        r.focus(), r.tabIndex = 0, this.state.currentFocus && (this.state.currentFocus.tabIndex = -1), this.setState({
                            currentFocus: r
                        })
                    }
                }, t = r.__decorate([Object(f.c)("GiftRecipientSearch")], t)
            }(s.Component),
            M = O,
            F = n(780),
            P = n(763),
            x = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.setMessages()
                }, t.prototype.render = function() {
                    return s.createElement(w.U, {
                        padding: 2
                    }, s.createElement(w.U, null, s.createElement(w.U, {
                        display: w.H.Flex,
                        justifyContent: w.T.Between,
                        alignItems: w.c.Center,
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(w._21, {
                        type: w._26.H4,
                        bold: !0
                    }, this.messages.allSubscriptions), s.createElement(w.u, {
                        type: w.z.Text,
                        "data-a-target": "subscribe-back-button",
                        "data-test-selector": "subscribe-button__back-button",
                        icon: w._9.AngleLeft,
                        onClick: this.props.onBack
                    }, s.createElement(w.U, {
                        alignItems: w.c.Center,
                        display: w.H.InlineFlex
                    }, s.createElement(w._21, null, this.messages.back)))), s.createElement(P.a, {
                        channelDisplayName: this.props.channelDisplayName,
                        onSelectTierTab: this.props.onSelectTierTab,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        subscriptionProducts: this.props.subscriptionProducts,
                        userHasPrime: !1,
                        canPrimeSubscribe: !1,
                        isSubscribed: this.props.isSubscribed
                    })))
                }, t.prototype.setMessages = function() {
                    this.messages = {
                        back: Object(o.d)("Back", "PaidSubOptions"),
                        allSubscriptions: Object(o.d)("All Paid Subscriptions", "PaidSubOptions")
                    }
                }, t
            }(s.Component),
            L = x,
            A = n(771),
            j = n(784);
        ! function(e) {
            e[e.Top = 0] = "Top", e[e.SubOptions = 1] = "SubOptions", e[e.GiftOptions = 2] = "GiftOptions", e[e.RecipientSelect = 3] = "RecipientSelect"
        }(a || (a = {}));
        var R = n(774),
            B = n(809),
            H = (n(810), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.handleTopPageSubButtonClick = function() {
                        n.props.reportSubMenuAction({
                            action: N.a.ClickCheckout,
                            checkoutButtonTier: n.messages.tier1Price
                        })
                    }, n.showGiftOptions = function() {
                        n.props.reportSubMenuAction({
                            action: N.a.ClickGiftSubOptions,
                            modalLevel: "second_page"
                        }), n.setState(function() {
                            return {
                                currentPage: a.GiftOptions
                            }
                        })
                    }, n.showSubOptions = function() {
                        n.props.reportSubMenuAction({
                            action: N.a.ClickMoreSubOptions,
                            modalLevel: "second_page"
                        }), n.setState(function() {
                            return {
                                currentPage: a.SubOptions
                            }
                        })
                    }, n.showRecipientSelect = function() {
                        n.setState(function() {
                            return {
                                currentPage: a.RecipientSelect
                            }
                        })
                    }, n.showTop = function() {
                        n.setState(function() {
                            return {
                                currentPage: a.Top
                            }
                        })
                    }, n.goToPreviousPage = function() {
                        return n.props.reportSubMenuAction({
                            action: N.a.ClickBack,
                            modalLevel: n.state.currentPage === a.SubOptions || n.state.currentPage === a.GiftOptions ? "top_page" : "second_page"
                        }), n.state.currentPage === a.SubOptions || n.state.currentPage === a.GiftOptions ? void n.showTop() : n.state.currentPage === a.RecipientSelect ? void n.showGiftOptions() : void 0
                    }, n.onSelectTierTab = function(e) {
                        var t = n.tabToSubProduct.get(e);
                        if (t) {
                            var i = n.props.subscriptionProducts.findIndex(function(e) {
                                return e.price === t.price
                            });
                            i !== n.state.selectedSubProductIndex && n.setState({
                                selectedSubProductIndex: i
                            }), n.props.onSelectTierTab(t.price)
                        } else n.props.onSelectTierTab(A.a)
                    }, n.state = {
                        currentPage: a.Top,
                        selectedSubProductIndex: 0,
                        giftingEnabled: !1
                    }, n.tabToSubProduct = i(t.subscriptionProducts), n
                }
                return r.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.getGiftingExperimentAssignment()
                }, t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (!this.isSubscriptionDiscountReady(e) && this.isDiscountDataReady(e)) {
                        if (e.data.error) return;
                        var t = Object.assign({}, e.data.user.subscriptionProducts);
                        this.props.setPromotionData(t)
                    }
                }, t.prototype.render = function() {
                    return this.setMessages(), this.state.currentPage === a.Top ? this.getTopPage() : this.state.currentPage === a.SubOptions ? this.getPaidOptionsPage() : this.state.currentPage === a.GiftOptions ? this.getGiftOptionsPage() : this.state.currentPage === a.RecipientSelect ? this.getGiftRecipientSearchPage() : this.getTopPage()
                }, t.prototype.getGiftingExperimentAssignment = function() {
                    return r.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return r.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, o.n.experiments.getAssignment("TWILIGHT_SUB_GIFTING")];
                                case 1:
                                    return e = t.sent(), this.setState({
                                        giftingEnabled: "yes" === e
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.getPaidOptionsPage = function() {
                    return s.createElement(L, {
                        onBack: this.goToPreviousPage,
                        channelDisplayName: this.props.channelDisplayName,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        subscriptionProducts: this.props.subscriptionProducts,
                        isSubscribed: !1,
                        hasDiscount: this.hasDiscount(this.props)
                    })
                }, t.prototype.getGiftOptionsPage = function() {
                    return s.createElement(w.U, {
                        padding: 2
                    }, s.createElement(F.a, {
                        onBack: this.goToPreviousPage,
                        channelDisplayName: this.props.channelDisplayName,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        subscriptionProducts: this.props.subscriptionProducts,
                        onGiftSelect: this.showRecipientSelect
                    }))
                }, t.prototype.getGiftRecipientSearchPage = function() {
                    return s.createElement(M, {
                        onBack: this.goToPreviousPage,
                        selectedSubProduct: this.props.subscriptionProducts[this.state.selectedSubProductIndex],
                        reportSubMenuAction: this.props.reportSubMenuAction
                    })
                }, t.prototype.getTopPage = function() {
                    var e = null,
                        t = null,
                        n = null,
                        i = s.createElement(w._21, null, this.messages.tier1PricePerMonth),
                        a = this.messages.tier1Price;
                    return this.hasDiscount(this.props) && (i = s.createElement(w.U, null, s.createElement(w._21, {
                        className: "tw-subscription-modal__old-price"
                    }, s.createElement("s", null, this.messages.tier1PricePerMonth)), s.createElement(w._21, {
                        className: "tw-subscription-modal__new-price",
                        type: w._26.H5,
                        bold: !0
                    }, this.messages.discountMessage, " ")), a = Object(R.a)(this.props.subscriptionProducts[0].self.newPrice)), (this.props.inPrimeRegion || this.props.userHasPrime) && (n = this.renderPrimeSection()), this.props.isNonStandardSub || (e = s.createElement(w.U, {
                        margin: {
                            right: 1
                        },
                        display: w.H.Inline
                    }, s.createElement(w.u, {
                        ariaLabel: this.messages.seeMoreSubOptions,
                        onClick: this.showSubOptions,
                        type: w.z.Hollow,
                        "data-test-selector": "subscribe-button__more-sub-options-button",
                        "data-a-target": "see-more-sub-options-button"
                    }, this.messages.seeMoreSubOptions))), this.state.giftingEnabled && (t = s.createElement(w.U, {
                        display: w.H.Inline
                    }, s.createElement(w.u, {
                        ariaLabel: this.messages.giftSubscription,
                        onClick: this.showGiftOptions,
                        type: w.z.Hollow,
                        "data-test-selector": "subscribe-button__gift"
                    }, this.messages.giftSubscription))), s.createElement(w.U, {
                        padding: 2
                    }, n, s.createElement(w.U, null, s.createElement(w._21, {
                        type: w._26.H4,
                        bold: !0
                    }, this.messages.paidSubscription), i, s.createElement(w.U, {
                        display: w.H.Flex
                    }, s.createElement(w.U, {
                        margin: {
                            right: 1,
                            top: 1
                        }
                    }, s.createElement(w.u, {
                        ariaLabel: this.messages.subscribeTier1,
                        "data-a-target": "tier1-subscribe-button",
                        "data-test-selector": "subscribe-button__top-page-sub-button",
                        linkTo: this.props.subscriptionProducts[0].url,
                        onClick: this.handleTopPageSubButtonClick,
                        purchase: a,
                        targetBlank: !0
                    }, this.messages.subscribe)))), s.createElement(w.U, {
                        margin: {
                            right: 1,
                            top: 2
                        }
                    }, e, t))
                }, t.prototype.renderPrimeSection = function() {
                    var e = this.props.userHasPrime ? this.messages.useFreeChannelSub : this.messages.primeUpsell;
                    return s.createElement(w.U, {
                        margin: {
                            bottom: 2
                        }
                    }, s.createElement(w.U, {
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(w._21, {
                        type: w._26.H4,
                        bold: !0
                    }, this.messages.freeSubWithPrime)), s.createElement(w.U, null, s.createElement(w.U, {
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(w._21, null, e)), s.createElement(j.a, {
                        authToken: this.props.authToken,
                        "data-a-target": "subscribe-with-prime-button",
                        isSubscribed: !1,
                        isSubscribedWithPrime: !1,
                        onSubscribedWithPrime: this.props.onSubscribedWithPrime,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        subLogin: this.props.subLogin,
                        userHasPrime: this.props.userHasPrime,
                        canPrimeSubscribe: this.props.canPrimeSubscribe
                    })))
                }, t.prototype.setMessages = function() {
                    var e = this.props.subscriptionProducts[0].price;
                    this.hasDiscount(this.props) && this.props.subscriptionProducts[0].self.isEligibleForDiscount && (e = Object(R.a)(this.props.subscriptionProducts[0].self.newPrice)), this.messages = {
                        useFreeChannelSub: Object(o.d)("Use your free channel subscription to directly support your favorite streamer. {upsellTextLink}", {
                            upsellTextLink: s.createElement("a", {
                                href: "https://help.twitch.tv/customer/en/portal/articles/2572060-twitch-prime-guide",
                                target: "_blank"
                            }, Object(o.d)("Learn more about your free sub", "BalloonNonSubbedUser"))
                        }, "BalloonNonSubbedUser"),
                        primeUpsell: Object(o.d)("{upsellTextBold}, plus get free game loot every month, ad-free viewing, and loads more with Twitch Prime.", {
                            upsellTextBold: s.createElement("strong", null, Object(o.d)("Support your favorite streamer", "BalloonNonSubbedUser"))
                        }, "BalloonNonSubbedUser"),
                        freeSubWithPrime: Object(o.d)("Free Channel Sub with Twitch Prime", "BalloonNonSubbedUser"),
                        changeSubscription: Object(o.d)("Change Your Subscription", "BalloonNonSubbedUser"),
                        seeMoreSubOptions: Object(o.d)("More Paid Subscription Options", "BalloonNonSubbedUser"),
                        tier1Price: Object(o.d)("{tier1Price}", {
                            tier1Price: e
                        }, "BalloonNonSubbedUser"),
                        paidSubscription: Object(o.d)("Paid Subscription", "BalloonNonSubbedUser"),
                        tier1PricePerMonth: Object(o.d)("{price} / Month", {
                            price: this.props.subscriptionProducts[0].price
                        }, "BalloonNonSubbedUser"),
                        subscribeTier1: Object(o.d)("Subscribe {tier1Price}", {
                            tier1Price: e
                        }, "BalloonNonSubbedUser"),
                        subscribeToUser: Object(o.d)("Subscribe to {username}", {
                            username: this.props.channelDisplayName
                        }, "BalloonNonSubbedUser"),
                        subscribe: Object(o.d)("Subscribe", "BalloonNonSubbedUser"),
                        back: Object(o.d)("Back", "BalloonNonSubbedUser"),
                        allSubscriptions: Object(o.d)("All Paid Subscriptions", "BalloonNonSubbedUser"),
                        chooseGiftSubscription: Object(o.d)("Choose A Gift Subscription", "BalloonNonSubbedUser"),
                        discountMessage: Object(o.d)("{price} for the first month (Save 50%)", {
                            price: e
                        }, "BalloonNonSubbedUser"),
                        giftSubscription: Object(o.d)("Gift a Subscription", "BalloonNonSubbedUser"),
                        giftDiscountDisclaimer: Object(o.d)("Promotions do not apply to Gift Subscriptions", "BalloonNonSubbedUser")
                    }
                }, t.prototype.isDiscountDataReady = function(e) {
                    return e.data.user && e.data.user.subscriptionProducts && e.data.user.subscriptionProducts.length > 0 && e.data.user.subscriptionProducts[0] && e.data.user.subscriptionProducts[0].self && void 0 !== e.data.user.subscriptionProducts[0].self.isEligibleForDiscount
                }, t.prototype.isSubscriptionDiscountReady = function(e) {
                    return void 0 !== e.subscriptionProducts[0].self
                }, t.prototype.hasDiscount = function(e) {
                    return !!this.isDiscountDataReady(e) && Object(R.b)(e.subscriptionProducts)
                }, t = r.__decorate([Object(c.a)(B, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(f.c)("BalloonNonSubbedUser")], t)
            }(s.Component)),
            V = H,
            W = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.showTop = function() {
                        n.setState(function() {
                            return {
                                currentPage: a.Top
                            }
                        })
                    }, n.showRecipientSelect = function() {
                        n.setState(function() {
                            return {
                                currentPage: a.RecipientSelect
                            }
                        })
                    }, n.showGiftOptions = function() {
                        n.props.reportSubMenuAction({
                            action: N.a.ClickGiftSubOptions
                        }), n.setState(function() {
                            return {
                                currentPage: a.GiftOptions
                            }
                        })
                    }, n.showSubOptions = function() {
                        n.setState(function() {
                            return {
                                currentPage: a.SubOptions
                            }
                        })
                    }, n.goToPreviousPage = function() {
                        return n.state.currentPage === a.GiftOptions || n.state.currentPage === a.SubOptions || n.state.giftShortcut ? (n.showTop(), void n.setState({
                            giftShortcut: !1
                        })) : n.state.currentPage === a.RecipientSelect ? void n.showGiftOptions() : void 0
                    }, n.onGiftSelect = function() {
                        n.props.reportSubMenuAction({
                            action: N.a.GiftASub,
                            checkoutButtonTier: n.props.subscriptionProducts[0].price
                        }), n.setState({
                            selectedSubProductIndex: 0,
                            giftShortcut: !0
                        }), n.showRecipientSelect()
                    }, n.handleTopPageSubButtonClick = function() {
                        n.props.reportSubMenuAction({
                            action: N.a.ClickCheckout,
                            checkoutButtonTier: n.props.subscriptionProducts[0].price
                        })
                    }, n.onSelectTierTab = function(e) {
                        var t = n.tabToSubProduct.get(e);
                        if (t) {
                            var i = n.props.subscriptionProducts.findIndex(function(e) {
                                return e.price === t.price
                            });
                            i !== n.state.selectedSubProductIndex && n.setState({
                                selectedSubProductIndex: i
                            }), n.props.onSelectTierTab(t.price)
                        } else n.props.onSelectTierTab(A.a)
                    }, n.state = {
                        currentPage: a.Top,
                        selectedSubProductIndex: 0,
                        giftShortcut: !1,
                        giftingEnabled: !1
                    }, n.tabToSubProduct = i(t.subscriptionProducts), n
                }
                return r.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.getGiftingExperimentAssignment()
                }, t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.setMessages(), this.state.currentPage === a.Top ? this.getTopPage() : this.state.currentPage === a.SubOptions ? this.getSubOptionsPage() : this.state.currentPage === a.GiftOptions ? this.getGiftOptionsPage() : this.state.currentPage === a.RecipientSelect ? this.getGiftRecipientSearchPage() : this.getTopPage()
                }, t.prototype.getGiftingExperimentAssignment = function() {
                    return r.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return r.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, o.n.experiments.getAssignment("TWILIGHT_SUB_GIFTING")];
                                case 1:
                                    return e = t.sent(), this.setState({
                                        giftingEnabled: "yes" === e
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.getGiftRecipientSearchPage = function() {
                    return s.createElement(M, {
                        onBack: this.goToPreviousPage,
                        selectedSubProduct: this.props.subscriptionProducts[this.state.selectedSubProductIndex],
                        reportSubMenuAction: this.props.reportSubMenuAction
                    })
                }, t.prototype.getGiftOptionsPage = function() {
                    return s.createElement(w.U, {
                        padding: 2
                    }, s.createElement(F.a, {
                        onBack: this.goToPreviousPage,
                        channelDisplayName: this.props.channelDisplayName,
                        subscriptionProducts: this.props.subscriptionProducts,
                        onGiftSelect: this.showRecipientSelect,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.props.reportSubMenuAction
                    }))
                }, t.prototype.getSubOptionsPage = function() {
                    return s.createElement(L, {
                        onBack: this.goToPreviousPage,
                        channelDisplayName: this.props.channelDisplayName,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        subscriptionProducts: this.props.subscriptionProducts,
                        hasDiscount: !1,
                        isSubscribed: !0
                    })
                }, t.prototype.getTopPageGiftSection = function() {
                    return s.createElement(w.U, null, s.createElement(w._21, {
                        type: w._26.H4,
                        bold: !0
                    }, this.messages.helpGrow), s.createElement(w.U, {
                        margin: {
                            top: 1,
                            bottom: 1
                        },
                        display: w.H.Flex
                    }, s.createElement(w.u, {
                        ariaLabel: this.messages.giftSubscription + " " + this.props.subscriptionProducts[0].price,
                        onClick: this.onGiftSelect,
                        purchase: this.props.subscriptionProducts[0].price
                    }, this.messages.giftSubscription), s.createElement(w.U, {
                        margin: {
                            left: 1
                        }
                    }, s.createElement(w.u, {
                        ariaLabel: this.messages.giftOptions,
                        onClick: this.showGiftOptions,
                        type: w.z.Hollow
                    }, this.messages.giftOptions))))
                }, t.prototype.getTopPageUpgradeSection = function() {
                    return s.createElement(w.U, null, s.createElement(w._21, {
                        type: w._26.H4,
                        bold: !0
                    }, this.messages.upgradeSubscription), s.createElement(P.a, {
                        authToken: this.props.authToken,
                        onSubscribedWithPrime: this.props.onSubscribedWithPrime,
                        subLogin: this.props.subLogin,
                        userHasPrime: this.props.userHasPrime,
                        canPrimeSubscribe: this.props.canPrimeSubscribe,
                        channelDisplayName: this.props.channelDisplayName,
                        onSelectTierTab: this.onSelectTierTab,
                        subbedTier: this.props.subbedTier,
                        subscriptionProducts: this.props.subscriptionProducts,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        onGiftSelect: this.showRecipientSelect,
                        isSubscribed: !0
                    }))
                }, t.prototype.getGiftInfoSection = function() {
                    var e, t, n = null;
                    return this.props.giftPaidUpgrade ? (e = this.messages.yourSubscription, t = this.messages.giftInfo, n = this.messages.giftUpgradeInfo) : (e = this.messages.yourGiftSub, t = this.messages.giftInfoWithExpiration), s.createElement(w.U, null, s.createElement(w._21, {
                        bold: !0,
                        type: w._26.H4
                    }, e), s.createElement(w.P, {
                        margin: {
                            y: 1
                        }
                    }, s.createElement(w._21, null, t)), n)
                }, t.prototype.getGiftExtendSection = function() {
                    var e = null,
                        t = null;
                    return this.props.isNonStandardSub || (e = s.createElement(w.U, {
                        margin: {
                            right: 1
                        },
                        display: w.H.Inline
                    }, s.createElement(w.u, {
                        ariaLabel: this.messages.seeMoreSubOptions,
                        onClick: this.showSubOptions,
                        type: w.z.Hollow,
                        "data-a-target": "see-more-sub-options-button"
                    }, this.messages.seeMoreSubOptions))), t = s.createElement(w.U, {
                        display: w.H.Inline
                    }, s.createElement(w.u, {
                        ariaLabel: this.messages.giftSubscription,
                        onClick: this.showGiftOptions,
                        type: w.z.Hollow
                    }, this.messages.giftSubscription)), s.createElement(w.U, null, s.createElement(w.U, {
                        margin: {
                            top: 1
                        }
                    }, s.createElement(w._21, {
                        type: w._26.H4,
                        bold: !0
                    }, this.messages.extendSubscription), s.createElement(w.P, {
                        margin: {
                            top: 1
                        }
                    }, s.createElement(w._21, null, this.messages.tier1PricePerMonth)), s.createElement(w.U, {
                        margin: {
                            right: 1,
                            top: 1
                        }
                    }, s.createElement(w.u, {
                        ariaLabel: this.props.subscriptionProducts[0].price,
                        "data-a-target": "tier1-subscribe-button",
                        linkTo: this.props.subscriptionProducts[0].url,
                        onClick: this.handleTopPageSubButtonClick,
                        purchase: this.props.subscriptionProducts[0].price,
                        targetBlank: !0
                    }, this.messages.subscribe))), s.createElement(w.U, {
                        margin: {
                            right: 1,
                            top: 2
                        }
                    }, e, t))
                }, t.prototype.getTopPage = function() {
                    return this.state.giftingEnabled ? this.props.userHasGiftSub ? this.props.userHasGiftSub && !this.props.giftPaidUpgrade ? s.createElement(w.U, {
                        className: "channel-header__subscription-modal-main",
                        padding: 2
                    }, s.createElement(w.U, {
                        margin: {
                            bottom: 2
                        }
                    }, this.getGiftInfoSection()), this.getGiftExtendSection()) : s.createElement(w.U, {
                        className: "channel-header__subscription-modal-main",
                        padding: 2
                    }, s.createElement(w.U, {
                        margin: {
                            bottom: 2
                        }
                    }, this.getGiftInfoSection()), this.getTopPageGiftSection()) : s.createElement(w.U, {
                        className: "channel-header__subscription-modal-main",
                        padding: 2
                    }, s.createElement(w.U, {
                        margin: {
                            bottom: 2
                        }
                    }, this.getTopPageGiftSection()), this.getTopPageUpgradeSection()) : s.createElement(w.U, {
                        className: "channel-header__subscription-modal-main",
                        padding: 2
                    }, this.getTopPageUpgradeSection())
                }, t.prototype.setMessages = function() {
                    switch (this.props.subbedTier) {
                        case d.a.Tier1:
                            this.props.subscriptionProducts[0].price;
                            break;
                        case d.a.Tier2:
                            this.props.subscriptionProducts[1].price;
                            break;
                        case d.a.Tier3:
                            this.props.subscriptionProducts[2].price;
                            break;
                        default:
                            this.props.subscriptionProducts[0].price
                    }
                    this.messages = {
                        upgradeSubscription: Object(o.d)("Upgrade Your Subscription", "BalloonSubbedUser"),
                        helpGrow: Object(o.d)("Help Grow {streamer}'s Community", {
                            streamer: this.props.channelDisplayName
                        }, "BalloonSubbedUser"),
                        giftSubscription: Object(o.d)("Gift A Subscription", "BalloonSubbedUser"),
                        giftOptions: Object(o.d)("More Gift Options", "BalloonSubbedUser"),
                        chooseGiftSubscription: Object(o.d)("Choose A Gift Subscription", "BalloonSubbedUser"),
                        back: Object(o.d)("Back", "BalloonSubbedUser"),
                        yourSubscription: Object(o.d)("Your Subscription", "BalloonSubbedUser"),
                        extendSubscription: Object(o.d)("Extend Your Subscription", "BalloonSubbedUser"),
                        yourGiftSub: Object(o.d)("Your Gift Subscription", "BalloonSubbedUser"),
                        seeMoreSubOptions: Object(o.d)("More Paid Subscription Options", "BalloonSubbedUser"),
                        subscribe: Object(o.d)("Subscribe", "BalloonSubbedUser"),
                        giftInfo: Object(o.d)("{giftPrice} Gift Subscription from {giftSender}", {
                            giftPrice: this.getCurrentSubPrice(),
                            giftSender: s.createElement(w._21, {
                                bold: !0,
                                type: w._26.Span
                            }, this.props.giftSender || "")
                        }, "BalloonSubbedUser"),
                        giftUpgradeInfo: Object(o.d)("Your new {upgradePrice} Paid Subscription will begin on {subStartDate}", {
                            upgradePrice: this.props.giftPaidUpgrade ? this.props.giftPaidUpgrade.price : "",
                            subStartDate: this.getFormattedGiftUpgradeStartDate()
                        }, "BalloonSubbedUser"),
                        giftInfoWithExpiration: Object(o.d)("{giftPrice} Subscription from {giftSender} - Benefits expire on {giftEndDate}", {
                            giftPrice: this.getCurrentSubPrice(),
                            giftSender: s.createElement(w._21, {
                                bold: !0,
                                type: w._26.Span
                            }, this.props.giftSender || ""),
                            giftEndDate: this.getFormattedGiftEndDate()
                        }, "BalloonSubbedUser"),
                        tier1PricePerMonth: Object(o.d)("{price} / Month", {
                            price: this.props.subscriptionProducts[0].price
                        }, "BalloonSubbedUser"),
                        allSubscriptions: Object(o.d)("All Paid Subscriptions", "BalloonSubbedUser")
                    }
                }, t.prototype.getFormattedGiftUpgradeStartDate = function() {
                    var e = "";
                    if (this.props.giftPaidUpgrade && this.props.giftPaidUpgrade.startsAt) try {
                        e = Object(o.c)(new Date(this.props.giftPaidUpgrade.startsAt), {
                            month: "long",
                            day: "numeric"
                        })
                    } catch (t) {
                        o.i.debug(t, "There was an error formatting gift upgrade start date."), e = ""
                    }
                    return e
                }, t.prototype.getFormattedGiftEndDate = function() {
                    var e = "";
                    if (this.props.giftSubEndDate) try {
                        e = Object(o.c)(new Date(this.props.giftSubEndDate), {
                            month: "long",
                            day: "numeric"
                        })
                    } catch (t) {
                        o.i.debug(t, "There was an error formatting gift end date."), e = ""
                    }
                    return e
                }, t.prototype.getCurrentSubPrice = function() {
                    switch (this.props.subbedTier) {
                        case "1000":
                            return this.props.subscriptionProducts[0].price;
                        case "2000":
                            return this.props.subscriptionProducts[1].price;
                        case "3000":
                            return this.props.subscriptionProducts[2].price;
                        default:
                            return this.props.subscriptionProducts[0].price
                    }
                }, t = r.__decorate([Object(f.c)("BalloonSubbedUser")], t)
            }(s.Component),
            G = W,
            q = (n(811), n(812));
        n.d(t, "a", function() {
            return z
        }), n.d(t, "b", function() {
            return J
        });
        var z = "prime",
            $ = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isSubscribed: !1,
                        activeTierPrice: z,
                        subbedTier: null,
                        subData: null,
                        inPrimeRegion: !1,
                        isNonStandardSub: !1,
                        isGiftSub: !1,
                        hasReconciledUser: !1,
                        subGiftingEnabled: !1
                    }, t.modalLevel = "top_page", t.reportSubMenuAction = function(e) {
                        Object(N.b)({
                            action: e.action || "",
                            channelLogin: t.props.channelLogin || "",
                            channelID: t.props.data && t.props.data.user.id,
                            checkoutButtonTier: e.checkoutButtonTier || t.state.activeTierPrice.slice(),
                            hasSubCredit: !!t.props.data.user.self && t.props.data.user.self.canPrimeSubscribe,
                            hostChannelID: t.props.hostChannelID,
                            hostChannelLogin: t.props.hostChannelLogin,
                            isMenuOpen: !(e.action === N.a.OpenSubMenu),
                            sub_location: "channel_page",
                            modal: !t.state.isSubscribed,
                            modalLevel: t.state.isSubscribed ? "" : t.modalLevel.slice(),
                            showPrimeContent: t.state.inPrimeRegion,
                            giftRecipient: e.giftRecipient || null
                        }), !e.modalLevel || e.action !== N.a.ClickMoreSubOptions && e.action !== N.a.ClickBack || (t.modalLevel = e.modalLevel, t.setState({
                            activeTierPrice: z
                        }))
                    }, t.handleMenuToggle = function(e) {
                        t.reportSubMenuAction({
                            action: e ? N.a.CloseSubMenu : N.a.OpenSubMenu
                        })
                    }, t.onSelectTierTab = function(e) {
                        t.state.activeTierPrice !== e && t.setState({
                            activeTierPrice: e
                        })
                    }, t.onSubscribedWithPrime = function() {
                        t.reportSubMenuAction({
                            action: N.a.SubWithPrime
                        }), t.modalLevel = "", t.setState({
                            isSubscribed: !0,
                            subbedTier: d.a.Prime
                        }), Object(m.d)(q, {
                            login: t.props.channelLogin
                        }, function(e) {
                            return e.user && e.user.self && (e.user.self.canPrimeSubscribe = !1, e.user.self.subscriptionBenefit = {
                                id: Object(g.a)(),
                                purchasedWithPrime: !0,
                                tier: z,
                                endsAt: null,
                                paidUpgrade: null,
                                gift: {
                                    isGift: !1,
                                    gifter: null,
                                    __typename: "SubscriptionGift"
                                },
                                __typename: "SubscriptionBenefit"
                            }), e
                        })
                    }, t.setMessages = function() {
                        var e;
                        e = t.state.subGiftingEnabled ? Object(o.d)("Gift A Sub", "SubscribeButton") : Object(o.d)("Subscribed", "SubscribeButton"), t.messages = {
                            subscribe: t.props.hostChannelID ? Object(o.d)("Subscribe to {username}", {
                                username: t.props.data.user.displayName
                            }, "SubscribeButton") : Object(o.d)("Subscribe", "SubscribeButton"),
                            subscribed: t.props.hostChannelID ? Object(o.d)("Subscribed to {username}", {
                                username: t.props.data.user.displayName
                            }, "SubscribeButton") : e,
                            discountMessage: Object(o.d)("Get 50% off the first month of any paid Subscription", "SubscribeButton")
                        }
                    }, t.setPromotionData = function(e) {
                        if (t.state) {
                            var n = Object.assign({}, t.state.subData);
                            if (null !== n) {
                                for (var i = [], a = 0; a < 3; a++) {
                                    var r = Object.assign({}, n.subscriptionProducts[a]);
                                    r.self = e[a].self, i.push(r)
                                }
                                n.subscriptionProducts = i, t.setState({
                                    subData: n
                                })
                            }
                        }
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.getGiftingExperimentAssignment()
                }, t.prototype.componentDidMount = function() {
                    this.props.reportInteractive && this.isUserDataReady(this.props) && this.props.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.props.channelLogin && !this.isUserDataReady(this.props) || !this.props.updateContainerWidth || this.props.updateContainerWidth(), this.props.reportInteractive && this.isUserDataReady(this.props) && this.props.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (this.isUserDataReady(e) && e.pubsub.messages.subscriptionInfo !== this.props.pubsub.messages.subscriptionInfo && this.props.data.refetch(), this.props.channelLogin !== e.channelLogin && this.setState({
                            subData: null,
                            isSubscribed: !1,
                            hasReconciledUser: !1
                        }), this.isUserDataReady(e) && this.hasSubscriptionProducts(e)) {
                        if (!this.state.inPrimeRegion && e.data.requestInfo && Object(p.b)(e.data.requestInfo.countryCode) && this.setState({
                                inPrimeRegion: !0
                            }), e.data.currentUser && this.isOwnChannel(e)) return void this.setState({
                            hasReconciledUser: !0
                        });
                        if (this.setState({
                                subData: e.data.user,
                                isNonStandardSub: 1 === e.data.user.subscriptionProducts.length
                            }), e.data.user.subscriptionProducts.some(this.isSubscriptionProductInvalid) && this.setState({
                                isNonStandardSub: !0
                            }), e.data.currentUser && e.data.user.self)
                            if (e.data.user.self.subscriptionBenefit) {
                                var t = e.data.user.self.subscriptionBenefit.purchasedWithPrime ? z : e.data.user.self.subscriptionBenefit.tier;
                                this.modalLevel = "";
                                var n = e.data.user.self.subscriptionBenefit.gift.isGift;
                                this.setState({
                                    isSubscribed: !0,
                                    subbedTier: t,
                                    hasReconciledUser: !0,
                                    isGiftSub: n
                                })
                            } else this.setState({
                                isSubscribed: !1,
                                hasReconciledUser: !0
                            });
                        else this.setState({
                            hasReconciledUser: !0
                        })
                    }
                }, t.prototype.render = function() {
                    if (!this.shouldRender() || !this.hasSubscriptionProducts(this.props)) return null;
                    if (this.setMessages(), this.props.data.currentUser && this.state.isSubscribed && this.state.isNonStandardSub) return s.createElement(w.u, {
                        disabled: !0,
                        ariaLabel: this.messages.subscribed,
                        icon: w._9.Star
                    }, this.messages.subscribed);
                    var e = this.state.subbedTier === d.a.Prime ? w._9.Crown : w._9.Star,
                        t = this.state.isSubscribed ? this.messages.subscribed : this.messages.subscribe,
                        n = this.state.isSubscribed ? "subscribed-button" : "subscribe-button",
                        i = s.createElement(w.u, {
                            "data-a-target": n,
                            "data-test-selector": "subscribe-button__dropdown",
                            ariaLabel: t,
                            type: this.state.isSubscribed ? w.z.Success : w.z.Default,
                            dropdown: !0,
                            icon: this.state.isSubscribed ? e : void 0
                        }, t),
                        a = this.props.hostChannelID ? w.q.TopLeft : w.q.BottomRight;
                    return s.createElement(l.a, {
                        onToggle: this.handleMenuToggle
                    }, i, s.createElement(w.p, {
                        size: w.r.Large,
                        direction: a,
                        "data-a-target": "sub-balloon"
                    }, this.renderBalloonContent()))
                }, t.prototype.renderBalloonContent = function() {
                    if (!this.state.subData) return o.i.debug("NOT rendering sub balloon; sub data not yet ready", {
                        state: this.state
                    }), null;
                    if (o.i.debug("rendering sub balloon", {
                            state: this.state
                        }), this.props.data.currentUser) {
                        if (this.state.isSubscribed) return s.createElement(G, {
                            authToken: this.props.authToken,
                            canPrimeSubscribe: !!this.props.data.user.self && this.props.data.user.self.canPrimeSubscribe,
                            channelDisplayName: this.state.subData.displayName,
                            onSelectTierTab: this.onSelectTierTab,
                            reportSubMenuAction: this.reportSubMenuAction,
                            subbedTier: this.state.subbedTier,
                            isNonStandardSub: this.state.isNonStandardSub,
                            subscriptionProducts: this.state.subData.subscriptionProducts,
                            onSubscribedWithPrime: this.onSubscribedWithPrime,
                            userHasPrime: this.props.data.currentUser.hasPrime,
                            userHasGiftSub: this.state.isGiftSub,
                            subLogin: this.state.subData.login,
                            giftSubEndDate: this.props.data.user.self && this.props.data.user.self.subscriptionBenefit ? this.props.data.user.self.subscriptionBenefit.endsAt : void 0,
                            giftPaidUpgrade: this.props.data.user.self && this.props.data.user.self.subscriptionBenefit && this.props.data.user.self.subscriptionBenefit.paidUpgrade ? this.props.data.user.self.subscriptionBenefit.paidUpgrade : void 0,
                            giftSender: this.getGiftSender()
                        });
                        var e = null;
                        return this.hasDiscount() && (e = s.createElement(w.U, {
                            className: "tw-subscription-modal__discount-bar"
                        }, s.createElement(w._21, null, this.messages.discountMessage))), s.createElement(w.U, null, e, s.createElement(V, {
                            authToken: this.props.authToken,
                            channelDisplayName: this.state.subData.displayName,
                            channelLogin: this.props.channelLogin,
                            canPrimeSubscribe: !!this.props.data.user.self && this.props.data.user.self.canPrimeSubscribe,
                            inPrimeRegion: this.state.inPrimeRegion,
                            isNonStandardSub: this.state.isNonStandardSub,
                            onSelectTierTab: this.onSelectTierTab,
                            onSubscribedWithPrime: this.onSubscribedWithPrime,
                            reportSubMenuAction: this.reportSubMenuAction,
                            subLogin: this.state.subData.login,
                            subscriptionProducts: this.state.subData.subscriptionProducts,
                            userHasPrime: this.props.data.currentUser.hasPrime,
                            setPromotionData: this.setPromotionData
                        }))
                    }
                    return s.createElement(V, {
                        authToken: this.props.authToken,
                        channelDisplayName: this.state.subData.displayName,
                        channelLogin: this.props.channelLogin,
                        canPrimeSubscribe: !!this.props.data.user.self && this.props.data.user.self.canPrimeSubscribe,
                        inPrimeRegion: this.state.inPrimeRegion,
                        isNonStandardSub: this.state.isNonStandardSub,
                        onSelectTierTab: this.onSelectTierTab,
                        onSubscribedWithPrime: this.onSubscribedWithPrime,
                        reportSubMenuAction: this.reportSubMenuAction,
                        subLogin: this.state.subData.login,
                        subscriptionProducts: this.state.subData.subscriptionProducts,
                        userHasPrime: !1,
                        setPromotionData: this.setPromotionData
                    })
                }, t.prototype.hasSubscriptionProducts = function(e) {
                    return e.data.user.subscriptionProducts && e.data.user.subscriptionProducts.length > 0
                }, t.prototype.shouldRender = function() {
                    return !!this.isUserDataReady(this.props) && (!this.hasSubscriptionProducts(this.props) || !!this.isSubscriptionReady())
                }, t.prototype.isUserDataReady = function(e) {
                    return e.data && e.data.user && !e.data.loading && !e.data.error
                }, t.prototype.isOwnChannel = function(e) {
                    return e.data.user.id === (e.data.currentUser && e.data.currentUser.id)
                }, t.prototype.isSubscriptionReady = function() {
                    return this.state.subData && this.state.hasReconciledUser
                }, t.prototype.getGiftSender = function() {
                    return this.state.isGiftSub && this.props.data.user.self && this.props.data.user.self.subscriptionBenefit && this.props.data.user.self.subscriptionBenefit.gift.isGift ? this.props.data.user.self.subscriptionBenefit.gift.gifter.displayName : null
                }, t.prototype.getGiftingExperimentAssignment = function() {
                    return r.__awaiter(this, void 0, void 0, function() {
                        var e, t;
                        return r.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    e = "no", n.label = 1;
                                case 1:
                                    return n.trys.push([1, 3, , 4]), [4, o.n.experiments.getAssignment("TWILIGHT_SUB_GIFTING")];
                                case 2:
                                    return e = n.sent(), [3, 4];
                                case 3:
                                    return t = n.sent(), e = "no", [3, 4];
                                case 4:
                                    return this.setState({
                                        subGiftingEnabled: "yes" === e
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.isSubscriptionProductInvalid = function(e) {
                    return !e.emoteSetID
                }, t.prototype.isSubscriptionDiscountReady = function(e) {
                    return !(!e || !e.subData) && void 0 !== e.subData.subscriptionProducts[0].self
                }, t.prototype.hasDiscount = function() {
                    var e = this.state;
                    return !!this.isSubscriptionDiscountReady(e) && (!(!e || !e.subData) && Object(R.b)(e.subData.subscriptionProducts))
                }, t = r.__decorate([Object(c.a)(q, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(u.a)([{
                    topic: function(e) {
                        return Object(h.n)(e.data.currentUser && e.data.currentUser.id || "")
                    },
                    mapMessageTypesToProps: {
                        "*": "subscriptionInfo"
                    },
                    skip: function(e) {
                        return !(e.data && !e.data.loading && !e.data.error && e.data.currentUser)
                    }
                }])], t)
            }(s.Component),
            J = $
    },
    773: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = {
            Prime: "prime",
            Tier1: "1000",
            Tier2: "2000",
            Tier3: "3000"
        }
    },
    774: function(e, t, n) {
        "use strict";

        function i(e) {
            return "$" + (e / 100).toFixed(2).toString()
        }

        function a(e) {
            if (e[0].self && e[1].self && e[2].self) {
                if (e[0].self.isEligibleForDiscount) return !0;
                if (e[1].self.isEligibleForDiscount) return !0;
                if (e[2].self.isEligibleForDiscount) return !0
            }
            return !1
        }
        t.a = i, t.b = a
    },
    775: function(e, t, n) {
        "use strict";

        function i() {
            return {
                type: r
            }
        }

        function a(e, t, n) {
            return {
                type: s,
                viewerCardOptions: {
                    targetLogin: e,
                    sourceType: t,
                    sourceID: n
                }
            }
        }
        n.d(t, "a", function() {
            return r
        }), n.d(t, "b", function() {
            return s
        }), t.c = i, t.d = a;
        var r = "viewer-card.VIEWER_CARD_HIDDEN",
            s = "viewer-card.VIEWER_CARD_SHOWN"
    },
    776: function(e, t, n) {
        "use strict";

        function i(e) {
            return "/ignore " + e
        }

        function a(e) {
            return "/unignore " + e
        }

        function r(e) {
            return "/mod " + e
        }

        function s(e) {
            return "/unmod " + e
        }

        function o(e) {
            return /^[\/]/.test(e)
        }

        function l() {
            return "/clear"
        }

        function c() {
            return "/followersoff"
        }

        function u() {
            return "/slowoff"
        }

        function d(e) {
            return "/followers " + e
        }

        function p() {
            return "/slow"
        }

        function m(e) {
            return "/color " + e
        }

        function h(e) {
            var t = /^\/w(?:$|\s+)(\S+)?\s*(.+)?/i,
                n = e.trim().match(t);
            return n ? {
                recipientLogin: n[1] || null,
                body: n[2] || null
            } : null
        }
        n.d(t, "a", function() {
            return g
        }), t.h = i, t.j = a, t.i = r, t.k = s, t.l = o, t.c = l, t.d = c, t.e = u, t.f = d, t.g = p, t.b = m, t.m = h;
        var g = "/unraid"
    },
    777: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e.Admin = "admin", e.GlobalMod = "global_mod", e.Moderator = "mod", e.Owner = "owner", e.Staff = "staff", e.Subscriber = "subscriber", e.User = ""
        }(i || (i = {}))
    },
    778: function(e, t, n) {
        "use strict";

        function i() {
            return O.createElement("span", {
                key: "thankyou"
            }, Object(M.d)("Thank you for your feedback!", "ChatLine"))
        }

        function a(e, t, n, i, a) {
            var r = [],
                o = "";
            i && (o = o.concat(" "));
            var l = e.content.split(/\s+/);
            return l.forEach(function(e, i) {
                if ("" !== e) {
                    var a = i < l.length - 1 ? e + " " : e;
                    (t || n) && s(e, t, n) ? (r = r.concat(o), r = r.concat(O.createElement(V.U, {
                        className: "chat-line__message--mention-recipient",
                        display: V.H.InlineFlex,
                        key: "" + e + i,
                        "data-a-target": "chat-message-mention"
                    }, a)), o = "") : o = o.concat(a)
                }
            }), r = r.concat(o), O.createElement("span", {
                key: "chat-line__message-text-" + a,
                "data-a-target": "chat-message-text"
            }, r)
        }

        function r(e, t, n) {
            return e.reduce(function(i, r, s) {
                switch (r.type) {
                    case Y.a.Text:
                        var c = s > 0;
                        return i.concat(a(r, t, n, c, s));
                    case Y.a.Mention:
                        var u = "";
                        return o(r) && t && r.content.sender.toLowerCase() === t.toLowerCase() ? u = "chat-line__message--mention-sender" : l(r) && t && r.content.recipient.toLowerCase() === t.toLowerCase() && (u = "chat-line__message--mention-recipient"), i.concat(O.createElement(V.U, {
                            className: u,
                            display: V.H.InlineFlex,
                            key: s,
                            "data-a-target": "chat-message-mention"
                        }, "@" + r.content.recipient));
                    case Y.a.Link:
                        return i.concat(O.createElement("a", {
                            key: s,
                            className: "chat-line__message--link",
                            href: r.content.url,
                            target: "_blank",
                            rel: "noreferrer noopener"
                        }, r.content.displayText));
                    case Y.a.Emote:
                        return i = i.concat(O.createElement(A.a, {
                            key: s,
                            emote: r.content
                        })), e.length > s + 1 && e[s + 1].type === Y.a.Emote && i.push(" "), i;
                    case Y.a.ClipLink:
                        return i.concat(O.createElement(K, {
                            key: s,
                            slug: r.content.slug
                        }));
                    default:
                        return i.concat(O.createElement("span", {
                            key: s
                        }))
                }
            }, [])
        }

        function s(e, t, n) {
            var i = e.trim().toLowerCase();
            return t && i === t.toLowerCase() || n && i === n.toLowerCase()
        }

        function o(e) {
            return e.content && e.content.sender
        }

        function l(e) {
            return e.content && e.content.recipient
        }

        function c(e) {
            if (e.type === Q.a.Ban) return e.reason ? O.createElement("span", {
                className: "chat-line__moderation--ban-with-reason"
            }, Object(M.d)("{userLogin} has been banned. Reason: {reason}", {
                userLogin: e.userLogin,
                reason: e.reason
            }, "ChatLine")) : O.createElement("span", {
                className: "chat-line__moderation--ban"
            }, Object(M.d)("{userLogin}  is now banned from this room.", {
                userLogin: e.userLogin
            }, "ChatLine"));
            if (e.reason && e.duration) {
                var t = Object(M.d)("{userLogin} has been timed out for {duration} seconds. Reason: {reason}", {
                    duration: e.duration,
                    reason: e.reason,
                    userLogin: e.userLogin
                }, "ChatLine");
                return O.createElement("span", {
                    className: "chat-line__moderation--timeout-with-reason"
                }, t)
            }
            return e.duration ? O.createElement("span", {
                className: "chat-line__moderation--timeout"
            }, Object(M.d)("{userLogin} has been timed out for {duration} seconds.", {
                userLogin: e.userLogin,
                duration: e.duration
            }, "ChatLine")) : void 0
        }

        function u(e) {
            var t = Object(P.a)("https://twitch.amazon.com/prime", {
                ref: "subscriptionMessage",
                channel: e
            });
            return O.createElement("a", {
                className: "chat-line__subscribe--prime",
                href: t,
                target: "_blank",
                rel: "noopener"
            }, Object(M.d)("Twitch Prime", "ChatLine"))
        }

        function d(e, t) {
            return Object(M.d)("{userLogin} just subscribed with {service}!", {
                userLogin: e,
                service: t
            }, "ChatLine")
        }

        function p(e, t) {
            return Object(M.d)("{userLogin} just subscribed with a {subTier} sub!", {
                userLogin: e,
                subTier: t
            }, "ChatLine")
        }

        function m(e, t) {
            return Object(M.d)("{userLogin} gifted a subscription to {recipient}!", {
                userLogin: e,
                recipient: t
            }, "ChatLine")
        }

        function h(e, t, n) {
            return Object(M.d)("{userLogin} gifted a {subTier} sub to {recipient}!", {
                userLogin: e,
                subTier: t,
                recipient: n
            }, "ChatLine")
        }

        function g(e) {
            return e.isPrime ? O.createElement("span", null, d(e.userLogin, u(e.channel))) : O.createElement("span", null, p(e.userLogin, e.tier))
        }

        function f(e) {
            return "custom" === e.tier ? O.createElement("span", null, m(e.userLogin, e.recipient)) : O.createElement("span", null, h(e.userLogin, e.tier, e.recipient))
        }

        function b(e, t, n, i, a) {
            if (e.user) {
                var s = null;
                e.badges && (s = O.createElement(x.b, {
                    badgeSets: a,
                    badgesToRender: e.badges
                }));
                var o = e.isPrime ? d(e.user.userDisplayName, u(e.channel)) : p(e.user.userDisplayName, e.tier),
                    l = [O.createElement("span", {
                        key: "chat--resubbed"
                    }, o, O.createElement("span", {
                        key: "sub-separator"
                    }, " "), Object(M.d)("{userLogin} subscribed for {months} months in a row!", {
                        userLogin: e.user.userDisplayName,
                        months: e.months
                    }, "ChatLine"))];
                if (e.messageParts && e.user && !e.deleted) {
                    var c = null;
                    t && e.timestamp && (c = w(e.timestamp)), l.push(O.createElement("div", {
                        key: "resub-message",
                        className: "chat-line__subscribe--message"
                    }, c, s, O.createElement(L.a, {
                        userData: e.user
                    }), O.createElement("span", {
                        key: "separator"
                    }, " : "), r(e.messageParts, n, i)))
                }
                return l
            }
            return null
        }

        function v(e) {
            var t = e.enabled ? Object(M.d)("This room is now in slow mode. You may send messages every {length} seconds.", {
                length: e.length
            }, "ChatLine") : Object(M.d)("This room is no longer in slow mode.", "ChatLine");
            return O.createElement("span", null, t)
        }

        function k(e) {
            return O.createElement("span", null, e.message)
        }

        function S(e) {
            return O.createElement("span", null, e.message)
        }

        function y(e) {
            var t;
            if (e.length > 0) {
                var n = e.join(", ");
                t = Object(M.d)("The moderators of this room are: {moderatorList}", {
                    moderatorList: n
                }, "ChatLine")
            } else t = Object(M.d)("There are no moderators of this room.", "ChatLine");
            return O.createElement("span", null, t)
        }

        function C(e) {
            if (e.enabled) {
                var t = 0 === e.length ? Object(M.d)("This room is in followers-only mode.", "ChatLine") : Object(M.d)("This room is now in {length} followers-only mode.", {
                    length: Object(F.a)(60 * e.length)
                }, "ChatLine");
                return O.createElement("span", null, t)
            }
            return O.createElement("span", null, Object(M.d)("This room is no longer in followers-only mode.", "ChatLine"))
        }

        function _(e) {
            var t = e.enabled ? Object(M.d)("This room is now in subscriber-only mode.", "ChatLine") : Object(M.d)("This room is no longer in subscriber-only mode.", "ChatLine");
            return O.createElement("span", null, t)
        }

        function E() {
            return O.createElement("span", null, Object(M.d)("Chat was cleared by a moderator", "ChatLine"))
        }

        function N(e) {
            var t = e.getHours() % 12;
            0 === t && (t = 12);
            var n = e.getMinutes(),
                i = n.toString();
            return n < 10 && (i = "0" + i), t + ":" + i
        }

        function w(e) {
            return O.createElement("span", {
                key: "timestamp",
                className: "chat-line__timestamp",
                "data-a-target": "chat-timestamp",
                "data-test-selector": "chat-timestamp"
            }, N(new Date(e)))
        }

        function T(e) {
            return O.createElement("span", {
                key: "timestamp",
                className: "chat-line__timestamp",
                "data-a-target": "chat-timestamp",
                "data-test-selector": "chat-timestamp"
            }, U(new Date(e), {
                hour: "numeric",
                minute: "numeric"
            }))
        }

        function D() {
            return O.createElement("span", null, Object(M.d)("The raid has been cancelled.", "RaidCancelMessage"))
        }

        function I(e, t, n) {
            return 0 === n ? Object(M.d)("<x:bold>{userName}</x:bold> bought <x:bold>{gameTitle}!</x:bold>", {
                userName: e,
                gameTitle: t,
                "x:bold": function(e) {
                    return O.createElement("strong", null, e)
                }
            }, "PurchaseNoticeSystemMessage") : Object(M.d)("{numCrates, plural, one {<x:bold>{userName}</x:bold> bought <x:bold>{gameTitle}</x:bold> and opened a <x:bold>Twitch Crate!</x:bold>} other {<x:bold>{userName}</x:bold> bought <x:bold>{gameTitle}</x:bold> and opened # <x:bold>Twitch Crates!</x:bold>}}", {
                numCrates: n,
                userName: e,
                gameTitle: t,
                "x:bold": function(e) {
                    return O.createElement("strong", null, e)
                }
            }, "PurchaseNoticeSystemMessage")
        }

        function U(e, t) {
            void 0 === t && (t = {});
            var n = M.n.intl.getLanguageCode() || "en";
            return Intl.DateTimeFormat(n, t).format(e)
        }
        var O = n(1),
            M = n(2),
            F = n(846),
            P = n(123),
            x = n(781),
            L = n(785),
            A = n(847),
            j = n(0),
            R = n(11),
            B = n(7),
            H = n(848),
            V = n(3),
            W = n(824),
            G = (n(859), "https://static-cdn.jtvnw.net/emoticons/v1/58765/2.0"),
            q = {
                ERROR: "clips-chat-card-error"
            },
            z = {
                isTimedOut: !1
            },
            $ = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = z, t.timeoutID = null, t.renderLoadingCard = function() {
                        return O.createElement(V._17, {
                            elevation: 1,
                            margin: {
                                top: .5
                            }
                        }, O.createElement(V.P, {
                            display: V.H.Flex,
                            flexWrap: V.K.NoWrap,
                            padding: .5
                        }, O.createElement(V.U, {
                            className: "clips-chat-card"
                        }, O.createElement(V.U, {
                            className: "clips-chat-card__thumb",
                            display: V.H.Flex,
                            alignItems: V.c.Center,
                            justifyContent: V.T.Center
                        }, O.createElement(V.X, null)), O.createElement(V.U, {
                            display: V.H.Flex,
                            alignItems: V.c.Center
                        }, O.createElement(V.U, {
                            margin: {
                                left: 1
                            },
                            fullWidth: !0
                        }, O.createElement(V.U, {
                            ellipsis: !0
                        }, O.createElement(V._21, {
                            type: V._26.Span,
                            fontSize: V.L.Size5
                        }, Object(M.d)("Loading Clipperino...", "ClipsChatCard"))))))))
                    }, t.renderErrorCard = function() {
                        return O.createElement(V._17, {
                            elevation: 1,
                            margin: {
                                top: .5
                            }
                        }, O.createElement(V.P, {
                            display: V.H.Flex,
                            flexWrap: V.K.NoWrap,
                            padding: .5
                        }, O.createElement(V.U, {
                            className: "clips-chat-card"
                        }, O.createElement(V.U, {
                            className: "clips-chat-card__thumb",
                            display: V.H.Flex,
                            alignItems: V.c.Center,
                            justifyContent: V.T.Center
                        }, O.createElement("img", {
                            "data-test-selector": q.ERROR,
                            src: G,
                            className: "clips-chat-card__error-img"
                        })), O.createElement(V.U, {
                            display: V.H.Flex,
                            alignItems: V.c.Center
                        }, O.createElement(V.U, {
                            margin: {
                                left: 1
                            },
                            fullWidth: !0
                        }, O.createElement(V.U, {
                            ellipsis: !0
                        }, O.createElement(V._21, {
                            type: V._26.Span,
                            fontSize: V.L.Size5
                        }, Object(M.d)("Something went wrong", "ClipsChatCard"))), O.createElement(V.U, {
                            ellipsis: !0
                        }, O.createElement(V._21, {
                            type: V._26.Span,
                            fontSize: V.L.Size6,
                            color: V.F.Alt2
                        }, Object(M.d)("We couldn't find that Clip", "ClipsChatCard"))))))))
                    }, t
                }
                return j.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    this.props.data.clip || (this.timeoutID = setTimeout(function() {
                        e.setState({
                            isTimedOut: !0
                        })
                    }, 5e3))
                }, t.prototype.componentWillReceiveProps = function(e) {
                    !this.props.data.clip && e.data.clip && (this.timeoutID && (clearTimeout(this.timeoutID), this.timeoutID = null), this.setState({
                        isTimedOut: !1
                    }))
                }, t.prototype.render = function() {
                    var e = this.props.data,
                        t = e.clip,
                        n = e.error,
                        i = e.loading,
                        a = t && t.url ? Object(P.a)(t.url, {
                            tt_medium: "twitch_chat",
                            tt_content: "chat_card"
                        }) : "";
                    return n || this.state.isTimedOut ? this.renderErrorCard() : i || !t ? this.renderLoadingCard() : O.createElement(V._17, {
                        elevation: 1,
                        margin: {
                            top: .5
                        }
                    }, O.createElement(V.P, {
                        display: V.H.Flex,
                        flexWrap: V.K.NoWrap,
                        padding: .5
                    }, O.createElement(R.a, {
                        to: a,
                        target: "_blank",
                        className: "clips-chat-card"
                    }, O.createElement(V.U, {
                        className: "clips-chat-card__thumb",
                        display: V.H.Flex,
                        alignItems: V.c.Center,
                        justifyContent: V.T.Center
                    }, O.createElement(V.U, {
                        fullWidth: !0
                    }, O.createElement(V.j, {
                        ratio: V.k.Aspect16x9
                    }, O.createElement(H.a, {
                        imageURL: t.thumbnailURL
                    })))), O.createElement(V.U, {
                        display: V.H.Flex,
                        alignItems: V.c.Center
                    }, O.createElement(V.U, {
                        margin: {
                            left: 1
                        },
                        fullWidth: !0
                    }, O.createElement(V.U, {
                        className: "clips-chat-card__title",
                        ellipsis: !0
                    }, O.createElement(V._21, {
                        type: V._26.Span,
                        fontSize: V.L.Size5
                    }, t.title ? t.title : Object(M.d)("Clip of {broadcaster}", {
                        broadcaster: t.broadcaster.displayName
                    }, "ClipsChatCard"))), O.createElement(V.U, {
                        ellipsis: !0
                    }, O.createElement(V._21, {
                        type: V._26.Span,
                        fontSize: V.L.Size6,
                        color: V.F.Alt2
                    }, Object(M.d)("Clipped by {curator}", {
                        curator: t.curator.displayName
                    }, "ClipsChatCard"))))))))
                }, t
            }(O.Component),
            J = function(e) {
                return {
                    variables: {
                        slug: e.slug
                    },
                    notifyOnNetworkStatusChange: !0,
                    fetchPolicy: "cache-only"
                }
            },
            K = Object(B.a)(W, {
                options: J
            })($),
            Q = n(754),
            Y = n(248);
        t.b = i, t.e = r, t.f = c, t.n = g, t.m = f, t.i = b, t.k = v, t.g = k, t.d = S, t.j = y, t.c = C, t.l = _, t.a = E, t.o = w, t.p = T, t.q = D, t.h = I
    },
    779: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "badge"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "Badge"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "setID"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "version"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "title"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "image1x"
                        },
                        name: {
                            kind: "Name",
                            value: "imageURL"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "size"
                            },
                            value: {
                                kind: "EnumValue",
                                value: "NORMAL"
                            }
                        }],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "image2x"
                        },
                        name: {
                            kind: "Name",
                            value: "imageURL"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "size"
                            },
                            value: {
                                kind: "EnumValue",
                                value: "DOUBLE"
                            }
                        }],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "image4x"
                        },
                        name: {
                            kind: "Name",
                            value: "imageURL"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "size"
                            },
                            value: {
                                kind: "EnumValue",
                                value: "QUADRUPLE"
                            }
                        }],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "clickAction"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "clickURL"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 189
            }
        };
        n.loc.source = {
            body: "fragment badge on Badge {\n  id\n  setID\n  version\n  title\n  image1x: imageURL(size: NORMAL)\n  image2x: imageURL(size: DOUBLE)\n  image4x: imageURL(size: QUADRUPLE)\n  clickAction\n  clickURL\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    780: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(1),
            r = n(2),
            s = n(763),
            o = n(3),
            l = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onGiftSelect = function() {
                        t.props.onGiftSelect && t.props.onGiftSelect()
                    }, t.onSelectTierTab = function(e) {
                        t.props.onSelectTierTab && t.props.onSelectTierTab(e)
                    }, t.reportSubMenuAction = function(e) {
                        t.props.reportSubMenuAction && t.props.reportSubMenuAction(e)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(o.U, null, a.createElement(o.U, {
                        display: o.H.Flex,
                        justifyContent: o.T.Between,
                        alignItems: o.c.Center,
                        fullWidth: !0
                    }, a.createElement(o._21, {
                        bold: !0,
                        type: o._26.H5
                    }, Object(r.d)("Choose A Gift Subscription", "GiftTierTabs")), a.createElement(o.u, {
                        type: o.z.Text,
                        icon: o._9.AngleLeft,
                        onClick: this.props.onBack,
                        "data-test-selector": "sub-gift-select-back-button"
                    }, a.createElement(o.U, {
                        alignItems: o.c.Center,
                        display: o.H.InlineFlex
                    }, a.createElement(o._21, null, Object(r.d)("Back", "GiftTierTabs"))))), a.createElement(s.a, {
                        isGift: !0,
                        giftRecipient: this.props.giftRecipient,
                        onGiftSelect: this.onGiftSelect,
                        channelDisplayName: this.props.channelDisplayName,
                        subscriptionProducts: this.props.subscriptionProducts,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.reportSubMenuAction,
                        userHasPrime: !1,
                        canPrimeSubscribe: !1,
                        isSubscribed: !1
                    }))
                }, t
            }(a.Component),
            c = l;
        n.d(t, !1, function() {
            return "sub-gift-select-back-button"
        }), n.d(t, "a", function() {
            return c
        })
    },
    781: function(e, t, n) {
        "use strict";
        var i = n(823),
            a = n(814),
            r = n(792),
            s = (n(857), n(0)),
            o = function() {
                function e(e, t, n) {
                    this.globalsBySet = new Map, this.channelsBySet = new Map, this.indexBadges(e, this.globalsBySet, n), Array.isArray(t) && this.indexBadges(t, this.channelsBySet, n)
                }
                return e.prototype.getBadge = function(e, t) {
                    var n = this.channelsBySet.get(e);
                    return n && n.has(t) ? n.get(t) || null : (n = this.globalsBySet.get(e), void 0 !== n ? n.get(t) || null : null)
                }, e.prototype.indexBadges = function(e, t, n) {
                    e.forEach(function(e) {
                        n && e.clickAction === r.b && (e = s.__assign({}, e, {
                            channelName: n
                        }));
                        var i = t.get(e.setID);
                        i || (i = new Map, t.set(e.setID, i)), i.set(e.version, e)
                    })
                }, e
            }();
        new o([], [], "");
        n.d(t, "b", function() {
            return i.a
        }), n.d(t, "a", function() {
            return a.a
        }), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "c", function() {
            return o
        })
    },
    782: function(e, t, n) {
        "use strict";

        function i(e) {
            var t, n = Object(r.d)("{bitsAmount} Bits", {
                bitsAmount: e.count.toString()
            }, "Bits--BitsCount");
            if (e.withImage) {
                var i = e.bitsConfig.indexedActions[o.e];
                i || (i = Object(c.b)());
                var d = i.orderedTiers.find(function(t) {
                    return t.bits <= e.count
                });
                if (d) {
                    var p = Object(l.b)(d);
                    return void 0 !== e.themeOverride && (e.themeOverride === s.a.Light ? p.dark = p.light : p.light = p.dark), t = a.createElement(u.a, {
                        className: "bits-count--img",
                        sources: p
                    }), a.createElement("strong", {
                        className: "bits-count",
                        "data-a-target": "bits-count"
                    }, a.createElement("span", null, t, " ", e.withText ? n : ""))
                }
            }
            return a.createElement("strong", {
                className: "bits-count",
                "data-a-target": "bits-count"
            }, a.createElement("span", null, n))
        }
        var a = n(1),
            r = n(2),
            s = n(36),
            o = n(245),
            l = n(347),
            c = n(350),
            u = n(348);
        n(844);
        n.d(t, "a", function() {
            return i
        })
    },
    783: function(e, t, n) {
        "use strict";

        function i(e, t) {
            if (!e) return void a.i.warn("[onPopupClose] Attempted to observe a window that failed to open.");
            var n = setInterval(function() {
                var i = !1,
                    a = !1;
                try {
                    i = e.closed, a = !!e.success
                } catch (e) {}
                if (i || a) {
                    t(a);
                    try {
                        e.close()
                    } catch (e) {}
                    clearInterval(n)
                }
            }, 500)
        }
        t.a = i;
        var a = n(2)
    },
    784: function(e, t, n) {
        "use strict";

        function i(e, t) {
            return a.__awaiter(this, void 0, void 0, function() {
                var n, i, r, l, c;
                return a.__generator(this, function(a) {
                    switch (a.label) {
                        case 0:
                            n = "https://api.twitch.tv/api/premium/credit/spend_token?channel_id=" + e, i = 1, a.label = 1;
                        case 1:
                            if (!(i <= o)) return [3, 7];
                            a.label = 2;
                        case 2:
                            return a.trys.push([2, 5, , 6]), [4, fetch(n, {
                                method: "POST",
                                headers: {
                                    "Client-ID": s.n.config.legacyClientID,
                                    Accept: "application/json; charset=UTF-8",
                                    "content-type": "application/json; charset=UTF-8",
                                    Authorization: "OAuth " + t
                                }
                            })];
                        case 3:
                            return r = a.sent(), [4, r.body];
                        case 4:
                            return l = a.sent(), [2, l];
                        case 5:
                            if (c = a.sent(), i === o) throw c;
                            return [3, 6];
                        case 6:
                            return ++i, [3, 1];
                        case 7:
                            return [2]
                    }
                })
            })
        }
        var a = n(0),
            r = n(1),
            s = n(2),
            o = 3,
            l = n(246),
            c = n(3),
            u = "subscribe-button__subscribe-with-prime",
            d = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isSubscribing: !1,
                        primeSubFailure: !0
                    }, t.handleStartPrimeTrialClick = function() {
                        t.props.reportSubMenuAction({
                            action: l.a.ClickSignupForPrime
                        })
                    }, t.handleSubWithPrimeClick = function() {
                        t.setState({
                            isSubscribing: !0
                        }, function() {
                            return a.__awaiter(t, void 0, void 0, function() {
                                var e;
                                return a.__generator(this, function(t) {
                                    switch (t.label) {
                                        case 0:
                                            return t.trys.push([0, 3, 4, 5]), this.props.authToken && this.props.userHasPrime && this.props.subLogin ? [4, i(this.props.subLogin, this.props.authToken)] : [3, 2];
                                        case 1:
                                            t.sent(), this.props.onSubscribedWithPrime(), t.label = 2;
                                        case 2:
                                            return [3, 5];
                                        case 3:
                                            return e = t.sent(), s.i.error(e, "Failed to subscribe with Prime", {
                                                subLogin: this.props.subLogin
                                            }), this.setState({
                                                isSubscribing: !1,
                                                primeSubFailure: !0
                                            }), [3, 5];
                                        case 4:
                                            return this.setState({
                                                isSubscribing: !1
                                            }), [7];
                                        case 5:
                                            return [2]
                                    }
                                })
                            })
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.setMessages()
                }, t.prototype.render = function() {
                    var e = this.props.isSubscribedWithPrime && this.props.canPrimeSubscribe;
                    return this.props.userHasPrime ? this.props.isSubscribed && !e ? r.createElement(c.u, a.__assign({
                        ariaLabel: this.messages.subscribed,
                        "data-test-selector": u,
                        disabled: !0,
                        icon: c._9.Crown
                    }, Object(c._39)(this.props)), this.messages.subscribed) : this.props.canPrimeSubscribe ? r.createElement(c.u, a.__assign({
                        ariaLabel: this.messages.subscribeFree,
                        "data-test-selector": u,
                        disabled: this.state.isSubscribing,
                        icon: c._9.Crown,
                        state: this.state.isSubscribing ? c.y.Loading : c.y.Default,
                        onClick: this.handleSubWithPrimeClick
                    }, Object(c._39)(this.props)), e ? this.messages.resubscribeFree : this.messages.subscribeFree) : r.createElement(c.u, a.__assign({
                        ariaLabel: this.messages.primeSubNotAvailable,
                        "data-test-selector": u,
                        disabled: !0,
                        icon: c._9.Crown
                    }, Object(c._39)(this.props)), this.messages.primeSubNotAvailable) : r.createElement(c.u, a.__assign({
                        ariaLabel: this.messages.startPrimeTrial,
                        "data-test-selector": u,
                        icon: c._9.Crown,
                        linkTo: s.a.tryPrimeURI,
                        onClick: this.handleStartPrimeTrialClick
                    }, Object(c._39)(this.props), {
                        targetBlank: !0
                    }), this.messages.startPrimeTrial)
                }, t.prototype.setMessages = function() {
                    this.messages = {
                        subscribed: Object(s.d)("Subscribed", "SubscribeWithPrime"),
                        startPrimeTrial: Object(s.d)("Start Your Free Trial", "SubscribeWithPrime"),
                        primeSubNotAvailable: Object(s.d)("Not yet!", "SubscribeWithPrime"),
                        subscribeFree: Object(s.d)("Subscribe Free", "SubscribeWithPrime"),
                        resubscribeFree: Object(s.d)("Resubscribe Free", "SubscribeWithPrime")
                    }
                }, t
            }(r.Component),
            p = d;
        n.d(t, !1, function() {
            return u
        }), n.d(t, "a", function() {
            return p
        })
    },
    785: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return s
        });
        var i = n(4),
            a = (n.n(i), n(1)),
            r = (n.n(a), n(858)),
            s = (n.n(r), function(e) {
                var t = [a.createElement("span", {
                    key: "username-display",
                    className: "chat-author__display-name",
                    "data-a-target": "chat-message-username",
                    "data-test-selector": "message-username",
                    style: {
                        color: e.userData.color
                    }
                }, e.userData.userDisplayName)];
                if (e.userData.isIntl) {
                    var n = i((r = {}, r["chat-author__intl-login"] = !e.highlighted, r["chat-author__intl-login--highlighted"] = e.highlighted, r));
                    t.push(a.createElement("span", {
                        key: "username-login",
                        style: {
                            color: e.userData.color
                        },
                        className: n,
                        "data-test-selector": "message-username-canonical"
                    }, " (" + e.userData.userLogin + ")"))
                }
                return a.createElement("span", {
                    key: e.userData.userID + "-authorlabel"
                }, t);
                var r
            })
    },
    786: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_ReportReasons"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "content"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportContentType"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "reportReasons"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "content"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "content"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 118
            }
        };
        n.loc.source = {
            body: "query ReportUserModal_ReportReasons($content: ReportContentType!) {\n  reportReasons(content: $content) {\n    id\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    787: function(e, t) {},
    788: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_UserCommunities"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userId"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userId"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "directories"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "nodes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "directoryType"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 201
            }
        };
        n.loc.source = {
            body: "query ReportUserModal_UserCommunities($userId: ID!) {\n  user(id: $userId) {\n    id\n    directories {\n      nodes {\n        id\n        name\n        displayName\n        directoryType\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    789: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_ReportUserCommunity"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportUserInCommunityInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "reportUserInCommunity"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 157
            }
        };
        n.loc.source = {
            body: "mutation ReportUserModal_ReportUserCommunity($input: ReportUserInCommunityInput!) {\n  reportUserInCommunity(input: $input) {\n    user {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    790: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_ReportUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportContentInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "reportContent"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "contentID"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 120
            }
        };
        n.loc.source = {
            body: "mutation ReportUserModal_ReportUser($input: ReportContentInput!) {\n  reportContent(input: $input) {\n    contentID\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    791: function(e, t, n) {
        "use strict";
        var i = n(2),
            a = n(13),
            r = {
                Public: "public"
            };
        n.d(t, "a", function() {
            return s
        }), n.d(t, "b", function() {
            return o
        });
        var s = function(e) {
                return {
                    channel: e.channelLogin,
                    is_host_mode: e.isHostMode,
                    is_using_web_sockets: !0,
                    room_type: r.Public
                }
            },
            o = function(e) {
                i.m.track(a.SpadeEventType.ChatRoomJoined, s(e))
            }
    },
    792: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return i
        }), n.d(t, "c", function() {
            return a
        }), n.d(t, "d", function() {
            return r
        }), n.d(t, "a", function() {
            return s
        });
        var i = "subscribe_to_channel",
            a = "turbo",
            r = "visit_url",
            s = "broadcaster"
    },
    793: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e[e.recent_raids = 0] = "recent_raids", e[e.chat_message = 1] = "chat_message", e[e.viewer_list = 2] = "viewer_list", e[e.test = 3] = "test"
        }(i || (i = {}))
    },
    794: function(e, t) {},
    796: function(e, t, n) {
        "use strict";

        function i(e) {
            return e || (e = navigator.userAgent), !!a.exec(e)
        }
        t.a = i;
        var a = /\scurse\/\d/
    },
    797: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(1),
            r = n(2),
            s = n(7),
            o = n(5),
            l = n(3),
            c = n(806),
            u = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        canGift: !1
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    e.data && e.data.user && e.data.user.self ? this.setState({
                        canGift: e.data.user.self.canGift
                    }) : this.setState({
                        canGift: !1
                    })
                }, t.prototype.render = function() {
                    return a.createElement(l.u, {
                        targetBlank: !0,
                        disabled: !this.state.canGift,
                        onClick: this.props.onClick,
                        linkTo: this.props.checkoutURL,
                        "data-test-selector": "gift-subscribe-button"
                    }, Object(r.d)("Gift Subscription", "GiftSubscribeButton"))
                }, t = i.__decorate([Object(o.c)("GiftSubscribeButton"), Object(s.a)(c, {
                    options: function(e) {
                        return {
                            variables: {
                                recipientLogin: e.giftRecipient,
                                subProductId: e.subProductId
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.giftRecipient || !e.subProductId
                    }
                })], t)
            }(a.Component),
            d = u;
        n.d(t, !1, function() {
            return "gift-subscribe-button"
        }), n.d(t, "a", function() {
            return d
        })
    },
    798: function(e, t, n) {
        "use strict";

        function i(e) {
            switch (e) {
                case 0:
                    return Object(r.d)("0 minutes (Any followers)", "FollowersOnlyLabel");
                case 10:
                    return Object(r.d)("10 minutes (Most used)", "FollowersOnlyLabel");
                case 30:
                    return Object(r.d)("30 minutes", "FollowersOnlyLabel");
                case 60:
                    return Object(r.d)("1 hour", "FollowersOnlyLabel");
                case 1440:
                    return Object(r.d)("1 day", "FollowersOnlyLabel");
                case 10080:
                    return Object(r.d)("1 week", "FollowersOnlyLabel");
                case 43200:
                    return Object(r.d)("1 month", "FollowersOnlyLabel");
                case 129600:
                    return Object(r.d)("3 months", "FollowersOnlyLabel");
                default:
                    return r.i.warn("[FollowersOnlyLabel] Tried to generate a label for a non-preset.", e), ""
            }
        }

        function a(e) {
            switch (e) {
                case 0:
                    return Object(r.d)("0 min", "FollowersOnlyShorthand");
                case 10:
                    return Object(r.d)("10 min", "FollowersOnlyShorthand");
                case 30:
                    return Object(r.d)("30 min", "FollowersOnlyShorthand");
                case 60:
                    return Object(r.d)("1 hr", "FollowersOnlyShorthand");
                case 1440:
                    return Object(r.d)("1 day", "FollowersOnlyShorthand");
                case 10080:
                    return Object(r.d)("1 wk", "FollowersOnlyShorthand");
                case 43200:
                    return Object(r.d)("1 mo", "FollowersOnlyShorthand");
                case 129600:
                    return Object(r.d)("3 mo", "FollowersOnlyShorthand");
                default:
                    return Object(r.d)("custom", "FollowersOnlyShorthand")
            }
        }
        n.d(t, "a", function() {
            return s
        }), n.d(t, "b", function() {
            return o
        }), t.c = i, t.d = a;
        var r = n(2),
            s = 30,
            o = [0, 10, 30, 60, 1440, 10080, 43200, 129600]
    },
    799: function(e, t, n) {
        "use strict";

        function i(e) {
            var t = [],
                n = {};
            return e.forEach(function(e) {
                var i = e.tiers.map(function(e) {
                    var t = new Map,
                        n = new Map,
                        i = new Map,
                        r = new Map;
                    return e.images.forEach(function(e) {
                        "LIGHT" === e.theme ? e.isAnimated ? n.set(e.dpiScale, e.url) : t.set(e.dpiScale, e.url) : e.isAnimated ? r.set(e.dpiScale, e.url) : i.set(e.dpiScale, e.url)
                    }), a.__assign({
                        indexedImages: {
                            LIGHT: {
                                static: t,
                                animated: n
                            },
                            DARK: {
                                static: i,
                                animated: r
                            }
                        }
                    }, e)
                });
                i.sort(function(e, t) {
                    return t.bits - e.bits
                });
                var r = a.__assign({}, e, {
                    indexedTiers: new Map(i.map(function(e) {
                        return [e.bits, e]
                    })),
                    orderedTiers: i
                });
                t.push(r), n[r.prefix.toLowerCase()] = r
            }), {
                indexedActions: n,
                orderedActions: t
            }
        }
        t.a = i;
        var a = n(0)
    },
    800: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return s
        });
        var i = n(0),
            a = n(1),
            r = (n.n(a), n(3)),
            s = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isDraggingOver: !1
                    }, t.refHandler = function(e) {
                        t.fileInputRef = e
                    }, t.onFilePickerClick = function() {
                        t.fileInputRef.click()
                    }, t.onDragOver = function(e) {
                        e.preventDefault(), t.setState({
                            isDraggingOver: !0
                        })
                    }, t.onDragLeave = function(e) {
                        e.preventDefault(), t.setState({
                            isDraggingOver: !1
                        })
                    }, t.onFileInputChange = function(e) {
                        e.preventDefault(), t.finalizeSelections(e.target.files)
                    }, t.onFileDrop = function(e) {
                        e.preventDefault(), t.setState({
                            isDraggingOver: !1
                        }), t.finalizeSelections(e.dataTransfer.files)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement("div", {
                        "data-test-selector": "file-picker-root",
                        onClick: this.onFilePickerClick,
                        onDragLeave: this.onDragLeave,
                        onDragOver: this.onDragOver,
                        onDrop: this.onFileDrop
                    }, a.createElement(r.I, {
                        dragOver: this.state.isDraggingOver
                    }, a.createElement(r.P, {
                        display: r.H.Hide
                    }, a.createElement("input", {
                        accept: this.props.allowedFileTypes.join(","),
                        multiple: this.props.multiFile || !1,
                        onChange: this.onFileInputChange,
                        ref: this.refHandler,
                        type: "file"
                    })), this.props.children))
                }, t.prototype.finalizeSelections = function(e) {
                    e && this.props.onFilesSubmitted(Array.from(e))
                }, t
            }(a.Component)
    },
    801: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                type: a.a.Info,
                id: Object(r.a)("notice"),
                message: e
            }
        }
        t.a = i;
        var a = n(754),
            r = n(756)
    },
    802: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "bitsOffersFragment"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "BitsOffer"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "type"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "bits"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "InlineFragment",
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BitsBundleOffer"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "price"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "discount"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isPromo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "url"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "includesVAT"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "promotion"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 197
            }
        };
        n.loc.source = {
            body: "fragment bitsOffersFragment on BitsOffer {\n  id\n  type\n  bits\n  ... on BitsBundleOffer {\n    price\n    discount\n    isPromo\n    url\n    includesVAT\n    promotion {\n      id\n      type \n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    804: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "cheer"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "cheer"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "emotes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "prefix"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "tiers"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "bits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "color"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "images"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "theme"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "isAnimated"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "dpiScale"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 270
            }
        };
        n.loc.source = {
            body: "fragment cheer on User {\n  cheer {\n    id\n    emotes {\n      id\n      prefix\n      type\n      tiers {\n        id\n        bits\n        color\n        images {\n          id\n          url\n          theme\n          isAnimated\n          dpiScale\n        }\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    806: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "GiftSubscribeButton_Gift_Eligibility"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "recipientLogin"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "String"
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "subProductId"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "recipientLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "canGift"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "product"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "subProductId"
                                                }
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 195
            }
        };
        n.loc.source = {
            body: "query GiftSubscribeButton_Gift_Eligibility($recipientLogin: String, $subProductId: String!) {\n  user(login: $recipientLogin) {\n    id\n    self {\n      canGift(product: $subProductId)\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    807: function(e, t) {},
    808: function(e, t) {},
    809: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChannelPage_SubscribeButton_Promotion"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "isEligibleForDiscount"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "newPrice"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "oldPrice"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "discountType"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "discountType"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 246
            }
        };
        n.loc.source = {
            body: "query ChannelPage_SubscribeButton_Promotion($login: String!) {\n  user(login: $login) {\n    id\n    subscriptionProducts {\n      id\n      self {\n\t\t\t\tisEligibleForDiscount\n\t\t\t\tnewPrice\n\t\t\t\toldPrice\n\t\t\t\tdiscountType\n\t\t\t\tdiscountType\n\t\t\t}\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    810: function(e, t) {},
    811: function(e, t) {},
    812: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChannelPage_SubscribeButton_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "price"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emoteSetID"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "canPrimeSubscribe"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "subscriptionBenefit"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "purchasedWithPrime"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "tier"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "endsAt"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "paidUpgrade"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "price"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "startsAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "gift"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "isGift"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "gifter"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "displayName"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hasPrime"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "requestInfo"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "countryCode"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 673
            }
        };
        n.loc.source = {
            body: "query ChannelPage_SubscribeButton_User($login: String!) {\n  user(login: $login) {\n    id\n    login\n    displayName\n    subscriptionProducts {\n      id\n      price\n      url\n      emoteSetID\n      displayName\n      name\n      emotes {\n        id\n      }\n    }\n    self {\n      canPrimeSubscribe\n      subscriptionBenefit {\n        id\n        purchasedWithPrime\n        tier\n        endsAt\n        paidUpgrade {\n          price\n          startsAt\n        }\n        gift {\n          isGift\n          gifter {\n            id\n            displayName\n          }\n        }\n      }\n    }\n  }\n  currentUser {\n    id\n    login\n    hasPrime\n  }\n  requestInfo {\n    countryCode\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    813: function(e, t, n) {
        "use strict";

        function i(e) {
            return Object(h.bindActionCreators)({
                closeModal: c.c
            }, e)
        }

        function a(e) {
            return p.__awaiter(this, void 0, void 0, function() {
                var t, n, i, a, r;
                return p.__generator(this, function(s) {
                    switch (s.label) {
                        case 0:
                            if (t = g.b.get("bits_truex_partner_hash", ""), !(n = g.b.get("bits_truex_api_url", "")) || !t) return g.i.warn("Truex API info missing from dynamic settings"), [2, k.Error];
                            s.label = 1;
                        case 1:
                            return s.trys.push([1, 5, , 6]), [4, fetch(n + "?placement.key=" + t + "&user.uid=" + e + "&max_activities=1")];
                        case 2:
                            return i = s.sent(), i.ok ? [4, i.json()] : [3, 4];
                        case 3:
                            if ((a = s.sent()) && Array.isArray(a) && a.length) return [2, k.Available];
                            s.label = 4;
                        case 4:
                            return [2, k.Unavailable];
                        case 5:
                            return r = s.sent(), g.i.warn("Failed checking ad availability from TrueX, probably due to AdBlock", r), [2, k.AdBlocked];
                        case 6:
                            return [2]
                    }
                })
            })
        }

        function r(e) {
            return {
                adModalOpen: Object(u.b)(e, N),
                isLoggedIn: Object(d.d)(e)
            }
        }

        function s(e) {
            return {
                showWatchAdModal: function(t) {
                    return e(Object(c.d)(N, t))
                }
            }
        }
        var o, l = n(8),
            c = n(49),
            u = n(85),
            d = n(18),
            p = n(0),
            m = n(1),
            h = n(10),
            g = n(2),
            f = n(121),
            b = n(7),
            v = n(22);
        ! function(e) {
            e[e.ExitEarly = 0] = "ExitEarly", e[e.Unknown = 1] = "Unknown", e[e.Adblock = 2] = "Adblock", e[e.LimitReached = 3] = "LimitReached"
        }(o || (o = {}));
        var k, S = n(354),
            y = n(755),
            C = n(3),
            _ = n(832),
            E = (n(833), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.hasAwarded = !1, t.messageHandler = function(e) {
                        return p.__awaiter(t, void 0, void 0, function() {
                            var t, n, i, a, a, r, s;
                            return p.__generator(this, function(l) {
                                switch (l.label) {
                                    case 0:
                                        if (e.origin !== window.location.origin) return [2];
                                        if (!(t = e.data) || "trueXAd" !== t.msgSrc) return [2];
                                        switch (n = t.type) {
                                            case S.a.Ready:
                                                return [3, 1];
                                            case S.a.RequestAd:
                                                return [3, 2];
                                            case S.a.Dimensions:
                                                return [3, 3];
                                            case S.a.OnStart:
                                                return [3, 4];
                                            case S.a.OnCredit:
                                                return [3, 5];
                                            case S.a.OnClose:
                                            case S.a.OnFinish:
                                            case S.a.LimitReached:
                                            case S.a.Adblock:
                                            case S.a.OnError:
                                                return [3, 9]
                                        }
                                        return [3, 10];
                                    case 1:
                                        return i = {
                                            msgSrc: "wateb-ad-modal",
                                            tuid: this.props.tuid
                                        }, e.source.postMessage(i, "*"), [2];
                                    case 2:
                                        try {
                                            if (!(a = JSON.parse(t.activityJSON))) return [2];
                                            Object(y.g)({
                                                campaignID: a.campaign_id.toString(),
                                                requestID: t.requestID,
                                                requestMethod: this.props.requestRef
                                            })
                                        } catch (e) {}
                                        return [2];
                                    case 3:
                                        return t.height && t.width && this.setState({
                                            customDimensions: {
                                                height: t.height,
                                                width: t.width
                                            }
                                        }), [3, 10];
                                    case 4:
                                        try {
                                            if (!(a = JSON.parse(t.activityJSON))) return [2];
                                            Object(y.f)({
                                                requestID: t.requestID,
                                                adblock: !1,
                                                campaignID: a.campaign_id.toString()
                                            })
                                        } catch (e) {}
                                        return [2];
                                    case 5:
                                        return l.trys.push([5, 7, , 8]), [4, this.props.redeemTrueXAd(Object(v.a)({
                                            args: t.engagement.signature_argument_string,
                                            signature: t.engagement.signature,
                                            trueXAd: {
                                                creativeID: t.engagement.ad.creative_id,
                                                campaignID: t.engagement.ad.campaign_id,
                                                name: t.engagement.ad.name,
                                                currencyAmount: t.engagement.ad.currency_amount
                                            },
                                            targetID: this.props.channelID
                                        }))];
                                    case 6:
                                        return r = l.sent(), this.hasAwarded = !0, this.props.onBitsAwarded && this.props.onBitsAwarded(r.data.redeemTrueXAd.grantedBits), [3, 8];
                                    case 7:
                                        return s = l.sent(), g.i.warn("Error while redeeming bits for truex ad", s), this.props.onError && this.props.onError(o.Unknown), [3, 8];
                                    case 8:
                                        return [3, 10];
                                    case 9:
                                        return this.props.onError && (t.type === S.a.LimitReached ? this.props.onError(o.LimitReached) : t.type === S.a.Adblock ? this.props.onError(o.Adblock) : t.type === S.a.OnError ? this.props.onError(o.Unknown) : this.hasAwarded || this.props.onError(o.ExitEarly)), this.props.closeModal(), [3, 10];
                                    case 10:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return p.__extends(t, e), t.prototype.componentWillMount = function() {
                    window.addEventListener("message", this.messageHandler)
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("message", this.messageHandler)
                }, t.prototype.render = function() {
                    return m.createElement(C._17, {
                        background: C.m.Base
                    }, m.createElement("div", {
                        className: "t-watch-ads-modal",
                        style: this.state.customDimensions
                    }, m.createElement(f.a, null), m.createElement("iframe", {
                        src: "/products/bits/ad"
                    })))
                }, t = p.__decorate([Object(b.a)(_, {
                    name: "redeemTrueXAd"
                })], t)
            }(m.Component)),
            N = Object(l.a)(null, i)(E),
            w = n(4),
            T = n(783),
            D = n(29);
        ! function(e) {
            e[e.Error = 0] = "Error", e[e.AdBlocked = 1] = "AdBlocked", e[e.Unavailable = 2] = "Unavailable", e[e.Available = 3] = "Available"
        }(k || (k = {}));
        var I, U = function(e) {
                var t = null;
                return e.disableWatchAd && (t = Object(g.d)("Try again later", "Bits--WatchAdOffer")), m.createElement(C._17, {
                    className: "bits-buy-card__offer-row",
                    display: C.H.Flex,
                    flexShrink: 0,
                    borderBottom: !0,
                    justifyContent: C.T.Between,
                    flexWrap: C.K.NoWrap,
                    padding: {
                        x: 2,
                        y: 1
                    }
                }, m.createElement(C.U, {
                    padding: {
                        right: 4
                    }
                }, m.createElement("strong", null, Object(g.d)("Get {minBitsCount} or more Bits by watching short ads", {
                    minBitsCount: e.minPayout
                }, "Bits--WatchAdOffer"))), m.createElement(C.U, {
                    flexShrink: 0,
                    display: C.H.Flex,
                    flexDirection: C.J.Column,
                    alignItems: C.c.End
                }, m.createElement(C.u, {
                    type: C.z.Hollow,
                    "data-a-target": "bits-watch-ad",
                    onClick: e.onWatchAdClick,
                    disabled: e.disableWatchAd
                }, Object(g.d)("Watch Ad", "Bits--WatchAdOffer")), t && m.createElement(C.U, {
                    className: "bits-buy-card__sub-text",
                    alignSelf: C.d.Stretch,
                    textAlign: C._22.Center,
                    margin: {
                        top: .5
                    }
                }, t)))
            },
            O = /version\/([\w\.]+).+?(mobile\s?safari|safari)/i,
            M = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        enableWatchAd: !0
                    }, t
                }
                return p.__extends(t, e), t.prototype.componentWillMount = function() {
                    return p.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return p.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, a(this.props.truexUserID)];
                                case 1:
                                    return e = t.sent(), Object(y.e)({
                                        channel: this.props.channelLogin,
                                        channelID: this.props.channelID,
                                        available: e === k.Available
                                    }), e !== k.Available && e !== k.AdBlocked && this.setState({
                                        enableWatchAd: !1
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return O.test(navigator.userAgent) ? null : m.createElement(U, p.__assign({}, this.props, {
                        disableWatchAd: !this.state.enableWatchAd
                    }))
                }, t
            }(m.Component),
            F = n(764),
            P = n(245),
            x = n(347),
            L = n(765),
            A = n(350),
            j = n(348),
            R = (n(834), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleBuyClick = function(e) {
                        var n = t.props.channelID || "",
                            i = Object(L.b)({
                                trackBitsCardInteraction: t.props.trackBitsCardInteraction,
                                channelID: n,
                                purchaseUrl: e.currentTarget.dataset.purchaseUrl,
                                bitsAmount: e.currentTarget.dataset.bitsAmount,
                                closeAllBits: t.props.closeAllBits,
                                location: t.props.location
                            });
                        i && (t.props.onBuyPopupClose(i), t.props.onClose())
                    }, t
                }
                return p.__extends(t, e), t.prototype.render = function() {
                    if (this.props.offer.type === F.a) {
                        if (!this.props.channelLogin) return null;
                        var e = this.props.currentUserSHA || "";
                        return m.createElement(M, {
                            key: "wateb",
                            minPayout: this.props.offer.bits,
                            onWatchAdClick: this.props.handleWatchAdClick,
                            truexUserID: e,
                            channelID: this.props.channelID || "",
                            channelLogin: this.props.channelLogin
                        })
                    }
                    var t = null;
                    Object(L.c)(this.props.offer) ? t = m.createElement(C.U, {
                        className: "bits-buy-card-offer-row__bonus-text bits-buy-card-offer-row__bonus-text-headline"
                    }, m.createElement(C._21, {
                        type: C._26.Strong,
                        fontSize: C.L.Size6
                    }, Object(g.d)("Special Offer: 1st Time Buyers", "Bits--BuyCard"))) : Object(L.d)(this.props.offer) && null !== this.props.offer.promotion && this.props.offer.promotion.id === F.c && (t = m.createElement(C.U, {
                        className: "bits-buy-card-offer-row__bonus-text bits-buy-card-offer-row__bonus-text-headline"
                    }, m.createElement(C._21, {
                        type: C._26.Strong,
                        fontSize: C.L.Size6
                    }, Object(g.d)("Flash Sale: Now thru Nov. 27!", "Bits--BuyCard"))));
                    var n = null;
                    this.props.offer.discount && (n = m.createElement("div", {
                        className: "bits-buy-card-offer-row__sub-text"
                    }, Object(g.d)("{percentOff,number,percent} discount", {
                        percentOff: this.props.offer.discount
                    }, "Bits--BuyCard")));
                    var i = null;
                    (Object(L.c)(this.props.offer) || Object(L.e)(this.props.offer)) && (i = m.createElement("div", {
                        className: "bits-buy-card-offer-row__sub-text"
                    }, Object(g.d)("one per account", "Bits--BuyCard")));
                    var a = this.props.isLastRow ? C._17 : C.U;
                    return m.createElement(a, {
                        className: "bits-buy-card-offer-row",
                        flexShrink: 0,
                        display: C.H.Flex,
                        justifyContent: C.T.Center,
                        borderBottom: this.props.isLastRow,
                        flexDirection: C.J.Column,
                        padding: {
                            x: 2,
                            y: 1
                        }
                    }, t, m.createElement(C.U, {
                        display: C.H.Flex,
                        justifyContent: C.T.Between,
                        alignItems: C.c.Center
                    }, m.createElement(C.U, {
                        flexGrow: 1
                    }, m.createElement(C._21, {
                        type: C._26.H5,
                        color: C.F.Base,
                        bold: !0
                    }, this.props.offer.bits, " Bits"), this.getAvailableTiers(this.props.offer.bits)), m.createElement(C.U, {
                        flexShrink: 0,
                        display: C.H.Flex,
                        flexDirection: C.J.Column,
                        alignItems: C.c.End
                    }, m.createElement(C.u, {
                        onClick: this.handleBuyClick,
                        "data-purchase-url": this.props.offer.url,
                        "data-bits-amount": this.props.offer.bits,
                        "data-a-target": "bits-purchase-button-" + this.props.offer.bits
                    }, this.props.offer.price), (n || i) && m.createElement(C.U, {
                        alignSelf: C.d.Stretch,
                        textAlign: C._22.Right,
                        margin: {
                            top: .5
                        }
                    }, n, i))))
                }, t.prototype.getAvailableTiers = function(e) {
                    var t = this.props.bitsConfig.indexedActions[P.e];
                    t || (t = Object(A.b)());
                    var n = t.orderedTiers.filter(function(t) {
                        return t.bits <= e
                    }).reverse();
                    return m.createElement(C.U, {
                        padding: {
                            top: .5
                        },
                        className: "bits-buy-card-offer-row__tier-bits-images"
                    }, n.map(function(e) {
                        return m.createElement(j.a, {
                            key: e.bits,
                            sources: Object(x.b)(e, 2, !1)
                        })
                    }))
                }, t
            }(m.Component)),
            B = (n(835), function(e) {
                var t = [],
                    n = [],
                    i = null;
                return e.offers.forEach(function(a, r) {
                    var s = m.createElement(R, {
                            key: a.id,
                            offer: a,
                            isLastRow: r + 1 < e.offers.length,
                            bitsConfig: e.bitsConfig,
                            channelID: e.channelID,
                            channelLogin: e.channelLogin,
                            currentUserSHA: e.currentUserSHA,
                            location: e.location,
                            onClose: e.onClose,
                            onBuyPopupClose: e.onBuyPopupClose,
                            handleWatchAdClick: e.handleWatchAdClick,
                            closeAllBits: e.closeAllBits,
                            trackBitsCardInteraction: e.trackBitsCardInteraction
                        }),
                        o = Object(L.d)(a),
                        l = Object(L.c)(a),
                        c = a.type === F.a;
                    l && !e.hidePromos ? t.push(s) : o && !l ? t.push(s) : c && !e.hideWateb ? i = s : c || o || n.push(s)
                }), e.fullsize ? m.createElement(C.U, {
                    className: "bits-buy-card-offers__full-size",
                    flexGrow: 1,
                    flexWrap: C.K.NoWrap,
                    display: C.H.Flex,
                    flexDirection: C.J.Column
                }, i, t, n) : m.createElement(D.b, {
                    className: "bits-buy-card-offers__scroll-view"
                }, m.createElement(C.U, {
                    flexGrow: 1,
                    flexWrap: C.K.NoWrap,
                    display: C.H.Flex,
                    flexDirection: C.J.Column
                }, i, t, n))
            }),
            H = function(e) {
                var t = null;
                e.pricesIncludeVAT && (t = m.createElement(C._21, {
                    italic: !0,
                    type: C._26.P,
                    color: C.F.Alt
                }, Object(g.d)("Prices include VAT", "Bits--BuyCard")));
                var n = null;
                e.minBitsToCheer && e.minBitsToCheer > 1 && (n = m.createElement(C._21, {
                    color: C.F.Alt
                }, Object(g.d)("{displayName} requires {minBits} Bits to Cheer in this channel.", {
                    displayName: e.displayName,
                    minBits: e.minBitsToCheer
                }, "Bits--BuyCard")));
                var i = null;
                return void 0 !== e.bitsBalance && null !== e.bitsBalance && (i = m.createElement(C._21, {
                    color: C.F.Alt
                }, Object(g.d)("You have {totalBits} Bits", {
                    totalBits: m.createElement("strong", {
                        "data-a-target": "buy-card-bits-count"
                    }, e.bitsBalance)
                }, "Bits--BuyCard"))), m.createElement(C._17, {
                    className: "bits-buy-card-header",
                    padding: {
                        x: 1,
                        bottom: 1
                    },
                    borderBottom: !0,
                    flexShrink: 0
                }, m.createElement(C.U, {
                    margin: {
                        bottom: 1
                    }
                }, m.createElement(C._21, {
                    type: C._26.H4,
                    color: C.F.Alt
                }, Object(g.d)("Purchase Bits", "Bits--BuyCard")), t), i, n)
            },
            V = n(767),
            W = function(e) {
                return m.createElement(C.U, {
                    display: C.H.Flex,
                    flexGrow: 1,
                    flexDirection: C.J.Column,
                    alignItems: C.c.Center,
                    fullWidth: !0,
                    flexWrap: C.K.NoWrap,
                    padding: {
                        y: 1
                    }
                }, m.createElement(V.a, {
                    prefix: "cheer",
                    amount: e.amount,
                    bitsConfig: e.bitsConfig
                }), m.createElement(C.U, {
                    display: C.H.Flex,
                    padding: {
                        top: 1
                    },
                    flexGrow: 1,
                    flexDirection: C.J.Column,
                    alignItems: C.c.Center,
                    flexWrap: C.K.NoWrap
                }, m.createElement(C._21, {
                    type: C._26.H4,
                    bold: !0
                }, Object(g.d)("You got {bitsAmount,number} Bits!", {
                    bitsAmount: e.amount
                }, "Bits--WatchAdAward")), m.createElement(C.P, {
                    padding: {
                        top: 1
                    }
                }, m.createElement(C._21, {
                    color: C.F.Alt2
                }, Object(g.d)("{bitsAmount,number} Bits were added to your Bit inventory.", {
                    bitsAmount: e.amount
                }, "Bits--WatchAdAward"), m.createElement("br", null), Object(g.d)("You can use these Bits to Cheer!", "Bits--WatchAdAward")))), m.createElement(C.U, {
                    display: C.H.Flex,
                    padding: {
                        x: 1,
                        top: 3
                    },
                    alignSelf: C.d.Stretch,
                    justifyContent: C.T.Between
                }, m.createElement(C.u, {
                    onClick: e.onStartCheering
                }, Object(g.d)("Start Cheering", "Bits--WatchAdAward")), m.createElement(C.u, {
                    type: C.z.Hollow,
                    onClick: e.onWatchAnother,
                    disabled: !e.hasAdAvailable
                }, Object(g.d)("Watch Another", "Bits--WatchAdAward"))))
            },
            G = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasAdAvailable: !0
                    }, t
                }
                return p.__extends(t, e), t.prototype.componentWillMount = function() {
                    return p.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return p.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, a(this.props.truexUserID)];
                                case 1:
                                    return e = t.sent(), e !== k.Available && this.setState({
                                        hasAdAvailable: !1
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return m.createElement(W, p.__assign({}, this.props, {
                        hasAdAvailable: this.state.hasAdAvailable
                    }))
                }, t
            }(m.Component),
            q = (n(837), function(e) {
                var t = Object(g.d)("Something's wrong!", "Bits--WatchAdError"),
                    n = Object(g.d)("Something went wrong. Wait a while and try again.", "Bits--WatchAdError"),
                    i = "adserrorgeneric";
                switch (e.type) {
                    case o.Adblock:
                        i = "adserroradblock", n = Object(g.d)("We can't load this Ad, probably because Ad Blocking software is running. To watch an ad and get Bits, please disable all Ad Blocking software.", "Bits--WatchAdError");
                        break;
                    case o.LimitReached:
                        i = "adserrorlimit", t = Object(g.d)("Ad Limit Reached", "Bits--WatchAdError"), n = Object(g.d)("That's all the Ads we have for now. Try again tomorrow!", "Bits--WatchAdError");
                        break;
                    case o.ExitEarly:
                        n = Object(g.d)("To get Bits, you must view and interact with the Ad for the minimum amount of time.", "Bits--WatchAdError")
                }
                var a = m.createElement(C.U, {
                    className: "watch-ad-error__footer",
                    display: C.H.Flex,
                    padding: {
                        top: 2
                    },
                    alignSelf: C.d.Stretch,
                    justifyContent: C.T.Center
                }, m.createElement(C.u, {
                    onClick: e.onTryAgain
                }, Object(g.d)("Try Again", "Bits--WatchAdError")));
                return e.type === o.LimitReached && (a = m.createElement(C.U, {
                    className: "watch-ad-error__footer",
                    display: C.H.Flex,
                    padding: {
                        top: 2
                    },
                    alignSelf: C.d.Stretch,
                    justifyContent: C.T.Between
                }, m.createElement(C.u, {
                    onClick: e.onClose
                }, Object(g.d)("Got It", "Bits--WatchAdError")), m.createElement(C.u, {
                    onClick: e.onTryAgain,
                    type: C.z.Hollow
                }, Object(g.d)("Buy Bits", "Bits--WatchAdError")))), m.createElement(C.U, {
                    padding: {
                        x: 1
                    },
                    display: C.H.Flex,
                    flexGrow: 1,
                    flexDirection: C.J.Column,
                    alignItems: C.c.Center,
                    fullWidth: !0,
                    flexWrap: C.K.NoWrap
                }, m.createElement(C.U, {
                    padding: {
                        y: 2
                    }
                }, m.createElement("img", {
                    className: "watch-ad-error__error-image",
                    src: P.a + "/light/static/1/" + i + ".png"
                })), m.createElement(C.U, {
                    padding: {
                        bottom: 1
                    }
                }, m.createElement(C._21, {
                    type: C._26.H4,
                    bold: !0
                }, t)), m.createElement(C._21, {
                    color: C.F.Alt2
                }, n), a)
            }),
            z = n(838);
        n(839);
        ! function(e) {
            e[e.Inactive = 0] = "Inactive", e[e.Error = 1] = "Error", e[e.Awarded = 2] = "Awarded"
        }(I || (I = {}));
        var $ = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        wateb: I.Inactive,
                        watebError: null,
                        bitsAwarded: 0
                    }, t.onBuyPopupClose = function(e) {
                        Object(T.a)(e, function() {
                            t.props.data && t.props.data.refetch()
                        })
                    }, t.onAdBitsAwarded = function(e) {
                        t.props.data && !t.props.data.loading && t.props.data.refetch(), t.setState({
                            wateb: I.Awarded,
                            bitsAwarded: e
                        })
                    }, t.handleWatchAdClick = function() {
                        return p.__awaiter(t, void 0, void 0, function() {
                            return p.__generator(this, function(e) {
                                return this.props.data && this.props.data.currentUser && this.props.data.user ? (this.props.showWatchAdModal({
                                    tuid: this.props.data.currentUser.idSHA1,
                                    onBitsAwarded: this.onAdBitsAwarded,
                                    onError: this.receiveAdErrorState,
                                    requestRef: y.c.ShowAdButton,
                                    channelID: this.props.data.user.id
                                }), [2]) : [2]
                            })
                        })
                    }, t.receiveAdErrorState = function(e) {
                        t.setState({
                            wateb: I.Error,
                            watebError: e
                        })
                    }, t.resetAdErrorState = function() {
                        t.state.wateb === I.Error && (t.setState({
                            wateb: I.Inactive
                        }), t.props.data && t.props.data.refetch())
                    }, t
                }
                return p.__extends(t, e), t.prototype.shouldComponentUpdate = function(e) {
                    return !e.adModalOpen
                }, t.prototype.render = function() {
                    var e = {
                            border: !0,
                            background: C.m.Base,
                            fullWidth: !0,
                            elevation: 3
                        },
                        t = w({
                            "bits-buy-card": !0,
                            "bits-buy-card__chat-tooltip": this.props.location === y.b.ChatTooltip
                        }),
                        n = null;
                    if (this.props.location === y.b.ChatTooltip && (n = m.createElement("button", {
                            className: "bits-buy-card__close",
                            onClick: this.props.onClose,
                            "data-a-target": "bits-buy-card-close-button"
                        }, m.createElement(C._8, {
                            asset: C._9.Close,
                            height: 11,
                            width: 11
                        }))), !this.props.data || this.props.data.loading) return m.createElement(C._17, p.__assign({
                        className: t,
                        "data-a-target": "bits-buy-card-loading",
                        display: C.H.Flex,
                        flexDirection: C.J.Column,
                        alignItems: C.c.Center,
                        justifyContent: C.T.Center,
                        textAlign: C._22.Center
                    }, e), m.createElement(C.X, {
                        delay: 0
                    }), m.createElement(C.U, {
                        padding: {
                            top: 2
                        }
                    }, m.createElement(C._21, {
                        italic: !0
                    }, Object(g.d)("Fetching bits", "Bits--BuyCard"))));
                    if (this.props.data.error) return m.createElement(C.U, p.__assign({
                        className: w(t, "bits-buy-card--shorter"),
                        display: C.H.Flex,
                        flexDirection: C.J.Column,
                        alignItems: C.c.Center,
                        justifyContent: C.T.Center,
                        padding: 2,
                        textAlign: C._22.Center,
                        "data-a-target": "bits-buy-card-error"
                    }, e), n, m.createElement(C._21, {
                        italic: !0
                    }, Object(g.d)("Bits prices are unavailable right now. Check back again later.", "Bits--BuyCard")));
                    var i = this.renderWatebCard();
                    if (i) return m.createElement(C._17, p.__assign({
                        className: w(t, "bits-buy-card--shorter"),
                        display: C.H.Flex,
                        flexDirection: C.J.Column,
                        alignItems: C.c.Center,
                        justifyContent: C.T.Center,
                        textAlign: C._22.Center,
                        padding: 1
                    }, e), n, i);
                    var a = [];
                    this.props.data.currentUser ? a = this.props.data.currentUser.bitsOffers : this.props.data.bitsOffers && (a = this.props.data.bitsOffers);
                    var r = a.filter(function(e) {
                            return e.type === F.b
                        }).some(function(e) {
                            return e.includesVAT
                        }),
                        s = this.props.data.user ? this.props.data.user.id : "",
                        o = m.createElement(B, {
                            offers: a,
                            fullsize: this.props.fullsize,
                            hidePromos: this.props.hidePromos,
                            hideWateb: this.props.hideWateb,
                            bitsConfig: this.props.bitsConfig,
                            channelID: s,
                            channelLogin: this.props.channelLogin,
                            closeAllBits: this.props.closeAllBits,
                            currentUserSHA: this.props.data && this.props.data.currentUser && this.props.data.currentUser.idSHA1,
                            handleWatchAdClick: this.handleWatchAdClick,
                            location: this.props.location,
                            onBuyPopupClose: this.onBuyPopupClose,
                            onClose: this.props.onClose,
                            trackBitsCardInteraction: this.props.trackBitsCardInteraction
                        }),
                        l = null;
                    return this.props.location === y.b.ChatTooltip && (l = m.createElement(H, {
                        bitsBalance: this.props.data && this.props.data.currentUser && this.props.data.currentUser.bitsBalance,
                        displayName: this.props.data && this.props.data.user && this.props.data.user.displayName || this.props.channelLogin || "",
                        minBitsToCheer: this.props.data && this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.settings.cheerMinimumBits,
                        pricesIncludeVAT: r
                    })), m.createElement(C._17, p.__assign({
                        className: t,
                        padding: {
                            top: 1
                        },
                        display: C.H.Flex,
                        flexDirection: C.J.Column,
                        "data-a-target": "bits-buy-card"
                    }, e), n, l, o)
                }, t.prototype.renderWatebCard = function() {
                    if (this.props.data && this.props.data.currentUser) switch (this.state.wateb) {
                        case I.Awarded:
                            return m.createElement(G, {
                                bitsConfig: this.props.bitsConfig,
                                amount: this.state.bitsAwarded,
                                onStartCheering: this.props.onClose,
                                onWatchAnother: this.handleWatchAdClick,
                                truexUserID: this.props.data.currentUser.idSHA1
                            });
                        case I.Error:
                            return m.createElement(q, {
                                type: this.state.watebError || o.Unknown,
                                onClose: this.props.onClose,
                                onTryAgain: this.resetAdErrorState
                            });
                        default:
                            return !1
                    }
                }, t = p.__decorate([Object(b.a)(z, {
                    name: "data",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin,
                                withChannel: !!e.channelLogin,
                                isLoggedIn: e.isLoggedIn
                            }
                        }
                    }
                })], t)
            }(m.Component),
            J = $,
            K = Object(l.a)(r, s)(J);
        n.d(t, !1, function() {
            return r
        }), n.d(t, !1, function() {
            return s
        }), n.d(t, "a", function() {
            return K
        })
    },
    814: function(e, t, n) {
        "use strict";

        function i(e) {
            return "https://www.twitch.tv/" + e + "/subscribe?ref=in_chat_subscriber_link"
        }

        function a(e) {
            switch (e.clickAction) {
                case s.d:
                    return e.clickURL;
                case s.b:
                    return e.channelName ? i(e.channelName) : "";
                case s.c:
                    return c;
                default:
                    return ""
            }
        }
        n.d(t, "a", function() {
            return u
        });
        var r = n(1),
            s = (n.n(r), n(792)),
            o = n(3),
            l = n(856),
            c = (n.n(l), "https://www.twitch.tv/products/turbo?ref=chat_badge"),
            u = function(e) {
                var t = e.badge,
                    n = r.createElement("img", {
                        alt: t.title,
                        className: "chat-badge",
                        src: t.image1x,
                        srcSet: t.image1x + " 1x, " + t.image2x + " 2x, " + t.image4x + " 4x"
                    }),
                    i = a(t);
                return "" !== i && (n = r.createElement("a", {
                    href: i,
                    target: "_blank"
                }, n)), r.createElement(o._30, {
                    key: t.image1x,
                    label: t.title,
                    display: o.H.Inline,
                    align: o._31.Left,
                    offsetY: "0.9rem",
                    "data-a-target": "chat-badge"
                }, n)
            }
    },
    815: function(e, t, n) {
        "use strict";
        var i, a = n(0),
            r = n(1),
            s = n(2);
        ! function(e) {
            e.On = "on", e.Off = "off", e.StaffOnly = "staff"
        }(i || (i = {}));
        var o = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = s.b.get(this.props.name, i.Off);
                    return e === i.On || e === i.StaffOnly && this.props.isStaff ? r.Children.only(this.props.children) : null
                }, t
            }(r.Component),
            l = o;
        n.d(t, "a", function() {
            return i
        }), n.d(t, !1, function() {
            return o
        }), n.d(t, !1, function() {
            return l
        })
    },
    816: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = {
            DarkMode: "darkMode",
            FollowerDuration: "followerDuration",
            FollowerMode: "followerMode",
            HideChat: "hideChat",
            ShowMessageFlags: "showMessageFlags",
            ShowModActions: "showModerationActions",
            ShowModIcons: "showModIcons",
            ShowTimestamps: "showTimestamps",
            SlowMode: "slowMode"
        }
    },
    820: function(e, t, n) {
        "use strict";
        var i = n(1),
            a = n(2),
            r = n(245),
            s = n(348),
            o = n(3),
            l = (n(845), {
                themed: !0,
                dark: {
                    "1x": r.a + "/dark/animated/1/cheertutorial.gif"
                },
                light: {
                    "1x": r.a + "/light/animated/1/cheertutorial.gif"
                }
            }),
            c = function() {
                return i.createElement(o.U, {
                    display: o.H.Flex,
                    padding: {
                        top: 5
                    },
                    flexGrow: 1,
                    flexDirection: o.J.Column,
                    justifyContent: o.T.Center,
                    alignItems: o.c.Center
                }, i.createElement(o._21, {
                    type: o._26.H4,
                    bold: !0
                }, i.createElement(s.a, {
                    className: "cheermote-help__tutorial-image",
                    sources: l
                }), Object(a.d)("How to Cheer", "Bits--CheermoteHelp")), i.createElement("p", {
                    className: "t-bits-card__contents-body t-bits-card__contents-body--narrow"
                }, Object(a.d)('Type "cheer" + the number of Bits you want to Cheer.', "Bits--CheermoteHelp")))
            };
        n.d(t, "a", function() {
            return c
        })
    },
    821: function(e, t, n) {
        "use strict";

        function i() {
            var e = o.k.get(c, {});
            return s.__assign({
                lastUsedFollowerDurations: {},
                showAutoModActions: !0,
                showMessageFlags: !0,
                showModerationActions: !0,
                showModIcons: !1,
                showTimestamps: !1,
                zachModeStatus: l
            }, e)
        }

        function a(e, t) {
            var n = i();
            n[e] = t, o.k.set(c, n)
        }

        function r(e, t) {
            var n = i();
            n.lastUsedFollowerDurations[e] = t, o.k.set(c, n)
        }
        var s = n(0),
            o = n(2),
            l = "control";
        t.a = i, t.b = a, t.c = r;
        var c = "chatSettings"
    },
    822: function(e, t, n) {
        "use strict";

        function i(e, t, n, i) {
            return {
                type: e,
                id: Object(a.a)(t + "-mod"),
                userLogin: t,
                reason: n,
                duration: i
            }
        }
        t.a = i;
        var a = n(756)
    },
    823: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        });
        var i = n(1),
            a = (n.n(i), n(814)),
            r = function(e) {
                var t = Object.keys(e.badgesToRender).map(function(t) {
                        var n = e.badgesToRender[t],
                            r = e.badgeSets.getBadge(t, n);
                        return null === r ? null : i.createElement(a.a, {
                            key: r.setID + "/" + r.version,
                            badge: r
                        })
                    }),
                    n = t.filter(function(e) {
                        return null !== e
                    });
                return i.createElement("span", null, n)
            }
    },
    824: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ClipsChatCard_Clip"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "slug"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "clip"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "slug"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "url"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "curator"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "broadcaster"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "game"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "title"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thumbnailURL"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 233
            }
        };
        n.loc.source = {
            body: "query ClipsChatCard_Clip($slug: ID!) {\n  clip(slug: $slug) {\n    id\n    slug\n    url\n    curator {\n      displayName\n    }\n    broadcaster {\n      displayName\n    }\n    game {\n      displayName\n    }\n    title\n    thumbnailURL\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    825: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return l
        }), n.d(t, "a", function() {
            return c
        }), n.d(t, "c", function() {
            return u
        });
        var i = n(0),
            a = n(2),
            r = n(13),
            s = n(816),
            o = n(791),
            l = function(e) {
                a.m.track(r.SpadeEventType.ChatSettingsOpened, Object(o.a)(e))
            },
            c = function(e) {
                var t = i.__assign({}, Object(o.a)(e), {
                    setting_name: e.settingName,
                    new_value: e.newValue.toString()
                });
                a.m.track(r.SpadeEventType.ChatSettingsChanged, t)
            },
            u = function(e) {
                var t = i.__assign({}, Object(o.a)(e), {
                    setting_name: s.a.FollowerDuration,
                    new_value: e.newValue.toString(),
                    follower_mode_on: e.followerModeOn
                });
                a.m.track(r.SpadeEventType.ChatSettingsChanged, t)
            }
    },
    830: function(e, t, n) {
        "use strict";

        function i(e) {
            return Object(d.a)(p, {
                u: e
            })
        }

        function a(e, t) {
            return Object(d.a)(m, {
                url: e,
                text: t
            })
        }

        function r(e, t) {
            return Object(d.a)(h, {
                url: e,
                title: t
            })
        }

        function s(e) {
            return Object(d.a)(g, {
                url: e
            })
        }
        var o = n(0),
            l = n(1),
            c = n(2),
            u = n(842),
            d = n(123),
            p = "https://www.facebook.com/sharer/sharer.php",
            m = "https://www.twitter.com/share",
            h = "https://www.reddit.com/submit",
            g = "https://vk.com/share.php",
            f = n(3);
        n(871);
        n.d(t, "b", function() {
            return b
        }), n.d(t, "a", function() {
            return v
        });
        var b;
        ! function(e) {
            e[e.Twitter = 0] = "Twitter", e[e.Reddit = 1] = "Reddit", e[e.VKontakte = 2] = "VKontakte", e[e.Facebook = 3] = "Facebook", e[e.Copy = 4] = "Copy"
        }(b || (b = {}));
        var v = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.renderLink = function() {
                    var e = "social-button__link " + n.addSocialClassModifier("social-button__link");
                    return n.isLink() ? l.createElement("a", o.__assign({
                        href: n.getLinkTarget(),
                        target: "_blank",
                        className: e,
                        onClick: n.onShareClickHandler
                    }, Object(f._39)(n.props)), n.renderIcon()) : l.createElement("button", o.__assign({
                        onClick: n.copyPageUrl,
                        onMouseLeave: n.clearIsCopiedStatus,
                        className: e
                    }, Object(f._39)(n.props)), n.renderIcon())
                }, n.onShareClickHandler = function() {
                    n.props.onShareClick && n.props.onShareClick(n.props.type)
                }, n.clearIsCopiedStatus = function() {
                    n.setState({
                        isCopied: !1
                    })
                }, n.getUrl = function() {
                    return n.props.url || window.location.href
                }, n.copyPageUrl = function(e) {
                    e && e.preventDefault(), n.props.onShareClick && n.props.onShareClick(n.props.type), Object(u.a)(n.getUrl()), n.setState({
                        isCopied: !0
                    })
                }, n.renderIcon = function() {
                    var e = n.getAssetFromType();
                    return l.createElement(f.U, {
                        className: "social-button__icon " + n.addSocialClassModifier("social-button__icon")
                    }, l.createElement(f._8, {
                        asset: e,
                        width: 30,
                        height: 30
                    }))
                }, n.isLink = function() {
                    return n.props.type !== b.Copy
                }, n.getTooltipFromType = function() {
                    switch (n.props.type) {
                        case b.Twitter:
                            return "Twitter";
                        case b.Reddit:
                            return "Reddit";
                        case b.Facebook:
                            return "Facebook";
                        case b.VKontakte:
                            return "VKontakte";
                        case b.Copy:
                            return n.state.isCopied ? Object(c.d)("Copied", "SocialButton") : Object(c.d)("Copy to clipboard", "SocialButton");
                        default:
                            return ""
                    }
                }, n.getAssetFromType = function() {
                    switch (n.props.type) {
                        case b.Twitter:
                            return f._9.Twitter;
                        case b.Facebook:
                            return f._9.Facebook;
                        case b.VKontakte:
                            return f._9.VKontakte;
                        case b.Reddit:
                            return f._9.Reddit;
                        case b.Copy:
                        default:
                            return f._9.Copy
                    }
                }, n.addSocialClassModifier = function(e) {
                    switch (n.props.type) {
                        case b.Twitter:
                            return e + "--twitter";
                        case b.Reddit:
                            return e + "--reddit";
                        case b.Facebook:
                            return e + "--facebook";
                        case b.VKontakte:
                            return e + "--vkontakte";
                        case b.Copy:
                            return e + "--copy";
                        default:
                            return ""
                    }
                }, n.getLinkTarget = function() {
                    var e = n.props,
                        t = e.text,
                        o = e.type,
                        l = n.getUrl(),
                        c = t || "";
                    switch (o) {
                        case b.Reddit:
                            return r(l, c);
                        case b.VKontakte:
                            return s(l);
                        case b.Facebook:
                            return i(l);
                        case b.Twitter:
                            return a(l, c);
                        default:
                            return ""
                    }
                }, n.state = {
                    isCopied: !1
                }, n
            }
            return o.__extends(t, e), t.prototype.render = function() {
                return l.createElement(f.U, {
                    className: "social-button"
                }, l.createElement(f._30, {
                    label: this.getTooltipFromType(),
                    direction: f._32.Top
                }, this.renderLink()))
            }, t
        }(l.Component)
    },
    832: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "WatchAdModal_Redeeem"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "RedeemTrueXAdInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "redeemTrueXAd"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "grantedBits"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 114
            }
        };
        n.loc.source = {
            body: "mutation WatchAdModal_Redeeem($input:RedeemTrueXAdInput!) {\n  redeemTrueXAd(input:$input) {\n    grantedBits\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    833: function(e, t) {},
    834: function(e, t) {},
    835: function(e, t) {},
    836: function(e, t) {},
    837: function(e, t) {},
    838: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Bits_BuyCard_Offers"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "withChannel"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isLoggedIn"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "bitsOffers"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "skip"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "bitsOffersFragment"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "idSHA1"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bitsOffers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "bitsOffersFragment"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "withChannel"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cheerMinimumBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 528
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/bits/models/bits-offers-fragment.gql"\n\nquery Bits_BuyCard_Offers($withChannel: Boolean!, $isLoggedIn: Boolean!, $channelLogin: String!) {\n  bitsOffers @skip(if: $isLoggedIn) {\n    ...bitsOffersFragment\n  }\n  currentUser @include(if: $isLoggedIn) {\n    id\n    idSHA1\n    bitsBalance\n    bitsOffers {\n      ...bitsOffersFragment\n    }\n  }\n  user(login: $channelLogin) @include(if: $withChannel) {\n    id\n    displayName\n    cheer {\n      id\n      settings {\n        cheerMinimumBits\n      }\n    }\n  }\n}\n',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n(802).definitions)), e.exports = i
    },
    839: function(e, t) {},
    840: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return i
        }), n.d(t, "a", function() {
            return a
        }), n.d(t, "c", function() {
            return r
        });
        var i = 250,
            a = 6,
            r = "https://m.media-amazon.com/images/G/01/twitch/HalloweenCrateOpeningVideo._CB514601682_.mp4"
    },
    841: function(e, t, n) {
        "use strict";

        function i(e) {
            if (e.action && e.userId) {
                var t = {
                    location: s.PageviewLocation.Channel,
                    action: e.action,
                    target: e.target,
                    type: e.type,
                    channel_id: e.channelId,
                    user_id: e.userId,
                    time: Date.now()
                };
                r.n.tracking.track(s.SpadeEventType.CrateNotificationAction, t)
            }
        }
        n.d(t, "a", function() {
            return a
        }), n.d(t, "b", function() {
            return o
        }), n.d(t, "c", function() {
            return l
        }), t.d = i;
        var a, r = n(2),
            s = n(13);
        ! function(e) {
            e.Close = "close", e.DontShowThis = "dont_show_this", e.LearnMore = "learn_more", e.OpenLater = "open_later", e.OpenNow = "open_now", e.Timeout = "timeout", e.TryBeta = "try_beta", e.View = "view"
        }(a || (a = {}));
        var o;
        ! function(e) {
            e.Inventory = "inventory", e.OpenCrate = "open_crate"
        }(o || (o = {}));
        var l;
        ! function(e) {
            e.Ftue = "ftue", e.ReceiveCrate = "receive_crate", e.BitsIntro = "bits_intro"
        }(l || (l = {}))
    },
    842: function(e, t, n) {
        "use strict";

        function i(e) {
            var t = document.createElement("textarea");
            t.style.position = "fixed", t.style.top = "0", t.style.left = "0", t.style.width = "2em", t.style.height = "2em", t.style.padding = "0", t.style.border = "none", t.style.outline = "none", t.style.boxShadow = "none", t.style.background = "transparent", t.value = e, document.body.appendChild(t), t.select();
            var n = !0;
            try {
                n = document.execCommand("copy")
            } catch (e) {
                n = !1
            }
            return document.body.removeChild(t), n
        }
        t.a = i
    },
    844: function(e, t) {},
    845: function(e, t) {},
    846: function(e, t, n) {
        "use strict";

        function i(e, t) {
            return e === r.SECOND ? Object(s.d)("{secondCount, plural, one {# second} other {# seconds}}", {
                secondCount: t
            }, "formatDuration") : e === r.MINUTE ? Object(s.d)("{minuteCount, plural, one {# minute} other {# minutes}}", {
                minuteCount: t
            }, "formatDuration") : e === r.DAY ? Object(s.d)("{dayCount, plural, one {# day} other {# days}}", {
                dayCount: t
            }, "formatDuration") : e === r.HOUR ? Object(s.d)("{hourCount, plural, one {# hour} other {# hours}}", {
                hourCount: t
            }, "formatDuration") : e === r.WEEK ? Object(s.d)("{weekCount, plural, one {# week} other {# weeks}}", {
                weekCount: t
            }, "formatDuration") : e === r.MONTH ? Object(s.d)("{monthCount, plural, one {# month} other {# months}}", {
                monthCount: t
            }, "formatDuration") : ""
        }

        function a(e) {
            if (e < 60) return i(r.SECOND, e);
            var t = Math.floor(e / 60),
                n = e % 60;
            if (t < 60) return n ? i(r.MINUTE, t) + " " + i(r.SECOND, n) : i(r.MINUTE, t);
            var a = Math.floor(t / 60);
            if (t %= 60, a < 24) return t ? i(r.HOUR, a) + " " + i(r.MINUTE, t) : i(r.HOUR, a);
            var s = Math.floor(a / 24);
            if (a %= 24, s < 7) return a ? i(r.DAY, s) + " " + i(r.HOUR, a) : i(r.DAY, s);
            if (s <= 26) {
                var o = Math.floor(s / 7);
                return s %= 7, s ? i(r.WEEK, o) + " " + i(r.DAY, s) : i(r.WEEK, o)
            }
            var l = Math.round((s + 3) / 30);
            return i(r.MONTH, l)
        }
        t.a = a;
        var r, s = n(2);
        ! function(e) {
            e[e.SECOND = 0] = "SECOND", e[e.MINUTE = 1] = "MINUTE", e[e.HOUR = 2] = "HOUR", e[e.DAY = 3] = "DAY", e[e.WEEK = 4] = "WEEK", e[e.MONTH = 5] = "MONTH"
        }(r || (r = {}))
    },
    847: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        });
        var i = n(1),
            a = (n.n(i), n(362)),
            r = function(e) {
                var t, n = e.emote,
                    r = n.alt || "";
                return n.cheerAmount && (r += " " + n.cheerAmount.toString(), t = i.createElement("strong", {
                    className: "chat-line__message--cheer-amount",
                    style: {
                        color: n.cheerColor
                    }
                }, n.cheerAmount)), i.createElement(a.a, {
                    alt: r,
                    cheerText: t,
                    className: "chat-line__message--emote",
                    srcKey: "1x",
                    srcSet: n.images
                })
            }
    },
    848: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(1),
            r = n(2),
            s = function(e) {
                function t(t) {
                    var n = e.call(this) || this;
                    return n.handleImageError = function() {
                        n.setState({
                            imageURL: r.a.defaultStreamPreviewURL
                        })
                    }, n.state = {
                        imageURL: t.imageURL
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement("img", {
                        src: this.state.imageURL,
                        alt: this.state.imageURL,
                        onError: this.handleImageError,
                        className: this.props.className
                    })
                }, t
            }(a.Component);
        n.d(t, "a", function() {
            return s
        })
    },
    849: function(e, t, n) {
        e.exports = n.p + "assets/halloween_banner-4cd26b58841153f5c3fa6488f22e0082.png"
    },
    851: function(e, t, n) {
        "use strict";
        var i = n(877);
        n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "b", function() {
            return i.b
        }), n.d(t, "a", function() {
            return i.a
        })
    },
    852: function(e, t, n) {
        "use strict";

        function i() {
            return Object(o.d)("Unable to ban user", "BlockUserMutation")
        }

        function a(e) {
            var t = this;
            return Object(l.a)(m, {
                props: function(n) {
                    return {
                        onBanUser: function(a, l) {
                            return void 0 === l && (l = null), s.__awaiter(t, void 0, void 0, function() {
                                var t, m, h, g, f, b;
                                return s.__generator(this, function(s) {
                                    switch (s.label) {
                                        case 0:
                                            if (t = l ? p.a.Timeout : p.a.Ban, m = e(n.ownProps), h = m.channelID, g = m.onPushMessage, !n.mutate) return [3, 5];
                                            s.label = 1;
                                        case 1:
                                            return s.trys.push([1, 3, , 4]), [4, n.mutate(Object(c.a)({
                                                channelID: h,
                                                bannedUserLogin: a,
                                                expiresIn: l && r(l)
                                            }))];
                                        case 2:
                                            return s.sent(), f = Object(d.a)(t, a, null, l), g && g(f), [2, f];
                                        case 3:
                                            throw b = s.sent(), o.i.error(b, "Unable to ban user"), g && g(Object(u.a)(i())), new Error(i());
                                        case 4:
                                            return [3, 6];
                                        case 5:
                                            throw g && g(Object(u.a)(i())), new Error(i());
                                        case 6:
                                            return [2]
                                    }
                                })
                            })
                        }
                    }
                }
            })
        }

        function r(e) {
            if (!e) return "0s";
            var t = e,
                n = "";
            if (t > v) {
                var i = Math.floor(t / v);
                t -= i * v, n += i + "mo"
            }
            if (t > b) {
                var a = Math.floor(t / b);
                t -= a * b, n += a + "w"
            }
            if (t > f) {
                var r = Math.floor(t / f);
                t -= r * f, n += r + "d"
            }
            if (t > g) {
                var s = Math.floor(t / g);
                t -= s * g, n += s + "h"
            }
            if (t > h) {
                var o = Math.floor(t / h);
                t -= o * h, n += o + "m"
            }
            return t > 0 && (n += t + "s"), n
        }
        t.a = a;
        var s = n(0),
            o = n(2),
            l = n(7),
            c = n(22),
            u = n(801),
            d = n(822),
            p = n(754),
            m = n(860),
            h = (n.n(m), 60),
            g = 60 * h,
            f = 24 * g,
            b = 7 * f,
            v = 4 * b
    },
    856: function(e, t) {},
    857: function(e, t) {},
    858: function(e, t) {},
    859: function(e, t) {},
    860: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_BanUserFromChatRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BanUserFromChatRoomInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "banUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "createdAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 148
            }
        };
        n.loc.source = {
            body: "mutation Chat_BanUserFromChatRoom($input: BanUserFromChatRoomInput!) {\n  banUserFromChatRoom(input: $input) {\n    ban {\n      createdAt\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    861: function(e, t, n) {
        "use strict";

        function i(e) {
            var t = c.createElement(P._21, {
                    bold: !0,
                    type: P._26.Span
                }, c.createElement("span", {
                    style: {
                        color: e.chatColor
                    }
                }, Object(R.a)(e.login, e.displayName))),
                n = null;
            return e.editAppearance || (n = c.createElement(P.U, {
                margin: {
                    top: 1
                }
            }, c.createElement("div", {
                className: "chat-settings__edit-button",
                onClick: e.onClickEdit,
                "data-test-selector": H
            }, Object(D.d)("Edit Appearance", "ChatSettings")))), c.createElement(P._17, {
                background: P.m.Base,
                color: P.F.Base,
                display: P.H.InlineFlex,
                flexDirection: P.J.Column,
                fullWidth: !0
            }, c.createElement(P._21, {
                color: P.F.Alt2,
                transform: P._25.Uppercase
            }, Object(D.d)("Name Display", "ChatSettings")), c.createElement(P.U, {
                margin: {
                    top: 2
                }
            }, e.userBadges && e.userBadges.map(function(e) {
                return c.createElement(B.a, {
                    key: e.id,
                    badge: e
                })
            }), t), n)
        }

        function a() {
            return {}
        }

        function r(e) {
            return Object(p.bindActionCreators)({
                showReportUserModal: function(e) {
                    var t = l.__rest(e, []);
                    return Object(W.d)(G.a, t)
                }
            }, e)
        }

        function s(e) {
            return {
                darkModeEnabled: Object(S.a)(e) === m.a.Dark,
                followerModeDuration: e.chat.followerDuration,
                followerModeEnabled: e.chat.followerMode,
                lastUsedFollowerDurations: e.chat.lastUsedFollowerDurations,
                showModerationIcons: e.chat.showModIcons,
                showTimestamps: e.chat.showTimestamps,
                slowModeEnabled: e.chat.slowMode,
                theatreModeEnabled: e.ui.theatreModeEnabled,
                isLoggedIn: Object(k.d)(e)
            }
        }

        function o(e) {
            return Object(p.bindActionCreators)({
                onChatHide: function() {
                    return y.E()
                },
                onChatUnhide: function() {
                    return y.G()
                },
                onFollowerModeDisable: function() {
                    return y.u()
                },
                onFollowerModeDurationChange: function(e) {
                    return y.r(e)
                },
                onFollowerModeDurationPreferenceChange: function(e, t) {
                    return y.s(e, t)
                },
                onFollowerModeEnable: function() {
                    return y.z()
                },
                onModIconsDisable: function() {
                    return y.v()
                },
                onModIconsEnable: function() {
                    return y.A()
                },
                onSlowModeDisable: function() {
                    return y.w()
                },
                onSlowModeEnable: function() {
                    return y.B()
                },
                onTimestampsDisable: function() {
                    return y.y()
                },
                onTimestampsEnable: function() {
                    return y.D()
                },
                onShowViewerCard: C.d,
                onThemeChanged: function(e) {
                    return Object(v.b)(e, void 0, !1)
                },
                login: function() {
                    return Object(b.f)(f.a.Chat)
                }
            }, e)
        }
        var l = n(0),
            c = n(1),
            u = n(8),
            d = n(21),
            p = n(10),
            m = n(36),
            h = n(796),
            g = n(783),
            f = n(50),
            b = n(34),
            v = n(125),
            k = n(18),
            S = n(44),
            y = n(351),
            C = n(775),
            _ = n(798),
            E = n(816),
            N = n(776),
            w = n(821),
            T = n(825),
            D = n(2),
            I = n(29),
            U = n(60),
            O = n(7),
            M = n(4),
            F = ["#FF0000", "#0000FF", "#008000", "#B22222", "#FF7F50", "#9ACD32", "#FF4500", "#2E8B57", "#DAA520", "#D2691E", "#5F9EA0", "#1E90FF", "#FF69B4", "#8A2BE2", "#00FF7F"],
            P = n(3),
            x = (n(862), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onColorSelected = function(e) {
                        var n = e.currentTarget.getAttribute("data-color");
                        n && t.props.onColorSelected(n)
                    }, t
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = F.map(function(t) {
                            var n = {
                                "color-chooser": !0,
                                "color-chooser--selected": t === e.props.selectedColor
                            };
                            return c.createElement("div", {
                                key: t,
                                "data-color": t,
                                onClick: e.onColorSelected,
                                className: M(n),
                                style: {
                                    backgroundColor: t
                                },
                                "data-test-selector": "color_swatch_" + t
                            })
                        }),
                        n = c.createElement(P._21, {
                            transform: P._25.Uppercase,
                            color: P.F.Alt2
                        }, Object(D.d)("Name Color", "ChatSettings"));
                    return this.props.borderTop && (n = c.createElement(P._17, {
                        margin: {
                            top: 2
                        },
                        borderTop: !0,
                        padding: {
                            top: 2
                        }
                    }, n)), c.createElement("div", null, c.createElement(P._17, {
                        margin: {
                            bottom: 1
                        },
                        background: P.m.Base,
                        color: P.F.Base,
                        display: P.H.InlineFlex,
                        flexDirection: P.J.Column,
                        fullWidth: !0
                    }, n), c.createElement(P.U, {
                        margin: {
                            y: 1
                        }
                    }, t, c.createElement(P._21, {
                        fontSize: P.L.Size7
                    }, c.createElement("a", {
                        href: "https://twitch.tv/products/turbo?ref=more_colors_direct"
                    }, Object(D.d)("more colors →", "ChatSettings")))))
                }, t
            }(c.Component)),
            L = n(20),
            A = n(863),
            j = (n(864), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.onGlobalBadgeClicked = function(e) {
                        var n = e.currentTarget.getAttribute("data-badge");
                        t.setGlobalBadge(t.props.userLogin, n || "")
                    }, t.onChannelBadgeClicked = function(e) {
                        var n = e.currentTarget.getAttribute("data-badge");
                        t.setChannelBadge(t.props.channelLogin, t.props.userLogin, n || "")
                    }, t
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    return this.props.data && !this.props.data.loading && this.props.data.user && this.props.data.currentUser ? c.createElement("div", null, c.createElement(x, {
                        selectedColor: this.props.userChatColor,
                        onColorSelected: this.props.onColorSelected,
                        borderTop: !0
                    }), this.getBadgeChooser()) : null
                }, t.prototype.getBadgeChooser = function() {
                    var e = this;
                    if (this.props.data) {
                        var t = this.props.data.user.self.availableBadges,
                            n = this.props.data.user.self.selectedBadge,
                            i = this.props.data.currentUser.availableBadges,
                            a = this.props.data.currentUser.selectedBadge;
                        if (!t) return null;
                        var r = void 0 === this.state.channelBadgeID && n ? n.setID : this.state.channelBadgeID,
                            s = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": !r
                            },
                            o = Object(D.d)("No channel badges :(", "ChatSettings");
                        t && t.length > 0 && (o = t.map(function(t) {
                            var i = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": n && t.setID === r
                            };
                            return c.createElement("div", {
                                "data-badge": t.setID,
                                onClick: e.onChannelBadgeClicked,
                                key: t.setID + "/" + t.version,
                                className: M(i),
                                "data-test-selector": "channel_badge_" + t.setID
                            }, c.createElement(P._30, {
                                label: t.title
                            }, c.createElement("img", {
                                alt: t.title,
                                src: t.image1x,
                                srcSet: t.image1x + " 1x, " + t.image2x + " 2x, " + t.image4x + " 4x"
                            })))
                        }), o.push(c.createElement("div", {
                            key: "none",
                            "data-badge": "",
                            onClick: this.onChannelBadgeClicked,
                            className: M(s),
                            "data-test-selector": "channel_badge_none"
                        }, c.createElement(P._30, {
                            label: Object(D.d)("Same as Global", "ChatSettings")
                        }, c.createElement("div", {
                            className: "edit-appearance__badge-chooser__none"
                        }, c.createElement(P._8, {
                            asset: P._9.Global
                        }))))));
                        var l = void 0 === this.state.globalBadgeID && a ? a.setID : this.state.globalBadgeID,
                            u = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": !l
                            },
                            d = Object(D.d)("No global badges :(", "ChatSettings");
                        return i && i.length > 0 && (d = i.map(function(t) {
                            var n = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": a && t.setID === l
                            };
                            return c.createElement("div", {
                                "data-badge": t.setID,
                                onClick: e.onGlobalBadgeClicked,
                                key: t.setID + "/" + t.version,
                                className: M(n),
                                "data-test-selector": "global_badge_" + t.setID
                            }, c.createElement(P._30, {
                                label: t.title
                            }, c.createElement("img", {
                                alt: t.title,
                                src: t.image1x,
                                srcSet: t.image1x + " 1x, " + t.image2x + " 2x, " + t.image4x + " 4x"
                            })))
                        }), d.push(c.createElement("div", {
                            key: "none",
                            "data-badge": "",
                            onClick: this.onGlobalBadgeClicked,
                            className: M(u),
                            "data-test-selector": "global_badge_none"
                        }, c.createElement(P._30, {
                            label: Object(D.d)("None", "ChatSettings")
                        }, c.createElement("div", {
                            className: "edit-appearance__badge-chooser__none"
                        }, c.createElement(P._8, {
                            asset: P._9.Ban
                        })))))), c.createElement("div", null, c.createElement(P._17, {
                            background: P.m.Base,
                            color: P.F.Base,
                            display: P.H.InlineFlex,
                            flexDirection: P.J.Column,
                            fullWidth: !0
                        }, c.createElement(P._17, {
                            margin: {
                                top: 2
                            },
                            padding: {
                                top: 2
                            },
                            borderTop: !0
                        }, c.createElement(P._30, {
                            align: P._31.Left,
                            label: Object(D.d)("Your global badge is shown when chatting and whispering.", "ChatSettings"),
                            width: 175
                        }, c.createElement(P._21, {
                            color: P.F.Alt2,
                            transform: P._25.Uppercase
                        }, Object(D.d)("Global Badge [?]", "ChatSettings")))), c.createElement(P.U, {
                            margin: {
                                y: 1
                            },
                            padding: {
                                top: 1
                            },
                            display: P.H.Flex
                        }, d)), c.createElement(P._17, {
                            background: P.m.Base,
                            color: P.F.Base,
                            display: P.H.InlineFlex,
                            flexDirection: P.J.Column,
                            fullWidth: !0
                        }, c.createElement(P._17, {
                            margin: {
                                top: 2
                            },
                            padding: {
                                top: 2
                            },
                            borderTop: !0
                        }, c.createElement(P._30, {
                            align: P._31.Left,
                            label: Object(D.d)("Change the badge shown when chatting in this channel.", "ChatSettings"),
                            width: 175
                        }, c.createElement(P._21, {
                            color: P.F.Alt2,
                            transform: P._25.Uppercase
                        }, Object(D.d)("Channel Badge [?]", "ChatSettings")))), c.createElement(P.U, {
                            margin: {
                                y: 1
                            },
                            padding: {
                                top: 1
                            },
                            display: P.H.Flex
                        }, o)))
                    }
                }, t.prototype.setChannelBadge = function(e, t, n) {
                    return l.__awaiter(this, void 0, void 0, function() {
                        var i, a, r;
                        return l.__generator(this, function(s) {
                            switch (s.label) {
                                case 0:
                                    return i = {
                                        "Client-ID": D.n.config.legacyClientID,
                                        Accept: "application/vnd.twitchtv.v4+json; charset=UTF-8",
                                        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                                        "Accept-Language": "en-us",
                                        Authorization: "OAuth " + this.props.authToken
                                    }, a = "https://api.twitch.tv/kraken/users/" + t + "/chat/channels/" + e + "/badges", [4, fetch(a, {
                                        method: "PUT",
                                        body: L.stringify({
                                            selected_badge: n
                                        }),
                                        headers: i
                                    })];
                                case 1:
                                    return r = s.sent(), r && r.ok && (this.props.onBadgesChanged(), this.setState({
                                        channelBadgeID: n
                                    })), [2]
                            }
                        })
                    })
                }, t.prototype.setGlobalBadge = function(e, t) {
                    return l.__awaiter(this, void 0, void 0, function() {
                        var n, i, a;
                        return l.__generator(this, function(r) {
                            switch (r.label) {
                                case 0:
                                    return n = {
                                        "Client-ID": D.n.config.legacyClientID,
                                        Accept: "application/vnd.twitchtv.v4+json; charset=UTF-8",
                                        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                                        "Accept-Language": "en-us",
                                        Authorization: "OAuth " + this.props.authToken
                                    }, i = "https://api.twitch.tv/kraken/users/" + e + "/chat/badges", [4, fetch(i, {
                                        method: "PUT",
                                        body: L.stringify({
                                            selected_badge: t
                                        }),
                                        headers: n
                                    }).catch(console.error)];
                                case 1:
                                    return a = r.sent(), a && a.ok && (this.props.onBadgesChanged(), this.setState({
                                        globalBadgeID: t
                                    })), [2]
                            }
                        })
                    })
                }, t = l.__decorate([Object(O.a)(A, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                })], t)
            }(c.Component)),
            R = n(51),
            B = n(781),
            H = "edit-appearanmce-button",
            V = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    return c.createElement(P.U, {
                        "data-toggle-balloon-id": "raids-follower-only-tooltip",
                        margin: {
                            left: .5
                        },
                        position: P._2.Relative
                    }, c.createElement(P._30, {
                        align: P._31.Right,
                        direction: P._32.Top,
                        display: P.H.InlineFlex,
                        label: this.props.text,
                        width: 175,
                        show: !0
                    }, c.createElement(P.P, {
                        alignItems: P.c.Center,
                        className: "chat-settings__highlight-indicator",
                        display: P.H.InlineFlex,
                        justifyContent: P.T.Center
                    }, c.createElement(P._21, {
                        color: P.F.Overlay,
                        fontSize: P.L.Size8,
                        type: P._26.Span,
                        "data-test-selector": "raids-follower-only-tooltip"
                    }, "i"))))
                }, t
            }(c.Component),
            W = n(49),
            G = n(769),
            q = n(11),
            z = n(757),
            $ = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.targetChannelID = t.props.targetChannelID, t
                }
                return l.__extends(t, e), t.fetchRecentRaidsList = function(e) {
                    return l.__awaiter(this, void 0, void 0, function() {
                        var t, n;
                        return l.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return i.trys.push([0, 2, , 3]), [4, z.a.get("/kraken/raids?client_id=" + D.a.authClientID + "&api_version=" + D.a.defaultAPIVersion + "&target_id=" + e)];
                                case 1:
                                    return t = i.sent(), [2, this.deserialize(t)];
                                case 2:
                                    return n = i.sent(), D.i.error(n, "Couldn't fetch raids list"), [2, []];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, t.deserialize = function(e) {
                    var t = [];
                    if (e.body && e.body.raids) {
                        for (var n in e.body.raids)
                            if (n.hasOwnProperty) {
                                var i = {
                                    raidID: e.body.raids[n]._id,
                                    raidAt: e.body.raids[n].raid_at,
                                    userID: e.body.raids[n].creator_user._id,
                                    name: e.body.raids[n].creator_user.name
                                };
                                t.push(i)
                            }
                        return t
                    }
                    return []
                }, t
            }(c.Component),
            J = n(22),
            K = n(778),
            Q = n(793),
            Y = n(865),
            X = n(866),
            Z = (n(867), n(868)),
            ee = function(e, t, n) {
                var i = e.readQuery({
                    query: X,
                    variables: {
                        targetUserID: n.raiderUserID,
                        channelID: n.channelID
                    }
                });
                t && t.data && (i.chatRoomBanStatus = {
                    isPermanent: !0,
                    __typename: "ChatRoomBanStatus"
                }), e.writeQuery({
                    query: X,
                    variables: {
                        targetUserID: n.raiderUserID,
                        channelID: n.channelID
                    },
                    data: i
                })
            },
            te = function(e, t) {
                var n = e.readQuery({
                        query: X,
                        variables: {
                            targetUserID: t.raiderUserID,
                            channelID: t.channelID
                        }
                    }),
                    i = l.__assign({}, n, {
                        chatRoomBanStatus: null
                    });
                e.writeQuery({
                    query: X,
                    variables: {
                        targetUserID: t.raiderUserID,
                        channelID: t.channelID
                    },
                    data: i
                })
            },
            ne = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onUsernameClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-username"),
                            i = e.currentTarget.getAttribute("data-raid-id") || "";
                        n && t.props.onUsernameClick(n, Q.a.recent_raids, i)
                    }, t.onBanButtonClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-channel-id") || "",
                            i = e.currentTarget.getAttribute("data-target-user-login") || "";
                        (0, t.props.banUser)(Object(J.a)({
                            channelID: n,
                            bannedUserLogin: i
                        }))
                    }, t.onUnbanButtonClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-channel-id") || "",
                            i = e.currentTarget.getAttribute("data-target-user-login") || "";
                        (0, t.props.unbanUser)(Object(J.a)({
                            channelID: n,
                            bannedUserLogin: i
                        }))
                    }, t
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    return c.createElement(P.U, {
                        key: "recent-raids-layout2-" + this.props.raiderUserID,
                        className: "recent-raids-item",
                        flexDirection: P.J.Row,
                        display: P.H.Flex,
                        fullWidth: !0
                    }, c.createElement(P.U, {
                        flexDirection: P.J.Row,
                        display: P.H.Flex,
                        fullWidth: !0,
                        justifyContent: P.T.Between
                    }, c.createElement(P._21, {
                        bold: !0
                    }, c.createElement("a", {
                        className: "recent-raids-item__name",
                        "data-username": this.props.channelLogin,
                        "data-raid-id": this.props.raidID,
                        onClick: this.onUsernameClick,
                        href: "#"
                    }, this.props.channelLogin)), c.createElement(P.U, {
                        position: P._2.Relative
                    }, c.createElement(P.U, {
                        className: "recent-raids-item__timestamp"
                    }, Object(K.p)(Date.parse(this.props.timestamp))), this.getCardSlideInContent())))
                }, t.prototype.getCardSlideInContent = function() {
                    if (!this.props.slideInContent) return null;
                    var e = null;
                    return e = this.props.data.chatRoomBanStatus && this.props.data.chatRoomBanStatus.isPermanent ? c.createElement(P.u, {
                        key: "recent-raids-ban-button-" + this.props.raiderUserID,
                        size: P.x.Small,
                        type: P.z.Text,
                        onClick: this.onUnbanButtonClick,
                        "data-a-target": "recent-raid-item-button",
                        "data-raid-id": this.props.raidID,
                        "data-target-user-login": this.props.raiderLogin,
                        "data-target-user-id": this.props.raiderUserID,
                        "data-channel-id": this.props.channelID
                    }, Object(D.d)("Unban", "RecentRaid")) : c.createElement(P.u, {
                        key: "recent-raids-ban-button-" + this.props.raiderUserID,
                        size: P.x.Small,
                        type: P.z.Text,
                        onClick: this.onBanButtonClick,
                        "data-a-target": "recent-raid-item-button",
                        "data-raid-id": this.props.raidID,
                        "data-target-user-login": this.props.raiderLogin,
                        "data-target-user-id": this.props.raiderUserID,
                        "data-channel-id": this.props.channelID
                    }, Object(D.d)("Ban", "RecentRaid")), c.createElement(P.U, {
                        key: "recent-raids-layout-" + this.props.raiderUserID,
                        className: "recent-raids-item__hover-content",
                        zIndex: P._38.Above,
                        "data-a-target": "recent-raids-item-hover"
                    }, this.props.slideInContent, e)
                }, t = l.__decorate([Object(O.a)(X, {
                    options: function(e) {
                        return {
                            variables: {
                                targetUserID: e.raiderUserID,
                                channelID: e.channelID
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                }), Object(O.a)(Y, {
                    name: "banUser",
                    options: function(e) {
                        return {
                            update: function(t, n) {
                                ee(t, n, e)
                            }
                        }
                    }
                }), Object(O.a)(Z, {
                    name: "unbanUser",
                    options: function(e) {
                        return {
                            update: function(t) {
                                te(t, e)
                            }
                        }
                    }
                })], t)
            }(c.Component),
            ie = ne,
            ae = n(759),
            re = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.onReportButtonClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-raid-id") || "",
                            i = e.currentTarget.getAttribute("data-target-user-id") || "",
                            a = e.currentTarget.getAttribute("data-target-user-login") || "";
                        t.props.showReportUserModal({
                            reportContext: {
                                contentType: ae.a.Raid,
                                targetUserID: i,
                                contentID: n,
                                extra: JSON.stringify({
                                    channel_id: i.toString()
                                })
                            },
                            title: Object(D.d)("Report {channelDisplayName}", {
                                channelDisplayName: a
                            }, "ReportUserModal")
                        })
                    }, t
                }
                return l.__extends(t, e), t.prototype.componentDidMount = function() {
                    return l.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return l.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, $.fetchRecentRaidsList(this.props.targetChannelID)];
                                case 1:
                                    return e = t.sent(), this.setState({
                                        raidChannels: e
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    var e = [],
                        t = [],
                        n = {};
                    if (void 0 !== this.state.raidChannels) {
                        0 === this.state.raidChannels.length && e.push(c.createElement(P._21, {
                            key: "recent-raids-no-raids",
                            type: P._26.P
                        }, Object(D.d)("You have no recent raids", "RecentRaids")));
                        for (var i in this.state.raidChannels)
                            if (i.hasOwnProperty) {
                                var a = this.state.raidChannels[i];
                                this.state.raidChannels.hasOwnProperty(i) && void 0 === n[a.userID] && (t.push(c.createElement(ie, {
                                    key: "recent-raids-item-" + a.userID,
                                    slideInContent: [c.createElement(P._17, {
                                        key: "recent-raids-item-report-area-" + a.userID,
                                        color: P.F.Alt2,
                                        display: P.H.InlineFlex
                                    }, c.createElement(P.u, {
                                        key: "recent-raid-report-button",
                                        size: P.x.Small,
                                        type: P.z.Text,
                                        onClick: this.onReportButtonClick,
                                        "data-a-target": "recent-raid-item-button",
                                        "data-raid-id": a.raidID,
                                        "data-target-user-login": a.name,
                                        "data-target-user-id": a.userID
                                    }, Object(D.d)("Report", "RecentRaid")), c.createElement(P._30, {
                                        align: P._31.Right,
                                        width: 150,
                                        label: Object(D.d)("Banning a user prevents them from future chatting or raiding", "RecentRaid")
                                    }))],
                                    timestamp: a.raidAt,
                                    channelLogin: a.name,
                                    raiderUserID: a.userID,
                                    channelID: this.props.targetChannelID,
                                    raiderLogin: a.name,
                                    raidID: a.raidID,
                                    onUsernameClick: this.props.onUsernameClick,
                                    showReportUserModal: this.props.showReportUserModal
                                })), n[a.userID] = !0)
                            }
                    }
                    var r = null;
                    return this.props.recentRaids ? c.createElement(P.U, {
                        key: "recent-raids"
                    }, c.createElement(P.U, {
                        margin: {
                            bottom: 2
                        }
                    }, c.createElement(P._21, {
                        color: P.F.Link,
                        type: P._26.Span
                    }, c.createElement(q.a, {
                        to: {
                            pathname: "/broadcast/dashboard/settings/raids"
                        }
                    }, Object(D.d)("Manage Raid Settings", "RecentRaids")))), e, t) : (r = c.createElement(P.U, {
                        key: "recent-raids",
                        margin: {
                            top: 1,
                            bottom: 1
                        },
                        display: P.H.Flex,
                        justifyContent: P.T.Between,
                        alignItems: P.c.Center
                    }, c.createElement("span", {
                        className: "chat-settings__edit-button",
                        onClick: this.props.onClickRecentRaids,
                        "data-test-selector": "recent-raids-button"
                    }, Object(D.d)("See Recent Raids", "ChatSettings")), this.props.tooltipText && c.createElement(P.U, {
                        position: P._2.Relative
                    }, c.createElement(P._30, {
                        align: P._31.Right,
                        direction: P._32.Top,
                        display: P.H.InlineFlex,
                        label: this.props.tooltipText,
                        width: 175,
                        show: !0
                    }, c.createElement(P.P, {
                        alignItems: P.c.Center,
                        className: "chat-settings__highlight-indicator",
                        display: P.H.InlineFlex,
                        justifyContent: P.T.Center,
                        margin: {
                            left: .5
                        }
                    }, c.createElement(P._21, {
                        color: P.F.Overlay,
                        fontSize: P.L.Size8,
                        type: P._26.Span
                    }, "i"))))), c.createElement(P.U, null, r))
                }, t
            }(c.Component),
            se = Object(u.a)(a, r)(re),
            oe = n(869),
            le = (n(870), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        recentRaids: !1,
                        chatColor: null,
                        raidsTooltipDismissed: !1
                    }, t.dismissRaidsTooltip = function() {
                        t.setState({
                            raidsTooltipDismissed: !0
                        })
                    }, t.handleFollowerDurationClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-duration");
                        n && t.props.onFollowerDurationChange(parseInt(n, 10))
                    }, t.onClickEdit = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.props.onClickEditAppearance()
                    }, t.onClickRecentRaids = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.setState({
                            recentRaids: !0
                        })
                    }, t.onClickBack = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.props.onLeaveEditAppearance(), t.setState({
                            recentRaids: !1
                        })
                    }, t.onColorSelected = function(e) {
                        t.setState({
                            chatColor: e
                        }), t.props.onColorSelected(e)
                    }, t.onBadgesChanged = function() {
                        return l.__awaiter(t, void 0, void 0, function() {
                            var e, t, n;
                            return l.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        return !this.props.data || this.props.data.loading ? [3, 2] : [4, this.props.data.refetch()];
                                    case 1:
                                        if (e = i.sent(), e.data) {
                                            if (t = e.data, !t.user.self) return [2];
                                            n = {}, t.user.self.displayBadges.forEach(function(e) {
                                                n[e.setID] = e.version
                                            }), D.n.tmi.client.updateChannelBadges(this.props.channelLogin, n)
                                        }
                                        i.label = 2;
                                    case 2:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    if (!this.props.data || this.props.data.loading) return null;
                    var e = null;
                    if (this.props.isLoggedIn && this.props.data.currentUser) {
                        var t = this.props.data.user.self ? this.props.data.user.self.displayBadges : [];
                        e = c.createElement(i, {
                            key: "name-display",
                            login: this.props.data.currentUser.login,
                            displayName: this.props.data.currentUser.displayName,
                            chatColor: this.state.chatColor || this.props.data.currentUser.chatColor,
                            editAppearance: this.props.editAppearance,
                            userBadges: t,
                            onClickEdit: this.onClickEdit
                        })
                    }
                    var n = [];
                    return this.props.isLoggedIn ? this.props.editAppearance ? n = [c.createElement(P.P, {
                        margin: {
                            bottom: 2
                        },
                        key: "chat-settings-edit-inject"
                    }, c.createElement("div", {
                        key: "chat-settings-edit",
                        className: "chat-settings__edit-button",
                        onClick: this.onClickBack,
                        "data-test-selector": "chat-settings-back-button"
                    }, c.createElement(P._21, {
                        color: P.F.Link,
                        type: P._26.Span
                    }, c.createElement(P._8, {
                        asset: P._9.ChatSettingsBack,
                        height: 10,
                        width: 10
                    }), Object(D.d)("Back", "ChatSettingsAppearance")))), e, c.createElement(j, {
                        key: "edit-appearance",
                        onColorSelected: this.onColorSelected,
                        editAppearance: this.props.editAppearance,
                        authToken: this.props.authToken,
                        channelLogin: this.props.channelLogin,
                        userChatColor: this.state.chatColor || this.props.data.currentUser.chatColor,
                        userLogin: this.props.data.currentUser.login,
                        onBadgesChanged: this.onBadgesChanged
                    })] : this.state.recentRaids ? n = [c.createElement(P.P, {
                        key: "chat-settings-recent-raids"
                    }, c.createElement("div", {
                        key: "chat-settings-edit",
                        className: "chat-settings__recent-raids-button",
                        onClick: this.onClickBack,
                        "data-test-selector": "chat-settings-back-button"
                    }, c.createElement(P._21, {
                        color: P.F.Link,
                        type: P._26.Span
                    }, c.createElement(P._8, {
                        asset: P._9.ChatSettingsBack,
                        height: 10,
                        width: 10
                    }), Object(D.d)("Back", "ChatSettingsRecentRaids")), c.createElement(P.U, {
                        margin: {
                            top: 2
                        }
                    }, c.createElement(P._21, {
                        key: "recent-raids-title",
                        color: P.F.Alt2,
                        transform: P._25.Uppercase
                    }, Object(D.d)("Recent Raids", "ChatSettings"))))), c.createElement(se, {
                        key: "recent-raids",
                        targetChannelID: this.props.channelID,
                        recentRaids: this.state.recentRaids,
                        onClickRecentRaids: this.onClickRecentRaids,
                        onUsernameClick: this.props.onShowViewerCard
                    })] : (n = [e, this.renderUniversalOptions()], this.props.isCurrentUserModerator && n.push(this.renderModTools())) : n = [c.createElement(x, {
                        key: "color-chooser",
                        onColorSelected: this.props.onColorSelected
                    }), this.renderUniversalOptions()], c.createElement(I.b, {
                        className: "chat-settings"
                    }, c.createElement("div", {
                        onClick: this.dismissRaidsTooltip
                    }, c.createElement(P._17, {
                        key: "chat-settings",
                        className: "chat-settings__content",
                        background: P.m.Base,
                        color: P.F.Base,
                        padding: 2
                    }, n)))
                }, t.prototype.renderUniversalOptions = function() {
                    if (!this.props.data) return null;
                    var e = this.props.isPopout && c.createElement(P.E, {
                            checked: this.props.darkModeEnabled,
                            "data-a-target": "darkmode-checkbox",
                            "data-test-selector": "dark-mode-checkbox",
                            id: "chat-settings-dark-mode",
                            label: Object(D.d)("Dark Mode", "ChatSettings"),
                            onChange: this.props.onDarkModeToggle
                        }),
                        t = !this.props.isPopout && c.createElement("button", {
                            onClick: this.props.onChatPopout,
                            "data-a-target": "popout-chat-button",
                            "data-test-selector": "popout-button"
                        }, Object(D.d)("Popout", "ChatSettings")),
                        n = !this.props.isPopout && (window.BetterTTV || window.FrankerFaceZ) && c.createElement("button", {
                            onClick: this.props.onLegacyChatPopout,
                            "data-test-selector": "legacy-popout-button"
                        }, Object(D.d)("Legacy Popout", "ChatSettings"));
                    return c.createElement(P.U, {
                        key: "chat-options"
                    }, c.createElement(P._17, {
                        borderTop: !0,
                        margin: {
                            top: 2
                        },
                        padding: {
                            y: 2
                        }
                    }, c.createElement(P._21, {
                        color: P.F.Alt2,
                        transform: P._25.Uppercase
                    }, Object(D.d)("Chat Options", "ChatSettings"))), c.createElement(P.U, {
                        margin: {
                            bottom: 1
                        }
                    }, c.createElement(P.E, {
                        checked: this.props.showTimestamps,
                        "data-a-target": "timestamp-checkbox",
                        "data-test-selector": "timestamps-selector",
                        id: "chat-settings-timestamp",
                        label: Object(D.d)("Timestamps", "ChatSettings"),
                        onChange: this.props.onTimestampToggle
                    })), c.createElement(P.U, {
                        margin: {
                            bottom: 1
                        }
                    }, e), c.createElement(P.U, {
                        margin: {
                            bottom: 1
                        }
                    }, c.createElement("button", {
                        onClick: this.props.onChatHide,
                        "data-a-target": "hide-chat-button",
                        "data-test-selector": "hide-chat-button"
                    }, Object(D.d)("Hide Chat", "ChatSettings"))), c.createElement(P.U, {
                        margin: {
                            bottom: 1
                        }
                    }, t), n && c.createElement(P.U, null, n))
                }, Object.defineProperty(t.prototype, "showRaidsTooltip", {
                    get: function() {
                        return this.props.sawFirstRaidPrompt && !this.state.raidsTooltipDismissed
                    },
                    enumerable: !0,
                    configurable: !0
                }), t.prototype.renderModTools = function() {
                    return c.createElement(P._17, {
                        key: "mod-tools",
                        borderTop: !0,
                        "data-test-selector": "mod-tools",
                        margin: {
                            top: 2
                        },
                        padding: {
                            top: 2
                        }
                    }, c.createElement(P.U, {
                        margin: {
                            bottom: 2
                        }
                    }, c.createElement(P._21, {
                        color: P.F.Alt2,
                        transform: P._25.Uppercase
                    }, Object(D.d)("Mod Tools", "ChatSettings"))), c.createElement(P.U, {
                        margin: {
                            bottom: 1
                        }
                    }, c.createElement(P.E, {
                        checked: this.props.showModerationIcons,
                        "data-a-target": "mod-icons-checkbox",
                        "data-test-selector": "mod-icons-checkbox",
                        id: "chat-settings-mod-icons",
                        label: Object(D.d)("Mod Icons", "ChatSettings"),
                        onChange: this.props.onModIconsToggle
                    })), c.createElement(P._17, {
                        margin: {
                            bottom: 1
                        },
                        display: P.H.Flex,
                        justifyContent: P.T.Between
                    }, c.createElement(P.E, {
                        checked: this.props.followerModeEnabled,
                        "data-a-target": "follower-mode-checkbox",
                        "data-test-selector": "follower-mode-checkbox",
                        id: "chat-settings-followers-only",
                        label: Object(D.d)("Followers-Only Chat", "ChatSettings"),
                        onChange: this.props.onFollowerModeToggle
                    }), this.showRaidsTooltip ? c.createElement(V, {
                        text: Object(D.d)("Prevent offensive raiders from chatting.", "RaidReportingChat")
                    }) : null, c.createElement(P.U, {
                        alignItems: P.c.Center,
                        display: P.H.Flex,
                        flexWrap: P.K.NoWrap,
                        justifyContent: P.T.Between
                    }, c.createElement(P.U, {
                        margin: {
                            right: .5
                        }
                    }, c.createElement(P._21, {
                        color: P.F.Alt2,
                        fontSize: P.L.Size7,
                        type: P._26.Span
                    }, Object(D.d)("Must have followed for", "ChatSettings"))), c.createElement(P.U, {
                        className: "chat-settings__mod-tools-follower-button",
                        flexShrink: 0
                    }, c.createElement(U.a, {
                        display: P.H.InlineBlock
                    }, c.createElement(P.u, {
                        size: P.x.Small,
                        type: P.z.Text,
                        "data-a-target": "follower-mode-dropdown",
                        "data-test-selector": "follower-mode-duration-menu",
                        dropdown: !0
                    }, Object(_.d)(this.props.selectedFollowerModeDuration)), c.createElement(P.p, {
                        direction: P.q.TopRight
                    }, c.createElement(P.U, {
                        padding: .5
                    }, c.createElement(P._21, {
                        color: P.F.Alt2
                    }, Object(D.d)("Followers can chat if they have followed for at least", "ChatSettings"))), c.createElement(P._17, {
                        color: P.F.Link
                    }, this.renderFollowerModeOptions())))))), c.createElement(P.U, {
                        margin: {
                            bottom: 1
                        }
                    }, c.createElement(P.E, {
                        checked: this.props.slowModeEnabled,
                        "data-a-target": "slow-mode-checkbox",
                        "data-test-selector": "slow-mode-checkbox",
                        id: "chat-settings-slow-mode",
                        label: Object(D.d)("Slow Mode", "ChatSettings"),
                        onChange: this.props.onSlowModeToggle
                    })), c.createElement(se, {
                        key: "recent-raids",
                        recentRaids: this.state.recentRaids,
                        onClickRecentRaids: this.onClickRecentRaids,
                        onUsernameClick: C.d,
                        targetChannelID: this.props.channelID,
                        tooltipText: this.showRaidsTooltip ? Object(D.d)("View recent raids with option to report or ban.", "RaidReportingChat") : ""
                    }), c.createElement("button", {
                        onClick: this.props.onChatClear,
                        "data-a-target": "clear-chat-button",
                        "data-test-selector": "clear-chat-button"
                    }, Object(D.d)("Clear Chat", "ChatSettings")))
                }, t.prototype.renderFollowerModeOptions = function() {
                    var e = this;
                    return _.b.map(function(t) {
                        return c.createElement(P.S, {
                            "data-duration": t,
                            key: t,
                            onClick: e.handleFollowerDurationClick,
                            selected: t === e.props.selectedFollowerModeDuration
                        }, c.createElement(P.U, {
                            padding: .5
                        }, Object(_.c)(t)))
                    })
                }, t = l.__decorate([Object(O.a)(oe, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                })], t)
            }(c.Component)),
            ce = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        editAppearance: !1
                    }, t.handleSettingsToggle = function(e) {
                        t.props.onToggle && t.props.onToggle(e), t.state.editAppearance && t.setState({
                            editAppearance: !1
                        })
                    }, t.onEdit = function() {
                        t.setState({
                            editAppearance: !0
                        })
                    }, t.onLeaveEdit = function() {
                        t.setState({
                            editAppearance: !1
                        })
                    }, t.onDarkModeToggle = function() {
                        var e = t.props.darkModeEnabled ? m.a.Light : m.a.Dark;
                        t.props.onThemeChanged(e, !t.props.isPopout), Object(T.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.darkModeEnabled,
                            settingName: E.a.DarkMode
                        })
                    }, t.onTimestampToggle = function() {
                        Object(w.b)("showTimestamps", !t.props.showTimestamps), t.props.showTimestamps ? t.props.onTimestampsDisable() : t.props.onTimestampsEnable(), Object(T.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.showTimestamps,
                            settingName: E.a.ShowTimestamps
                        })
                    }, t.onChatHide = function() {
                        t.props.onChatHide(), Object(T.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !0,
                            settingName: E.a.HideChat
                        })
                    }, t.onChatPopout = function() {
                        t.props.onChatHide();
                        var e = window.open("/popout/" + t.props.channelLogin + "/chat?popout=", "_blank", "right=50,top=50,width=400,height=600,resizable=yes,scrollbars=no,toolbar=no,location=no,directories=no,status=no,menubar=no,copyhistory=no");
                        e && !Object(h.a)() && (e.focus(), Object(g.a)(e, function() {
                            t.props.onChatUnhide()
                        }))
                    }, t.onLegacyChatPopout = function() {
                        t.props.onChatHide();
                        var e = window.open("https://www.twitch.tv/" + t.props.channelLogin + "/chat?popout=", "_blank", "right=50,top=50,width=400,height=600,resizable=yes,scrollbars=no,toolbar=no,location=no,directories=no,status=no,menubar=no,copyhistory=no");
                        e && !Object(h.a)() && (e.focus(), Object(g.a)(e, function() {
                            t.props.onChatUnhide()
                        }))
                    }, t.onModIconsToggle = function() {
                        Object(w.b)("showModIcons", !t.props.showModerationIcons), t.props.showModerationIcons ? t.props.onModIconsDisable() : t.props.onModIconsEnable(), Object(T.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.showModerationIcons,
                            settingName: E.a.ShowModIcons
                        })
                    }, t.onFollowerModeToggle = function() {
                        if (t.props.followerModeEnabled) t.props.onChatCommand(Object(N.d)()), t.props.onFollowerModeDisable();
                        else {
                            var e = t.getSelectedFollowerDuration();
                            t.props.onChatCommand(Object(N.f)(e)), t.props.onFollowerModeDurationChange(e), t.props.onFollowerModeEnable()
                        }
                        Object(T.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.followerModeEnabled,
                            settingName: E.a.FollowerMode
                        })
                    }, t.onFollowerDurationChange = function(e) {
                        Object(w.c)(t.props.channelLogin, e), t.props.onFollowerModeDurationPreferenceChange(t.props.channelLogin, e), t.props.followerModeEnabled && (t.props.onChatCommand(Object(N.f)(e)), t.props.onFollowerModeDurationChange(e)), Object(T.c)({
                            channelLogin: t.props.channelLogin,
                            followerModeOn: t.props.followerModeEnabled,
                            isHostMode: t.props.isHostMode,
                            newValue: e
                        })
                    }, t.onSlowModeToggle = function() {
                        t.props.slowModeEnabled ? (t.props.onChatCommand(Object(N.e)()), t.props.onSlowModeDisable()) : (t.props.onChatCommand(Object(N.g)()), t.props.onSlowModeEnable()), Object(T.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.slowModeEnabled,
                            settingName: E.a.SlowMode
                        })
                    }, t.onChatClear = function() {
                        t.props.onChatCommand(Object(N.c)())
                    }, t.getSelectedFollowerDuration = function() {
                        if (t.props.followerModeEnabled) return t.props.followerModeDuration;
                        var e = t.props.lastUsedFollowerDurations[t.props.channelLogin];
                        return "number" == typeof e ? e : _.a
                    }, t.onColorSelected = function(e) {
                        if (!t.props.isLoggedIn) return void t.props.login();
                        t.props.onChatCommand(Object(N.b)(e))
                    }, t
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    return c.createElement(pe, {
                        disabled: this.props.disabled,
                        onToggle: this.handleSettingsToggle
                    }, c.createElement(le, {
                        darkModeEnabled: this.props.darkModeEnabled,
                        followerModeEnabled: this.props.followerModeEnabled,
                        editAppearance: this.state.editAppearance,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isPopout: this.props.isPopout,
                        onChatClear: this.onChatClear,
                        onChatHide: this.onChatHide,
                        onChatPopout: this.onChatPopout,
                        onDarkModeToggle: this.onDarkModeToggle,
                        onFollowerDurationChange: this.onFollowerDurationChange,
                        onFollowerModeToggle: this.onFollowerModeToggle,
                        onLegacyChatPopout: this.onLegacyChatPopout,
                        onModIconsToggle: this.onModIconsToggle,
                        onSlowModeToggle: this.onSlowModeToggle,
                        onTimestampToggle: this.onTimestampToggle,
                        selectedFollowerModeDuration: this.getSelectedFollowerDuration(),
                        showModerationIcons: this.props.showModerationIcons,
                        showTimestamps: this.props.showTimestamps,
                        slowModeEnabled: this.props.slowModeEnabled,
                        theatreModeEnabled: this.props.theatreModeEnabled,
                        onColorSelected: this.onColorSelected,
                        authToken: this.props.authToken,
                        channelLogin: this.props.channelLogin,
                        channelID: this.props.channelID,
                        isLoggedIn: this.props.isLoggedIn,
                        onClickEditAppearance: this.onEdit,
                        onLeaveEditAppearance: this.onLeaveEdit,
                        sawFirstRaidPrompt: this.props.sawFirstRaidPrompt,
                        onShowViewerCard: this.props.onShowViewerCard
                    }))
                }, t
            }(c.Component),
            ue = Object(u.a)(s, o)(ce),
            de = Object(d.e)(ue),
            pe = function(e) {
                return c.createElement(U.a, {
                    onToggle: e.onToggle
                }, c.createElement(P.v, {
                    icon: P._9.Gear,
                    ariaLabel: Object(D.d)("Chat settings", "ChatInput"),
                    "data-a-target": "chat-settings",
                    disabled: !!e.disabled
                }), c.createElement(P.p, {
                    direction: P.q.Top,
                    noTail: !0,
                    offsetY: "11px",
                    "data-a-target": "chat-settings-balloon"
                }, e.children))
            };
        n.d(t, "a", function() {
            return de
        }), n.d(t, "b", function() {
            return pe
        })
    },
    862: function(e, t) {},
    863: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatSettings_Badges"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "selectedBadge"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "badge"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "availableBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "badge"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "selectedBadge"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "availableBadges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 382
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\n\nquery ChatSettings_Badges($channelLogin: String!) {\n  currentUser {\n    id\n    selectedBadge {\n      ...badge\n    }\n    availableBadges {\n      ...badge\n    }\n  }\n  user(login: $channelLogin) {\n    id\n    self {\n      selectedBadge {\n        ...badge\n      }\n      availableBadges {\n        ...badge\n      }\n    }\n  }\n}\n',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n(779).definitions)), e.exports = i
    },
    864: function(e, t) {},
    865: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecentRaidsModActions_BanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BanUserFromChatRoomInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "banUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 155
            }
        };
        n.loc.source = {
            body: "mutation RecentRaidsModActions_BanUser($input: BanUserFromChatRoomInput!) {\n  banUserFromChatRoom(input: $input) {\n    ban {\n      isPermanent\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    866: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RecentRaidsModActions"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetUserID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetUserID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 203
            }
        };
        n.loc.source = {
            body: "query RecentRaidsModActions($targetUserID: ID!, $channelID: ID!) {\n  # This is currently backwards on the server\n  chatRoomBanStatus(channelID: $targetUserID, userID: $channelID) {\n    isPermanent\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    867: function(e, t) {},
    868: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecentRaidsModActions_UnbanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnbanUserFromChatRoomInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "unbanUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 161
            }
        };
        n.loc.source = {
            body: "mutation RecentRaidsModActions_UnbanUser($input: UnbanUserFromChatRoomInput!) {\n  unbanUserFromChatRoom(input: $input) {\n    ban {\n      isPermanent\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    869: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatSettings_CurrentUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "chatColor"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayBadges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 294
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\n\nquery ChatSettings_CurrentUser($channelLogin: String!) {\n  currentUser {\n    id\n    login\n    displayName\n    chatColor\n  }\n  user(login: $channelLogin) {\n    id\n    self {\n      displayBadges {\n        ...badge\n      }\n    }\n  }\n}\n',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n(779).definitions)), e.exports = i
    },
    870: function(e, t) {},
    871: function(e, t) {},
    877: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                isLoggedIn: Object(E.d)(e)
            }
        }

        function a(e, t, n) {
            var i = new FileReader;
            i.onloadend = function() {
                n && n(i.result)
            }, i.readAsDataURL(e);
            var a = new FileReader;
            a.onloadend = function() {
                t(a.result)
            }, a.readAsArrayBuffer(e)
        }

        function r(e, t) {
            if (!t) throw new Error("Attempted to upload an empty file object.");
            var n = decodeURI(e);
            return fetch(n, {
                method: "PUT",
                body: new Blob([t])
            })
        }

        function s(e, t, n) {
            if (void 0 === n) throw new Error("No default avatar selected.");
            return fetch(b.a.krakenEndpoint + "/users/" + e + "/default_images?client_id=" + b.a.authClientID + "&api_version=" + b.a.defaultAPIVersion, {
                method: "PUT",
                headers: {
                    Authorization: "OAuth " + t,
                    "Content-Type": "application/json",
                    Accept: "application/json"
                },
                body: JSON.stringify({
                    default_profile_image: Z[n].id
                })
            })
        }

        function o(e, t, n) {
            return m.__awaiter(this, void 0, void 0, function() {
                var i;
                return m.__generator(this, function(a) {
                    switch (a.label) {
                        case 0:
                            return [4, fetch(b.a.krakenEndpoint + "/users/" + e + "/upload_image?client_id=" + b.a.authClientID + "&api_version=" + b.a.defaultAPIVersion + "&image_type=" + n, {
                                method: "POST",
                                headers: {
                                    Authorization: "OAuth " + t
                                }
                            })];
                        case 1:
                            return i = a.sent(), [2, i.json()]
                    }
                })
            })
        }

        function l(e) {
            switch (e) {
                case Y.Success:
                    return {
                        message: Object(b.d)("Success!", "Profile Edit"),
                        type: M._0.Success
                    };
                case Y.UnexpectedError:
                    return {
                        message: Object(b.d)("Unexpected error, please try again.", "Profile Edit"),
                        type: M._0.Alert
                    };
                case Y.BadSizeError:
                    return {
                        message: Object(b.d)("Image might exceed 10MB.", "Profile Edit"),
                        type: M._0.Alert
                    };
                case Y.NonImageError:
                    return {
                        message: Object(b.d)("You must upload an image.", "Profile Edit"),
                        type: M._0.Alert
                    };
                case Y.WrongFormatError:
                    return {
                        message: Object(b.d)("You must select a valid image type.", "Profile Edit"),
                        type: M._0.Alert
                    };
                case Y.TimeoutError:
                    return {
                        message: Object(b.d)("Upload timed-out. Please try again.", "Profile Edit"),
                        type: M._0.Alert
                    };
                case Y.Uploading:
                    return {
                        message: Object(b.d)("Uploading....", "Profile Edit"),
                        type: M._0.Brand
                    };
                case Y.ImageNotSelected:
                    return {
                        message: Object(b.d)("Select a image first.", "Profile Edit"),
                        type: M._0.Alert
                    };
                default:
                    return {
                        message: Object(b.d)("Please try again.", "Profile Edit"),
                        type: M._0.Alert
                    }
            }
        }

        function c(e) {
            return {
                authToken: Object(E.a)(e)
            }
        }

        function u(e, t) {
            return Object(G.bindActionCreators)({
                closeModal: function() {
                    return t.successCallback && t.successCallback(), Object(q.c)()
                }
            }, e)
        }

        function d(e) {
            return Object(G.bindActionCreators)({
                showModal: q.d
            }, e)
        }
        var p, m = n(0),
            h = n(4),
            g = n(1),
            f = n(11),
            b = n(2),
            v = n(252),
            k = n(360),
            S = n(60),
            y = n(7),
            C = n(124),
            _ = n(8),
            E = n(18),
            N = n(84),
            w = n(783),
            T = n(782),
            D = n(813),
            I = n(820),
            U = n(765),
            O = n(755),
            M = n(3),
            F = (n(884), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handlePromoBuy = function(e) {
                        var n = Object(U.b)({
                            trackBitsCardInteraction: t.props.trackBitsCardInteraction,
                            channelID: t.props.channelID,
                            purchaseUrl: e.currentTarget.dataset.purchaseUrl,
                            bitsAmount: e.currentTarget.dataset.bitsAmount,
                            location: O.b.GetBitsButton
                        });
                        n && t.props.onPromoBuyClose(n)
                    }, t
                }
                return m.__extends(t, e), t.prototype.render = function() {
                    var e = g.createElement(M.U, null, g.createElement(M.U, {
                        padding: {
                            x: 5,
                            y: 2
                        },
                        textAlign: M._22.Center
                    }, g.createElement(M._21, {
                        type: M._26.H4,
                        bold: !0
                    }, Object(b.d)("Cheer Bits for your Favorite Streamer!", "Bits--FirstTimeUserPrompt"))), g.createElement(M.U, {
                        padding: {
                            x: 2,
                            bottom: 1
                        }
                    }, g.createElement(M._21, {
                        type: M._26.Span,
                        color: M.F.Alt
                    }, Object(b.d)("Bits are fun, animated emotes. Cheering Bits celebrates moments you love with the community right in chat and similar to subscribing, helps support Partners and Affiliates.", "Bits--FirstTimeUserPrompt"), g.createElement(M.P, {
                        margin: {
                            left: .5
                        }
                    }, g.createElement("a", {
                        onClick: this.props.toggleShowTutorial
                    }, Object(b.d)("How do I cheer?", "Bits--FirstTimeUserPrompt"))))), g.createElement(M.U, {
                        padding: {
                            bottom: 2
                        },
                        textAlign: M._22.Center
                    }, g.createElement(M.P, {
                        margin: {
                            bottom: 1
                        }
                    }, g.createElement(M._21, {
                        type: M._26.H6,
                        bold: !0,
                        className: "bits-first-time-user-prompt__promo-header"
                    }, Object(b.d)("First Time Purchaser Discount Pack!", "Bits--FirstTimeUserPrompt"))), g.createElement(M.u, {
                        onClick: this.handlePromoBuy,
                        "data-purchase-url": this.props.promo.url,
                        "data-bits-amount": this.props.promo.bits,
                        "data-a-target": "bits-purchase-button-" + this.props.promo.bits
                    }, Object(b.d)("{price} For {amount} Bits", {
                        price: this.props.promo.price,
                        amount: this.props.promo.bits
                    }, "Bits--FirstTimeUserPrompt"))));
                    return this.props.isShowingTutorial ? g.createElement(M.U, {
                        className: "bits-first-time-user-prompt",
                        fullWidth: !0
                    }, g.createElement(M.U, {
                        className: "bits-first-time-user-prompt__tutorial-back-button"
                    }, g.createElement(M.u, {
                        onClick: this.props.toggleShowTutorial,
                        type: M.z.Text
                    }, g.createElement(M._8, {
                        asset: M._9.Play,
                        height: 8
                    }), " ", Object(b.d)("Back", "Bits--FirstTimeUserPrompt"))), g.createElement(M.U, {
                        textAlign: M._22.Center,
                        padding: {
                            x: 2,
                            bottom: 2,
                            top: 5
                        },
                        fullHeight: !0
                    }, g.createElement(M.e, {
                        type: M.i.SlideInLeft,
                        duration: M.g.Long,
                        enabled: !0
                    }, g.createElement(I.a, null)))) : this.props.animateFirstTimeUserIntro ? g.createElement(M.P, {
                        className: "bits-first-time-user-prompt"
                    }, g.createElement(M.e, {
                        type: M.i.SlideInRight,
                        duration: M.g.Long,
                        enabled: this.props.animateFirstTimeUserIntro
                    }, e)) : g.createElement(M.U, {
                        className: "bits-first-time-user-prompt"
                    }, e)
                }, t
            }(g.Component)),
            P = F,
            x = n(764),
            L = n(799),
            A = n(5),
            j = n(885),
            R = (n(886), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hideFirstTimeUserIntro: !1
                    }, t.trackBitsCardInteraction = function(e, n) {
                        var i = {
                            actionName: e,
                            emoteType: n && n.emoteType,
                            emoteLevel: n && n.emoteLevel,
                            location: O.b.GetBitsButton,
                            displayedBalance: t.props.bitsBalance || 0
                        };
                        Object(O.h)(i)
                    }, t.onClose = function() {}, t.onPromoBuyClose = function(e) {
                        Object(w.a)(e, function() {
                            t.props.data && t.props.data.refetch()
                        })
                    }, t
                }
                return m.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.props.loading) return g.createElement(M._17, {
                        "data-a-target": "get-bits-button-content-loading",
                        display: M.H.Flex,
                        flexDirection: M.J.Column,
                        alignItems: M.c.Center,
                        justifyContent: M.T.Center,
                        textAlign: M._22.Center,
                        padding: {
                            y: 5
                        }
                    }, g.createElement(M.X, {
                        delay: 0
                    }), g.createElement(M.U, {
                        padding: {
                            top: 2
                        }
                    }, g.createElement(M._21, {
                        italic: !0
                    }, Object(b.d)("Fetching bits", "Bits--GetBitsButtonContent"))));
                    var e = null;
                    if (this.props.bitsOffers) {
                        var t = this.props.bitsOffers.find(function(e) {
                            return Object(U.c)(e)
                        });
                        t && t.type === x.b && this.props.channelID && !this.state.hideFirstTimeUserIntro && (e = g.createElement(P, {
                            promo: t,
                            animateFirstTimeUserIntro: this.props.animateFirstTimeUserIntro,
                            isShowingTutorial: this.props.isShowingTutorial,
                            toggleShowTutorial: this.props.toggleShowTutorial,
                            trackBitsCardInteraction: this.trackBitsCardInteraction,
                            channelID: this.props.channelID,
                            onPromoBuyClose: this.onPromoBuyClose
                        }))
                    }
                    var n = null;
                    void 0 !== this.props.bitsBalance && this.props.bitsConfig ? n = g.createElement(M._17, {
                        borderBottom: !0,
                        textAlign: M._22.Center,
                        fullWidth: !0,
                        padding: {
                            y: .5
                        }
                    }, g.createElement(M._21, {
                        type: M._26.Span
                    }, Object(b.d)("You have {bitsBalance}", {
                        bitsBalance: g.createElement(T.a, {
                            withImage: !0,
                            withText: !0,
                            count: this.props.bitsBalance,
                            bitsConfig: this.props.bitsConfig
                        })
                    }, "Bits--GetBitsButton"))) : void 0 === this.props.bitsBalance && this.props.bitsConfig && (n = g.createElement(M._17, {
                        borderBottom: !0,
                        textAlign: M._22.Center,
                        fullWidth: !0,
                        padding: {
                            y: .5
                        }
                    }, g.createElement(M._21, {
                        type: M._26.Span
                    }, Object(b.d)("{bitsGem} Log in to see your Bits balance", {
                        bitsGem: g.createElement(T.a, {
                            count: 100,
                            withImage: !0,
                            bitsConfig: this.props.bitsConfig
                        })
                    }, "Bits--GetBitsButton"))));
                    var i = null;
                    return this.props.bitsConfig && this.props.channelLogin && (i = g.createElement(D.a, {
                        bitsConfig: this.props.bitsConfig,
                        channelLogin: this.props.channelLogin,
                        closeAllBits: this.onClose,
                        onClose: this.onClose,
                        trackBitsCardInteraction: this.trackBitsCardInteraction,
                        location: O.b.GetBitsButton,
                        hidePromos: !0,
                        hideWateb: !0,
                        fullsize: !0
                    })), g.createElement(N.b, {
                        className: "get-bits-button-content"
                    }, g.createElement(M.U, null, n, e, i))
                }, t = m.__decorate([Object(A.c)("GetBitsButtonContent"), Object(y.a)(j, {
                    name: "data",
                    props: function(e) {
                        var t, n;
                        e.data && e.data.user && e.data.user.cheer && (t = Object(L.a)(e.data.user.cheer.emotes), n = e.data.user.id);
                        var i, a;
                        return e.data && e.data.currentUser ? (a = e.data.currentUser.bitsBalance, i = e.data.currentUser.bitsOffers) : e.data && e.data.bitsOffers && (i = e.data.bitsOffers), {
                            loading: e.data && e.data.loading,
                            bitsOffers: i,
                            bitsBalance: a,
                            bitsConfig: t,
                            channelID: n
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    },
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin,
                                withChannel: !!e.channelLogin,
                                isLoggedIn: e.isLoggedIn
                            }
                        }
                    }
                })], t)
            }(g.Component)),
            B = R,
            H = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isShowingTutorial: !1,
                        animateFirstTimeUserIntro: !1
                    }, t.toggleBalloon = function(e) {
                        t.setState({
                            animateFirstTimeUserIntro: !1
                        }), e || Object(O.h)({
                            actionName: O.a.BuyMain,
                            location: O.b.GetBitsButton,
                            displayedBalance: 0
                        })
                    }, t.toggleShowTutorial = function() {
                        t.setState({
                            isShowingTutorial: !t.state.isShowingTutorial,
                            animateFirstTimeUserIntro: !0
                        })
                    }, t
                }
                return m.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = null;
                    return this.props.channelLogin && (e = g.createElement(B, {
                        isLoggedIn: this.props.isLoggedIn,
                        channelLogin: this.props.channelLogin,
                        toggleShowTutorial: this.toggleShowTutorial,
                        isShowingTutorial: this.state.isShowingTutorial,
                        animateFirstTimeUserIntro: this.state.animateFirstTimeUserIntro
                    })), g.createElement(S.a, {
                        onToggle: this.toggleBalloon
                    }, g.createElement(M.u, {
                        dropdown: !0
                    }, Object(b.d)("Get Bits", "Bits--GetBitsButton")), g.createElement(M.p, {
                        direction: M.q.BottomRight,
                        size: M.r.Large
                    }, e))
                }, t = m.__decorate([Object(A.c)("GetBitsButton")], t)
            }(g.Component),
            V = H,
            W = Object(_.a)(i)(V),
            G = n(10),
            q = n(49),
            z = n(800),
            $ = n(121),
            J = n(35),
            K = (n(887), function(e) {
                var t = function() {
                        e.onSelect(e.index)
                    },
                    n = {
                        "default-avatar__selected": e.selected,
                        "default-avatar": !0
                    };
                return g.createElement(M.U, {
                    padding: {
                        bottom: 1
                    }
                }, g.createElement("div", {
                    onClick: t,
                    "aria-label": Object(b.d)("Click to select Default Avatar Number {index, number}", {
                        index: e.index
                    }, "Default Avatar")
                }, g.createElement(M._17, {
                    border: !0,
                    fullHeight: !0,
                    fullWidth: !0,
                    position: M._2.Relative,
                    className: h(n)
                }, g.createElement("img", {
                    alt: Object(b.d)("Default Avatar Number {index, number}", {
                        index: e.index
                    }, "Default Avatar"),
                    src: e.imageSrc
                }))))
            });
        ! function(e) {
            e.ProfileImage = "profile_image", e.ProfileBanner = "profile_banner", e.ChannelOfflineImage = "channel_offline_image"
        }(p || (p = {}));
        var Q;
        ! function(e) {
            e.Success = "SUCCESS", e.NonImage = "IS_IMAGE_VALIDATION_FAILED", e.WrongFormat = "IMAGE_FORMAT_VALIDATION_FAILED", e.BadSize = "FILE_SIZE_VALIDATION_FAILED"
        }(Q || (Q = {}));
        var Y;
        ! function(e) {
            e[e.Success = 0] = "Success", e[e.UnexpectedError = 1] = "UnexpectedError", e[e.BadSizeError = 2] = "BadSizeError", e[e.NonImageError = 3] = "NonImageError", e[e.WrongFormatError = 4] = "WrongFormatError", e[e.TimeoutError = 5] = "TimeoutError", e[e.Uploading = 6] = "Uploading", e[e.ImageNotSelected = 7] = "ImageNotSelected"
        }(Y || (Y = {}));
        var X = (n(888), n(889)),
            Z = [{
                id: "profile_image_001",
                uri: "https://static-cdn.jtvnw.net/user-default-pictures/bb97f7e6-f11a-4194-9708-52bf5a5125e8-profile_image-300x300.jpg"
            }, {
                id: "profile_image_002",
                uri: "https://static-cdn.jtvnw.net/user-default-pictures/27103734-3cda-44d6-a384-f2ab71e4bb85-profile_image-300x300.jpg"
            }, {
                id: "profile_image_003",
                uri: "https://static-cdn.jtvnw.net/user-default-pictures/49988c7b-57bc-4dee-bd4f-6df4ad215d3a-profile_image-300x300.jpg"
            }, {
                id: "profile_image_004",
                uri: "https://static-cdn.jtvnw.net/user-default-pictures/0ecbb6c3-fecb-4016-8115-aa467b7c36ed-profile_image-300x300.jpg"
            }, {
                id: "profile_image_005",
                uri: "https://static-cdn.jtvnw.net/user-default-pictures/cd618d3e-f14d-4960-b7cf-094231b04735-profile_image-300x300.jpg"
            }, {
                id: "profile_image_006",
                uri: "https://static-cdn.jtvnw.net/user-default-pictures/4cbf10f1-bb9f-4f57-90e1-15bf06cfe6f5-profile_image-300x300.jpg"
            }, {
                id: "profile_image_007",
                uri: "https://static-cdn.jtvnw.net/user-default-pictures/b83b1794-7df9-4878-916c-88c2ad2e4f9f-profile_image-300x300.jpg"
            }],
            ee = ["image/*"],
            te = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        statusMessage: null,
                        imagePreviewURL: "",
                        profileUpdated: !1,
                        currentImageHasTallAspectRatio: !1
                    }, t.currentImage = null, t.logger = b.i.withCategory("ProfileImagePicker"), t.onImageInputChange = function(e) {
                        var n;
                        if (null === e) return void t.setState({
                            statusMessage: Y.ImageNotSelected
                        });
                        n = e[0];
                        var i = (n.size / 1024 / 1024).toFixed(4);
                        if (parseInt(i, 10) > 10) return void t.setState({
                            statusMessage: Y.BadSizeError
                        });
                        t.setState({
                            selectedImageIndex: void 0,
                            imagePreviewURL: "",
                            currentImageHasTallAspectRatio: !1
                        }), a(n, function(e) {
                            t.currentImage = e, t.setState({
                                statusMessage: null
                            })
                        }, function(e) {
                            var n = new Image,
                                i = !1;
                            n.onload = function() {
                                n.width < n.height && (i = !0), t.setState({
                                    currentImageHasTallAspectRatio: i
                                })
                            }, n.src = e, t.setState({
                                imagePreviewURL: e
                            })
                        })
                    }, t.onUpdateButtonClick = function(e) {
                        return m.__awaiter(t, void 0, void 0, function() {
                            var t, n, i, a, s = this;
                            return m.__generator(this, function(l) {
                                switch (l.label) {
                                    case 0:
                                        if (e.preventDefault(), void 0 !== this.state.selectedImageIndex) return this.setDefaultAvatar(), [2];
                                        if (!this.currentImage) return this.setState({
                                            statusMessage: Y.ImageNotSelected
                                        }), [2];
                                        this.setState({
                                            statusMessage: Y.Uploading
                                        }), l.label = 1;
                                    case 1:
                                        return l.trys.push([1, 3, , 4]), [4, o(this.props.userID, this.props.authToken, p.ProfileImage)];
                                    case 2:
                                        return t = l.sent(), n = t.upload_url, i = t.upload_id, [3, 4];
                                    case 3:
                                        return a = l.sent(), this.logger.error(a, "Request for upload ID failed to get expected response from server."), this.setState({
                                            statusMessage: Y.UnexpectedError
                                        }), [2];
                                    case 4:
                                        return this.unsubscribe = b.j.subscribe({
                                            topic: Object(J.c)(this.props.userID),
                                            success: function() {
                                                try {
                                                    r(n, s.currentImage)
                                                } catch (e) {
                                                    s.logger.error(e, "Profile Image upload failed."), s.unsubscribe(), s.setState({
                                                        statusMessage: Y.UnexpectedError,
                                                        selectedImageIndex: void 0,
                                                        imagePreviewURL: "",
                                                        currentImageHasTallAspectRatio: !1
                                                    })
                                                }
                                                s.timeoutHandle = setTimeout(function() {
                                                    return s.handlePubSubTimeout()
                                                }, 1e4)
                                            },
                                            failure: function() {
                                                s.setState({
                                                    statusMessage: Y.UnexpectedError,
                                                    selectedImageIndex: void 0,
                                                    imagePreviewURL: "",
                                                    currentImageHasTallAspectRatio: !1
                                                })
                                            },
                                            onMessage: function(e) {
                                                if (e.upload_id === i) {
                                                    clearTimeout(s.timeoutHandle);
                                                    var t = null,
                                                        n = s.state.imagePreviewURL;
                                                    e.status === Q.Success ? t = Y.Success : e.status === Q.BadSize ? (t = Y.BadSizeError, n = "", s.currentImage = null) : e.status === Q.NonImage ? (t = Y.NonImageError, n = "", s.currentImage = null) : e.status === Q.WrongFormat ? (t = Y.WrongFormatError, n = "", s.currentImage = null) : (t = Y.UnexpectedError, n = "", s.currentImage = null), s.unsubscribe && s.unsubscribe(), s.setState({
                                                        statusMessage: t,
                                                        imagePreviewURL: n
                                                    }), s.state.statusMessage === Y.Success && s.setState({
                                                        profileUpdated: !0
                                                    })
                                                }
                                            }
                                        }), [2]
                                }
                            })
                        })
                    }, t.onDefaultImageSelected = function(e) {
                        t.setState({
                            selectedImageIndex: e,
                            imagePreviewURL: Z[e].uri
                        })
                    }, t.handlePubSubTimeout = function() {
                        t.unsubscribe(), t.setState({
                            statusMessage: Y.TimeoutError
                        })
                    }, t
                }
                return m.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillUnmount = function() {
                    void 0 !== this.unsubscribe && this.unsubscribe(), this.timeoutHandle && clearTimeout(this.timeoutHandle)
                }, t.prototype.componentDidUpdate = function() {
                    var e = this;
                    this.state.profileUpdated && setTimeout(function() {
                        e.props.data && e.props.data.refetch(), e.props.closeModal()
                    }, 1e3)
                }, t.prototype.render = function() {
                    var e = this,
                        t = Z.map(function(t, n) {
                            return g.createElement(K, {
                                key: t.id,
                                imageSrc: t.uri,
                                index: n,
                                onSelect: e.onDefaultImageSelected,
                                selected: e.state.selectedImageIndex === n
                            })
                        }),
                        n = "" !== this.state.imagePreviewURL,
                        i = null;
                    if (n) {
                        var a = {
                            "profile-edit__image-preview": !0,
                            "profile-edit__image-preview-tall": this.state.currentImageHasTallAspectRatio
                        };
                        i = g.createElement(M.U, {
                            className: h(a),
                            "data-test-selector": "preview-image",
                            position: M._2.Relative
                        }, g.createElement("img", {
                            src: "" + this.state.imagePreviewURL
                        }))
                    }
                    var r = "" === this.state.imagePreviewURL,
                        s = null;
                    r && (s = g.createElement(M.U, {
                        className: "profile-edit__upload-info"
                    }, g.createElement(M.U, null, g.createElement(M._8, {
                        asset: M._9.Plus,
                        type: M._10.Alt2,
                        height: 20,
                        width: 20
                    })), g.createElement(M._21, {
                        type: M._26.H3,
                        color: M.F.Alt2,
                        fontSize: M.L.Size4
                    }, Object(b.d)("Upload a Photo", "Profile Edit"))));
                    var o = null;
                    this.props.showCloser && (o = g.createElement($.a, null));
                    var c = null;
                    if (null !== this.state.statusMessage) {
                        var u = l(this.state.statusMessage),
                            d = u.message,
                            p = u.type;
                        c = g.createElement(M.Z, {
                            label: d,
                            type: p
                        })
                    }
                    var m = this.props.login;
                    return this.props.displayName && (m = this.props.displayName), g.createElement(M.U, {
                        className: "profile-edit",
                        position: M._2.Relative,
                        fullHeight: !0
                    }, g.createElement(M._17, {
                        className: "profile-edit__background-container",
                        background: M.m.Base,
                        fullWidth: !0
                    }, g.createElement(M.U, {
                        padding: 2,
                        display: M.H.InlineBlock,
                        position: M._2.Relative,
                        textAlign: M._22.Center,
                        fullWidth: !0
                    }, g.createElement(M._17, {
                        borderBottom: !0,
                        margin: {
                            bottom: 2
                        }
                    }, g.createElement(M._21, {
                        type: M._26.H3,
                        fontSize: M.L.Size4
                    }, Object(b.d)("Editing profile picture for {userName}", {
                        userName: m
                    }, "Profile Edit"), " ")), g.createElement(M.U, {
                        className: "profile-edit__upload-container",
                        display: M.H.InlineBlock,
                        position: M._2.Relative,
                        textAlign: M._22.Center,
                        margin: {
                            bottom: 1
                        }
                    }, g.createElement(M.U, {
                        className: "profile-edit__upload",
                        display: M.H.InlineBlock,
                        position: M._2.Relative,
                        textAlign: M._22.Center
                    }, g.createElement(z.a, {
                        allowedFileTypes: ee,
                        onFilesSubmitted: this.onImageInputChange
                    }, s), i)), g.createElement(M._17, {
                        "data-test-selector": "status-message",
                        fontSize: M.L.Size4,
                        position: M._2.Relative,
                        textAlign: M._22.Center,
                        className: "profile-edit__status-message"
                    }, c), g.createElement(M._17, {
                        borderBottom: !0,
                        padding: {
                            bottom: .5
                        },
                        margin: {
                            bottom: 2
                        }
                    }, g.createElement(M.U, {
                        margin: {
                            bottom: 1
                        }
                    }, g.createElement(M._21, {
                        type: M._26.H3,
                        fontSize: M.L.Size5
                    }, Object(b.d)("Or select one of these", "Profile Edit"))), g.createElement(M._33, {
                        childWidth: M._34.ExtraSmall,
                        gutterSize: M._35.ExtraSmall,
                        placeholderItems: 3
                    }, t)), g.createElement(M.U, {
                        display: M.H.Flex,
                        justifyContent: M.T.Center
                    }, g.createElement(M.u, {
                        "data-test-selector": "update-button",
                        onClick: this.onUpdateButtonClick
                    }, Object(b.d)("Update", "Profile Edit"))))), o)
                }, t.prototype.setDefaultAvatar = function() {
                    return m.__awaiter(this, void 0, void 0, function() {
                        var e, t, n;
                        return m.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    this.setState({
                                        statusMessage: Y.Uploading
                                    }), e = Y.UnexpectedError, i.label = 1;
                                case 1:
                                    return i.trys.push([1, 3, , 4]), [4, s(this.props.userID, this.props.authToken, this.state.selectedImageIndex)];
                                case 2:
                                    return t = i.sent(), 204 === t.status || 200 === t.status ? e = Y.Success : this.logger.error(new Error("Default Avatar PUT failed. Fetch returned non-200 status: " + t.status), "Default Avatar PUT failed. Fetch returned non-200 status: " + t.status), [3, 4];
                                case 3:
                                    return n = i.sent(), this.logger.error(n, "Default Avatar PUT failed."), [3, 4];
                                case 4:
                                    return this.setState({
                                        statusMessage: e,
                                        profileUpdated: e === Y.Success
                                    }), [2]
                            }
                        })
                    })
                }, t = m.__decorate([Object(y.a)(X, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.login
                            }
                        }
                    }
                })], t)
            }(g.Component),
            ne = Object(A.c)("Profile Edit")(te),
            ie = Object(_.a)(c, u)(ne),
            ae = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.openModal = function() {
                        t.props.showModal(ie, {
                            userID: t.props.userID,
                            login: t.props.login,
                            displayName: t.props.displayName,
                            showCloser: !0
                        })
                    }, t
                }
                return m.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return g.createElement(M.U, null, g.createElement("div", {
                        onClick: this.openModal
                    }, g.createElement(M._8, {
                        asset: M._9.Edit,
                        height: 36,
                        width: 36,
                        fill: !0,
                        type: M._10.Brand
                    })))
                }, t = m.__decorate([Object(A.c)("EditProfileOverlay")], t)
            }(g.Component),
            re = ae,
            se = Object(_.a)(null, d)(re),
            oe = n(771),
            le = (n(890), n(891));
        n.d(t, "b", function() {
            return ce
        }), n.d(t, "a", function() {
            return me
        });
        var ce, ue = "channel-header__verified-badge",
            de = "channel-header__live-indicator";
        ! function(e) {
            e[e.Channel = 1] = "Channel", e[e.Clips = 2] = "Clips", e[e.Collections = 3] = "Collections", e[e.Events = 4] = "Events", e[e.Success = 5] = "Success", e[e.Followers = 6] = "Followers", e[e.Following = 7] = "Following", e[e.Videos = 8] = "Videos"
        }(ce || (ce = {}));
        var pe = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        live: !1
                    }, t.verifiedBadgeElement = g.createElement(M._30, {
                        label: Object(b.d)("Verified", "ChannelHeader"),
                        direction: M._32.Right
                    }, g.createElement(M.U, {
                        className: "channel-header__verified",
                        "data-target": ue,
                        display: M.H.Flex,
                        alignItems: M.c.Center,
                        margin: {
                            left: 1
                        }
                    }, g.createElement(M._8, {
                        asset: M._9.Verified
                    }))), t.liveIndicatorElement = g.createElement(M.U, {
                        margin: {
                            left: 1
                        },
                        "data-target": de
                    }, g.createElement(M._30, {
                        label: Object(b.d)("Live Now", "ChannelHeader"),
                        direction: M._32.Right
                    }, g.createElement(M.V, {
                        pulse: !0
                    }))), t.renderAvatarEditButton = function() {
                        return t.props.data && t.props.data && t.props.data.currentUser && t.props.data.user && t.props.data.currentUser.roles && (t.props.data.currentUser.id === t.props.data.user.id || t.props.data.currentUser.roles.isStaff || t.props.data.currentUser.roles.isSiteAdmin) ? g.createElement(M.U, {
                            className: "channel-header__edit-profile-overlay",
                            position: M._2.Absolute
                        }, g.createElement(se, {
                            userID: t.props.data.user.id,
                            login: t.props.data.user.login,
                            displayName: t.props.data.user.displayName
                        })) : null
                    }, t.onUpdateDebounce = function() {
                        if (!t.resizeAnimationFrame && t.channelHeader) {
                            var e = t.channelHeader.querySelector('[data-target="channel-header-left"]');
                            t.updateWidth(t.getWidth(e).width), t.resizeAnimationFrame = requestAnimationFrame(t.handleWindowResize)
                        }
                    }, t.handleWindowResize = function() {
                        t.resizeAnimationFrame = null, t.getChannelHeaderSize()
                    }, t.saveChannelHeaderRef = function(e) {
                        return t.channelHeader = e
                    }, t
                }
                return m.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.updateLiveState(this.props)
                }, t.prototype.componentDidMount = function() {
                    window.addEventListener("resize", this.onUpdateDebounce), !this.props.data || this.props.data.loading || this.props.data.error || this.getChannelHeaderSize(), this.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.updateLiveState(e)
                }, t.prototype.componentDidUpdate = function() {
                    this.channelHeader && this.updateWidth(this.getWidth(this.channelHeader.querySelector('[data-target="channel-header-left"]')).width), this.onUpdateDebounce(), this.reportInteractive()
                }, t.prototype.componentWillUnmount = function() {
                    this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame), window.removeEventListener("resize", this.onUpdateDebounce)
                }, t.prototype.updateWidth = function(e) {
                    var t = e !== this.width || this.width !== this.prevWidth;
                    void 0 !== this.width && (this.prevWidth = this.width), this.width !== e && (this.width = e), t && (this.resizeAnimationFrame && (cancelAnimationFrame(this.resizeAnimationFrame), this.resizeAnimationFrame = null), this.onUpdateDebounce())
                }, t.prototype.render = function() {
                    var e, t, n = 0,
                        i = 0,
                        a = 0,
                        r = b.a.defaultAvatarURL;
                    this.props.data && this.props.data.user && !this.props.data.loading && !this.props.data.error && (n = this.props.data.user.videos.totalCount, i = this.props.data.user.followers.totalCount, a = this.props.data.user.follows.totalCount, r = this.props.data.user.profileImageURL, e = this.props.data.user.displayName, t = this.props.data.user.roles.isPartner);
                    var s = this.state.live && ce[this.props.currentPage] !== ce[ce.Channel],
                        o = this.createChannelLinks(n, i, a),
                        l = {
                            "channel-header__user": !0,
                            "channel-header__user--selected": ce[this.props.currentPage] === ce[ce.Channel]
                        },
                        c = null;
                    this.canRenderBitsButton() && (c = g.createElement(M.U, {
                        margin: {
                            left: 1
                        }
                    }, g.createElement(W, {
                        channelLogin: this.props.channelLogin
                    })));
                    var u, d = g.createElement(M.U, {
                        display: M.H.Flex,
                        flexWrap: M.K.NoWrap,
                        alignItems: M.c.Center,
                        flexShrink: 0
                    }, g.createElement(M.U, {
                        className: "channel-header__user-avatar channel-header__user-avatar--active",
                        margin: {
                            right: 1
                        },
                        display: M.H.Flex,
                        flexShrink: 0,
                        alignItems: M.c.Stretch
                    }, g.createElement(M.l, {
                        size: 36,
                        imageSrc: r,
                        imageAlt: e || ""
                    }), this.renderAvatarEditButton()), e ? g.createElement(M._21, {
                        type: M._26.H5
                    }, e) : g.createElement(M.U, {
                        alignItems: M.c.Center
                    }, g.createElement(M._1, {
                        lineCount: 1,
                        width: 120
                    })), s && this.liveIndicatorElement, t && this.verifiedBadgeElement);
                    return u = this.props.data && this.props.data.user && this.props.data.user.login ? g.createElement(f.a, {
                        to: "/" + this.props.data.user.login,
                        "data-target": "channel-header__channel-link",
                        "data-a-target": "user-channel-header-item"
                    }, d) : d, g.createElement(M.U, {
                        className: "channel-header",
                        flexShrink: 0,
                        padding: {
                            x: 3
                        }
                    }, g.createElement(M.U, {
                        display: M.H.Flex,
                        justifyContent: M.T.Between,
                        flexWrap: M.K.NoWrap,
                        fullHeight: !0,
                        refDelegate: this.saveChannelHeaderRef
                    }, g.createElement(M.U, {
                        display: M.H.Flex,
                        alignItems: M.c.Stretch,
                        flexShrink: 0,
                        flexWrap: M.K.NoWrap,
                        "data-target": "channel-header-left"
                    }, g.createElement(M.P, {
                        className: h(l),
                        padding: {
                            y: .5,
                            right: 2
                        },
                        display: M.H.Flex,
                        flexWrap: M.K.NoWrap,
                        alignItems: M.c.Center,
                        flexShrink: 0
                    }, u), this.renderTabs(o), g.createElement(M.U, {
                        className: "channel-header__item channel-header__item--no-underline",
                        padding: {
                            x: 1
                        },
                        display: M.H.Flex,
                        flexShrink: 0,
                        alignSelf: M.d.Center,
                        "data-target": "channel-header-button"
                    }, g.createElement(S.a, {
                        alwaysMountBalloonContent: !0
                    }, g.createElement(M.v, {
                        icon: M._9.NavMore,
                        ariaLabel: Object(b.d)("More", "ChannelHeader")
                    }), g.createElement(M.p, {
                        direction: M.q.Bottom,
                        noTail: !0
                    }, g.createElement(M.U, {
                        padding: {
                            y: 1
                        }
                    }, this.renderDropdown(o)))))), g.createElement(M.U, {
                        display: M.H.Flex,
                        flexWrap: M.K.NoWrap,
                        flexShrink: 0,
                        alignItems: M.c.Center,
                        className: "channel-header__right",
                        "data-target": "channel-header-right"
                    }, g.createElement(M.U, {
                        className: "channel-header__follow-button",
                        display: M.H.Flex,
                        alignItems: M.c.Stretch,
                        margin: {
                            left: 1
                        }
                    }, g.createElement(v.a, {
                        updateContainerWidth: this.onUpdateDebounce,
                        isHostedFollow: !1,
                        channelLogin: this.props.channelLogin
                    })), g.createElement(M.U, {
                        margin: {
                            left: 1
                        }
                    }, g.createElement(oe.b, {
                        updateContainerWidth: this.onUpdateDebounce,
                        channelLogin: this.props.channelLogin
                    })), c)), g.createElement(k.a, {
                        onResize: this.onUpdateDebounce
                    }))
                }, t.prototype.updateLiveState = function(e) {
                    !e.data || e.data.loading || e.data.error || this.setState({
                        live: !!e.data.user.stream && "" !== e.data.user.stream.id
                    })
                }, t.prototype.generateUserLink = function(e, t) {
                    void 0 === e && (e = ""), void 0 === t && (t = !1);
                    var n = this.props.data && this.props.data.user && this.props.data.user.login;
                    if (!n) return "#";
                    var i = "/" + n + "/" + e;
                    return t ? Object(C.a)(i) : i
                }, t.prototype.renderTabs = function(e) {
                    var t = this;
                    return e.map(function(e) {
                        var n = e.count ? g.createElement(M.U, {
                                className: "channel-header__item-count",
                                display: M.H.Flex,
                                margin: {
                                    left: .5
                                }
                            }, g.createElement(M._21, {
                                type: M._26.Span,
                                fontSize: M.L.Size5
                            }, e.count)) : null,
                            i = t.generateUserLink(e.pathSuffix, e.isExternal),
                            a = {};
                        return e.isExternal && (a.target = Object(C.b)() ? "_blank" : ""), g.createElement(M.P, {
                            key: "channel-header__item--" + e.label,
                            display: M.H.Flex,
                            alignItems: M.c.Center,
                            flexShrink: 0
                        }, g.createElement(f.a, m.__assign({
                            className: "channel-header__item hide " + (e.isSelected ? "channel-header__item--selected" : "")
                        }, a, {
                            to: i,
                            disabled: "#" === i,
                            "data-target": "channel-header-item",
                            "data-a-target": e.label.toLowerCase() + "-channel-header-item"
                        }), g.createElement(M.U, {
                            padding: {
                                x: 2,
                                y: .5
                            },
                            display: M.H.Flex
                        }, g.createElement(M._21, {
                            type: M._26.Span,
                            fontSize: M.L.Size5
                        }, e.label), n)))
                    })
                }, t.prototype.renderDropdown = function(e) {
                    var t = this;
                    return e.map(function(e) {
                        var n = e.count ? g.createElement(M.U, {
                                className: "channel-header__item-count",
                                display: M.H.Flex,
                                margin: {
                                    left: .5
                                }
                            }, g.createElement(M._21, {
                                type: M._26.Span
                            }, e.count)) : null,
                            i = t.generateUserLink(e.pathSuffix, e.isExternal),
                            a = {};
                        return e.isExternal && (a.targetBlank = !0), g.createElement(M.U, {
                            key: "channel-header__dropdown-item--" + e.label,
                            "data-target": "channel-header-dropdown-item"
                        }, g.createElement(M.S, m.__assign({
                            linkTo: i,
                            disabled: "#" === i
                        }, a), g.createElement(M.U, {
                            className: "channel-header__dropdown-hover-target",
                            padding: {
                                y: .5,
                                x: 1
                            },
                            display: M.H.Flex
                        }, g.createElement(M._21, {
                            type: M._26.Span
                        }, e.label), n)))
                    })
                }, t.prototype.createChannelLinks = function(e, t, n) {
                    return [{
                        label: Object(b.d)("Videos", "ChannelHeader"),
                        count: Object(b.e)(e),
                        pathSuffix: "videos/all",
                        isExternal: !1,
                        isSelected: ce[this.props.currentPage] === ce[ce.Videos]
                    }, {
                        label: Object(b.d)("Clips", "ChannelHeader"),
                        pathSuffix: "clips",
                        isExternal: !1,
                        isSelected: ce[this.props.currentPage] === ce[ce.Clips]
                    }, {
                        label: Object(b.d)("Collections", "ChannelHeader"),
                        pathSuffix: "collections",
                        isExternal: !1,
                        isSelected: ce[this.props.currentPage] === ce[ce.Collections]
                    }, {
                        label: Object(b.d)("Events", "ChannelHeader"),
                        pathSuffix: "events",
                        isExternal: !1,
                        isSelected: ce[this.props.currentPage] === ce[ce.Events]
                    }, {
                        label: Object(b.d)("Followers", "ChannelHeader"),
                        count: Object(b.e)(t),
                        pathSuffix: "followers",
                        isExternal: !0,
                        isSelected: ce[this.props.currentPage] === ce[ce.Followers]
                    }, {
                        label: Object(b.d)("Following", "ChannelHeader"),
                        count: Object(b.e)(n),
                        pathSuffix: "following",
                        isExternal: !0,
                        isSelected: ce[this.props.currentPage] === ce[ce.Following]
                    }]
                }, t.prototype.getChannelHeaderSize = function() {
                    if (this.channelHeader) {
                        var e = this.channelHeader.querySelector('[data-target="channel-header-left"]'),
                            t = this.channelHeader.querySelector('[data-target="channel-header-right"]'),
                            n = this.channelHeader.querySelectorAll('[data-target="channel-header-item"]'),
                            i = this.channelHeader.querySelectorAll('[data-target="channel-header-dropdown-item"]');
                        if (n.length) {
                            var a = this.getWidth(this.channelHeader).width,
                                r = this.getWidth(e).width,
                                s = this.getWidth(t).width,
                                o = r + s + 20 - a;
                            if (o > 0)
                                for (var l = n.length - 1; l >= 0; l--) {
                                    var c = n[l];
                                    if (!c.classList.contains("hide")) {
                                        var u = this.getWidth(c);
                                        if (c.classList.add("hide"), i[l].classList.remove("hide"), (o -= u.width) <= 0) break
                                    }
                                } else
                                    for (var l = 0; l < n.length; l++) {
                                        var c = n[l];
                                        if (c.classList.contains("hide")) {
                                            c.classList.remove("hide");
                                            var u = this.getWidth(c);
                                            if (u.width >= Math.abs(o)) {
                                                c.classList.add("hide");
                                                break
                                            }
                                            c.classList.remove("hide"), i[l].classList.add("hide"), o += u.width
                                        }
                                    }
                            var d = this.channelHeader.querySelector('[data-target="channel-header-button"]');
                            if (d) {
                                var p = !this.channelHeader.querySelectorAll('[data-target="channel-header-item"].hide').length;
                                d.classList.toggle("hide", p)
                            }
                        }
                    }
                }, t.prototype.canRenderBitsButton = function() {
                    return this.props.data && !this.props.data.loading && this.props.currentPage !== ce.Clips && this.props.data.currentUser && this.props.data.user && this.props.data.user.cheer
                }, t.prototype.getWidth = function(e) {
                    return e ? {
                        width: e.clientWidth
                    } : {
                        width: 0
                    }
                }, t.prototype.reportInteractive = function() {
                    !this.props.data || this.props.data.loading || this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t = m.__decorate([Object(y.a)(le, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(A.c)("ChannelHeader")], t)
            }(g.Component),
            me = pe
    },
    878: function(e, t, n) {
        "use strict";

        function i(e) {
            var t = [];
            return e.forEach(function(e) {
                t[e.from] = {
                    startIndex: e.from,
                    endIndex: e.to + 1,
                    data: {
                        images: {
                            themed: !1,
                            sources: {
                                "1x": Object(c.e)(e.emoteID, 1),
                                "2x": Object(c.e)(e.emoteID, 2),
                                "4x": Object(c.e)(e.emoteID, 4)
                            }
                        }
                    }
                }
            }), t
        }

        function a(e, t, n) {
            var a = i(e.body.emotes),
                r = e.badges.reduce(function(e, t) {
                    return e[t.setID] = t.version, e
                }, {});
            return {
                type: l.a.Post,
                id: e.id,
                badges: r,
                bits: e.bitsUsed,
                timestamp: 0,
                deleted: !1,
                user: s.__assign({
                    userID: e.author.id,
                    userLogin: e.author.login,
                    userType: o.a.User,
                    color: e.authorColor
                }, Object(u.a)(e.authorName, e.author.login)),
                messageParts: Object(c.f)(e.body.content, a, e.bitsUsed, t, n, e.authorName)
            }
        }

        function r(e) {
            var t = "ChatMessage:" + e.tags.msg_id;
            return {
                __typename: "ChatMessage",
                "Symbol(id)": t,
                id: e.tags.msg_id,
                authorName: e.tags.display_name,
                authorColor: e.tags.color,
                author: {
                    __typename: "User",
                    "Symbol(id)": "User:" + e.user_id,
                    id: e.user_id,
                    login: e.username
                },
                body: {
                    __typename: "MessageBody",
                    "Symbol(id)": "$" + t + ".body",
                    content: e.message,
                    emotes: e.tags.emotes.map(function(e, n) {
                        return {
                            __typename: "EmbeddedEmote",
                            "Symbol(id)": t + ".body.emotes." + n,
                            emoteID: e.id.toString(),
                            from: e.start,
                            to: e.end,
                            setID: e.set
                        }
                    })
                },
                badges: e.tags.badges.map(function(e, n) {
                    return {
                        __typename: "Badge",
                        "Symbol(id)": t + ".badges." + n,
                        setID: e.badge_set_id,
                        version: e.badge_set_version
                    }
                }),
                bitsUsed: e.bits_used
            }
        }
        t.b = i, t.a = a, t.c = r;
        var s = n(0),
            o = n(777),
            l = n(754),
            c = n(122),
            u = n(356)
    },
    879: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "embeddedEmote"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "EmbeddedEmote"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "emoteID"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "setID"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "from"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "to"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 74
            }
        };
        n.loc.source = {
            body: "fragment embeddedEmote on EmbeddedEmote {\n  emoteID\n  setID\n  from\n  to\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    884: function(e, t) {},
    885: function(e, t, n) {
        function i(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !r[t] && (r[t] = !0, !0)
            })
        }
        var a = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "GetBitsButton_Bits"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isLoggedIn"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "withChannel"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "bitsOffers"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "skip"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "bitsOffersFragment"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "idSHA1"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bitsOffers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "bitsOffersFragment"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "withChannel"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 803
            }
        };
        a.loc.source = {
            body: '# Documentation about how to use GraphQL is located in the Data Access Guide:\n# https://git-aws.internal.justin.tv/pages/twilight/twilight-docs/docs/guides/data-access.html\n# Additionally, use the GraphQL explorer (https://api.twitch.tv/gql/explore) to browse\n# available GraphQL data and construct your query.\n#import "twilight/features/bits/models/bits-offers-fragment.gql"\n#import "twilight/features/chat/models/cheer-fragment.gql"\n\nquery GetBitsButton_Bits($isLoggedIn: Boolean!, $withChannel: Boolean!, $login: String!) {\n  bitsOffers @skip(if: $isLoggedIn) {\n    ...bitsOffersFragment\n  }\n  currentUser @include(if: $isLoggedIn) {\n    id\n    idSHA1\n    bitsBalance\n    bitsOffers {\n      ...bitsOffersFragment\n    }\n  }\n  user(login: $login) @include(if: $withChannel) {\n    id\n    ...cheer\n  }\n}\n',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var r = {};
        a.definitions = a.definitions.concat(i(n(802).definitions)), a.definitions = a.definitions.concat(i(n(804).definitions)), e.exports = a
    },
    886: function(e, t) {},
    887: function(e, t) {},
    888: function(e, t) {},
    889: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "UserProfileEditor"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 121
            }
        };
        n.loc.source = {
            body: "query UserProfileEditor($login: String!) {\n  user(login: $login) {\n    id\n    login\n    profileImageURL(width: 70)\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    890: function(e, t) {},
    891: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChannelPage_ChannelHeader"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isPartner"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "videos"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "totalCount"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "followers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "totalCount"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "follows"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "totalCount"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 423
            }
        };
        n.loc.source = {
            body: "query ChannelPage_ChannelHeader($login: String!) {\n  user(login: $login) {\n    id\n    login\n    displayName\n    profileImageURL(width: 70)\n    roles {\n      isPartner\n    }\n    stream {\n      id\n    }\n    videos {\n      totalCount\n    }\n    followers {\n      totalCount\n    }\n    follows {\n      totalCount\n    }\n    cheer {\n      id\n    }\n  }\n  currentUser {\n    id\n    roles {\n      isStaff\n      isSiteAdmin\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    900: function(e, t, n) {
        "use strict";

        function i(e) {
            return a.createElement(r.U, null, a.createElement(r.U, {
                padding: 1
            }, a.createElement(r.U, null, e.title && a.createElement(r._21, {
                fontSize: r.L.Size6,
                bold: !0
            }, e.title), a.createElement(r.P, {
                position: r._2.Absolute,
                margin: {
                    top: 1,
                    right: 1
                },
                attachTop: !0,
                attachRight: !0
            }, a.createElement("button", {
                onClick: e.onClearCrateNotification
            }, a.createElement(r._8, {
                asset: r._9.Close
            }))), a.createElement(r.U, {
                margin: {
                    top: 1
                }
            }, e.cardBody)), e.cardFooter), a.createElement(r._5, {
                onCountdownEnd: e.onCrateNotifactionTimeout,
                countdown: e.countdownTimeSec,
                size: r._6.ExtraSmall,
                mask: !0
            }))
        }
        var a = n(1),
            r = n(3),
            s = i;
        n.d(t, !1, function() {
            return i
        }), n.d(t, "a", function() {
            return s
        })
    },
    908: function(e, t, n) {
        "use strict";

        function i() {
            var e = Object(Ce.a)();
            return be.__assign({}, e, {
                emoteSets: [],
                followerDuration: ye.a,
                followerMode: !1,
                isHidden: !1,
                messages: {},
                slowMode: !1,
                subsOnlyMode: !1
            })
        }

        function a(e, t) {
            switch (void 0 === e && (e = i()), t.type) {
                case Se.a:
                    return be.__assign({}, e, {
                        isHidden: !0
                    });
                case Se.b:
                    return be.__assign({}, e, {
                        emoteSets: [],
                        messages: {}
                    });
                case Se.c:
                    return be.__assign({}, e, {
                        isHidden: !1
                    });
                case Se.d:
                    return be.__assign({}, e, {
                        emoteSets: t.emoteSets
                    });
                case Se.e:
                    return be.__assign({}, e, {
                        followerMode: !1
                    });
                case Se.f:
                    return be.__assign({}, e, {
                        followerDuration: t.duration
                    });
                case Se.g:
                    return be.__assign({}, e, {
                        lastUsedFollowerDurations: be.__assign({}, e.lastUsedFollowerDurations, (n = {}, n[t.channelLogin] = t.duration, n))
                    });
                case Se.h:
                    return be.__assign({}, e, {
                        followerMode: !0
                    });
                case Se.i:
                    return ve(e, function(e) {
                        return e.messages
                    }, function(e) {
                        return e[t.channel] = t.messages, e
                    });
                case Se.j:
                    return be.__assign({}, e, {
                        showModIcons: !1
                    });
                case Se.k:
                    return be.__assign({}, e, {
                        showModIcons: !0
                    });
                case Se.l:
                    return be.__assign({}, e, {
                        slowMode: !1
                    });
                case Se.m:
                    return be.__assign({}, e, {
                        slowMode: !0
                    });
                case Se.n:
                    return be.__assign({}, e, {
                        subsOnlyMode: !1
                    });
                case Se.o:
                    return be.__assign({}, e, {
                        subsOnlyMode: !0
                    });
                case Se.p:
                    return be.__assign({}, e, {
                        showTimestamps: !1
                    });
                case Se.q:
                    return be.__assign({}, e, {
                        showTimestamps: !0
                    });
                default:
                    return e
            }
            var n
        }

        function r(e, t) {
            return e.chat && e.chat.messages ? e.chat.messages[t] || [] : []
        }

        function s() {
            return {
                viewerCardOptions: null
            }
        }

        function o(e, t) {
            switch (void 0 === e && (e = s()), t.type) {
                case _e.a:
                    return be.__assign({}, e, {
                        viewerCardOptions: null
                    });
                case _e.b:
                    return t.viewerCardOptions ? be.__assign({}, e, {
                        viewerCardOptions: be.__assign({}, t.viewerCardOptions)
                    }) : e;
                default:
                    return e
            }
        }

        function l(e) {
            return {
                currentUserID: e.session.user && "" + e.session.user.id || ""
            }
        }

        function c(e, t, n, i) {
            return be.__awaiter(this, void 0, void 0, function() {
                var a, r, s, o, l;
                return be.__generator(this, function(c) {
                    switch (c.label) {
                        case 0:
                            a = "https://api.twitch.tv/api/channels/" + e + "/use_chat_notification_token", r = 1, c.label = 1;
                        case 1:
                            if (!(r <= et)) return [3, 7];
                            c.label = 2;
                        case 2:
                            return c.trys.push([2, 5, , 6]), [4, fetch(a, {
                                body: JSON.stringify({
                                    token_id: t,
                                    custom_message: n
                                }),
                                method: "POST",
                                headers: {
                                    "Client-ID": ke.n.config.legacyClientID,
                                    Accept: "application/json; charset=UTF-8",
                                    "content-type": "application/json; charset=UTF-8",
                                    Authorization: "OAuth " + i
                                }
                            })];
                        case 3:
                            return s = c.sent(), [4, s.json()];
                        case 4:
                            return o = c.sent(), [2, o];
                        case 5:
                            if (l = c.sent(), r === et) throw l;
                            return [3, 6];
                        case 6:
                            return ++r, [3, 1];
                        case 7:
                            return [2]
                    }
                })
            })
        }

        function u(e) {
            return {
                firstPageLoaded: e.session.firstPageLoaded,
                isLoggedIn: Object(Te.d)(e)
            }
        }

        function d() {
            return Math.round(Math.random() * kt * 2 - kt)
        }

        function p(e, t) {
            var n = {
                headers: {
                    "Client-ID": ke.n.config.legacyClientID,
                    Authorization: "OAuth " + t,
                    Accept: "application/vnd.twitchtv.v5+json"
                },
                method: "POST"
            };
            return fetch(Tt + "/raids/" + e + "/join", n)
        }

        function m(e, t) {
            var n = {
                headers: {
                    "Client-ID": ke.n.config.legacyClientID,
                    Authorization: "OAuth " + t,
                    Accept: "application/vnd.twitchtv.v5+json"
                },
                method: "POST"
            };
            return fetch(Tt + "/raids/" + e + "/leave", n)
        }

        function h(e) {
            b(Ot.SpadeEventType.RaidPromptJoin, e)
        }

        function g(e) {
            b(Ot.SpadeEventType.RaidPromptLeave, e)
        }

        function f(e) {
            b(Ot.SpadeEventType.RaidPromptImpression, e)
        }

        function b(e, t) {
            var n = {
                raid_creator_id: Number(t.creatorID),
                raid_source_id: Number(t.sourceChannelID),
                raid_target_id: Number(t.targetChannelID),
                raid_id: t.id
            };
            ke.m.track(e, n)
        }

        function v(e) {
            if (e.data.loading || e.data.error) return De.createElement("div", null);
            var t = e.component,
                n = be.__rest(e, ["component"]);
            return De.createElement(t, be.__assign({}, n))
        }

        function k(e, t) {
            var n;
            if (y(e.pathname)) n = "/" + t;
            else {
                if (!S(e.pathname)) return "";
                n = "/" + t + "/chat"
            }
            var i = be.__assign({}, Bt.parse(e.search), {
                referrer: "raid"
            });
            return n + "?" + Bt.stringify(i)
        }

        function S(e) {
            return /^\/.+\/chat$/.test(e)
        }

        function y(e) {
            return !e.split("/")[2]
        }

        function C(e) {
            return {
                authToken: Object(Te.a)(e)
            }
        }

        function _(e) {
            return Object(Oe.bindActionCreators)({
                login: function() {
                    return Object(bt.f)(ft.a.RaidJoin)
                }
            }, e)
        }

        function E() {
            return {
                type: Qt.a.Clear,
                id: Object(on.a)("clear")
            }
        }

        function N(e, t) {
            return {
                type: Qt.a.BadgesUpdated,
                id: Object(on.a)("updateBadges"),
                userName: e,
                badges: t
            }
        }

        function w(e, t, n, i, a, r, s) {
            return void 0 === s && (s = !1), be.__assign({}, Object(cn.a)(t, n, i, a, r, s), {
                type: e,
                id: n.id || Object(on.a)(n.username)
            })
        }

        function T(e, t, n) {
            return {
                type: Qt.a.Notice,
                id: Object(on.a)("notice"),
                channel: e,
                msgid: t,
                message: n
            }
        }

        function D(e, t, n, i) {
            return {
                bitsConfig: i,
                message: t,
                purchase: e,
                timestamp: n,
                id: Object(on.a)(t.user.userLogin + "-purchase"),
                type: Qt.a.Purchase
            }
        }

        function I(e, t, n) {
            return {
                type: Qt.a.Raid,
                id: Object(on.a)("raid"),
                channel: e,
                userLogin: t,
                params: n
            }
        }

        function U(e, t, n) {
            return {
                type: Qt.a.Unraid,
                id: Object(on.a)("unraid"),
                channel: e,
                userLogin: t,
                message: n
            }
        }

        function O() {
            return {
                type: Qt.a.Connected,
                id: Object(on.a)("connected")
            }
        }

        function M(e) {
            return {
                type: Qt.a.Disconnected,
                id: Object(on.a)("disconnected"),
                reason: e
            }
        }

        function F() {
            return {
                type: Qt.a.Reconnect,
                id: Object(on.a)("reconnect")
            }
        }

        function P(e) {
            return {
                type: Qt.a.Hosting,
                id: Object(on.a)("hosting"),
                hostedChannel: e
            }
        }

        function x(e) {
            return {
                type: Qt.a.Unhost,
                id: Object(on.a)("unhost-" + e)
            }
        }

        function L(e) {
            return {
                type: Qt.a.RoomMods,
                id: Object(on.a)("roommods"),
                moderatorLogins: e
            }
        }

        function A(e) {
            return {
                type: Qt.a.RoomState,
                id: Object(on.a)("roomstate"),
                state: e
            }
        }

        function j(e, t) {
            return {
                type: Qt.a.SlowMode,
                id: Object(on.a)("slowmode"),
                enabled: e,
                length: t
            }
        }

        function R(e, t) {
            return {
                type: Qt.a.FollowerOnlyMode,
                id: Object(on.a)("follower-only"),
                enabled: e,
                length: t
            }
        }

        function B(e) {
            return {
                type: Qt.a.SubscriberOnlyMode,
                id: Object(on.a)("subscriber-only"),
                enabled: e
            }
        }

        function H(e, t, n, i) {
            return {
                type: Qt.a.Subscription,
                id: Object(on.a)(t + "-sub"),
                channel: e.slice(1),
                isPrime: n,
                userLogin: t,
                tier: i
            }
        }

        function V(e, t, n, i, a) {
            return {
                type: Qt.a.SubGift,
                id: Object(on.a)(t + "-sub"),
                channel: e.slice(1),
                isPrime: n,
                userLogin: t,
                tier: i,
                recipient: a
            }
        }

        function W(e) {
            return {
                user: {
                    userDisplayName: e,
                    userLogin: e,
                    userID: null,
                    userType: ln.a.User,
                    color: void 0,
                    isIntl: !1
                }
            }
        }

        function G(e, t, n, i, a, r, s, o) {
            var l = r && s ? Object(cn.a)(r, s, xe.a, !1, o) : W(t);
            return be.__assign({}, l, {
                type: Qt.a.Resubscription,
                id: Object(on.a)(t + "-sub"),
                channel: e.slice(1),
                isPrime: n,
                months: i,
                tier: a
            })
        }

        function q(e) {
            return e + "-automod-rejected"
        }

        function z(e, t, n, i) {
            var a = {
                    badges: null,
                    bits: 0,
                    color: "",
                    displayName: "",
                    id: "",
                    userID: n,
                    username: n,
                    userType: ln.a.User,
                    emotes: null
                },
                r = Object(cn.a)(t, a, xe.a, !1);
            return {
                type: Qt.a.AutoModRejectedPrompt,
                id: q(e),
                category: i,
                isAutoModAction: !0,
                rejectedMessage: be.__assign({}, r, {
                    type: Qt.a.Post,
                    id: e
                })
            }
        }

        function $() {
            return {
                id: Object(on.a)("automod-message-rejected"),
                type: Qt.a.AutoModMessageRejected,
                isTargeted: !0,
                isAutoModAction: !0
            }
        }

        function J() {
            return {
                id: Object(on.a)("automod-message-allowed"),
                type: Qt.a.AutoModMessageAllowed,
                isTargeted: !0,
                isAutoModAction: !0
            }
        }

        function K() {
            return {
                id: Object(on.a)("automod-message-denied"),
                type: Qt.a.AutoModMessageDenied,
                isTargeted: !0,
                isAutoModAction: !0
            }
        }

        function Q(e) {
            return ke.n.apollo.client.query({
                query: hn,
                variables: {
                    login: e
                }
            })
        }

        function Y(e, t) {
            ke.m.track(e, be.__assign({
                time: Date.now()
            }, t))
        }

        function X(e) {
            return Object(ke.d)("{bannedUserLogin} is no longer banned from this room.", {
                bannedUserLogin: e
            }, "UnbanUserMutation")
        }

        function Z() {
            return Object(ke.d)("Unable to unban user", "UnbanUserMutation")
        }

        function ee(e) {
            return Object(Oe.bindActionCreators)({
                onUsernameClick: _e.d
            }, e)
        }

        function te(e) {
            var t;
            switch (e) {
                case "aggressive":
                    t = Object(ke.d)("aggressive", "AutoModLine");
                    break;
                case "sexual":
                    t = Object(ke.d)("sexual", "AutoModLine");
                    break;
                case "profanity":
                    t = Object(ke.d)("profanity", "AutoModLine");
                    break;
                case "identity":
                    t = Object(ke.d)("identity", "AutoModLine");
                    break;
                default:
                    return Object(ke.d)("Message is being held for review. Allow will post it to chat.", "AutoModLine")
            }
            return Object(ke.d)("Held a message for reason: {category}. Allow will post it to chat.", {
                category: t
            }, "AutoModLine")
        }

        function ne() {
            return {
                raid_error_self: Object(ke.d)("You cannot raid your own channel.", "RaidErrorSelfMessage"),
                raid_error_forbidden: Object(ke.d)("You cannot raid this channel.", "RaidErrorAlreadyRaidingMessage"),
                raid_error_already_raiding: Object(ke.d)("You already have a raid in progress.", "RaidErrorForbiddenMessage"),
                raid_error_unexpected: Object(ke.d)("There was a problem starting the raid. Please try again in a minute.", "RaidErrorUnexpectedMessage"),
                unraid_error_unexpected: Object(ke.d)("There was a problem stopping the raid. Please try again in a minute.", "UnraidErrorUnexpectedMessage"),
                unraid_error_no_active_raid: Object(ke.d)("You do not have an active raid.", "UnraidErrorNoActiveRaidMessage"),
                raid_notice_restricted_chat: Object(ke.d)("This channel has follower or subscriber only chat.", "RaidNoticeRestrictedChatMessage"),
                raid_notice_mature: Object(ke.d)("This channel is intended for mature audiences.", "RaidNoticeMatureMessage"),
                raid_notice_owner: Object(ke.d)("This channel has started a raid, type {unraidCommand} if you want to cancel.", {
                    unraidCommand: "/unraid"
                }, "RaidNoticeOwnerMessage")
            }
        }

        function ie(e) {
            return e.msgid in ne()
        }

        function ae(e) {
            return e.type === Qt.a.Post || e.type === Qt.a.PostWithMention || e.type === Qt.a.Action
        }

        function re(e) {
            return {
                darkModeEnabled: Object(Pe.a)(e) === Me.a.Dark
            }
        }

        function se(e) {
            return {
                isSubsOnlyModeEnabled: e.chat.subsOnlyMode,
                sessionUser: Object(Te.c)(e)
            }
        }

        function oe(e) {
            return Object(Oe.bindActionCreators)({
                login: function() {
                    return Object(bt.f)(ft.a.Chat)
                }
            }, e)
        }

        function le(e, t) {
            return {
                messages: r(e, t.channelLogin),
                showModerationIcons: e.chat.showModIcons,
                showTimestamps: e.chat.showTimestamps
            }
        }

        function ce(e) {
            return be.__awaiter(this, void 0, void 0, function() {
                var t, n, i, a, r;
                return be.__generator(this, function(s) {
                    switch (s.label) {
                        case 0:
                            t = "https://tmi.twitch.tv/group/user/" + e.toLowerCase() + "/chatters", n = 1, s.label = 1;
                        case 1:
                            if (!(n <= Pa)) return [3, 7];
                            s.label = 2;
                        case 2:
                            return s.trys.push([2, 5, , 6]), [4, fetch(t, {
                                method: "GET",
                                headers: {
                                    Accept: "application/json; charset=UTF-8",
                                    "content-type": "application/json; charset=UTF-8"
                                }
                            })];
                        case 3:
                            return i = s.sent(), [4, i.json()];
                        case 4:
                            return a = s.sent(), ke.i.debug("[update] getViewers done."), [2, a];
                        case 5:
                            if (r = s.sent(), n === Pa) throw r;
                            return [3, 6];
                        case 6:
                            return ++n, [3, 1];
                        case 7:
                            return [2]
                    }
                })
            })
        }

        function ue(e, t) {
            if (!t) return e;
            var n = Object.assign({}, e);
            return Object.keys(n).forEach(function(e) {
                var i = n[e];
                Array.isArray(i) && (n[e] = i.filter(function(e) {
                    return -1 !== e.toLowerCase().indexOf(t)
                }))
            }), n
        }

        function de(e) {
            return Object(Oe.bindActionCreators)({
                onShowViewerCard: _e.d
            }, e)
        }

        function pe(e) {
            return {
                viewerCardOptions: e.viewerCard.viewerCardOptions
            }
        }

        function me(e) {
            return Object(Oe.bindActionCreators)({
                hideViewerCard: _e.c,
                showReportUserModal: function(e) {
                    var t = be.__rest(e, []);
                    return Object(Ra.d)(Ba.a, t)
                }
            }, e)
        }

        function he(e, t) {
            return Object(Oe.bindActionCreators)({
                onChatMessagesReset: function() {
                    return Se.t()
                },
                onChatMessagesUpdate: function(e) {
                    return Se.F(t.channelLogin, e)
                },
                onChatUnhide: function() {
                    return Se.G()
                },
                onFollowerModeDisable: function() {
                    return Se.u()
                },
                onFollowerModeDurationChange: function(e) {
                    return Se.r(e)
                },
                onFollowerModeEnable: function() {
                    return Se.z()
                },
                onSlowModeDisable: function() {
                    return Se.w()
                },
                onSlowModeEnable: function() {
                    return Se.B()
                },
                onSubsOnlyModeDisable: function() {
                    return Se.x()
                },
                onSubsOnlyModeEnable: function() {
                    return Se.C()
                },
                onThemeChange: function(e) {
                    return Object(Fe.b)(e, Fe.a.TypedCommand)
                },
                onThreadSelect: function(e) {
                    return Object(bn.l)({
                        threadID: e,
                        collapsed: !0
                    }, Object(Sn.a)())
                }
            }, e)
        }

        function ge(e) {
            return {
                emoteSets: e.chat.emoteSets,
                firstPageLoaded: e.session.firstPageLoaded,
                isHidden: e.chat.isHidden,
                rightColumnExpanded: e.ui.rightColumnExpanded,
                theme: Object(Pe.a)(e)
            }
        }

        function fe(e) {
            return {
                user: Object(Te.c)(e)
            }
        }
        var be = n(0),
            ve = n(129),
            ke = n(2),
            Se = n(351),
            ye = n(798),
            Ce = n(821);
        ke.n.store.registerReducer("chat", a);
        var _e = n(775);
        ke.n.store.registerReducer("viewerCard", o);
        var Ee, Ne, we = n(8),
            Te = n(18),
            De = n(1),
            Ie = n(7),
            Ue = n(30),
            Oe = n(10),
            Me = n(36),
            Fe = n(125),
            Pe = n(44),
            xe = n(347),
            Le = n(799),
            Ae = n(4),
            je = n(100),
            Re = n(37),
            Be = n(22),
            He = n(35),
            Ve = n(782),
            We = n(3),
            Ge = (n(909), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        formInputValue: "",
                        sharing: !1
                    }, t.hasUnmounted = !1, t.handleShareClick = function() {
                        return be.__awaiter(t, void 0, void 0, function() {
                            return be.__generator(this, function(e) {
                                switch (e.label) {
                                    case 0:
                                        this.setState({
                                            sharing: !0
                                        }), e.label = 1;
                                    case 1:
                                        return e.trys.push([1, , 3, 4]), [4, this.props.onShare(this.state.formInputValue)];
                                    case 2:
                                        return e.sent(), [3, 4];
                                    case 3:
                                        return this.hasUnmounted || this.setState({
                                            sharing: !1
                                        }), [7];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.onInputChange = function(e) {
                        t.setState({
                            formInputValue: e.currentTarget.value
                        })
                    }, t
                }
                return be.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.hasUnmounted = !1
                }, t.prototype.componentWillUnmount = function() {
                    this.hasUnmounted = !0
                }, t.prototype.render = function() {
                    var e = Ae("share-input", {
                            "share-input--hidden": this.props.hide
                        }),
                        t = this.state.formInputValue.length > 255,
                        n = t ? "-" + (this.state.formInputValue.length - 255) : Object(ke.d)("Share", "ChatResubNotification"),
                        i = Object(ke.d)("Close", "ChatResubNotification"),
                        a = Object(ke.d)("Add a message to the streamer", "ChatResubNotification"),
                        r = this.state.sharing ? We.y.Loading : We.y.Default;
                    return De.createElement(We.U, {
                        className: e,
                        padding: 1,
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        position: We._2.Absolute
                    }, De.createElement(We._17, {
                        className: "share-input__container",
                        position: We._2.Relative,
                        border: !0,
                        background: We.m.Base,
                        padding: 1
                    }, De.createElement(We.U, {
                        position: We._2.Absolute,
                        attachTop: !0,
                        attachRight: !0
                    }, De.createElement(We.v, {
                        ariaLabel: i,
                        onClick: this.props.onClose,
                        type: We.w.Secondary,
                        icon: We._9.Close,
                        "data-a-target": "resub-notification-close-form-btn",
                        "data-test-selector": "share-input__close-form-btn"
                    })), De.createElement(We.U, {
                        textAlign: We._22.Center,
                        padding: {
                            top: 1,
                            bottom: 2
                        }
                    }, this.props.children), De.createElement(We.U, {
                        display: We.H.Flex,
                        flexWrap: We.K.NoWrap
                    }, De.createElement(We.U, {
                        fullWidth: !0
                    }, De.createElement(We.Q, {
                        autoFocus: !0,
                        type: We.R.Text,
                        value: this.state.formInputValue,
                        onChange: this.onInputChange,
                        placeholder: a,
                        "data-a-target": "resub-notification-share-message-input",
                        "data-test-selector": "share-input__share-message-input"
                    })), De.createElement(We.u, {
                        disabled: t,
                        onClick: this.handleShareClick,
                        "data-a-target": "resub-notification-send-msg-btn",
                        "data-test-selector": "share-input__send-msg-btn",
                        state: r
                    }, n))))
                }, t
            }(De.Component)),
            qe = (n(910), function(e) {
                var t = Object(ke.d)("Share", "Chat--SharePrompt"),
                    n = Object(ke.d)("Close", "Chat--SharePrompt"),
                    i = Ae("chat-share-prompt", {
                        "chat-share-prompt--hidden": e.hide || !e.children
                    });
                return De.createElement(We.U, {
                    position: We._2.Absolute,
                    fullWidth: !0,
                    className: i,
                    padding: {
                        y: .5,
                        left: .5
                    }
                }, De.createElement(We.U, {
                    display: We.H.Flex,
                    padding: 1,
                    justifyContent: We.T.Between,
                    alignItems: We.c.Center,
                    flexWrap: We.K.NoWrap
                }, De.createElement(We._21, {
                    "data-a-target": "resub-notification-months-subbed-text",
                    "data-test-selector": "share-prompt__text"
                }, e.children), De.createElement(We.U, {
                    display: We.H.Flex,
                    flexWrap: We.K.NoWrap,
                    alignItems: We.c.Center,
                    flexShrink: 0,
                    padding: {
                        left: .5
                    }
                }, De.createElement(We.U, {
                    display: We.H.Inline,
                    padding: {
                        right: .5
                    },
                    flexShrink: 0
                }, De.createElement(We.u, {
                    onClick: e.onClickShare,
                    size: We.x.Small,
                    "data-a-target": "resub-notification-share-notification-btn",
                    "data-test-selector": "share-prompt__share-btn"
                }, t)), De.createElement(We.U, {
                    flexShrink: 0
                }, De.createElement(We.v, {
                    ariaLabel: n,
                    onClick: e.onClickClose,
                    type: We.w.Secondary,
                    icon: We._9.Close,
                    "data-a-target": "resub-notification-close-notification-btn",
                    "data-test-selector": "share-prompt__close-btn"
                })))))
            }),
            ze = n(247),
            $e = n(911),
            Je = n(912),
            Ke = n(913),
            Qe = (n(914), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        showMessageInput: !1,
                        sendingMessage: !1
                    }, t.dataIsReady = function(e) {
                        return e.data && !e.data.loading && !e.data.error
                    }, t.purchaseTokensExist = function(e) {
                        return e.data.user.self && e.data.user.self.purchaseTokens.length > 0
                    }, t.manageParentSpace = function(e) {
                        if (!t.dataIsReady(e) || !t.purchaseTokensExist(e)) return void t.props.dismissSpace();
                        t.props.requestSpace()
                    }, t.toggleContentShown = function() {
                        t.setState(function(e) {
                            return {
                                showMessageInput: !e.showMessageInput
                            }
                        })
                    }, t.dismissPurchaseToken = function() {
                        return be.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return be.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        if (this.state.sendingMessage || !this.props.data.user.self || !this.props.data.user.self.purchaseTokens) return [2];
                                        this.setState({
                                            sendingMessage: !0
                                        }), n.label = 1;
                                    case 1:
                                        return n.trys.push([1, , 3, 4]), e = this.props.data.user.self.purchaseTokens[0].id, t = function(e) {
                                            return e.user.self && (e.user.self.purchaseTokens = e.user.self.purchaseTokens.slice(1)), e
                                        }, Object(Be.d)(Je, {
                                            channelLogin: this.props.channelLogin
                                        }, t), [4, this.props.dismissPurchaseToken(Object(Be.a)({
                                            token: e,
                                            channelID: this.props.data.user.id
                                        }))];
                                    case 2:
                                        return n.sent(), [3, 4];
                                    case 3:
                                        return this.setState({
                                            sendingMessage: !1
                                        }), [7];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.sharePurchase = function(e) {
                        return be.__awaiter(t, void 0, void 0, function() {
                            var t;
                            return be.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        if (this.state.sendingMessage || !this.props.data.user.self || !this.props.data.user.self.purchaseTokens) return [2];
                                        this.setState({
                                            sendingMessage: !0
                                        }), n.label = 1;
                                    case 1:
                                        return n.trys.push([1, , 3, 4]), [4, this.props.sharePurchaseTokenInChat(Object(Be.a)({
                                            token: this.props.data.user.self.purchaseTokens[0].id,
                                            channelID: this.props.data.user.id,
                                            message: e
                                        }))];
                                    case 2:
                                        return n.sent(), t = function(e) {
                                            return e.user.self && (e.user.self.purchaseTokens = e.user.self.purchaseTokens.slice(1)), e
                                        }, Object(Be.d)(Je, {
                                            channelLogin: this.props.channelLogin
                                        }, t), [3, 4];
                                    case 3:
                                        return this.setState({
                                            sendingMessage: !1
                                        }), [7];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return be.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.manageParentSpace(this.props)
                }, t.prototype.componentDidUpdate = function() {
                    this.manageParentSpace(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (this.dataIsReady(e)) {
                        var t = e.pubsub.messages.userCommerceUpdateEvent,
                            n = this.props.pubsub.messages.userCommerceUpdateEvent,
                            i = !n && t,
                            a = n && t && n.time !== t.time;
                        (i || a) && this.props.data && this.props.data.refetch()
                    }
                }, t.prototype.render = function() {
                    return this.dataIsReady(this.props) && this.purchaseTokensExist(this.props) && this.props.data.user.self ? this.renderPurchaseToken(this.props.data.user.self.purchaseTokens[0]) : null
                }, t.prototype.renderPurchaseToken = function(e) {
                    var t;
                    t = this.props.data.user.isCommerceRevShareEnabled ? Object(ke.d)("You bought {product} and supported {channelName}!", {
                        product: De.createElement("strong", null, e.title),
                        channelName: De.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat") : Object(ke.d)("You bought {product} while watching {channelName}!", {
                        product: De.createElement("strong", null, e.title),
                        channelName: De.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat");
                    var n, i = e.inGameContents.map(this.renderLootInGameContent),
                        a = e.badges.map(this.renderLootBadge),
                        r = e.emoteSets.map(this.renderLootEmoteSet),
                        s = e.bits.map(this.renderLootBits, this);
                    return (i.length || a.length || r.length || s.length) && (n = De.createElement(We.U, {
                        "data-test-selector": "share-purchase__loot",
                        padding: {
                            bottom: 1
                        },
                        display: We.H.Flex,
                        justifyContent: We.T.Center
                    }, i, a, r, s), t = Object(ke.d)("You bought {product} and opened a Twitch Crate! Let {channelName} know you shared the love.", {
                        product: De.createElement("strong", null, e.title),
                        channelName: De.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat")), De.createElement(We.U, {
                        className: "chat-resub-notification",
                        padding: 0,
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        position: We._2.Absolute
                    }, De.createElement(qe, {
                        hide: this.state.showMessageInput,
                        onClickShare: this.toggleContentShown,
                        onClickClose: this.dismissPurchaseToken
                    }, t), De.createElement(Ge, {
                        hide: !this.state.showMessageInput,
                        onShare: this.sharePurchase,
                        onClose: this.toggleContentShown
                    }, De.createElement(We.U, {
                        padding: {
                            bottom: 1
                        }
                    }, De.createElement("figure", {
                        height: 40,
                        width: 40
                    }, De.createElement("img", {
                        src: e.imageThumbnail
                    }))), n, De.createElement(We._21, null, Object(ke.d)("Score! Give a shout out to {channelName} in Chat about all your sweet loot!", {
                        channelName: De.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat"))))
                }, t.prototype.renderLootInGameContent = function(e) {
                    return De.createElement(We.U, {
                        key: e.id,
                        margin: {
                            top: .5,
                            right: 1
                        },
                        "data-test-selector": "share-purchase__igc"
                    }, De.createElement("img", {
                        className: "share-to-chat__loot",
                        src: e.imageURL
                    }))
                }, t.prototype.renderLootEmoteSet = function(e) {
                    return Object(ze.b)(e.emoteSet.emotes).map(function(e) {
                        return De.createElement(We.U, {
                            key: e.id,
                            margin: {
                                top: .5,
                                right: 1
                            },
                            "data-test-selector": "share-purchase__emoticon"
                        }, De.createElement("img", {
                            className: "share-to-chat__loot",
                            srcSet: e.srcSet,
                            alt: e.displayName
                        }))
                    })
                }, t.prototype.renderLootBadge = function(e) {
                    return De.createElement(We.U, {
                        key: e.id,
                        margin: {
                            top: .5,
                            right: 1
                        },
                        "data-test-selector": "share-purchase__badge"
                    }, De.createElement("img", {
                        className: "share-to-chat__loot",
                        src: e.badge.image2x
                    }))
                }, t.prototype.renderLootBits = function(e) {
                    if (this.props.bitsConfig) return De.createElement(We.U, {
                        key: e.id,
                        margin: {
                            top: .5,
                            right: 1
                        },
                        "data-test-selector": "share-purchase__bits"
                    }, De.createElement(Ve.a, {
                        count: e.quantity,
                        bitsConfig: this.props.bitsConfig,
                        withImage: !0
                    }))
                }, t = be.__decorate([Object(Ie.a)(Je, {
                    name: "data",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(je.a)([{
                    topic: function(e) {
                        return Object(He.l)(e.currentUserID)
                    },
                    mapMessageTypesToProps: (Ee = {}, Ee[Re.c.ChatNotification] = "userCommerceUpdateEvent", Ee)
                }])], t)
            }(De.Component)),
            Ye = Object(Ie.a)($e, {
                name: "dismissPurchaseToken"
            })(Object(Ie.a)(Ke, {
                name: "sharePurchaseTokenInChat"
            })(Qe)),
            Xe = Object(we.a)(l)(Ye),
            Ze = (n(915), function(e) {
                var t = Ae("rare-emote__face", {
                        "rare-emote__face--animate": !!e.animate
                    }),
                    n = Ae("rare-emote__neck", {
                        "rare-emote__neck--animate": !!e.animate
                    });
                return De.createElement(We.U, {
                    overflow: We.Y.Hidden,
                    className: "rare-emote"
                }, De.createElement(We.P, {
                    zIndex: We._38.Above,
                    position: We._2.Relative
                }, De.createElement("img", {
                    className: t,
                    src: "https://static-cdn.jtvnw.net/emoticons/v1/" + e.emoteID + "/2.0"
                })), De.createElement(We.U, {
                    position: We._2.Relative,
                    zIndex: We._38.Default,
                    className: n
                }, De.createElement(We._8, {
                    width: 28,
                    height: 28,
                    asset: We._9.Neck
                })))
            }),
            et = 3,
            tt = n(251),
            nt = n(916),
            it = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        resubDismissed: !1,
                        showMessageInput: !1,
                        sendingMessage: !1
                    }, t.randomEmoteId = t.getRandomEmoteId(), t.dataIsReady = function(e) {
                        return e.data && !e.data.loading && !e.data.error
                    }, t.resubExists = function(e, t) {
                        return e.data.user.self && e.data.user.self.resubNotification && !t.resubDismissed
                    }, t.manageParentSpace = function() {
                        if (!t.dataIsReady(t.props) || !t.resubExists(t.props, t.state)) return void t.props.dismissSpace();
                        t.props.requestSpace()
                    }, t.toggleContentShown = function() {
                        t.setState(function(e) {
                            return {
                                showMessageInput: !e.showMessageInput
                            }
                        })
                    }, t.dismissResubNotification = function() {
                        t.setState({
                            resubDismissed: !0
                        })
                    }, t.shareResub = function(e) {
                        return be.__awaiter(t, void 0, void 0, function() {
                            var t, n;
                            return be.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        if (this.state.sendingMessage || !this.props.data.user.self || !this.props.data.user.self.resubNotification) return [2];
                                        this.setState({
                                            sendingMessage: !0
                                        }), i.label = 1;
                                    case 1:
                                        return i.trys.push([1, 4, 5, 6]), this.props.authToken ? [4, c(this.props.channelLogin, this.props.data.user.self.resubNotification.token, e, this.props.authToken)] : [3, 3];
                                    case 2:
                                        i.sent(), t = function(e) {
                                            return e.user.self && (e.user.self.resubNotification = null), e
                                        }, Object(Be.d)(nt, {
                                            channelLogin: this.props.channelLogin
                                        }, t), this.dismissResubNotification(), i.label = 3;
                                    case 3:
                                        return [3, 6];
                                    case 4:
                                        return n = i.sent(), ke.i.error(n, "Failed to post resub message"), [3, 6];
                                    case 5:
                                        return this.setState({
                                            sendingMessage: !1
                                        }), [7];
                                    case 6:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return be.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.manageParentSpace()
                }, t.prototype.componentDidUpdate = function() {
                    this.manageParentSpace()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.dataIsReady(e) && e.data.user.self && e.data.user.self.resubNotification && !this.randomEmoteId && (this.randomEmoteId = this.getRandomEmoteId())
                }, t.prototype.render = function() {
                    return this.dataIsReady(this.props) && this.resubExists(this.props, this.state) && this.props.data.user.self && this.props.data.user.self.resubNotification ? this.renderResubToken(this.props.data.user.self.resubNotification) : null
                }, t.prototype.renderResubToken = function(e) {
                    return De.createElement(We.U, {
                        className: "chat-resub-notification",
                        padding: 0,
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        position: We._2.Absolute
                    }, De.createElement(qe, {
                        hide: this.state.showMessageInput,
                        onClickShare: this.toggleContentShown,
                        onClickClose: this.dismissResubNotification
                    }, Object(ke.d)("It's your {monthsSubbed, number} month anniversary!", {
                        monthsSubbed: e.months
                    }, "ChatResubNotification")), De.createElement(Ge, {
                        hide: !this.state.showMessageInput,
                        onShare: this.shareResub,
                        onClose: this.toggleContentShown
                    }, De.createElement(Ze, {
                        emoteID: this.randomEmoteId,
                        animate: this.state.showMessageInput
                    }), De.createElement(We._21, null, Object(ke.d)("Hooray! Let {channelName} know it's your {monthsSubbed, number} month anniversary.", {
                        channelName: De.createElement("strong", null, this.props.channelDisplayName),
                        monthsSubbed: e.months
                    }, "ChatResubNotification"))))
                }, t.prototype.getRandomEmoteId = function() {
                    var e = Math.floor(Math.random() * tt.a.length);
                    return tt.a[e]
                }, t = be.__decorate([Object(Ie.a)(nt, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                })], t)
            }(De.Component),
            at = it;
        n(917);
        ! function(e) {
            e[e.Resub = 1] = "Resub", e[e.Purchase = 2] = "Purchase"
        }(Ne || (Ne = {}));
        var rt, st, ot = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        requestedSpaces: new Set
                    }, t.addSpace = function(e) {
                        t.state.requestedSpaces.has(e) || t.setState(function(t) {
                            var n = new Set(t.requestedSpaces);
                            return n.add(e), {
                                requestedSpaces: n
                            }
                        })
                    }, t.removeSpace = function(e) {
                        t.state.requestedSpaces.has(e) && t.setState(function(t) {
                            var n = new Set(t.requestedSpaces);
                            return n.delete(e), {
                                requestedSpaces: n
                            }
                        })
                    }, t.requestResubSpace = function() {
                        t.addSpace(Ne.Resub)
                    }, t.dismissResubSpace = function() {
                        t.removeSpace(Ne.Resub)
                    }, t.requestPurchaseSpace = function() {
                        t.addSpace(Ne.Purchase)
                    }, t.dismissPurchaseSpace = function() {
                        t.removeSpace(Ne.Purchase)
                    }, t
                }
                return be.__extends(t, e), t.prototype.render = function() {
                    var e = null;
                    this.state.requestedSpaces.size && (e = Array.from(this.state.requestedSpaces.values()).sort()[0]);
                    var t = Ae({
                            "share-to-chat__space--hidden": e !== Ne.Resub
                        }),
                        n = Ae({
                            "share-to-chat__space--hidden": e !== Ne.Purchase
                        });
                    return De.createElement(We.U, null, De.createElement(We.U, {
                        className: t
                    }, De.createElement(at, {
                        authToken: this.props.authToken,
                        channelDisplayName: this.props.channelDisplayName,
                        channelLogin: this.props.channelLogin,
                        requestSpace: this.requestResubSpace,
                        dismissSpace: this.dismissResubSpace
                    })), De.createElement(We.U, {
                        className: n
                    }, De.createElement(Xe, {
                        channelDisplayName: this.props.channelDisplayName,
                        channelLogin: this.props.channelLogin,
                        bitsConfig: this.props.bitsConfig,
                        requestSpace: this.requestPurchaseSpace,
                        dismissSpace: this.dismissPurchaseSpace
                    })))
                }, t
            }(De.Component),
            lt = ot,
            ct = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        show: !0
                    }, t.dismiss = function() {
                        t.setState({
                            show: !1
                        })
                    }, t
                }
                return be.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    e.hostedChannelDisplayName !== this.props.hostedChannelDisplayName && this.setState({
                        show: !0
                    })
                }, t.prototype.render = function() {
                    return this.state.show ? De.createElement(We._17, {
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        background: We.m.AccentAlt2,
                        color: We.F.Overlay,
                        position: We._2.Absolute,
                        className: "hosting-notification",
                        padding: {
                            y: .5,
                            left: .5
                        },
                        "data-a-target": "hosting-notification-container"
                    }, De.createElement(We.U, {
                        display: We.H.Flex,
                        padding: 1,
                        justifyContent: We.T.Between,
                        alignItems: We.c.Center,
                        flexWrap: We.K.NoWrap
                    }, De.createElement(We.U, {
                        display: We.H.Flex,
                        flexWrap: We.K.NoWrap
                    }, De.createElement(We.U, {
                        margin: {
                            right: .5
                        },
                        flexShrink: 0
                    }, De.createElement(We._21, null, Object(ke.d)("Hosting", "ChatHostingNotification"))), De.createElement(We.U, {
                        ellipsis: !0,
                        flexShrink: 1,
                        margin: {
                            right: .5
                        }
                    }, De.createElement(We._21, {
                        type: We._26.Strong,
                        "data-test-selector": "hosting-notification__text",
                        "data-a-target": "hosting-notification-channel-name"
                    }, "" + this.props.hostedChannelDisplayName))), De.createElement(We.U, {
                        display: We.H.Flex,
                        flexWrap: We.K.NoWrap,
                        flexShrink: 0
                    }, De.createElement(We.U, {
                        display: We.H.Inline,
                        padding: {
                            right: .5
                        }
                    }, De.createElement(We.u, {
                        linkTo: {
                            pathname: "/" + this.props.hostedChannelLogin,
                            state: {
                                content: "host_channel",
                                medium: "chat_bar_notification"
                            }
                        },
                        size: We.x.Small,
                        "data-a-target": "hosting-notification-gotochannel-button"
                    }, Object(ke.d)("Go to Channel", "ChatHostingNotification"))), De.createElement(We.v, {
                        onClick: this.dismiss,
                        ariaLabel: Object(ke.d)("Close", "HostingNotification"),
                        size: We.x.Small,
                        overlay: !0,
                        icon: We._9.Close,
                        "data-a-target": "hosting-notification-close-button"
                    })))) : null
                }, t
            }(De.Component),
            ut = n(60),
            dt = n(757),
            pt = (n(918), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        requestFailed: !1
                    }, t.logger = ke.n.logger.withCategory("orbis"), t.onClickInteraction = function(e) {
                        t.props.sendMessage(":act " + e.currentTarget.getAttribute("data-action")), t.toggleBalloonRef.toggleBalloon()
                    }, t.setToggleBalloonRef = function(e) {
                        return t.toggleBalloonRef = e
                    }, t
                }
                return be.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.isLoggedIn && this.props.firstPageLoaded && this.getChatProperties()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.isLoggedIn && !this.props.firstPageLoaded && e.firstPageLoaded && this.getChatProperties()
                }, t.prototype.render = function() {
                    return this.props.isLoggedIn && !this.state.requestFailed && this.hasInteractions() ? De.createElement(We._17, {
                        className: "orbis",
                        display: We.H.Flex,
                        flexDirection: We.J.Column,
                        alignItems: We.c.Stretch,
                        background: We.m.Base,
                        flexShrink: 0,
                        borderBottom: !0
                    }, De.createElement(ut.a, {
                        ref: this.setToggleBalloonRef
                    }, De.createElement("div", {
                        className: "orbis__dropdown-container",
                        "data-test-selector": "orbis-dropdown-container"
                    }, De.createElement(We.U, {
                        padding: {
                            y: 1,
                            x: 2
                        },
                        display: We.H.Flex,
                        justifyContent: We.T.Between,
                        flexWrap: We.K.NoWrap
                    }, De.createElement(We.U, {
                        ellipsis: !0,
                        padding: {
                            right: 1
                        }
                    }, De.createElement(We._21, {
                        type: We._26.Span
                    }, Object(ke.d)("Interactions Available", "Orbis"))), De.createElement(We.U, {
                        display: We.H.Flex,
                        justifyContent: We.T.Between,
                        alignItems: We.c.Center,
                        flexShrink: 0
                    }, De.createElement(We.U, {
                        className: "orbis__dropdown-icon",
                        display: We.H.Flex,
                        justifyContent: We.T.Between,
                        alignItems: We.c.Center
                    }, De.createElement(We._8, {
                        asset: We._9.AngleRight
                    }))))), De.createElement(We.p, {
                        offsetY: "1px",
                        noTail: !0
                    }, De.createElement(We.U, {
                        className: "orbis__dropdown-content",
                        padding: 1
                    }, this.renderInteractions())))) : null
                }, t.prototype.renderInteractions = function() {
                    return this.state.chatProperties ? [this.renderInteraction(this.state.chatProperties.sce_title_preset_text_1), this.renderInteraction(this.state.chatProperties.sce_title_preset_text_2), this.renderInteraction(this.state.chatProperties.sce_title_preset_text_3), this.renderInteraction(this.state.chatProperties.sce_title_preset_text_4), this.renderInteraction(this.state.chatProperties.sce_title_preset_text_5)] : null
                }, t.prototype.renderInteraction = function(e) {
                    return e ? De.createElement(We.S, {
                        onClick: this.onClickInteraction,
                        key: e,
                        "data-action": e,
                        "data-test-selector": "orbis-interaction"
                    }, De.createElement(We.P, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, De.createElement(We._21, {
                        ellipsis: !0
                    }, e))) : null
                }, t.prototype.getChatProperties = function() {
                    return be.__awaiter(this, void 0, void 0, function() {
                        var e, t;
                        return be.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return n.trys.push([0, 2, , 3]), [4, dt.a.get("/api/channels/" + this.props.channelLogin + "/chat_properties?on_site=1")];
                                case 1:
                                    return e = n.sent(), e.requestError ? (this.logger.error(e.requestError, "Unable to fetch chat properties"), this.setState({
                                        requestFailed: !0
                                    }), [2]) : e.error ? (this.logger.error(new Error("Chat Properties Error"), "The API returned a non-200 response", e.error), this.setState({
                                        requestFailed: !0
                                    }), [2]) : e.body ? (this.setState({
                                        chatProperties: e.body
                                    }), [3, 3]) : (this.logger.error(new Error("Chat Properties Error"), "Body is undefined"), this.setState({
                                        requestFailed: !0
                                    }), [2]);
                                case 2:
                                    return t = n.sent(), this.logger.error(t, "Unable to fetch chat properties"), this.setState({
                                        requestFailed: !0
                                    }), [3, 3];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, t.prototype.hasInteractions = function() {
                    return !!this.state.chatProperties && !!(this.state.chatProperties.sce_title_preset_text_1 || this.state.chatProperties.sce_title_preset_text_2 || this.state.chatProperties.sce_title_preset_text_3 || this.state.chatProperties.sce_title_preset_text_4 || this.state.chatProperties.sce_title_preset_text_5)
                }, t
            }(De.Component)),
            mt = pt,
            ht = Object(we.a)(u)(mt),
            gt = n(21),
            ft = n(50),
            bt = n(34),
            vt = function() {
                function e(e) {
                    this.data = e || {}
                }
                return e.prototype.withRaid = function(t) {
                    return new e(Object.assign({}, this.data, (n = {}, n[t.id] = !0, n)));
                    var n
                }, e.prototype.withoutRaid = function(t) {
                    return new e(Object.assign({}, this.data, (n = {}, n[t.id] = !1, n)));
                    var n
                }, e.prototype.hasRaid = function(e) {
                    return Boolean(this.data[e.id])
                }, e
            }(),
            kt = 3,
            St = 5,
            yt = function() {
                function e(e, t) {
                    this.message = e, this.id = e.raid.id, this.creatorID = e.raid.creator_id, this.sourceChannelID = e.raid.source_id, this.targetChannelID = e.raid.target_id, this.viewerCount = e.raid.viewer_count, t ? (this.varianceSeconds = t.varianceSeconds, this.totalDurationInSeconds = t.totalDurationInSeconds, this.clientCreatedAtTimestamp = t.clientCreatedAtTimestamp) : (this.varianceSeconds = d(), this.totalDurationInSeconds = this.getTotalDurationInSeconds(e.raid.remaining_duration_seconds), this.clientCreatedAtTimestamp = (new Date).getTime()), this.isAnnouncing = e.type === Ct && this.totalDurationInSeconds > 0, this.hasTimeToJoin = this.totalDurationInSeconds > St
                }
                return e.prototype.withMessage = function(t) {
                    return this.message === t ? this : this.id !== t.raid.id ? new e(t) : new e(t, this)
                }, e.prototype.getRemainingJoinTime = function(e) {
                    void 0 === e && (e = new Date);
                    var t = e.getTime() - this.clientCreatedAtTimestamp;
                    return 1e3 * this.totalDurationInSeconds - t
                }, e.prototype.getTotalDurationInSeconds = function(e) {
                    var t = e + this.varianceSeconds;
                    return Math.max(t, 0)
                }, e
            }(),
            Ct = "raid_update",
            _t = function(e) {
                var t = wt();
                t[e] = !0, ke.k.set("raid", t)
            },
            Et = function(e) {
                var t = wt();
                delete t[e], ke.k.set("raid", t)
            },
            Nt = function(e) {
                return wt()[e]
            },
            wt = function() {
                return ke.k.get("raid", {})
            },
            Tt = "https://api.twitch.tv/kraken",
            Dt = n(776),
            It = (n(919), {
                "data-test-selector": "countdown-fill-width"
            }),
            Ut = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return be.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this,
                        t = this.props.startPolling || setInterval;
                    this.intervalID = t(function() {
                        return e.forceUpdate()
                    }, 1e3)
                }, t.prototype.componentWillUnmount = function() {
                    clearInterval(this.intervalID)
                }, t.prototype.componentDidUpdate = function() {
                    this.props.getRemainingTime() <= 0 && this.props.onCountdownEnd()
                }, t.prototype.render = function() {
                    var e = this.countdownPercentage + "%";
                    return De.createElement("div", {
                        className: "raid-countdown-bar"
                    }, De.createElement("div", be.__assign({
                        className: "raid-countdown-bar__fill",
                        style: {
                            width: e
                        }
                    }, It)))
                }, Object.defineProperty(t.prototype, "countdownPercentage", {
                    get: function() {
                        return this.props.getRemainingTime() / this.props.totalCountdownTime * 100
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(De.PureComponent),
            Ot = (n(920), n(13)),
            Mt = {
                medium: "twitch_channel",
                content: "raid_channel"
            },
            Ft = n(921),
            Pt = Object(Ie.a)(Ft, {
                options: function(e) {
                    return {
                        variables: {
                            sourceChannelID: e.raid.sourceChannelID,
                            targetChannelID: e.raid.targetChannelID
                        }
                    }
                }
            })(v),
            xt = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getRemainingTime = function() {
                        return t.props.raid.getRemainingJoinTime()
                    }, t.handleCountdownEnd = function() {
                        t.props.onRaidInvitePeriodOver(t.props.data.targetChannel.displayName)
                    }, t
                }
                return be.__extends(t, e), t.prototype.componentDidMount = function() {
                    f(this.props.raid)
                }, t.prototype.render = function() {
                    var e = this.props.data,
                        t = e.sourceChannel,
                        n = e.targetChannel;
                    return De.createElement(We._17, {
                        className: "raid-notification",
                        background: We.m.AccentAlt2,
                        color: We.F.Overlay,
                        position: We._2.Absolute,
                        zIndex: We._38.Above,
                        fullWidth: !0
                    }, De.createElement(We.U, {
                        className: "raid-notification__content",
                        padding: {
                            y: 1,
                            x: 2
                        },
                        display: We.H.Flex,
                        justifyContent: We.T.Between
                    }, De.createElement(We.U, {
                        alignItems: We.c.Center,
                        display: We.H.Flex
                    }, De.createElement(We.l, {
                        size: 36,
                        imageSrc: t.profileImageURL,
                        imageAlt: t.displayName
                    }), De.createElement(We._8, {
                        asset: We._9.AngleRight,
                        height: 10
                    }), De.createElement(We.l, {
                        size: 36,
                        imageSrc: n.profileImageURL,
                        imageAlt: n.displayName
                    }), De.createElement(We.U, {
                        padding: {
                            left: 1
                        }
                    }, De.createElement(We._21, {
                        color: We.F.OverlayAlt,
                        type: We._26.P,
                        className: "raid-notification__channel-name"
                    }, Object(ke.d)("{sourceDisplayName} is", {
                        sourceDisplayName: t.displayName
                    }, "RaidCTASourceChannel")), De.createElement(We._21, null, Object(ke.d)("raiding {targetDisplayName}", {
                        targetDisplayName: n.displayName
                    }, "RaidCTATargetChannel")), De.createElement(We._21, {
                        bold: !0,
                        "data-test-selector": "current-raiders"
                    }, Object(ke.d)("{viewerCount, plural, one {# raider} other {# raiders}}", {
                        viewerCount: this.props.raid.viewerCount
                    }, "RaidCTATotalRaiders")))), this.props.children), De.createElement(Ut, {
                        totalCountdownTime: 1e3 * this.props.raid.totalDurationInSeconds,
                        getRemainingTime: this.getRemainingTime,
                        onCountdownEnd: this.handleCountdownEnd
                    }))
                }, t
            }(De.Component),
            Lt = function(e) {
                return function(t) {
                    return De.createElement(Pt, be.__assign({}, t, {
                        component: e
                    }))
                }
            }(xt),
            At = function(e) {
                return De.createElement(We.U, {
                    alignSelf: We.d.Center
                }, De.createElement(We.u, {
                    size: We.x.Large,
                    type: We.z.Hollow,
                    overlay: !0,
                    onClick: e.onCancelRaid,
                    "data-test-selector": "raid_cancel"
                }, Object(ke.d)("Cancel", "RaidCTACancel")))
            },
            jt = function(e) {
                return e.hasJoined ? De.createElement(We.U, {
                    alignSelf: We.d.Center
                }, De.createElement(We.u, {
                    size: We.x.Large,
                    type: We.z.Hollow,
                    overlay: !0,
                    onClick: e.onLeaveRaid,
                    "data-test-selector": "leave"
                }, Object(ke.d)("Leave", "RaidCTALeave"))) : De.createElement(We.U, {
                    alignSelf: We.d.Center
                }, De.createElement(We.u, {
                    size: We.x.Large,
                    onClick: e.onJoinRaid,
                    "data-test-selector": "join"
                }, Object(ke.d)("Join", "RaidCTAJoin")))
            },
            Rt = n(922),
            Bt = n(20),
            Ht = n(355),
            Vt = function() {
                return De.createElement("div", null)
            },
            Wt = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        expiredRaids: new vt,
                        joinedRaids: new vt
                    }, t.handleRaidInvitePeriodOver = function(e) {
                        var n = t.hasJoinedCurrentRaid;
                        if (t.currentRaid && t.setState({
                                expiredRaids: t.state.expiredRaids.withRaid(t.currentRaid)
                            }, function() {
                                t._currentRaid = void 0
                            }), n) {
                            var i = t.props.history.location || window.location,
                                a = k(i, e);
                            a && t.props.history.push(a, Mt)
                        }
                    }, t.handleJoinRaid = function() {
                        if (t.currentRaid) {
                            var e = t.currentRaid.id;
                            if (!t.props.authToken) return void t.props.login();
                            p(e, t.props.authToken), h(t.currentRaid), t.setState({
                                joinedRaids: t.state.joinedRaids.withRaid(t.currentRaid)
                            }), _t(e)
                        }
                    }, t.handleLeaveRaid = function() {
                        if (t.currentRaid) {
                            var e = t.currentRaid.id;
                            m(e, t.props.authToken), g(t.currentRaid), t.setState({
                                joinedRaids: t.state.joinedRaids.withoutRaid(t.currentRaid)
                            }), Et(e)
                        }
                    }, t.handleCancelRaid = function() {
                        if (t.currentRaid) {
                            var e = t.currentRaid.id;
                            t.props.send(Dt.a), Et(e)
                        }
                    }, t
                }
                return be.__extends(t, e), t.prototype.render = function() {
                    return this.shouldRenderRaidNotification ? De.createElement(Lt, {
                        raid: this.currentRaid,
                        onRaidInvitePeriodOver: this.handleRaidInvitePeriodOver
                    }, this.renderCTAButton()) : null
                }, t.prototype.renderCTAButton = function() {
                    return this.isRaidCreator ? De.createElement(At, {
                        onCancelRaid: this.handleCancelRaid
                    }) : De.createElement(jt, {
                        onJoinRaid: this.handleJoinRaid,
                        onLeaveRaid: this.handleLeaveRaid,
                        hasJoined: this.hasJoinedCurrentRaid
                    })
                }, Object.defineProperty(t.prototype, "shouldRenderRaidNotification", {
                    get: function() {
                        var e = this.currentRaid;
                        return e && e.isAnnouncing && e.sourceChannelID === this.props.channelID && !this.state.expiredRaids.hasRaid(e) && (e.hasTimeToJoin || this.hasJoinedCurrentRaid)
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "isRaidCreator", {
                    get: function() {
                        var e = this.currentRaid;
                        return e && this.props.data && this.props.data.user && this.props.data.user.id === e.creatorID
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "currentRaid", {
                    get: function() {
                        var e = this.props.pubsub.messages.raidMessage;
                        return e && (this._currentRaid ? this._currentRaid = this._currentRaid.withMessage(e) : this._currentRaid = new yt(e)), this._currentRaid
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "hasJoinedCurrentRaid", {
                    get: function() {
                        var e = this.currentRaid;
                        return !!e && (this.isRaidCreator || this.state.joinedRaids.hasRaid(e) || Nt(e.id))
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(De.Component),
            Gt = Object(Ie.a)(Rt, {
                skip: function(e) {
                    return !e.authToken
                }
            })(Wt),
            qt = Object(we.a)(C, _)(Gt),
            zt = Object(je.a)([{
                topic: function(e) {
                    return Object(He.g)(e.channelID)
                },
                mapMessageTypesToProps: (rt = {}, rt[Re.c.RaidUpdate] = "raidMessage", rt[Re.c.RaidCancel] = "raidMessage", rt)
            }])(qt),
            $t = Object(gt.e)(zt),
            Jt = function(e) {
                return function(t) {
                    var n = {
                        fallback: Vt,
                        yes: function() {
                            return De.createElement(e, be.__assign({}, t))
                        }
                    };
                    return De.createElement(Ht.a, {
                        name: "TWILIGHT_LEEROY_JENKINS",
                        loader: Vt,
                        assignments: n
                    })
                }
            }($t),
            Kt = n(801),
            Qt = n(754),
            Yt = n(923),
            Xt = 200,
            Zt = function() {
                function e(e) {
                    var t = this;
                    this.getActiveChatters = function() {
                        return t.isDirty = !1, Object.keys(t.activeChatters).map(function(e) {
                            return t.activeChatters[e]
                        })
                    }, this.setCurrentUserID = function(e) {
                        t.currentUserID = e, t.activeChatterIDs.has(e) && (t.isDirty = !0, t.removeActiveChatter(e))
                    }, this.consumeChatEvent = function(e) {
                        switch (e.type) {
                            case Qt.a.Action:
                            case Qt.a.Post:
                            case Qt.a.PostWithMention:
                                var n = e;
                                t.handleActiveChatter(n.user)
                        }
                    }, this.handleActiveChatter = function(e) {
                        e.userID && e.userID !== t.channelID && e.userID !== t.currentUserID && (t.activeChatterIDs.has(e.userID) ? (t.activeChatterIDs.delete(e.userID), t.addActiveChatter(e)) : (t.addActiveChatter(e), t.trimActiveChatters(), t.isDirty = !0))
                    }, this.addActiveChatter = function(e) {
                        e.userID && (t.activeChatterIDs.add(e.userID), t.activeChatters[e.userID] = e)
                    }, this.removeActiveChatter = function(e) {
                        t.activeChatterIDs.delete(e), delete t.activeChatters[e]
                    }, this.trimActiveChatters = function() {
                        if (!(t.activeChatterIDs.size <= Xt))
                            for (var e = t.activeChatterIDs.size - Xt, n = t.activeChatterIDs.values(), i = 0; i < e; i++) {
                                var a = n.next().value;
                                t.removeActiveChatter(a)
                            }
                    }, this.activeChatterIDs = new Set, this.activeChatters = {}, this.channelID = e, this.currentUserID = null
                }
                return e
            }(),
            en = n(248),
            tn = 1e3,
            nn = 250,
            an = 0,
            rn = 200,
            sn = function() {
                function e(e) {
                    void 0 === e && (e = nn);
                    var t = this;
                    this.maxSize = e, this.setDelay = function(e) {
                        t.delayDuration = e
                    }, this.setCurrentUserLogin = function(e) {
                        t.currentUserLogin = e
                    }, this.consumeChatEvent = function(e) {
                        var n = !1;
                        switch (e.type) {
                            case Qt.a.Action:
                            case Qt.a.Post:
                            case Qt.a.PostWithMention:
                                var i = e;
                                if (i.user.userID && t.blockedUsers.has(i.user.userID)) return;
                                var a = i.messageParts[0];
                                if (a && a.type === en.a.Text && a.content.startsWith(":act ")) return;
                                n = !t.isOwnMessage(i);
                                break;
                            case Qt.a.Resubscription:
                                var r = e;
                                n = !t.isOwnMessage(r) && void 0 !== r.messageParts;
                                break;
                            case Qt.a.Ban:
                            case Qt.a.Timeout:
                                var s = e,
                                    o = s.userLogin;
                                if (t.moderatedUsers.has(o)) return;
                                [t.buffer, t.delayedMessageBuffer.map(function(e) {
                                    return e.event
                                })].forEach(function(e) {
                                    e.forEach(function(e) {
                                        e.user && o === e.user.userLogin && e.messageParts && !e.deleted && (e.deleted = !0)
                                    })
                                }), t.moderatedUsers.add(o), setTimeout(t.unmoderateUser(o), tn);
                                break;
                            case Qt.a.Disconnected:
                                return;
                            case Qt.a.Reconnect:
                                if (t.buffer.find(function(t) {
                                        return t.id === e.id
                                    }) || t.delayedMessageBuffer.find(function(t) {
                                        return t.event.id === e.id
                                    })) return;
                                break;
                            case Qt.a.Clear:
                                t.delayedMessageBuffer = [], t.buffer = []
                        }
                        t.delayedMessageBuffer.push({
                            event: e,
                            time: Date.now(),
                            shouldDelay: n
                        })
                    }, this.unmoderateUser = function(e) {
                        return function() {
                            t.moderatedUsers.delete(e)
                        }
                    }, this.isOwnMessage = function(e) {
                        var n = e.user;
                        return !(!t.currentUserLogin || !n || n.userLogin !== t.currentUserLogin)
                    }, this.delayedMessageBuffer = [], this.buffer = [], this.moderatedUsers = new Set, this.blockedUsers = new Set, this._isDirty = !1, this.throttlingDuration = rn, this.delayDuration = an, this.currentUserLogin = null, this.flushInterval = setInterval(function() {
                        return t.flushRawMessages()
                    }, this.throttlingDuration), this.setBlockedUsers = this.setBlockedUsers.bind(this)
                }
                return e.prototype.shutdown = function() {
                    this.flushInterval && clearInterval(this.flushInterval)
                }, e.prototype.setBlockedUsers = function(e) {
                    this.blockedUsers = new Set(e)
                }, e.prototype.toArray = function() {
                    return this.buffer = this.buffer.slice(-this.maxSize), this._isDirty = !1, this.buffer
                }, e.prototype.isDeletable = function(e) {
                    return void 0 !== e.deleted
                }, e.prototype.flushRawMessages = function() {
                    var e = this,
                        t = [],
                        n = Date.now();
                    this.delayedMessageBuffer.forEach(function(i) {
                        var a = i.event,
                            r = i.time,
                            s = i.shouldDelay;
                        r <= n - e.delayDuration || !s ? e.isDeletable(a) && a.deleted || (e.buffer.push(a), e._isDirty = !0) : t.push({
                            event: a,
                            time: r,
                            shouldDelay: s
                        })
                    }), this.delayedMessageBuffer = t
                }, Object.defineProperty(e.prototype, "isDirty", {
                    get: function() {
                        return this._isDirty
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "length", {
                    get: function() {
                        return this.buffer.length
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "moderatedUserCount", {
                    get: function() {
                        return this.moderatedUsers.size
                    },
                    enumerable: !0,
                    configurable: !0
                }), e
            }(),
            on = n(756),
            ln = n(777),
            cn = n(122),
            un = n(822),
            dn = n(250),
            pn = function() {
                function e(e, t, n) {
                    var i = this;
                    this.onJoinedEvent = function(e) {
                        return i.postMessage(O())
                    }, this.onDisconnectedEvent = function(e) {
                        return i.postMessage(M(e.reason))
                    }, this.onReconnectingEvent = function(e) {
                        return i.postMessage(F())
                    }, this.onHostingEvent = function(e) {
                        return i.postMessage(P(e.target))
                    }, this.onUnhostEvent = function(e) {
                        return i.postMessage(x(e.channel))
                    }, this.onChatMessageEvent = function(e) {
                        i.postMessage(i.convertMessage(e))
                    }, this.onChatActionEvent = function(e) {
                        var t = i.bitsConfig || xe.a,
                            n = e.message.user.username === i.userLogin ? i.selfEmotes : void 0,
                            a = w(Qt.a.Action, e.action, e.message.user, t, i.shouldBlockLinks(e.message.user), n);
                        i.postMessage(a)
                    }, this.onChatNoticeEvent = function(e) {
                        var t = T(e.channel, e.msgid, e.body);
                        i.postMessage(t)
                    }, this.onTimeoutEvent = function(e) {
                        i.onModerationEvent(Qt.a.Timeout, e)
                    }, this.onBanEvent = function(e) {
                        i.onModerationEvent(Qt.a.Ban, e)
                    }, this.onModerationEvent = function(e, t) {
                        i.postMessage(Object(un.a)(e, t.userLogin, t.reason, t.duration))
                    }, this.onSubscriptionEvent = function(e) {
                        var t;
                        switch (e.methods.plan) {
                            case "1000":
                                t = e.methods.prime ? "prime" : "$4.99";
                                break;
                            case "2000":
                                t = "$9.99";
                                break;
                            case "3000":
                                t = "$24.99";
                                break;
                            default:
                                t = "$4.99"
                        }
                        i.postMessage(H(e.channel, e.user.displayName, e.methods.prime, t))
                    }, this.onSubscriptionGiftEvent = function(e) {
                        var t;
                        switch (e.methods.plan) {
                            case "1000":
                                t = "$4.99";
                                break;
                            case "2000":
                                t = "$9.99";
                                break;
                            case "3000":
                                t = "$24.99";
                                break;
                            default:
                                t = "custom"
                        }
                        i.postMessage(V(e.channel, e.user.displayName, e.methods.prime, t, e.recipientName))
                    }, this.onResubscriptionEvent = function(e) {
                        var t;
                        switch (e.methods.plan) {
                            case "1000":
                                t = e.methods.prime ? "prime" : "$4.99";
                                break;
                            case "2000":
                                t = "$9.99";
                                break;
                            case "3000":
                                t = "$24.99";
                                break;
                            default:
                                t = "$4.99"
                        }
                        i.postMessage(G(e.channel, e.user.displayName, e.methods.prime, e.months, t, e.body, e.user))
                    }, this.onRoomModsEvent = function(e) {
                        return i.postMessage(L(e.usernames))
                    }, this.onRoomStateEvent = function(e) {
                        return i.postMessage(A(e.state))
                    }, this.onSlowModeEvent = function(e) {
                        return i.postMessage(j(e.enabled, e.length))
                    }, this.onFollowerOnlyModeEvent = function(e) {
                        return i.postMessage(R(e.enabled, e.length))
                    }, this.onSubscriberOnlyModeEvent = function(e) {
                        return i.postMessage(B(e.enabled))
                    }, this.onClearChatEvent = function(e) {
                        return i.postMessage(E())
                    }, this.onRaidEvent = function(e) {
                        return i.postMessage(I(e.channel, e.userLogin, e.params))
                    }, this.onUnraidEvent = function(e) {
                        return i.postMessage(U(e.channel, e.userLogin, e.message))
                    }, this.onBadgesUpdatedEvent = function(e) {
                        return i.postMessage(N(e.username, e.badges))
                    }, this.onPurchaseEvent = function(e) {
                        var t = i.bitsConfig || xe.a;
                        i.postMessage(D(e.purchase, i.convertMessage(e), e.timestamp, t))
                    }, this.convertMessage = function(e) {
                        var t = i.bitsConfig || xe.a,
                            n = e.message.user.username === i.userLogin ? i.selfEmotes : void 0;
                        return w(Qt.a.Post, e.message.body, e.message.user, t, i.shouldBlockLinks(e.message.user), n)
                    }, this.logger = ke.i.withCategory("chat-service"), this.logger.debug("Created"), this.userLogin = e, this.channelLogin = t, this.service = ke.n.tmi, this.client = ke.n.tmi.client, this.postMessage = n, this.disabled = ke.n.tmi.disabled
                }
                return e.prototype.join = function() {
                    return be.__awaiter(this, void 0, void 0, function() {
                        return be.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.logger.debug("Joining channel and binding all event listeners"), [4, this.service.awaitParted()];
                                case 1:
                                    return e.sent(), this.connectHandlers(), [4, this.service.join(this.channelLogin)];
                                case 2:
                                    return e.sent(), [2]
                            }
                        })
                    })
                }, e.prototype.part = function() {
                    return be.__awaiter(this, void 0, void 0, function() {
                        return be.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.logger.debug("Parting channel and unbinding all event listeners"), this.client.events.removeAll(), [4, this.service.part(this.channelLogin)];
                                case 1:
                                    return e.sent(), [2]
                            }
                        })
                    })
                }, e.prototype.sendMessage = function(e) {
                    return be.__awaiter(this, void 0, void 0, function() {
                        var t;
                        return be.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return n.trys.push([0, 2, , 3]), [4, this.client.sendCommand(this.channelLogin, e)];
                                case 1:
                                    return n.sent(), [3, 3];
                                case 2:
                                    return t = n.sent(), ke.i.warn("Failed to send message, or message timeout", t), [3, 3];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, e.prototype.updateEmotes = function(e) {
                    this.selfEmotes = Object(dn.a)(e), this.client.updateEmoteSets(e)
                }, e.prototype.updateChannelBadges = function(e) {
                    this.client.updateChannelBadges(this.channelLogin, e)
                }, e.prototype.updateBitsConfig = function(e) {
                    this.bitsConfig = e
                }, e.prototype.updateBlockLinks = function(e) {
                    this.blockLinks = e
                }, e.prototype.connectHandlers = function() {
                    this.client.events.joined(this.onJoinedEvent), this.client.events.disconnected(this.onDisconnectedEvent), this.client.events.reconnecting(this.onReconnectingEvent), this.client.events.chat(this.onChatMessageEvent), this.client.events.usernotice(this.onChatMessageEvent), this.client.events.notice(this.onChatNoticeEvent), this.client.events.action(this.onChatActionEvent), this.client.events.badgesupdated(this.onBadgesUpdatedEvent), this.client.events.hosting(this.onHostingEvent), this.client.events.unhost(this.onUnhostEvent), this.client.events.badgesupdated(this.onBadgesUpdatedEvent), this.client.events.purchase(this.onPurchaseEvent), this.client.events.subscription(this.onSubscriptionEvent), this.client.events.resub(this.onResubscriptionEvent), this.client.events.subgift(this.onSubscriptionGiftEvent), this.client.events.timeout(this.onTimeoutEvent), this.client.events.ban(this.onBanEvent), this.client.events.clearchat(this.onClearChatEvent), this.client.events.raid(this.onRaidEvent), this.client.events.unraid(this.onUnraidEvent), this.client.events.mods(this.onRoomModsEvent), this.client.events.roomstate(this.onRoomStateEvent), this.client.events.followersonly(this.onFollowerOnlyModeEvent), this.client.events.slowmode(this.onSlowModeEvent), this.client.events.subscribers(this.onSubscriberOnlyModeEvent)
                }, e.prototype.shouldBlockLinks = function(e) {
                    return e.username !== this.channelLogin && e.userType !== ln.a.Staff && e.userType !== ln.a.GlobalMod && e.userType !== ln.a.Moderator && this.blockLinks
                }, e
            }(),
            mn = function() {
                function e(e, t, n) {
                    this.channelID = e, this.sessionUserID = t, this.unsubscribe = ke.j.subscribe({
                        topic: Object(He.d)(this.sessionUserID, this.channelID),
                        onMessage: function(e) {
                            switch (e.data.moderation_action) {
                                case Re.b.AutoModRejected:
                                    var t = z(e.data.msg_id, e.data.args[1], e.data.args[0], e.data.args[2]);
                                    n(t);
                                    break;
                                case Re.e.AutoModMessageRejected:
                                    n($());
                                    break;
                                case Re.e.AutoModMessageApproved:
                                    n(J());
                                    break;
                                case Re.e.AutoModMessageDenied:
                                    n(K())
                            }
                        }
                    })
                }
                return e
            }(),
            hn = n(924),
            gn = n(791),
            fn = n(5),
            bn = n(53),
            vn = n(363),
            kn = n(52),
            Sn = n(66),
            yn = n(925),
            Cn = n(45),
            _n = function() {
                function e() {}
                return e.fetchChannelsList = function() {
                    return be.__awaiter(this, void 0, void 0, function() {
                        var e, t;
                        return be.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return n.trys.push([0, 2, , 3]), [4, dt.a.get("/kraken/autohost/list")];
                                case 1:
                                    return e = n.sent(), [2, this.deserialize(e)];
                                case 2:
                                    return t = n.sent(), ke.i.error(t, "Couldn't fetch autohost list"), [2, []];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, e.setChannelsList = function(e) {
                    return be.__awaiter(this, void 0, void 0, function() {
                        var t, n;
                        return be.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return i.trys.push([0, 2, , 3]), [4, dt.a.put("/kraken/autohost/list", {
                                        body: {
                                            targets: e.join(",")
                                        }
                                    })];
                                case 1:
                                    return t = i.sent(), [2, this.deserialize(t)];
                                case 2:
                                    return n = i.sent(), ke.i.error(n, "Couldn't update autohost list"), [2, e];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, e.deserialize = function(e) {
                    return e.body ? e.body.targets.map(function(e) {
                        return e._id.toString()
                    }) : []
                }, e
            }(),
            En = (n(926), n(927)),
            Nn = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isDismissed: !1
                    }, t.dismiss = function() {
                        t.setState({
                            isDismissed: !0
                        }), t.track(Ot.SpadeEventType.AutohostChatDismiss);
                        var e = t.getAutohostNotificationsDismissed();
                        e[t.props.data.user.id] = {
                            dismissedDate: (new Date).getTime()
                        }, t.setAutohostNotificationsDismissed(e)
                    }, t.addChannelToAutohost = function() {
                        return be.__awaiter(t, void 0, void 0, function() {
                            var e;
                            return be.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return [4, _n.fetchChannelsList()];
                                    case 1:
                                        return e = t.sent().concat([this.props.data.user.id]), this.setState({
                                            autohostChannels: e
                                        }), _n.setChannelsList(e), this.track(Ot.SpadeEventType.AutohostChatYes), [2]
                                }
                            })
                        })
                    }, t.trackSettingsClick = function() {
                        t.track(Ot.SpadeEventType.AutohostChatSettings)
                    }, t
                }
                return be.__extends(t, e), t.prototype.componentDidMount = function() {
                    return be.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return be.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, _n.fetchChannelsList()];
                                case 1:
                                    return e = t.sent(), this.setState({
                                        autohostChannels: e
                                    }), this.isShowing && this.track(Ot.SpadeEventType.AutohostChatImpression), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    if (!this.isShowing) return null;
                    var e = Object(ke.d)("You are now hosting {channel}", {
                            channel: this.props.data.user.displayName
                        }, "AutohostPrompt"),
                        t = Object(ke.d)("Auto host this channel whenever you're offline?", "AutohostPrompt"),
                        n = Object(ke.d)("Yes", "AutohostPrompt"),
                        i = Object(ke.d)("Settings", "AutohostPrompt");
                    return De.createElement(We._17, {
                        background: We.m.Base,
                        className: "autohost-prompt",
                        margin: {
                            x: 2
                        },
                        position: We._2.Relative
                    }, De.createElement(We.p, {
                        size: We.r.Medium,
                        direction: We.q.TopLeft,
                        show: !0
                    }, De.createElement(We._17, {
                        alignItems: We.c.Center,
                        borderBottom: !0,
                        display: We.H.Flex,
                        flexDirection: We.J.Column,
                        justifyContent: We.T.Around,
                        padding: 1
                    }, De.createElement(We.U, {
                        position: We._2.Absolute,
                        attachTop: !0,
                        attachRight: !0
                    }, De.createElement(We.v, {
                        ariaLabel: Object(ke.d)("Close", "AutohostPrompt"),
                        size: We.x.Small,
                        type: We.w.Secondary,
                        "data-test-selector": "autohost-dismiss-button",
                        icon: We._9.Close,
                        onClick: this.dismiss
                    })), De.createElement(We.l, {
                        imageAlt: this.props.data.user.displayName,
                        imageSrc: this.props.data.user.profileImageURL,
                        size: 30
                    }), De.createElement(We.U, {
                        className: "autohost-prompt__hosting-message",
                        display: We.H.Flex,
                        padding: {
                            top: .5
                        }
                    }, De.createElement(We._8, {
                        asset: We._9.Check
                    }), De.createElement(We.P, {
                        margin: {
                            left: .5
                        }
                    }, De.createElement(We._21, null, e)))), De.createElement(We.U, {
                        className: "autohost-prompt__prompt",
                        justifyContent: We.T.Center,
                        display: We.H.Flex,
                        padding: 1
                    }, De.createElement(We._21, null, t), De.createElement(We._33, {
                        gutterSize: We._35.ExtraSmall,
                        childWidth: We._34.Large
                    }, De.createElement("div", null, De.createElement(We.u, {
                        "data-test-selector": "autohost-yes-button",
                        fullWidth: !0,
                        onClick: this.addChannelToAutohost
                    }, n)), De.createElement("div", null, De.createElement(We.u, {
                        "data-test-selector": "autohost-settings-button",
                        fullWidth: !0,
                        onClick: this.trackSettingsClick,
                        type: We.z.Hollow,
                        linkTo: "https://twitch.tv/settings/profile"
                    }, i))))))
                }, Object.defineProperty(t.prototype, "isShowing", {
                    get: function() {
                        return !this.state.isDismissed && !!this.props.hostedChannelLogin && !this.props.data.loading && !this.props.data.error && this.props.data.user && !!this.state.autohostChannels && !this.state.autohostChannels.includes(this.props.data.user.id) && !this.getAutohostNotificationsDismissed()[this.props.data.user.id]
                    },
                    enumerable: !0,
                    configurable: !0
                }), t.prototype.track = function(e) {
                    Y(e, {
                        user_id: this.props.data.currentUser.id,
                        hosting_channel_id: this.props.data.currentUser.id,
                        hosted_channel_id: this.props.data.user.id
                    })
                }, t.prototype.getAutohostNotificationsDismissed = function() {
                    return ke.k.get("autohost-notifications-dismissed", {})
                }, t.prototype.setAutohostNotificationsDismissed = function(e) {
                    return ke.k.set("autohost-notifications-dismissed", e)
                }, t = be.__decorate([Object(Ie.a)(En, {
                    skip: function(e) {
                        return !e.hostedChannelLogin
                    },
                    options: function(e) {
                        return {
                            variables: {
                                login: e.hostedChannelLogin
                            }
                        }
                    }
                })], t)
            }(De.Component),
            wn = Nn,
            Tn = n(781),
            Dn = n(103),
            In = n(823),
            Un = n(785),
            On = n(778),
            Mn = n(793),
            Fn = n(852),
            Pn = n(928),
            xn = (n(929), "chat-ban-button"),
            Ln = "chat-unban-button",
            An = "chat-timeout-button",
            jn = "chat-deleted-message-placeholder",
            Rn = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        alwaysShowMessage: !1
                    }, t.renderModerationIcons = function() {
                        if (!t.props.isCurrentUserModerator || !t.props.showModerationIcons) return null;
                        var e = t.onBanUser,
                            n = We._9.Ban,
                            i = Object(ke.d)("Ban", "ChatMessageEvent"),
                            a = xn;
                        return t.props.message.deleted && !t.state.alwaysShowMessage && (e = t.onUnbanUser, n = We._9.FollowCheck, i = Object(ke.d)("Unban", "ChatMessageEvent"), a = Ln), De.createElement(We.U, {
                            display: We.H.Inline,
                            className: "chat-line__mod-icons"
                        }, De.createElement("button", {
                            className: "mod-icon",
                            onClick: e,
                            "data-a-target": a
                        }, De.createElement(We._30, {
                            label: i
                        }, De.createElement(We._8, {
                            width: 16,
                            height: 16,
                            type: We._10.Inherit,
                            asset: n
                        }))), De.createElement("button", {
                            className: "mod-icon",
                            onClick: t.timeoutUser,
                            "data-a-target": An
                        }, De.createElement(We._30, {
                            label: Object(ke.d)("Timeout", "ChatMessageEvent")
                        }, De.createElement(We._8, {
                            width: 16,
                            height: 16,
                            type: We._10.Inherit,
                            asset: We._9.Timeout
                        }))))
                    }, t.renderMessageBody = function() {
                        if (t.props.isDeleted && !t.state.alwaysShowMessage) {
                            var e = Object(ke.d)("message deleted", "ChatLine");
                            return t.props.isCurrentUserModerator ? De.createElement("span", {
                                key: "deleted",
                                className: "chat-line__message--deleted",
                                "data-a-target": jn
                            }, De.createElement("a", {
                                href: "",
                                onClick: t.alwaysShowMessage
                            }, "<" + e + ">")) : De.createElement("span", {
                                key: "deleted",
                                className: "chat-line__message--deleted",
                                "data-a-target": jn
                            }, "<" + e + ">")
                        }
                        return Object(On.e)(t.props.message.messageParts, t.props.currentUserDisplayName, t.props.currentUserLogin)
                    }, t.onBanUser = function() {
                        t.props.onBanUser(t.props.message.user.userLogin)
                    }, t.onUnbanUser = function() {
                        t.props.onUnbanUser(t.props.message.user.userLogin)
                    }, t.timeoutUser = function() {
                        t.props.onBanUser(t.props.message.user.userLogin, 600)
                    }, t.alwaysShowMessage = function(e) {
                        e && e.preventDefault(), t.setState({
                            alwaysShowMessage: !0
                        })
                    }, t.usernameClickHandler = function() {
                        t.props.onUsernameClick(t.props.message.user.userLogin, Mn.a.chat_message, t.props.message.id)
                    }, t
                }
                return be.__extends(t, e), t.prototype.render = function() {
                    var e = this.props,
                        t = e.badgeSets,
                        n = e.className,
                        i = e.message,
                        a = e.showTimestamps,
                        r = {},
                        s = ": ";
                    i.type === Qt.a.Action && (r = {
                        color: i.user.color
                    }, s = " ");
                    var o = null;
                    return a && (o = Object(On.o)(i.timestamp)), De.createElement("div", {
                        className: Ae(n, "chat-line__message"),
                        style: r,
                        "data-a-target": "chat-line-message"
                    }, o, this.renderModerationIcons(), De.createElement(Tn.b, {
                        badgeSets: t,
                        badgesToRender: i.badges
                    }), De.createElement("button", {
                        onClick: this.usernameClickHandler,
                        className: "chat-line__username"
                    }, De.createElement(Un.a, {
                        userData: i.user
                    })), De.createElement("span", {
                        key: "separator"
                    }, s), this.renderMessageBody())
                }, t
            }(De.Component),
            Bn = function(e) {
                return {
                    channelID: e.channelID,
                    onPushMessage: e.onPushMessage
                }
            },
            Hn = Object(Ue.compose)(function(e) {
                return e
            }, Object(Fn.a)(Bn), function() {
                var e = this;
                return Object(Ie.a)(Pn, {
                    props: function(t) {
                        return {
                            onUnbanUser: function(n) {
                                return be.__awaiter(e, void 0, void 0, function() {
                                    var e;
                                    return be.__generator(this, function(i) {
                                        switch (i.label) {
                                            case 0:
                                                if (!t.mutate) return [3, 5];
                                                i.label = 1;
                                            case 1:
                                                return i.trys.push([1, 3, , 4]), [4, t.mutate(Object(Be.a)({
                                                    channelID: t.ownProps.channelID,
                                                    bannedUserLogin: n
                                                }))];
                                            case 2:
                                                return i.sent(), t.ownProps.onPushMessage(Object(Kt.a)(X(n))), [3, 4];
                                            case 3:
                                                return e = i.sent(), ke.i.error(e, "Unable to ban user"), t.ownProps.onPushMessage(Object(Kt.a)(Z())), [3, 4];
                                            case 4:
                                                return [3, 6];
                                            case 5:
                                                t.ownProps.onPushMessage(Object(Kt.a)(Z())), i.label = 6;
                                            case 6:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }(), Object(we.a)(void 0, ee))(Rn),
            Vn = n(930),
            Wn = n(931),
            Gn = {
                badges: {
                    twitchbot: "1"
                },
                bits: 0,
                color: "#6441A5",
                displayName: "AutoMod",
                id: "automod",
                userID: "automod",
                username: "automod",
                userType: ln.a.GlobalMod,
                emotes: null
            },
            qn = {
                VoHiYo: {
                    displayName: "VoHiYo",
                    id: "81274",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/81274/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/81274/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/81274/3.0 3.0x",
                    token: "VoHiYo"
                }
            },
            zn = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isResolved: !1
                    }, t.allowAutoModRejectedMessage = function() {
                        t.setState({
                            isResolved: !0
                        }), t.props.allowRejectedChatMessage && t.props.message.type === Qt.a.AutoModRejectedPrompt && t.props.allowRejectedChatMessage(Object(Be.a)({
                            id: t.props.message.rejectedMessage.id
                        }))
                    }, t.denyAutoModRejectedMessage = function() {
                        t.setState({
                            isResolved: !0
                        }), t.props.denyRejectedChatMessage && t.props.message.type === Qt.a.AutoModRejectedPrompt && t.props.denyRejectedChatMessage(Object(Be.a)({
                            id: t.props.message.rejectedMessage.id
                        }))
                    }, t
                }
                return be.__extends(t, e), t.prototype.render = function() {
                    var e;
                    switch (this.props.message.type) {
                        case Qt.a.AutoModRejectedPrompt:
                            e = te(this.props.message.category);
                            break;
                        case Qt.a.AutoModMessageRejected:
                            e = Object(ke.d)("Hey! Your message is being checked by mods and has not been sent.", "AutoModLine");
                            break;
                        case Qt.a.AutoModMessageAllowed:
                            e = Object(ke.d)("Mods have allowed your message. Happy chatting!", "AutoModLine"), e += " VoHiYo";
                            break;
                        case Qt.a.AutoModMessageDenied:
                            e = Object(ke.d)("Mods have removed your message.", "AutoModLine");
                            break;
                        default:
                            throw new Error("Invalid message type")
                    }
                    var t = Object(cn.a)(e, Gn, xe.a, !1, qn);
                    switch (this.props.message.type) {
                        case Qt.a.AutoModRejectedPrompt:
                            if (this.state.isResolved) return De.createElement(We.U, {
                                className: "chat-line__status"
                            }, Object(On.b)());
                            var n = ["chat-line__message--alert", "chat-line__message--special", "chat-line__message--clearfix"];
                            return De.createElement(We.U, {
                                className: "chat-line__message"
                            }, De.createElement(In.a, {
                                badgeSets: this.props.badgeSets,
                                badgesToRender: t.badges
                            }), De.createElement(Un.a, {
                                userData: t.user
                            }), De.createElement("span", {
                                key: "separator"
                            }, ": "), Object(On.e)(t.messageParts, this.props.currentUserDisplayName, this.props.currentUserLogin), De.createElement(We.U, {
                                key: "automod-prompt",
                                className: "chat-line__nested-component--float-right"
                            }, De.createElement(We.u, {
                                size: We.x.Small,
                                onClick: this.allowAutoModRejectedMessage,
                                type: We.z.Text
                            }, Object(ke.d)("Allow", "AutoModLine")), De.createElement(We._21, {
                                type: We._26.Span
                            }, "•"), De.createElement(We.u, {
                                size: We.x.Small,
                                onClick: this.denyAutoModRejectedMessage,
                                type: We.z.Text
                            }, Object(ke.d)("Deny", "AutoModLine"))), De.createElement(Hn, be.__assign({}, this.props, {
                                isDeleted: !1,
                                showTimestamps: !1,
                                className: Ae(n),
                                message: this.props.message.rejectedMessage
                            })));
                        case Qt.a.AutoModMessageRejected:
                        case Qt.a.AutoModMessageAllowed:
                        case Qt.a.AutoModMessageDenied:
                            var i = ["chat-line__message", "chat-line__message--special", "chat-line__message--alert"];
                            return De.createElement(We.U, {
                                className: Ae(i)
                            }, De.createElement(In.a, {
                                badgeSets: this.props.badgeSets,
                                badgesToRender: t.badges
                            }), De.createElement(Un.a, {
                                userData: t.user
                            }), De.createElement("span", {
                                key: "separator"
                            }, ": "), Object(On.e)(t.messageParts, this.props.currentUserDisplayName, this.props.currentUserLogin));
                        default:
                            throw new Error("Invalid message type")
                    }
                }, t
            }(De.Component),
            $n = Object(Ue.compose)(Object(Ie.a)(Vn, {
                name: "allowRejectedChatMessage",
                options: {}
            }), Object(Ie.a)(Wn, {
                name: "denyRejectedChatMessage",
                options: {}
            }))(zn),
            Jn = n(932),
            Kn = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return be.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.message.params,
                        t = this.props.data,
                        n = t.channel,
                        i = t.loading,
                        a = t.error;
                    if (i || a) return null;
                    var r = Object(ke.d)("{displayName} is raiding with a party of {viewerCount}.", {
                        displayName: De.createElement("strong", null, n.displayName),
                        viewerCount: De.createElement("strong", null, e.viewerCount)
                    }, "RaidIncomingMessage");
                    return De.createElement(We.U, {
                        className: "chat-line__raid",
                        "data-test-selector": "incoming-raid"
                    }, De.createElement(We.U, {
                        display: We.H.Flex,
                        alignItems: We.c.Center
                    }, De.createElement(We.l, {
                        imageAlt: n.displayName,
                        imageSrc: n.profileImageURL,
                        size: 30
                    }), De.createElement(We.U, {
                        className: "c-text",
                        margin: {
                            left: 1
                        }
                    }, r)))
                }, t
            }(De.Component),
            Qn = Object(Ie.a)(Jn, {
                options: function(e) {
                    return {
                        variables: {
                            channelLogin: e.message.params.login
                        }
                    }
                }
            })(Kn),
            Yn = function(e) {
                return De.createElement("span", null, ne()[e.message.msgid])
            },
            Xn = n(372),
            Zn = (n(933), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        drawerOpen: !1
                    }, t.renderBitsLoot = function(e) {
                        return De.createElement(We.U, {
                            key: e.quantity,
                            className: "chat-line__purchase-loot"
                        }, De.createElement(Ve.a, {
                            bitsConfig: t.props.bitsConfig,
                            count: e.quantity,
                            withImage: !0
                        }))
                    }, t.toggleDrawer = function() {
                        t.setState(function(e) {
                            return {
                                drawerOpen: !e.drawerOpen
                            }
                        })
                    }, t
                }
                return be.__extends(t, e), t.prototype.render = function() {
                    var e, t = this,
                        n = this.props.purchase,
                        i = n.crateLoot,
                        a = n.numCrates,
                        r = n.purchased;
                    if (a > 0) {
                        var s = Object(ke.d)("{numCrates, plural, one {Plus # Twitch Crate with {lootCount} rewards!} other {Plus # Twitch Crates with {lootCount} rewards!}}", {
                            numCrates: a,
                            lootCount: i.length
                        }, "SharePurchaseLineRewardText");
                        e = De.createElement(We.U, {
                            className: "chat-line__purchase-reward-text",
                            margin: {
                                top: .5
                            }
                        }, s)
                    }
                    var o, l = i.map(function(e) {
                        switch (e.type) {
                            case Xn.a.Badge:
                                return t.renderBadgeLoot(e);
                            case Xn.a.Bits:
                                return t.renderBitsLoot(e);
                            case Xn.a.Emote:
                                return t.renderEmoteLoot(e);
                            case Xn.a.InGameContent:
                                return t.renderIGCLoot(e);
                            default:
                                return ""
                        }
                    });
                    if (i.length <= 2) o = 0 === i.length ? "" : De.createElement(We._17, {
                        className: "chat-line__purchase-loot-box",
                        alignItems: We.c.Center,
                        borderLeft: !0,
                        display: We.H.Flex,
                        flexDirection: We.J.Row,
                        flexShrink: 0,
                        flexWrap: We.K.NoWrap,
                        justifyContent: We.T.Center,
                        padding: .5
                    }, l);
                    else if (this.state.drawerOpen) o = De.createElement("span", {
                        className: "chat-line__purchase-loot-toggle",
                        onClick: this.toggleDrawer,
                        "data-test-selector": "purchase-loot-toggle"
                    }, De.createElement(We._17, {
                        className: "chat-line__purchase-loot-box",
                        alignItems: We.c.Center,
                        borderLeft: !0,
                        display: We.H.Flex,
                        flexDirection: We.J.Row,
                        flexShrink: 0,
                        flexWrap: We.K.NoWrap,
                        justifyContent: We.T.Center,
                        padding: .5
                    }, De.createElement(We._8, {
                        asset: We._9.GlyphArrUp
                    })));
                    else {
                        var c = "+" + (i.length - 1);
                        o = De.createElement("span", {
                            className: "chat-line__purchase-loot-toggle",
                            onClick: this.toggleDrawer,
                            "data-test-selector": "purchase-loot-toggle"
                        }, De.createElement(We._17, {
                            className: "chat-line__purchase-loot-box",
                            alignItems: We.c.Center,
                            borderLeft: !0,
                            display: We.H.Flex,
                            flexDirection: We.J.Row,
                            flexShrink: 0,
                            flexWrap: We.K.NoWrap,
                            justifyContent: We.T.Center,
                            padding: .5
                        }, l[0], De.createElement(We.Z, {
                            label: c,
                            type: We._0.Notification
                        })))
                    }
                    var u = i.length <= 2 || !this.state.drawerOpen ? "" : De.createElement(We._17, {
                        className: "chat-line__purchase-loot-drawer",
                        alignItems: We.c.Center,
                        display: We.H.Flex,
                        flexDirection: We.J.Row,
                        flexShrink: 0,
                        flexWrap: We.K.NoWrap,
                        justifyContent: We.T.End,
                        padding: .5,
                        "data-test-selector": "purchase-loot-drawer"
                    }, l);
                    return De.createElement(We._17, {
                        className: "chat-line__purchase",
                        elevation: 1,
                        margin: {
                            bottom: .5,
                            left: 2,
                            right: 2,
                            top: 0
                        }
                    }, De.createElement(We.U, {
                        display: We.H.Flex,
                        flexDirection: We.J.Row,
                        flexWrap: We.K.NoWrap
                    }, De.createElement(We.U, {
                        flexGrow: 0,
                        flexShrink: 0,
                        margin: .5
                    }, De.createElement("img", {
                        className: "chat-line__purchase-boxart",
                        src: r.boxart
                    })), De.createElement(We.U, {
                        flexGrow: 1,
                        margin: .5
                    }, De.createElement(We._17, {
                        fontSize: We.L.Size4
                    }, r.title), e), o), u)
                }, t.prototype.renderBadgeLoot = function(e) {
                    return De.createElement("img", {
                        key: e.img,
                        className: "chat-line__purchase-loot",
                        src: e.img
                    })
                }, t.prototype.renderEmoteLoot = function(e) {
                    var t = "//static-cdn.jtvnw.net/emoticons/v1/" + e.id + "/2.0";
                    return De.createElement("img", {
                        key: e.id,
                        className: "chat-line__purchase-loot",
                        src: t
                    })
                }, t.prototype.renderIGCLoot = function(e) {
                    return De.createElement("img", {
                        key: e.img,
                        className: "chat-line__purchase-loot",
                        src: e.img
                    })
                }, t
            }(De.Component)),
            ei = Zn,
            ti = (n(934), {
                timeout_success: "timeout_success",
                ban_success: "ban_success"
            }),
            ni = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return be.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.message;
                    switch (e.type) {
                        case Qt.a.AutoModMessageRejected:
                        case Qt.a.AutoModMessageAllowed:
                        case Qt.a.AutoModMessageDenied:
                        case Qt.a.AutoModRejectedPrompt:
                            return De.createElement($n, {
                                channelID: this.props.channelID,
                                message: e,
                                badgeSets: this.props.badgeSets,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                showModerationIcons: this.props.showModerationIcons,
                                currentUserLogin: this.props.currentUserLogin
                            });
                        case Qt.a.Connected:
                            return De.createElement(We.U, {
                                className: "chat-line__status",
                                "data-a-target": "chat-welcome-message"
                            }, De.createElement(We._21, {
                                type: We._26.Span
                            }, Object(ke.d)("Welcome to the chat room!", "ChatLine")));
                        case Qt.a.Disconnected:
                            return e.reason ? De.createElement(We.U, {
                                className: "chat-line__status"
                            }, De.createElement(We._21, {
                                type: We._26.Span
                            }, Object(ke.d)("You have been disconnected from chat for the following reason: {reason}", {
                                reason: e.reason
                            }, "ChatLine"))) : De.createElement(We.U, {
                                className: "chat-line__status"
                            }, De.createElement(We._21, {
                                type: We._26.Span
                            }, Object(ke.d)("Sorry, we were unable to connect to chat. Attempting to reconnect...", "ChatLine")));
                        case Qt.a.Hosting:
                            return De.createElement(We.U, {
                                className: "chat-line__status"
                            }, De.createElement(We._21, {
                                type: We._26.Span
                            }, Object(ke.d)("Now hosting {channel}", {
                                channel: e.hostedChannel
                            }, "ChatLine")));
                        case Qt.a.Unhost:
                            return De.createElement(We.U, {
                                className: "chat-line__status"
                            }, De.createElement(We._21, {
                                type: We._26.Span
                            }, Object(ke.d)("No longer hosting.", "ChatLine")));
                        case Qt.a.Post:
                        case Qt.a.PostWithMention:
                        case Qt.a.Action:
                            return ae(e) ? De.createElement(Hn, {
                                channelID: this.props.channelID,
                                badgeSets: this.props.badgeSets,
                                message: e,
                                isDeleted: e.deleted,
                                showModerationIcons: this.props.showModerationIcons,
                                showTimestamps: this.props.showTimestamps,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin,
                                onPushMessage: this.props.onPushMessage
                            }) : null;
                        case Qt.a.Ban:
                        case Qt.a.Timeout:
                            return this.props.isCurrentUserModerator ? De.createElement(We.U, {
                                className: "chat-line__moderation"
                            }, Object(On.f)(e)) : null;
                        case Qt.a.Subscription:
                            return De.createElement(We.U, {
                                className: "chat-line__subscribe"
                            }, Object(On.n)(e));
                        case Qt.a.SubGift:
                            return De.createElement(We.U, {
                                className: "chat-line__subscribe"
                            }, Object(On.m)(e));
                        case Qt.a.Resubscription:
                            return De.createElement(We.U, {
                                className: "chat-line__subscribe"
                            }, Object(On.i)(e, this.props.showTimestamps, this.props.currentUserDisplayName, this.props.currentUserLogin, this.props.badgeSets));
                        case Qt.a.RoomMods:
                            return De.createElement(We.U, {
                                className: "chat-line__status"
                            }, Object(On.j)(e.moderatorLogins));
                        case Qt.a.SlowMode:
                            return De.createElement(We.U, {
                                className: "chat-line__status"
                            }, Object(On.k)(e));
                        case Qt.a.SubscriberOnlyMode:
                            return De.createElement(We.U, {
                                className: "chat-line__status"
                            }, Object(On.l)(e));
                        case Qt.a.FollowerOnlyMode:
                            return De.createElement(We.U, {
                                className: "chat-line__status"
                            }, Object(On.c)(e));
                        case Qt.a.Clear:
                            return De.createElement(We.U, {
                                className: "chat-line__status"
                            }, Object(On.a)());
                        case Qt.a.Notice:
                            if (ie(e)) return De.createElement(We.U, {
                                className: "chat-line__status"
                            }, De.createElement(Yn, {
                                message: e
                            }));
                            if (this.props.isCurrentUserModerator) switch (e.msgid) {
                                case ti.timeout_success:
                                case ti.ban_success:
                                    return null
                            }
                            return De.createElement(We.U, {
                                className: "chat-line__status"
                            }, Object(On.g)(e));
                        case Qt.a.Info:
                            return De.createElement(We.U, {
                                className: "chat-line__status"
                            }, Object(On.d)(e));
                        case Qt.a.Purchase:
                            var t = e.message.user.isIntl ? e.message.user.userDisplayName + " (" + e.message.user.userLogin + ")" : e.message.user.userDisplayName;
                            return De.createElement(We.U, {
                                className: "chat-line__message--special"
                            }, De.createElement(We.U, {
                                className: "chat-line__status"
                            }, Object(On.h)(t, e.purchase.purchased.title, e.purchase.numCrates)), De.createElement(Hn, {
                                channelID: this.props.channelID,
                                badgeSets: this.props.badgeSets,
                                message: e.message,
                                isDeleted: !1,
                                showModerationIcons: this.props.showModerationIcons,
                                showTimestamps: this.props.showTimestamps,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin,
                                onPushMessage: this.props.onPushMessage
                            }), De.createElement(ei, {
                                bitsConfig: e.bitsConfig,
                                purchase: e.purchase
                            }));
                        case Qt.a.Raid:
                            return De.createElement(Qn, {
                                message: e
                            });
                        case Qt.a.Unraid:
                            return De.createElement(We.U, {
                                className: "chat-line__raid"
                            }, Object(On.q)());
                        default:
                            return null
                    }
                }, t
            }(De.Component),
            ii = n(878),
            ai = n(935),
            ri = (n(937), "pinned-cheer--collapse"),
            si = /(\d+)$/,
            oi = ke.i.withCategory("pinned-cheer"),
            li = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        cheerIsTall: !1,
                        recentCheerID: null,
                        recentCheerExpireTime: null
                    }, t.collapseCheer = !0, t.root = null, t.renderedMessage = null, t.recentCheerTimeout = 0, t.saveRenderedMessageRef = function(e) {
                        t.renderedMessage = e
                    }, t.saveRootRef = function(e) {
                        t.root = e
                    }, t.handleHeadlineClick = function() {
                        t.collapseCheer = !t.collapseCheer, t.root && t.root.classList.toggle(ri, t.collapseCheer)
                    }, t.handleProgressExpired = function() {
                        oi.debug("setTimeout expired, forcing re-render"), t.forceUpdate()
                    }, t.onProgressAnimationEnd = function() {
                        oi.debug("Animation end event fired")
                    }, t
                }
                return be.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.calcRecentCheerExpiry(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.calcRecentCheerExpiry(e)
                }, t.prototype.shouldComponentUpdate = function(e, t) {
                    var n = this.getDisplayData(this.props, this.state),
                        i = this.getDisplayData(e, t);
                    return (n.displayCheer && n.displayCheer.id) !== (i.displayCheer && i.displayCheer.id)
                }, t.prototype.componentDidUpdate = function() {
                    var e = this.getDisplayData(this.props, this.state),
                        t = e.isRecent,
                        n = e.remainingRecentCheerTime;
                    if (t && (clearTimeout(this.recentCheerTimeout), this.recentCheerTimeout = setTimeout(this.handleProgressExpired, n + 100)), this.renderedMessage) {
                        var i = this.renderedMessage.getElementsByClassName("pinned-cheer__rendered-message-inner");
                        if (i.length) {
                            var a = i[0].getBoundingClientRect(),
                                r = a.height > 42;
                            this.state.cheerIsTall !== r && this.setState({
                                cheerIsTall: r
                            })
                        }
                    }
                }, t.prototype.componentWillUnmount = function() {
                    clearTimeout(this.recentCheerTimeout)
                }, t.prototype.render = function() {
                    var e = this.getDisplayData(this.props, this.state),
                        t = e.isRecent,
                        n = e.remainingRecentCheerTime,
                        i = e.displayCheer,
                        a = e.isExpandable;
                    if (!i) return null;
                    for (var r = "", s = 0, o = 0, l = i.messageParts; o < l.length; o++) {
                        var c = l[o];
                        if (c.type === en.a.Emote && c.content.cheerAmount && c.content.alt) {
                            var u = c.content.alt.replace(si, "").toLowerCase();
                            s += c.content.cheerAmount, r ? r !== u && (r = "cheer") : r = u
                        }
                    }
                    var d, p = {
                            "pinned-cheer__rendered-message": !0,
                            "pinned-cheer__rendered-message--recent": t,
                            "pinned-cheer__rendered-message--top": !t
                        },
                        m = De.createElement(Un.a, {
                            userData: i.user
                        }),
                        h = De.createElement("div", {
                            ref: this.saveRenderedMessageRef,
                            className: Ae(p)
                        }, De.createElement(We._17, {
                            margin: {
                                x: 2
                            },
                            borderTop: !0
                        }), De.createElement(We.U, {
                            padding: {
                                y: .5
                            },
                            className: "pinned-cheer__rendered-message-inner"
                        }, De.createElement(ni, {
                            channelID: this.props.channelID,
                            badgeSets: this.props.badgeData,
                            currentUserDisplayName: this.props.currentUserDisplayName,
                            currentUserLogin: this.props.currentUserLogin,
                            isCurrentUserModerator: !1,
                            message: i,
                            showModerationIcons: !1,
                            showTimestamps: !1
                        }))),
                        g = null;
                    if (t) d = De.createElement(We._21, {
                        type: We._26.Strong
                    }, Object(ke.d)("Recent Cheer", "Bits--PinnedCheer"));
                    else {
                        d = De.createElement(We._21, {
                            type: We._26.Strong
                        }, Object(ke.d)("Top Cheer by {user}", {
                            user: m
                        }, "Bits--PinnedCheer"), " :");
                        var f = Object(On.e)(Object(xe.c)(r + s.toString(), this.props.bitsConfig), this.props.currentUserDisplayName, this.props.currentUserLogin);
                        g = De.createElement(We.U, {
                            display: We.H.Inline,
                            margin: {
                                left: .5
                            }
                        }, f)
                    }
                    var b = (S = {
                            "pinned-cheer__bounding-box": !0
                        }, S[ri] = this.collapseCheer, S),
                        v = {
                            "pinned-cheer__headline": !0,
                            "pinned-cheer__headline--clickable": a
                        },
                        k = null;
                    return t && (k = De.createElement(We.U, {
                        className: "pinned-cheer__progress-bar-placeholder"
                    }, De.createElement(We.U, {
                        className: "pinned-cheer__progress-bar",
                        display: We.H.Flex,
                        flexDirection: We.J.Column,
                        justifyContent: We.T.End
                    }, De.createElement(We._5, {
                        key: i.id,
                        countdown: n / 1e3,
                        size: We._6.ExtraSmall,
                        onCountdownEnd: this.onProgressAnimationEnd
                    })))), oi.debug("Rendering pinned cheer", {
                        remainingRecentCheerTime: n,
                        isRecent: t,
                        recentCheerExpireTime: this.state.recentCheerExpireTime
                    }), De.createElement(We.U, {
                        className: "pinned-cheer",
                        flexGrow: 0,
                        flexShrink: 0,
                        zIndex: We._38.Default
                    }, De.createElement("div", {
                        className: Ae(b),
                        ref: this.saveRootRef
                    }, De.createElement(We.P, {
                        padding: {
                            x: 2,
                            y: 1
                        },
                        display: We.H.Flex,
                        flexDirection: We.J.Row,
                        flexWrap: We.K.NoWrap
                    }, De.createElement("div", {
                        className: Ae(v),
                        onClick: a ? this.handleHeadlineClick : void 0
                    }, De.createElement(We.U, {
                        flexGrow: 1,
                        flexShrink: 1,
                        display: We.H.Flex,
                        alignItems: We.c.Center
                    }, De.createElement(We._8, {
                        asset: t ? We._9.HourGlass : We._9.Trophy,
                        height: 18,
                        width: 18
                    }), De.createElement(We.U, {
                        margin: {
                            left: .5
                        },
                        display: We.H.Inline
                    }, d), g), De.createElement(We.U, {
                        className: "pinned-cheer__expand-caret",
                        flexShrink: 0,
                        flexGrow: 0,
                        display: We.H.Flex,
                        justifyContent: We.T.Between,
                        alignItems: We.c.Center
                    }, a ? De.createElement(We._8, {
                        asset: We._9.AngleLeft
                    }) : null))), h, k));
                    var S
                }, t.prototype.calcRecentCheerExpiry = function(e) {
                    var t = e.recentCheer ? e.recentCheer.id : null;
                    e.recentTimeoutMs && this.state.recentCheerID !== t && this.setState({
                        recentCheerID: t,
                        recentCheerExpireTime: t ? Date.now() + e.recentTimeoutMs : null
                    })
                }, t.prototype.getDisplayData = function(e, t) {
                    var n = 0;
                    t.recentCheerExpireTime && (n = Math.max(0, t.recentCheerExpireTime - Date.now()));
                    var i = !!e.recentCheer && !!e.topCheer && e.recentCheer.id === e.topCheer.id,
                        a = !!n && !!e.recentCheer && !i;
                    return {
                        remainingRecentCheerTime: n,
                        isRecent: a,
                        displayCheer: a ? e.recentCheer : e.topCheer,
                        isExpandable: !a || t.cheerIsTall
                    }
                }, t = be.__decorate([Object(Ie.a)(ai, {
                    props: function(e) {
                        var t, n, i;
                        return e.data && e.data.user && e.data.user.cheer && (i = e.data.user.cheer.recentTimeoutMs, e.data.user.cheer.top && (t = Object(ii.a)(e.data.user.cheer.top, e.ownProps.bitsConfig, e.ownProps.blockLinks)), e.data.user.cheer.recent && (n = Object(ii.a)(e.data.user.cheer.recent, e.ownProps.bitsConfig, e.ownProps.blockLinks))), {
                            topCheer: t,
                            recentCheer: n,
                            recentTimeoutMs: i
                        }
                    },
                    options: function(e) {
                        return {
                            name: "data",
                            fetchPolicy: "network-only",
                            variables: {
                                channelID: e.channelID
                            }
                        }
                    }
                }), Object(Dn.a)(function(e) {
                    return {
                        query: ai,
                        variables: {
                            channelID: e.channelID
                        },
                        topic: Object(He.a)(e.channelID),
                        type: Re.c.BitsPinEvent,
                        mutator: function(t, n) {
                            if (n.user.cheer) {
                                var i = JSON.parse(t.msg);
                                if (i.channel_id === e.channelID) return oi.debug("Received pubsub update", {
                                    hasTopCheer: !!i.top && i.top.has_top_event,
                                    hasNewTopCheer: !n.user.cheer.top || n.user.cheer.top.id !== i.top.tags.msg_id,
                                    hasRecentCheer: !!i.recent && i.recent.has_recent_event,
                                    hasNewRecentCheer: !n.user.cheer.recent || n.user.cheer.recent.id !== i.recent.tags.msg_id
                                }), i.top && i.top.has_top_event ? n.user.cheer.top && n.user.cheer.top.id === i.top.tags.msg_id || (n.user.cheer.top = Object(ii.c)(i.top)) : n.user.cheer.top = null, i.recent && i.recent.has_recent_event ? n.user.cheer.recent && n.user.cheer.recent.id === i.recent.tags.msg_id || (n.user.cheer.recent = Object(ii.c)(i.recent), n.user.cheer.recentTimeoutMs = n.user.cheer.settings.recentTimeoutMs) : n.user.cheer.recent = null, n
                            }
                        }
                    }
                })], t)
            }(De.Component),
            ci = li,
            ui = n(61),
            di = n(82),
            pi = {
                Emote: "emote",
                Mention: "mention",
                None: "none"
            },
            mi = (n(938), 5),
            hi = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.messages = {
                        noMatches: Object(ke.d)("No matches.", "AutocompleteBalloon")
                    }, n.onUpdateDebounce = function() {
                        n.resizeAnimationFrame || (n.resizeAnimationFrame = requestAnimationFrame(n.onResize))
                    }, n.onResize = function() {
                        var e = document.querySelector(".chat-list") && document.querySelector(".chat-list").clientHeight || 1080;
                        n.setState({
                            chatListHeight: e
                        }), n.resizeAnimationFrame = null
                    }, n.filteredDataIsAvailable = function() {
                        return n.props.autocompleteType === pi.Mention ? n.state.filteredMentionData && n.state.filteredMentionData.length > 0 : n.state.filteredEmoteData && n.state.filteredEmoteData.length > 0
                    }, n.filterEmoteData = function(e) {
                        if (n.props.autocompleteData.length < 1) return [];
                        var t = n.props.autocompleteData,
                            i = t.reduce(function(t, i) {
                                var a = i.emotes.filter(function(t) {
                                    if (t.token) return n.doesEmoteMatchTerm(t, e)
                                }).slice();
                                return t.concat([a])
                            }, []).filter(function(e) {
                                return e.length > 0
                            }).reduce(function(e, t) {
                                return e.concat(t)
                            }, []);
                        return i = Object(ze.d)(i), i = Object(ze.e)(i, e), 0 === n.state.nextSelectedItemIndex && i.length > 0 && n.setState({
                            selectedItem: i[0].token
                        }), i
                    }, n.doesEmoteMatchTerm = function(e, t) {
                        var n = new RegExp("^" + t, "i");
                        if (e.token.match(n)) return !0;
                        var i = new RegExp("" + t.charAt(0).toUpperCase()),
                            a = new RegExp("^" + t.slice(1), "i"),
                            r = e.token.match(i);
                        return !!(r && r.index && e.token.slice(r.index + 1).match(a))
                    }, n.filterMentionsData = function(e) {
                        if (n.props.autocompleteData.length < 1) return [];
                        var t = new RegExp("^" + e, "i"),
                            i = n.props.autocompleteData,
                            a = i.filter(function(e) {
                                return t.test(e.userLogin) || t.test(e.userDisplayName)
                            });
                        return 0 === n.state.nextSelectedItemIndex && a.length > 0 && n.setState({
                            selectedItem: a[0].userDisplayName
                        }), a.slice(0, mi)
                    }, n.onAutocompleteItemClick = function(e) {
                        var t = e.currentTarget.getAttribute("data-a-target");
                        n.props.onItemClick(t)
                    }, n.onAutocompleteItemSelect = function() {
                        n.props.onItemClick(n.state.selectedItem)
                    }, n.handleItemMouseEnter = function(e) {
                        if (n.filteredDataIsAvailable()) {
                            var t = e.currentTarget.getAttribute("data-a-target");
                            t && n.setState({
                                selectedItem: t
                            })
                        }
                    }, n.handleKeydown = function(e) {
                        var t = e.charCode || e.keyCode;
                        if (n.filteredDataIsAvailable() || t === ui.a.Tab || t === ui.a.Enter) switch (t) {
                            case ui.a.Tab:
                            case ui.a.Enter:
                                n.filteredDataIsAvailable() ? n.onAutocompleteItemSelect() : n.props.closeAutocomplete();
                                break;
                            case ui.a.Up:
                                var i = n.mod(n.state.nextSelectedItemIndex - 1, n.getFilteredDataLength());
                                n.setState({
                                    nextSelectedItemIndex: i
                                });
                                break;
                            case ui.a.Down:
                                var a = n.mod(n.state.nextSelectedItemIndex + 1, n.getFilteredDataLength());
                                n.setState({
                                    nextSelectedItemIndex: a
                                })
                        }
                    }, n.mod = function(e, t) {
                        var n = e % t;
                        return n < 0 ? n + t : n
                    }, n.getFilteredDataLength = function() {
                        return n.props.autocompleteType === pi.Mention ? n.state.filteredMentionData.length : n.state.filteredEmoteData.length
                    };
                    var i = document.querySelector(".chat-list"),
                        a = i && i.clientHeight || 1080;
                    return n.state = {
                        filteredEmoteData: [],
                        filteredMentionData: [],
                        nextSelectedItemIndex: 0,
                        selectedItem: "",
                        chatListHeight: a
                    }, n
                }
                return be.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.props.autocompleteType === pi.Mention ? this.setState({
                        filteredMentionData: this.filterMentionsData(this.props.inputVal)
                    }) : this.setState({
                        filteredEmoteData: this.filterEmoteData(this.props.inputVal)
                    })
                }, t.prototype.componentDidMount = function() {
                    window.addEventListener("keydown", this.handleKeydown), window.addEventListener("resize", this.onUpdateDebounce)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.inputVal !== e.inputVal && (this.props.autocompleteType === pi.Mention ? this.setState({
                        filteredMentionData: this.filterMentionsData(e.inputVal)
                    }) : this.setState({
                        filteredEmoteData: this.filterEmoteData(e.inputVal)
                    }))
                }, t.prototype.componentWillUpdate = function(e, t) {
                    if (this.state.nextSelectedItemIndex !== t.nextSelectedItemIndex)
                        if (this.props.autocompleteType === pi.Mention) {
                            var n = this.state.filteredMentionData[t.nextSelectedItemIndex];
                            this.setState({
                                selectedItem: n.userDisplayName
                            })
                        } else {
                            var n = this.state.filteredEmoteData[t.nextSelectedItemIndex];
                            this.setState({
                                selectedItem: n.token
                            })
                        }
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("keydown", this.handleKeydown), window.removeEventListener("resize", this.onUpdateDebounce)
                }, t.prototype.render = function() {
                    var e, t = this;
                    e = this.filteredDataIsAvailable() ? this.props.autocompleteType === pi.Mention ? this.state.filteredMentionData.map(function(e) {
                        var n = Ae("autocomplete-balloon__item", {
                                "autocomplete-balloon__item--selected": t.state.selectedItem === e.userDisplayName
                            }),
                            i = e.isIntl ? De.createElement(We._21, {
                                type: We._26.Span
                            }, "(" + e.userLogin + ")") : null;
                        return De.createElement(We.U, {
                            key: e.userDisplayName
                        }, De.createElement(We.P, {
                            display: We.H.Block,
                            fullWidth: !0
                        }, De.createElement("button", {
                            onMouseEnter: t.handleItemMouseEnter,
                            className: n,
                            "data-a-target": e.userDisplayName,
                            onClick: t.onAutocompleteItemClick
                        }, De.createElement(We.U, {
                            padding: {
                                x: .5,
                                y: .5
                            },
                            display: We.H.Flex,
                            alignItems: We.c.Center
                        }, De.createElement(We._21, {
                            type: We._26.Span
                        }, e.userDisplayName), De.createElement(We._17, {
                            className: "autocomplete-balloon__item--intl"
                        }, i)))))
                    }) : this.state.filteredEmoteData.map(function(e) {
                        var n = Ae("autocomplete-balloon__item", {
                            "autocomplete-balloon__item--selected": t.state.selectedItem === e.token
                        });
                        return De.createElement(We.U, {
                            key: e.id
                        }, De.createElement(We.P, {
                            display: We.H.Block,
                            fullWidth: !0
                        }, De.createElement("button", {
                            onMouseEnter: t.handleItemMouseEnter,
                            className: n,
                            "data-a-target": e.token,
                            onClick: t.onAutocompleteItemClick
                        }, De.createElement(We.U, {
                            padding: {
                                x: .5
                            },
                            display: We.H.Flex,
                            alignItems: We.c.Center
                        }, De.createElement(We.U, {
                            padding: {
                                right: .5
                            }
                        }, De.createElement("img", {
                            srcSet: e.srcSet
                        })), De.createElement(We._21, {
                            type: We._26.Span
                        }, e.token)))))
                    }) : De.createElement(We.U, {
                        padding: {
                            x: .5
                        }
                    }, De.createElement(We._21, {
                        type: We._26.Span,
                        color: We.F.Alt2
                    }, this.messages.noMatches));
                    var n = {
                        maxHeight: this.state.chatListHeight
                    };
                    return De.createElement(We.U, {
                        position: We._2.Relative
                    }, De.createElement(di.a, {
                        onClickOut: this.props.onClickOut
                    }, De.createElement(We.p, {
                        direction: We.q.TopLeft,
                        "data-a-target": "autocomplete-balloon",
                        "data-test-selector": "autocomplete-balloon",
                        show: !0
                    }, De.createElement(We.U, {
                        className: "autocomplete-balloon",
                        overflow: We.Y.Auto,
                        padding: {
                            y: 1
                        }
                    }, De.createElement("div", {
                        style: n
                    }, e)))))
                }, t
            }(De.Component),
            gi = {
                Chat: "chat",
                Feed: "feed",
                Whisper: "whisper"
            },
            fi = {
                Emote: ":",
                Hashtag: "#",
                Mention: "@",
                Tab: "Tab",
                Whisper: "/w"
            },
            bi = function(e) {
                switch (e) {
                    case pi.Emote:
                        return fi.Emote;
                    case pi.Mention:
                        return fi.Mention;
                    default:
                        return void ke.i.warn("Chat Suggestions tracking was passed an unknown autocomplete type.")
                }
            },
            vi = function(e) {
                var t = bi(e.autocompleteType);
                if (t) {
                    var n = {
                        source: e.source,
                        start_character: t
                    };
                    ke.m.track(Ot.SpadeEventType.ChatSuggestion, n)
                }
            },
            ki = function(e) {
                var t = bi(e.autocompleteType);
                if (t) {
                    var n = {
                        channel: e.channelLogin,
                        completed_text: e.completedText,
                        source: e.source,
                        start_character: t
                    };
                    ke.m.track(Ot.SpadeEventType.ChatSuggestionComplete, n)
                }
            },
            Si = n(356),
            yi = 2,
            Ci = function(e) {
                function t() {
                    var t = e.call(this) || this;
                    return t.showAutocomplete = function(e) {
                        t.setState(function(n, i) {
                            return be.__assign({}, n, {
                                autocompleteType: e,
                                isAnyAutocompleteShown: e !== pi.None,
                                isShowingEmoteAutocomplete: e === pi.Emote,
                                isShowingMentionAutocomplete: e === pi.Mention,
                                sortedChatMembers: t.isChatMembersDirty ? t.sortChatMembers(t.props.chatMembers) : n.sortedChatMembers
                            })
                        }, function() {
                            e !== pi.None && t.setPartialWord()
                        })
                    }, t.closeAutocomplete = function() {
                        t.setState({
                            renderAutocomplete: !1
                        }), t.showAutocomplete(pi.None)
                    }, t.keycodeIsPrefixed = function(e) {
                        for (var n = t.state.cursorIndex; t.state.chatInputValue.charCodeAt(n - 1) !== e && t.state.chatInputValue.charCodeAt(n - 1) !== ui.a.Space && n >= 0;) n--;
                        return t.state.chatInputValue.charCodeAt(n - 1) === e
                    }, t.handleMessageSend = function() {
                        return !!t.props.onSendMessage(t.state.chatInputValue) && (t.setState({
                            chatInputValue: ""
                        }), !0)
                    }, t.updateChatInputValue = function(e) {
                        t.setState({
                            chatInputValue: e
                        })
                    }, t.sortChatMembers = function(e) {
                        t.isChatMembersDirty = !1;
                        var n = [be.__assign({}, Object(Si.a)(t.props.displayName, t.props.channelLogin), {
                                userID: t.props.channelID,
                                userLogin: t.props.channelLogin,
                                userType: ln.a.Owner
                            })],
                            i = e;
                        return i.sort(function(e, t) {
                            return e.userLogin < t.userLogin ? -1 : e.userLogin > t.userLogin ? 1 : 0
                        }), n.concat(i)
                    }, t.onKeyDown = function(e) {
                        var n = e.charCode || e.keyCode;
                        if (n !== ui.a.Enter) {
                            var i = function(n) {
                                e.metaKey || e.shiftKey || e.ctrlKey || e.altKey || /^\w+$/.test(String.fromCharCode(n).toLowerCase()) || t.setState({
                                    isAutocompleteTriggeredWithTab: !1
                                })
                            };
                            switch (n) {
                                case ui.a.Backspace:
                                    0 !== t.state.partialWord.length && 0 !== t.state.cursorIndex || (t.setState({
                                        isAutocompleteTriggeredWithTab: !1
                                    }), t.closeAutocomplete());
                                    break;
                                case ui.a.Tab:
                                    var a = t.state.chatInputValue.split(/\s+/);
                                    if ("" === a[a.length - 1]) break;
                                    e.preventDefault(), t.state.isAnyAutocompleteShown || (e.stopPropagation(), t.setState({
                                        isAutocompleteTriggeredWithTab: !0
                                    }), t.showAutocomplete(pi.Mention));
                                    break;
                                case ui.a.Esc:
                                    e.preventDefault(), t.closeAutocomplete();
                                    break;
                                case ui.a.Up:
                                case ui.a.Down:
                                    t.state.isAnyAutocompleteShown && e.preventDefault();
                                    break;
                                case ui.a.Left:
                                case ui.a.Right:
                                    t.setPartialWord(), t.setState({
                                        isAutocompleteTriggeredWithTab: !1
                                    });
                                    break;
                                case ui.a.Space:
                                    2 === t.state.cursorIndex && "/w" === t.state.chatInputValue.substring(0, 2) ? (t.setState({
                                        isAutocompleteTriggeredWithTab: !0
                                    }), t.showAutocomplete(pi.Mention)) : i(n);
                                    break;
                                default:
                                    i(n)
                            }
                        }
                    }, t.onMessageChange = function(e) {
                        t.setState({
                            cursorIndex: t.getSelectionIndex(e),
                            chatInputValue: e.target.value
                        }, function() {
                            t.checkForEmotes(), t.checkForMentions()
                        })
                    }, t.onInputFocus = function() {
                        t.props.onChatInputFocus()
                    }, t.insertAutocompleteItem = function(e) {
                        var n = t.state.chatInputValue,
                            i = t.state.partialWordStartIndex,
                            a = t.state.partialWord.length;
                        ":" === n[i - 1] && (i--, a++);
                        var r = "" + n.substring(0, i) + e,
                            s = n.substring(i + a);
                        s || (r += " "), ki({
                            autocompleteType: t.state.autocompleteType,
                            channelLogin: t.props.channelLogin,
                            completedText: e,
                            source: t.props.suggestionSource
                        }), t.closeAutocomplete(), t.setState({
                            chatInputValue: r + s,
                            partialWord: ""
                        }), t.setSelectionIndex(r.length), document.querySelector('[data-a-target="chat-input"]').focus()
                    }, t.checkForEmotes = function() {
                        return t.state.chatInputValue.length && t.keycodeIsPrefixed(ui.a.Colon) ? t.state.isShowingEmoteAutocomplete ? void t.setPartialWord() : void t.showAutocomplete(pi.Emote) : void(t.state.isShowingEmoteAutocomplete && t.closeAutocomplete())
                    }, t.checkForMentions = function() {
                        return t.state.chatInputValue.length && t.keycodeIsPrefixed(ui.a.At) ? t.state.isShowingMentionAutocomplete ? void t.setPartialWord() : void t.showAutocomplete(pi.Mention) : void(t.state.isShowingMentionAutocomplete && t.closeAutocomplete())
                    }, t.setPartialWord = function() {
                        var e = t.state.cursorIndex,
                            n = ["@", ":"],
                            i = [" ", "\n", ""];
                        if (-1 === e) return void t.closeAutocomplete();
                        var a = t.state.chatInputValue.substring(0, e).search(/(\b|@|:)([^\u0000-\u007F]+|\w)*$/);
                        if (a = -1 === a ? e : a, ":" === t.state.chatInputValue.charAt(a) && !i.includes(t.state.chatInputValue.charAt(a - 1))) return void t.closeAutocomplete();
                        var r = t.state.chatInputValue.charAt(a);
                        if (n.includes(r) && (a += 1), !t.state.isAutocompleteTriggeredWithTab) {
                            var s = a > 0 ? t.state.chatInputValue.charAt(a - 1) : t.state.chatInputValue.charAt(a);
                            if (!n.includes(s)) return void t.closeAutocomplete()
                        }
                        t.setState({
                            partialWordStartIndex: a
                        });
                        for (var o = t.state.chatInputValue.length, l = a; l < t.state.chatInputValue.length; l++)
                            if (i.includes(t.state.chatInputValue[l])) {
                                o = l;
                                break
                            }
                        var c = t.state.chatInputValue.substring(a, o).match(/^([^\u0000-\u007F]+|\w)*(?=($|^([^\u0000-\u007F]+|\w)))/);
                        c ? (t.setState({
                            partialWord: c[0]
                        }), t.state.isShowingEmoteAutocomplete && c[0].length < yi ? t.closeAutocomplete() : (t.state.isShowingMentionAutocomplete || t.state.isShowingEmoteAutocomplete && !(c[0].length < yi)) && t.setState({
                            renderAutocomplete: !0
                        })) : t.closeAutocomplete()
                    }, t.getSelectionIndex = function(e) {
                        return e.currentTarget.selectionStart
                    }, t.setSelectionIndex = function(e) {
                        document.querySelector('[data-a-target="chat-input"]').setSelectionRange(e, e)
                    }, t.state = {
                        autocompleteType: pi.None,
                        chatInputValue: "",
                        cursorIndex: 0,
                        isAnyAutocompleteShown: !1,
                        isAutocompleteTriggeredWithTab: !1,
                        isShowingEmoteAutocomplete: !1,
                        isShowingMentionAutocomplete: !1,
                        partialWord: "",
                        partialWordStartIndex: 0,
                        renderAutocomplete: !1,
                        sortedChatMembers: []
                    }, t.isChatMembersDirty = !0, t
                }
                return be.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.props.chatMembers !== e.chatMembers && (this.state.isShowingMentionAutocomplete ? this.setState({
                        sortedChatMembers: this.sortChatMembers(e.chatMembers)
                    }) : this.isChatMembersDirty = !0)
                }, t.prototype.componentWillUpdate = function(e, t) {
                    !this.state.renderAutocomplete && t.renderAutocomplete && vi({
                        autocompleteType: this.state.autocompleteType,
                        source: this.props.suggestionSource
                    })
                }, t.prototype.render = function() {
                    var e = this,
                        t = De.Children.map(this.props.children, function(t) {
                            if (null === t || "object" != typeof t) return t;
                            var n = {
                                chatInputValue: e.state.chatInputValue,
                                isAnyAutocompleteShown: e.state.isAnyAutocompleteShown,
                                onKeyDown: e.onKeyDown,
                                onMessageChange: e.onMessageChange,
                                onSendMessage: e.handleMessageSend,
                                updateInput: e.updateChatInputValue,
                                onInputFocus: e.onInputFocus
                            };
                            return De.cloneElement(t, n)
                        }),
                        n = null,
                        i = this.state.autocompleteType === pi.Mention ? this.state.sortedChatMembers : this.props.emotes;
                    return n = this.state.renderAutocomplete ? De.createElement(We.U, null, De.createElement(hi, {
                        autocompleteType: this.state.autocompleteType,
                        autocompleteData: i,
                        closeAutocomplete: this.closeAutocomplete,
                        onClickOut: this.closeAutocomplete,
                        onItemClick: this.insertAutocompleteItem,
                        inputVal: this.state.partialWord
                    })) : null, De.createElement(We.U, {
                        padding: {
                            x: 2,
                            bottom: 2
                        }
                    }, n, t)
                }, t
            }(De.Component),
            _i = n(19),
            Ei = (n(939), function(e) {
                var t = void 0 !== e.progress,
                    n = De.createElement("img", {
                        className: "cheer-badge__image",
                        src: e.badge.image1x,
                        alt: e.badge.title,
                        srcSet: e.badge.image1x + " 1x, " + e.badge.image2x + " 2x, " + e.badge.image4x + " 4x"
                    });
                if (!t) return n;
                var i = e.progress ? Math.max(Math.round(18 * (1 - e.progress)), 1) : 18;
                return De.createElement("div", {
                    className: "cheer-badge__progress-container"
                }, n, De.createElement("div", {
                    className: "cheer-badge__progress-overlay",
                    style: {
                        width: i + "px"
                    },
                    "data-test-selector": "cheer-progress"
                }))
            }),
            Ni = n(245),
            wi = function(e) {
                var t;
                e.selfBitsBadge && (e.selfBitsBadge.current || e.selfBitsBadge.next) && (t = De.createElement(We.U, {
                    padding: {
                        bottom: .5
                    }
                }, e.selfBitsBadge.current && De.createElement(We.U, {
                    display: We.H.Inline,
                    margin: {
                        right: .5
                    }
                }, De.createElement(Ei, {
                    badge: e.selfBitsBadge.current
                })), e.selfBitsBadge.next && De.createElement(Ei, {
                    badge: e.selfBitsBadge.next,
                    progress: e.selfBitsBadge.progress
                }), e.selfBitsBadge.nextBits && Object(ke.d)("Next badge unlocks in {bitsToNextBadge} Bits!", {
                    bitsToNextBadge: e.selfBitsBadge.nextBits - e.selfBitsBadge.totalBits
                }, "Bits--BalanceFooter")));
                var n = Object(ke.d)("{bitsGem} Log in to see your Bits balance", {
                    bitsGem: De.createElement(Ve.a, {
                        count: 100,
                        withImage: !0,
                        bitsConfig: e.bitsConfig,
                        themeOverride: Me.a.Dark
                    })
                }, "Bits--BalanceFooter");
                return void 0 !== e.balance && null !== e.balance && (n = Object(ke.d)("You have {currentBits}", {
                    currentBits: De.createElement(Ve.a, {
                        count: e.balance,
                        withImage: !0,
                        withText: !0,
                        bitsConfig: e.bitsConfig,
                        themeOverride: Me.a.Dark
                    })
                }, "Bits--BalanceFooter")), De.createElement(We.U, {
                    flexGrow: 1,
                    padding: 1,
                    className: "bits-balance-footer"
                }, t, De.createElement(We.U, {
                    display: We.H.Flex,
                    flexGrow: 1,
                    alignItems: We.c.Center,
                    justifyContent: We.T.Between
                }, De.createElement("div", null, n), De.createElement(We.u, {
                    disabled: void 0 === e.balance || void 0 !== e.balance && e.balance > Ni.i,
                    onClick: e.onClickGetBits,
                    "data-test-selector": "get-bits-button",
                    "data-a-target": "get-bits-button"
                }, Object(ke.d)("Get Bits", "Bits--BalanceFooter"))))
            },
            Ti = function() {
                return De.createElement(We._17, {
                    className: "t-bits-card",
                    display: We.H.Flex,
                    flexDirection: We.J.Column,
                    alignItems: We.c.Center,
                    justifyContent: We.T.Center,
                    textAlign: We._22.Center,
                    padding: 1,
                    border: !0,
                    background: We.m.Base,
                    elevation: 3,
                    fullWidth: !0
                }, De.createElement(We._21, {
                    italic: !0
                }, Object(ke.d)("Have no fear, your Bits inventory is safe! The ability to Cheer will return shortly.", "BitsCard")))
            },
            Di = n(815),
            Ii = n(820),
            Ui = function(e) {
                return De.createElement(We.U, {
                    display: We.H.Flex,
                    flexGrow: 1,
                    flexDirection: We.J.Column,
                    justifyContent: We.T.Center,
                    alignItems: We.c.Center
                }, De.createElement(We.U, {
                    padding: {
                        top: 2,
                        bottom: 2
                    }
                }, De.createElement(We._21, {
                    type: We._26.H5,
                    color: We.F.Link,
                    bold: !0
                }, Object(ke.d)("Cheering Supports Your Streamer!", "Bits--CheermoteIntro"))), De.createElement(We._21, null, Object(ke.d)("Select a Cheermote to start your Cheer", "Bits--CheermoteIntro")), De.createElement(We.U, {
                    padding: {
                        top: 2,
                        bottom: 1
                    }
                }, De.createElement("a", {
                    href: "#",
                    onClick: e.onClickHelp,
                    "data-test-selector": "help-link"
                }, Object(ke.d)("How do I cheer?", "Bits--CheermoteIntro"))))
            },
            Oi = n(767),
            Mi = function(e) {
                var t = e.headline || e.prefix + (e.tier || "");
                if (e.tournament && e.tier <= 0) {
                    var n = e.tournament.teams.find(function(t) {
                        return t.id === e.prefix
                    });
                    n && (t = n.name + " - " + e.prefix)
                }
                var i = e.tier,
                    a = Oi.c.ImageAndText;
                return e.event && !e.tier && (a = Oi.c.ImageOnly, i = 1), De.createElement(We.U, {
                    display: We.H.Flex,
                    flexDirection: We.J.Column,
                    alignItems: We.c.Center
                }, De.createElement(We._21, {
                    type: We._26.H4,
                    bold: !0
                }, t), De.createElement(Oi.a, {
                    prefix: e.prefix,
                    amount: i,
                    bitsConfig: e.bitsConfig,
                    display: a
                }))
            },
            Fi = (n(940), function(e) {
                var t = null;
                e.minToCheer > 1 && (t = De.createElement(We._21, {
                    color: We.F.Alt2,
                    italic: !0
                }, Object(ke.d)("This channel has a Cheer minimum of {minToCheer} Bits", {
                    minToCheer: e.minToCheer
                }, "Bits--CheermoteTierIntro")));
                var n = null;
                return e.minToPin > 0 && (n = De.createElement(We._21, {
                    color: We.F.Alt2,
                    italic: !0
                }, Object(ke.d)("Pinning your Cheer is a minimum of {minToPin} Bits", {
                    minToPin: e.minToPin
                }, "Bits--CheermoteTierIntro"))), De.createElement(We.U, {
                    display: We.H.Flex,
                    flexGrow: 1,
                    flexDirection: We.J.Column,
                    alignItems: We.c.Center,
                    justifyContent: We.T.Center,
                    className: "cheermote-tier-intro"
                }, De.createElement(We.U, {
                    padding: {
                        x: 4
                    },
                    margin: {
                        bottom: 1
                    }
                }, De.createElement(We._21, {
                    color: We.F.Alt2
                }, Object(ke.d)("Cheermotes have multiple tiers, rollover below to see each one!", "Bits--CheermoteTierIntro"))), t, n)
            }),
            Pi = n(849),
            xi = n.n(Pi),
            Li = n(840),
            Ai = n(841),
            ji = function(e) {
                return Object(Ai.d)({
                    action: Ai.a.View,
                    type: Ai.c.BitsIntro,
                    channelId: e.channelID
                }), De.createElement(We.U, {
                    display: We.H.Flex,
                    flexGrow: 1,
                    flexDirection: We.J.Column,
                    justifyContent: We.T.Center,
                    alignItems: We.c.Center
                }, De.createElement(We.U, {
                    "data-test-selector": "crate-intro"
                }, De.createElement(We._21, {
                    type: We._26.H4,
                    bold: !0
                }, Object(ke.d)("The Zombie Apocalypse is Coming!", "Crates--Bits-Intro")), De.createElement("figure", {
                    className: "crates-intro-banner"
                }, De.createElement("img", {
                    src: xi.a
                })), De.createElement(We.U, {
                    margin: {
                        y: 1
                    },
                    padding: {
                        x: 1
                    }
                }, De.createElement(We._21, null, Object(ke.d)("For a limited time, Cheer at least {numBits, number} Bits and get a Halloween Crate with one of {numEmotes, number} temporary zombie emotes. Collect all {numEmotes, number} to permanently unlock Zombie Lord Kappa!", {
                    numBits: Li.b,
                    numEmotes: Li.a
                }, "Crates--Bits-Intro"), " ", De.createElement("a", {
                    href: "https://blog.twitch.tv/bring-the-zombie-apocalypse-to-twitch-7a5bf4ecff42",
                    target: "_blank",
                    rel: "noreferrer noopener"
                }, Object(ke.d)("Learn More", "Crates--Bits-Intro")))), De.createElement(We._21, null, Object(ke.d)("Select a Cheermote to start your Cheer", "Crates--CheermoteIntro"), De.createElement("br", null), De.createElement("a", {
                    href: "#",
                    onClick: e.onClickHelp,
                    "data-test-selector": "help-link"
                }, Object(ke.d)("How do I cheer?", "Crates--CheermoteIntro")))))
            },
            Ri = (n(941), function() {
                return De.createElement(We.U, {
                    display: We.H.Flex,
                    className: "hgc-2017-intro"
                }, De.createElement(We.P, {
                    padding: 1,
                    attachTop: !0,
                    attachLeft: !0,
                    position: We._2.Absolute
                }, De.createElement("img", {
                    className: "hgc-cheer__brand-banner",
                    src: Ni.g + "/hgc-logo-large.png"
                })), De.createElement(We.U, {
                    display: We.H.Flex,
                    className: "hgc-cheer__cheer-intro",
                    textAlign: We._22.Center
                }, De.createElement(We._21, {
                    color: We.F.Alt,
                    type: We._26.P
                }, Object(ke.d)("Select the logo of the team you want to Cheer for, followed by the number of Bits you want to use and any message you’d like to add.", "HGC2017--CheerIntro"))))
            });
        ! function(e) {
            e.CratesHalloween = "CratesHalloween"
        }(st || (st = {}));
        var Bi, Hi = function(e) {
                return e.event === Ni.h ? De.createElement(Ri, null) : e.event === st.CratesHalloween ? De.createElement(ji, {
                    onClickHelp: e.onClickHelp,
                    channelID: e.channelID
                }) : De.createElement(Ui, {
                    onClickHelp: e.onClickHelp
                })
            },
            Vi = n(84),
            Wi = function(e) {
                var t = e.prefixes.map(function(t, n) {
                    if (t.alt && t.cheerAmount) return De.createElement(We.P, {
                        key: n,
                        padding: {
                            x: 1
                        }
                    }, De.createElement("li", null, De.createElement(Oi.a, {
                        prefix: t.alt,
                        amount: t.cheerAmount,
                        bitsConfig: e.bitsConfig,
                        size: Oi.b.Small
                    })))
                });
                return De.createElement(We.U, {
                    display: We.H.Flex,
                    flexDirection: We.J.Row,
                    alignItems: We.c.End,
                    justifyContent: We.T.Center,
                    flexWrap: We.K.Wrap,
                    margin: {
                        top: 1
                    },
                    className: "pending-cheer-list"
                }, t)
            },
            Gi = (n(942), function(e) {
                var t;
                if (e.prefixes && 1 === e.prefixes.length) {
                    var n = e.prefixes[0].alt;
                    n && (t = De.createElement(We.U, {
                        padding: {
                            top: 2
                        }
                    }, De.createElement(Oi.a, {
                        prefix: n,
                        amount: e.amount,
                        bitsConfig: e.bitsConfig
                    })))
                } else if (e.prefixes) t = De.createElement(We.U, {
                    margin: {
                        top: 1
                    }
                }, De.createElement(Vi.b, {
                    className: "pending-cheer__scroll-container"
                }, De.createElement(Wi, {
                    prefixes: e.prefixes,
                    bitsConfig: e.bitsConfig
                })));
                else {
                    var i = Object(ke.d)("You are using a total of {totalBits} Bits to cheer in {channelName}!", {
                        totalBits: De.createElement("strong", null, e.amount),
                        channelName: e.channelDisplayName
                    }, "Bits--PendingCheer");
                    t = De.createElement(We.U, {
                        padding: {
                            top: 2,
                            x: 5
                        }
                    }, De.createElement(We._21, {
                        color: We.F.Alt2,
                        "data-a-target": "total-bits-message"
                    }, i))
                }
                var a = null;
                e.purchaseMore && e.purchaseMore > 0 && (a = De.createElement(We._21, {
                    "data-a-target": "need-more-bits-error"
                }, Object(ke.d)("Please purchase {neededBits} more Bits to Cheer", {
                    neededBits: e.purchaseMore
                }, "Bits--PendingCheer")));
                var r = null;
                if (e.largestCheermote > Ni.k) {
                    var s = Object(ke.d)("{maximumCheerSize} is the largest Cheer emote, add another emote to Cheer louder!", {
                        maximumCheerSize: Ni.k
                    }, "Bits--PendingCheer");
                    a = De.createElement(We._21, {
                        "data-a-target": "max-cheer-bits-error"
                    }, s)
                }
                if (e.amount < e.minToCheer) {
                    var o = Object(ke.d)("Add {moreBitsAmount} Bits to reach this channel's minimum Cheer.", {
                        moreBitsAmount: e.minToCheer - e.amount
                    }, "Bits--PendingCheer");
                    a = De.createElement(We._21, {
                        "data-a-target": "min-cheer-bits-error"
                    }, o)
                }
                if (e.smallestCheermote < e.minPerEmote) {
                    var l = Object(ke.d)("This channel has set a minimum of {minPerEmote} Bits to use a Cheer emote in chat.", {
                        minPerEmote: e.minPerEmote
                    }, "Bits--PendingCheer");
                    r = De.createElement(We._21, {
                        color: We.F.Alt2,
                        italic: !0,
                        "data-a-target": "min-emote-bits-error"
                    }, l)
                }
                var c = De.createElement(Oi.a, {
                    amount: e.amount,
                    prefix: "",
                    bitsConfig: e.bitsConfig,
                    display: Oi.c.InlineTextOnly,
                    size: Oi.b.Medium
                });
                return De.createElement(We.U, {
                    display: We.H.Flex,
                    flexDirection: We.J.Column,
                    alignItems: We.c.Center,
                    className: "pending-cheer"
                }, De.createElement(We._21, {
                    fontSize: We.L.Size4,
                    bold: !0
                }, Object(ke.d)("Cheering {totalBits} Bits", {
                    totalBits: c
                }, "Bits--PendingCheer")), !r && t, !r && a && De.createElement(We.U, {
                    padding: {
                        top: 1
                    }
                }, a), r && De.createElement(We.U, {
                    padding: {
                        top: 3,
                        x: 3
                    }
                }, r))
            }),
            qi = n(348),
            zi = (n(943), {
                themed: !0,
                dark: {
                    "1x": Ni.a + "/dark/animated/promo/intro.gif"
                },
                light: {
                    "1x": Ni.a + "/light/animated/promo/intro.gif"
                }
            }),
            $i = function() {
                return De.createElement(We.U, {
                    display: We.H.Flex,
                    flexDirection: We.J.Column,
                    alignItems: We.c.Center,
                    justifyContent: We.T.Center,
                    flexGrow: 1,
                    className: "bits-sending"
                }, De.createElement(We.U, {
                    padding: {
                        bottom: 1
                    }
                }, De.createElement(qi.a, {
                    sources: zi
                })), De.createElement(We._21, {
                    italic: !0
                }, Object(ke.d)("Your Cheer is currently processing.", "Bits--SendingBits")))
            },
            Ji = (n(944), function(e) {
                var t = Object(ke.d)("You are using {totalBits} Bits to cheer in {channelName}'s chat.", {
                        totalBits: e.totalBits,
                        channelName: e.channelDisplayName
                    }, "Bits--UndoPrompt"),
                    n = null;
                if (e.prefixes && e.prefixes.length > 1) n = De.createElement(Vi.b, {
                    className: "bits-undo-prompt__scroll-container"
                }, De.createElement(We.U, {
                    margin: {
                        top: 1
                    }
                }, De.createElement(Wi, {
                    prefixes: e.prefixes,
                    bitsConfig: e.bitsConfig
                })));
                else {
                    var i = e.prefixes[0].alt;
                    i && (n = De.createElement(We.U, {
                        padding: {
                            bottom: 1
                        }
                    }, De.createElement(Oi.a, {
                        prefix: i,
                        amount: e.totalBits,
                        bitsConfig: e.bitsConfig
                    })))
                }
                return De.createElement(We.U, {
                    display: We.H.Flex,
                    flexDirection: We.J.Column,
                    alignItems: We.c.Center,
                    justifyContent: We.T.Center,
                    flexGrow: 1,
                    className: "bits-undo-prompt"
                }, n, De.createElement(We._21, null, t))
            }),
            Ki = function(e) {
                var t = ke.b.get("crate_trickster_launch", Di.a.Off);
                if (e.isSending) return e.totalBits < Ni.l ? De.createElement($i, null) : De.createElement(Ji, {
                    bitsConfig: e.bitsConfig,
                    channelDisplayName: e.displayName,
                    prefixes: e.currentCheers,
                    totalBits: e.totalBits
                });
                if (e.hoveredCheermote) return De.createElement(Mi, {
                    event: e.event,
                    tournament: e.tournament,
                    bitsConfig: e.bitsConfig,
                    prefix: e.hoveredCheermote,
                    tier: e.hoveredTier
                });
                if (e.totalBits) return De.createElement(Gi, {
                    bitsConfig: e.bitsConfig,
                    prefixes: e.currentCheers,
                    amount: e.totalBits,
                    channelDisplayName: e.displayName,
                    purchaseMore: e.bitsBalance && e.totalBits - e.bitsBalance,
                    largestCheermote: e.largestCheermote,
                    smallestCheermote: e.smallestCheermote,
                    minPerEmote: e.emoteMinimumBits,
                    minToCheer: e.cheerMinimumBits,
                    event: e.event
                });
                if (e.helpRequested) return De.createElement(Ii.a, null);
                if (e.chosenCheermote) {
                    var n = e.recentMinimumBits,
                        i = e.cheerMinimumBits;
                    return De.createElement(Fi, {
                        minToPin: n,
                        minToCheer: i
                    })
                }
                if (e.event || t === Di.a.On) {
                    var a = e.event || st.CratesHalloween;
                    return De.createElement(Hi, {
                        event: a,
                        onClickHelp: e.showHelp,
                        channelID: e.channelID
                    })
                }
                return De.createElement(Ui, {
                    onClickHelp: e.showHelp
                })
            },
            Qi = n(813),
            Yi = (n(945), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        startingIndex: 0
                    }, t.handleCheermoteHover = function(e) {
                        var n = e.currentTarget.getAttribute("data-key");
                        n && t.props.onHover(n)
                    }, t.handleCheermoteUnhover = function() {
                        t.props.onHoverLeave()
                    }, t.handleCheermoteClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-key");
                        n && t.props.onClick(n)
                    }, t
                }
                return be.__extends(t, e), t.prototype.render = function() {
                    var e = this;
                    if (this.props.hide) return null;
                    var t = this.props.cheermotes,
                        n = t.map(function(t, n) {
                            if (!t) return De.createElement("li", {
                                key: "null-cheermote-" + n
                            }, De.createElement("button", {
                                className: "cheermote-list__item-button",
                                disabled: !0
                            }, De.createElement("div", {
                                className: "cheermote-list__placeholder"
                            })));
                            var i = "";
                            t.key && (i = t.key.replace(":", ""));
                            var a = null;
                            e.props.showCheermoteAmount && t.key && (a = De.createElement(Oi.a, {
                                bitsConfig: e.props.bitsConfig,
                                prefix: "",
                                amount: +t.key.split(":")[1],
                                display: Oi.c.TextOnly,
                                size: Oi.b.Small
                            }));
                            var r = De.createElement("li", {
                                key: t.key,
                                className: "cheermote-list__cheermote"
                            }, De.createElement("button", {
                                className: "cheermote-list__item-button",
                                "data-key": t.key,
                                onMouseEnter: e.handleCheermoteHover,
                                onMouseLeave: e.handleCheermoteUnhover,
                                onClick: e.handleCheermoteClick,
                                "data-a-target": "cheermote-" + i
                            }, De.createElement("img", {
                                alt: t.key,
                                src: e.props.darkModeEnabled ? t.imgSrcDark : t.imgSrc
                            })), a);
                            return e.props.showCheermoteAmount ? r : De.createElement(We.P, {
                                key: t.key,
                                margin: {
                                    bottom: 1
                                }
                            }, r)
                        }),
                        i = null;
                    this.props.showCheermoteAmount && (i = De.createElement(We.U, {
                        padding: {
                            right: 2
                        },
                        fullWidth: !0,
                        className: "cheermote-list__back-button"
                    }, De.createElement(We.u, {
                        "data-a-target": "bits-card-back-button",
                        type: We.z.Text,
                        fullWidth: !0,
                        onClick: this.props.onClose
                    }, Object(ke.d)("Show All Cheermotes", "CheermoteCarousel"))));
                    var a = De.createElement(We.P, {
                            className: "cheermote-list__cheermotes",
                            display: We.H.Flex,
                            flexWrap: We.K.Wrap,
                            flexDirection: We.J.Row,
                            justifyContent: this.props.showCheermoteAmount ? We.T.Between : We.T.Start,
                            alignItems: We.c.End,
                            padding: {
                                bottom: 1
                            }
                        }, De.createElement("ul", null, n, i)),
                        r = Ae("cheermote-list", {
                            "cheermote-list__tier-selection": this.props.showCheermoteAmount
                        }, {
                            "cheermote-list__cheermote-selection": !this.props.showCheermoteAmount
                        });
                    return this.props.showCheermoteAmount ? De.createElement(We.U, {
                        flexGrow: 1,
                        overflow: We.Y.Hidden,
                        className: r
                    }, a) : De.createElement(We.U, {
                        flexGrow: 1,
                        overflow: We.Y.Hidden,
                        className: r
                    }, De.createElement(Vi.b, null, a))
                }, t
            }(De.Component)),
            Xi = Object(we.a)(re)(Yi),
            Zi = n(124),
            ea = (n(946), function(e) {
                return De.createElement(We.U, {
                    flexGrow: 1,
                    padding: 1
                }, De.createElement(We.U, {
                    display: We.H.Flex,
                    flexGrow: 1,
                    alignItems: We.c.Center,
                    justifyContent: We.T.Between
                }, De.createElement(Ve.a, {
                    count: e.balance || 0,
                    withImage: !0,
                    withText: !0,
                    bitsConfig: e.bitsConfig,
                    themeOverride: Me.a.Dark
                }), De.createElement(We.P, {
                    display: We.H.Flex,
                    alignItems: We.c.Center
                }, De.createElement("a", {
                    href: Object(Zi.a)("/blizzheroes/esports/hgc-2017")
                }, De.createElement(We.P, {
                    margin: {
                        right: .5
                    }
                }, De.createElement("img", {
                    src: Ni.g + "/nexus-icon/1x.png",
                    className: "hgc-inventory-footer__nexus-icon"
                })), De.createElement("span", {
                    className: "hgc-inventory-footer__progress-link"
                }, Object(ke.d)("Check Progress!", "HGC2017--FooterCheckProgress")))), De.createElement(We.u, {
                    disabled: void 0 === e.balance || void 0 !== e.balance && e.balance > Ni.i,
                    onClick: e.onClickGetBits
                }, Object(ke.d)("Get Bits", "HGC2017--BalanceFooter"))))
            }),
            ta = function(e) {
                return e.event === Ni.h ? De.createElement(ea, {
                    bitsConfig: e.bitsConfig,
                    onClickGetBits: e.onClickGetBits,
                    balance: e.balance
                }) : De.createElement(wi, {
                    bitsConfig: e.bitsConfig,
                    onClickGetBits: e.onClickGetBits,
                    balance: e.balance,
                    selfBitsBadge: e.selfBitsBadge
                })
            },
            na = function(e) {
                return De.createElement(We.U, {
                    flexGrow: 1
                }, De.createElement(We.U, {
                    className: "undo-prompt__footer",
                    padding: 1,
                    display: We.H.Flex,
                    justifyContent: We.T.Between
                }, De.createElement(We.u, {
                    onClick: e.onCancel || void 0,
                    type: We.z.Hollow,
                    overlay: !0,
                    "data-test-selector": "cancel-button"
                }, Object(ke.d)("Cancel", "Bits--UndoPrompt")), De.createElement(We.u, {
                    onClick: e.onConfirm || void 0,
                    "data-test-selector": "confirm-button"
                }, Object(ke.d)("Send", "Bits--UndoPrompt"))), De.createElement(We._5, {
                    size: We._6.ExtraSmall,
                    countdown: Ni.m.UNDO_PROMPT_DURATION / 1e3
                }))
            },
            ia = n(765),
            aa = n(755),
            ra = n(947),
            sa = (n(948), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        chosenCheermote: null,
                        hoveredCheermote: null,
                        hoveredTier: 0,
                        helpRequested: !1,
                        totalBits: 0,
                        largestCheermote: 0,
                        smallestCheermote: 0,
                        buyingBits: !1
                    }, t.unhoverTimeout = 0, t.lastRefetchTime = 0, t.handleTierHover = function(e) {
                        clearTimeout(t.unhoverTimeout);
                        var n = e.split(":");
                        n.length < 2 || (t.setState({
                            hoveredTier: +n[1],
                            hoveredCheermote: n[0]
                        }), t.props.trackBitsCardInteraction(aa.a.PreviewEmote, {
                            emoteType: n[0],
                            emoteLevel: +n[1]
                        }))
                    }, t.handleUnhover = function() {
                        t.unhoverTimeout = setTimeout(t.clearHovered, 500)
                    }, t.clearHovered = function() {
                        t.setState({
                            hoveredTier: 0,
                            hoveredCheermote: null
                        })
                    }, t.handleTierClick = function(e) {
                        t.props.onClickCheermote(e.split(":").join(""))
                    }, t.handleCheermoteHover = function(e) {
                        clearTimeout(t.unhoverTimeout), t.setState({
                            hoveredCheermote: e,
                            hoveredTier: 0
                        }), t.props.trackBitsCardInteraction(aa.a.PreviewEmote, {
                            emoteType: e,
                            emoteLevel: 100
                        })
                    }, t.handleCheermoteClick = function(e) {
                        t.setState({
                            chosenCheermote: e,
                            hoveredCheermote: null,
                            hoveredTier: 0
                        })
                    }, t.clearChosenCheermote = function() {
                        t.setState({
                            chosenCheermote: null,
                            hoveredCheermote: null,
                            hoveredTier: 0
                        })
                    }, t.showHelp = function(e) {
                        e.preventDefault(), t.setState({
                            helpRequested: !0
                        })
                    }, t.closeHelp = function() {
                        return t.setState({
                            helpRequested: !1
                        })
                    }, t.handleClickBuy = function() {
                        t.setState({
                            buyingBits: !0
                        }), t.props.trackBitsCardInteraction(aa.a.BuyMain)
                    }, t.handleCloseBuy = function() {
                        return t.setState({
                            buyingBits: !1
                        })
                    }, t
                }
                return be.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t = this.props.visible || !!this.props.currentCheers.length,
                        n = e.visible || !!e.currentCheers.length;
                    if (!t && n) {
                        var i = Date.now();
                        i - this.lastRefetchTime > 1e3 && this.props.data && e.data && !e.data.loading && (this.lastRefetchTime = i, e.data.refetch())
                    }
                    if (t && !n && this.setState({
                            chosenCheermote: null,
                            hoveredCheermote: null,
                            hoveredTier: 0,
                            buyingBits: !1
                        }), this.props.currentCheers !== e.currentCheers) {
                        var a = Object(ia.a)(e.currentCheers),
                            r = a.total,
                            s = a.largestCheermote,
                            o = a.smallestCheermote;
                        this.setState({
                            totalBits: r,
                            largestCheermote: s,
                            smallestCheermote: o
                        })
                    }
                }, t.prototype.render = function() {
                    var e = this;
                    if (!this.props.visible && !this.props.currentCheers.length) return null;
                    var t, n = {
                        border: !0,
                        background: We.m.Base,
                        elevation: 3,
                        fullWidth: !0
                    };
                    if (this.props.currentCheers.length || (t = De.createElement("button", {
                            className: "t-bits-card__close t-bits-card__top-controls",
                            onClick: this.props.onUserClose,
                            "data-test-selector": "cancel-button",
                            "data-a-target": "bits-card-close-button"
                        }, De.createElement(We._8, {
                            asset: We._9.Close,
                            height: 11,
                            width: 11
                        }))), !this.props.data || this.props.data.loading) return De.createElement(We._17, be.__assign({
                        className: "t-bits-card",
                        display: We.H.Flex,
                        flexDirection: We.J.Column,
                        alignItems: We.c.Center,
                        justifyContent: We.T.Center
                    }, n), De.createElement(We.X, {
                        delay: 0
                    }), De.createElement(We.U, {
                        padding: {
                            top: 2
                        }
                    }, De.createElement(We._21, {
                        italic: !0
                    }, Object(ke.d)("Fetching Bits", "BitsCard"))));
                    if (this.props.data.error || !this.props.bitsConfig) return De.createElement(Ti, null);
                    if (this.props.data.currentUser && this.props.data.currentUser.login === this.props.channelLogin) return De.createElement(We._17, be.__assign({
                        className: "t-bits-card",
                        display: We.H.Flex,
                        flexDirection: We.J.Column,
                        alignItems: We.c.Center,
                        justifyContent: We.T.Center,
                        textAlign: We._22.Center,
                        padding: 1
                    }, n), t, De.createElement(We._21, {
                        color: We.F.Error,
                        italic: !0
                    }, Object(ke.d)("You cannot Cheer in your own channel.", "BitsCard")));
                    if (this.state.buyingBits) return De.createElement(Qi.a, {
                        bitsConfig: this.props.bitsConfig,
                        channelLogin: this.props.channelLogin,
                        closeAllBits: this.props.onUserClose,
                        onClose: this.handleCloseBuy,
                        trackBitsCardInteraction: this.props.trackBitsCardInteraction,
                        location: aa.b.ChatTooltip
                    });
                    var i = null,
                        a = this.state.helpRequested && !this.props.currentCheers.length,
                        r = null;
                    if (this.props.data.user.cheer.settings.event && (r = this.props.data.user.cheer.settings.event.toLowerCase().replace("_", "-")), this.state.chosenCheermote) {
                        var s = this.props.bitsConfig.indexedActions[this.state.chosenCheermote.toLowerCase()];
                        if (s) {
                            var o = s.orderedTiers.map(function(e) {
                                return {
                                    imgSrc: e.indexedImages.LIGHT.static.get(2),
                                    imgSrcDark: e.indexedImages.DARK.static.get(2),
                                    key: s.prefix + ":" + e.bits
                                }
                            }).reverse();
                            i = De.createElement(Xi, {
                                bitsConfig: this.props.bitsConfig,
                                hide: a,
                                cheermotes: o,
                                showCheermoteAmount: !0,
                                event: r,
                                onHover: this.handleTierHover,
                                onHoverLeave: this.handleUnhover,
                                onClick: this.handleTierClick,
                                onClose: this.clearChosenCheermote
                            })
                        }
                    }
                    if (!i) {
                        var o = this.props.bitsConfig.orderedActions.filter(function(e) {
                            return e.type !== Ni.c
                        }).map(function(t) {
                            var n = Ni.f;
                            e.props.data && e.props.data.user.cheer.settings.event && (n = 1);
                            var i = t.indexedTiers.get(n);
                            return i ? {
                                imgSrc: i.indexedImages.LIGHT.static.get(2),
                                imgSrcDark: i.indexedImages.DARK.static.get(2),
                                key: t.prefix
                            } : null
                        });
                        i = De.createElement(Xi, {
                            bitsConfig: this.props.bitsConfig,
                            hide: a,
                            cheermotes: o,
                            event: r,
                            onHover: this.handleCheermoteHover,
                            onHoverLeave: this.handleUnhover,
                            onClick: this.handleCheermoteClick
                        })
                    }
                    var l = null;
                    this.props.isSending ? this.state.totalBits >= Ni.l && (l = De.createElement(na, {
                        onCancel: this.props.onCancelSend,
                        onConfirm: this.props.onConfirmSend
                    })) : l = r ? De.createElement(ta, {
                        event: r,
                        selfBitsBadge: this.props.data.user.self && this.props.data.user.self.bitsBadge,
                        bitsConfig: this.props.bitsConfig,
                        onClickGetBits: this.handleClickBuy,
                        balance: this.props.data.currentUser && this.props.data.currentUser.bitsBalance
                    }) : De.createElement(wi, {
                        selfBitsBadge: this.props.data.user.self && this.props.data.user.self.bitsBadge,
                        bitsConfig: this.props.bitsConfig,
                        onClickGetBits: this.handleClickBuy,
                        balance: this.props.data.currentUser && this.props.data.currentUser.bitsBalance
                    });
                    var c;
                    a && (c = De.createElement("button", {
                        className: "t-bits-card__go-back t-bits-card__top-controls",
                        onClick: this.closeHelp,
                        "data-a-target": "bits-card-back-button"
                    }, De.createElement(We._8, {
                        asset: We._9.Play,
                        height: 8
                    }), " ", Object(ke.d)("Back", "BitsCard")));
                    var u = Ae("t-bits-card", {
                        "t-bits-card--tall": !this.props.isSending
                    });
                    return De.createElement(We._17, be.__assign({
                        className: u,
                        display: We.H.Flex,
                        flexDirection: We.J.Column,
                        "data-a-target": "bits-card"
                    }, n), !this.props.isSending && c, t, De.createElement(We._17, {
                        className: "t-bits-card__contents",
                        display: We.H.Flex,
                        flexGrow: 0,
                        flexDirection: We.J.Column,
                        alignContent: We.b.Stretch,
                        padding: {
                            top: 1
                        },
                        borderBottom: !this.props.isSending
                    }, De.createElement(Ki, {
                        bitsBalance: this.props.data.currentUser && this.props.data.currentUser.bitsBalance,
                        bitsConfig: this.props.bitsConfig,
                        cheerMinimumBits: this.props.data.user.cheer.settings.cheerMinimumBits,
                        chosenCheermote: this.state.chosenCheermote,
                        currentCheers: this.props.currentCheers,
                        displayName: this.props.data.user.displayName,
                        emoteMinimumBits: this.props.data.user.cheer.settings.emoteMinimumBits,
                        event: r,
                        helpRequested: this.state.helpRequested,
                        hoveredCheermote: this.state.hoveredCheermote,
                        hoveredTier: this.state.hoveredTier,
                        isSending: this.props.isSending,
                        largestCheermote: this.state.largestCheermote,
                        recentMinimumBits: this.props.data.user.cheer.settings.recentMinimumBits,
                        smallestCheermote: this.state.smallestCheermote,
                        totalBits: this.state.totalBits,
                        tournament: this.props.data.user.tournament,
                        channelID: this.props.channelID,
                        showHelp: this.showHelp
                    })), !this.props.isSending && i, l && De.createElement(We.U, {
                        className: "t-bits-card__footer",
                        display: We.H.Flex
                    }, l))
                }, t = be.__decorate([Object(Ie.a)(ra, {
                    name: "data",
                    skip: function(e) {
                        return !e.channelID
                    },
                    options: function(e) {
                        return {
                            variables: {
                                name: e.channelID
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                })], t)
            }(De.Component)),
            oa = sa,
            la = n(861),
            ca = function() {
                return De.createElement(We.p, {
                    direction: We.q.TopLeft,
                    offsetY: "11px",
                    show: !0
                }, De.createElement(We.U, {
                    padding: 1,
                    "data-test-selector": "raids-settings-tooltip"
                }, Object(ke.d)("If a raid is offensive, moderate in chat settings.", "RaidReportingChat")))
            },
            ua = {
                Embed: "embed",
                Web: "web"
            },
            da = n(949),
            pa = this,
            ma = function(e) {
                return be.__awaiter(pa, void 0, void 0, function() {
                    var t, n;
                    return be.__generator(this, function(i) {
                        switch (i.label) {
                            case 0:
                                return [4, ke.n.apollo.client.query({
                                    query: da,
                                    variables: {
                                        id: e.channelID
                                    }
                                })];
                            case 1:
                                return t = i.sent(), t.data || ke.i.warn("ChatEvent query failed; Chat tracking data sent may be incomplete."), n = be.__assign({}, Object(gn.a)(e), {
                                    broadcast_id: ke.m.getVideoPlayerTrackingData().broadcastID,
                                    channel_id: e.channelID,
                                    game: t.data && t.data.user.stream && t.data.user.stream.game && t.data.user.stream.game.name,
                                    live: !!(t.data && t.data.user.stream && t.data.user.stream.id.length > 0),
                                    partner: t.data && t.data.user.isPartner,
                                    play_session_id: ke.m.getVideoPlayerTrackingData().playSessionID,
                                    player: e.player,
                                    sub_only_mode: e.subOnlyMode
                                }), ke.m.track(Ot.SpadeEventType.Chat, n), [2]
                        }
                    })
                })
            },
            ha = function(e) {
                var t = be.__assign({}, Object(gn.a)(e), {
                    mentioned_user_display_name: e.mentionedUserDisplayName,
                    user: e.userLogin
                });
                ke.m.track(Ot.SpadeEventType.ChatMentionUsed, t)
            },
            ga = n(825),
            fa = n(357),
            ba = n(950),
            va = n(951),
            ka = /\S/,
            Sa = 3;
        ! function(e) {
            e[e.Bits = 0] = "Bits", e[e.Emotes = 1] = "Emotes", e[e.None = 2] = "None"
        }(Bi || (Bi = {}));
        var ya, Ca, _a = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.cancelDelayedSend = null, n.confirmDelayedSend = null, n.hasConfirmedInEmbed = !1, n.hasSeenConfirmationPrompt = !1, n.saveChatInputRef = function(e) {
                        return n.chatInputRef = e
                    }, n.onChatSettingsToggle = function(e) {
                        n.handleRaidReportingToggle(e), e || Object(ga.b)({
                            channelLogin: n.props.channelLogin,
                            isHostMode: n.props.isHostMode
                        })
                    }, n.handleRaidReportingToggle = function(e) {
                        n.props.raidReceived && (n.state.showRaidsSettingsTooltip && (n.setState({
                            showRaidsSettingsTooltip: !1
                        }), ke.k.set("raidsModerationTooltipsSeenNumTimes", Sa)), e && n.setState({
                            showRaidsFollowerOnlyTooltip: !1
                        }))
                    }, n.onKeyDown = function(e) {
                        var t = e.charCode || e.keyCode;
                        switch (n.props.onKeyDown && t !== ui.a.Enter && n.props.onKeyDown(e), t) {
                            case ui.a.Enter:
                                return void(e.shiftKey || (e.preventDefault(), n.props.isAnyAutocompleteShown || n.onMessageSend()));
                            case ui.a.Esc:
                                return void(n.state.showCard === Bi.Bits && n.setState({
                                    showCard: Bi.None
                                }));
                            case ui.a.Tab:
                                return void e.preventDefault();
                            default:
                                return
                        }
                    }, n.onMessageChange = function(e) {
                        n.props.onMessageChange && n.props.onMessageChange(e)
                    }, n.onInputFocus = function() {
                        n.props.onInputFocus && n.props.onInputFocus(), n.state.hasInteractedOrPageload || n.setState({
                            hasInteractedOrPageload: !0
                        })
                    }, n.onMouseEnterInput = function() {
                        n.state.hasInteractedOrPageload || n.setState({
                            hasInteractedOrPageload: !0
                        })
                    }, n.onChatCommand = function(e) {
                        n.props.onChatCommand(e), n.trackChatEvent()
                    }, n.confirmEmbedAction = function(e, t, i) {
                        var a = n,
                            r = a.hasConfirmedInEmbed;
                        if (a.hasSeenConfirmationPrompt) return r;
                        var s = window.confirm(n.confirmationMessage(e, t, i));
                        return n.hasSeenConfirmationPrompt = !0, n.hasConfirmedInEmbed = s, s
                    }, n.confirmationMessage = function(e, t, n) {
                        return Object(ke.d)('Hi {displayName}. You are attempting to send "{message}" in {channelLogin}\'s chat via an embedded version of Twitch Chat. Are you sure you want to do this? This setting will persist until you refresh the page', {
                            displayName: e,
                            message: t,
                            channelLogin: n
                        }, "ChatInput")
                    }, n.onMessageSend = function() {
                        return be.__awaiter(n, void 0, void 0, function() {
                            var e, t, n, i, a, r, s = this;
                            return be.__generator(this, function(o) {
                                switch (o.label) {
                                    case 0:
                                        return this.props.authToken ? this.props.channelID ? (e = ka.test(this.props.chatInputValue)) ? this.state.isSendingBits ? (ke.i.debug("[ChatInput] Supressing chat message send. Bits spending is still in progress."), [2]) : this.props.isEmbedded && (this.props.isCurrentUserModerator || this.props.data && this.props.data.currentUser && this.props.data.currentUser.isPartner) && this.props.sessionUser && !this.confirmEmbedAction(this.props.sessionUser.displayName, this.props.chatInputValue || "", this.props.channelLogin) ? (ke.i.debug("[ChatInput] Embed Confirmation check failed. Not sending message"), [2]) : this.props.data && this.props.data.currentUser ? (t = Object(ia.a)(this.state.messageCheers), 0 === t.total ? (this.sendRegularMessage(), [2]) : this.props.data.user ? this.props.data.user.cheer ? (n = Object(ia.f)({
                                            messageBits: t,
                                            balance: this.props.data.currentUser.bitsBalance,
                                            cheerMinimumBits: this.props.data.user.cheer.settings.cheerMinimumBits,
                                            emoteMinimumBits: this.props.data.user.cheer.settings.emoteMinimumBits,
                                            inputValue: this.props.chatInputValue
                                        }), n.canSpend ? this.props.sendCheer ? (this.setState({
                                            isSendingBits: !0
                                        }), t.total >= Ni.l ? [4, new Promise(function(e) {
                                            var t = setTimeout(e, Ni.m.UNDO_PROMPT_DURATION),
                                                n = function(n) {
                                                    void 0 === n && (n = !1), clearTimeout(t), s.cancelDelayedSend = null, s.confirmDelayedSend = null, e(n)
                                                };
                                            s.cancelDelayedSend = function() {
                                                return n(!0)
                                            }, s.confirmDelayedSend = function() {
                                                return n(!1)
                                            }
                                        })] : [3, 2]) : (ke.i.warn("[Chat Input] No GraphQL mutation for sending cheers attached."), [2]) : (ke.i.warn("[Chat Input] Spending bits forbidden.", n), [2])) : (ke.i.warn("[Chat Input] Cheer is null."), [2]) : (ke.i.warn("[Chat Input] User is null."), [2])) : (this.sendRegularMessage(), [2]) : (ke.i.debug("[ChatInput] Supressing chat message send. Input failed to pass validation.", {
                                            hasSendableInput: e,
                                            value: this.props.chatInputValue
                                        }), [2]) : (ke.i.warn("[ChatInput] Attempt to send a message before channel ID"), [2]) : (this.props.login(), [2]);
                                    case 1:
                                        if (i = o.sent()) return this.setState({
                                            isSendingBits: !1
                                        }), this.chatInputRef.focus(), [2];
                                        o.label = 2;
                                    case 2:
                                        a = Object(_i.a)(), o.label = 3;
                                    case 3:
                                        return o.trys.push([3, 5, , 6]), [4, this.props.sendCheer({
                                            variables: {
                                                input: {
                                                    id: a,
                                                    targetID: this.props.channelID,
                                                    bits: t.total,
                                                    content: this.props.chatInputValue
                                                }
                                            }
                                        })];
                                    case 4:
                                        return o.sent(), [3, 6];
                                    case 5:
                                        return r = o.sent(), this.setState({
                                            isSendingBits: !1
                                        }), this.chatInputRef.focus(), [2];
                                    case 6:
                                        return this.setState({
                                            isSendingBits: !1,
                                            showCard: Bi.None
                                        }), this.chatInputRef.focus(), this.props.updateInput && this.props.updateInput(""), [2]
                                }
                            })
                        })
                    }, n.onEmotePickerToggle = function() {
                        n.setState(function(e) {
                            if (!e.messageCheers.length) return {
                                showCard: e.showCard === Bi.Emotes ? Bi.None : Bi.Emotes
                            }
                        })
                    }, n.onBitsIconClick = function() {
                        n.state.showCard === Bi.Bits ? n.trackBitsCardInteraction(aa.a.CloseCard) : n.trackBitsCardInteraction(aa.a.OpenCard), n.setState({
                            showCard: n.state.showCard === Bi.Bits ? Bi.None : Bi.Bits
                        })
                    }, n.onShowViewersList = function() {
                        n.state.showCard !== Bi.None && n.setState({
                            showCard: Bi.None
                        }), n.props.showViewersList()
                    }, n.onBitsClose = function() {
                        n.state.showCard === Bi.Bits && n.setState({
                            showCard: Bi.None
                        }), n.trackBitsCardInteraction(aa.a.CloseCard)
                    }, n.onClickEmote = function(e) {
                        var t = n.props.chatInputValue;
                        n.props.chatInputValue && n.props.chatInputValue.length > 0 && !n.props.chatInputValue.endsWith(" ") && (t += " "), t += e + " ", n.props.updateInput && n.props.updateInput(t)
                    }, n.onEmotePickerDataLoaded = function(e) {
                        e && n.setState({
                            showEmotePickerButton: !0
                        })
                    }, n.trackBitsCardInteraction = function(e, t) {
                        var i = {
                            actionName: e,
                            emoteType: t && t.emoteType,
                            emoteLevel: t && t.emoteLevel,
                            location: t && t.location,
                            displayedBalance: n.props.data && n.props.data.currentUser && n.props.data.currentUser.bitsBalance || 0
                        };
                        Object(aa.h)(i)
                    }, n.state = {
                        hasInteractedOrPageload: t.firstPageLoaded,
                        isSendingBits: !1,
                        messageCheers: [],
                        showBuyBits: !1,
                        showCard: Bi.None,
                        showEmotePickerButton: !!t.authToken,
                        showRaidsSettingsTooltip: !1,
                        showRaidsFollowerOnlyTooltip: !1
                    }, n
                }
                return be.__extends(t, e), t.prototype.componentWillUpdate = function(e, t) {
                    var n = this;
                    if (e.chatInputValue !== this.props.chatInputValue && this.props.bitsConfig) {
                        var i = [];
                        Object(xe.c)(e.chatInputValue, this.props.bitsConfig).forEach(function(e) {
                            e.type === en.a.Emote && i.push(e.content)
                        }), i.length && t.showCard === Bi.Emotes && this.setState({
                            showCard: Bi.None
                        }), this.setState({
                            messageCheers: i
                        })
                    }
                    this.props.isCurrentUserModerator && !this.props.raidReceived && e.raidReceived && (ke.k.get("raidsModerationTooltipsSeenNumTimes", 0), Number(ke.k.get("raidsModerationTooltipsSeenNumTimes", 0)) < Sa && this.setState({
                        showRaidsSettingsTooltip: !0,
                        showRaidsFollowerOnlyTooltip: !0
                    }, function() {
                        setTimeout(function() {
                            ke.k.set("raidsModerationTooltipsSeenNumTimes", ke.k.get("raidsModerationTooltipsSeenNumTimes", 0) + 1), n.setState({
                                showRaidsSettingsTooltip: !1
                            })
                        }, 2e4)
                    }))
                }, t.prototype.componentWillReceiveProps = function(e) {
                    !this.props.firstPageLoaded && e.firstPageLoaded && this.setState({
                        hasInteractedOrPageload: !0
                    })
                }, t.prototype.render = function() {
                    var e = [];
                    this.props.bitsConfig && e.push(De.createElement(We.v, {
                        key: "bits",
                        icon: this.props.data && this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.settings.event ? We._9.HGCNexus : We._9.Bits,
                        ariaLabel: Object(ke.d)("Bits", "ChatInput"),
                        type: We.w.Secondary,
                        onClick: this.onBitsIconClick,
                        "data-a-target": "bits-button"
                    })), this.state.showEmotePickerButton && e.push(De.createElement(fa.b, {
                        key: "emote-picker",
                        onClick: this.onEmotePickerToggle
                    }));
                    var t = null;
                    this.state.hasInteractedOrPageload && (t = De.createElement(fa.c, {
                        channelOwnerID: this.props.channelID,
                        onClickEmote: this.onClickEmote,
                        onLoad: this.onEmotePickerDataLoaded,
                        toggleVisibility: this.onEmotePickerToggle,
                        visible: this.state.showCard === Bi.Emotes
                    }));
                    var n = null;
                    return this.state.hasInteractedOrPageload && this.props.bitsConfig && (n = De.createElement(oa, {
                        bitsConfig: this.props.bitsConfig,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        currentCheers: this.state.messageCheers,
                        isSending: this.state.isSendingBits,
                        onCancelSend: this.cancelDelayedSend,
                        onClickCheermote: this.onClickEmote,
                        onConfirmSend: this.confirmDelayedSend,
                        onUserClose: this.onBitsClose,
                        trackBitsCardInteraction: this.trackBitsCardInteraction,
                        visible: this.state.showCard === Bi.Bits
                    })), De.createElement(We.U, {
                        className: "chat-input"
                    }, De.createElement(We.P, {
                        position: We._2.Relative,
                        zIndex: We._38.Above
                    }, De.createElement("div", {
                        onMouseEnter: this.onMouseEnterInput
                    }, De.createElement(We._23, {
                        "data-a-target": "chat-input",
                        "data-test-selector": "chat-input",
                        disabled: this.state.isSendingBits,
                        noResize: !0,
                        onChange: this.onMessageChange,
                        onFocus: this.onInputFocus,
                        onKeyDown: this.onKeyDown,
                        paddingRight: 30 * e.length,
                        placeholder: Object(ke.d)("Send a message", "ChatInput"),
                        value: this.props.chatInputValue,
                        refDelegate: this.saveChatInputRef
                    }), De.createElement(We.U, {
                        position: We._2.Absolute,
                        attachRight: !0,
                        attachTop: !0
                    }, e), t, n)), De.createElement(We.U, {
                        className: "chat-input__buttons-container",
                        display: We.H.Flex,
                        justifyContent: We.T.Between,
                        margin: {
                            top: 1
                        }
                    }, De.createElement(We.U, {
                        display: We.H.Flex,
                        flexDirection: We.J.Row
                    }, De.createElement(We.U, {
                        position: We._2.Relative
                    }, De.createElement(la.a, {
                        disabled: this.props.isEmbedded,
                        onToggle: this.onChatSettingsToggle,
                        channelLogin: this.props.channelLogin,
                        isHostMode: this.props.isHostMode,
                        authToken: this.props.authToken,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        onChatCommand: this.onChatCommand,
                        isPopout: this.props.isPopout,
                        channelID: this.props.channelID,
                        sawFirstRaidPrompt: this.state.showRaidsFollowerOnlyTooltip
                    }), this.state.showRaidsSettingsTooltip ? De.createElement(ca, null) : null), De.createElement(We.v, {
                        ariaLabel: Object(ke.d)("Viewer list", "ChatInput"),
                        "data-a-target": "chat-viewer-list",
                        "data-test-selector": "chat-viewer-list",
                        icon: We._9.ViewerList,
                        onClick: this.onShowViewersList
                    })), this.renderSendButton()))
                }, t.prototype.renderSendButton = function() {
                    var e;
                    return e = this.props.chatInputValue && null !== Object(Dt.m)(this.props.chatInputValue) ? Object(ke.d)("Whisper", "ChatInput") : Object(ke.d)("Chat", "ChatInput"), De.createElement(We.u, {
                        onClick: this.onMessageSend,
                        "data-a-target": "chat-send-button",
                        "data-test-selector": "chat-send-button",
                        disabled: this.state.isSendingBits
                    }, e)
                }, t.prototype.sendRegularMessage = function() {
                    this.props.onSendMessage && this.props.onSendMessage() && (this.trackChatEvent(), this.trackMentions(), this.setState({
                        showCard: Bi.None
                    }))
                }, t.prototype.trackChatEvent = function() {
                    ma({
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        isHostMode: this.props.isHostMode,
                        player: this.props.isPopout ? ua.Embed : ua.Web,
                        subOnlyMode: this.props.isSubsOnlyModeEnabled
                    })
                }, t.prototype.trackMentions = function() {
                    if (!this.props.chatInputValue || !this.props.sessionUser) return void ke.i.warn("[ChatInput] trackMentions was called in a nonsensical state.");
                    for (var e = Object(cn.c)(this.props.chatInputValue, this.props.sessionUser.displayName, !1), t = 0, n = e; t < n.length; t++) {
                        var i = n[t];
                        i.type === en.a.Mention && i.content.recipient !== i.content.sender && ha({
                            channelLogin: this.props.channelLogin,
                            isHostMode: this.props.isHostMode,
                            mentionedUserDisplayName: i.content.recipient,
                            userLogin: this.props.sessionUser.login
                        })
                    }
                }, t
            }(De.Component),
            Ea = Object(Ue.compose)(Object(Ie.a)(va, {
                name: "sendCheer"
            }), Object(Ie.a)(ba), Object(fn.c)("ChatInput", {
                autoReportInteractive: !0
            }), Object(we.a)(se, oe))(_a),
            Na = n(824),
            wa = function(e) {
                var t = e.data.twitch_metadata.clip_metadata,
                    n = {
                        clip: {
                            slug: t.slug,
                            id: t.id,
                            url: e.data.request_url,
                            title: e.data.title,
                            thumbnailURL: e.data.thumbnail_url,
                            curator: {
                                displayName: e.data.author_name,
                                __typename: "User"
                            },
                            broadcaster: {
                                displayName: t.channel_display_name,
                                __typename: "User"
                            },
                            game: null,
                            __typename: "Clip"
                        }
                    };
                return t.game && (n.clip.game = {
                    displayName: t.game,
                    __typename: "Game"
                }), n
            },
            Ta = n(29),
            Da = (n(952), ["scroll", "wheel", "mousewheel", "DOMMouseScroll", "keyup", "mousedown"]),
            Ia = 10,
            Ua = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isAutoScrolling: !0
                    }, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.handleScrollEvent = function(e) {
                        if (t.scroll && (e.which > 0 || "mousedown" === e.type || "mousewheel" === e.type || "wheel" === e.type)) {
                            t.scroll.scrollContent.scrollHeight - t.scroll.scrollContent.scrollTop - t.scroll.scrollContent.offsetHeight <= Ia ? t.setState({
                                isAutoScrolling: !0
                            }) : t.setState({
                                isAutoScrolling: !1
                            })
                        }
                    }, t.handleClickMoreMessages = function() {
                        t.setState({
                            isAutoScrolling: !0
                        }, t.scrollToBottom)
                    }, t
                }
                return be.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    Da.forEach(function(t) {
                        return e.scroll.scrollContent.addEventListener(t, e.handleScrollEvent)
                    })
                }, t.prototype.componentWillUnmount = function() {
                    var e = this;
                    Da.forEach(function(t) {
                        return e.scroll.scrollContent.removeEventListener(t, e.handleScrollEvent)
                    })
                }, t.prototype.componentDidUpdate = function(e) {
                    this.state.isAutoScrolling && this.props.messages !== e.messages && this.scrollToBottom()
                }, t.prototype.render = function() {
                    var e = this,
                        t = this.props.messages,
                        n = t.map(function(t) {
                            return De.createElement(ni, {
                                badgeSets: e.props.badgeSets,
                                channelID: e.props.channelID,
                                isCurrentUserModerator: e.props.isCurrentUserModerator,
                                message: t,
                                key: t.id,
                                showModerationIcons: e.props.showModerationIcons && !e.props.isEmbedded,
                                showTimestamps: e.props.showTimestamps,
                                currentUserDisplayName: e.props.currentUserDisplayName,
                                currentUserLogin: e.props.currentUserLogin,
                                onPushMessage: e.props.onPushMessage
                            })
                        });
                    return De.createElement(We.U, {
                        className: "chat-list",
                        display: We.H.Flex,
                        flexDirection: We.J.Column,
                        flexWrap: We.K.NoWrap,
                        overflow: We.Y.Hidden,
                        flexGrow: 1
                    }, De.createElement(Ta.b, {
                        className: "chat-list__lines",
                        scrollRef: this.saveScrollRef,
                        "data-a-target": "chat-scroller"
                    }, De.createElement(We.U, {
                        flexGrow: 1,
                        fullHeight: !0,
                        padding: {
                            bottom: 1
                        }
                    }, n)), De.createElement(We.U, {
                        className: "chat-list__more-messages-placeholder",
                        position: We._2.Relative,
                        margin: {
                            x: 2
                        }
                    }, this.moreMessages()))
                }, t.prototype.moreMessages = function() {
                    return this.state.isAutoScrolling ? null : De.createElement(We.P, {
                        display: We.H.Flex,
                        justifyContent: We.T.Center,
                        alignItems: We.c.Center,
                        position: We._2.Absolute,
                        padding: .5,
                        attachBottom: !0,
                        fullWidth: !0
                    }, De.createElement("div", {
                        className: "chat-list__more-messages",
                        onClick: this.handleClickMoreMessages
                    }, Object(ke.d)("More messages below.", "ChatList")))
                }, t.prototype.scrollToBottom = function() {
                    this.scroll.scrollContent.scrollTop = this.scroll.scrollContent.scrollHeight
                }, t
            }(De.Component),
            Oa = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return be.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t = e.pubsub.messages.chatRichEmbedInfo;
                    t && this.props.pubsub.messages.chatRichEmbedInfo !== t && ke.n.apollo.client.writeQuery({
                        query: Na,
                        variables: {
                            slug: t.data.twitch_metadata.clip_metadata.slug
                        },
                        data: wa(t)
                    })
                }, t.prototype.render = function() {
                    return De.createElement(Ua, {
                        channelID: this.props.channelID,
                        badgeSets: this.props.badgeSets,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        channelLogin: this.props.channelLogin,
                        onPushMessage: this.props.onPushMessage,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isEmbedded: this.props.isEmbedded,
                        messages: this.props.messages,
                        showModerationIcons: this.props.showModerationIcons,
                        showTimestamps: this.props.showTimestamps,
                        currentUserLogin: this.props.currentUserLogin
                    })
                }, t
            }(De.Component),
            Ma = Object(Oe.compose)(Object(we.a)(le), Object(je.a)([{
                skip: function(e) {
                    return !e.channelID
                },
                topic: function(e) {
                    return e.channelID ? Object(He.h)(e.channelID) : ""
                },
                mapMessageTypesToProps: (ya = {}, ya[Re.c.StreamChatRoomChatRichEmbed] = "chatRichEmbedInfo", ya)
            }]))(Oa),
            Fa = (n(953), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.onClickConfirm = function() {
                        n.markRoomSeen(), n.setState({
                            showRules: !1
                        })
                    };
                    var i = n.getRoomsSeen();
                    return n.state = {
                        showRules: n.props.chatRules && n.props.chatRules.length > 0 && !i[n.props.channelLogin]
                    }, n
                }
                return be.__extends(t, e), t.prototype.render = function() {
                    return this.state.showRules ? De.createElement(We.U, {
                        className: "chat-rules",
                        position: We._2.Relative
                    }, De.createElement(We._17, {
                        border: !0,
                        background: We.m.Base,
                        margin: {
                            bottom: 1
                        }
                    }, De.createElement(We.U, {
                        padding: 1
                    }, De.createElement(We.U, {
                        margin: {
                            bottom: 1
                        }
                    }, De.createElement(We._21, {
                        type: We._26.H6
                    }, Object(ke.d)("Chat Rules:", "ChatRules"))), De.createElement(We.U, null, De.createElement("ul", null, this.props.chatRules.map(function(e, t) {
                        return De.createElement("li", {
                            key: t
                        }, e)
                    }))), De.createElement(We.U, {
                        margin: {
                            top: 1
                        },
                        display: We.H.Flex,
                        justifyContent: We.T.Center
                    }, De.createElement(We.u, {
                        size: We.x.Small,
                        onClick: this.onClickConfirm
                    }, Object(ke.d)("Ok, got it!", "ChatRules")))))) : null
                }, t.prototype.getRoomsSeen = function() {
                    return ke.k.get("chat_rules_shown", {})
                }, t.prototype.markRoomSeen = function() {
                    var e = this.getRoomsSeen();
                    e[this.props.channelLogin] = !0, ke.k.set("chat_rules_shown", e)
                }, t
            }(De.Component)),
            Pa = 3,
            xa = (n(954), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.usernameClickHandler = function(e) {
                        var n = e.currentTarget.getAttribute("data-username");
                        n && t.props.onUsernameClick(n, Mn.a.viewer_list, "")
                    }, t
                }
                return be.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = this.props,
                        n = t.viewers,
                        i = t.header,
                        a = n.map(function(t) {
                            return De.createElement("div", {
                                key: "chat-viewers-list-item-" + t
                            }, De.createElement("button", {
                                className: "chat-viewers-list__button",
                                "data-username": t,
                                onClick: e.usernameClickHandler
                            }, De.createElement(We._21, {
                                transform: We._25.Capitalize
                            }, t)))
                        });
                    return De.createElement(We.U, {
                        className: "chat-viewers-list",
                        padding: {
                            bottom: 2
                        }
                    }, De.createElement("div", null, De.createElement(We._21, {
                        transform: We._25.Uppercase
                    }, i)), a)
                }, t
            }(De.Component)),
            La = (n(955), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        filter: "",
                        inputValue: "",
                        filteredViewers: {},
                        viewersPage: 0,
                        renderedViewers: [],
                        isLoading: !1
                    }, t.filterTimeout = 0, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.loadMore = function() {
                        return be.__awaiter(t, void 0, void 0, function() {
                            var e = this;
                            return be.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return [4, new Promise(function(t) {
                                            e.setState(function(t) {
                                                return {
                                                    renderedViewers: e.getRenderedViewers(t.filteredViewers.viewers, t.viewersPage + 1),
                                                    viewersPage: t.viewersPage + 1
                                                }
                                            }, function() {
                                                t()
                                            })
                                        })];
                                    case 1:
                                        return t.sent(), [2]
                                }
                            })
                        })
                    }, t.getRenderedViewers = function(e, t) {
                        return e ? e.slice(0, 100 * (t || 1)) : []
                    }, t.handleFilter = function(e, n) {
                        var i = ue(n, e),
                            a = t.getRenderedViewers(i.viewers, 1);
                        t.scroll && t.scroll.scrollToTop(), t.setState({
                            filteredViewers: i,
                            isLoading: !1,
                            renderedViewers: a,
                            viewersPage: 1
                        })
                    }, t.handleFilterChange = function(e) {
                        var n = e.target.value,
                            i = n.toLowerCase().trim();
                        t.setState({
                            filter: i,
                            inputValue: n,
                            isLoading: !0
                        }), clearTimeout(t.filterTimeout), t.filterTimeout = setTimeout(function() {
                            t.handleFilter(i, t.props.viewers)
                        }, 350)
                    }, t
                }
                return be.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.handleFilter(this.state.filter, e.viewers)
                }, t.prototype.render = function() {
                    var e = this.props.onShowViewerCard,
                        t = [],
                        n = this.state.filteredViewers;
                    n.staff && n.staff.length > 0 && t.push(De.createElement(xa, {
                        key: "chat-viewers-list-staff",
                        header: Object(ke.d)("Staff", "ChatViewers"),
                        viewers: n.staff,
                        onUsernameClick: e
                    })), n.admins && n.admins.length > 0 && t.push(De.createElement(xa, {
                        key: "chat-viewers-list-admins",
                        header: Object(ke.d)("Admins", "ChatViewers"),
                        viewers: n.admins,
                        onUsernameClick: e
                    })), n.global_mods && n.global_mods.length > 0 && t.push(De.createElement(xa, {
                        key: "chat-viewers-list-global-mods",
                        header: Object(ke.d)("Global Moderators", "ChatViewers"),
                        viewers: n.global_mods,
                        onUsernameClick: e
                    })), n.moderators && n.moderators.length > 0 && t.push(De.createElement(xa, {
                        key: "chat-viewers-list-moderators",
                        header: Object(ke.d)("Moderators", "ChatViewers"),
                        viewers: n.moderators,
                        onUsernameClick: e
                    })), n.viewers && n.viewers.length > 0 && t.push(De.createElement(xa, {
                        key: "chat-viewers-list-viewers",
                        "data-test-selector": "chat-viewers-list-viewers",
                        header: Object(ke.d)("Viewers", "ChatViewers"),
                        viewers: this.state.renderedViewers,
                        onUsernameClick: e
                    }));
                    var i = this.props.isLoading || this.state.isLoading,
                        a = i && De.createElement(We.U, {
                            className: "chat-viewers__loading",
                            display: We.H.Flex,
                            alignItems: We.c.Center,
                            justifyContent: We.T.Center,
                            zIndex: We._38.Above,
                            position: We._2.Absolute,
                            attachTop: !0,
                            attachBottom: !0,
                            attachLeft: !0,
                            attachRight: !0
                        }, De.createElement(We.X, null));
                    return De.createElement(We.U, {
                        className: "chat-viewers__container",
                        fullWidth: !0,
                        fullHeight: !0,
                        flexShrink: 0,
                        zIndex: We._38.Default
                    }, De.createElement(We.U, {
                        className: "chat-viewers__pane",
                        display: We.H.Flex,
                        flexDirection: We.J.Column,
                        flexWrap: We.K.NoWrap,
                        position: We._2.Absolute,
                        attachBottom: !0,
                        attachLeft: !0,
                        attachRight: !0
                    }, De.createElement(We.U, {
                        className: "chat-viewers__header",
                        display: We.H.Flex,
                        justifyContent: We.T.Center,
                        alignItems: We.c.Center,
                        padding: {
                            y: 1
                        },
                        flexShrink: 0
                    }, De.createElement(We.U, {
                        position: We._2.Absolute,
                        attachLeft: !0,
                        margin: {
                            left: 1
                        }
                    }, De.createElement(We.v, {
                        icon: We._9.Close,
                        ariaLabel: Object(ke.d)("Close", "ChatViewers"),
                        "data-a-target": "chat-viewer-list",
                        onClick: this.props.closeViewersList
                    })), De.createElement("p", {
                        "data-a-target": "chat-viewers_header-channel-name"
                    }, Object(ke.d)("Viewer List", "ChatViewers"))), De.createElement(We.U, {
                        display: We.H.Flex,
                        flexDirection: We.J.Column,
                        flexWrap: We.K.NoWrap,
                        fullHeight: !0
                    }, De.createElement(We.U, {
                        className: "chat-viewers__filter",
                        margin: {
                            x: 2,
                            y: 1
                        }
                    }, De.createElement(We.Q, {
                        type: We.R.Search,
                        name: "viewers-filter",
                        placeholder: Object(ke.d)("Filter Viewers", "ChatViewers"),
                        readOnly: this.props.isLoading,
                        onChange: this.handleFilterChange,
                        value: this.state.inputValue
                    })), De.createElement(Ta.b, {
                        className: "chat-viewers__list",
                        scrollRef: this.saveScrollRef,
                        suppressScrollX: !0,
                        scrollContentClassName: "chat-viewers__scroll-container"
                    }, De.createElement(We.U, {
                        padding: {
                            x: 2
                        }
                    }, t, De.createElement(Ta.a, {
                        key: this.state.filter,
                        enabled: !i,
                        loadMore: this.loadMore
                    })))), a))
                }, t
            }(De.Component)),
            Aa = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        viewers: {},
                        viewerCount: 0,
                        isLoading: !1
                    }, n.logger = ke.i.withCategory("chat-viewers"), n
                }
                return be.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.props.channelLogin !== e.channelLogin && this.updateViewers(e.channelLogin)
                }, t.prototype.componentDidMount = function() {
                    return be.__awaiter(this, void 0, void 0, function() {
                        return be.__generator(this, function(e) {
                            return this.updateViewers(this.props.channelLogin), [2]
                        })
                    })
                }, t.prototype.render = function() {
                    return De.createElement(La, {
                        channelLogin: this.props.channelLogin,
                        closeViewersList: this.props.closeViewersList,
                        viewers: this.state.viewers,
                        viewerCount: this.state.viewerCount,
                        isLoading: this.state.isLoading,
                        onShowViewerCard: this.props.onShowViewerCard
                    })
                }, t.prototype.updateViewers = function(e) {
                    return be.__awaiter(this, void 0, void 0, function() {
                        var t, n, i;
                        return be.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return this.setState({
                                        isLoading: !0
                                    }), [4, ce(e)];
                                case 1:
                                    return t = a.sent(), n = t ? t.chatters : {}, i = t ? t.chatter_count : 0, ke.i.debug("Updated viewers list with " + i + " viewers"), this.setState({
                                        viewers: n,
                                        viewerCount: i,
                                        isLoading: !1
                                    }), [2]
                            }
                        })
                    })
                }, t
            }(De.Component),
            ja = Object(we.a)(null, de)(Aa),
            Ra = n(49),
            Ba = n(769),
            Ha = n(364),
            Va = n(365),
            Wa = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isIgnored: !1
                    }, t.ignoreUser = function() {
                        t.props.sendMessageToTMI(Object(Dt.h)(t.props.targetLogin)), t.setState({
                            isIgnored: !0
                        })
                    }, t.unignoreUser = function() {
                        t.props.sendMessageToTMI(Object(Dt.j)(t.props.targetLogin)), t.setState({
                            isIgnored: !1
                        })
                    }, t
                }
                return be.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.state.isIgnored ? De.createElement(We.v, {
                        icon: We._9.Ignore,
                        ariaLabel: Object(ke.d)("Unblock {displayName}", {
                            displayName: this.props.targetDisplayName
                        }, "ViewerCardIgnoreAction"),
                        onClick: this.unignoreUser,
                        overlay: !0
                    }) : De.createElement(We.v, {
                        icon: We._9.Ignore,
                        ariaLabel: Object(ke.d)("Block {displayName}", {
                            displayName: this.props.targetDisplayName
                        }, "ViewerCardIgnoreAction"),
                        onClick: this.ignoreUser,
                        overlay: !0
                    })
                }, t = be.__decorate([Object(fn.c)("ViewerCardIgnoreAction")], t)
            }(De.Component),
            Ga = Wa,
            qa = n(956),
            za = n(957),
            $a = n(958),
            Ja = "10 minutes",
            Ka = function(e, t, n) {
                var i = e.readQuery({
                    query: $a,
                    variables: {
                        targetUserID: n.userID,
                        channelID: n.channelID
                    }
                });
                t && t.data && (i.chatRoomBanStatus = {
                    isPermanent: !0,
                    __typename: "ChatRoomBanStatus"
                }), e.writeQuery({
                    query: $a,
                    variables: {
                        targetUserID: n.userID,
                        channelID: n.channelID
                    },
                    data: i
                })
            },
            Qa = function(e, t) {
                var n = e.readQuery({
                        query: $a,
                        variables: {
                            targetUserID: t.userID,
                            channelID: t.channelID
                        }
                    }),
                    i = be.__assign({}, n, {
                        chatRoomBanStatus: null
                    });
                e.writeQuery({
                    query: $a,
                    variables: {
                        targetUserID: t.userID,
                        channelID: t.channelID
                    },
                    data: i
                })
            },
            Ya = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onBanClick = function() {
                        var e = t.props,
                            n = e.banUser,
                            i = e.channelID,
                            a = e.userLogin;
                        n(Object(Be.a)({
                            channelID: i,
                            bannedUserLogin: a
                        }))
                    }, t.onTimeoutClick = function() {
                        var e = t.props,
                            n = e.banUser,
                            i = e.channelID,
                            a = e.userLogin;
                        n(Object(Be.a)({
                            channelID: i,
                            bannedUserLogin: a,
                            expiresIn: Ja
                        }))
                    }, t.onUnbanClick = function() {
                        var e = t.props,
                            n = e.unbanUser,
                            i = e.channelID,
                            a = e.userLogin;
                        n(Object(Be.a)({
                            channelID: i,
                            bannedUserLogin: a
                        }))
                    }, t
                }
                return be.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return De.createElement(We.U, {
                        display: We.H.InlineFlex
                    }, this.getContent())
                }, t.prototype.getContent = function() {
                    return this.props.data.loading || this.props.data.error ? [this.renderBanAction(!0), this.renderTimeoutAction(!0)] : this.props.data.chatRoomBanStatus ? this.props.data.chatRoomBanStatus.isPermanent ? [this.renderUnbanAction(), this.renderTimeoutAction(!0)] : [this.renderBanAction(), this.renderUntimeoutAction()] : [this.renderBanAction(), this.renderTimeoutAction()]
                }, t.prototype.renderTimeoutAction = function(e) {
                    void 0 === e && (e = !1);
                    var t = Object(ke.d)("Timeout User", "ViewerCardModActions");
                    return De.createElement(We._30, {
                        key: "Timeout",
                        label: t,
                        direction: We._32.Top,
                        align: We._31.Center
                    }, De.createElement(We.U, {
                        padding: {
                            right: 1
                        }
                    }, De.createElement(We.v, {
                        icon: We._9.Timeout,
                        disabled: e,
                        ariaLabel: t,
                        onClick: this.onTimeoutClick
                    })))
                }, t.prototype.renderUntimeoutAction = function() {
                    var e = Object(ke.d)("Untimeout User", "ViewerCardModActions");
                    return De.createElement(We._30, {
                        key: "Untimeout",
                        label: e,
                        direction: We._32.Top,
                        align: We._31.Center
                    }, De.createElement(We.U, {
                        padding: {
                            right: 1
                        }
                    }, De.createElement(We.v, {
                        icon: We._9.FollowCheck,
                        ariaLabel: e,
                        onClick: this.onUnbanClick
                    })))
                }, t.prototype.renderBanAction = function(e) {
                    void 0 === e && (e = !1);
                    var t = Object(ke.d)("Ban User", "ViewerCardModActions");
                    return De.createElement(We._30, {
                        key: "Ban",
                        label: t,
                        direction: We._32.Top,
                        align: We._31.Center
                    }, De.createElement(We.U, {
                        padding: {
                            right: 1,
                            left: 1
                        }
                    }, De.createElement(We.v, {
                        icon: We._9.Ban,
                        disabled: e,
                        ariaLabel: t,
                        onClick: this.onBanClick
                    })))
                }, t.prototype.renderUnbanAction = function() {
                    var e = Object(ke.d)("Unban User", "ViewerCardModActions");
                    return De.createElement(We._30, {
                        key: "Unban",
                        label: e,
                        direction: We._32.Top,
                        align: We._31.Center
                    }, De.createElement(We.U, {
                        padding: {
                            right: 1,
                            left: 1
                        }
                    }, De.createElement(We.v, {
                        icon: We._9.FollowCheck,
                        ariaLabel: e,
                        onClick: this.onUnbanClick
                    })))
                }, t = be.__decorate([Object(fn.c)("ViewerCardModActions"), Object(Ie.a)($a, {
                    options: function(e) {
                        return {
                            variables: {
                                targetUserID: e.userID,
                                channelID: e.channelID
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                }), Object(Ie.a)(qa, {
                    name: "banUser",
                    options: function(e) {
                        return {
                            update: function(t, n) {
                                Ka(t, n, e)
                            }
                        }
                    }
                }), Object(Ie.a)(za, {
                    name: "unbanUser",
                    options: function(e) {
                        return {
                            update: function(t) {
                                Qa(t, e)
                            }
                        }
                    }
                })], t)
            }(De.Component),
            Xa = Ya,
            Za = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.modUser = function() {
                        n.props.sendMessageToTMI(Object(Dt.i)(n.props.targetLogin)), n.setState({
                            isModerator: !0
                        })
                    }, n.unmodUser = function() {
                        n.props.sendMessageToTMI(Object(Dt.k)(n.props.targetLogin)), n.setState({
                            isModerator: !1
                        })
                    }, n.state = {
                        isModerator: !1
                    }, n
                }
                return be.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.state.isModerator) {
                        var e = Object(ke.d)("Unmod User", "ViewerCardOwnerActions");
                        return De.createElement(We._30, {
                            label: e,
                            direction: We._32.Top,
                            align: We._31.Center
                        }, De.createElement(We.U, {
                            key: "OP",
                            padding: {
                                right: 1
                            }
                        }, De.createElement(We.v, {
                            icon: We._9.FollowCheck,
                            ariaLabel: e,
                            onClick: this.unmodUser
                        })))
                    }
                    var e = Object(ke.d)("Mod User", "ViewerCardOwnerActions");
                    return De.createElement(We._30, {
                        label: e,
                        direction: We._32.Top,
                        align: We._31.Center
                    }, De.createElement(We.U, {
                        key: "OP",
                        padding: {
                            right: 1
                        }
                    }, De.createElement(We.v, {
                        icon: We._9.OP,
                        ariaLabel: e,
                        onClick: this.modUser
                    })))
                }, t = be.__decorate([Object(fn.c)("ViewerCardOwnerActions")], t)
            }(De.Component),
            er = Za,
            tr = n(366),
            nr = n(759),
            ir = n(797),
            ar = n(780),
            rr = n(246),
            sr = (n(959), n(960));
        ! function(e) {
            e[e.ActionsPage = 0] = "ActionsPage", e[e.SubGiftSelectPage = 1] = "SubGiftSelectPage"
        }(Ca || (Ca = {}));
        var or = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        currentPage: Ca.ActionsPage
                    }, t.getContent = function() {
                        if (t.props.data.loading || t.props.data.error) return t.renderHideButton();
                        var e = {
                                backgroundImage: "url(" + (t.props.data.targetUser.bannerImageURL || Ha)
                            },
                            n = t.state.currentPage === Ca.ActionsPage ? t.renderActions() : t.renderSubGiftSelect();
                        return De.createElement(We.U, null, De.createElement(We._17, {
                            elevation: 1,
                            border: !0
                        }, De.createElement("div", {
                            className: "viewer-card",
                            style: e
                        }, De.createElement(We.U, {
                            display: We.H.Flex,
                            flexDirection: We.J.Column,
                            fullHeight: !0,
                            fullWidth: !0,
                            className: "viewer-card__overlay"
                        }, De.createElement(We.U, {
                            padding: 1,
                            alignItems: We.c.Start,
                            justifyContent: We.T.Start,
                            display: We.H.Flex,
                            flexDirection: We.J.Row,
                            textAlign: We._22.Center,
                            fullWidth: !0,
                            flexGrow: 1
                        }, De.createElement(We.l, {
                            imageSrc: t.props.data.targetUser.profileImageURL,
                            size: 50,
                            imageAlt: t.props.data.targetUser.displayName
                        }), De.createElement(We.U, {
                            alignItems: We.c.Center,
                            margin: 1,
                            className: "viewer-card__display-name",
                            ellipsis: !0
                        }, De.createElement(We._21, {
                            type: We._26.H4
                        }, De.createElement("a", {
                            className: "viewer-card__display-name__link color-text-pill",
                            href: "/" + t.props.targetLogin,
                            target: "_blank"
                        }, t.props.data.targetUser.displayName))), t.renderHideButton(), t.renderIgnoreButton()))), n))
                    }, t.toggleGiftPage = function() {
                        var e = t.state.currentPage === Ca.ActionsPage ? Ca.SubGiftSelectPage : Ca.ActionsPage;
                        e === Ca.SubGiftSelectPage && t.trackGiftEvent(), t.setState({
                            currentPage: e
                        })
                    }, t.onWhisperButtonClick = function() {
                        t.props.hideViewerCard()
                    }, t.handleReportUserClick = function() {
                        t.props.showReportUserModal({
                            reportContext: {
                                contentType: t.reportContentTypeFromSourceType(t.props.sourceType),
                                targetUserID: t.props.data.targetUser.id,
                                contentID: t.props.sourceID,
                                extra: JSON.stringify({
                                    channel_id: t.props.channelID.toString()
                                })
                            },
                            title: Object(ke.d)("Report {channelDisplayName}", {
                                channelDisplayName: t.props.data.targetUser.displayName
                            }, "ReportUserModalTitle")
                        })
                    }, t.trackBuyGiftSubEvent = function(e) {
                        Object(rr.b)(be.__assign({}, e, {
                            action: rr.a.BuyGiftSub,
                            channelID: t.props.channelID || "",
                            channelLogin: t.props.data.channelUser.login || "",
                            isMenuOpen: null,
                            hasSubCredit: null,
                            sub_location: "viewer_card",
                            modal: !1,
                            showPrimeContent: !0,
                            giftRecipient: t.props.data.targetUser.login
                        }))
                    }, t.trackGiftEvent = function() {
                        Object(rr.b)({
                            action: rr.a.GiftASub,
                            channelID: t.props.channelID || "",
                            channelLogin: t.props.data.channelUser.login || "",
                            isMenuOpen: null,
                            hasSubCredit: null,
                            sub_location: "viewer_card",
                            modal: !1,
                            showPrimeContent: !0,
                            giftRecipient: t.props.data.targetUser.login
                        })
                    }, t
                }
                return be.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.props.data.error ? null : this.getContent()
                }, t.prototype.renderIgnoreButton = function() {
                    var e = this.props.data.currentUser;
                    return this.props.isEmbedded || e && e.login === this.props.targetLogin ? null : De.createElement(We.U, {
                        key: "Ignore",
                        position: We._2.Absolute,
                        attachRight: !0,
                        margin: {
                            top: 3,
                            right: .5
                        }
                    }, De.createElement(Ga, {
                        targetDisplayName: this.props.data.targetUser.displayName,
                        targetLogin: this.props.targetLogin,
                        sendMessageToTMI: this.props.sendMessageToTMI
                    }))
                }, t.prototype.renderHideButton = function() {
                    return De.createElement(We.U, {
                        className: "viewer-card__hide",
                        position: We._2.Absolute,
                        attachRight: !0,
                        attachTop: !0,
                        margin: {
                            top: .5,
                            right: .5
                        }
                    }, De.createElement(We.v, {
                        icon: We._9.Close,
                        onClick: this.props.hideViewerCard,
                        ariaLabel: Object(ke.d)("Hide", "ViewerCard"),
                        overlay: !0
                    }))
                }, t.prototype.renderActions = function() {
                    var e = this.props.data.currentUser;
                    return this.props.isEmbedded || e && e.login === this.props.targetLogin ? null : De.createElement(We._17, {
                        className: "viewer-card__actions",
                        "data-test-selector": "viewer-card-actions",
                        background: We.m.Base,
                        attachBottom: !0,
                        display: We.H.Flex,
                        flexDirection: We.J.Row,
                        justifyContent: We.T.Between,
                        fullWidth: !0,
                        flexGrow: 0
                    }, De.createElement(We.U, {
                        display: We.H.Flex,
                        flexDirection: We.J.Row,
                        fullWidth: !0,
                        margin: {
                            left: .5,
                            right: 1,
                            bottom: 1,
                            top: .5
                        }
                    }, this.renderSocialActions()), De.createElement(We._17, {
                        display: We.H.Flex,
                        background: We.m.Alt2,
                        fullWidth: !0
                    }, De.createElement(We.U, {
                        display: We.H.InlineFlex,
                        flexDirection: We.J.Row
                    }, this.renderChatActions())))
                }, t.prototype.renderSocialActions = function() {
                    var e = null;
                    return this.isModeratorOrHigher && (e = De.createElement(ut.a, {
                        key: "MoreOptionsButton"
                    }, De.createElement(We.v, {
                        type: We.w.Hollow,
                        ariaLabel: Object(ke.d)("More options", "ViewerCard"),
                        icon: We._9.More,
                        "data-a-target": "viewer-card-more-button"
                    }), De.createElement(We.p, {
                        direction: We.q.BottomRight,
                        "data-a-target": "viewer-card-more-balloon"
                    }, De.createElement(We.U, {
                        padding: {
                            y: 1
                        }
                    }, De.createElement(We.S, {
                        onClick: this.handleReportUserClick,
                        "data-a-target": "viewer-card-report-button"
                    }, De.createElement(We.U, {
                        padding: {
                            x: 1
                        }
                    }, Object(ke.d)("Report {user}", {
                        user: this.props.targetLogin
                    }, "ViewerCard"))))))), [De.createElement(We.U, {
                        key: "FriendButton",
                        padding: {
                            top: .5,
                            left: .5
                        }
                    }, De.createElement(tr.a, {
                        channelID: this.props.data.targetUser.id
                    })), this.renderWhisperButton(), this.renderGiftSubscriptionButton(), De.createElement(We.U, {
                        key: "ReportButton",
                        padding: {
                            top: .5,
                            left: .5
                        }
                    }, e)]
                }, t.prototype.renderWhisperButton = function() {
                    if (!this.props.data.currentUser || !this.props.data.targetUser) return null;
                    var e = Object(kn.a)(this.props.data.currentUser.id, this.props.data.targetUser.id);
                    return De.createElement(We.U, {
                        key: "WhisperButton",
                        padding: {
                            top: .5,
                            left: .5
                        }
                    }, De.createElement(Va.a, {
                        onClick: this.onWhisperButtonClick,
                        threadID: e
                    }))
                }, t.prototype.renderGiftSubscriptionButton = function() {
                    return !this.props.data.channelUser || !this.props.data.channelUser.subscriptionProducts || this.props.data.channelUser.subscriptionProducts.length < 1 ? null : De.createElement(We.U, {
                        key: "GiftButton",
                        padding: {
                            top: .5,
                            left: .5
                        }
                    }, De.createElement(ir.a, {
                        onClick: this.toggleGiftPage,
                        subProductId: this.props.data.channelUser.subscriptionProducts[0].id,
                        giftRecipient: this.props.targetLogin
                    }))
                }, t.prototype.renderSubGiftSelect = function() {
                    return De.createElement(We._17, {
                        background: We.m.Base,
                        attachBottom: !0,
                        display: We.H.Flex,
                        flexDirection: We.J.Row,
                        justifyContent: We.T.Between,
                        fullWidth: !0,
                        flexGrow: 0,
                        padding: 2
                    }, De.createElement(ar.a, {
                        onBack: this.toggleGiftPage,
                        channelDisplayName: this.props.data.channelUser.displayName,
                        subscriptionProducts: this.props.data.channelUser.subscriptionProducts,
                        giftRecipient: this.props.data.targetUser.login,
                        reportSubMenuAction: this.trackBuyGiftSubEvent
                    }))
                }, t.prototype.renderChatActions = function() {
                    var e = [];
                    return this.isModeratorOrHigher() && e.push(De.createElement(Xa, {
                        key: "ModActions",
                        channelID: this.props.data.channelUser.id,
                        userID: this.props.data.targetUser.id,
                        userLogin: this.props.targetLogin
                    })), this.isOwnerOrHigher() && e.push(De.createElement(er, {
                        key: "OwnerActions",
                        sendMessageToTMI: this.props.sendMessageToTMI,
                        targetLogin: this.props.targetLogin
                    })), e
                }, t.prototype.isOwnerOrHigher = function() {
                    var e = this.props.data;
                    return !(e.loading || e.error || !e.currentUser) && (e.currentUser.roles.isGlobalMod || e.currentUser.roles.isSiteAdmin || e.currentUser.roles.isStaff || this.isOwner())
                }, t.prototype.isModeratorOrHigher = function() {
                    return this.isOwnerOrHigher() || this.props.data.channelUser.self && this.props.data.channelUser.self.isModerator
                }, t.prototype.isOwner = function() {
                    var e = this.props.data;
                    return !(e.loading || e.error || !e.currentUser) && e.currentUser.id === e.channelUser.id
                }, t.prototype.reportContentTypeFromSourceType = function(e) {
                    switch (e) {
                        case Mn.a.chat_message:
                            return nr.a.Chat;
                        case Mn.a.recent_raids:
                            return nr.a.Raid;
                        case Mn.a.viewer_list:
                        default:
                            return nr.a.User
                    }
                }, t = be.__decorate([Object(fn.c)("ViewerCard"), Object(Ie.a)(sr, {
                    options: function(e) {
                        return {
                            variables: {
                                targetLogin: e.targetLogin,
                                channelID: e.channelID
                            }
                        }
                    }
                })], t)
            }(De.Component),
            lr = or,
            cr = (n(961), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return be.__extends(t, e), t.prototype.componentWillUnmount = function() {
                    this.props.hideViewerCard()
                }, t.prototype.render = function() {
                    var e = null;
                    return this.props.viewerCardOptions && (e = De.createElement(We.U, {
                        className: "viewer-card-layer",
                        position: We._2.Relative
                    }, De.createElement(lr, {
                        isEmbedded: this.props.isEmbedded,
                        targetLogin: this.props.viewerCardOptions.targetLogin,
                        hideViewerCard: this.props.hideViewerCard,
                        sendMessageToTMI: this.props.onSendMessage,
                        channelID: this.props.channelID,
                        showReportUserModal: this.props.showReportUserModal,
                        sourceType: this.props.viewerCardOptions.sourceType,
                        sourceID: this.props.viewerCardOptions.sourceID
                    }))), e
                }, t
            }(De.Component)),
            ur = Object(we.a)(pe, me)(cr),
            dr = n(900),
            pr = "disable_crate_ftue",
            mr = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        showNotification: !0
                    }, t.clearCrateNotification = function() {
                        ke.k.set(pr, !0), t.setState({
                            showNotification: !1
                        })
                    }, t.closeCrateNotification = function() {
                        t.clearCrateNotification(), Object(Ai.d)({
                            action: Ai.a.Close,
                            type: Ai.c.Ftue,
                            channelId: t.props.channelID,
                            userId: t.props.userID
                        })
                    }, t.crateNotificationTimeout = function() {
                        t.clearCrateNotification(), Object(Ai.d)({
                            action: Ai.a.Timeout,
                            type: Ai.c.Ftue,
                            channelId: t.props.channelID,
                            userId: t.props.userID
                        })
                    }, t.isFtueDisabled = function() {
                        var e = ke.b.get("crate_trickster_launch", "off"),
                            n = ke.k.get(pr, !1);
                        return "staff" === e ? n || !t.props.isStaff : "on" !== e || n
                    }, t.trackEvent = function() {
                        Object(Ai.d)({
                            action: Ai.a.LearnMore,
                            type: Ai.c.Ftue,
                            channelId: t.props.channelID,
                            userId: t.props.userID
                        })
                    }, t
                }
                return be.__extends(t, e), t.prototype.render = function() {
                    if (!this.state.showNotification || this.isFtueDisabled() || !this.props.bitsConfig) return null;
                    var e = De.createElement(We.U, null, De.createElement("figure", {
                            className: "crates-intro-banner"
                        }, De.createElement("img", {
                            src: xi.a
                        })), De.createElement(We.U, null, De.createElement(We._21, {
                            color: We.F.Alt2,
                            fontSize: We.L.Size6
                        }, Object(ke.d)("For a limited time, Cheer at least {numBits, number} Bits and get a Halloween Crate with one of {numEmotes, number} temporary zombie emotes. Collect all {numEmotes, number} to permanently unlock Zombie Lord Kappa!", {
                            numBits: Li.b,
                            numEmotes: Li.a
                        }, "Crates")))),
                        t = De.createElement(We.U, {
                            margin: {
                                top: 2,
                                bottom: 1
                            }
                        }, De.createElement(We.u, {
                            "data-test-selector": "crate-notification__learn-more-button",
                            onClick: this.trackEvent,
                            linkTo: "https://blog.twitch.tv/bring-the-zombie-apocalypse-to-twitch-7a5bf4ecff42",
                            targetBlank: !0
                        }, Object(ke.d)("Learn More", "Crates")));
                    return Object(Ai.d)({
                        action: Ai.a.View,
                        type: Ai.c.Ftue,
                        channelId: this.props.channelID,
                        userId: this.props.userID
                    }), De.createElement(We.U, {
                        className: "crate-notification",
                        position: We._2.Relative
                    }, De.createElement(dr.a, {
                        onClearCrateNotification: this.closeCrateNotification,
                        onCrateNotifactionTimeout: this.crateNotificationTimeout,
                        countdownTimeSec: 20,
                        title: Object(ke.d)("Halloween Twitch Crates", "Crates"),
                        cardBody: e,
                        cardFooter: t
                    }))
                }, t
            }(De.Component),
            hr = mr,
            gr = n(962),
            fr = (n(963), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.closeViewersList = function() {
                        n.setState({
                            showViewersList: !1
                        })
                    }, n.showViewersList = function() {
                        n.setState({
                            showViewersList: !0
                        })
                    }, n.onChatInputFocus = function() {
                        n.props.authToken && !n.state.showChatRules && n.setState({
                            showChatRules: !0
                        })
                    }, n.state = {
                        showChatRules: !1,
                        showViewersList: !1
                    }, n
                }
                return be.__extends(t, e), t.prototype.render = function() {
                    var e = Bt.parse(this.props.location.search),
                        t = void 0 !== e.darkpopout,
                        n = (l = {}, l[Object(Cn.b)(Me.a.Dark)] = t, l);
                    if (this.props.isHidden) return De.createElement(We._17, {
                        alignItems: We.c.Center,
                        background: We.m.Alt,
                        className: Ae("chat-room__pane", n),
                        display: We.H.Flex,
                        flexDirection: We.J.Column,
                        fullHeight: !0,
                        fullWidth: !0,
                        justifyContent: We.T.Center,
                        color: We.F.Base,
                        position: We._2.Relative
                    }, De.createElement(We.U, {
                        margin: {
                            bottom: 1
                        }
                    }, De.createElement(We._21, {
                        fontSize: We.L.Size5
                    }, Object(ke.d)("Chat is hidden.", "ChatRoom"))), De.createElement(We.u, {
                        onClick: this.props.onChatUnhide,
                        "data-a-target": "show-chat-button"
                    }, Object(ke.d)("Show Chat", "ChatRoom")));
                    var i = this.props.bitsConfig && this.props.firstPageLoaded && De.createElement(ci, {
                            badgeData: this.props.badgeSets,
                            bitsConfig: this.props.bitsConfig,
                            blockLinks: this.props.blockLinks,
                            channelID: this.props.channelID,
                            currentUserDisplayName: this.props.currentUserDisplayName,
                            currentUserLogin: this.props.currentUserLogin
                        }),
                        a = this.state.showViewersList && De.createElement(ja, {
                            channelLogin: this.props.channelLogin,
                            closeViewersList: this.closeViewersList
                        }),
                        r = this.props.bitsConfig && De.createElement(hr, {
                            bitsConfig: this.props.bitsConfig,
                            isStaff: this.props.isStaff,
                            userID: this.props.userID,
                            channelID: this.props.channelID
                        }),
                        s = !!this.props.authToken && !this.props.isEmbedded,
                        o = null;
                    return this.state.showChatRules && (o = De.createElement(We.U, {
                        padding: {
                            x: 2
                        }
                    }, De.createElement(Fa, {
                        chatRules: this.props.chatRules,
                        channelLogin: this.props.channelLogin
                    }))), De.createElement(We.U, {
                        className: Ae("chat-room__container", n),
                        "data-a-target": this.props.theme === Me.a.Dark ? "chat-theme-dark" : "chat-theme-light",
                        flexShrink: 1,
                        flexGrow: 1,
                        display: We.H.Flex,
                        flexDirection: We.J.Column,
                        overflow: We.Y.Hidden,
                        fullWidth: !0,
                        fullHeight: !0
                    }, r, De.createElement(We._17, {
                        className: "chat-room__pane",
                        display: We.H.Flex,
                        flexDirection: We.J.Column,
                        flexWrap: We.K.NoWrap,
                        position: We._2.Relative,
                        flexGrow: 1,
                        fullHeight: !0,
                        overflow: We.Y.Hidden,
                        color: We.F.Base
                    }, De.createElement(We.U, {
                        className: "chat-room__header",
                        display: We.H.Flex,
                        justifyContent: We.T.Center,
                        alignItems: We.c.Center,
                        padding: {
                            y: 1
                        },
                        flexShrink: 0
                    }, De.createElement("p", {
                        "data-a-target": "chat-room__header-channel-name"
                    }, this.props.channelLogin)), this.props.chatRoomHeader, i, De.createElement(Ma, {
                        badgeSets: this.props.badgeSets,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        currentUserLogin: this.props.currentUserLogin,
                        isEmbedded: this.props.isEmbedded,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        onPushMessage: this.props.onPushMessage
                    }), De.createElement(We.U, {
                        className: "chat-room__viewer-card",
                        position: We._2.Absolute
                    }, De.createElement(ur, {
                        isEmbedded: this.props.isEmbedded,
                        onSendMessage: this.props.onSendMessage,
                        channelID: this.props.channelID
                    })), De.createElement(We.U, {
                        className: "chat-room__notifications",
                        position: We._2.Absolute,
                        zIndex: We._38.Default,
                        fullWidth: !0
                    }, this.props.children), o, this.props.isOwnChannel && !this.props.isEmbedded && De.createElement(wn, {
                        hostedChannelLogin: this.props.hostedChannelLogin
                    }), a, De.createElement(Ci, {
                        emotes: this.props.emotes,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        displayName: this.props.channelDisplayName,
                        onChatInputFocus: this.onChatInputFocus,
                        onSendMessage: this.props.onSendMessage,
                        chatMembers: this.props.chatMembers,
                        suggestionSource: gi.Chat
                    }, De.createElement(Ea, {
                        authToken: this.props.authToken,
                        bitsConfig: s ? this.props.bitsConfig : void 0,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        emotes: this.props.emotes,
                        firstPageLoaded: this.props.firstPageLoaded,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isEmbedded: this.props.isEmbedded,
                        isHostMode: this.props.isHostMode,
                        isPopout: this.props.isPopout,
                        onChatCommand: this.props.onSendMessage,
                        badgeSets: this.props.badgeSets,
                        userBadges: this.props.userBadges,
                        showViewersList: this.showViewersList,
                        raidReceived: this.props.raidReceived
                    }))));
                    var l
                }, t = be.__decorate([Object(Ie.a)(gr, {
                    props: function(e) {
                        var t = new Tn.c([], [], e.ownProps.channelLogin);
                        return e.data && e.data.badges && e.data.user && e.data.user.broadcastBadges && (t = new Tn.c(e.data.badges, e.data.user.broadcastBadges, e.ownProps.channelLogin)), {
                            badgeSets: t
                        }
                    },
                    options: function(e) {
                        return {
                            name: "data",
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                })], t)
            }(De.Component)),
            br = Object(gt.e)(fr),
            vr = "(?:\\W|^)",
            kr = "(?:$|\\W)",
            Sr = 150,
            yr = "PowerUpL DarkMode PowerUpR",
            Cr = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        activeChatters: [],
                        hasEnteredChatRoom: !1,
                        hostedChannelLogin: null,
                        raidReceived: !1,
                        userBadges: null
                    }, n.sendMessage = function(e) {
                        if (!e || 0 === e.length || !n.props.authToken) return !1;
                        var t = Object(Dt.m)(e);
                        if (t) {
                            if (!t.recipientLogin || !t.body) return !1;
                            if (n.props.isEmbedded || n.props.isPopout) return n.pushMessage(Object(Kt.a)(Object(ke.d)("Please use the whisper window for whispers.", "ChatRoom"))), !1;
                            if (t.recipientLogin === n.props.userLogin) return n.pushMessage(Object(Kt.a)(Object(ke.d)("You cannot whisper to yourself.", "ChatRoom"))), !0;
                            n.sendWhisper(t.recipientLogin, t.body)
                        } else n.parseOutgoingMessage(e), n.chatService.sendMessage(e);
                        return !0
                    }, n.sendWhisper = function(e, t) {
                        return be.__awaiter(n, void 0, void 0, function() {
                            var n, i, a, r;
                            return be.__generator(this, function(s) {
                                switch (s.label) {
                                    case 0:
                                        if (!this.props.userID) return [2];
                                        s.label = 1;
                                    case 1:
                                        return s.trys.push([1, 3, , 4]), [4, Q(e)];
                                    case 2:
                                        return n = s.sent(), [3, 4];
                                    case 3:
                                        return i = s.sent(), ke.i.warn(i, "Failed to fetch user targeted by whisper command.", {
                                            recipientLogin: e
                                        }), [3, 4];
                                    case 4:
                                        if (!n || !n.data.user.id) return this.pushMessage(Object(Kt.a)(Object(ke.d)("No user matching that login.", "ChatRoom"))), [2];
                                        this.userEmotes || (this.userEmotes = Object(dn.a)(this.props.emoteSets)), s.label = 5;
                                    case 5:
                                        return s.trys.push([5, 7, , 8]), [4, Object(vn.a)({
                                            currentUserID: this.props.userID,
                                            emotes: this.userEmotes || {},
                                            message: t,
                                            recipientUserID: n.data.user.id
                                        })];
                                    case 6:
                                        return s.sent(), [3, 8];
                                    case 7:
                                        return a = s.sent(), ke.i.error(a, "Failed to send whisper using whisper command.", {
                                            currentUserID: this.props.userID,
                                            recipientUserID: n.data.user.id
                                        }), [2];
                                    case 8:
                                        return r = Object(kn.a)(this.props.userID, n.data.user.id), this.props.onThreadSelect(r), [2]
                                }
                            })
                        })
                    }, n.pushMessage = function(e) {
                        n.chatBuffer.consumeChatEvent(e), n.activeChatters.consumeChatEvent(e)
                    }, n.onChatMessage = function(e) {
                        n.chatBuffer.consumeChatEvent(e), n.activeChatters.consumeChatEvent(e), n.onChatEvent(e)
                    }, n.connect = function(e) {
                        n.setState({
                            hasEnteredChatRoom: !1
                        }), e.userID && e.channelID && (n.moderationActionService = new mn(e.channelID, e.userID, n.chatBuffer.consumeChatEvent)), n.syncBufferHandle = requestAnimationFrame(n.syncBufferedMessages), n.chatService.join()
                    }, n.disconnect = function() {
                        n.syncBufferHandle && cancelAnimationFrame(n.syncBufferHandle), n.moderationActionService && n.moderationActionService.unsubscribe(), n.chatService.part()
                    }, n.updateEmoteSets = function(e) {
                        n.chatService.updateEmotes(e), n.userEmotes && (n.userEmotes = Object(dn.a)(e))
                    }, n.updateBitsConfig = function(e) {
                        void 0 === e && (e = xe.a), n.chatService.updateBitsConfig(e)
                    }, n.updateBlockLinks = function(e) {
                        n.chatService.updateBlockLinks(e)
                    }, n.syncBufferedMessages = function() {
                        n.chatBuffer && n.chatBuffer.isDirty && n.props.onChatMessagesUpdate(n.chatBuffer.toArray()), n.activeChatters.isDirty && n.setState({
                            activeChatters: n.activeChatters.getActiveChatters()
                        }), n.syncBufferHandle = requestAnimationFrame(n.syncBufferedMessages)
                    }, n.onChatEvent = function(e) {
                        switch (e.type) {
                            case Qt.a.Hosting:
                                n.hostingHandler(e.hostedChannel);
                                break;
                            case Qt.a.Unhost:
                                n.hostingHandler(null);
                                break;
                            case Qt.a.Connected:
                                n.onConnected();
                                break;
                            case Qt.a.RoomState:
                                n.roomStateHandler(e.state);
                                break;
                            case Qt.a.BadgesUpdated:
                                n.onBadgesUpdated(e);
                                break;
                            case Qt.a.Raid:
                                n.setState({
                                    raidReceived: !0
                                })
                        }
                    }, n.hostingHandler = function(e) {
                        n.setState({
                            hostedChannelLogin: e
                        }), n.props.onHostingChange && n.props.onHostingChange(e)
                    }, n.roomStateHandler = function(e) {
                        e.slowMode ? n.props.onSlowModeEnable() : n.props.onSlowModeDisable(), void 0 !== e.followersOnly && (e.followersOnly ? (n.props.onFollowerModeDurationChange(e.followersOnlyRequirement), n.props.onFollowerModeEnable()) : n.props.onFollowerModeDisable()), void 0 !== e.subsOnly && (e.subsOnly ? n.props.onSubsOnlyModeEnable() : n.props.onSubsOnlyModeDisable())
                    }, n.onConnected = function() {
                        ke.i.debug("Connected"), n.props.latencyTracking.reportCustomEvent(n.chatConnected), n.state.hasEnteredChatRoom || Object(gn.b)({
                            channelLogin: n.props.channelLogin,
                            isHostMode: !!n.state.hostedChannelLogin
                        }), n.setState({
                            hasEnteredChatRoom: !0
                        }), n.props.latencyTracking.reportInteractive()
                    }, n.createOutgoingTokenMatchers = function(e) {
                        n.outgoingTokenMatchers = e.map(function(e) {
                            return {
                                token: e,
                                regex: new RegExp("" + vr + e + kr)
                            }
                        })
                    }, n.parseOutgoingMessage = function(e) {
                        n.outgoingTokenMatchers.forEach(function(t) {
                            t.regex.test(e) && n.onOutgoingTokenMatch(t.token, e)
                        })
                    }, n.onOutgoingTokenMatch = function(e, t) {
                        switch (e) {
                            case yr:
                                var i = n.props.theme === Me.a.Light ? Me.a.Dark : Me.a.Light;
                                n.props.onThemeChange(i);
                                break;
                            default:
                                return
                        }
                    }, n.onBadgesUpdated = function(e) {
                        n.setState({
                            userBadges: e.badges
                        })
                    }, n.chatService = new pn(t.userLogin, t.channelLogin, n.onChatMessage), n.logger = ke.i.withCategory("chat-room"), n.registerCustomLatencyEvents(), n.createOutgoingTokenMatchers([yr]), n.userEmotes = null, n.activeChatters = new Zt(t.channelID), n.chatBuffer = new sn(Sr), n.chatBuffer.setBlockedUsers(t.blockedUsers), t.userLogin && n.chatBuffer.setCurrentUserLogin(t.userLogin), t.userID && n.activeChatters.setCurrentUserID(t.userID), n
                }
                return be.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.connect(this.props), this.props.emoteSets && this.updateEmoteSets(this.props.emoteSets), this.props.bitsConfig && this.updateBitsConfig(this.props.bitsConfig), this.updateBlockLinks(this.props.blockLinks), this.chatService.disabled && this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillUnmount = function() {
                    this.disconnect(), this.chatBuffer && this.chatBuffer.shutdown(), this.props.onChatMessagesReset()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this.props,
                        n = e.isHidden && !t.isHidden || !e.rightColumnExpanded && t.rightColumnExpanded,
                        i = !1;
                    n ? this.disconnect() : (i = e.channelLogin !== t.channelLogin || e.userLogin !== t.userLogin || e.authToken !== t.authToken || !e.isHidden && t.isHidden || e.rightColumnExpanded && !t.rightColumnExpanded) && (this.logger.debug("Reconnecting..."), this.registerCustomLatencyEvents(), this.connect(e), this.setState({
                        hostedChannelLogin: null
                    })), (e.emoteSets !== t.emoteSets || i) && (this.logger.debug("Updating emote sets", {
                        shouldReconnect: i,
                        prevSets: t.emoteSets.slice(0),
                        nextSet: e.emoteSets.slice(0)
                    }), this.updateEmoteSets(e.emoteSets)), (e.bitsConfig !== t.bitsConfig || i) && this.updateBitsConfig(e.bitsConfig), (e.blockLinks !== t.blockLinks || i) && this.updateBlockLinks(e.blockLinks);
                    var a = e.isCurrentUserModerator ? 0 : e.chatDelayMS;
                    this.chatBuffer.setDelay(a), e.userLogin && t.userLogin !== e.userLogin && this.chatBuffer.setCurrentUserLogin(e.userLogin), e.userID && t.userID !== e.userID && this.activeChatters.setCurrentUserID(e.userID), t.channelID !== e.channelID && (this.activeChatters = new Zt(e.channelID), this.setState({
                        activeChatters: []
                    })), t.blockedUsers !== e.blockedUsers && this.chatBuffer.setBlockedUsers(e.blockedUsers), !this.moderationActionService && e.userID && e.channelID && (this.moderationActionService = new mn(e.channelID, e.userID, this.chatBuffer.consumeChatEvent))
                }, t.prototype.render = function() {
                    return De.createElement(br, {
                        authToken: this.props.authToken,
                        bitsConfig: this.props.bitsConfig,
                        blockLinks: this.props.blockLinks,
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        chatMembers: this.state.activeChatters,
                        chatRoomHeader: De.createElement(ht, {
                            channelLogin: this.props.channelLogin,
                            sendMessage: this.sendMessage
                        }),
                        chatRules: this.props.chatRules,
                        currentUserDisplayName: this.props.userDisplayName,
                        currentUserLogin: this.props.userLogin,
                        emotes: this.props.emoteSets,
                        firstPageLoaded: this.props.firstPageLoaded,
                        hostedChannelLogin: this.state.hostedChannelLogin,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isEmbedded: this.props.isEmbedded,
                        isHidden: this.props.isHidden,
                        isHostMode: !!this.state.hostedChannelLogin,
                        isOwnChannel: this.isOwnChannel,
                        isPopout: this.props.isPopout,
                        onChatUnhide: this.props.onChatUnhide,
                        onPushMessage: this.pushMessage,
                        onSendMessage: this.sendMessage,
                        raidReceived: this.state.raidReceived,
                        theme: this.props.theme,
                        isStaff: this.props.isStaff,
                        userBadges: this.state.userBadges,
                        userID: this.props.userID
                    }, this.props.firstPageLoaded && this.props.authToken && !this.props.isEmbedded && De.createElement(lt, {
                        authToken: this.props.authToken,
                        channelDisplayName: this.props.channelDisplayName,
                        channelLogin: this.props.channelLogin,
                        bitsConfig: this.props.bitsConfig
                    }), this.props.hostedChannelDisplayName && !this.props.isPopout && De.createElement(ct, {
                        hostedChannelDisplayName: this.props.hostedChannelDisplayName || "",
                        hostedChannelLogin: this.state.hostedChannelLogin || ""
                    }), this.props.firstPageLoaded && !this.props.isEmbedded && De.createElement(Jt, {
                        channelID: this.props.channelID,
                        send: this.sendMessage
                    }))
                }, t.prototype.registerCustomLatencyEvents = function() {
                    this.logger.debug("Registering custom latency events"), this.props.latencyTracking.resetCustomEvents("Chat"), this.chatInitialized = this.registerInitEvent(), this.chatConnected = this.registerConnectedEvent(), this.props.latencyTracking.reportCustomEvent(this.chatInitialized)
                }, t.prototype.registerInitEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent("Chat", "chat-init", "Init", 3e3)
                }, t.prototype.registerConnectedEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent("Chat", "chat-connected", "Connected", 4e3)
                }, Object.defineProperty(t.prototype, "isOwnChannel", {
                    get: function() {
                        return this.props.userID === this.props.channelID
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(De.Component),
            _r = Object(Ue.compose)(Object(fn.c)("ChatRoom"), Object(Ie.a)(yn, {
                props: function(e) {
                    var t;
                    return e.data && e.data.user && e.data.user.cheer && (t = Object(Le.a)(e.data.user.cheer.emotes)), {
                        bitsConfig: t
                    }
                },
                options: function(e) {
                    return {
                        name: "data",
                        variables: {
                            channelLogin: e.channelLogin
                        }
                    }
                }
            }), function() {
                return Object(Ie.a)(Yt, {
                    props: function(e) {
                        return e.data && !e.data.loading && !e.data.error && e.data.currentUser && e.data.currentUser.blockedUsers ? {
                            blockedUsers: e.data.currentUser.blockedUsers.map(function(e) {
                                return e.id
                            })
                        } : {
                            blockedUsers: []
                        }
                    },
                    skip: function(e) {
                        return !e.authToken
                    }
                })
            }(), Object(we.a)(ge, he))(Cr),
            Er = n(964),
            Nr = n(965),
            wr = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return be.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this.props.channelData.channel,
                        t = this.props.userData && this.props.userData.user,
                        n = !1,
                        i = !1;
                    if (t && e && e.self) {
                        var a = t.login === e.login,
                            r = t.roles.isGlobalMod || t.roles.isSiteAdmin || t.roles.isStaff;
                        n = e.self.isModerator || r || a, i = t.roles.isStaff
                    }
                    var s = e && e.chatSettings && e.chatSettings.rules,
                        o = e && e.chatSettings && e.chatSettings.chatDelayMs,
                        l = !(!e || !e.chatSettings) && e.chatSettings.blockLinks;
                    return De.createElement(_r, {
                        key: this.props.channelLogin,
                        authToken: this.props.user && this.props.user.authToken,
                        blockLinks: l,
                        channelDisplayName: e && e.displayName,
                        channelID: e && e.id,
                        channelLogin: this.props.channelLogin,
                        chatRules: s,
                        chatDelayMS: o,
                        clientID: this.props.clientID,
                        isCurrentUserModerator: n,
                        isEmbedded: !!this.props.isEmbedded,
                        isPopout: !!this.props.isPopout,
                        hostedChannelDisplayName: this.props.hostedChannelDisplayName,
                        onHostingChange: this.props.onHostingChange,
                        userDisplayName: this.props.user && this.props.user.displayName,
                        userID: this.props.user && this.props.user.id.toString(),
                        userLogin: this.props.user && this.props.user.login,
                        isStaff: i
                    })
                }, t = be.__decorate([Object(Ie.a)(Er, {
                    name: "channelData",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                }), Object(Ie.a)(Nr, {
                    name: "userData",
                    skip: function(e) {
                        return !e.user
                    }
                }), Object(fn.c)("Chat")], t)
            }(De.Component),
            Tr = wr,
            Dr = Object(we.a)(fe)(Tr);
        n.d(t, "a", function() {
            return Dr
        })
    },
    909: function(e, t) {},
    910: function(e, t) {},
    911: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "DismissPurchaseToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DismissPurchaseTokenInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "dismissPurchaseToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 122
            }
        };
        n.loc.source = {
            body: "mutation DismissPurchaseToken($input:DismissPurchaseTokenInput!) {\n  dismissPurchaseToken(input:$input) {\n    token\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    912: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_SharePurchase_ChannelData"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isCommerceRevShareEnabled"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "purchaseTokens"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "title"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: {
                                                    kind: "Name",
                                                    value: "imageThumbnail"
                                                },
                                                name: {
                                                    kind: "Name",
                                                    value: "imageURL"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "width"
                                                    },
                                                    value: {
                                                        kind: "IntValue",
                                                        value: "40"
                                                    }
                                                }],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "imageURL"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "emoteSets"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "emoteSet"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "emotes"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "token"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "badges"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "badge"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "badge"
                                                                },
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "bits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "quantity"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "inGameContents"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "imageURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "30"
                                                            }
                                                        }],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 721
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\n\nquery Chat_SharePurchase_ChannelData($channelLogin: String!) {\n  user(login: $channelLogin) {\n    id\n    isCommerceRevShareEnabled\n    self {\n      purchaseTokens {\n        id\n        title\n        imageThumbnail: imageURL(width: 40)\n        imageURL\n        emoteSets {\n          id\n          emoteSet {\n            id\n            emotes {\n              id\n              token\n            }\n          }\n        }\n        badges {\n          id\n          badge{\n            ...badge\n          }\n        }\n        bits {\n          id\n          quantity\n        }\n        inGameContents {\n          id\n          imageURL(width: 30)\n        }\n      }\n    }\n  }\n}\n',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n(779).definitions)), e.exports = i
    },
    913: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "SharePurchaseTokenInChat"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SharePurchaseTokenInChatInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "sharePurchaseTokenInChat"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 134
            }
        };
        n.loc.source = {
            body: "mutation SharePurchaseTokenInChat($input:SharePurchaseTokenInChatInput!) {\n  sharePurchaseTokenInChat(input:$input) {\n    token\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    914: function(e, t) {},
    915: function(e, t) {},
    916: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_ShareResub_ChannelData"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "resubNotification"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "months"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 195
            }
        };
        n.loc.source = {
            body: "query Chat_ShareResub_ChannelData($channelLogin: String!) {\n  user(login: $channelLogin) {\n    id\n    self {\n      resubNotification {\n        id\n        months\n        token\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    917: function(e, t) {},
    918: function(e, t) {},
    919: function(e, t) {},
    920: function(e, t) {},
    921: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RaidNotification_Channels"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "sourceChannelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetChannelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "sourceChannel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "sourceChannelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "targetChannel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetChannelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 290
            }
        };
        n.loc.source = {
            body: "query RaidNotification_Channels($sourceChannelID: ID!, $targetChannelID: ID!) {\n  sourceChannel: user(id: $sourceChannelID) {\n    id\n    displayName\n    profileImageURL(width: 70)\n  }\n  targetChannel: user(id: $targetChannelID) {\n    id\n    displayName\n    profileImageURL(width: 70)\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    922: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RaidNotification_User"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 52
            }
        };
        n.loc.source = {
            body: "query RaidNotification_User {\n  user {\n    id\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    923: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_BlockedUsers"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "blockedUsers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 89
            }
        };
        n.loc.source = {
            body: "query Chat_BlockedUsers {\n  currentUser {\n    id\n    blockedUsers {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    924: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatWhisperCommand_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 86
            }
        };
        n.loc.source = {
            body: "query ChatWhisperCommand_User($login: String!) {\n  user(login: $login) {\n    id\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    925: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatList_Bits"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 163
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/chat/models/cheer-fragment.gql"\n\nquery ChatList_Bits($channelLogin: String!) {\n  user(login: $channelLogin) {\n    id\n    ...cheer\n  }\n}\n',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n(804).definitions)), e.exports = i
    },
    926: function(e, t) {},
    927: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatRoom_AutohostPrompt"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 161
            }
        };
        n.loc.source = {
            body: "query ChatRoom_AutohostPrompt($login: String!) {\n  currentUser {\n    id\n  }\n\n  user(login: $login) {\n    id\n    displayName\n    profileImageURL(width: 70)\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    928: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_UnbanUserFromChatRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnbanUserFromChatRoomInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "unbanUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "createdAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 154
            }
        };
        n.loc.source = {
            body: "mutation Chat_UnbanUserFromChatRoom($input: UnbanUserFromChatRoomInput!) {\n  unbanUserFromChatRoom(input: $input) {\n    ban {\n      createdAt\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    929: function(e, t) {},
    930: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_AllowRejectedChatMessage"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "AllowRejectedChatMessageInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "allowRejectedChatMessage"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 160
            }
        };
        n.loc.source = {
            body: "mutation Chat_AllowRejectedChatMessage($input: AllowRejectedChatMessageInput!) {\n  allowRejectedChatMessage(input: $input) {\n    message {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    931: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_DenyRejectedChatMessage"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DenyRejectedChatMessageInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "denyRejectedChatMessage"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 157
            }
        };
        n.loc.source = {
            body: "mutation Chat_DenyRejectedChatMessage($input: DenyRejectedChatMessageInput!) {\n  denyRejectedChatMessage(input: $input) {\n    message {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    932: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "IncomingRaidLine_Channel"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "50"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 157
            }
        };
        n.loc.source = {
            body: "query IncomingRaidLine_Channel($channelLogin: String!) {\n  channel: user(login: $channelLogin) {\n    id\n    displayName\n    profileImageURL(width: 50)\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    933: function(e, t) {},
    934: function(e, t) {},
    935: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "PinnedCheer_Cheers"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "top"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "chatMessage"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "recent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "chatMessage"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "recentTimeoutMs"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "isRecentEnabled"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "isTopEnabled"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "recentTimeoutMs"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 381
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/chat/models/chat-message-fragment.gql"\n\nquery PinnedCheer_Cheers($channelID: ID!) {\n  user(id: $channelID) {\n    id\n    cheer {\n      id\n      top {\n        ...chatMessage\n      }\n      recent {\n        ...chatMessage\n      }\n      recentTimeoutMs\n      settings {\n        isRecentEnabled\n        isTopEnabled\n        recentTimeoutMs\n      }\n    }\n  }\n}\n',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n(936).definitions)), e.exports = i
    },
    936: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "chatMessage"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "ChatMessage"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "authorName"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "authorColor"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "author"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "body"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "content"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "emotes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "embeddedEmote"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "badges"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "setID"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "version"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "bitsUsed"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 288
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/chat/models/embedded-emote-fragment.gql"\n\nfragment chatMessage on ChatMessage {\n  id\n  authorName\n  authorColor\n  author {\n    id\n    login\n  }\n  body {\n    content\n    emotes {\n      ...embeddedEmote\n    }\n  }\n  badges {\n    setID\n    version\n  }\n  bitsUsed\n}\n',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n(879).definitions)), e.exports = i
    },
    937: function(e, t) {},
    938: function(e, t) {},
    939: function(e, t) {},
    940: function(e, t) {},
    941: function(e, t) {},
    942: function(e, t) {},
    943: function(e, t) {},
    944: function(e, t) {},
    945: function(e, t) {},
    946: function(e, t) {},
    947: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "BitsCard_Bits"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "name"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "emoteMinimumBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cheerMinimumBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "recentMinimumBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "event"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "bitsBadge"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "totalBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "nextBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "progress"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "current"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "badge"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "next"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "badge"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "tournament"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "teams"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 615
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\n\nquery BitsCard_Bits($name: ID!) {\n  currentUser {\n    id\n    bitsBalance\n    login\n  }\n  user(id: $name) {\n    id\n    displayName\n    cheer {\n      id\n      settings {\n        emoteMinimumBits\n        cheerMinimumBits\n        recentMinimumBits\n        event\n      }\n    }\n    self {\n      bitsBadge {\n        id\n        totalBits\n        nextBits\n        progress\n        current {\n          ...badge\n        }\n        next {\n          ...badge\n        }\n      }\n    }\n    tournament {\n      id\n      teams {\n        id\n        name\n      }\n    }\n  }\n}\n',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n(779).definitions)), e.exports = i
    },
    948: function(e, t) {},
    949: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Core_Services_Spade_ChatEvent_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isPartner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 171
            }
        };
        n.loc.source = {
            body: "query Core_Services_Spade_ChatEvent_User($id: ID!) {\n  user(id: $id) {\n    id\n    isPartner\n    stream {\n      id\n      game {\n        id\n        name\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    950: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatInput"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isEmbedded"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isPartner"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "isEmbedded"
                                            }
                                        }
                                    }]
                                }],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "emoteMinimumBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cheerMinimumBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "event"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 308
            }
        };
        n.loc.source = {
            body: "query ChatInput($channelLogin: String!, $isEmbedded: Boolean!) {\n  currentUser {\n    id\n    bitsBalance\n    isPartner @include(if: $isEmbedded)\n  }\n  user(login: $channelLogin) {\n    id\n    cheer {\n      id\n      settings {\n        emoteMinimumBits\n        cheerMinimumBits\n        event\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    951: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ChatInput_SendCheer"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SendCheerInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "sendCheer"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "currentUser"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "bitsBalance"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 149
            }
        };
        n.loc.source = {
            body: "mutation ChatInput_SendCheer($input: SendCheerInput!) {\n  sendCheer(input: $input) {\n    id\n    currentUser {\n      id\n      bitsBalance\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    952: function(e, t) {},
    953: function(e, t) {},
    954: function(e, t) {},
    955: function(e, t) {},
    956: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ViewerCardModActions_BanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BanUserFromChatRoomInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "banUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 154
            }
        };
        n.loc.source = {
            body: "mutation ViewerCardModActions_BanUser($input: BanUserFromChatRoomInput!) {\n  banUserFromChatRoom(input: $input) {\n    ban {\n      isPermanent\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    957: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ViewerCardModActions_UnbanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnbanUserFromChatRoomInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "unbanUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 160
            }
        };
        n.loc.source = {
            body: "mutation ViewerCardModActions_UnbanUser($input: UnbanUserFromChatRoomInput!) {\n  unbanUserFromChatRoom(input: $input) {\n    ban {\n      isPermanent\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    958: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ViewerCardModActions"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetUserID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetUserID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 202
            }
        };
        n.loc.source = {
            body: "query ViewerCardModActions($targetUserID: ID!, $channelID: ID!) {\n  # This is currently backwards on the server\n  chatRoomBanStatus(channelID: $targetUserID, userID: $channelID) {\n    isPermanent\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    959: function(e, t) {},
    960: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ViewerCard"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "targetUser"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bannerImageURL"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channelUser"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "price"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emoteSetID"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isModerator"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isGlobalMod"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 521
            }
        };
        n.loc.source = {
            body: "query ViewerCard($targetLogin: String!, $channelID: ID!) {\n  targetUser: user(login: $targetLogin) {\n    id\n    login\n    bannerImageURL\n    displayName\n    profileImageURL(width: 70)\n  }\n  channelUser: user(id: $channelID) {\n    id\n    login\n    displayName,\n    subscriptionProducts {\n      id\n      price\n      url\n      emoteSetID\n      emotes {\n        id\n      }\n    }\n    self {\n      isModerator\n    }\n  }\n  currentUser {\n    login\n    id\n    roles {\n      isSiteAdmin\n      isStaff\n      isGlobalMod\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    961: function(e, t) {},
    962: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatList_Badges"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "badges"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "badge"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "broadcastBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "badge"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 225
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\n\nquery ChatList_Badges($channelLogin: String!) {\n  badges {\n    ...badge\n  }\n  user(login: $channelLogin) {\n    id\n    broadcastBadges {\n      ...badge\n    }\n  }\n}\n',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n(779).definitions)), e.exports = i
    },
    963: function(e, t) {},
    964: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_ChannelData"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "chatSettings"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "blockLinks"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "rules"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "chatDelayMs"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isModerator"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 235
            }
        };
        n.loc.source = {
            body: "query Chat_ChannelData($channelLogin: String!) {\n  channel: user(login: $channelLogin) {\n    id\n    login\n    displayName\n    chatSettings {\n      blockLinks\n      rules\n      chatDelayMs\n    }\n    self {\n      isModerator\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    965: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_UserData"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isGlobalMod"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 138
            }
        };
        n.loc.source = {
            body: "query Chat_UserData {\n  user {\n    id\n    displayName\n    login\n    roles {\n      isGlobalMod\n      isSiteAdmin\n      isStaff\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    966: function(e, t, n) {
        "use strict";
        var i = n(830);
        n.d(t, "a", function() {
            return i.a
        }), n.d(t, "b", function() {
            return i.b
        })
    }
});
//# sourceMappingURL=pages.channel-events-89f71e982ffadacc39a0e3d7c6591fe7.js.map