(window.webpackJsonp = window.webpackJsonp || []).push([
    [60], {
        "+PZR": function(e, t, n) {
            "use strict";
            var i = function(e, t) {
                    var n = "https://www.twitch.tv/communities/{communityName}".replace("{communityName}", e);
                    return 'community report (<a href="{link}">{link}</a>) {description}'.replace(/{link}/g, n).replace(/{description}/, t)
                },
                r = n("/7QA");

            function a() {
                return [{
                    id: "other",
                    text: Object(r.d)("Other Terms of Service Violation", "ReportUserModal")
                }]
            }
            n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return a
            })
        },
        "+pBb": function(e, t, n) {
            "use strict";
            n.d(t, "d", function() {
                return i
            }), n.d(t, "e", function() {
                return r
            }), n.d(t, "i", function() {
                return a
            }), n.d(t, "j", function() {
                return o
            }), n.d(t, "q", function() {
                return s
            }), n.d(t, "c", function() {
                return l
            }), n.d(t, "b", function() {
                return c
            }), n.d(t, "g", function() {
                return d
            }), n.d(t, "h", function() {
                return u
            }), n.d(t, "f", function() {
                return p
            }), n.d(t, "l", function() {
                return m
            }), n.d(t, "k", function() {
                return h
            }), n.d(t, "n", function() {
                return f
            }), n.d(t, "m", function() {
                return g
            }), n.d(t, "r", function() {
                return v
            }), n.d(t, "t", function() {
                return b
            }), n.d(t, "s", function() {
                return k
            }), n.d(t, "w", function() {
                return y
            }), n.d(t, "v", function() {
                return S
            }), n.d(t, "a", function() {
                return C
            }), n.d(t, "o", function() {
                return E
            }), n.d(t, "p", function() {
                return _
            }), n.d(t, "u", function() {
                return w
            }), n.d(t, "J", function() {
                return T
            }), n.d(t, "E", function() {
                return O
            }), n.d(t, "K", function() {
                return N
            }), n.d(t, "F", function() {
                return I
            }), n.d(t, "O", function() {
                return D
            }), n.d(t, "L", function() {
                return R
            }), n.d(t, "H", function() {
                return x
            }), n.d(t, "C", function() {
                return F
            }), n.d(t, "I", function() {
                return P
            }), n.d(t, "D", function() {
                return V
            }), n.d(t, "G", function() {
                return L
            }), n.d(t, "B", function() {
                return M
            }), n.d(t, "y", function() {
                return j
            }), n.d(t, "A", function() {
                return A
            }), n.d(t, "M", function() {
                return U
            }), n.d(t, "z", function() {
                return W
            }), n.d(t, "P", function() {
                return B
            }), n.d(t, "S", function() {
                return G
            }), n.d(t, "x", function() {
                return z
            }), n.d(t, "N", function() {
                return H
            }), n.d(t, "R", function() {
                return q
            }), n.d(t, "Q", function() {
                return Q
            });
            var i = "chat.CHAT_HIDDEN",
                r = "chat.CHAT_SHOWN",
                a = "chat.EMOTE_SETS_UPDATED",
                o = "chat.FOLLOWER_MODE_DURATION_PREFERENCE_CHANGED",
                s = "chat.ROOM_STATE_UPDATED",
                l = "chat.AUTOMOD_ACTIONS_ENABLED",
                c = "chat.AUTOMOD_ACTIONS_DISABLED",
                d = "chat.EMOTE_PICKER_CLOSED",
                u = "chat.EMOTE_PICKER_OPENED",
                p = "chat.CLOSE_CHAT_RULES",
                m = "chat.MODERATION_ACTIONS_ENABLED",
                h = "chat.MODERATION_ACTIONS_DISABLED",
                f = "chat.MOD_ICONS_ENABLED",
                g = "chat.MOD_ICONS_DISABLED",
                v = "chat.SHOW_CHAT_RULES",
                b = "chat.TIMESTAMPS_ENABLED",
                k = "chat.TIMESTAMPS_DISABLED",
                y = "chat.USERNAME_CONTRAST_ENABLED",
                S = "chat.USERNAME_CONTRAST_DISABLED",
                C = "chat.ADD_COMMAND",
                E = "chat.REMOVE_COMMAND",
                _ = "chat.RENDER_SENT_CHAT_MESSAGE",
                w = "chat.UNHIDE_IGNORED_COMMAND";

            function T() {
                return {
                    type: b
                }
            }

            function O() {
                return {
                    type: k
                }
            }

            function N() {
                return {
                    type: y
                }
            }

            function I() {
                return {
                    type: S
                }
            }

            function D() {
                return {
                    type: r
                }
            }

            function R() {
                return {
                    type: i
                }
            }

            function x() {
                return {
                    type: l
                }
            }

            function F() {
                return {
                    type: c
                }
            }

            function P() {
                return {
                    type: m
                }
            }

            function V() {
                return {
                    type: h
                }
            }

            function L() {
                return {
                    type: f
                }
            }

            function M() {
                return {
                    type: g
                }
            }

            function j(e, t) {
                return {
                    type: o,
                    channelLogin: e,
                    duration: t
                }
            }

            function A() {
                return {
                    type: d
                }
            }

            function U() {
                return {
                    type: u
                }
            }

            function W() {
                return {
                    type: p
                }
            }

            function B() {
                return {
                    type: v
                }
            }

            function G(e) {
                return {
                    type: s,
                    roomState: e
                }
            }

            function z(e, t) {
                return {
                    type: C,
                    command: e.toLowerCase(),
                    handler: t
                }
            }

            function H(e, t) {
                return {
                    type: E,
                    command: e.toLowerCase(),
                    handler: t
                }
            }

            function q(e) {
                return {
                    type: _,
                    customEvent: e
                }
            }

            function Q(e) {
                return {
                    type: w,
                    userID: e
                }
            }
        },
        "+qcr": function(e, t, n) {
            "use strict";
            n.d(t, "c", function() {
                return o
            }), n.d(t, "a", function() {
                return s
            }), n.d(t, "b", function() {
                return l
            }), n.d(t, "e", function() {
                return c
            }), n.d(t, "f", function() {
                return d
            }), n.d(t, "d", function() {
                return u
            });
            var i = n("q1tI"),
                r = n("OUrp"),
                a = n("eFQ3");

            function o(e) {
                switch (e.type) {
                    case r.b.Stream:
                        return i.createElement(a.b, {
                            channelLogin: e.id,
                            vodID: "",
                            showChannelInfoOnHover: e.showChannelInfoOnHover,
                            disableTheatreButton: !0,
                            playerTypeOverride: a.a.Frontpage,
                            onInit: e.onPlayerInit,
                            onDestroy: e.onPlayerDestroy,
                            onPauseToggled: e.onPauseToggled,
                            paused: e.paused
                        });
                    case r.b.Vod:
                        return i.createElement(a.b, {
                            channelLogin: "",
                            vodID: e.id,
                            disableTheatreButton: !0,
                            playerTypeOverride: a.a.Frontpage,
                            onInit: e.onPlayerInit,
                            onDestroy: e.onPlayerDestroy,
                            onVideoTimeChange: e.onVideoTimeChange,
                            onPauseToggled: e.onPauseToggled,
                            paused: e.paused
                        });
                    default:
                        return null
                }
            }

            function s(e) {
                var t = [],
                    n = e.featuredStreams;
                if (!n) return t;
                for (var i = 0, a = n; i < a.length; i++) {
                    var o = a[i];
                    if (o) {
                        var s = "",
                            l = null;
                        o.stream && o.stream.game && null !== o.stream.game.name && (s = o.stream.game.name), o.stream && o.stream.broadcaster && (l = o.stream.broadcaster);
                        var c = {
                            broadcaster: {
                                displayName: l && l.displayName ? l.displayName : "",
                                id: l && l.id ? l.id : "",
                                login: l && l.login ? l.login : "",
                                profileImageURL: l && l.profileImageURL ? l.profileImageURL : ""
                            },
                            content: {
                                id: l && l.login ? l.login : "",
                                gameName: s,
                                previewImageURL: o.stream && o.stream.previewImageURL ? o.stream.previewImageURL : "",
                                type: r.b.Stream,
                                subType: o.stream && o.stream.type ? o.stream.type : "",
                                viewersCount: o.stream && o.stream.viewersCount ? o.stream.viewersCount : 0
                            },
                            description: "",
                            imageURL: o.imageURL || "",
                            isScheduled: o.isScheduled || !1,
                            isSponsored: o.isSponsored || !1,
                            priorityLevel: o.priorityLevel || 10,
                            title: o.title || ""
                        };
                        t.push(c)
                    }
                }
                return t
            }

            function l(e) {
                return {
                    medium: "twitch_home",
                    content: e ? "carousel_promo" : "carousel_backfill"
                }
            }

            function c(e, t) {
                return t >= 0 ? t % e : (t % e + e) % e
            }

            function d(e, t) {
                return Math.floor(t / e)
            }

            function u(e) {
                return e && /^https:\/\/[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\(\)\*\+,;=.]+$/.test(e)
            }
        },
        "/HY+": function(e, t, n) {
            "use strict";
            var i = n("dAHa"),
                r = n("mrSG"),
                a = n("q1tI"),
                o = n("/MKj"),
                s = n("fvjX"),
                l = n("cZKs"),
                c = n("aCAx"),
                d = n("GnwI"),
                u = n("Ue10"),
                p = (n("Oy4H"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleClose = function(e, n) {
                            t.props.closeModal(), t.props.onClose && t.props.onClose(e, n)
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        return a.createElement(u.xb, {
                            className: "reporting-modal__container",
                            background: u.r.Base,
                            padding: {
                                x: 2,
                                y: 3
                            }
                        }, a.createElement(i.b, {
                            onClose: this.handleClose,
                            reportContext: this.props.reportContext,
                            title: this.props.title,
                            defaultDescription: this.props.defaultDescription
                        }), a.createElement(l.a, null))
                    }, t
                }(a.Component));
            var m = Object(s.compose)(Object(d.c)("ReportUserModal"), Object(o.connect)(null, function(e) {
                return Object(s.bindActionCreators)({
                    closeModal: c.c
                }, e)
            }))(p);
            n.d(t, !1, function() {}), n.d(t, !1, function() {
                return i.c
            }), n.d(t, !1, function() {
                return i.a
            }), n.d(t, !1, function() {}), n.d(t, !1, function() {
                return i.b
            }), n.d(t, !1, function() {
                return p
            }), n.d(t, "a", function() {
                return m
            })
        },
        "/Kya": function(e, t, n) {},
        "0/CX": function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Feed_Embed"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "url"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "embed"
                            },
                            name: {
                                kind: "Name",
                                value: "feedEmbed"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "url"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "url"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "feedItemClip"
                                    },
                                    directives: []
                                }, {
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "feedItemVideo"
                                    },
                                    directives: []
                                }, {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                        kind: "NamedType",
                                        name: {
                                            kind: "Name",
                                            value: "PhotoOEmbed"
                                        }
                                    },
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "title"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "inputURL"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "providerName"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "authorName"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "thumbnail"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "url"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                        kind: "NamedType",
                                        name: {
                                            kind: "Name",
                                            value: "VideoOEmbed"
                                        }
                                    },
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "title"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "inputURL"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "providerName"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "authorName"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "thumbnail"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "url"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "html"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 382
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/feed/models/clip-fragment.gql"\n#import "twilight/features/feed/models/video-fragment.gql"\nquery Feed_Embed($url: String!) {\nembed: feedEmbed(url: $url) {\n...feedItemClip\n...feedItemVideo\n... on PhotoOEmbed {\ntitle\ninputURL\nproviderName\nauthorName\nthumbnail {\nurl\n}\n}\n... on VideoOEmbed {\ntitle\ninputURL\nproviderName\nauthorName\nthumbnail {\nurl\n}\nhtml\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};

            function a(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }
            i.definitions = i.definitions.concat(a(n("H4B0").definitions)), i.definitions = i.definitions.concat(a(n("poSz").definitions)), e.exports = i
        },
        "0D4T": function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("oJmH"),
                o = n("/MKj"),
                s = n("fvjX"),
                l = n("/7QA"),
                c = n("lZCe"),
                d = n("ZS2+"),
                u = n("yR8l"),
                p = n("x7UT"),
                m = n("Mj6i"),
                h = n("UUve"),
                f = n("1/iK"),
                g = n("aCAx"),
                v = n("D7An"),
                b = n("kRBY"),
                k = n("+pBb"),
                y = n("OpME"),
                S = n("cpJf"),
                C = n("W8Fi"),
                E = n("0WFu"),
                _ = n("GnwI"),
                w = n("br9A"),
                T = n("TSYQ"),
                O = n("8/mp"),
                N = n("8Ad5");

            function I(e) {
                return e.charCode === N.a.Enter || e.charCode === N.a.Space
            }
            var D = n("2xye"),
                R = n("7SjK"),
                x = n("4rCz"),
                F = n("Ue10"),
                P = (n("/Kya"), function(e) {
                    var t = {
                            "emote-picker__tab": !0
                        },
                        n = null,
                        a = null;
                    if (e.channelTabVisible) {
                        var o = T(i.__assign({}, t, {
                            "emote-picker__tab--active": e.channelTabEnabled && e.channelTabSelected,
                            "emote-picker__tab--disabled": !e.channelTabEnabled
                        }));
                        n = r.createElement(F.Na, {
                            padding: {
                                x: 1
                            }
                        }, r.createElement("div", {
                            key: "ChannelTabLink",
                            id: "emote-picker__channel",
                            className: o,
                            onClick: e.channelTabEnabled ? e.selectChannelTab : void 0,
                            onKeyPress: e.channelTabEnabled ? e.selectChannelTabKeypress : void 0,
                            "data-a-target": "emote-channel-tab",
                            tabIndex: 0
                        }, r.createElement("span", null, Object(x.d)("Channel", "EmotePicker"))))
                    }
                    if (e.allTabVisible) {
                        var s = T(i.__assign({}, t, {
                            "emote-picker__tab--active": !(e.channelTabSelected && e.channelTabEnabled)
                        }));
                        a = r.createElement(F.Na, {
                            padding: {
                                x: 1
                            }
                        }, r.createElement("div", {
                            key: "allTabLink",
                            id: "emote-picker__all",
                            className: s,
                            onClick: e.selectAllTab,
                            onKeyPress: e.selectAllTabKeypress,
                            "data-a-target": "emote-all-tab",
                            tabIndex: 0
                        }, r.createElement("span", null, Object(x.d)("All", "EmotePicker"))))
                    }
                    return r.createElement(F.xb, {
                        background: F.r.Base,
                        borderTop: !0,
                        className: "emote-picker__tabs-container"
                    }, n, a)
                }),
                V = n("DnOo"),
                L = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = [];
                        if (this.props.subscribeTexts)
                            for (var t = 0; t <= this.props.plan.level; t++) {
                                var n = this.props.subscribeTexts[t];
                                n && (t < this.props.plan.level ? (e.push(r.createElement("span", {
                                    key: "upsell-predicate:" + t
                                }, n)), e.push(r.createElement("span", {
                                    key: "upsell-plus:" + t
                                }, " + "))) : this.props.plan.level > 0 ? e.push(r.createElement("strong", {
                                    key: "upsell-strong-end:" + this.props.plan.level
                                }, n)) : e.push(r.createElement("span", {
                                    key: "upsell-end:" + t
                                }, n)))
                            }
                        if (!this.props.plan.emoteSetID) return null;
                        var i = {
                                id: this.props.plan.emoteSetID,
                                emotes: this.props.plan.emotes || []
                            },
                            a = {};
                        if (this.props.plan.tier) {
                            var o = Object(E.a)(this.props.plan.tier);
                            null === o && (o = 1), a.purchase = Object(l.d)("Tier { tierNum }", {
                                tierNum: o
                            }, "assembleSubscribeTexts")
                        }
                        return r.createElement(F.Va, {
                            className: "emote-picker-plan-upsell",
                            display: F.W.Flex,
                            flexDirection: F.Y.Column,
                            alignItems: F.f.Center,
                            margin: {
                                bottom: 1
                            }
                        }, r.createElement(R.a, {
                            emotes: i.emotes,
                            locked: !0
                        }), r.createElement(F.Va, {
                            margin: 1,
                            alignItems: F.f.Center
                        }, e), r.createElement(V.a, {
                            isSubbedToTier: !1,
                            tierPrice: a.purchase || "",
                            handleSubAction: this.props.handleSubAction,
                            productName: this.props.plan.name,
                            url: this.props.plan.url,
                            isEsportChannel: this.props.isEsportChannel
                        }))
                    }, t
                }(r.Component),
                M = (n("JGCS"), function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.channelTabSelectionKeypress = function(e) {
                            I(e) && n.selectChannelTab(e)
                        }, n.allTabSelectionKeypress = function(e) {
                            I(e) && n.selectAllTab(e)
                        }, n.onClickEmote = function(e, t, i) {
                            if (n.props.onClickEmote) {
                                n.props.onClickEmote(e, t);
                                var r = {
                                    channel_id: n.props.channelID,
                                    chatroom_id: n.props.roomID,
                                    emote_picker_sid: n.props.emotePickerSessionID,
                                    emote_id: t,
                                    emoticon_set_id: i,
                                    generated_by: n.props.emotePickerSource
                                };
                                l.n.track(D.SpadeEventType.EmotePickerClickthrough, r)
                            }
                        }, n.closeOnEsc = function(e) {
                            e.keyCode === N.a.Esc && n.props.toggleVisibility()
                        }, n.handleFilterChange = function(e) {
                            var t = e.target.value,
                                i = t.toLowerCase(),
                                r = n.filterAvailableUpsells(n.props.availableUpsells, i),
                                a = n.filterEmoteSets(n.props.ownedChannelEmoteSets, i);
                            n.setState({
                                filter: i,
                                filteredAllEmoteSets: n.filterEmoteSets(n.props.allEmoteSets, i),
                                filteredAvailableUpsells: r,
                                filteredOwnedChannelEmoteSets: a,
                                inputValue: t,
                                channelTabEnabled: a.length > 0 || r.length > 0
                            })
                        }, n.state = {
                            filter: "",
                            filteredOwnedChannelEmoteSets: t.ownedChannelEmoteSets,
                            filteredAvailableUpsells: t.availableUpsells,
                            filteredAllEmoteSets: t.allEmoteSets,
                            inputValue: "",
                            channelTabSelected: !0,
                            channelTabEnabled: t.ownedChannelEmoteSets.length > 0 || t.availableUpsells.length > 0
                        }, n.selectAllTab = function() {
                            return n.setChannelTabSelected(!1)
                        }, n.selectChannelTab = function() {
                            return n.setChannelTabSelected(!0)
                        }, n
                    }
                    return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        if (e.channelID && e.emotePickerSessionID && !this.props.emotePickerSessionID) {
                            var t = {
                                channel_id: e.channelID,
                                emote_picker_sid: e.emotePickerSessionID,
                                generated_by: e.emotePickerSource,
                                chatroom_id: e.roomID
                            };
                            l.n.track(D.SpadeEventType.ViewedEmotePicker, t)
                        }
                        if (!e.gqlError)
                            if (this.state.filter.length > 0) {
                                var n = this.filterAvailableUpsells(this.props.availableUpsells, this.state.filter),
                                    i = this.filterEmoteSets(this.props.ownedChannelEmoteSets, this.state.filter);
                                this.setState({
                                    filteredAllEmoteSets: this.filterEmoteSets(this.props.allEmoteSets, this.state.filter),
                                    filteredAvailableUpsells: n,
                                    filteredOwnedChannelEmoteSets: i,
                                    channelTabEnabled: i.length > 0 || n.length > 0
                                })
                            } else this.setState({
                                filteredOwnedChannelEmoteSets: e.ownedChannelEmoteSets,
                                filteredAvailableUpsells: e.availableUpsells,
                                filteredAllEmoteSets: e.allEmoteSets,
                                channelTabEnabled: e.ownedChannelEmoteSets.length > 0 || e.availableUpsells.length > 0
                            })
                    }, t.prototype.render = function() {
                        return r.createElement(F.u, {
                            "data-a-target": "emote-picker",
                            direction: this.props.direction ? this.props.direction : F.v.TopRight,
                            size: this.props.size ? this.props.size : F.w.Medium,
                            noTail: !0,
                            show: !0
                        }, r.createElement(F.Va, {
                            className: T("emote-picker")
                        }, this.renderTabContent(), r.createElement(F.Va, {
                            className: "emote-picker__controls-container",
                            position: F.db.Relative
                        }, r.createElement(F.xb, {
                            padding: 1,
                            borderTop: !0
                        }, r.createElement(F.Pa, {
                            autoFocus: !0,
                            onChange: this.handleFilterChange,
                            onKeyDown: this.closeOnEsc,
                            placeholder: Object(l.d)("Search for Emotes", "EmotePicker"),
                            type: F.Ra.Text,
                            value: this.state.inputValue
                        })), r.createElement(P, {
                            allTabVisible: this.props.allEmoteSets.length > 0,
                            channelTabEnabled: this.state.channelTabEnabled,
                            channelTabSelected: this.state.channelTabSelected,
                            channelTabVisible: !!this.props.channelTabVisible,
                            selectAllTab: this.selectAllTab,
                            selectAllTabKeypress: this.allTabSelectionKeypress,
                            selectChannelTab: this.selectChannelTab,
                            selectChannelTabKeypress: this.channelTabSelectionKeypress
                        }))))
                    }, t.prototype.renderTabContent = function() {
                        var e = this,
                            t = [];
                        if (this.props.gqlError) t.push(r.createElement(F.Va, {
                            key: "emotePicker-error"
                        }, r.createElement(F.V, {
                            color: F.O.Error
                        }, Object(l.d)("Unable to load available emotes.", "EmotePicker"))));
                        else if (this.props.loading) t.push(r.createElement(F.Va, {
                            alignItems: F.f.Center,
                            display: F.W.Flex,
                            key: "loading",
                            fullHeight: !0,
                            fullWidth: !0,
                            justifyContent: F.Ua.Center
                        }, r.createElement(F.Xa, {
                            key: "LoadingSpinner"
                        })));
                        else if (this.state.channelTabEnabled && this.state.channelTabSelected) {
                            if (this.state.filteredOwnedChannelEmoteSets.length > 0) {
                                var n = this.state.filteredOwnedChannelEmoteSets[0].emotes.map(function(t) {
                                    return t.setID = e.state.filteredOwnedChannelEmoteSets[0].id, t
                                });
                                t.push(r.createElement(F.Va, {
                                    className: "emote-picker__content-block",
                                    key: "ownedChannelEmoteSets",
                                    padding: 1,
                                    position: F.db.Relative
                                }, r.createElement(R.a, {
                                    emotes: n,
                                    onClickEmote: this.onClickEmote,
                                    locked: !1
                                })))
                            }
                            t = t.concat(this.state.filteredAvailableUpsells.map(function(t) {
                                return r.createElement(F.Va, {
                                    className: "emote-picker__content-block",
                                    key: "planUpsell:" + t.level,
                                    padding: 1,
                                    position: F.db.Relative
                                }, r.createElement(L, {
                                    plan: t,
                                    isEsportChannel: e.props.isEsportChannel,
                                    subscribeTexts: e.props.subscribeTexts,
                                    handleSubAction: e.props.handleSubAction
                                }))
                            }))
                        } else t = this.state.filteredAllEmoteSets.map(function(t) {
                            var n = [];
                            return t.emotes.forEach(function(e) {
                                e.setID = t.id, n.push(e)
                            }), r.createElement(F.Va, {
                                key: "emoteGrid" + t.id,
                                position: F.db.Relative,
                                padding: {
                                    top: 1,
                                    bottom: 2
                                },
                                className: "emote-picker__content-block"
                            }, r.createElement(R.a, {
                                emotes: n,
                                onClickEmote: e.onClickEmote,
                                locked: !1
                            }))
                        });
                        return t.length > 0 ? r.createElement(O.b, {
                            className: "emote-picker__tab-content"
                        }, r.createElement(F.Va, {
                            padding: 1
                        }, t)) : null
                    }, t.prototype.filterEmoteSet = function(e, t) {
                        return e.filter(function(e) {
                            return e.token.toLowerCase().includes(t)
                        })
                    }, t.prototype.setChannelTabSelected = function(e) {
                        this.setState({
                            channelTabSelected: e
                        })
                    }, t.prototype.filterEmoteSets = function(e, t) {
                        for (var n = [], i = 0, r = e; i < r.length; i++) {
                            var a = r[i],
                                o = this.filterEmoteSet(a.emotes, t);
                            o.length > 0 && n.push({
                                id: a.id,
                                emotes: o
                            })
                        }
                        return n
                    }, t.prototype.filterAvailableUpsells = function(e, t) {
                        for (var n = [], r = 0, a = e; r < a.length; r++) {
                            var o = a[r];
                            if (o.emotes) {
                                var s = this.filterEmoteSet(o.emotes, t);
                                s.length > 0 && n.push(i.__assign({}, o, {
                                    emotes: s
                                }))
                            }
                        }
                        return n
                    }, t = i.__decorate([Object(_.c)("EmotePickerMenu", {
                        autoReportInteractive: !0
                    })], t)
                }(r.Component)),
                j = n("GzyO"),
                A = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.renderSearchContent = function() {
                            var e;
                            return e = n.state.filteredEmotes.length > 0 ? r.createElement(F.V, null, Object(l.d)('Search Results for "{inputValue}"', {
                                inputValue: n.state.inputValue
                            }, "EmotePickerCard")) : r.createElement(F.V, null, Object(l.d)('No Search Results for "{inputValue}"', {
                                inputValue: n.state.inputValue
                            }, "EmotePickerCard")), r.createElement(O.b, {
                                className: "emote-picker__tab-content"
                            }, r.createElement(F.Va, {
                                padding: 1
                            }, r.createElement(F.Va, {
                                position: F.db.Relative,
                                padding: {
                                    top: 1,
                                    bottom: 2
                                },
                                className: "emote-picker__content-block"
                            }, e, r.createElement(R.a, {
                                emotes: n.state.filteredEmotes,
                                onClickEmote: n.onClickEmote,
                                locked: !1
                            }))))
                        }, n.onClickEmote = function(e, t, i) {
                            if (n.props.onClickEmote) {
                                n.props.onClickEmote(e, t);
                                var r = {
                                    channel_id: n.props.channelID,
                                    chatroom_id: n.props.roomID,
                                    emote_picker_sid: n.props.emotePickerSessionID,
                                    emote_id: t,
                                    emoticon_set_id: i,
                                    generated_by: n.props.emotePickerSource
                                };
                                l.n.track(D.SpadeEventType.EmotePickerClickthrough, r)
                            }
                        }, n.handleFilterChange = function(e) {
                            var t = e.target.value,
                                i = t.toLowerCase();
                            n.setState({
                                filter: i,
                                inputValue: t,
                                filteredEmotes: n.filterEmoteSets(n.props.allEmoteSets, i)
                            })
                        }, n.filterEmoteSets = function(e, t) {
                            var n = [];
                            e.forEach(function(e) {
                                e.emotes.filter(function(e) {
                                    return e.token.toLowerCase().includes(t)
                                }).forEach(function(t) {
                                    t.setID = e.id, n.push(t)
                                })
                            });
                            var i = Object(j.b)(),
                                r = 0 === Object.keys(i).length ? void 0 : i;
                            return Object(y.f)(n, t, r)
                        }, n.state = {
                            filter: "",
                            filteredEmotes: [],
                            inputValue: ""
                        }, n
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        if (this.props.channelID) {
                            var e = {
                                channel_id: this.props.channelID,
                                emote_picker_sid: this.props.emotePickerSessionID,
                                generated_by: this.props.emotePickerSource,
                                chatroom_id: this.props.roomID
                            };
                            l.n.track(D.SpadeEventType.ViewedEmotePicker, e)
                        }
                    }, t.prototype.render = function() {
                        return r.createElement(F.u, {
                            "data-a-target": "emote-picker",
                            direction: this.props.direction ? this.props.direction : F.v.TopRight,
                            size: this.props.size ? this.props.size : F.w.Medium,
                            noTail: !0,
                            show: !0
                        }, r.createElement(F.Va, {
                            className: T("emote-picker")
                        }, r.createElement(F.xb, {
                            padding: 1,
                            borderTop: !0
                        }, r.createElement(F.Pa, {
                            autoFocus: !0,
                            onChange: this.handleFilterChange,
                            placeholder: Object(l.d)("Search for Emotes", "EmotePickerCard"),
                            type: F.Ra.Text,
                            value: this.state.inputValue
                        })), this.renderTabContent()))
                    }, t.prototype.renderTabContent = function() {
                        if (this.props.gqlError) return r.createElement(F.Va, null, r.createElement(F.V, {
                            "data-test-selector": "emote-picker-menu-error-text",
                            color: F.O.Error
                        }, Object(l.d)("Unable to load available emotes.", "EmotePickerCard")));
                        if (this.props.loading) return r.createElement(F.Va, {
                            alignItems: F.f.Center,
                            display: F.W.Flex,
                            fullHeight: !0,
                            fullWidth: !0,
                            justifyContent: F.Ua.Center
                        }, r.createElement(F.Xa, null));
                        if ("" !== this.state.filter) return this.renderSearchContent();
                        var e = [];
                        this.props.allEmoteSets.forEach(function(t) {
                            t.emotes.forEach(function(n) {
                                n.setID = t.id, e.push(n)
                            })
                        });
                        var t = r.createElement(F.Va, {
                            position: F.db.Relative,
                            padding: {
                                top: 1,
                                bottom: 2
                            },
                            className: "emote-picker__content-block"
                        }, r.createElement(R.a, {
                            emotes: e,
                            onClickEmote: this.onClickEmote,
                            locked: !1
                        }));
                        return r.createElement(O.b, {
                            className: "emote-picker__tab-content"
                        }, r.createElement(F.Va, {
                            padding: 1
                        }, t))
                    }, t
                }(r.Component),
                U = n("DB+C"),
                W = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        n.handleSubEvent = function(e) {
                            e.action === w.a.ClickCheckout && n.checkAndDisplaySubscriptionCheckout(), Object(w.b)(i.__assign({}, e, {
                                action: w.a.ClickCheckout,
                                channelID: n.props.channelData && n.props.channelData.user && n.props.channelData.user.id || "",
                                channelLogin: n.props.channelData && n.props.channelData.user && n.props.channelData.user.displayName || "",
                                isMenuOpen: null,
                                hasSubCredit: null,
                                sub_location: "emote_picker",
                                modal: !1,
                                showPrimeContent: !0,
                                giftRecipient: null
                            }))
                        };
                        var r = {
                            allEmoteSets: [],
                            availableUpsells: [],
                            channelTabVisible: !1,
                            gqlError: t.emoteSetsData && !!t.emoteSetsData.error || t.channelData && !!t.channelData.error || !1,
                            gqlLoading: t.emoteSetsData && !!t.emoteSetsData.loading || t.channelData && !!t.channelData.loading || !1,
                            subscribeTexts: [],
                            ownedChannelEmoteSets: [],
                            ownedSetIDs: new Set([])
                        };
                        return r = n.applyDataPropsToState(t, r), n.state = i.__assign({}, r), n
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.checkDataLoaded(this.props) && (this.props.onLoad && this.props.onLoad(this.checkForContent(this.props)), this.props.latencyTracking.reportInteractive())
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        if (e.emoteSetsData && e.emoteSetsData.error || e.channelData && e.channelData.error) this.setState({
                            gqlError: !0
                        });
                        else {
                            var t = this.applyDataPropsToState(e, this.state);
                            this.props.pubsub.messages.subscriptionInfo !== e.pubsub.messages.subscriptionInfo && (this.props.channelData && this.props.channelData.refetch(), this.props.emoteSetsData && this.props.emoteSetsData.refetch()), this.checkDataLoaded(e) && (e.latencyTracking.reportInteractive(), e.onLoad && e.onLoad(this.checkForContent(e)), t.gqlLoading = !1), this.setState(i.__assign({}, t, {
                                gqlError: !1
                            }))
                        }
                        e.visible && !this.props.visible ? this.props.openEmotePicker() : this.props.visible && !e.visible && this.props.closeEmotePicker()
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.closeEmotePicker()
                    }, t.prototype.render = function() {
                        if (!this.props.visible) return null;
                        var e = this.props.channelData && this.props.channelData.user && this.props.channelData.user.campaignProperties && this.props.channelData.user.campaignProperties.domains && this.props.channelData.user.campaignProperties.domains.length > 0 || !1,
                            t = r.createElement(M, {
                                allEmoteSets: this.state.allEmoteSets,
                                availableUpsells: this.state.availableUpsells,
                                channelTabVisible: this.state.channelTabVisible,
                                channelID: this.props.channelOwnerID,
                                direction: this.props.direction,
                                emotePickerSessionID: this.props.emotePickerSessionID,
                                emotePickerSource: this.props.emotePickerSource,
                                gqlError: this.state.gqlError,
                                handleSubAction: this.handleSubEvent,
                                isEsportChannel: e,
                                loading: this.state.gqlLoading,
                                onClickEmote: this.props.onClickEmote,
                                ownedChannelEmoteSets: this.state.ownedChannelEmoteSets,
                                roomID: this.props.roomID,
                                size: this.props.size,
                                subscribeTexts: this.state.subscribeTexts,
                                toggleVisibility: this.props.toggleVisibility
                            }),
                            n = r.createElement(A, {
                                allEmoteSets: this.state.allEmoteSets,
                                availableUpsells: this.state.availableUpsells,
                                channelID: this.props.channelOwnerID,
                                direction: this.props.direction,
                                emotePickerSessionID: this.props.emotePickerSessionID,
                                emotePickerSource: this.props.emotePickerSource,
                                gqlError: this.state.gqlError,
                                loading: this.state.gqlLoading,
                                onClickEmote: this.props.onClickEmote,
                                roomID: this.props.roomID,
                                size: this.props.size,
                                toggleVisibility: this.props.toggleVisibility
                            });
                        return r.createElement(c.a, {
                            assignments: {
                                fallback: function() {
                                    return t
                                },
                                off: function() {
                                    return t
                                },
                                on: function() {
                                    return n
                                }
                            },
                            name: v.b.EmotePickerV2
                        })
                    }, t.prototype.checkDataLoaded = function(e) {
                        var t = !e.channelOwnerID || e.channelData && !e.channelData.loading,
                            n = !e.isLoggedIn || e.emoteSetsData && !e.emoteSetsData.loading;
                        return t && n
                    }, t.prototype.checkForContent = function(e) {
                        var t = e.emoteSetsData && e.emoteSetsData.emoteSets && e.emoteSetsData.emoteSets.length > 0 || !1,
                            n = e.channelData && e.channelData.user && e.channelData.user.subscriptionProducts.filter(this.subscriptionProductHasEmotes).length > 0 || !1;
                        return t || n
                    }, t.prototype.applyDataPropsToState = function(e, t) {
                        var n = i.__assign({}, t);
                        if (e.emoteSetsData && e.emoteSetsData.emoteSets) {
                            n.ownedSetIDs = new Set;
                            for (var r = 0, a = e.emoteSetsData.emoteSets; r < a.length; r++) {
                                var o = a[r];
                                o && o.id && n.ownedSetIDs.add(parseInt(o.id, 10))
                            }
                            n.allEmoteSets = Object(y.a)(e.emoteSetsData.emoteSets)
                        }
                        if (e.channelData && e.channelData.user) {
                            var s = void 0;
                            e.channelData.user.self && e.channelData.user.self.subscriptionBenefit && (s = e.channelData.user.self.subscriptionBenefit.platform), n.availableUpsells = function(e, t, n) {
                                var r = [];
                                return !n || n !== S.b.IOS && n !== S.b.Android ? (t.forEach(function(n, a) {
                                    var o = n.price;
                                    0 === a && Object(C.g)(t) && (o = Object(C.c)(t[0])), n.emotes && n.emotes.length && n.emoteSetID && !e.has(parseInt(n.emoteSetID, 10)) && r.push(i.__assign({}, n, {
                                        emotes: Object(y.b)(n.emotes),
                                        level: a,
                                        price: o
                                    }))
                                }), r) : r
                            }(n.ownedSetIDs, e.channelData.user.subscriptionProducts, s), n.subscribeTexts = function(e) {
                                for (var t = [], n = 0; n < e.length; n++) {
                                    var i = e[n],
                                        r = Object(E.a)(i.tier);
                                    null === r && (r = 1), 0 === n && i.emotes && i.emotes.length > 1 ? t[n] = Object(l.d)("Unlock {numEmotes, number} Sub Emotes", {
                                        numEmotes: i.emotes.length
                                    }, "assembleSubscribeTexts") : 0 === n ? t[n] = Object(l.d)("Unlock 1 Sub Emote", "assembleSubscribeTexts") : i.emotes && i.emotes.length > 1 ? t[n] = Object(l.d)("{numEmotes, number} Extra Tier {tier} Sub Emotes", {
                                        numEmotes: i.emotes.length,
                                        tier: r
                                    }, "assembleSubscribeTexts") : i.emotes && i.emotes.length && (t[n] = Object(l.d)("1 Extra Tier {tier} Sub Emote", {
                                        tier: r
                                    }, "assembleSubscribeTexts"))
                                }
                                return t
                            }(e.channelData.user.subscriptionProducts), n.ownedChannelEmoteSets = function(e, t) {
                                for (var n = [{
                                        id: "0",
                                        emotes: []
                                    }], i = 0, r = t; i < r.length; i++) {
                                    var a = r[i];
                                    a.emotes && a.emoteSetID && e.has(parseInt(a.emoteSetID, 10)) && (n[0].emotes = n[0].emotes.concat(Object(y.b)(a.emotes)))
                                }
                                return n[0].emotes.length ? n : []
                            }(n.ownedSetIDs, e.channelData.user.subscriptionProducts)
                        }
                        return n.channelTabVisible = e.channelData && e.channelData.user && e.channelData.user.subscriptionProducts.filter(this.subscriptionProductHasEmotes).length > 0 || !1, n
                    }, t.prototype.subscriptionProductHasEmotes = function(e) {
                        return void 0 !== e.emoteSetID && !!e.emotes && e.emotes.length > 0
                    }, t.prototype.checkAndDisplaySubscriptionCheckout = function() {
                        if ("yes" === l.o.experiments.getAssignment(v.b.InstreamCheckout)) {
                            var e = l.m.get(h.b, ""),
                                t = l.m.get(h.c, ""),
                                n = l.m.get(h.a, ""),
                                i = Number(n);
                            e && (this.props.channelData && this.props.channelData.user && this.props.channelData.user.subscriptionProducts.map(function(e) {
                                return e.name
                            }).includes(e) ? this.props.sessionUser ? this.props.showSubscriptionCheckoutModal({
                                recipientLogin: t,
                                productName: e,
                                mysteryGiftCount: i
                            }) : this.props.showLoginModal() : Object(h.d)())
                        }
                    }, t
                }(r.Component);
            var B = Object(a.compose)(Object(o.connect)(function(e) {
                return {
                    currentUserID: e.session.user && e.session.user.id,
                    emotePickerSessionID: e.chat && e.chat.emotePickerSessionID || null,
                    sessionUser: e.session.user,
                    isLoggedIn: Object(b.f)(e)
                }
            }, function(e) {
                return Object(s.bindActionCreators)({
                    closeEmotePicker: k.A,
                    openEmotePicker: k.M,
                    showLoginModal: Object(h.e)(f.a.EmotePickerSubscriptionButton),
                    showSubscriptionCheckoutModal: function(e) {
                        var t = i.__rest(e, []);
                        return Object(g.d)(d.a, {
                            component: "CheckoutModal",
                            loader: function() {
                                return Promise.all([n.e(0), n.e(198)]).then(n.bind(null, "KJv/"))
                            },
                            componentProps: t
                        })
                    }
                }, e)
            }), Object(u.a)(U, {
                name: "channelData",
                skip: function(e) {
                    return !e.channelOwnerID
                },
                options: function(e) {
                    return {
                        variables: {
                            channelOwnerID: e.channelOwnerID
                        }
                    }
                }
            }), Object(p.a)([{
                topic: function(e) {
                    return "user-subscribe-events-v1." + e.currentUserID
                },
                mapMessageTypesToProps: {
                    "*": "subscriptionInfo"
                },
                skip: function(e) {
                    return !e.currentUserID
                }
            }]), Object(_.c)("EmotePicker"), Object(m.a)())(W);
            n.d(t, "a", function() {
                return B
            })
        },
        "0FG4": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "c", function() {
                return s
            }), n.d(t, "b", function() {
                return c
            });
            var i, r = n("RcPG"),
                a = n("a1OF");
            ! function(e) {
                e[e.Position = 0] = "Position", e[e.Token = 1] = "Token"
            }(i || (i = {}));
            var o = "0";

            function s(e, t, n) {
                var o = n.type === i.Position ? t : e,
                    s = n.map[o];
                if (s) {
                    var l = function(e, t) {
                        return {
                            images: {
                                sources: {
                                    "1x": Object(a.e)(t, 1),
                                    "2x": Object(a.e)(t, 2),
                                    "4x": Object(a.e)(t, 4)
                                },
                                themed: !1
                            },
                            alt: e
                        }
                    }(e, s.id);
                    return {
                        type: r.a.Emote,
                        content: l
                    }
                }
                return null
            }
            var l = {
                "\\:\\&gt\\;": [":>"],
                "\\&gt\\;\\(": [">("],
                "\\&lt\\;\\]": ["<]"],
                "\\&lt\\;3": ["<3"],
                ":-?(?:7|L)": [":-7", ":-L", ":7", ":L"],
                "[oO](_|\\.)[oO]": ["o_o", "O_O", "o_O", "O_o", "o.o", "O.O", "o.O", "O.o"],
                "\\;-?(p|P)": [";-p", ";-P", ";p", ";P"],
                "\\;-?\\)": [";-)", ";)"],
                "\\:-?(o|O)": [":-o", ":-O", ":o", ":O"],
                "\\:-?(p|P)": [":-p", ":-P", ":p", ":P"],
                "\\:-?(S|s)": [":-S", ":-s", ":s", ":S"],
                "\\:-?[\\\\/]": [":-/", ":-\\", ":/", ":\\"],
                "\\:-?[z|Z|\\|]": [":-|", ":-Z", ":-z", ":|", ":Z", ":z"],
                "\\:-?\\(": [":-(", ":("],
                "\\:-?\\)": [":-)", ":)"],
                "\\:-?D": [":-D", ":D"],
                "#-?[\\\\/]": ["#-/", "#-\\", "#/", "#\\"],
                "B-?\\)": ["B-)", "B)"],
                "R-?\\)": ["R-)", "R)"]
            };

            function c(e) {
                for (var t = {}, n = 0, i = e; n < i.length; n++) {
                    var r = i[n];
                    if (r && r.emotes)
                        for (var a = 0, s = r.emotes; a < s.length; a++) {
                            var c = s[a];
                            if (c && c.id && c.token)
                                for (var d = 0, u = l[c.token] || [c.token]; d < u.length; d++) {
                                    var p = u[d];
                                    t[p] && r.id === o || (t[p] = {
                                        id: c.id,
                                        token: p
                                    })
                                }
                        }
                }
                return t
            }
        },
        "0INk": function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return l
            }), n.d(t, "c", function() {
                return c
            }), n.d(t, "a", function() {
                return d
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("2xye"),
                o = n("gAd6"),
                s = function() {
                    var e = r.n.getLastPageview();
                    return e && e.location || a.PageviewLocation.None
                },
                l = function(e) {
                    r.n.trackItemSectionClick({
                        carousel_content: a.PageviewContent.Video,
                        channel_id: e.broadcasterID || "0",
                        channel: e.channelLogin || "unknown",
                        content: a.PageviewContent.PreviewCardGameName,
                        item_index: e.contentIndex,
                        medium: e.pageviewMedium,
                        item_id: e.videoID,
                        item_type: a.TwitchDataType.Video,
                        item_viewcount: null,
                        location: s()
                    })
                },
                c = function(e) {
                    r.n.trackItemSectionClick({
                        carousel_content: a.PageviewContent.PreviewCardGameBalloonGame,
                        channel_id: e.broadcasterID || "0",
                        channel: e.channelLogin || "unknown",
                        content: a.PageviewContent.PreviewCardGameBalloonGame,
                        item_index: e.contentIndex,
                        medium: e.pageviewMedium,
                        item_id: e.videoID,
                        item_type: a.TwitchDataType.Video,
                        item_viewcount: null,
                        location: s()
                    })
                },
                d = function(e) {
                    return i.__awaiter(void 0, void 0, void 0, function() {
                        var t, n, l, c, d, u = this;
                        return i.__generator(this, function(p) {
                            switch (p.label) {
                                case 0:
                                    return p.trys.push([0, 2, , 3]), t = e.map(function(e) {
                                        return i.__awaiter(u, void 0, void 0, function() {
                                            var t;
                                            return i.__generator(this, function(n) {
                                                switch (n.label) {
                                                    case 0:
                                                        return [4, r.o.apollo.client.query({
                                                            query: o,
                                                            variables: {
                                                                name: e
                                                            }
                                                        })];
                                                    case 1:
                                                        return [2, (t = n.sent().data).game && t.game.id]
                                                }
                                            })
                                        })
                                    }), [4, Promise.all(t)];
                                case 1:
                                    return n = p.sent(), l = n.filter(function(e) {
                                        return !!e
                                    }), c = l.map(function() {
                                        return a.TwitchDataType.Game
                                    }), d = l.map(function() {
                                        return null
                                    }), r.n.trackItemSectionLoad({
                                        carousel_content: a.PageviewContent.PreviewCardGameBalloonGame,
                                        rendered_item_count: l.length,
                                        rendered_item_list: l,
                                        rendered_item_types: c,
                                        rendered_items_viewcounts: d,
                                        location: s()
                                    }), [3, 3];
                                case 2:
                                    return p.sent(), [3, 3];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }
        },
        "0NX8": function(e, t, n) {},
        "0Rl0": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            });
            var i = n("q1tI"),
                r = n("Ue10"),
                a = function() {
                    return i.createElement(r.G, null, i.createElement(r.o, {
                        ratio: r.p.Aspect16x9
                    }, i.createElement(r.cb, null)), i.createElement(r.H, null, i.createElement(r.Va, {
                        display: r.W.Flex,
                        margin: {
                            bottom: 1
                        }
                    }, i.createElement(r.Va, {
                        display: r.W.InlineBlock,
                        margin: {
                            top: 1,
                            right: 1
                        }
                    }, i.createElement(r.cb, {
                        width: 40,
                        height: 56
                    })), i.createElement(r.Va, {
                        display: r.W.InlineBlock,
                        margin: {
                            top: 1
                        }
                    }, i.createElement(r.V, null, i.createElement(r.cb, {
                        width: 150
                    })), i.createElement(r.V, {
                        fontSize: r.Aa.Size7
                    }, i.createElement(r.cb, {
                        width: 100
                    }))))))
                }
        },
        "0T/G": function(e, t) {},
        "0WFu": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = n("3Bft");

            function r(e) {
                return [i.b.Prime, i.b.Custom].includes(e) ? null : parseInt(e, 10) / 1e3
            }
        },
        "0fnA": function(e, t, n) {
            "use strict";
            n.r(t);
            var i, r, a = n("mrSG"),
                o = n("q1tI"),
                s = n("oJmH"),
                l = n("/7QA"),
                c = n("lZCe"),
                d = n("yR8l"),
                u = n("V+GM"),
                p = n("D7An"),
                m = n("NvVO"),
                h = n("MPw5"),
                f = n("2xye"),
                g = n("Uive"),
                v = n("cTNz"),
                b = n("/MKj"),
                k = n("TSYQ"),
                y = n("fvjX"),
                S = n("17x9"),
                C = n("OUrp"),
                E = n("44NB"),
                _ = n("+qcr"),
                w = n("GnwI"),
                T = n("Ue10");
            n("H9ix");
            ! function(e) {
                e.Image = "featured-item-image", e.Logo = "featured-item-logo", e.Video = "featured-item-video", e.Wrapper = "featured-item-wrapper"
            }(i || (i = {})),
            function(e) {
                e.Hidden = "hidden", e.Enter = "enter", e.EnterActive = "enterActive", e.Leave = "leave", e.LeaveActive = "leaveActive", e.Visible = "visible"
            }(r || (r = {}));
            var O, N = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.loadVideo = function() {
                            n.setState({
                                videoStatus: r.Enter
                            })
                        }, n.fadeVideoIn = function() {
                            n.trackPromotionView(), n.state.videoStatus === r.Enter && requestAnimationFrame(function() {
                                n.setState({
                                    videoStatus: r.EnterActive
                                }), n.enterTimeout = setTimeout(function() {
                                    n.setState({
                                        videoStatus: r.Visible
                                    })
                                }, n.props.transitionDuration)
                            })
                        }, n.fadeVideoOut = function() {
                            clearTimeout(n.enterTimeout), n.setState({
                                videoStatus: r.Leave
                            }), requestAnimationFrame(function() {
                                n.setState({
                                    videoStatus: r.LeaveActive
                                }), setTimeout(function() {
                                    n.setState({
                                        videoStatus: r.Hidden
                                    })
                                }, n.props.transitionDuration)
                            })
                        }, n.trackCarouselClick = function() {
                            var e = {
                                broadcast_type: n.props.item.content.subType,
                                carousel_index: n.props.index,
                                channel: n.props.item.broadcaster.login,
                                game: n.props.item.content.gameName,
                                promotion_was_scheduled: n.props.item.isScheduled,
                                views: n.props.item.content.viewersCount
                            };
                            Object(E.b)(e)
                        }, n.trackPromotionView = function() {
                            var e = {
                                broadcast_type: n.props.item.content.subType,
                                carousel_index: n.props.index,
                                channel: n.props.item.broadcaster.login,
                                game: n.props.item.content.gameName,
                                promotion_was_scheduled: n.props.item.isScheduled,
                                views: n.props.item.content.viewersCount
                            };
                            Object(E.e)(e)
                        }, n.onClick = function() {
                            n.trackCarouselClick(), n.props.onClick(n.props.offsetFromCenter)
                        }, n.state = {
                            videoStatus: t.showVideo ? r.Visible : r.Hidden
                        }, n
                    }
                    return a.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        !1 === this.props.showVideo && !0 === e.showVideo ? this.loadVideo() : !0 === this.props.showVideo && !1 === e.showVideo && this.fadeVideoOut()
                    }, t.prototype.render = function() {
                        return o.createElement("div", null, o.createElement("div", {
                            onClick: this.onClick,
                            "data-test-selector": i.Wrapper,
                            className: k("featured-content-carousel-featured-item", "featured-content-carousel-featured-item--offset-" + Math.abs(this.props.offsetFromCenter))
                        }, o.createElement(T.xb, {
                            position: T.db.Relative,
                            borderRadius: T.x.Large,
                            overflow: T.Ya.Hidden,
                            elevation: 3,
                            background: T.r.AccentAlt2,
                            fullWidth: !0,
                            fullHeight: !0
                        }, Object(_.d)(this.props.item.imageURL) && o.createElement(T.Va, {
                            className: "featured-content-carousel-featured-item__logo-image-container",
                            position: T.db.Absolute,
                            attachBottom: !0,
                            attachLeft: !this.props.isRightSide,
                            attachRight: this.props.isRightSide,
                            margin: 1,
                            zIndex: T.ac.Above,
                            "data-test-selector": i.Logo
                        }, o.createElement(T.S, {
                            src: this.props.item.imageURL,
                            alt: this.props.item.broadcaster.login
                        })), o.createElement(T.xb, {
                            className: k("featured-content-carousel-featured-item__overlay", "featured-content-carousel-featured-item__overlay--offset-" + Math.abs(this.props.offsetFromCenter)),
                            position: T.db.Absolute,
                            attachTop: !0,
                            attachLeft: !0,
                            attachRight: !0,
                            attachBottom: !0,
                            background: T.r.Overlay
                        }), this.renderVideo(), this.props.item.content.previewImageURL && o.createElement(T.Na, {
                            fullWidth: !0
                        }, o.createElement(T.S, {
                            src: this.props.item.content.previewImageURL,
                            alt: this.props.item.title,
                            "data-test-selector": i.Image
                        })))))
                    }, t.prototype.renderVideo = function() {
                        if (this.props.item.content.id && this.state.videoStatus !== r.Hidden) {
                            var e = 0;
                            this.state.videoStatus !== r.EnterActive && this.state.videoStatus !== r.Leave && this.state.videoStatus !== r.Visible || (e = 1);
                            var t = {
                                type: C.b.Stream,
                                id: this.props.item.content.id,
                                paused: this.props.shouldPause,
                                showChannelInfoOnHover: !0,
                                onPauseToggled: this.props.onPauseToggled,
                                onPlayerInit: this.fadeVideoIn
                            };
                            return o.createElement(T.Va, {
                                position: T.db.Absolute,
                                attachTop: !0,
                                attachLeft: !0,
                                attachRight: !0,
                                attachBottom: !0,
                                zIndex: T.ac.Above,
                                refDelegate: this.props.setDomRef,
                                "data-test-selector": i.Video
                            }, this.state.videoStatus === r.Enter && o.createElement(T.xb, {
                                position: T.db.Absolute,
                                attachTop: !0,
                                attachLeft: !0,
                                attachRight: !0,
                                attachBottom: !0,
                                display: T.W.Flex,
                                alignItems: T.f.Center,
                                justifyContent: T.Ua.Center,
                                color: T.O.Overlay
                            }, o.createElement(T.Xa, {
                                delay: this.props.transitionDuration + 500,
                                size: T.vb.Large,
                                inheritColor: !0
                            })), o.createElement("div", {
                                style: {
                                    transition: "opacity " + this.props.transitionDuration + "ms ease",
                                    opacity: e
                                }
                            }, o.createElement(T.Na, {
                                fullWidth: !0
                            }, Object(_.c)(t))))
                        }
                    }, t
                }(o.Component),
                I = Object(s.compose)(Object(w.c)("FeaturedItem", {
                    autoReportInteractive: !0
                }))(N),
                D = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            shouldPause: !t.props.autoplay,
                            userHasPaused: !t.props.autoplay
                        }, t.setDomRef = function(e) {
                            return t.domRef = e
                        }, t.onPauseToggled = function(e) {
                            t.state.userHasPaused !== e && t.state.shouldPause !== e && t.setState({
                                shouldPause: e,
                                userHasPaused: e
                            })
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.unregister = this.context.registerReceiver(this)
                    }, t.prototype.componentWillUnmount = function() {
                        this.unregister()
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        e.autoplay !== this.props.autoplay && !0 === e.autoplay && this.setState({
                            shouldPause: !1,
                            userHasPaused: !1
                        })
                    }, t.prototype.render = function() {
                        return o.createElement(I, a.__assign({}, this.props, {
                            onPauseToggled: this.onPauseToggled,
                            setDomRef: this.setDomRef,
                            shouldPause: this.state.shouldPause
                        }))
                    }, t.prototype.checkVisible = function(e, t) {
                        if (t && this.domRef) {
                            var n = this.domRef.getBoundingClientRect();
                            n.bottom < e.top || n.top > e.bottom ? this.state.shouldPause || this.state.userHasPaused || this.setState({
                                shouldPause: !0
                            }) : this.state.shouldPause && !this.state.userHasPaused && this.setState({
                                shouldPause: !1
                            })
                        }
                    }, t.contextTypes = {
                        registerReceiver: S.func,
                        getScrollContent: S.func,
                        scrollToTop: S.func
                    }, t
                }(o.Component),
                R = function(e) {
                    return o.createElement(T.xb, {
                        position: T.db.Absolute,
                        attachLeft: e.left,
                        attachRight: e.right,
                        zIndex: T.ac.Above,
                        borderRadius: T.x.Rounded,
                        color: T.O.Alt2,
                        margin: .5
                    }, o.createElement(T.Sa, {
                        type: T.Ta.Alpha,
                        blurAfterClick: !0,
                        onClick: e.onClick,
                        borderRadius: T.x.Rounded
                    }, o.createElement(T.Va, {
                        padding: 1,
                        display: T.W.Flex,
                        alignItems: T.f.Center,
                        justifyContent: T.Ua.Center
                    }, o.createElement(T.mb, {
                        asset: e.right && T.nb.AngleRight || T.nb.AngleLeft,
                        width: 30,
                        height: 30
                    }))))
                },
                x = n("kW4h"),
                F = (n("7D17"), 5),
                P = 200,
                V = 550;
            ! function(e) {
                e.LeftArrow = "featured-content-carousel-left-arrow", e.Placeholder = "featured-content-carousel-placeholder", e.RightArrow = "featured-content-carousel-right-arrow"
            }(O || (O = {}));
            var L = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            listOffset: 0,
                            listOffsetWillChange: 0,
                            listOffsetIsChanging: 0,
                            listOffsetLastChanged: 0,
                            containerWidth: null,
                            containerHeight: null,
                            autoplay: !t.props.hasActivePlayer && !l.o.integrations.app
                        }, t.carouselItems = [], t.options = {
                            transitionDuration: 450,
                            transformScale: .7
                        }, t.initialResizeEventFired = !1, t.displayTracked = !1, t.recalculateTimeout = 0, t.setContainerRef = function(e) {
                            t.containerRef = e, t.initialResizeEventFired || (t.recalculateDimensions(), t.initialResizeEventFired = !0)
                        }, t.onListItemClick = function(e) {
                            return function() {
                                t.triggerListOffsetChange(-e)
                            }
                        }, t.navigateLeft = function() {
                            t.triggerListOffsetChange(-1)
                        }, t.navigateRight = function() {
                            t.triggerListOffsetChange(1)
                        }, t.triggerListOffsetChange = function(e) {
                            if (t.setState({
                                    autoplay: !0
                                }), 0 === t.state.listOffsetIsChanging || Math.sign(e) === Math.sign(t.state.listOffsetIsChanging)) {
                                var n = Date.now(),
                                    i = t.options.transitionDuration / 3;
                                if (!(n < t.lastChangeStartedAt + i)) {
                                    t.lastChangeStartedAt = n;
                                    var r = t.getMedianCount() + e,
                                        a = t.carouselItems.length - t.getMedianCount() + r + t.state.listOffset,
                                        o = Object(_.e)(t.carouselItems.length, a);
                                    t.trackCarouselClick(t.carouselItems[o]), t.setState(function(t) {
                                        return {
                                            listOffsetWillChange: t.listOffsetWillChange + e
                                        }
                                    }, function() {
                                        requestAnimationFrame(function() {
                                            t.setState(function(e) {
                                                return {
                                                    listOffset: e.listOffset + e.listOffsetWillChange,
                                                    listOffsetIsChanging: e.listOffsetIsChanging + e.listOffsetWillChange,
                                                    listOffsetWillChange: 0
                                                }
                                            }), clearTimeout(t.transitionCompletionTimeout), t.transitionCompletionTimeout = setTimeout(function() {
                                                t.setState(function(e) {
                                                    return {
                                                        listOffsetIsChanging: 0,
                                                        listOffsetLastChanged: e.listOffsetIsChanging
                                                    }
                                                })
                                            }, t.options.transitionDuration)
                                        })
                                    })
                                }
                            }
                        }, t.trackCarouselClick = function(e) {
                            var n = {
                                broadcast_type: e.content.subType,
                                carousel_index: t.carouselItems.indexOf(e),
                                channel: e.broadcaster.login,
                                game: e.content.gameName,
                                promotion_was_scheduled: e.isScheduled,
                                views: e.content.viewersCount
                            };
                            Object(E.b)(n)
                        }, t.getNumToDisplay = function() {
                            if (!t.props.data || t.props.data.loading || !t.props.data.featuredStreams) return F;
                            var e = Math.min(t.props.data.featuredStreams.length, F);
                            return e % 2 ? e : e - 1
                        }, t.getMedianCount = function() {
                            return Math.ceil(t.getNumToDisplay() / 2)
                        }, t.getOffsetFromCenter = function(e) {
                            return Math.abs(t.getMedianCount() - e)
                        }, t.debounceRecalculateDimensions = function() {
                            clearTimeout(t.recalculateTimeout), t.recalculateTimeout = setTimeout(function() {
                                t.recalculateDimensions()
                            }, P)
                        }, t.recalculateDimensions = function() {
                            if (t.containerRef) {
                                var e = t.containerRef.getBoundingClientRect();
                                t.setState({
                                    containerWidth: e.width,
                                    containerHeight: e.height
                                })
                            }
                        }, t.renderItem = function(e, n, i) {
                            var r;
                            return o.createElement("div", {
                                key: e.content.id + "-" + i,
                                style: {
                                    position: "absolute",
                                    top: 0,
                                    left: "calc(50% - " + V / 2 + "px)",
                                    zIndex: t.getMedianCount() - t.getOffsetFromCenter(n),
                                    transform: t.transformX(n) + " scale(" + t.transformScalePercent(n) + ")",
                                    transition: "all " + t.options.transitionDuration + "ms ease"
                                },
                                className: k((r = {
                                    "featured-content-carousel__item-container": !0,
                                    "featured-content-carousel__item-container--leaving-or-entering": t.getOffsetFromCenter(n) >= t.getMedianCount()
                                }, r["featured-content-carousel__item-container--offset-" + t.getOffsetFromCenter(n)] = !0, r["featured-content-carousel__item-container--" + t.getPositionString(n)] = !0, r))
                            }, o.createElement(D, {
                                onClick: t.onListItemClick(t.getMedianCount() - n),
                                index: t.carouselItems.indexOf(e),
                                item: e,
                                isRightSide: t.shouldMetaBeDisplayedOnRight(n),
                                showVideo: n === t.getMedianCount() && 0 === t.state.listOffsetIsChanging && 0 === t.state.listOffsetWillChange,
                                autoplay: t.state.autoplay,
                                transitionDuration: t.options.transitionDuration,
                                offsetFromCenter: t.getMedianCount() - n
                            }))
                        }, t.shouldMetaBeDisplayedOnRight = function(e) {
                            var n = t.getMedianCount();
                            return e !== n ? e > n : t.state.listOffsetIsChanging > 0 || 0 === t.state.listOffsetIsChanging && t.state.listOffsetLastChanged > 0
                        }, t.transformX = function(e) {
                            var n = t.getMedianCount();
                            if (e === n || null === t.state.containerWidth) return "";
                            for (var i = 200, r = 1; r <= t.getNumToDisplay(); r++) i += t.transformScalePercent(r) * V;
                            var a = t.getOffsetFromCenter(e) / (n - 1),
                                o = Math.min(t.state.containerWidth, i) / 2 * a;
                            return e < n ? "translatex(-" + o + "px) translatex(" + 50 * a + "%)" : e > n ? "translatex(" + o + "px) translatex(-" + 50 * a + "%)" : ""
                        }, t.transformScalePercent = function(e) {
                            var n = t.getOffsetFromCenter(e),
                                i = t.getMedianCount() - 1,
                                r = (1 - t.options.transformScale) / i;
                            return Math.max(0, 1 - n * r)
                        }, t.getPositionString = function(e) {
                            var n = t.getMedianCount(),
                                i = t.getOffsetFromCenter(e);
                            return e < n ? "left-" + i : e > n ? "right-" + i : "center"
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.componentWillMount = function() {
                        window.addEventListener("resize", this.debounceRecalculateDimensions, !0)
                    }, t.prototype.componentWillUnmount = function() {
                        window.removeEventListener("resize", this.debounceRecalculateDimensions, !0)
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        e.sideNavCollapsed !== this.props.sideNavCollapsed && requestAnimationFrame(this.recalculateDimensions)
                    }, t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive(this.getNumToDisplay())
                    }, t.prototype.render = function() {
                        return o.createElement("div", {
                            ref: this.setContainerRef
                        }, o.createElement(T.Va, {
                            display: T.W.Flex,
                            alignItems: T.f.Center,
                            justifyContent: T.Ua.Center,
                            position: T.db.Relative,
                            className: "featured-content-carousel"
                        }, o.createElement(R, {
                            left: !0,
                            onClick: this.navigateLeft,
                            "data-test-selector": O.LeftArrow
                        }), o.createElement(R, {
                            right: !0,
                            onClick: this.navigateRight,
                            "data-test-selector": O.RightArrow
                        }), this.renderItems()))
                    }, t.prototype.renderPlaceholders = function() {
                        var e = this;
                        return Array.from({
                            length: F
                        }, function(t, n) {
                            var i;
                            return o.createElement("div", {
                                key: n + 1,
                                style: {
                                    position: "absolute",
                                    top: 0,
                                    left: "calc(50% - " + V / 2 + "px)",
                                    zIndex: e.getMedianCount() - e.getOffsetFromCenter(n + 1),
                                    transform: e.transformX(n + 1) + " scale(" + e.transformScalePercent(n + 1) + ")"
                                },
                                className: k((i = {
                                    "featured-content-carousel__item-container": !0,
                                    "featured-content-carousel__item-container--leaving-or-entering": e.getOffsetFromCenter(n + 1) >= e.getMedianCount()
                                }, i["featured-content-carousel__item-container--offset-" + e.getOffsetFromCenter(n + 1)] = !0, i["featured-content-carousel__item-container--" + e.getPositionString(n + 1)] = !0, i)),
                                "data-test-selector": O.Placeholder
                            }, o.createElement(T.xb, {
                                className: "featured-content-carousel__item-placeholder",
                                borderRadius: T.x.Large,
                                background: T.r.AccentAlt2,
                                elevation: 3
                            }))
                        })
                    }, t.prototype.renderItems = function() {
                        if (!this.props.data || this.props.data.loading || !this.props.data.featuredStreams) return this.renderPlaceholders();
                        if (this.props.data.error) return null;
                        var e = [];
                        this.carouselItems.length || (this.carouselItems = Object(_.a)(this.props.data)), this.displayTracked || (Object(E.a)(this.carouselItems), this.displayTracked = !0);
                        var t = 1,
                            n = this.getNumToDisplay();
                        t += Math.min(this.state.listOffsetWillChange, 0) - Math.max(this.state.listOffsetIsChanging, 0), n += Math.max(this.state.listOffsetWillChange, 0) - Math.min(this.state.listOffsetIsChanging, 0);
                        for (var i = t; i <= n; i++) e.push(this.getItemForSlot(i));
                        return e
                    }, t.prototype.getItemForSlot = function(e) {
                        var t = this.carouselItems.length - this.getMedianCount() + e + this.state.listOffset,
                            n = Object(_.e)(this.carouselItems.length, t),
                            i = Object(_.f)(this.carouselItems.length, t);
                        return this.renderItem(this.carouselItems[n], e, i)
                    }, t
                }(o.Component),
                M = Object(y.compose)(Object(d.a)(x, {
                    options: function() {
                        return {
                            variables: {
                                language: l.o.intl.getLanguageCode(),
                                first: 8,
                                acceptedMature: l.l.get("mature", !1)
                            }
                        }
                    }
                }), Object(w.c)("LoggedInCarousel"))(L);
            var j = Object(b.connect)(function(e) {
                    return {
                        sideNavCollapsed: !e.ui.sideNavExpanded,
                        hasActivePlayer: void 0 !== e.videoPlayer.activeVideoPlayerInstanceRefID
                    }
                })(M),
                A = n("TDc0"),
                U = "twilight-onboarding",
                W = "twilight-onboarding-prompt__dismissed";

            function B() {
                return l.o.storage.get(U, !1)
            }

            function G() {
                return l.o.storage.get(W, !1)
            }
            var z = n("AO3T"),
                H = 3;

            function q(e, t) {
                var n = l.o.experiments.getAssignment(p.b.WebOnboarding);
                return !G() && Object(A.g)(n) && e < H && Object(A.h)(new Date(t))
            }

            function Q(e) {
                Object(z.g)({
                    source: e
                }), l.o.storage.set(U, !0), window.location.assign("/hi" + location.search)
            }
            var Y = n("Bh3T"),
                $ = n("sSlw"),
                K = n("9pSj"),
                X = n("ZDlU"),
                Z = n("2iEm"),
                J = n("kduP"),
                ee = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        var e = this.props,
                            t = o.createElement(T.Va, {
                                padding: 1
                            }, o.createElement(T.V, {
                                fontSize: T.Aa.Size5,
                                color: T.O.Alt2
                            }, Object(l.d)("{title}", {
                                title: e.title
                            }, "GameListComponent"))),
                            n = o.createElement(T.xb, {
                                background: T.r.Alt,
                                padding: 1
                            }, o.createElement(T.Na, {
                                fullWidth: !0,
                                fullHeight: !0,
                                display: T.W.Block
                            }, o.createElement(Z.a, a.__assign({
                                to: e.viewAllLinkTo
                            }, Object(T.bc)(e)), Object(l.d)("View All", "GameListComponent")))),
                            i = [];
                        if (e.loading)
                            for (var r = 0; r < e.limit; r++) i.push(o.createElement(T.Va, {
                                key: r,
                                margin: {
                                    bottom: 1
                                }
                            }, o.createElement(T.o, {
                                ratio: T.p.Aspect3x4
                            }, o.createElement(T.cb, null)), o.createElement(T.Va, null, o.createElement(T.V, null, o.createElement(T.cb, {
                                width: 100
                            })), o.createElement(T.V, null, o.createElement(T.cb, {
                                width: 70
                            })))));
                        else e.items && e.items.length > 0 && (i = e.items.map(function(e, t) {
                            if (!e) return null;
                            var n = e.id,
                                i = e.name,
                                r = e.viewersCount,
                                a = e.boxArtURL;
                            return o.createElement(T.Va, {
                                key: n,
                                margin: {
                                    bottom: 1
                                }
                            }, o.createElement(T.y, {
                                linkTo: Object(J.c)(i),
                                title: i,
                                alt: i + " cover image",
                                src: a,
                                info: Object(l.d)("{viewerCount,number} viewers", {
                                    viewerCount: r
                                }, "GameListComponent"),
                                "data-a-target": "card-" + t,
                                "data-a-id": "card-" + i.replace(/ /g, "")
                            }))
                        }));
                        return o.createElement(T.xb, {
                            elevation: 1,
                            background: T.r.Base,
                            display: T.W.Hide,
                            breakpointMedium: {
                                display: T.W.Block
                            }
                        }, t, o.createElement(T.Va, {
                            padding: {
                                x: 1
                            }
                        }, o.createElement(T.Tb, {
                            gutterSize: T.Vb.ExtraSmall,
                            childWidth: T.Ub.ExtraSmall,
                            placeholderItems: 18
                        }, i)), n)
                    }, t = a.__decorate([Object(w.c)("GameList", {
                        autoReportInteractive: !0
                    })], t)
                }(o.Component),
                te = n("aU5I"),
                ne = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return a.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.postRender()
                    }, t.prototype.componentDidUpdate = function() {
                        this.postRender()
                    }, t.prototype.render = function() {
                        var e = [];
                        return this.props.data.error ? o.createElement(X.a, {
                            message: Object(l.d)("Followed Games are unavailable at this time.", "FollowedGamesCompoment")
                        }) : (this.props.data.loading || (e = function(e) {
                            var t = [];
                            return (e.currentUser && e.currentUser.followedGames && e.currentUser.followedGames.nodes || []).forEach(function(e) {
                                return e && e.id && t.push({
                                    id: e.id,
                                    name: e.name,
                                    viewersCount: e.viewersCount,
                                    boxArtURL: e.boxArtURL
                                })
                            }), t
                        }(this.props.data)), this.props.data.loading || e && e.length > 0 ? o.createElement(ee, {
                            "data-a-target": "view-all-followed-games-link",
                            items: e,
                            limit: 18,
                            loading: this.props.data.loading,
                            title: Object(l.d)("Followed Games", "FollowedGamesCompoment"),
                            viewAllLinkTo: "/directory/following/games"
                        }) : null)
                    }, t.prototype.postRender = function() {
                        this.props.data.loading || this.props.latencyTracking.reportInteractive()
                    }, t
                }(o.Component);
            var ie = Object(y.compose)(Object(d.a)(te, {
                    options: {
                        variables: {
                            limit: 18
                        }
                    }
                }), Object(w.c)("FollowedGames"))(ne),
                re = n("gvGA"),
                ae = n("8/mp"),
                oe = n("hV6K"),
                se = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.startOnboarding = function() {
                            Q(z.b.HomepageCTA)
                        }, n.dismissOnboardingPrompt = function() {
                            Object(z.f)(), l.o.storage.set(W, !0), n.setState({
                                hasDismissedOnboardingPrompt: !0
                            })
                        }, n.state = {
                            hasDismissedOnboardingPrompt: G()
                        }, n
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        return this.state.hasDismissedOnboardingPrompt ? null : o.createElement(T.xb, {
                            background: T.r.Base,
                            display: T.W.Flex,
                            flexDirection: T.Y.Row,
                            margin: {
                                bottom: 1
                            },
                            elevation: 3,
                            borderMarked: !0
                        }, o.createElement(T.Va, {
                            display: T.W.Flex,
                            flexDirection: T.Y.Column,
                            flexWrap: T.Z.NoWrap,
                            textAlign: T.Jb.Left,
                            padding: 1,
                            fullWidth: !0
                        }, o.createElement(T.V, {
                            type: T.Nb.H5,
                            color: T.O.Base,
                            bold: !0
                        }, Object(l.d)("Welcome to your homepage, {displayName}!", {
                            displayName: this.props.displayName || ""
                        }, "OnboardingPrompt")), o.createElement(T.Va, {
                            margin: {
                                y: 1
                            }
                        }, o.createElement(T.V, null, Object(l.d)("Here you can find your Pulse Feed and popular content on Twitch. Take a moment to personalize this page to your interests.", "OnboardingPrompt"))), o.createElement(T.Va, {
                            padding: {
                                bottom: .5
                            }
                        }, o.createElement(T.z, {
                            "data-test-selector": "onboarding-prompt__start",
                            onClick: this.startOnboarding
                        }, Object(l.d)("Start", "OnboardingPrompt")))), o.createElement(T.Va, {
                            flexShrink: 0,
                            margin: {
                                top: .5
                            }
                        }, o.createElement(T.A, {
                            "data-test-selector": "onboarding-prompt__dismiss",
                            ariaLabel: Object(l.d)("dismiss onboarding", "OnboardingPrompt"),
                            type: T.C.Default,
                            icon: T.nb.Close,
                            onClick: this.dismissOnboardingPrompt
                        })))
                    }, t
                }(o.Component),
                le = Object(w.c)("OnboardingPrompt", {
                    autoReportInteractive: !0
                })(se);
            var ce, de = Object(b.connect)(function(e) {
                    return {
                        displayName: e.session.user && e.session.user.displayName
                    }
                })(le),
                ue = n("geRD"),
                pe = n("u5aL"),
                me = n("eJ65"),
                he = n("mmRu"),
                fe = n("cpJf"),
                ge = "clip",
                ve = "post",
                be = "stream",
                ke = "vod";
            ! function(e) {
                e.Create = "create", e.Remove = "remove"
            }(ce || (ce = {}));
            var ye = function(e, t, n) {
                l.n.track(e, a.__assign({}, t, n))
            };

            function Se() {
                return function(e) {
                    return function(t) {
                        function n() {
                            var e = null !== t && t.apply(this, arguments) || this;
                            return e.state = {
                                impressionEventFired: !1,
                                impressionEvent: function(e) {
                                    return {}
                                }
                            }, e.triggerImpressionEvent = function() {
                                e.state.impressionEvent(e.context.feedTrackingProps), e.setState({
                                    impressionEventFired: !0
                                })
                            }, e.setImpressionEvent = function(t) {
                                e.setState({
                                    impressionEvent: t
                                })
                            }, e.setRef = function(t) {
                                return e.element = t
                            }, e
                        }
                        return a.__extends(n, t), n.prototype.componentDidMount = function() {
                            if (this.context.feedImpressionSettings && this.context.feedImpressionSettings.autoReport) return this.triggerImpressionEvent();
                            var e = this.context.registerReceiver;
                            e ? this.unregister = e(this) : l.j.warn("<FeedItem /> initialized missing a <ScrollableArea /> provider")
                        }, n.prototype.componentWillUnmount = function() {
                            this.unregister && this.unregister()
                        }, n.prototype.render = function() {
                            var t = {
                                impressionTracking: {
                                    onImpression: this.setImpressionEvent
                                }
                            };
                            return o.createElement("div", {
                                ref: this.setRef
                            }, o.createElement(e, a.__assign({}, this.props, t)))
                        }, n.prototype.checkVisible = function(e) {
                            return a.__awaiter(this, void 0, void 0, function() {
                                var t;
                                return a.__generator(this, function(n) {
                                    return this.element ? (t = this.element.getBoundingClientRect(), t.top < e.bottom && t.bottom > e.top && !this.state.impressionEventFired && this.triggerImpressionEvent(), [2]) : [2]
                                })
                            })
                        }, n.displayName = "WithFeedImpressionTracking(" + (e.displayName || e.name || "Component") + ")", n.contextTypes = {
                            registerReceiver: S.func,
                            feedTrackingProps: S.object,
                            feedImpressionSettings: S.object
                        }, n
                    }(o.Component)
                }
            }

            function Ce(e) {
                return function(t) {
                    return function(n) {
                        function i() {
                            var t = null !== n && n.apply(this, arguments) || this;
                            return t.getChildContext = function() {
                                var n = e(t.props);
                                return {
                                    feedTrackingProps: a.__assign({}, t.context.feedTrackingProps, n)
                                }
                            }, t
                        }
                        return a.__extends(i, n), i.prototype.render = function() {
                            var e = {
                                feedTrackingProps: this.getChildContext().feedTrackingProps
                            };
                            return o.createElement(t, a.__assign({}, this.props, e))
                        }, i.displayName = "WithFeedTracking(" + (t.displayName || t.name || "Component") + ")", i.contextTypes = {
                            feedTrackingProps: S.object
                        }, i.childContextTypes = {
                            feedTrackingProps: S.object
                        }, i
                    }(o.Component)
                }
            }
            var Ee = {
                RECOMMENDATION_FOLLOWED: "followed",
                RECOMMENDATION_VIEWED: "viewed",
                RECOMMENDATION_POPULAR: "popular"
            };

            function _e(e) {
                switch (e) {
                    case Ee.RECOMMENDATION_VIEWED:
                        return Object(l.d)("Because of your viewing history", "FeedItemReason");
                    case Ee.RECOMMENDATION_FOLLOWED:
                        return Object(l.d)("Because of who you follow", "FeedItemReason");
                    case Ee.RECOMMENDATION_POPULAR:
                        return Object(l.d)("Because it's popular", "FeedItemReason");
                    default:
                        return ""
                }
            }
            var we = function(e) {
                    if (0 === e.reasons.length) return o.createElement(T.Va, null);
                    var t = _e(e.reasons[0].reason);
                    return "" === t ? o.createElement(T.Va, null) : o.createElement(T.Va, {
                        padding: 1
                    }, t)
                },
                Te = function(e, t) {
                    var n = Oe(e);
                    ye(f.SpadeEventType.FeedCardImpression, n, t)
                },
                Oe = function(e) {
                    var t = e.item.reasons[0] ? _e(e.item.reasons[0].reason) : "";
                    switch (e.item.content.__typename) {
                        case "Clip":
                            var n = e.item.content;
                            return {
                                card_author_id: n.broadcaster && n.broadcaster.id || "",
                                display_reason: t,
                                feed_presentation: e.feedPresentation
                            };
                        case "Post":
                            return {
                                card_author_id: e.item.content.author.id,
                                display_reason: t,
                                feed_presentation: e.feedPresentation
                            };
                        case "Stream":
                            return {
                                card_author_id: e.item.content.broadcaster.id,
                                display_reason: t,
                                feed_presentation: e.feedPresentation
                            };
                        case "Video":
                            var i = e.item.content;
                            return {
                                card_author_id: i.owner && i.owner.id || "",
                                display_reason: t,
                                feed_presentation: e.feedPresentation
                            };
                        default:
                            return {
                                card_author_id: "",
                                display_reason: "",
                                feed_presentation: ""
                            }
                    }
                },
                Ne = function(e, t) {
                    var n = Ie(e.embed);
                    ye(f.SpadeEventType.FeedCardEmbedImpression, n, t)
                },
                Ie = function(e) {
                    switch (e.__typename) {
                        case "Clip":
                            var t = e;
                            return {
                                embed_entity: ge + ":" + t.id,
                                embed_id: t.id,
                                embed_type: ge,
                                media_type: "video"
                            };
                        case "PhotoOEmbed":
                            var n = e;
                            return {
                                embed_entity: "url:" + n.inputURL,
                                embed_id: n.inputURL,
                                embed_type: "url",
                                media_type: "photo"
                            };
                        case "Stream":
                            var i = e;
                            return {
                                embed_entity: be + ":" + i.id,
                                embed_id: i.id,
                                embed_type: be,
                                media_type: "video"
                            };
                        case "Video":
                            var r = e;
                            return {
                                embed_entity: ke + ":" + r.id,
                                embed_id: r.id,
                                embed_type: ke,
                                media_type: "video"
                            };
                        case "VideoOEmbed":
                            var a = e;
                            return {
                                embed_entity: "url:" + a.inputURL,
                                embed_id: a.inputURL,
                                embed_type: "url",
                                media_type: "video"
                            };
                        default:
                            return {
                                embed_entity: "",
                                embed_id: "",
                                embed_type: "",
                                media_type: ""
                            }
                    }
                },
                De = function(e, t) {
                    var n = Re(e.embed);
                    ye(f.SpadeEventType.FeedCardEmbedPlay, n, t)
                },
                Re = function(e) {
                    switch (e.__typename) {
                        case "Clip":
                            var t = e;
                            return {
                                action: "play",
                                embed_entity: ge + ":" + t.id,
                                embed_id: t.id,
                                embed_type: ge,
                                media_type: "video"
                            };
                        case "Stream":
                            var n = e;
                            return {
                                action: "play",
                                embed_entity: be + ":" + n.id,
                                embed_id: n.id,
                                embed_type: be,
                                media_type: "video"
                            };
                        case "Video":
                            var i = e;
                            return {
                                action: "play",
                                embed_entity: ke + ":" + i.id,
                                embed_id: i.id,
                                embed_type: ke,
                                media_type: "video"
                            };
                        case "VideoOEmbed":
                            var r = e;
                            return {
                                action: "play",
                                embed_entity: "url:" + r.inputURL,
                                embed_id: r.inputURL,
                                embed_type: "url",
                                media_type: "video"
                            };
                        default:
                            return {
                                action: "",
                                embed_entity: "",
                                embed_id: "",
                                embed_type: "",
                                media_type: ""
                            }
                    }
                },
                xe = function(e, t) {
                    var n = {
                        action: e.action,
                        entity: "post:" + e.postID,
                        post_id: e.postID,
                        post_content: e.postContent,
                        composer_location: e.composerLocation
                    };
                    ye(f.SpadeEventType.FeedPost, n, t)
                },
                Fe = function(e) {
                    var t = {
                        action: e.action,
                        entity: "post:" + e.postID,
                        post_id: e.postID,
                        post_content: e.postContent,
                        composer_location: e.composerLocation
                    };
                    l.n.track(f.SpadeEventType.FeedPost, t)
                },
                Pe = function(e, t) {
                    var n = function(e) {
                            var t = e.split(":");
                            return t.length < 2 ? {
                                type: "",
                                id: ""
                            } : {
                                type: t[0],
                                id: t[1]
                            }
                        }(e.entity),
                        i = {
                            action: e.action,
                            reaction_int: e.reactionInt,
                            reaction_text: e.reactionText,
                            target_entity: e.entity,
                            target_id: n.id,
                            target_type: n.type
                        };
                    ye(f.SpadeEventType.FeedReaction, i, t)
                },
                Ve = n("2rRr"),
                Le = Object(w.c)("EmbedInfo", {
                    autoReportInteractive: !0
                })(function(e) {
                    var t = e.title,
                        n = e.author,
                        i = e.externalAuthorName,
                        r = e.description,
                        a = null,
                        s = null;
                    return n ? (a = o.createElement(T.Va, {
                        margin: {
                            right: 1
                        },
                        flexShrink: 0
                    }, o.createElement(Z.a, {
                        to: "/" + n.login,
                        "data-a-target": "pulse-profile-picture"
                    }, o.createElement(T.Na, {
                        flexShrink: 0
                    }, o.createElement(T.q, {
                        size: 40,
                        src: n.profileImageURL,
                        alt: Object(l.d)("{authorName}'s profile picture", {
                            authorName: n.displayName
                        }, "FeedEmbedInfo")
                    })))), s = o.createElement(T.V, {
                        fontSize: T.Aa.Size6,
                        color: T.O.Alt
                    }, o.createElement(Z.a, {
                        to: "/" + n.login,
                        "data-a-target": "pulse-displayname-link"
                    }, n.displayName))) : i && "" !== i && (s = o.createElement(T.V, {
                        fontSize: T.Aa.Size6,
                        color: T.O.Alt
                    }, i)), o.createElement(T.xb, {
                        display: T.W.Flex,
                        flexWrap: T.Z.NoWrap,
                        padding: 1,
                        background: T.r.Base
                    }, a, o.createElement(T.Va, {
                        flexGrow: 1,
                        overflow: T.Ya.Hidden
                    }, s, o.createElement(T.V, {
                        fontSize: T.Aa.Size6,
                        color: T.O.Base,
                        bold: !0,
                        ellipsis: !0
                    }, t), r && o.createElement(T.V, {
                        fontSize: T.Aa.Size6,
                        color: T.O.Alt2,
                        noWrap: !0
                    }, r)))
                }),
                Me = n("vP7P"),
                je = n("eFQ3"),
                Ae = function(e, t) {
                    var n = e.embed,
                        i = n.broadcaster,
                        r = n.clipTitle,
                        a = n.clipCreatedAt,
                        s = n.durationSeconds,
                        l = n.embedURL,
                        c = n.thumbnailURL,
                        d = n.video,
                        u = n.viewCount,
                        p = d && d.game ? d.game.name : "";
                    return o.createElement(T.Va, null, o.createElement(Ve.a, {
                        createdAt: a,
                        lengthSeconds: s,
                        onClick: function() {
                            De(e, t.feedTrackingProps)
                        },
                        thumbnailURL: c,
                        type: Ve.b.Clip,
                        viewCount: u
                    }, o.createElement(Me.a, {
                        embedURL: l,
                        playerTypeOverride: je.a.Feed
                    })), o.createElement(Le, {
                        author: i,
                        title: r,
                        description: p
                    }))
                };
            Ae.contextTypes = {
                feedTrackingProps: S.object
            };
            var Ue = Object(w.c)("ClipEmbed", {
                    autoReportInteractive: !0
                })(Ae),
                We = Object(w.c)("PhotoOEmbed", {
                    autoReportInteractive: !0
                })(function(e) {
                    var t = e.embed,
                        n = t.title,
                        i = t.inputURL,
                        r = t.providerName,
                        a = t.authorName,
                        s = t.thumbnail;
                    return o.createElement("a", {
                        href: "" + i,
                        target: "_blank",
                        rel: "noopener noreferrer"
                    }, o.createElement(T.o, {
                        ratio: T.p.Aspect16x9
                    }, o.createElement(T.Va, null, o.createElement(T.Na, {
                        fullWidth: !0,
                        fullHeight: !0,
                        position: T.db.Absolute
                    }, o.createElement("img", {
                        src: s && s.url || l.o.config.defaultStreamPreviewURL
                    })))), o.createElement(Le, {
                        externalAuthorName: a || "",
                        title: n || "",
                        description: r || ""
                    }))
                }),
                Be = function(e, t) {
                    var n = e.embed,
                        i = n.broadcaster,
                        r = n.game,
                        a = n.title,
                        s = n.previewImageURL,
                        l = n.viewersCount,
                        c = r ? r.name : "";
                    return o.createElement(T.Va, null, o.createElement(Ve.a, {
                        onClick: function() {
                            De(e, t.feedTrackingProps)
                        },
                        thumbnailURL: s,
                        type: Ve.b.Stream,
                        viewCount: l
                    }, o.createElement(Me.a, {
                        channelLogin: i.login,
                        playerTypeOverride: je.a.Feed
                    })), o.createElement(Le, {
                        author: i,
                        title: a,
                        description: c
                    }))
                };
            Be.contextTypes = {
                feedTrackingProps: S.object
            };
            var Ge = Object(w.c)("StreamEmbed", {
                    autoReportInteractive: !0
                })(Be),
                ze = function(e, t) {
                    var n = e.embed,
                        i = n.id,
                        r = n.owner,
                        a = n.lengthSeconds,
                        s = n.game,
                        l = n.publishedAt,
                        c = n.previewThumbnailURL,
                        d = n.title,
                        u = n.videoViewCount,
                        p = s ? s.name : "";
                    return o.createElement(T.Va, null, o.createElement(Ve.a, {
                        createdAt: l || "",
                        lengthSeconds: a || 0,
                        onClick: function() {
                            De(e, t.feedTrackingProps)
                        },
                        thumbnailURL: c,
                        type: Ve.b.Video,
                        viewCount: u
                    }, o.createElement(Me.a, {
                        vodID: i,
                        playerTypeOverride: je.a.Feed
                    })), o.createElement(Le, {
                        author: r,
                        title: d || "",
                        description: p || ""
                    }))
                };
            ze.contextTypes = {
                feedTrackingProps: S.object
            };
            var He = Object(w.c)("VideoEmbed", {
                    autoReportInteractive: !0
                })(ze),
                qe = (n("5LIN"), function(e, t) {
                    var n = e.embed,
                        i = n.title,
                        r = n.providerName,
                        a = n.authorName,
                        s = n.html,
                        c = n.thumbnail,
                        d = s.replace("autoplay=false", "autoplay=true");
                    return o.createElement(T.Va, null, o.createElement(Ve.a, {
                        thumbnailURL: c && c.url || l.o.config.defaultStreamPreviewURL,
                        type: Ve.b.VideoOEmbed,
                        onClick: function() {
                            De(e, t.feedTrackingProps)
                        }
                    }, o.createElement("div", {
                        className: "video-oembed-container",
                        dangerouslySetInnerHTML: {
                            __html: d
                        }
                    })), o.createElement(Le, {
                        externalAuthorName: a || "",
                        title: i || "",
                        description: r || ""
                    }))
                });
            qe.contextTypes = {
                feedTrackingProps: S.object
            };
            var Qe, Ye = {
                    PhotoOEmbed: We,
                    VideoOEmbed: Object(w.c)("VideoOEmbed", {
                        autoReportInteractive: !0
                    })(qe),
                    Clip: Ue,
                    Stream: Ge,
                    Video: He
                },
                $e = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onImpression = function(e) {
                            Ne({
                                embed: t.props.embed
                            }, e)
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive(), this.props.impressionTracking.onImpression(this.onImpression)
                    }, t.prototype.render = function() {
                        var e = Ye[this.props.embed.__typename];
                        return e ? o.createElement(e, {
                            embed: this.props.embed
                        }) : o.createElement(T.Va, null)
                    }, t = a.__decorate([Object(w.c)("Embed"), Se()], t)
                }(o.Component),
                Ke = n("0/CX"),
                Xe = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return a.__extends(t, e), t.prototype.componentDidUpdate = function() {
                        this.props.data && this.props.data.embed && this.props.onLoad(this.props.url, this.props.data.embed)
                    }, t.prototype.render = function() {
                        return null
                    }, t = a.__decorate([Object(d.a)(Ke, {
                        skip: function(e) {
                            return !e.url
                        },
                        options: function(e) {
                            return {
                                variables: {
                                    url: e.url
                                }
                            }
                        }
                    })], t)
                }(o.Component),
                Ze = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            cachedEmbeds: {}
                        }, t.onEmbedLoad = function(e, n) {
                            var i;
                            t.setState({
                                cachedEmbeds: a.__assign({}, t.state.cachedEmbeds, (i = {}, i[e] = n, i))
                            })
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.componentDidUpdate = function() {
                        var e = this.state.cachedEmbeds[this.props.url];
                        e && this.props.onLoad(this.props.url, e)
                    }, t.prototype.render = function() {
                        var e = this.props.url;
                        return !e || this.state.cachedEmbeds[e] ? null : o.createElement(Xe, {
                            url: e,
                            onLoad: this.onEmbedLoad
                        })
                    }, t
                }(o.Component),
                Je = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            embed: void 0,
                            removedEmbedURL: ""
                        }, t.onEmbedLoad = function(e, n) {
                            t.state.embed !== n && (t.setState({
                                embed: n
                            }), t.props.onSetEmbed({
                                embed: n,
                                sourceURL: e
                            }))
                        }, t.removeEmbed = function() {
                            t.setState({
                                embed: void 0,
                                removedEmbedURL: t.props.embedURL
                            }), t.props.onSetEmbed()
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.componentDidUpdate = function() {
                        !this.props.embedURL && this.state.removedEmbedURL && this.setState({
                            removedEmbedURL: ""
                        })
                    }, t.prototype.render = function() {
                        var e = this.props.embedURL;
                        return (this.state.embed || this.state.removedEmbedURL === this.props.embedURL) && (e = ""), o.createElement(T.Va, null, this.state.embed && o.createElement(T.Va, {
                            position: T.db.Relative,
                            margin: {
                                top: 1
                            }
                        }, o.createElement(T.Va, {
                            className: "embed-preview-close",
                            position: T.db.Absolute,
                            zIndex: T.ac.Default,
                            attachTop: !0,
                            attachRight: !0
                        }, o.createElement(T.A, {
                            onClick: this.removeEmbed,
                            overlay: !0,
                            icon: T.nb.Close,
                            ariaLabel: Object(l.d)("Close", "EmbedPreview")
                        })), o.createElement($e, {
                            embed: this.state.embed
                        })), o.createElement(Ze, {
                            url: e,
                            onLoad: this.onEmbedLoad
                        }))
                    }, t
                }(o.Component),
                et = /(?:https?:\/\/)?(?:[-a-zA-Z0-9@:%_\+~#=]+\.)+[a-z]{2,6}\b(?:[-a-zA-Z0-9@:%_\+.~#?&//=]*)/g;
            ! function(e) {
                e.HomePage = "home", e.Channel = "channel", e.Dashboard = "dashboard", e.Contextual = "contextual"
            }(Qe || (Qe = {}));
            var tt = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasInteractedOrPageload: t.props.firstPageLoaded,
                        disabled: !1,
                        shareToTwitter: !1,
                        isEmotePickerMenuVisible: !1,
                        isTwitterBubbleVisible: !1,
                        embed: void 0,
                        inputEmbedURL: ""
                    }, t.minHeight = 50, t.setTextArea = function(e) {
                        t.textArea = e, t.resize()
                    }, t.handleSetEmbed = function(e) {
                        t.setState({
                            embed: e
                        })
                    }, t.parseEmbeds = function() {
                        if (t.textArea) {
                            var e = t.textArea.value.match(et);
                            t.setState({
                                inputEmbedURL: e && e.length ? e[0] : ""
                            })
                        }
                    }, t.onKeyDown = function(e) {
                        (e.metaKey || e.ctrlKey) && "Enter" === e.key && t.onSubmit()
                    }, t.resize = function() {
                        t.textArea && (t.textArea.style.height = t.minHeight + "px", t.textArea.style.height = t.textArea.scrollHeight + "px")
                    }, t.onChange = function(e) {
                        t.resize(), t.parseEmbeds()
                    }, t.onSubmit = function() {
                        var e = t.textArea.value.trim();
                        if (!t.state.disabled && e) {
                            t.disableComposer();
                            var n = [],
                                i = t.state.embed || {
                                    sourceURL: "",
                                    embed: void 0
                                };
                            i && i.sourceURL && i.embed && n.push(i), t.props.onCreate(e, n, t.state.shareToTwitter).then(function(e) {
                                t.resetComposer();
                                var n = e.data.createPost.post,
                                    i = n.id.split(":"),
                                    r = {
                                        action: ce.Create,
                                        postID: i[i.length - 1],
                                        postContent: n.body && n.body.content || void 0,
                                        composerLocation: t.props.composerLocation
                                    };
                                Fe(r)
                            }, function() {
                                t.enableComposer()
                            })
                        }
                    }, t.interact = function() {
                        t.setState({
                            hasInteractedOrPageload: !0
                        })
                    }, t.onFocus = function() {
                        t.interact()
                    }, t.onMouseEnter = function() {
                        t.interact()
                    }, t.disableComposer = function() {
                        t.setState({
                            disabled: !0
                        })
                    }, t.enableComposer = function() {
                        t.setState({
                            disabled: !1
                        })
                    }, t.resetComposer = function() {
                        t.textArea.value = "", t.textArea.selectionStart = 0, t.textArea.selectionEnd = 0, t.setState({
                            shareToTwitter: !1,
                            embed: void 0,
                            inputEmbedURL: ""
                        }), t.enableComposer()
                    }, t.toggleShareActivity = function() {
                        t.setState(function(e) {
                            return {
                                shareToTwitter: !e.shareToTwitter
                            }
                        })
                    }, t.onEmotePickerClickOut = function() {
                        t.setState({
                            isEmotePickerMenuVisible: !1
                        })
                    }, t.closeTwitterBubble = function() {
                        t.setState({
                            isTwitterBubbleVisible: !1
                        })
                    }, t.toggleEmotePicker = function() {
                        t.interact(), t.setState(function(e) {
                            return {
                                isEmotePickerMenuVisible: !e.isEmotePickerMenuVisible
                            }
                        })
                    }, t.onClickEmote = function(e, n) {
                        e += " ", t.textArea.selectionStart > 0 && " " !== t.textArea.value[t.textArea.selectionStart - 1] && (e = " " + e);
                        var i = t.textArea.selectionStart + e.length,
                            r = t.textArea.value.substring(0, t.textArea.selectionStart) + e + t.textArea.value.substring(t.textArea.selectionEnd, t.textArea.value.length);
                        t.textArea.value = r, t.textArea.focus(), t.textArea.selectionStart = i, t.textArea.selectionEnd = i
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    !this.props.firstPageLoaded && e.firstPageLoaded && this.setState({
                        hasInteractedOrPageload: !0
                    })
                }, t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = Object(l.d)("Post", "Composer"),
                        t = o.createElement(he.b, {
                            key: "emote-picker",
                            onClick: this.toggleEmotePicker
                        }),
                        n = null;
                    this.state.hasInteractedOrPageload && (n = o.createElement(he.c, {
                        channelOwnerID: this.props.userID,
                        emotePickerSource: fe.a.Feeds,
                        onClickEmote: this.onClickEmote,
                        toggleVisibility: this.toggleEmotePicker,
                        visible: this.state.isEmotePickerMenuVisible && !this.state.disabled,
                        direction: T.v.BottomRight
                    }));
                    var i, r = o.createElement(pe.a, {
                        onClickOut: this.onEmotePickerClickOut
                    }, t, n);
                    return i = this.props.isConnectedToTwitter ? o.createElement(T.N, {
                        "data-test-selector": "twitter-checkbox",
                        id: "share-twitter-toggle",
                        label: Object(l.d)("Share Posts to Twitter", "TwitterShare"),
                        onChange: this.toggleShareActivity,
                        checked: this.state.shareToTwitter
                    }) : o.createElement(T.T, {
                        to: "/settings/connections"
                    }, Object(l.d)("Connect Twitter", "ConnectTwitter")), o.createElement(T.xb, {
                        elevation: 1,
                        padding: 1,
                        margin: {
                            bottom: 1
                        },
                        background: T.r.Base,
                        position: T.db.Relative,
                        "data-a-target": "pulse-post-container"
                    }, o.createElement("div", {
                        onMouseEnter: this.onMouseEnter
                    }, o.createElement(T.Kb, {
                        "data-test-selector": "composer",
                        "data-a-target": "pulse-input",
                        disabled: this.state.disabled,
                        onKeyDown: this.onKeyDown,
                        onChange: this.onChange,
                        onFocus: this.onFocus,
                        placeholder: this.props.placeholder ? this.props.placeholder : "",
                        noResize: !0,
                        refDelegate: this.setTextArea,
                        paddingRight: 30,
                        overflow: T.Ya.Hidden
                    }), o.createElement(T.xb, {
                        textAlign: T.Jb.Right,
                        position: T.db.Absolute,
                        attachTop: !0,
                        attachRight: !0,
                        margin: {
                            top: 1,
                            right: 1
                        }
                    }, r), o.createElement(T.Va, {
                        display: T.W.Flex,
                        margin: {
                            top: 1
                        }
                    }, o.createElement(T.Va, {
                        flexGrow: 1
                    }), o.createElement(T.Va, {
                        margin: {
                            right: 1
                        }
                    }, o.createElement(pe.a, {
                        onClickOut: this.closeTwitterBubble
                    }, o.createElement(me.a, null, o.createElement(T.A, {
                        icon: T.nb.Gear,
                        ariaLabel: Object(l.d)("Composer Settings", "ComposerSettings"),
                        "data-test-selector": "composer-setting",
                        "data-a-target": "pulse-settings"
                    }), o.createElement(T.u, {
                        direction: T.v.Left
                    }, o.createElement(T.Va, {
                        padding: 1
                    }, i))))), o.createElement(T.Va, null, o.createElement(T.z, {
                        "data-test-selector": "submit-post",
                        disabled: this.state.disabled,
                        ariaLabel: e,
                        onClick: this.onSubmit,
                        "data-a-target": "pulse-post-button"
                    }, e)))), !this.state.disabled && o.createElement(Je, {
                        embedURL: this.state.inputEmbedURL,
                        onSetEmbed: this.handleSetEmbed
                    }))
                }, t = a.__decorate([Object(w.c)("Composer")], t)
            }(o.Component);
            var nt, it = Object(b.connect)(function(e) {
                    return {
                        firstPageLoaded: e.session.firstPageLoaded
                    }
                })(tt),
                rt = n("1/iK"),
                at = n("y5D0"),
                ot = n("kRBY"),
                st = n("OpME"),
                lt = n("a1OF");
            ! function(e) {
                e[e.Add = 0] = "Add", e[e.Remove = 1] = "Remove"
            }(nt || (nt = {}));
            n("oTxG");
            var ct = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            disabled: !1
                        }, t.toggleReaction = function() {
                            var e;
                            if (!t.state.disabled) {
                                var n = t.props.reaction.self.hasReacted ? nt.Remove : nt.Add,
                                    i = ((e = {})[nt.Add] = t.props.addReaction, e[nt.Remove] = t.props.removeReaction, e);
                                t.setState({
                                    disabled: !0
                                }), i[n](t.props.reaction.emote.id, t.props.reaction.emote.token).then(function() {
                                    return t.setState({
                                        disabled: !1
                                    })
                                }, function() {
                                    return t.setState({
                                        disabled: !1
                                    })
                                })
                            }
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        var e = this.props.reaction,
                            t = e.count,
                            n = e.emote,
                            i = e.self,
                            r = n.token;
                        return parseInt(n.id, 10) < 15 && (r = Object(st.d)(n.token)), o.createElement("div", a.__assign({
                            onClick: this.toggleReaction
                        }, Object(T.bc)(this.props)), o.createElement(T.Qb, {
                            label: 0 === t ? r : t + " " + r,
                            direction: T.Sb.Top,
                            align: T.Rb.Center
                        }, o.createElement(T.Va, {
                            alignItems: T.f.Center,
                            className: i.hasReacted ? "activity-reaction activity-reaction--active" : "activity-reaction",
                            display: T.W.Flex
                        }, o.createElement(T.Va, {
                            className: "activity-reaction__emote-contain"
                        }, o.createElement("img", a.__assign({
                            alt: r,
                            className: "activity-reaction__emote"
                        }, Object(lt.d)("endorse" === n.id ? "1" : n.id)))))))
                    }, t = a.__decorate([Object(w.c)("Reaction")], t)
                }(o.Component),
                dt = Object(w.c)("AdditionalReactions", {
                    autoReportInteractive: !0
                })(function(e) {
                    var t = e.reactions.map(function(t, n) {
                        return o.createElement(T.Va, {
                            key: n,
                            margin: {
                                right: 1,
                                bottom: 1
                            }
                        }, o.createElement(ct, {
                            key: n,
                            reaction: t,
                            addReaction: e.addReaction,
                            removeReaction: e.removeReaction,
                            "data-a-target": "additional-reaction-" + n
                        }))
                    });
                    return o.createElement(T.u, {
                        direction: e.position || T.v.TopCenter,
                        size: T.w.Small,
                        show: !0
                    }, o.createElement(T.xb, {
                        display: T.W.Flex,
                        flexWrap: T.Z.Wrap,
                        padding: {
                            left: 1,
                            top: 1
                        }
                    }, t))
                }),
                ut = Object(w.c)("TopReactions", {
                    autoReportInteractive: !0
                })(function(e) {
                    var t = e.reactions.map(function(t, n) {
                        return o.createElement(T.Va, {
                            key: n,
                            margin: {
                                right: 1
                            }
                        }, o.createElement(ct, {
                            key: n,
                            reaction: t,
                            addReaction: e.addReaction,
                            removeReaction: e.removeReaction,
                            "data-a-target": "top-reaction-" + n
                        }))
                    });
                    return o.createElement(T.xb, {
                        display: T.W.Flex
                    }, t)
                });

            function pt(e) {
                var t = [];
                return e && 0 !== e.length && (t = e.slice().sort(function(e, t) {
                    return function(e, t) {
                        if (e.emote.id === kt.emote.id) return -1;
                        if (t.emote.id === kt.emote.id) return 1;
                        var n = e.self.hasReacted,
                            i = t.self.hasReacted;
                        if (e.count === t.count) {
                            if (n && !i) return -1;
                            if (!n && i) return 1
                        }
                        return t.count - e.count
                    }(e, t)
                })), t
            }
            var mt = function(e, t, n) {
                    return function(i, r, o, s) {
                        var l, c = (t = t || []).map(function(e) {
                                return e.emote.id
                            }).indexOf(r),
                            d = t.slice();
                        return c > -1 ? d[c] = a.__assign({}, t[c], {
                            count: t[c].count + function(e, t) {
                                return e === nt.Add && t.self.hasReacted ? 0 : e === nt.Add ? 1 : -1
                            }(e, t[c]),
                            self: a.__assign({}, t[c].self, {
                                hasReacted: e === nt.Add
                            })
                        }) : e === nt.Add && d.push(a.__assign({}, kt, {
                            emote: a.__assign({}, kt.emote, {
                                id: r,
                                token: o
                            }),
                            count: 1,
                            self: a.__assign({}, kt.self, {
                                hasReacted: !0
                            })
                        })), n(a.__assign({}, Object(ue.a)({
                            entityID: i,
                            emoteID: r
                        }), {
                            optimisticResponse: (l = {}, l[e === nt.Add ? "addReaction" : "removeReaction"] = {
                                content: a.__assign({}, s, {
                                    reactions: d
                                }),
                                __typename: e === nt.Add ? "AddReactionPayload" : "RemoveReactionPayload"
                            }, l)
                        }))
                    }
                },
                ht = n("ajXS"),
                ft = n("XW/r"),
                gt = n("0D4T"),
                vt = (n("0NX8"), function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.closeEmoteSelector = function() {
                            n.setState({
                                emoteSelectorVisible: !1
                            })
                        }, n.emotesLoaded = function() {
                            n.setState({
                                emotesLoaded: !0
                            })
                        }, n.onEmoteSelect = function(e, t) {
                            n.props.onEmoteSelect(t, e), n.closeEmoteSelector()
                        }, n.toggleEmoteSelector = function() {
                            n.setState(function(e) {
                                return {
                                    emoteSelectorVisible: !e.emoteSelectorVisible
                                }
                            })
                        }, n.state = {
                            emotesLoaded: !1,
                            emoteSelectorVisible: !1
                        }, n
                    }
                    return a.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        var e = o.createElement("div", {
                            onClick: this.toggleEmoteSelector,
                            "data-a-target": "add-reaction-button",
                            "data-test-selector": "add-reaction-button"
                        }, this.props.children);
                        return this.state.emoteSelectorVisible || (e = o.createElement(T.Qb, {
                            label: Object(l.d)("Add a Reaction", "ReactionSelector"),
                            direction: T.Sb.Top,
                            align: T.Rb.Center
                        }, e)), o.createElement(T.Va, {
                            className: "reaction-selector",
                            position: T.db.Relative
                        }, o.createElement(pe.a, {
                            onClickOut: this.closeEmoteSelector
                        }, this.state.emoteSelectorVisible && o.createElement(gt.a, {
                            onClickEmote: this.onEmoteSelect,
                            emotePickerSource: fe.a.Feeds,
                            visible: this.state.emoteSelectorVisible && this.state.emotesLoaded,
                            toggleVisibility: this.toggleEmoteSelector,
                            onLoad: this.emotesLoaded,
                            direction: this.props.position || T.v.TopLeft
                        }), e))
                    }, t
                }(o.Component)),
                bt = Object(w.c)("ReactionSelector")(vt),
                kt = {
                    emote: {
                        id: "9",
                        token: "<3",
                        setID: "",
                        __typename: "Emote"
                    },
                    count: 0,
                    self: {
                        hasReacted: !1,
                        __typename: "ReactionSelfConnection"
                    },
                    __typename: "Reaction"
                },
                yt = 4,
                St = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            additionalReactionsVisible: !1
                        }, t.addReaction = function(e, n) {
                            return t.toggleReaction(nt.Add, e, n)
                        }, t.hideAdditional = function() {
                            t.setState({
                                additionalReactionsVisible: !1
                            })
                        }, t.removeReaction = function(e, n) {
                            return t.toggleReaction(nt.Remove, e, n)
                        }, t.toggleAdditional = function(e, n) {
                            n.preventDefault(), e.length <= yt || t.setState(function(e) {
                                return {
                                    additionalReactionsVisible: !e.additionalReactionsVisible
                                }
                            })
                        }, t.toggleReaction = function(e, n, i) {
                            if (!t.props.isLoggedIn) return t.props.login(), Promise.reject(new Error("user not logged in"));
                            var r = i;
                            return parseInt(n, 10) < 15 && (r = Object(st.d)(i)), (e === nt.Add ? t.props.addReaction : t.props.removeReaction)(t.props.parentEntity, n, i, t.props.parent).then(function(i) {
                                var a = {
                                    action: e === nt.Add ? ce.Create : ce.Remove,
                                    entity: t.props.parentEntity,
                                    reactionInt: n,
                                    reactionText: r
                                };
                                return Pe(a, t.context.feedTrackingProps), i
                            })
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        var e = this,
                            t = pt(this.props.reactions);
                        0 !== t.length && t[0].emote.id === kt.emote.id || (t = [kt].concat(t));
                        var n = this.props.emoteSelectorAndOverflowPos && this.props.emoteSelectorAndOverflowPos === T.v.Bottom ? T.v.BottomCenter : T.v.TopCenter,
                            i = null;
                        this.state.additionalReactionsVisible && (i = o.createElement(dt, {
                            reactions: t.slice(yt),
                            addReaction: this.addReaction,
                            removeReaction: this.removeReaction,
                            position: n
                        }));
                        var r = this.props.reactions ? this.props.reactions.reduce(function(e, t) {
                                return e + t.count
                            }, 0) : 0,
                            a = null;
                        this.props.reactions && r > 0 && (a = this.props.reactions.length >= yt ? o.createElement("a", {
                            href: "#",
                            onClick: function(n) {
                                return e.toggleAdditional(t, n)
                            },
                            "data-test-selector": "additional-toggle-tracking"
                        }, r) : o.createElement("span", {
                            "data-test-selector": "additional-toggle-tracking",
                            "data-a-target": "pulse-reaction-count"
                        }, r)), this.state.additionalReactionsVisible || (a = o.createElement(T.Qb, {
                            label: Object(l.d)("Total Reactions", "ReactionList"),
                            direction: T.Sb.Top,
                            align: T.Rb.Center
                        }, a)), n = this.props.emoteSelectorAndOverflowPos && this.props.emoteSelectorAndOverflowPos === T.v.Bottom ? T.v.BottomLeft : T.v.TopLeft;
                        var s = null;
                        return this.props.isLoggedIn && (s = o.createElement(T.Va, {
                            margin: {
                                right: 1
                            }
                        }, o.createElement(bt, {
                            onEmoteSelect: this.addReaction,
                            position: n
                        }, o.createElement(T.mb, {
                            asset: T.nb.AddReaction,
                            type: T.ob.Brand,
                            width: 24,
                            height: 24
                        })))), o.createElement(T.xb, {
                            display: T.W.Flex,
                            alignItems: T.f.Center,
                            padding: 1
                        }, o.createElement(ut, {
                            reactions: t.slice(0, yt),
                            addReaction: this.addReaction,
                            removeReaction: this.removeReaction
                        }), o.createElement(T.Va, {
                            margin: {
                                right: 1
                            }
                        }, s), o.createElement(T.Na, {
                            position: T.db.Relative
                        }, o.createElement(pe.a, {
                            onClickOut: this.hideAdditional
                        }, i, a)))
                    }, t.contextTypes = {
                        feedTrackingProps: S.object
                    }, t = a.__decorate([Object(d.a)(ht, {
                        props: function(e) {
                            return {
                                addReaction: mt(nt.Add, e.ownProps.reactions, e.mutate)
                            }
                        }
                    }), Object(d.a)(ft, {
                        props: function(e) {
                            return {
                                removeReaction: mt(nt.Remove, e.ownProps.reactions, e.mutate)
                            }
                        }
                    }), Object(w.c)("Reactions")], t)
                }(o.Component);
            var Ct = Object(b.connect)(function(e) {
                    return {
                        isLoggedIn: Object(ot.f)(e)
                    }
                }, function(e) {
                    return Object(y.bindActionCreators)({
                        login: function() {
                            return Object(at.e)(rt.a.FeedReactionToggle)
                        }
                    }, e)
                })(St),
                Et = Object(w.c)("ClipContent", {
                    autoReportInteractive: !0
                })(function(e) {
                    var t = e.content,
                        n = t.slug,
                        i = t.reactions;
                    return o.createElement(T.Va, null, o.createElement($e, {
                        embed: e.content
                    }), o.createElement(Ct, {
                        parentEntity: "clip:" + n,
                        reactions: i,
                        parent: e.content
                    }))
                }),
                _t = n("ykET");
            n("2MRx");
            var wt = {
                Clip: Et,
                Post: Object(w.c)("PostContent", {
                    autoReportInteractive: !0
                })(function(e) {
                    var t = e.content,
                        n = t.author,
                        i = t.body,
                        r = t.createdAt,
                        a = t.embeds,
                        s = t.id,
                        c = t.reactions;
                    return o.createElement(T.Va, null, o.createElement(T.xb, {
                        display: T.W.Flex,
                        alignItems: T.f.Center,
                        padding: 1,
                        borderBottom: !0
                    }, o.createElement(T.Va, {
                        margin: {
                            right: 1
                        }
                    }, o.createElement(Z.a, {
                        to: {
                            pathname: "/" + n.login,
                            state: {
                                content: "author_avatar",
                                medium: "pulse_card"
                            }
                        },
                        "data-a-target": "pulse-profile-picture"
                    }, o.createElement(T.q, {
                        size: 40,
                        src: n.profileImageURL,
                        alt: Object(l.d)("{authorName}'s profile picture", {
                            authorName: n.displayName
                        }, "FeedPostContent")
                    }))), o.createElement(T.Va, {
                        flexGrow: 1
                    }, o.createElement(T.Va, {
                        display: T.W.Flex,
                        flexDirection: T.Y.Column
                    }, o.createElement(Z.a, {
                        to: {
                            pathname: "/" + n.login,
                            state: {
                                content: "author_name",
                                medium: "pulse_card"
                            }
                        }
                    }, o.createElement(T.V, {
                        fontSize: T.Aa.Size4,
                        color: T.O.Base,
                        bold: !0
                    }, n.displayName)), o.createElement(T.V, {
                        fontSize: T.Aa.Size6,
                        color: T.O.Alt2
                    }, o.createElement(T.Qb, {
                        label: function(e) {
                            return Object(l.d)("{dateTime, date, medium} {dateTime, time, short}", {
                                dateTime: e
                            }, "PostDate")
                        }(new Date(r)),
                        direction: T.Sb.Bottom
                    }, Object(l.h)(new Date(r))))))), i && o.createElement(T.xb, {
                        padding: 1,
                        className: "feed-item-text"
                    }, Object(_t.a)(i.content.trim(), i.emotes, n.login)), o.createElement(T.Va, null, a && a.slice(0, 1).map(function(e, t) {
                        return o.createElement($e, {
                            key: t,
                            embed: e
                        })
                    })), o.createElement(Ct, {
                        parentEntity: "post:" + s,
                        reactions: c,
                        emoteSelectorAndOverflowPos: e.emoteSelectorAndOverflowPos,
                        parent: e.content
                    }))
                }),
                Video: Object(w.c)("VideoContent", {
                    autoReportInteractive: !0
                })(function(e) {
                    var t = e.content,
                        n = t.id,
                        i = t.reactions;
                    return o.createElement(T.Va, null, o.createElement($e, {
                        embed: e.content
                    }), o.createElement(Ct, {
                        parentEntity: "vod:" + n,
                        reactions: i,
                        parent: e.content
                    }))
                }),
                Stream: function(e) {
                    return o.createElement($e, {
                        embed: e.content
                    })
                }
            };
            var Tt = function(e) {
                    var t = wt[e.content.__typename];
                    return o.createElement(t, {
                        content: e.content,
                        emoteSelectorAndOverflowPos: e.emoteSelectorAndOverflowPos
                    })
                },
                Ot = n("aCAx"),
                Nt = n("/HY+"),
                It = n("4qQ0"),
                Dt = n("e1GG"),
                Rt = (n("R0Op"), "delete"),
                xt = "delete-confirm",
                Ft = "report",
                Pt = "Post";

            function Vt(e) {
                return e.__typename === Pt
            }
            var Lt = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.closeViews = function() {
                        n.setState({
                            showDeleteConfirmView: !1,
                            showOptionView: !1
                        })
                    }, n.deletePost = function() {
                        if (n.props.deletePost) {
                            var e = n.props.content.id.split(":"),
                                t = e[e.length - 1];
                            n.props.deletePost(t).then(function() {
                                var e = {
                                    action: ce.Remove,
                                    postID: t
                                };
                                xe(e, n.context.feedTrackingProps)
                            })
                        }
                    }, n.getDeleteConfirmView = function() {
                        return o.createElement(T.Va, {
                            padding: 1
                        }, o.createElement(T.Sa, {
                            onClick: n.deletePost
                        }, o.createElement(T.Va, {
                            padding: {
                                y: .5,
                                x: 1
                            },
                            className: xt
                        }, Object(l.d)("Yes", "FeedItemOptions"))), o.createElement(T.Sa, {
                            onClick: n.showOptionView
                        }, o.createElement(T.Va, {
                            padding: {
                                y: .5,
                                x: 1
                            }
                        }, Object(l.d)("No", "FeedItemOptions"))))
                    }, n.getDeleteEl = function() {
                        var e = null;
                        return n.state.userCanDelete && n.props.deletePost && (e = o.createElement(T.Sa, {
                            onClick: n.showDeleteConfirmView
                        }, o.createElement(T.Va, {
                            className: Rt,
                            padding: {
                                y: .5,
                                x: 1
                            }
                        }, Object(l.d)("Delete", "FeedItemOptions")))), e
                    }, n.getOptionView = function() {
                        return n.state.loadingPermissions ? null : o.createElement(T.Va, {
                            padding: 1
                        }, o.createElement(T.Sa, {
                            onClick: n.showReportModal,
                            "data-a-target": "pulse-post-report"
                        }, o.createElement(T.Va, {
                            padding: {
                                y: .5,
                                x: 1
                            },
                            className: Ft
                        }, Object(l.d)("Report", "FeedItemOptions"))), n.getDeleteEl())
                    }, n.getPostPermissions = function() {
                        return a.__awaiter(n, void 0, void 0, function() {
                            var e, t, n;
                            return a.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        return this.setState({
                                            loadingPermissions: !0
                                        }), e = this.props.content.id.split(":"), [4, l.o.apollo.client.query({
                                            query: Dt,
                                            variables: {
                                                id: "post:" + e[e.length - 1]
                                            }
                                        })];
                                    case 1:
                                        return t = i.sent(), n = t.data.feedItemContent, this.setState({
                                            loadingPermissions: !1,
                                            permissionQueryData: t,
                                            userCanDelete: n && n.self && n.self.permissions && n.self.permissions.canDelete || !1
                                        }), [2]
                                }
                            })
                        })
                    }, n.showDeleteConfirmView = function() {
                        n.setState({
                            showDeleteConfirmView: !0,
                            showOptionView: !1
                        })
                    }, n.showReportModal = function() {
                        n.props.user ? n.props.showReportUserModal({
                            reportContext: n.getReportContext(n.props.content),
                            title: Object(l.d)("Report {itemType}", {
                                itemType: n.props.content.__typename
                            }, "ReportFeedPost")
                        }) : n.props.login()
                    }, n.showOptionView = function() {
                        n.setState({
                            showDeleteConfirmView: !1,
                            showOptionView: !0
                        })
                    }, n.toggleOptionView = function() {
                        n.state.showDeleteConfirmView || n.state.showOptionView ? n.closeViews() : n.state.showOptionView || n.setState({
                            showOptionView: !0
                        }), !1 === n.state.userCanDelete && Vt(n.props.content) && !n.state.permissionQueryData && n.getPostPermissions()
                    };
                    var i = !1,
                        r = t.content,
                        s = t.deletePost,
                        c = t.user;
                    return s && c && Vt(r) && c.id === r.author.id && (i = !0), n.state = {
                        loadingPermissions: !1,
                        permissionQueryData: void 0,
                        showDeleteConfirmView: !1,
                        showOptionView: !1,
                        userCanDelete: i
                    }, n
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = null;
                    return (this.state.showDeleteConfirmView || this.state.showOptionView && !this.state.loadingPermissions) && (e = o.createElement(T.u, {
                        direction: T.v.Left,
                        size: T.w.Small,
                        show: !0
                    }, this.state.showOptionView && this.getOptionView(), this.state.showDeleteConfirmView && this.getDeleteConfirmView())), o.createElement(T.Va, {
                        position: T.db.Relative
                    }, o.createElement(pe.a, {
                        onClickOut: this.closeViews
                    }, e, o.createElement("div", {
                        className: this.state.showOptionView || this.state.showDeleteConfirmView ? "button-icon--show" : "button-icon"
                    }, o.createElement(T.A, {
                        icon: T.nb.Gear,
                        ariaLabel: Object(l.d)("Post Options", "FeedPostOptions"),
                        onClick: this.toggleOptionView,
                        "data-a-target": "pulse-post-options"
                    }))))
                }, t.prototype.getReportContext = function(e) {
                    switch (e.__typename) {
                        case "Clip":
                            var t = e;
                            return {
                                contentType: It.a.Clip,
                                targetUserID: t.broadcaster && t.broadcaster.id || "",
                                contentID: t.slug,
                                additionalTrackingID: t.curator ? t.curator.id : ""
                            };
                        case Pt:
                            var n = e;
                            return {
                                contentType: It.a.ChannelFeedPost,
                                targetUserID: n.author.id,
                                contentID: n.id
                            };
                        case "Stream":
                            var i = e;
                            return {
                                contentType: It.a.User,
                                targetUserID: i.broadcaster.id
                            };
                        case "Video":
                            var r = e;
                            return {
                                contentType: It.a.Vod,
                                targetUserID: r.owner && r.owner.id || "",
                                contentID: r.id
                            };
                        default:
                            return {
                                contentType: It.a.User,
                                targetUserID: ""
                            }
                    }
                }, t.contextTypes = {
                    feedTrackingProps: S.object
                }, t = a.__decorate([Object(w.c)("FeedItemOptions")], t)
            }(o.Component);
            var Mt = Object(b.connect)(function(e) {
                    return {
                        user: Object(ot.e)(e)
                    }
                }, function(e) {
                    return Object(y.bindActionCreators)({
                        showReportUserModal: function(e) {
                            var t = a.__rest(e, []);
                            return Object(Ot.d)(Nt.a, t)
                        },
                        login: function() {
                            return Object(at.e)(rt.a.FeedReactionToggle)
                        }
                    }, e)
                })(Lt),
                jt = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onImpression = function(e) {
                            var n = {
                                feedPresentation: "inline",
                                item: t.props.item
                            };
                            Te(n, e)
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive(), this.props.impressionTracking.onImpression(this.onImpression)
                    }, t.prototype.render = function() {
                        return function(e) {
                            return void 0 !== wt[e]
                        }(this.props.item.content.__typename) ? o.createElement(T.xb, a.__assign({
                            elevation: 1,
                            margin: {
                                bottom: 1
                            },
                            background: T.r.Base,
                            position: T.db.Relative
                        }, Object(T.bc)(this.props), {
                            className: "feed-item"
                        }), o.createElement(T.Va, {
                            position: T.db.Absolute,
                            attachTop: !0,
                            attachRight: !0,
                            margin: {
                                top: .5,
                                right: .5
                            }
                        }, o.createElement(Mt, {
                            content: this.props.item.content,
                            deletePost: this.props.deletePost
                        })), o.createElement(we, {
                            reasons: this.props.item.reasons
                        }), o.createElement(Tt, {
                            content: this.props.item.content
                        })) : o.createElement(T.Va, null)
                    }, t = a.__decorate([Object(w.c)("FeedItem"), Ce(function(e) {
                        var t = e.item,
                            n = e.index,
                            i = function(e) {
                                var t = e.content.id;
                                switch (e.content.__typename) {
                                    case "Clip":
                                        var n = e.content;
                                        return {
                                            type: ge,
                                            id: n.slug
                                        };
                                    case "Post":
                                        var i = t.split(":");
                                        return {
                                            type: ve,
                                            id: i[i.length - 1]
                                        };
                                    case "Stream":
                                        var r = e.content;
                                        return {
                                            type: be,
                                            id: r.broadcaster.id + ":" + t
                                        };
                                    case "Video":
                                        return {
                                            type: ke,
                                            id: t
                                        };
                                    default:
                                        return {
                                            type: "",
                                            id: ""
                                        }
                                }
                            }(t);
                        return {
                            batch_id: t.tracking.batchID || "",
                            card_entity: i.type + ":" + i.id,
                            card_id: i.id,
                            card_impression_id: t.tracking.cardImpressionID || "",
                            card_type: i.type,
                            feed_index: n,
                            rec_generation_id: t.tracking.recGenerationID || "",
                            rec_generation_index: t.tracking.recGenerationIndex || null
                        }
                    }), Se()], t)
                }(o.Component);
            var At = Object(w.c)("Feed")(function(e) {
                    var t = function(e) {
                        var t = new Set;
                        return e.filter(function(e) {
                            if (!e.node.content || !e.node.content.id) return !1;
                            var n = t.has(e.node.content.id);
                            return n || t.add(e.node.content.id), !n
                        })
                    }(e.items.edges).map(function(t, n) {
                        var i = t.node;
                        return o.createElement(jt, {
                            key: i.content.id,
                            item: i,
                            index: n,
                            "data-a-target": "pulse-item-" + n,
                            deletePost: e.deletePost
                        })
                    });
                    return e.latencyTracking.reportInteractive(t.length), t.length ? o.createElement(T.Va, null, t) : o.createElement(T.Va, {
                        textAlign: T.Jb.Center
                    }, o.createElement(T.V, {
                        color: T.O.Alt2
                    }, Object(l.d)("There are no feed posts.", "ChannelFeedComponent")))
                }),
                Ut = n("NhAf"),
                Wt = function() {
                    return o.createElement(T.xb, {
                        elevation: 1,
                        margin: {
                            bottom: 2
                        },
                        background: T.r.Base
                    }, o.createElement(T.xb, {
                        display: T.W.Flex,
                        flexWrap: T.Z.NoWrap,
                        padding: 1,
                        background: T.r.Base,
                        borderBottom: !0
                    }, o.createElement(T.Va, {
                        margin: {
                            right: 1
                        }
                    }, o.createElement(T.V, null, o.createElement(T.cb, {
                        width: 40,
                        height: 40
                    }))), o.createElement(T.Va, {
                        flexGrow: 1
                    }, o.createElement(T.V, {
                        fontSize: T.Aa.Size6
                    }, o.createElement(T.cb, {
                        width: 100
                    })), o.createElement(T.V, {
                        fontSize: T.Aa.Size7
                    }, o.createElement(T.cb, {
                        width: 120
                    })))), o.createElement(T.Va, {
                        margin: {
                            bottom: .5
                        },
                        padding: 1
                    }, o.createElement(T.V, {
                        fontSize: T.Aa.Size6
                    }, o.createElement(T.cb, null)), o.createElement(T.V, {
                        fontSize: T.Aa.Size6
                    }, o.createElement(T.cb, null)), o.createElement(T.V, {
                        fontSize: T.Aa.Size6
                    }, o.createElement(T.cb, {
                        width: 280
                    }))))
                },
                Bt = function() {
                    return o.createElement(T.xb, {
                        elevation: 1,
                        margin: {
                            bottom: 2
                        },
                        background: T.r.Base
                    }, o.createElement(T.Va, {
                        margin: {
                            bottom: .5
                        }
                    }, o.createElement(T.o, {
                        ratio: T.p.Aspect16x9
                    }, o.createElement(T.cb, null))), o.createElement(T.xb, {
                        display: T.W.Flex,
                        flexWrap: T.Z.NoWrap,
                        padding: 1,
                        background: T.r.Base
                    }, o.createElement(T.Va, {
                        margin: {
                            right: 1
                        }
                    }, o.createElement(T.V, null, o.createElement(T.cb, {
                        width: 40,
                        height: 40
                    }))), o.createElement(T.Va, {
                        flexGrow: 1
                    }, o.createElement(T.V, {
                        fontSize: T.Aa.Size6
                    }, o.createElement(T.cb, {
                        width: 100
                    })), o.createElement(T.V, {
                        fontSize: T.Aa.Size6
                    }, o.createElement(T.cb, {
                        width: 140
                    })), o.createElement(T.V, {
                        fontSize: T.Aa.Size6
                    }, o.createElement(T.cb, {
                        width: 120
                    })))))
                },
                Gt = function(e) {
                    for (var t = e.cardCount, n = [], i = 0; i < t; i++) 1 === i ? n.push(o.createElement(Wt, {
                        key: i
                    })) : n.push(o.createElement(Bt, {
                        key: i
                    }));
                    return o.createElement(T.Va, null, n)
                },
                zt = n("g6EN"),
                Ht = Ce(function() {
                    return {
                        feed_type: "rec"
                    }
                })(At),
                qt = {
                    limit: 5
                },
                Qt = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onCreatePost = function(e, n, i) {
                            return void 0 === i && (i = !1), t.props.createPost(e, n, i)
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.postRender()
                    }, t.prototype.componentDidUpdate = function() {
                        this.postRender()
                    }, t.prototype.render = function() {
                        return this.props.data.loading ? o.createElement(Gt, {
                            cardCount: 5
                        }) : this.props.data.error ? (this.props.onDataError && this.props.onDataError(), o.createElement(T.Va, {
                            margin: {
                                top: 3
                            }
                        }, o.createElement(X.a, {
                            message: Object(l.d)("Error loading data.", "PulseComponent")
                        }))) : o.createElement(T.Va, null, o.createElement(it, {
                            placeholder: Object(l.d)("Share a clip or video with your followers by adding links from Twitch, Vimeo, and YouTube.", "PulseComposer"),
                            onCreate: this.onCreatePost,
                            isConnectedToTwitter: this.props.data.currentUser.isConnectedToTwitter,
                            userID: this.props.data.currentUser.id,
                            composerLocation: Qe.HomePage
                        }), o.createElement(Ht, {
                            items: this.props.data.currentUser.pulseFeed.items || []
                        }), o.createElement(ae.a, {
                            enabled: !this.props.data.loading && !this.props.data.error,
                            loadMore: this.props.loadMore,
                            contentLength: this.props.data.currentUser.pulseFeed.items.edges.length,
                            pixelThreshold: 100
                        }))
                    }, t.prototype.postRender = function() {
                        this.props.data.loading || this.props.latencyTracking.reportInteractive()
                    }, t = a.__decorate([Object(d.a)(zt, {
                        options: {
                            fetchPolicy: "network-only",
                            variables: qt
                        },
                        props: function(e) {
                            return a.__assign({}, e, {
                                loadMore: function() {
                                    var t = e.data.currentUser.pulseFeed.items.edges;
                                    return e.data.fetchMore({
                                        query: zt,
                                        variables: {
                                            limit: 5,
                                            cursor: t[t.length - 1].cursor
                                        },
                                        updateQuery: function(e, t) {
                                            var n = t.fetchMoreResult;
                                            return {
                                                currentUser: a.__assign({}, n.currentUser, {
                                                    pulseFeed: a.__assign({}, n.currentUser.pulseFeed, {
                                                        items: a.__assign({}, n.currentUser.pulseFeed.items, {
                                                            edges: e.currentUser.pulseFeed.items.edges.concat(n.currentUser.pulseFeed.items.edges)
                                                        })
                                                    })
                                                })
                                            }
                                        }
                                    })
                                }
                            })
                        }
                    }), Object(d.a)(Ut, {
                        props: function(e) {
                            return {
                                createPost: function(t, n, i) {
                                    return e.mutate(a.__assign({}, Object(ue.a)({
                                        channelID: e.ownProps.data.currentUser.id,
                                        body: t,
                                        embedURLs: n.map(function(e) {
                                            return e.sourceURL
                                        }),
                                        postToTwitter: i
                                    }), {
                                        optimisticResponse: {
                                            createPost: {
                                                post: {
                                                    id: "" + +new Date,
                                                    createdAt: (new Date).toISOString(),
                                                    body: {
                                                        content: t,
                                                        emotes: [],
                                                        __typename: "MessageBody"
                                                    },
                                                    author: e.ownProps.data.currentUser,
                                                    embeds: n.map(function(e) {
                                                        return e.embed
                                                    }),
                                                    reactions: [],
                                                    __typename: "Post"
                                                },
                                                tweetStatus: "",
                                                tweet: "",
                                                __typename: "Mutation"
                                            }
                                        },
                                        update: function(e, t) {
                                            var n = e.readQuery({
                                                query: zt,
                                                variables: qt
                                            });
                                            n && (n.currentUser.pulseFeed.items.edges = [{
                                                node: {
                                                    content: t.data.createPost.post,
                                                    reasons: [],
                                                    tracking: {
                                                        batchID: "",
                                                        cardImpressionID: "",
                                                        recGenerationID: "",
                                                        recGenerationIndex: 0,
                                                        __typename: "FeedItemTracking"
                                                    },
                                                    __typename: "FeedItem"
                                                },
                                                cursor: "",
                                                __typename: "FeedItemEdge"
                                            }].concat(n.currentUser.pulseFeed.items.edges), e.writeQuery({
                                                query: zt,
                                                data: n,
                                                variables: qt
                                            }))
                                        }
                                    }))
                                }
                            }
                        }
                    }), Object(w.c)("Pulse")], t)
                }(o.Component),
                Yt = n("4hJa");
            var $t = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return a.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.postRender()
                    }, t.prototype.componentDidUpdate = function() {
                        this.postRender()
                    }, t.prototype.render = function() {
                        var e = [];
                        return this.props.data.error ? o.createElement(X.a, {
                            message: Object(l.d)("Top Games are unavailable at this time.", "TopGamesCompoment")
                        }) : (this.props.data.loading || (e = function(e) {
                            var t = [];
                            return e.games.edges.map(function(e) {
                                var n = e.node;
                                return n && n.id && t.push({
                                    id: n.id,
                                    name: n.name,
                                    viewersCount: n.viewersCount,
                                    boxArtURL: n.boxArtURL
                                })
                            }), t
                        }(this.props.data)), o.createElement(ee, {
                            title: Object(l.d)("Top Games", "TopGamesCompoment"),
                            items: e,
                            loading: this.props.data.loading,
                            limit: 18,
                            viewAllLinkTo: "/directory",
                            "data-a-target": "view-all-link"
                        }))
                    }, t.prototype.postRender = function() {
                        this.props.data.loading || this.props.latencyTracking.reportInteractive()
                    }, t = a.__decorate([Object(d.a)(Yt, {
                        options: function(e) {
                            return {
                                variables: {
                                    limit: e.count || 18
                                }
                            }
                        }
                    }), Object(w.c)("TopGames")], t)
                }(o.Component),
                Kt = n("6Oka"),
                Xt = (n("X2bz"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            numSlotsAdded: 0,
                            pulseDataError: !1
                        }, t.onSlotAdded = function() {
                            t.setState(function(e) {
                                var t = e.numSlotsAdded + 1;
                                return t === Object.keys(v.b.front).length && h.a.display(v.b.front.leaderboard), {
                                    numSlotsAdded: t
                                }
                            })
                        }, t.onPulseDataError = function() {
                            t.setState({
                                pulseDataError: !0
                            })
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.componentWillMount = function() {
                        v.g.addListener(v.e, this.onSlotAdded)
                    }, t.prototype.componentDidMount = function() {
                        this.onRender(), l.o.setPageTitle(), this.shouldShowOnboarding() && !B() && Q(z.b.NewSignup)
                    }, t.prototype.componentDidUpdate = function(e) {
                        e.data.loading && this.shouldShowOnboarding() && !B() && Q(z.b.NewSignup)
                    }, t.prototype.render = function() {
                        return o.createElement(T.Va, {
                            fullHeight: !0
                        }, o.createElement(Y.b, {
                            suppressScrollX: !0,
                            disableDebounce: !0
                        }), o.createElement($.a, null, o.createElement(K.a, null)), o.createElement(T.Va, {
                            padding: 3
                        }, o.createElement(g.a, {
                            adSize: v.c.front.leaderboard,
                            adUnit: v.d.frontpage,
                            "data-a-target": "frontpage-leaderboard-ad-slot",
                            slotID: v.b.front.leaderboard,
                            targeting: {
                                pagetype: v.a.frontpage
                            },
                            injectStyles: {
                                display: "flex",
                                justifyContent: "center",
                                textAlign: "center",
                                marginBottom: "2rem"
                            },
                            autoEnable: !1
                        }), o.createElement(T.Va, {
                            className: "front-page",
                            display: T.W.Flex,
                            flexDirection: T.Y.ColumnReverse,
                            breakpointMedium: {
                                flexDirection: T.Y.Row
                            },
                            flexWrap: T.Z.NoWrap,
                            margin: {
                                x: "auto"
                            }
                        }, o.createElement(T.Va, {
                            className: "front-page__main-col",
                            flexGrow: 0,
                            flexShrink: 0
                        }, this.shouldShowOnboarding() && o.createElement(de, null), o.createElement(Qt, {
                            onDataError: this.onPulseDataError
                        })), o.createElement(T.Va, {
                            flexGrow: 1,
                            breakpointMedium: {
                                padding: {
                                    left: 2
                                }
                            }
                        }, o.createElement(ae.c, {
                            bottomPixelThreshold: 20,
                            disableStickinessBelowWidth: 1127,
                            disableStickiness: this.state.pulseDataError
                        }, o.createElement(T.Va, {
                            margin: {
                                bottom: 1
                            }
                        }, o.createElement(oe.a, {
                            renderContext: oe.b.Front
                        })), o.createElement(T.Va, {
                            display: T.W.Hide,
                            breakpointMedium: {
                                display: T.W.Block
                            }
                        }, o.createElement(g.a, {
                            adSize: v.c.front.rightTop,
                            adUnit: v.d.frontpage,
                            "data-a-target": "frontpage-right-top-ad-slot",
                            slotID: v.b.front.rightTop,
                            targeting: {
                                pagetype: v.a.frontpage
                            },
                            injectStyles: {
                                display: "flex",
                                justifyContent: "center",
                                textAlign: "center",
                                marginBottom: "1rem"
                            },
                            autoEnable: !1
                        })), o.createElement(T.Va, {
                            margin: {
                                bottom: 1
                            }
                        }, o.createElement(ie, null)), o.createElement(re.a, null, o.createElement($t, null)), o.createElement(T.Va, {
                            display: T.W.Hide,
                            breakpointMedium: {
                                display: T.W.Block
                            }
                        }, o.createElement(g.a, {
                            adSize: v.c.front.rightBottom,
                            adUnit: v.d.frontpage,
                            "data-a-target": "frontpage-right-bottom-ad-slot",
                            slotID: v.b.front.rightBottom,
                            targeting: {
                                pagetype: v.a.frontpage
                            },
                            injectStyles: {
                                display: "flex",
                                justifyContent: "center",
                                marginTop: "1rem"
                            },
                            autoEnable: !1
                        })))))))
                    }, t.prototype.componentWillUnmount = function() {
                        v.g.removeListener(v.e, this.onSlotAdded)
                    }, t.prototype.onRender = function() {
                        this.props.latencyTracking.reportInteractive()
                    }, t.prototype.shouldShowOnboarding = function() {
                        var e = this.props.data,
                            t = e.currentUser,
                            n = e.loading,
                            i = e.error;
                        return !(n || i || !t || !t.createdAt || !t.followedGames || !t.followedGames.nodes) && q(t.followedGames.nodes.length, t.createdAt)
                    }, t
                }(o.Component)),
                Zt = Object(y.compose)(Object(w.c)("FrontPage", {
                    destination: m.a.Index
                }), Object(u.a)({
                    location: f.PageviewLocation.FrontPage
                }), Object(d.a)(Kt, {
                    options: {
                        variables: {
                            limit: 18
                        }
                    }
                }))(Xt),
                Jt = n("MJbm"),
                en = n("5myU"),
                tn = n("yI6f"),
                nn = n("RXle"),
                rn = n("G1cX");
            var an, on = n("ZS2+"),
                sn = n("JVUd"),
                ln = n("fVj5"),
                cn = n("3sMy");
            n("MIhF");
            ! function(e) {
                e.Large = "Large", e.Small = "Small"
            }(an || (an = {}));
            var dn = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            showError: !1
                        }, t.onUndoClick = function() {
                            return a.__awaiter(t, void 0, void 0, function() {
                                var e, t;
                                return a.__generator(this, function(n) {
                                    switch (n.label) {
                                        case 0:
                                            if (!(e = this.props.addFeedbackPromise)) return [2];
                                            n.label = 1;
                                        case 1:
                                            return n.trys.push([1, 7, , 8]), [4, e];
                                        case 2:
                                            t = n.sent(), n.label = 3;
                                        case 3:
                                            return n.trys.push([3, 5, , 6]), [4, (t.id, Promise.resolve())];
                                        case 4:
                                            return n.sent(), this.props.undoSuccessHandler(), [3, 6];
                                        case 5:
                                            return n.sent(), this.setState({
                                                showError: !0
                                            }), [3, 6];
                                        case 6:
                                            return [3, 8];
                                        case 7:
                                            return n.sent(), this.props.undoSuccessHandler(), [3, 8];
                                        case 8:
                                            return [2]
                                    }
                                })
                            })
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        var e = this,
                            t = Object(l.d)("You can still <x:link-undo>undo this</x:link-undo> or <x:link-manage>manage</x:link-manage> your recommendation feedback", {
                                "x:link-undo": function(t) {
                                    return o.createElement(T.T, {
                                        onClick: e.onUndoClick,
                                        "data-test-selector": "hidden-content-undo"
                                    }, o.createElement("strong", null, t))
                                },
                                "x:link-manage": function(e) {
                                    return o.createElement(T.T, {
                                        to: "/settings/recommendations",
                                        targetBlank: !0
                                    }, e)
                                }
                            }, "HiddenContentNotice");
                        return this.state.showError && (t = Object(l.d)("Something went wrong, please <x:link-manage>click here</x:link-manage> to manage your recommendation feedback", {
                            "x:link-manage": function(e) {
                                return o.createElement(T.T, {
                                    to: "/settings/recommendations",
                                    targetBlank: !0,
                                    "data-test-selector": "hidden-content-undo-error"
                                }, e)
                            }
                        }, "HiddenContentNotice")), o.createElement(T.xb, {
                            className: "hidden-content-notice",
                            border: !0,
                            fullWidth: !0,
                            padding: {
                                y: 4,
                                x: 2
                            },
                            margin: {
                                bottom: 2
                            },
                            display: T.W.Flex,
                            justifyContent: T.Ua.Center,
                            alignItems: T.f.Center,
                            flexDirection: T.Y.Column
                        }, this.props.name && o.createElement(T.Va, {
                            margin: {
                                bottom: 2
                            }
                        }, o.createElement(T.V, {
                            fontSize: this.props.size === an.Large ? T.Aa.Size3 : T.Aa.Size5
                        }, Object(l.d)("<x:content>Content</x:content> has been removed.", {
                            "x:content": function() {
                                return o.createElement(T.V, {
                                    bold: !0,
                                    italic: !0,
                                    type: T.Nb.Span,
                                    fontSize: e.props.size === an.Large ? T.Aa.Size2 : T.Aa.Size4
                                }, e.props.name)
                            }
                        }, "HiddenContentNotice"))), o.createElement(T.V, {
                            fontSize: this.props.size === an.Large ? T.Aa.Size4 : T.Aa.Size6
                        }, t))
                    }, t
                }(o.Component),
                un = n("MdYN"),
                pn = function(e) {
                    return a.__assign({}, e, {
                        title: e.clipTitle,
                        viewCount: e.clipViewCount,
                        createdAt: e.clipCreatedAt
                    })
                },
                mn = n("GFmA"),
                hn = n("oB8h"),
                fn = n("3W+h"),
                gn = n("oJov"),
                vn = n("QV0j"),
                bn = n("A65o"),
                kn = n("jtyt");

            function yn() {
                return {
                    text: Object(l.d)("I am not interested in the game or category", "FeedbackReason"),
                    contentType: kn.a.Category,
                    feedbackType: kn.b.NotInterested
                }
            }

            function Sn() {
                return Object(l.d)("Other", "FeedbackReason")
            }

            function Cn() {
                return Object(l.d)("I am not interested in the channel", "FeedbackReason")
            }
            var En = null;
            var _n = null;
            var wn = null;
            var Tn = n("j4u0"),
                On = Object(Tn.a)(),
                Nn = on.a.wrap(function() {
                    return n.e(136).then(n.bind(null, "FL2a"))
                }, "RecFeedbackDots", {
                    placeholder: null
                }),
                In = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            showContent: !0,
                            addFeedbackPromise: null
                        }, t.typeToPropMappings = {
                            Clip: t.getShelfCardClipProps.bind(t),
                            Game: t.getShelfCardGameProps.bind(t),
                            Stream: t.getShelfCardStreamProps.bind(t),
                            Video: t.getShelfCardVideoProps.bind(t)
                        }, t.renderShelfCard = function(e) {
                            if (t.isShelfGameBoxArtCardProps()) {
                                var n = t.getTagListProps(t.props.contentEdge),
                                    i = t.getTagSet(t.props.contentEdge, n);
                                return n && (n.callback = function(e) {
                                    t.trackClick(f.PageviewContent.Tag, i, e.id)
                                }), o.createElement(gn.a, a.__assign({
                                    "data-a-target": "card-" + t.props.itemPosition
                                }, e, {
                                    tagListProps: n
                                }))
                            }
                            return o.createElement(mn.a, a.__assign({}, e))
                        }, t.isShelfGameBoxArtCardProps = function() {
                            var e = t.props.contentEdge.node;
                            return !(!e || !e.boxArtURL)
                        }, t.getShelfCardProps = function(e, n) {
                            return e.node && t.typeToPropMappings[e.node.__typename] ? t.typeToPropMappings[e.node.__typename](e, n) : null
                        }, t.getTagListProps = function(e) {
                            var n = void 0;
                            if (!e.node || !t.props.isTagsExperiment) return n;
                            switch (e.node.__typename) {
                                case "Stream":
                                    n = {
                                        tags: e.node.tags || [],
                                        linkTo: {
                                            pathname: fn.a.PopularTag,
                                            state: a.__assign({
                                                medium: f.PageviewMedium.TwitchHome
                                            }, t.props.shelfCardTrackingProps)
                                        }
                                    };
                                    break;
                                case "Game":
                                    n = {
                                        tags: e.node.gameTags || [],
                                        linkTo: {
                                            pathname: fn.a.DirectoryTag,
                                            state: a.__assign({
                                                medium: f.PageviewMedium.TwitchHome
                                            }, t.props.shelfCardTrackingProps)
                                        }
                                    };
                                    break;
                                case "Video":
                                    n = {
                                        tags: e.node.contentTags || [],
                                        linkTo: {
                                            pathname: fn.a.PopularTag,
                                            state: a.__assign({
                                                medium: f.PageviewMedium.TwitchHome
                                            }, t.props.shelfCardTrackingProps)
                                        }
                                    }
                            }
                            return n
                        }, t.getTagSet = function(e, n) {
                            return n || (n = t.getTagListProps(e)), n ? n.tags.map(function(e) {
                                return e.id
                            }) : []
                        }, t.getFeedbackProps = function(e) {
                            var n = e.shelfID,
                                i = e.channelID,
                                r = e.categoryID,
                                a = e.vodID,
                                o = e.feedbackReasons,
                                s = e.hideContent;
                            if (On() && t.props.firstPageLoaded) return {
                                component: Nn,
                                props: {
                                    shelfID: n,
                                    channelID: i,
                                    categoryID: r,
                                    vodID: a,
                                    feedbackReasons: o,
                                    hideContent: s
                                }
                            }
                        }, t.showContent = function() {
                            t.setState({
                                showContent: !0,
                                addFeedbackPromise: null
                            })
                        }, t.hideContent = function(e) {
                            t.setState({
                                showContent: !1,
                                addFeedbackPromise: e
                            })
                        }, t.trackGameClick = function(e, n, i, r) {
                            e.preventDefault(), e.stopPropagation();
                            var o = "title" === ("IMG" === e.target.tagName ? "boxArt" : "title") ? f.PageviewContent.GameName : f.PageviewContent.GameBoxart,
                                s = a.__assign({}, t.props.shelfCardTrackingProps, {
                                    tag_set: r,
                                    tag_filter_set: [],
                                    tag_streamer_set: []
                                }),
                                c = {
                                    pathname: Object(J.c)(n.name),
                                    state: a.__assign({
                                        content: o,
                                        content_index: i,
                                        medium: f.PageviewMedium.TwitchHome
                                    }, s)
                                };
                            t.trackClick(o, r), l.o.history.push(c.pathname, c.state)
                        }, t.trackClick = function(e, n, i) {
                            return t.props.trackClick(e, n, i)
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.componentDidMount = function() {
                        var e = this,
                            t = this.getTagSet(this.props.contentEdge);
                        this.props.impressionListener.registerImpressionCallback(function() {
                            return e.props.trackImpression(t)
                        })
                    }, t.prototype.render = function() {
                        var e = this.getShelfCardProps(this.props.contentEdge, this.props.itemPosition);
                        return e && this.props.contentEdge.node ? this.state.showContent ? o.createElement(T.Va, {
                            key: this.props.contentEdge.node.id,
                            padding: {
                                bottom: 2
                            },
                            "data-test-selector": "shelf-card-selector"
                        }, this.renderShelfCard(e)) : o.createElement(dn, {
                            name: e.title,
                            undoSuccessHandler: this.showContent,
                            addFeedbackPromise: this.state.addFeedbackPromise,
                            size: an.Small
                        }) : null
                    }, t.prototype.getShelfCardStreamProps = function(e) {
                        var t = this,
                            n = e.node,
                            i = this.getTagListProps(e),
                            r = this.getTagSet(e, i),
                            o = a.__assign({}, this.props.shelfCardTrackingProps, {
                                tag_set: r,
                                tag_filter_set: [],
                                tag_streamer_set: []
                            }),
                            s = this.props.shelf.title.key !== cn.a.RecommendedBecauseYouWatchX ? {
                                gameTitle: n.game && n.game.displayName || void 0,
                                gameTitleLinkTo: {
                                    pathname: n.game ? Object(J.c)(n.game.name) : void 0,
                                    state: o
                                },
                                onGameTitleClick: this.trackClick.bind(this, f.PageviewContent.GameMetadata, r)
                            } : {};
                        return a.__assign({
                            context: mn.b.MixedGameAndChannelList,
                            title: n.broadcaster && n.broadcaster.broadcastSettings && n.broadcaster.broadcastSettings.title,
                            linkTo: n.broadcaster && n.broadcaster.login ? {
                                pathname: n.broadcaster.login,
                                state: o
                            } : void 0,
                            onClick: this.trackClick.bind(this, f.PageviewContent.VideoThumbnail, r),
                            onVideoTitleClick: this.trackClick.bind(this, f.PageviewContent.VideoTitle, r),
                            onChannelImageClick: this.trackClick.bind(this, f.PageviewContent.UserThumbnail, r),
                            thumbnailImageProps: n.previewImageURL && n.broadcaster && n.broadcaster.broadcastSettings && n.broadcaster.broadcastSettings.title ? {
                                src: n.previewImageURL,
                                alt: n.broadcaster.broadcastSettings.title
                            } : void 0,
                            channelImageProps: n.broadcaster && n.broadcaster.profileImageURL && n.broadcaster.displayName ? {
                                src: n.broadcaster && n.broadcaster.profileImageURL,
                                alt: n.broadcaster && n.broadcaster.displayName
                            } : void 0,
                            channelDisplayName: n.broadcaster && n.broadcaster.displayName || "",
                            channelLogin: n.broadcaster && n.broadcaster.login,
                            channelLinkTo: n.broadcaster && n.broadcaster.login ? {
                                pathname: "/" + n.broadcaster.login + "/videos/all",
                                state: o
                            } : void 0,
                            onChannelLoginClick: this.trackClick.bind(this, f.PageviewContent.ChannelMetadata, r),
                            streamType: Object(vn.a)(n.type) || hn.a.Live,
                            currentViewerCount: n.viewersCount || 0,
                            trackingContext: {
                                medium: f.PageviewMedium.TwitchHome
                            },
                            contextualCardActionProps: this.getFeedbackProps({
                                channelID: n.id,
                                categoryID: n.game && n.game.id,
                                feedbackReasons: (null === _n && (_n = [{
                                    text: Cn(),
                                    contentType: kn.a.Channel,
                                    feedbackType: kn.b.NotInterested
                                }, yn(), {
                                    text: Sn(),
                                    contentType: kn.a.Channel,
                                    feedbackType: kn.b.Other
                                }]), _n),
                                hideContent: this.hideContent
                            })
                        }, i && {
                            tagListProps: a.__assign({}, i, {
                                callback: function(e) {
                                    i.callback && i.callback(e), t.trackClick(f.PageviewContent.Tag, r, e.id)
                                }
                            })
                        }, s)
                    }, t.prototype.getShelfCardClipProps = function(e, t) {
                        var n = this,
                            i = e.node,
                            r = this.getTagListProps(e),
                            o = this.getTagSet(e, r),
                            s = a.__assign({}, this.props.shelfCardTrackingProps, {
                                tag_set: o,
                                tag_filter_set: [],
                                tag_streamer_set: []
                            });
                        return a.__assign({
                            context: mn.b.MixedGameAndChannelList,
                            title: i.clipTitle,
                            linkTo: i.embedURL,
                            onClick: function(e) {
                                if (n.trackClick(f.PageviewContent.VideoThumbnail, o), e.preventDefault(), n.props.shelf.content && n.props.shelf.content.edges) {
                                    var r = n.props.shelf.content.edges.map(function(e) {
                                        return e.node
                                    });
                                    n.props.showClipsModal(i, t, n.props.shelf.content.edges, function() {
                                        return r
                                    })
                                }
                            },
                            onVideoTitleClick: function(e) {
                                if (n.trackClick(f.PageviewContent.VideoTitle, o), e.preventDefault(), n.props.shelf.content && n.props.shelf.content.edges) {
                                    var r = n.props.shelf.content.edges.map(function(e) {
                                        return e.node
                                    });
                                    n.props.showClipsModal(i, t, n.props.shelf.content.edges, function() {
                                        return r
                                    })
                                }
                            },
                            thumbnailImageProps: {
                                src: i.thumbnailURL,
                                alt: i.clipTitle
                            },
                            channelImageProps: i.broadcaster && i.broadcaster.profileImageURL && i.broadcaster.displayName ? {
                                src: i.broadcaster && i.broadcaster.profileImageURL,
                                alt: i.broadcaster && i.broadcaster.displayName
                            } : void 0,
                            channelDisplayName: i.broadcaster && i.broadcaster.displayName || "",
                            channelLogin: i.broadcaster && i.broadcaster.login,
                            channelLinkTo: i.broadcaster && i.broadcaster.login ? {
                                pathname: "/" + i.broadcaster.login + "/videos/all",
                                state: s
                            } : void 0,
                            onChannelLoginClick: this.trackClick.bind(this, f.PageviewContent.ChannelMetadata, o),
                            datePublished: i.clipCreatedAt,
                            viewCount: i.clipViewCount,
                            durationInSeconds: i.durationSeconds,
                            clipCreatedByChannelLogin: i.curator && i.curator.login,
                            gameTitle: i.game && i.game.displayName || void 0,
                            gameTitleLinkTo: {
                                pathname: i.game && Object(J.c)(i.game.name) || void 0,
                                state: s
                            },
                            onGameTitleClick: this.trackClick.bind(this, f.PageviewContent.GameMetadata, o),
                            trackingContext: {
                                medium: f.PageviewMedium.TwitchHome
                            }
                        }, r && {
                            tagListProps: a.__assign({}, r, {
                                callback: function(e) {
                                    r.callback && r.callback(e), n.trackClick(f.PageviewContent.Tag, o, e.id)
                                }
                            })
                        })
                    }, t.prototype.getShelfCardVideoProps = function(e) {
                        var t = this,
                            n = e.node,
                            i = this.getTagListProps(e),
                            r = this.getTagSet(e, i),
                            o = a.__assign({}, this.props.shelfCardTrackingProps, {
                                tag_set: r,
                                tag_filter_set: [],
                                tag_streamer_set: []
                            });
                        return a.__assign({
                            context: mn.b.MixedGameAndChannelList,
                            title: n.title,
                            linkTo: {
                                pathname: "/videos/" + n.id,
                                state: this.props.shelfCardTrackingProps
                            },
                            onClick: this.trackClick.bind(this, f.PageviewContent.VideoThumbnail, r),
                            onVideoTitleClick: this.trackClick.bind(this, f.PageviewContent.VideoTitle, r),
                            onChannelImageClick: this.trackClick.bind(this, f.PageviewContent.UserThumbnail, r),
                            thumbnailImageProps: n.title && n.previewThumbnailURL && {
                                src: n.previewThumbnailURL,
                                alt: n.title
                            },
                            channelImageProps: n.owner && n.owner.profileImageURL && n.owner.profileImageURL && {
                                src: n.owner && n.owner.profileImageURL,
                                alt: n.owner && n.owner.displayName
                            },
                            channelDisplayName: n.owner && n.owner.displayName || "",
                            channelLogin: n.owner && n.owner.login,
                            channelLinkTo: n.owner && n.owner.login ? {
                                pathname: "/" + n.owner.login + "/videos/all",
                                state: o
                            } : void 0,
                            onChannelLoginClick: this.trackClick.bind(this, f.PageviewContent.ChannelMetadata, r),
                            datePublished: n.publishedAt,
                            viewCount: n.viewCount,
                            durationInSeconds: n.lengthSeconds,
                            watchedProgressPercent: 0,
                            gameTitle: n.game && n.game.displayName,
                            gameTitleLinkTo: n.game ? {
                                pathname: Object(J.c)(n.game.name),
                                state: o
                            } : void 0,
                            onGameTitleClick: this.trackClick.bind(this, f.PageviewContent.GameMetadata, r),
                            trackingContext: {
                                medium: f.PageviewMedium.TwitchHome
                            },
                            contextualCardActionProps: this.getFeedbackProps({
                                vodID: n.id,
                                categoryID: n.game && n.game.id,
                                channelID: n.owner && n.owner.id,
                                feedbackReasons: (null === wn && (wn = [{
                                    text: Object(l.d)("I am not interested in the video", "FeedbackReason"),
                                    contentType: kn.a.Vod,
                                    feedbackType: kn.b.NotInterested
                                }, {
                                    text: Cn(),
                                    contentType: kn.a.Channel,
                                    feedbackType: kn.b.NotInterested
                                }, yn(), {
                                    text: Object(l.d)("I have already watched this video", "FeedbackReason"),
                                    contentType: kn.a.Vod,
                                    feedbackType: kn.b.AlreadyWatched
                                }, {
                                    text: Sn(),
                                    contentType: kn.a.Vod,
                                    feedbackType: kn.b.Other
                                }]), wn),
                                hideContent: this.hideContent
                            })
                        }, i && {
                            tagListProps: a.__assign({}, i, {
                                callback: function(e) {
                                    i.callback && i.callback(e), t.trackClick(f.PageviewContent.Tag, r, e.id)
                                }
                            })
                        })
                    }, t.prototype.getShelfCardGameProps = function(e, t) {
                        var n = this,
                            i = e.node,
                            r = this.getTagSet(e);
                        return {
                            onClick: function(e) {
                                return n.trackGameClick(e, i, t, r)
                            },
                            title: i.displayName,
                            alt: Object(l.d)("{displayName} cover image", {
                                displayName: i.displayName
                            }, "ShelfComponent"),
                            src: i.boxArtURL || "",
                            linkTo: Object(J.c)(i.name),
                            info: Object(l.d)("{viewerCount, plural, one {# viewer} other {# viewers}}", {
                                viewerCount: i.viewersCount || 0
                            }, "ShelfComponent")
                        }
                    }, t
                }(o.Component),
                Dn = Object(s.compose)(Object(w.c)("ShelfCardComponent", {
                    autoReportInteractive: !0
                }), Object(sn.a)("ShelfCardComponent", {
                    percentage: 75
                }), Object(bn.a)())(In);
            var Rn = Object(b.connect)(null, function(e) {
                    return Object(y.bindActionCreators)({
                        showClipsModal: function(e, t, n) {
                            return Object(Ot.d)(un.a, {
                                getClips: function() {
                                    return n.map(function(e) {
                                        return pn(e.node)
                                    })
                                },
                                clip: pn(e),
                                clipIndex: t,
                                pageType: "TopClipsGame"
                            })
                        }
                    }, e)
                })(Dn),
                xn = Object(Tn.a)(),
                Fn = on.a.wrap(function() {
                    return n.e(136).then(n.bind(null, "FL2a"))
                }, "RecFeedbackDots", {
                    placeholder: null
                }),
                Pn = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            showContent: !0,
                            addFeedbackPromise: null
                        }, t.isTagsExperiment = Object(ln.b)(), t.getEdges = function(e) {
                            if (e.content && e.content.edges) {
                                var n = t.props.itemsToDisplay;
                                return e.title.key.includes("TopGames") && (n = t.props.itemsToDisplay * Bn), e.content.edges.filter(function(e) {
                                    return e && e.node && e.node.id
                                }).slice(0, n)
                            }
                            return []
                        }, t.linkToBrowse = function(e) {
                            var n = {
                                pathname: "/directory",
                                state: a.__assign({
                                    content: f.PageviewContent.HeaderGameName,
                                    medium: f.PageviewMedium.TwitchHome
                                }, t.props.shelfTrackingProps)
                            };
                            return o.createElement(T.T, {
                                onClick: t.props.trackTitleClick,
                                to: n
                            }, e)
                        }, t.linkToDirectory = function(e) {
                            var n = {
                                pathname: Object(J.c)(e),
                                state: a.__assign({
                                    content: f.PageviewContent.HeaderGameName,
                                    medium: f.PageviewMedium.TwitchHome
                                }, t.props.shelfTrackingProps)
                            };
                            return o.createElement(T.T, {
                                onClick: t.props.trackTitleClick,
                                to: n
                            }, e)
                        }, t.trackTitleImpression = function() {
                            return t.props.trackTitleImpression(t.props.shelf)
                        }, t.shouldRenderShelf = function(e) {
                            var n;
                            if (!t.getShelfTitle(e.title)) return !1;
                            if (e.content && e.content.edges && e.content.edges[0] && e.content.edges[0].node && (n = e.content.edges && e.content.edges[0].node), !(n && n.id && n.__typename)) return !1;
                            if ("Stream" === n.__typename) {
                                if (!(n = n).previewImageURL || !n.broadcaster || !n.broadcaster.login) return !1
                            } else if ("Game" === n.__typename) {
                                if (!(n = n).name) return !1
                            } else if ("Clip" === n.__typename) {
                                if (!(n = n).thumbnailURL || !n.url) return !1
                            } else if ("Video" === n.__typename && !(n = n).previewThumbnailURL) return !1;
                            return !0
                        }, t.showContent = function() {
                            t.setState({
                                showContent: !0,
                                addFeedbackPromise: null
                            })
                        }, t.hideContent = function(e) {
                            t.setState({
                                showContent: !1,
                                addFeedbackPromise: e
                            })
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.componentDidMount = function() {
                        if (this.shouldRenderShelf(this.props.shelf)) {
                            var e = this.getEdges(this.props.shelf);
                            this.props.latencyTracking.reportInteractive(e.length), this.props.impressionListener.registerImpressionCallback(this.trackTitleImpression)
                        } else this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        var e = this,
                            t = this.props,
                            n = t.position,
                            i = t.shelf,
                            r = this.getShelfTitle(i.title);
                        if (!this.shouldRenderShelf(i)) return null;
                        if (!this.state.showContent && null !== r) return o.createElement(dn, {
                            name: r,
                            undoSuccessHandler: this.showContent,
                            addFeedbackPromise: this.state.addFeedbackPromise,
                            size: an.Large
                        });
                        var a = 0,
                            s = T.Ub.Large,
                            c = [];
                        if (i.content && i.content.edges) {
                            i.title.key.includes("TopGames") && (s = T.Ub.ExtraSmall);
                            var d = this.getEdges(i),
                                u = rn(i, function(e) {
                                    return e.content.edges || []
                                }, function() {
                                    return d
                                });
                            d.forEach(function(t, i) {
                                t && t.node && c.push(o.createElement(Rn, {
                                    key: t.node.id,
                                    shelf: u,
                                    contentEdge: t,
                                    isTagsExperiment: e.isTagsExperiment,
                                    itemPosition: i,
                                    rowPosition: n,
                                    firstPageLoaded: e.props.firstPageLoaded
                                }))
                            }), this.props.itemsToDisplay > i.content.edges.length && (a = this.props.itemsToDisplay - i.content.edges.length)
                        }
                        return o.createElement(T.Va, {
                            key: i.id
                        }, o.createElement(T.Va, {
                            padding: {
                                bottom: 1
                            }
                        }, o.createElement(T.V, {
                            type: T.Nb.H4,
                            color: T.O.Base
                        }, r, this.props.firstPageLoaded && i.title.context && xn() && o.createElement(T.Va, {
                            display: T.W.InlineBlock,
                            margin: {
                                left: .5
                            }
                        }, o.createElement(Fn, {
                            shelfID: i.id,
                            categoryID: i.title.context.id,
                            feedbackReasons: (null === En && (En = [{
                                text: Object(l.d)("I am not interested in these channels", "FeedbackReason"),
                                contentType: kn.a.Shelf,
                                feedbackType: kn.b.NotInterested
                            }, yn(), {
                                text: Sn(),
                                contentType: kn.a.Shelf,
                                feedbackType: kn.b.Other
                            }]), En),
                            hideContent: this.hideContent
                        })))), o.createElement(T.Tb, {
                            childWidth: s,
                            gutterSize: T.Vb.Small,
                            noWrap: !0,
                            placeholderItems: a
                        }, c))
                    }, t.prototype.getShelfTitle = function(e) {
                        var t, n = this,
                            i = ((t = {})[cn.a.TopLiveChannels] = function() {
                                return Object(l.d)("Popular <x:bold>live channels</x:bold>", {
                                    "x:bold": function(e) {
                                        return o.createElement("strong", null, e)
                                    }
                                }, "ShelfComponent")
                            }, t[cn.a.TopGames] = function() {
                                return n.isTagsExperiment ? Object(l.d)("Popular <x:bold>categories</x:bold>", {
                                    "x:bold": function(e) {
                                        return o.createElement("strong", null, n.linkToBrowse(e))
                                    }
                                }, "ShelfComponent") : Object(l.d)("Popular <x:bold>games</x:bold>", {
                                    "x:bold": function(e) {
                                        return o.createElement("strong", null, n.linkToBrowse(e))
                                    }
                                }, "ShelfComponent")
                            }, t[cn.a.PopularVideos] = function() {
                                return Object(l.d)("Popular <x:bold>videos</x:bold>", {
                                    "x:bold": function(e) {
                                        return o.createElement("strong", null, e)
                                    }
                                }, "ShelfComponent")
                            }, t[cn.a.PopularClips] = function() {
                                return Object(l.d)("Popular <x:bold>clips</x:bold>", {
                                    "x:bold": function(e) {
                                        return o.createElement("strong", null, e)
                                    }
                                }, "ShelfComponent")
                            }, t[cn.a.TopChannelsPlayingGame] = function() {
                                return Object(l.d)("Popular <x:bold1>live channels</x:bold1> in <x:bold2>{game}</x:bold2>", {
                                    game: e.context ? e.context.name : "",
                                    "x:bold1": function(e) {
                                        return o.createElement("strong", null, e)
                                    },
                                    "x:bold2": function(e) {
                                        return o.createElement("strong", null, n.linkToDirectory(e))
                                    }
                                }, "ShelfComponent")
                            }, t[cn.a.TopLiveChannelsYouMayLike] = function() {
                                return Object(l.d)("<x:bold>Live channels</x:bold> you may like", {
                                    "x:bold": function(e) {
                                        return o.createElement("strong", null, e)
                                    }
                                }, "ShelfComponent")
                            }, t[cn.a.TopGamesForYou] = function() {
                                return n.isTagsExperiment ? Object(l.d)("<x:bold>Categories</x:bold> you may like", {
                                    "x:bold": function(e) {
                                        return o.createElement("strong", null, n.linkToBrowse(e))
                                    }
                                }, "ShelfComponent") : Object(l.d)("<x:bold>Games</x:bold> you may like", {
                                    "x:bold": function(e) {
                                        return o.createElement("strong", null, n.linkToBrowse(e))
                                    }
                                }, "ShelfComponent")
                            }, t[cn.a.RecommendedBecauseYouWatchX] = function() {
                                return Object(l.d)("<x:bold>{game}</x:bold> streamers you may like", {
                                    game: e.context ? e.context.name : "",
                                    "x:bold": function(e) {
                                        return o.createElement("strong", null, n.linkToDirectory(e))
                                    }
                                }, "ShelfComponent")
                            }, t[cn.a.RecommendedBecauseYouFollowX] = function() {
                                return Object(l.d)("Because you follow <x:bold>{name}</x:bold>", {
                                    name: e.context ? e.context.name : "",
                                    "x:bold": function(e) {
                                        return o.createElement("strong", null, n.linkToDirectory(e))
                                    }
                                }, "ShelfComponent")
                            }, t[cn.a.GreatNewClipsYouMayHaveMissed] = function() {
                                return Object(l.d)("<x:bold>Clips</x:bold> you may like", {
                                    "x:bold": function(e) {
                                        return o.createElement("strong", null, e)
                                    }
                                }, "ShelfComponent")
                            }, t[cn.a.TopNewVideosYouMayHaveMissed] = function() {
                                return Object(l.d)("<x:bold>Videos</x:bold> you may like", {
                                    "x:bold": function(e) {
                                        return o.createElement("strong", null, e)
                                    }
                                }, "ShelfComponent")
                            }, t);
                        return i[e.key] ? i[e.key]() : null
                    }, t
                }(o.Component),
                Vn = Object(s.compose)(Object(sn.a)("ShelfComponent", {
                    percentage: 15
                }), Object(w.c)("ShelfComponent"), Object(tn.j)())(Pn);
            var Ln, Mn = Object(b.connect)(function(e) {
                    return {
                        firstPageLoaded: e.session.firstPageLoaded
                    }
                })(Vn),
                jn = n("HfKK");
            ! function(e) {
                e.all = "all", e.ps4 = "ps4", e.xbox = "xbox"
            }(Ln || (Ln = {}));
            var An = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            requestID: t.props.initialRequestID
                        }, t.trackRecRequest = function(e) {
                            var t = {
                                endpoint: tn.d.Live,
                                requestID: e,
                                section: tn.c.TwitchHome
                            };
                            Object(tn.i)(t)
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.trackRecRequest(this.state.requestID)
                    }, t.prototype.componentDidUpdate = function(e) {
                        if (!this.props.data.loading && this.props.data.shelves && this.props.data.shelves.edges && (this.props.latencyTracking.reportInteractive(this.props.data.shelves.edges.length), e.itemsToDisplay !== this.props.itemsToDisplay)) {
                            for (var t = [], n = 0, i = this.props.data.shelves.edges; n < i.length; n++) {
                                var r = i[n];
                                r && r.node && r.node.content && r.node.content.edges && t.push(r.node.content.edges.length)
                            }
                            if (this.props.itemsToDisplay * Bn > Math.min.apply(Math, t)) {
                                var a = Object(tn.e)();
                                this.props.loadMore(a), this.trackRecRequest(a), this.setState({
                                    requestID: a
                                })
                            }
                        }
                    }, t.prototype.render = function() {
                        var e = this;
                        if (!this.props.data.shelves || !this.props.data.shelves.edges) return this.props.data.loading ? this.renderLoading() : this.props.data.error ? this.renderError() : null;
                        var t = this.props.data.shelves.edges.map(function(t, n) {
                            return o.createElement(Mn, {
                                key: t.node.id,
                                shelf: t.node,
                                position: n,
                                itemsToDisplay: e.props.itemsToDisplay,
                                requestID: e.state.requestID
                            })
                        });
                        return t.splice(4, 0, this.renderAds(v.c.newFront.after4thShelf, v.b.newFront.after4thShelf)), t.splice(2, 0, this.renderAds(v.c.newFront.after2ndShelf, v.b.newFront.after2ndShelf)), o.createElement(o.Fragment, null, t)
                    }, t.prototype.renderLoading = function() {
                        for (var e = this.props.itemsToDisplay, t = [], n = [], i = 0; i < e; i++) n.push(o.createElement(nn.VideoPreviewCardPlaceholder, {
                            key: "frontpage-thumbnails-placeholder-" + i
                        }));
                        for (i = 0; i < 4; i++) t.push(o.createElement(T.Va, {
                            margin: {
                                bottom: 2
                            },
                            key: "frontpage-shelves-placeholder-" + i
                        }, o.createElement(T.Va, {
                            margin: {
                                bottom: 1
                            }
                        }, o.createElement(T.cb, {
                            height: 25,
                            width: 150
                        })), o.createElement(T.Tb, {
                            gutterSize: T.Vb.Small,
                            childWidth: T.Ub.Medium,
                            placeholderItems: 0
                        }, n)));
                        return o.createElement(o.Fragment, null, t)
                    }, t.prototype.renderError = function() {
                        var e = Object(l.d)("Error loading data.", "NewFrontPageComponent");
                        return o.createElement(X.a, {
                            inline: !0,
                            message: e
                        })
                    }, t.prototype.renderAds = function(e, t) {
                        return o.createElement(g.a, {
                            adSize: e,
                            adUnit: v.d.frontpage,
                            autoEnable: !1,
                            injectStyles: {
                                display: "flex",
                                justifyContent: "center",
                                marginBottom: "2rem"
                            },
                            key: t,
                            slotID: t,
                            targeting: {
                                pagetype: v.a.frontpage
                            }
                        })
                    }, t
                }(o.Component),
                Un = Object(y.compose)(Object(d.a)(jn, {
                    options: function(e) {
                        return {
                            fetchPolicy: "network-only",
                            errorPolicy: "all",
                            variables: {
                                requestID: e.initialRequestID,
                                platform: Ln.all,
                                itemsPerRow: e.initialItemsToFetch
                            }
                        }
                    },
                    props: function(e) {
                        return a.__assign({}, e, {
                            loadMore: function(t) {
                                return e.data.fetchMore({
                                    query: jn,
                                    variables: {
                                        itemsPerRow: e.ownProps.itemsToDisplay * Bn,
                                        platform: Ln.all,
                                        requestID: t
                                    },
                                    updateQuery: function(e, t) {
                                        return function(e, t) {
                                            return rn(e, function(e) {
                                                return e && e.shelves && e.shelves.edges
                                            }, function(e) {
                                                return e && t && t.shelves && t.shelves.edges ? (t.shelves.edges.forEach(function(t) {
                                                    for (var n = !1, i = 0; i < e.length; i++)
                                                        if (e[i].node.id === t.node.id) {
                                                            n = !0, e[i] = rn(e[i], function(e) {
                                                                return e.node.content.edges
                                                            }, function(e) {
                                                                return e && t && t.node && t.node.content && t.node.content.edges ? Object(ue.c)(e, t.node.content.edges) : null
                                                            });
                                                            break
                                                        }
                                                    n || e.push(t)
                                                }), e) : null
                                            })
                                        }(e, t.fetchMoreResult)
                                    }
                                })
                            }
                        })
                    }
                }), Object(w.c)("RecommendedContent"))(An),
                Wn = 2,
                Bn = 2,
                Gn = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            initialItemsToFetch: 0,
                            itemsToDisplay: 0
                        }, t.onResize = function(e) {
                            var n = Object(en.a)(e, 300, 1),
                                i = Math.max(Wn, n);
                            t.state.initialRequestID ? i !== t.state.itemsToDisplay && t.setState({
                                itemsToDisplay: i
                            }) : t.setState({
                                initialItemsToFetch: i * Bn,
                                initialRequestID: Object(tn.e)(),
                                itemsToDisplay: i
                            })
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        var e = this.state.initialItemsToFetch > 0 && this.state.initialRequestID ? o.createElement(Un, {
                            itemsToDisplay: this.state.itemsToDisplay,
                            initialItemsToFetch: this.state.initialItemsToFetch,
                            initialRequestID: this.state.initialRequestID
                        }) : null;
                        return o.createElement(o.Fragment, null, e, o.createElement(Jt.a, {
                            onResize: this.onResize
                        }))
                    }, t
                }(o.Component),
                zn = n("kDHn"),
                Hn = (n("mhEZ"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            numSlotsAdded: 0
                        }, t.onSlotAdded = function() {
                            t.setState(function(e) {
                                var t = e.numSlotsAdded + 1;
                                return t === Object.keys(v.b.newFront).length && h.a.display(v.b.newFront.top), {
                                    numSlotsAdded: t
                                }
                            })
                        }, t.shouldShowOnboarding = function() {
                            return t.followedGamesForUserHasLoaded() && q(t.props.data.currentUser.followedGames.nodes.length, t.props.data.currentUser.createdAt)
                        }, t.followedGamesForUserHasLoaded = function() {
                            return t.props.data && !t.props.data.loading && !t.props.data.error && t.props.data.currentUser && t.props.data.currentUser.followedGames
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.componentDidMount = function() {
                        l.o.setPageTitle(), v.g.addListener(v.e, this.onSlotAdded), this.shouldShowOnboarding() && !B() && Q(z.b.NewSignup)
                    }, t.prototype.componentWillUnmount = function() {
                        v.g.removeListener(v.e, this.onSlotAdded)
                    }, t.prototype.componentDidUpdate = function(e) {
                        e.data.loading && this.shouldShowOnboarding() && !B() && Q(z.b.NewSignup)
                    }, t.prototype.render = function() {
                        return o.createElement(T.Va, {
                            fullHeight: !0
                        }, o.createElement(Y.b, {
                            suppressScrollX: !0,
                            disableDebounce: !0
                        }), o.createElement($.a, null, o.createElement(K.a, null)), o.createElement(T.xb, {
                            className: "front-page-carousel",
                            padding: 3
                        }, o.createElement(g.a, {
                            adSize: v.c.newFront.top,
                            adUnit: v.d.frontpage,
                            autoEnable: !1,
                            injectStyles: {
                                display: "flex",
                                justifyContent: "center",
                                marginBottom: "3rem"
                            },
                            slotID: v.b.newFront.top,
                            targeting: {
                                pagetype: v.a.frontpage
                            }
                        }), o.createElement(j, null)), o.createElement(T.Va, {
                            margin: 3
                        }, o.createElement(Gn, null)))
                    }, t
                }(o.Component)),
                qn = Object(s.compose)(Object(w.c)("FrontPage", {
                    autoReportInteractive: !0,
                    destination: m.a.Index
                }), Object(u.a)({
                    location: f.PageviewLocation.FrontPage
                }), Object(d.a)(zn, {
                    options: {
                        variables: {
                            limit: 18
                        }
                    }
                }))(Hn),
                Qn = function(e) {
                    return o.createElement(c.a, {
                        name: p.b.DiscoveryFrontpageMVP,
                        assignments: {
                            fallback: function() {
                                return o.createElement(Zt, a.__assign({}, e))
                            },
                            variant: function() {
                                return o.createElement(qn, a.__assign({}, e))
                            }
                        }
                    })
                };
            n.d(t, "FrontPage", function() {
                return Qn
            })
        },
        "0hI/": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ReportUserModal_ReportUserData"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "targetUserID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "targetUser"
                            },
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "targetUserID"
                                    }
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "lookupType"
                                },
                                value: {
                                    kind: "EnumValue",
                                    value: "ALL"
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "directories"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "nodes"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "name"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "displayName"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "directoryType"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "blockedUsers"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 236
                }
            };
            n.loc.source = {
                body: "query ReportUserModal_ReportUserData($targetUserID: ID!) {\ntargetUser: user(id: $targetUserID lookupType: ALL) {\nid\nlogin\ndisplayName\ndirectories {\nnodes {\nid\nname\ndisplayName\ndirectoryType\n}\n}\n}\ncurrentUser {\nid\nblockedUsers {\nid\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "0ubH": function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "game"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Game"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "name"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "viewersCount"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "displayName"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "boxArtURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "width"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "188"
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "height"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "250"
                                }
                            }],
                            directives: []
                        }, {
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "gameTags"
                            },
                            name: {
                                kind: "Name",
                                value: "tags"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "tagType"
                                },
                                value: {
                                    kind: "EnumValue",
                                    value: "CONTENT"
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "tagFragment"
                                    },
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 201
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/tags/models/tag-fragment.gql"\nfragment game on Game {\nid\nname\nviewersCount\ndisplayName\nboxArtURL(width: 188 height: 250)\ngameTags: tags(tagType: CONTENT) {\n...tagFragment\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("iiOx").definitions)), e.exports = i
        },
        "1mcJ": function(e, t, n) {},
        "2MRx": function(e, t, n) {},
        "2rRr": function(e, t, n) {
            "use strict";
            var i, r = n("/MKj"),
                a = n("fvjX"),
                o = n("S1Za"),
                s = n("AKMF"),
                l = n("mrSG"),
                c = n("q1tI"),
                d = n("/7QA"),
                u = n("hyVY"),
                p = n("f00E"),
                m = n("GnwI"),
                h = n("Ue10");
            n("FkHV");
            ! function(e) {
                e.Overlay = "embed-overlay", e.ViewCount = "embed-overlay__view-count", e.Wrapper = "embed-overlay__wrapper"
            }(i || (i = {}));
            var f;
            ! function(e) {
                e[e.Clip = 0] = "Clip", e[e.Video = 1] = "Video", e[e.Stream = 2] = "Stream", e[e.VideoOEmbed = 3] = "VideoOEmbed"
            }(f || (f = {}));
            var g = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            showOverlay: !0,
                            playerRefID: Object(p.a)()
                        }, t.getOverlayComponent = function() {
                            var e = t.props,
                                n = e.createdAt,
                                r = e.lengthSeconds,
                                a = e.thumbnailURL,
                                o = e.type,
                                s = e.viewCount,
                                l = r && r > 0 ? Object(u.b)(r) : "";
                            return c.createElement("a", {
                                href: "#",
                                onClick: t.handleClick,
                                "data-test-selector": i.Overlay
                            }, c.createElement(h.o, {
                                ratio: h.p.Aspect16x9
                            }, c.createElement(h.Va, null, c.createElement(h.Na, {
                                fullWidth: !0,
                                fullHeight: !0,
                                position: h.db.Absolute
                            }, c.createElement("img", {
                                src: a
                            })), c.createElement(h.Va, {
                                className: "embed-card__overlay",
                                position: h.db.Absolute,
                                attachLeft: !0,
                                attachTop: !0,
                                fullWidth: !0,
                                fullHeight: !0
                            }, c.createElement(h.Va, {
                                className: "embed-card__play",
                                display: h.W.Flex,
                                justifyContent: h.Ua.Center,
                                position: h.db.Absolute,
                                attachLeft: !0,
                                attachTop: !0,
                                fullWidth: !0,
                                fullHeight: !0
                            }, c.createElement(h.mb, {
                                asset: h.nb.Play,
                                width: 50,
                                height: 50
                            })), c.createElement(h.Va, {
                                position: h.db.Absolute,
                                padding: 1,
                                attachBottom: !0,
                                attachLeft: !0
                            }, n && c.createElement(h.V, null, Object(d.c)(new Date(n), "medium")), c.createElement(h.Va, null, o === f.Stream && c.createElement(h.Va, {
                                display: h.W.Inline,
                                margin: {
                                    right: .5
                                }
                            }, c.createElement(h.K, {
                                status: h.M.Live
                            })), void 0 !== s && c.createElement("span", null, t.getFormattedViewCount(s, o)))), c.createElement(h.Va, {
                                position: h.db.Absolute,
                                padding: 1,
                                attachBottom: !0,
                                attachRight: !0
                            }, l && c.createElement(h.Va, null, c.createElement(h.V, null, l)))), c.createElement(h.xb, {
                                position: h.db.Absolute,
                                attachTop: !0,
                                attachLeft: !0,
                                margin: 1,
                                fontSize: h.Aa.Size5
                            }, o === f.Stream && c.createElement(h.ab, {
                                label: Object(d.d)("Live", "EmbedOverlayPill"),
                                type: h.bb.Live
                            }), o === f.Video && c.createElement(h.ab, {
                                label: Object(d.d)("Video", "EmbedOverlayPill"),
                                type: h.bb.Overlay
                            }), o === f.Clip && c.createElement(h.ab, {
                                label: Object(d.d)("Clip", "EmbedOverlayPill"),
                                type: h.bb.Overlay
                            })))))
                        }, t.handleClick = function(e) {
                            e.preventDefault(), t.setState({
                                showOverlay: !1
                            }), t.props.type === f.Clip && t.props.reportPlayerInstanceStarted(t.state.playerRefID), t.props.onClick && t.props.onClick()
                        }, t
                    }
                    return l.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        if (this.props.type === f.Clip) {
                            var t = e.activeVideoPlayerRefID;
                            t === this.state.playerRefID ? this.setState({
                                showOverlay: !1
                            }) : this.props.activeVideoPlayerRefID === t || t === this.state.playerRefID || this.state.showOverlay || this.setState({
                                showOverlay: !0
                            })
                        }
                    }, t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        return this.state.showOverlay ? this.getOverlayComponent() : c.createElement(h.o, {
                            ratio: h.p.Aspect16x9
                        }, c.createElement("div", {
                            "data-test-selector": i.Wrapper
                        }, this.props.children))
                    }, t.prototype.getFormattedViewCount = function(e, t) {
                        switch (t) {
                            case f.Stream:
                                return Object(d.d)("{viewCount,number} viewers", {
                                    viewCount: e
                                }, "OverlayViewCount");
                            case f.Clip:
                            case f.Video:
                                return Object(d.d)("{viewCount,number} views", {
                                    viewCount: e
                                }, "OverlayViewCount");
                            default:
                                return ""
                        }
                    }, t
                }(c.Component),
                v = Object(m.c)("EmbedOverlay")(g);
            var b = Object(r.connect)(function(e) {
                return {
                    activeVideoPlayerRefID: Object(s.a)(e)
                }
            }, function(e) {
                return Object(a.bindActionCreators)({
                    reportPlayerInstanceStarted: o.b
                }, e)
            })(v);
            n.d(t, "a", function() {
                return b
            }), n.d(t, !1, function() {
                return i
            }), n.d(t, !1, function() {
                return "embed-overlay"
            }), n.d(t, !1, function() {
                return "embed-overlay-wrapper"
            }), n.d(t, "b", function() {
                return f
            }), n.d(t, !1, function() {
                return g
            }), n.d(t, !1, function() {
                return v
            })
        },
        "3Bft": function(e, t, n) {
            "use strict";
            var i, r;
            n.d(t, "a", function() {
                    return i
                }), n.d(t, "b", function() {
                    return a
                }),
                function(e) {
                    e.Week = "WEEK", e.Month = "MONTH", e.Year = "YEAR", e.OneTime = "ONE_TIME"
                }(i || (i = {})),
                function(e) {
                    e.PercentOff = "percent_off", e.FixedValueOff = "fixed_value_off"
                }(r || (r = {}));
            var a = {
                Prime: "prime",
                Tier1: "1000",
                Tier2: "2000",
                Tier3: "3000",
                Custom: "Custom"
            }
        },
        "3sMy": function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }),
                function(e) {
                    e.GreatNewClipsYouMayHaveMissed = "GreatNewClipsYouMayHaveMissed", e.PopularClips = "PopularClips", e.PopularVideos = "PopularVideos", e.RecommendedBecauseYouWatchX = "RecommendedBecauseYouWatchX", e.RecommendedBecauseYouFollowX = "RecommendedBecauseYouFollowX", e.TopChannelsPlayingGame = "TopChannelsPlayingGame", e.TopGames = "TopGames", e.TopGamesForYou = "TopGamesForYou", e.TopLiveChannels = "TopLiveChannels", e.TopLiveChannelsYouMayLike = "TopLiveChannelsYouMayLike", e.TopNewVideosYouMayHaveMissed = "TopNewVideosYouMayHaveMissed"
                }(i || (i = {}))
        },
        "44NB": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            }), n.d(t, "b", function() {
                return c
            }), n.d(t, "d", function() {
                return d
            }), n.d(t, "e", function() {
                return u
            }), n.d(t, "c", function() {
                return p
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("2xye"),
                o = "google_calendar",
                s = "backfill";

            function l(e) {
                var t = {};
                e.forEach(function(e, n) {
                    t["carousel_slot_" + n + "_channel"] = e.broadcaster.login, t["carousel_slot_" + n + "_priority"] = e.priorityLevel, t["carousel_slot_" + n + "_game"] = e.content.gameName, t["carousel_slot_" + n + "_ccu"] = e.content.viewersCount, t["carousel_slot_" + n + "_type"] = e.content.subType, e.isScheduled ? t["carousel_slot_" + n + "_source"] = o : t["carousel_slot_" + n + "_source"] = s
                }), r.n.track(a.SpadeEventType.FrontPageCarouselDisplay, t)
            }

            function c(e) {
                r.n.track(a.SpadeEventType.FrontPageCarouselClick, e)
            }

            function d(e, t) {
                var n = i.__assign({
                    clicked_element: t
                }, e);
                r.n.track(a.SpadeEventType.FrontPageCarouselPromotionCardClick, n)
            }

            function u(e) {
                r.n.track(a.SpadeEventType.FrontPageCarouselPromotionCardView, e)
            }

            function p(e) {
                r.n.track(a.SpadeEventType.FrontPageCarouselNavButtonClick, {
                    direction: e
                })
            }
        },
        "4L7N": function(e, t, n) {
            "use strict";
            var i = n("/MKj"),
                r = n("kRBY"),
                a = n("mrSG"),
                o = n("q1tI"),
                s = n("VwyG"),
                l = n("X7Ac"),
                c = n("yR8l"),
                d = n("MLDe"),
                u = n("v8tf"),
                p = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        var e = this,
                            t = this.props.data.clip,
                            n = "";
                        if (t && t.videoQualities) {
                            var i = t.videoQualities[0];
                            n = i.sourceURL
                        }
                        var r = this.props,
                            a = r.broadcasterId,
                            c = r.broadcasterLogin,
                            u = r.forceShow;
                        return o.createElement(s.a, {
                            ownerLogin: this.props.broadcasterLogin,
                            permittedRoles: {
                                editor: !0,
                                staff: !0
                            }
                        }, function(i) {
                            var r = i.permitted;
                            return n && (r || u) ? o.createElement(l.a, {
                                type: l.b.Download,
                                text: e.props.slug,
                                url: n,
                                onShareClick: t ? Object(d.c)(t.id, t.game && t.game.name, a, c, e.props.pageType) : void 0
                            }) : null
                        })
                    }, t
                }(o.Component),
                m = Object(c.a)(u)(p);
            var h = Object(i.connect)(function(e) {
                var t = Object(r.e)(e);
                return {
                    userLogin: t ? t.login : ""
                }
            })(m);
            n.d(t, "a", function() {
                return h
            })
        },
        "4hJa": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "TopGames_Games"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "limit"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Int"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "games"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "first"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "limit"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "edges"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "node"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "name"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "viewersCount"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "boxArtURL"
                                                    },
                                                    arguments: [{
                                                        kind: "Argument",
                                                        name: {
                                                            kind: "Name",
                                                            value: "width"
                                                        },
                                                        value: {
                                                            kind: "IntValue",
                                                            value: "285"
                                                        }
                                                    }, {
                                                        kind: "Argument",
                                                        name: {
                                                            kind: "Name",
                                                            value: "height"
                                                        },
                                                        value: {
                                                            kind: "IntValue",
                                                            value: "380"
                                                        }
                                                    }],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 136
                }
            };
            n.loc.source = {
                body: "query TopGames_Games($limit: Int) {\ngames(first: $limit) {\nedges {\nnode {\nid\nname\nviewersCount\nboxArtURL(width: 285 height: 380)\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "4qQ0": function(e, t, n) {
            "use strict";
            var i, r;
            n.d(t, "a", function() {
                    return i
                }), n.d(t, "b", function() {
                    return r
                }),
                function(e) {
                    e.ChannelFeedComment = "CHANNEL_FEED_COMMENT_REPORT", e.ChannelFeedPost = "CHANNEL_FEED_POST_REPORT", e.Chat = "CHAT_REPORT", e.Clip = "CLIP_REPORT", e.Collection = "COLLECTION_REPORT", e.Community = "COMMUNITY_REPORT", e.Event = "EVENT_REPORT", e.Extension = "EXTENSION_REPORT", e.LiveUp = "LIVE_UP_REPORT", e.Raid = "RAID_REPORT", e.Room = "ROOM_REPORT", e.StreamUp = "STREAM_UP_REPORT", e.User = "USER_REPORT", e.VideoChatMessage = "VOD_COMMENT_REPORT", e.Vod = "VOD_REPORT", e.Whisper = "WHISPER_REPORT"
                }(i || (i = {})),
                function(e) {
                    e.BitsViolation = "bits_violation", e.ChatBanEvasion = "chat_ban_evasion", e.Cheating = "cheating", e.Gore = "gore", e.Harassment = "harassment", e.Harm = "harm", e.HatefulConduct = "hateful_conduct", e.Impersonation = "impersonation", e.Miscategorized = "miscategorized", e.OffensiveUsername = "offensive_username", e.Other = "other", e.Porn = "porn", e.Prohibited = "prohibited", e.SelfHarm = "selfharm", e.SexualContent = "sexual_content", e.SexualViolence = "sexual_violence", e.Spam = "spam", e.TosBanEvasion = "tos_ban_evasion", e.Underaged = "underaged"
                }(r || (r = {}))
        },
        "4rAQ": function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "feed"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "FeedItemConnection"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "edges"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "node"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "content"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "FragmentSpread",
                                                    name: {
                                                        kind: "Name",
                                                        value: "feedItemClip"
                                                    },
                                                    directives: []
                                                }, {
                                                    kind: "FragmentSpread",
                                                    name: {
                                                        kind: "Name",
                                                        value: "feedItemPost"
                                                    },
                                                    directives: []
                                                }, {
                                                    kind: "FragmentSpread",
                                                    name: {
                                                        kind: "Name",
                                                        value: "feedItemStream"
                                                    },
                                                    directives: []
                                                }, {
                                                    kind: "FragmentSpread",
                                                    name: {
                                                        kind: "Name",
                                                        value: "feedItemVideo"
                                                    },
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "reasons"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "InlineFragment",
                                                    typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                            kind: "Name",
                                                            value: "FeedItemReason"
                                                        }
                                                    },
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "reason"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "tracking"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "batchID"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "cardImpressionID"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "recGenerationID"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "recGenerationIndex"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "cursor"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "pageInfo"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "hasNextPage"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 522
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/feed/models/post-fragment.gql"\n#import "twilight/features/feed/models/clip-fragment.gql"\n#import "twilight/features/feed/models/video-fragment.gql"\n#import "twilight/features/feed/models/stream-fragment.gql"\nfragment feed on FeedItemConnection {\nedges {\nnode {\ncontent {\n...feedItemClip\n...feedItemPost\n...feedItemStream\n...feedItemVideo\n}\nreasons {\n... on FeedItemReason {\nreason\n}\n}\ntracking {\nbatchID\ncardImpressionID\nrecGenerationID\nrecGenerationIndex\n}\n}\ncursor\n}\npageInfo {\nhasNextPage\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};

            function a(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }
            i.definitions = i.definitions.concat(a(n("qH6+").definitions)), i.definitions = i.definitions.concat(a(n("H4B0").definitions)), i.definitions = i.definitions.concat(a(n("poSz").definitions)), i.definitions = i.definitions.concat(a(n("c38k").definitions)), e.exports = i
        },
        "4w0E": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Chat_BanUserFromChatRoom"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "BanUserFromChatRoomInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "banUserFromChatRoom"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "error"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 126
                }
            };
            n.loc.source = {
                body: "mutation Chat_BanUserFromChatRoom($input: BanUserFromChatRoomInput!) {\nbanUserFromChatRoom(input: $input) {\nerror {\ncode\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "5LIN": function(e, t, n) {},
        "5NSO": function(e, t, n) {},
        "5myU": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = 10;

            function r(e, t, n) {
                if (void 0 === n && (n = 1), !t || !e) return -1;
                var r = window.getComputedStyle(document.documentElement).fontSize || i.toString(),
                    a = parseFloat(r) / i;
                return Math.floor(e / (t * a)) * n
            }
        },
        "5zf8": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            }), n.d(t, "b", function() {
                return l
            });
            var i, r, a = n("/7QA");

            function o(e, t) {
                switch (e) {
                    case i.Second:
                        return Object(a.d)("{secondCount, plural, one {# second} other {# seconds}}", {
                            secondCount: t
                        }, "formatDuration");
                    case i.Minute:
                        return Object(a.d)("{minuteCount, plural, one {# minute} other {# minutes}}", {
                            minuteCount: t
                        }, "formatDuration");
                    case i.Hour:
                        return Object(a.d)("{hourCount, plural, one {# hour} other {# hours}}", {
                            hourCount: t
                        }, "formatDuration");
                    case i.Day:
                        return Object(a.d)("{dayCount, plural, one {# day} other {# days}}", {
                            dayCount: t
                        }, "formatDuration");
                    case i.Week:
                        return Object(a.d)("{weekCount, plural, one {# week} other {# weeks}}", {
                            weekCount: t
                        }, "formatDuration");
                    case i.Month:
                        return Object(a.d)("{monthCount, plural, one {# month} other {# months}}", {
                            monthCount: t
                        }, "formatDuration");
                    default:
                        return ""
                }
            }

            function s(e, t) {
                switch (e) {
                    case i.Second:
                        return Object(a.d)("{secondCount}s", {
                            secondCount: t
                        }, "formatDuration");
                    case i.Minute:
                        return Object(a.d)("{minuteCount}m", {
                            minuteCount: t
                        }, "formatDuration");
                    case i.Hour:
                        return Object(a.d)("{hourCount}h", {
                            hourCount: t
                        }, "formatDuration");
                    case i.Day:
                        return Object(a.d)("{dayCount}d", {
                            dayCount: t
                        }, "formatDuration");
                    case i.Week:
                        return Object(a.d)("{weekCount}w", {
                            weekCount: t
                        }, "formatDuration");
                    case i.Month:
                        return Object(a.d)("{monthCount}mo", {
                            monthCount: t
                        }, "formatDuration");
                    default:
                        return ""
                }
            }

            function l(e, t) {
                var n;
                switch (void 0 === t && (t = r.Humanized), t === r.ClockAuto && (t = e >= 3600 ? r.ClockHMS : r.ClockMS), t) {
                    case r.ClockHM:
                    case r.ClockHMS:
                        n = i.Hour;
                        break;
                    case r.ClockMS:
                        n = i.Minute
                }
                var l = 2;
                t === r.ClockHMS && (l = 3);
                var d = function(e, t) {
                        void 0 === t && (t = i.Month);
                        var n = {};
                        return n.seconds = e, e < 60 || t === i.Second ? n : (n.minutes = Math.floor(e / 60), n.seconds = e % 60, n.minutes < 60 || t === i.Minute ? n : (n.hours = Math.floor(n.minutes / 60), n.minutes = n.minutes % 60, n.hours < 24 || t === i.Hour ? n : (n.days = Math.floor(n.hours / 24), n.hours = n.hours % 24, n.days < 7 || t === i.Day ? n : n.days <= 26 || t === i.Week ? (n.weeks = Math.floor(n.days / 7), n.days = n.days % 7, n) : (n.months = Math.round((n.days + 3) / 30), n))))
                    }(e, n),
                    u = Object.keys(d);
                if (u.forEach(function(e, n) {
                        t !== r.Humanized && t !== r.HumanizedShort || d[e] || delete d[e], n < u.length - l && delete d[e]
                    }), t === r.Humanized) return function(e) {
                    return e.months ? o(i.Month, e.months) : e.weeks && e.days ? o(i.Week, e.weeks) + " " + o(i.Day, e.days) : e.weeks ? o(i.Week, e.weeks) : e.days && e.hours ? o(i.Day, e.days) + " " + o(i.Hour, e.hours) : e.days ? o(i.Day, e.days) : e.hours && e.minutes ? o(i.Hour, e.hours) + " " + o(i.Minute, e.minutes) : e.hours ? o(i.Hour, e.hours) : e.minutes && e.seconds ? o(i.Minute, e.minutes) + " " + o(i.Second, e.seconds) : e.minutes ? o(i.Minute, e.minutes) : o(i.Second, e.seconds || 0)
                }(d);
                if (t === r.HumanizedShort) return function(e) {
                    return e.months ? s(i.Month, e.months) : e.weeks && e.days ? "" + s(i.Week, e.weeks) + s(i.Day, e.days) : e.weeks ? s(i.Week, e.weeks) : e.days && e.hours ? "" + s(i.Day, e.days) + s(i.Hour, e.hours) : e.days ? s(i.Day, e.days) : e.hours && e.minutes ? "" + s(i.Hour, e.hours) + s(i.Minute, e.minutes) : e.hours ? s(i.Hour, e.hours) : e.minutes && e.seconds ? "" + s(i.Minute, e.minutes) + s(i.Second, e.seconds) : e.minutes ? s(i.Minute, e.minutes) : s(i.Second, e.seconds || 0)
                }(d);
                var p = ":",
                    m = !1;
                switch (a.o.intl.getLanguageCode()) {
                    case "cy":
                    case "da":
                    case "fi":
                    case "id":
                    case "nb":
                    case "si":
                        p = ".";
                        break;
                    case "af":
                    case "fr":
                    case "lt":
                        m = !0
                }
                var h = d.seconds || 0,
                    f = d.minutes || 0,
                    g = d.hours || 0;
                switch (t) {
                    case r.ClockHM:
                    case r.ClockHMS:
                        var v = (m ? c(g, 2) : g) + p + c(f, 2);
                        return t === r.ClockHMS && (v += p + c(h, 2)), v;
                    case r.ClockMS:
                        return (m ? c(f, 2) : f) + p + c(h, 2)
                }
            }

            function c(e, t) {
                var n = e.toString();
                return n.length < t ? "0".repeat(t - n.length) + n : n
            }! function(e) {
                e[e.Second = 0] = "Second", e[e.Minute = 1] = "Minute", e[e.Hour = 2] = "Hour", e[e.Day = 3] = "Day", e[e.Week = 4] = "Week", e[e.Month = 5] = "Month"
            }(i || (i = {})),
            function(e) {
                e[e.Humanized = 0] = "Humanized", e[e.HumanizedShort = 1] = "HumanizedShort", e[e.ClockAuto = 2] = "ClockAuto", e[e.ClockHM = 3] = "ClockHM", e[e.ClockMS = 4] = "ClockMS", e[e.ClockHMS = 5] = "ClockHMS"
            }(r || (r = {}))
        },
        "60o1": function(e, t, n) {
            "use strict";

            function i(e, t) {
                var n = e,
                    i = !1;
                return n ? function(e) {
                    return e.split("").map(function(e) {
                        return e.charCodeAt(0) > 127
                    }).reduce(function(e, t) {
                        return e || t
                    })
                }(n) && (i = !0) : n = t, {
                    userDisplayName: n,
                    isIntl: i
                }
            }
            n.d(t, "a", function() {
                return i
            })
        },
        "6H22": function(e, t, n) {
            e.exports = n.p + "assets/overwatch-chars-fe0fc1dca7ed645de58c.png"
        },
        "6Oka": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "FrontPage_User"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "limit"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Int"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "createdAt"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "followedGames"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "first"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "limit"
                                            }
                                        }
                                    }],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "nodes"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 112
                }
            };
            n.loc.source = {
                body: "query FrontPage_User($limit: Int) {\ncurrentUser {\nid\ncreatedAt\nfollowedGames(first: $limit) {\nnodes {\nid\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "6j5V": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = n("RcPG");

            function r(e) {
                return {
                    type: i.a.Text,
                    content: e
                }
            }
        },
        "7D17": function(e, t, n) {},
        "7SjK": function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("TSYQ"),
                a = n("q1tI"),
                o = n("/7QA"),
                s = n("GnwI"),
                l = n("Ue10"),
                c = (n("VrOd"), function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = this,
                            t = r("emote-picker__emote-link", {
                                "emote-picker__emote-link--locked": this.props.locked
                            }),
                            n = a.createElement(l.xb, {
                                alignItems: l.f.Center,
                                background: l.r.Overlay,
                                borderRadius: l.x.Small,
                                className: "emote-picker__emote-lock",
                                color: l.O.Overlay,
                                display: l.W.InlineFlex,
                                justifyContent: l.Ua.Center,
                                position: l.db.Absolute,
                                zIndex: l.ac.Above
                            }, a.createElement(l.mb, {
                                asset: l.nb.Lock,
                                height: 10,
                                width: 10
                            })),
                            i = this.props.emotes.map(function(i, r) {
                                if (!i.srcSet) return null;
                                var c = a.createElement("img", {
                                    className: "emote-picker__emote-image",
                                    srcSet: i.srcSet,
                                    alt: i.displayName
                                });
                                if (0 === r) {
                                    for (var d = i.srcSet.split(" ")[0], u = {}, p = 0, m = i.srcSet.split(","); p < m.length; p++) {
                                        var h = m[p].trim().split(" "),
                                            f = h[1],
                                            g = h[0];
                                        u[f] = g
                                    }
                                    c = a.createElement(s.b, {
                                        className: "emote-picker__emote-image",
                                        src: d,
                                        srcSet: u,
                                        alt: i.displayName || ""
                                    })
                                }
                                return a.createElement("div", {
                                    key: i.id,
                                    className: "emote-picker__emote"
                                }, a.createElement(l.Qb, {
                                    label: i.displayName || Object(o.d)("Emote", "EmoteGrid"),
                                    direction: l.Sb.Bottom
                                }, a.createElement(l.Na, {
                                    display: l.W.Flex,
                                    alignItems: l.f.Center,
                                    justifyContent: l.Ua.Center
                                }, a.createElement("button", {
                                    className: t,
                                    "aria-label": i.displayName,
                                    name: i.displayName,
                                    onClick: e.props.locked ? void 0 : e.handleClickEmote.bind(e, i),
                                    "data-a-target": i.displayName
                                }, a.createElement("figure", {
                                    className: "emote-picker__emote-figure"
                                }, e.props.locked ? n : null, c)))))
                            });
                        return a.createElement(l.Va, {
                            display: l.W.Flex,
                            flexWrap: l.Z.Wrap,
                            justifyContent: l.Ua.Center
                        }, i)
                    }, t.prototype.handleClickEmote = function(e, t) {
                        this.props.onClickEmote && this.props.onClickEmote(t.currentTarget.name, e.id, e.setID)
                    }, t
                }(a.Component));
            n.d(t, "a", function() {
                return c
            })
        },
        "80G/": function(e, t, n) {},
        "86FS": function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("H1ft"),
                o = n("SWMh"),
                s = n("cr+I"),
                l = n("/7QA"),
                c = n("GFmA"),
                d = n("0INk"),
                u = n("yWUM"),
                p = n("vRsq"),
                m = n("2xye"),
                h = n("3W+h"),
                f = n("GnwI"),
                g = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onClickHandler = function() {
                            t.props.onClick && t.props.onClick(t.props.tracking.content_index)
                        }, t.gameChangesWithLinks = function() {
                            return t.props.videoGameChanges.map(function(e) {
                                var n = {
                                    t: Object(u.a)(e.offset)
                                };
                                return t.props.collectionID && (n.collection = t.props.collectionID), i.__assign({}, e, {
                                    linkTo: {
                                        pathname: "/videos/" + t.props.video.id,
                                        search: s.stringify(n),
                                        state: {
                                            content: m.PageviewContent.PreviewCardGameBalloonGame,
                                            medium: t.props.tracking.medium
                                        }
                                    }
                                })
                            })
                        }, t.trackVideoGameBalloonClick = function(e) {
                            t.props.video.owner && t.props.video.owner.id && t.props.video.owner.login && Object(d.b)({
                                videoID: e,
                                broadcasterID: t.props.video.owner.id,
                                channelLogin: t.props.video.owner.login,
                                contentIndex: t.props.tracking.content_index,
                                pageviewMedium: t.props.tracking.medium
                            })
                        }, t.trackVideoGameBalloonItemClick = function(e, n) {
                            t.props.video.owner && t.props.video.owner.id && t.props.video.owner.login && Object(d.c)({
                                videoID: e,
                                broadcasterID: t.props.video.owner.id,
                                channelLogin: t.props.video.owner.login,
                                contentIndex: n,
                                pageviewMedium: t.props.tracking.medium
                            })
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement(c.a, {
                            context: this.props.context,
                            onClick: this.onClickHandler,
                            title: this.props.video.title,
                            linkTo: {
                                pathname: Object(p.i)(void 0, this.props.video.id),
                                state: this.getLinkState(),
                                search: this.generateSearchString()
                            },
                            thumbnailImageProps: {
                                src: this.props.video.previewThumbnailURL,
                                alt: this.props.video.title
                            },
                            channelDisplayName: this.props.video.owner && this.props.video.owner.displayName || "",
                            channelLogin: this.props.video.owner && this.props.video.owner.login || "",
                            channelLinkTo: {
                                pathname: "/" + (this.props.video.owner ? this.props.video.owner.login : ""),
                                state: this.getLinkState()
                            },
                            channelImageProps: {
                                src: this.props.video.owner && this.props.video.owner.profileImageURL || "",
                                alt: this.props.video.owner ? this.props.video.owner.displayName : ""
                            },
                            gameTitle: this.props.video.game && this.props.video.game.name || "",
                            gameTitleLinkTo: {
                                pathname: "/directory/game/" + encodeURI(this.props.video.game && this.props.video.game.name || ""),
                                state: this.getLinkState()
                            },
                            gameBoxArtImageProps: {
                                src: this.props.video.game && this.props.video.game.boxArtURL || l.a.defaultBoxArtURL,
                                alt: this.props.video.game ? this.props.video.game.displayName : ""
                            },
                            videoGameChanges: this.gameChangesWithLinks(),
                            multipleVideoGameMarkersType: this.props.multipleVideoGameMarkersType,
                            datePublished: this.props.video.publishedAt,
                            viewCount: this.props.video.viewCount,
                            durationInSeconds: this.props.hideDuration ? void 0 : this.props.video.lengthSeconds,
                            animatedImageProps: this.props.video.animatedPreviewURL ? {
                                src: this.props.video.animatedPreviewURL,
                                alt: ""
                            } : void 0,
                            watchedProgressPercent: this.getVideoPreviousWatchPercentage() || 0,
                            listPosition: this.props.listPosition,
                            topBar: this.props.topBar,
                            restriction: this.getRestrictionProps(),
                            trackImageLatency: this.props.trackImageLatency,
                            onVideoGameBalloonClick: this.trackVideoGameBalloonClick,
                            onVideoGameBalloonItemClick: this.trackVideoGameBalloonItemClick,
                            trackingContext: this.props.tracking,
                            tagListProps: !0 !== this.props.hideTags && this.props.video.contentTags ? {
                                tags: this.props.video.contentTags,
                                linkPath: h.a.PopularTag
                            } : void 0
                        })
                    }, t.prototype.generateSearchString = function() {
                        var e = {};
                        this.props.collectionID && (e.collection = this.props.collectionID);
                        var t = s.stringify(e);
                        return t ? "?" + t : ""
                    }, t.prototype.getVideoPreviousWatchPercentage = function() {
                        return this.props.video && this.props.video.self && this.props.video.self.viewingHistory && null !== this.props.video.self.viewingHistory.position ? 0 === this.props.video.lengthSeconds || 0 === this.props.video.self.viewingHistory.position ? null : this.props.video.self.viewingHistory.position / this.props.video.lengthSeconds * 100 : null
                    }, t.prototype.getRestrictionProps = function() {
                        var e = this.props.video.restriction && this.props.video.restriction.productName ? "/products/" + this.props.video.restriction.productName : "";
                        return {
                            productName: this.props.video.restriction && this.props.video.restriction.productName,
                            title: this.props.video.restriction && this.props.video.restriction.productTitle,
                            canViewRestricted: this.props.video.self && !this.props.video.self.isRestricted || !1,
                            upsellLinkTo: {
                                pathname: e,
                                state: this.getLinkState()
                            }
                        }
                    }, t.prototype.getLinkState = function() {
                        return {
                            content: this.props.tracking.content,
                            content_index: this.props.tracking.content_index,
                            medium: this.props.tracking.medium
                        }
                    }, t
                }(r.Component),
                v = Object(f.c)("VideoPreviewCard", {
                    autoReportInteractive: !0
                })(g);
            n.d(t, "a", function() {
                return b
            });
            var b = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        videoGameChanges: []
                    }, t.maybeFetchVideoMarkers = function(e, n) {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var t;
                            return i.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        return this.promise = Object(o.a)(e, n, this.props.video.game), [4, this.promise];
                                    case 1:
                                        return t = i.sent(), this.setState({
                                            videoGameChanges: t
                                        }), [2]
                                }
                            })
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(v, i.__assign({
                        videoGameChanges: this.state.videoGameChanges
                    }, this.props))
                }, t.prototype.componentWillMount = function() {
                    this.props.multipleVideoGameMarkersType && this.props.multipleVideoGameMarkersType !== a.a.None && !this.promise && this.maybeFetchVideoMarkers(this.props.video.id, this.props.video.lengthSeconds)
                }, t
            }(r.Component)
        },
        "8jSG": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "blockedUsers"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "User"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "blockedUsers"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 56
                }
            };
            n.loc.source = {
                body: "fragment blockedUsers on User {\nid\nblockedUsers {\nid\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "8rUg": function(e, t, n) {
            e.exports = n.p + "assets/counterstrike-skill-groups-24ec0fc40a78435bc373.png"
        },
        "9a8W": function(e, t, n) {},
        A65o: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return s
            });
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("yI6f"),
                o = n("x75U");

            function s() {
                return function(e) {
                    return function(t) {
                        function n() {
                            var e = null !== t && t.apply(this, arguments) || this;
                            return e.trackImpression = function(t) {
                                e.context.trackImpression(e.props.shelf, e.props.contentEdge, e.props.itemPosition, t)
                            }, e.trackClick = function(t, n, i) {
                                "string" != typeof i && (i = void 0), e.context.trackClick(e.props.shelf, e.props.contentEdge, e.props.itemPosition, t, n, i)
                            }, e
                        }
                        return i.__extends(n, t), n.prototype.render = function() {
                            var t = this.context.cardIDtoItemTrackingIDMap && this.props.contentEdge.node && this.context.cardIDtoItemTrackingIDMap[this.props.contentEdge.node.id],
                                n = this.props,
                                o = n.itemPosition,
                                s = n.rowPosition,
                                l = n.shelf,
                                c = Object(a.f)(l.title).rowName,
                                d = {
                                    trackImpression: this.trackImpression,
                                    trackClick: this.trackClick,
                                    shelfCardTrackingProps: {
                                        item_tracking_id: t || null,
                                        item_position: o,
                                        row_name: c,
                                        row_position: s
                                    }
                                };
                            return r.createElement(e, i.__assign({}, this.props, d))
                        }, n.contextTypes = o.a, n
                    }(r.Component)
                }
            }
        },
        A8tl: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "stream"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Stream"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "broadcaster"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "user"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "game"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "game"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "tags"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "tagFragment"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "viewersCount"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "previewImageURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "width"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "400"
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "height"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "225"
                                }
                            }],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "createdAt"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "type"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 342
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/tags/models/tag-fragment.gql"\n#import "twilight/pages/front/v2/queries/user-fragment.gql"\n#import "twilight/pages/front/v2/queries/game-fragment.gql"\nfragment stream on Stream {\nid\nbroadcaster {\n...user\n}\ngame {\n...game\n}\ntags {\n...tagFragment\n}\nviewersCount\npreviewImageURL(width: 400 height: 225)\ncreatedAt\ntype\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};

            function a(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }
            i.definitions = i.definitions.concat(a(n("iiOx").definitions)), i.definitions = i.definitions.concat(a(n("fga6").definitions)), i.definitions = i.definitions.concat(a(n("0ubH").definitions)), e.exports = i
        },
        AO3T: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return i
            }), n.d(t, "a", function() {
                return r
            }), n.d(t, "g", function() {
                return s
            }), n.d(t, "f", function() {
                return l
            }), n.d(t, "d", function() {
                return c
            }), n.d(t, "e", function() {
                return d
            }), n.d(t, "c", function() {
                return u
            });
            var i, r, a = n("/7QA"),
                o = n("2xye");
            ! function(e) {
                e.HomepageCTA = "homepage_cta", e.NewSignup = "new_signup"
            }(i || (i = {})),
            function(e) {
                e.Click = "click", e.Impression = "impression", e.Start = "start", e.Dismissed = "dismissed", e.Completed = "completed"
            }(r || (r = {}));
            var s = function(e) {
                    var t = {
                        source: e.source,
                        action: r.Start
                    };
                    a.n.track(o.SpadeEventType.OnboardingEvent, t)
                },
                l = function() {
                    var e = {
                        source: i.HomepageCTA,
                        action: r.Dismissed
                    };
                    a.n.track(o.SpadeEventType.OnboardingEvent, e)
                },
                c = function() {
                    var e = {
                        source: i.HomepageCTA,
                        action: r.Completed
                    };
                    a.n.track(o.SpadeEventType.OnboardingEvent, e)
                },
                d = function(e, t) {
                    var n = {
                        src: o.SpadeEventType.OnboardingEvent,
                        game: t
                    };
                    a.n.track(e, n)
                },
                u = function(e) {
                    a.n.track(o.SpadeEventType.BrowseForYou, e)
                }
        },
        B3R5: function(e, t, n) {},
        "BQs+": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "c", function() {
                return d
            }), n.d(t, "b", function() {
                return u
            });
            var i, r = n("mrSG"),
                a = n("/7QA"),
                o = n("2xye"),
                s = n("I6K6"),
                l = n("bTcf"),
                c = n("L7EG");

            function d(e, t, n) {
                return r.__awaiter(this, void 0, void 0, function() {
                    var i, l, u, p;
                    return r.__generator(this, function(r) {
                        switch (r.label) {
                            case 0:
                                return r.trys.push([0, 2, , 3]), [4, n.query({
                                    query: c,
                                    variables: {
                                        videoID: e.id
                                    }
                                })];
                            case 1:
                                return i = r.sent().data, l = function(e, t) {
                                    return {
                                        id: e.id,
                                        owner: t.owner,
                                        broadcastType: t.broadcastType,
                                        game: t.game
                                    }
                                }(e, i.video), u = {
                                    channel: l.owner ? l.owner.login : null,
                                    channel_id: Number(e.owner.id),
                                    game: l.game ? l.game.name : null,
                                    partner: !!l.owner && l.owner.roles.isPartner,
                                    location: t.location,
                                    share_context: t.collectionID ? o.ShareItemContext.Collection : null,
                                    share_platform: t.platform,
                                    shared_item_id: t.collectionID ? t.collectionID : l.id,
                                    shared_item_type: t.collectionID ? o.ShareItemType.Collection : Object(s.a)(l.broadcastType),
                                    shared_item_url: t.shareURL,
                                    source_item_id: l.id,
                                    source_item_type: Object(s.a)(l.broadcastType)
                                }, a.o.tracking.track(o.SpadeEventType.ShareItem, u), [3, 3];
                            case 2:
                                return p = r.sent(), a.j.error(p.toString(), d.name), [3, 3];
                            case 3:
                                return [2]
                        }
                    })
                })
            }

            function u(e, t, n) {
                return r.__awaiter(this, void 0, void 0, function() {
                    var i, s, c;
                    return r.__generator(this, function(r) {
                        switch (r.label) {
                            case 0:
                                return r.trys.push([0, 2, , 3]), [4, n.query({
                                    query: l,
                                    variables: {
                                        creatorID: e.owner.id
                                    }
                                })];
                            case 1:
                                return i = r.sent().data, s = {
                                    channel: i.user ? i.user.login : null,
                                    channel_id: Number(e.owner.id),
                                    game: null,
                                    partner: !!i.user && i.user.roles.isPartner,
                                    location: t.location,
                                    share_context: null,
                                    share_platform: t.platform,
                                    shared_item_id: e.id,
                                    shared_item_type: o.ShareItemType.Collection,
                                    shared_item_url: t.shareURL,
                                    source_item_id: e.id,
                                    source_item_type: o.SourceItemType.Collection
                                }, a.o.tracking.track(o.SpadeEventType.ShareItem, s), [3, 3];
                            case 2:
                                return c = r.sent(), a.j.error(c.toString(), u.name), [3, 3];
                            case 3:
                                return [2]
                        }
                    })
                })
            }! function(e) {
                e.Copy = "link", e.Embed = "option_embed", e.Facebook = "fb", e.Link = "option_link", e.Reddit = "reddit", e.Twitter = "twitter", e.Unknown = "", e.VKontakte = "vk", e.Download = "download"
            }(i || (i = {}))
        },
        BhFH: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            });
            var i = n("mrSG"),
                r = n("yR8l"),
                a = n("8jSG"),
                o = n("cMjZ"),
                s = n("kSkr");

            function l() {
                var e = this;
                return Object(r.a)(s, {
                    props: function(t) {
                        return {
                            blockUserMutation: function(n, r, s, l) {
                                return i.__awaiter(e, void 0, void 0, function() {
                                    return i.__generator(this, function(e) {
                                        switch (e.label) {
                                            case 0:
                                                return t.mutate ? [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            targetUserID: n,
                                                            sourceContext: s,
                                                            reason: r
                                                        }
                                                    },
                                                    optimisticResponse: {
                                                        blockUser: {
                                                            __typename: "BlockUserPayload",
                                                            targetUser: {
                                                                __typename: "User",
                                                                id: n
                                                            }
                                                        }
                                                    },
                                                    update: function(e) {
                                                        var t = e.readFragment({
                                                            id: Object(o.a)(l),
                                                            fragment: a
                                                        });
                                                        t && (t.blockedUsers.push({
                                                            id: n,
                                                            __typename: "User"
                                                        }), e.writeFragment({
                                                            id: Object(o.a)(l),
                                                            fragment: a,
                                                            data: t
                                                        }))
                                                    }
                                                })] : [3, 2];
                                            case 1:
                                                return e.sent(), [3, 3];
                                            case 2:
                                                throw new Error("blockUserMutation is not ready");
                                            case 3:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }
        },
        CCqK: function(e, t, n) {},
        "DB+C": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "EmotePicker_EmotePicker_UserSubscriptionProducts"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelOwnerID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelOwnerID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "campaignProperties"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "domains"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "subscriptionProducts"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "tier"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "url"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "emotes"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "token"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "emoteSetID"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "subscriptionBenefit"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "platform"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 280
                }
            };
            n.loc.source = {
                body: "query EmotePicker_EmotePicker_UserSubscriptionProducts($channelOwnerID: ID!) {\nuser(id: $channelOwnerID) {\nid\nlogin\ncampaignProperties {\ndomains\n}\ndisplayName\nsubscriptionProducts {\nid\nname\ntier\nurl\nemotes {\nid\ntoken\n}\nemoteSetID\n}\nself {\nsubscriptionBenefit {\nid\nplatform\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        DJtx: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Clips_ModalDelete"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "slug"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "clip"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "slug"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcaster"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "curator"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "login"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "thumbnailURL"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "createdAt"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "viewCount"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "title"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 143
                }
            };
            n.loc.source = {
                body: "query Clips_ModalDelete($slug: ID!) {\nclip(slug: $slug) {\nid\nbroadcaster {\nid\n}\ncurator {\nid\nlogin\n}\nthumbnailURL\ncreatedAt\nviewCount\ntitle\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        DnOo: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("oJmH"),
                o = n("/7QA"),
                s = n("UUve"),
                l = n("D7An"),
                c = n("GnwI"),
                d = n("br9A"),
                u = n("Ue10"),
                p = "subscribe-button__subscribe-tier-button",
                m = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        if (n.state = {
                                hasPopupExperiment: !1
                            }, n.handleClick = function() {
                                n.openCheckout(), n.props.handleSubAction({
                                    action: d.a.ClickCheckout,
                                    checkoutButtonTier: n.props.tierPrice
                                })
                            }, n.openCheckout = function() {
                                n.state.hasPopupExperiment && o.m.set(s.b, n.props.productName)
                            }, !1 === n.props.targetBlank) return n;
                        var i = o.o.experiments.getAssignment(l.b.InstreamCheckout);
                        return n.state = {
                            hasPopupExperiment: "yes" === i
                        }, n
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        if (this.props.isSubbedToTier) {
                            var e = Object(o.d)("Subscribed", "SubTierButton");
                            return r.createElement(u.z, {
                                ariaLabel: e,
                                "data-test-selector": p,
                                disabled: !0,
                                icon: u.nb.Star
                            }, e)
                        }
                        var t = this.props.isEsportChannel ? Object(o.d)("Get the All-Access Pass", "SubTierButton") : Object(o.d)("Subscribe Now", "SubTierButton");
                        return r.createElement(u.z, i.__assign({
                            ariaLabel: t + " " + this.props.tierPrice,
                            "data-test-selector": p,
                            linkTo: this.state.hasPopupExperiment ? void 0 : this.props.url,
                            onClick: this.handleClick,
                            purchase: this.props.tierPrice
                        }, Object(u.bc)(this.props), {
                            targetBlank: void 0 === this.props.targetBlank || this.props.targetBlank
                        }), t)
                    }, t
                }(r.Component),
                h = Object(a.compose)(Object(c.c)("SubTierButton", {
                    autoReportInteractive: !0
                }))(m);
            n.d(t, !1, function() {
                return p
            }), n.d(t, "a", function() {
                return h
            })
        },
        EZOg: function(e, t, n) {},
        Fj9y: function(e, t, n) {},
        FkHV: function(e, t, n) {},
        GFmA: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA"),
                o = n("/MKj"),
                s = n("TSYQ"),
                l = n("YhoA"),
                c = n("Ue10"),
                d = (n("lRiI"), function(e) {
                    var t, n = e.spriteDetails,
                        i = e.game.toLowerCase(),
                        a = s("metadata-icon__appendage", ((t = {})["metadata-icon__appendage--csgo-skill"] = i === l.a.CounterStrike, t)),
                        o = i === l.a.CounterStrike ? 40 : 20;
                    return r.createElement(c.Va, {
                        className: a
                    }, r.createElement("div", {
                        style: {
                            backgroundImage: "url(" + n.spriteURL + ")",
                            backgroundPositionX: n.spriteOffsetX ? -1 * n.spriteOffsetX : 0,
                            backgroundPositionY: n.spriteOffsetY ? -1 * n.spriteOffsetY : 0,
                            width: n.imageWidth ? n.imageWidth + "px" : "2rem",
                            height: n.imageWidth ? n.imageHeight + "px" : "2rem",
                            transform: "scale(" + (n.imageWidth > 0 ? o / n.imageWidth : 1) + ")",
                            transformOrigin: "0 0"
                        }
                    }))
                }),
                u = n("On2s"),
                p = (n("CCqK"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            metadataDetails: null
                        }, t.didUnmount = !1, t.loadStreamMetadataDetails = function() {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var e, t;
                                return i.__generator(this, function(n) {
                                    switch (n.label) {
                                        case 0:
                                            if (!this.props.streamMetadata || !this.props.game) return [3, 4];
                                            n.label = 1;
                                        case 1:
                                            return n.trys.push([1, 3, , 4]), [4, Object(u.b)(this.props.streamMetadata, this.props.game)];
                                        case 2:
                                            if (e = n.sent()) {
                                                if (this.didUnmount) return [2];
                                                this.setState({
                                                    metadataDetails: e
                                                })
                                            }
                                            return [3, 4];
                                        case 3:
                                            return t = n.sent(), a.j.error(t, "Failed to get metadata details."), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.loadStreamMetadataDetails()
                    }, t.prototype.componentDidUpdate = function(e) {
                        !e.leagueOfLegends.championsMap && this.props.leagueOfLegends.championsMap && this.loadStreamMetadataDetails()
                    }, t.prototype.componentWillUnmount = function() {
                        this.didUnmount = !0
                    }, t.prototype.render = function() {
                        return this.props.streamMetadata && this.props.game && this.state.metadataDetails ? r.createElement(c.Va, {
                            className: "preview-card-appendage",
                            display: c.W.Flex
                        }, r.createElement(c.Va, {
                            className: "preview-card-appendage__image-wrapper",
                            flexGrow: 0,
                            flexShrink: 0,
                            display: c.W.Flex,
                            alignItems: c.f.Center,
                            justifyContent: c.Ua.End
                        }, r.createElement("div", null, r.createElement(d, {
                            game: this.props.game,
                            spriteDetails: this.state.metadataDetails.spriteDetails
                        }))), r.createElement(c.xb, {
                            flexGrow: 1,
                            flexShrink: 1,
                            borderTop: !0,
                            padding: {
                                y: .5
                            },
                            margin: {
                                left: 1
                            },
                            display: c.W.Flex,
                            overflow: c.Ya.Hidden
                        }, r.createElement(c.Va, {
                            flexGrow: 1,
                            flexShrink: 1,
                            overflow: c.Ya.Hidden
                        }, r.createElement(c.V, {
                            ellipsis: !0
                        }, this.state.metadataDetails.name)), r.createElement(c.Va, {
                            flexGrow: 0,
                            flexShrink: 0
                        }, r.createElement(c.V, null, this.state.metadataDetails.label)))) : null
                    }, t
                }(r.Component));
            var m = Object(o.connect)(function(e) {
                    return {
                        leagueOfLegends: {
                            championsMap: e.directory.leagueOfLegends.championsMap
                        }
                    }
                })(p),
                h = n("5zf8"),
                f = (n("Fj9y"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onBalloonItemClick = function() {
                            t.props.onBalloonItemClick && t.props.onBalloonItemClick(t.props.videoID, t.props.index)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = {
                            src: this.props.gameChange.thumbnailUrl,
                            alt: this.props.gameChange.label
                        };
                        return r.createElement(c.Va, {
                            className: "preview-card-game-balloon-row",
                            display: c.W.Flex,
                            flexWrap: c.Z.NoWrap
                        }, r.createElement(c.Sa, {
                            linkTo: this.props.gameChange.linkTo,
                            onClick: this.onBalloonItemClick
                        }, r.createElement(c.Va, {
                            display: c.W.Flex,
                            flexDirection: c.Y.Row,
                            padding: .5
                        }, r.createElement(c.xb, {
                            className: "preview-card-game-balloon-row__image-wrapper",
                            flexGrow: 0,
                            flexShrink: 0,
                            borderRadius: c.x.Small,
                            overflow: c.Ya.Hidden,
                            position: c.db.Relative
                        }, r.createElement(c.o, {
                            align: c.d.Center,
                            ratio: c.p.BoxArt
                        }, r.createElement(c.S, i.__assign({}, e))), r.createElement(c.xb, {
                            className: "preview-card-game-balloon-row__image-play-overlay",
                            alignItems: c.f.Center,
                            background: c.r.Overlay,
                            color: c.O.Overlay,
                            display: c.W.Flex,
                            justifyContent: c.Ua.Center,
                            position: c.db.Absolute,
                            attachTop: !0,
                            attachBottom: !0,
                            attachLeft: !0,
                            attachRight: !0
                        }, r.createElement(c.mb, {
                            asset: c.nb.Play,
                            type: c.ob.Inherit
                        }))), r.createElement(c.Va, {
                            display: c.W.Flex,
                            flexDirection: c.Y.Column,
                            flexGrow: 1,
                            flexShrink: 1,
                            padding: {
                                left: 1,
                                top: 1
                            }
                        }, r.createElement(c.Va, {
                            className: "preview-card-game-balloon-row__info-label"
                        }, r.createElement(c.V, null, this.props.gameChange.label)), r.createElement(c.Va, {
                            className: "preview-card-game-balloon-row__info-duration"
                        }, r.createElement(c.V, null, Object(h.b)(this.props.gameChange.duration)))))))
                    }, t
                }(r.Component)),
                g = n("0INk"),
                v = n("8/mp"),
                b = n("eJ65"),
                k = (n("vDRX"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onBalloonToggle = function(e) {
                            t.props.onBalloonClick && !e && t.props.onBalloonClick(t.props.videoID)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        if (this.props.videoGameChanges.length > 0) {
                            var e = this.props.videoGameChanges.map(function(e) {
                                return e.label
                            });
                            Object(g.a)(e)
                        }
                    }, t.prototype.render = function() {
                        return r.createElement(c.Va, {
                            className: "preview-card-game-balloon",
                            display: c.W.InlineBlock,
                            position: c.db.Relative,
                            margin: {
                                top: .5
                            }
                        }, r.createElement(b.a, {
                            key: "game-balloon",
                            display: c.W.Inline,
                            onToggle: this.onBalloonToggle
                        }, r.createElement(c.z, {
                            type: c.F.Hollow,
                            icon: c.nb.ViewerList
                        }, r.createElement(c.Va, {
                            display: c.W.Flex,
                            flexDirection: c.Y.Row
                        }, r.createElement(c.V, null, Object(a.d)("Chapters", "PreviewCardGameBalloon")), r.createElement(c.Va, {
                            margin: {
                                left: 1
                            }
                        }, r.createElement(c.ab, {
                            label: this.props.videoGameChanges.length.toString()
                        })))), r.createElement(c.u, {
                            direction: c.v.TopLeft,
                            size: c.w.Medium
                        }, r.createElement(c.Va, {
                            overflow: c.Ya.Hidden,
                            display: c.W.Flex,
                            flexDirection: c.Y.Column,
                            flexWrap: c.Z.NoWrap
                        }, r.createElement(c.Va, {
                            padding: .5,
                            flexShrink: 0,
                            flexGrow: 0
                        }, r.createElement(c.V, {
                            color: c.O.Alt2
                        }, Object(a.d)("Chapter Select", "PreviewCardGameBalloon"))), r.createElement(c.Va, {
                            className: "preview-card-game-balloon__content",
                            display: c.W.Flex,
                            flexDirection: c.Y.Column,
                            flexGrow: 1,
                            flexShrink: 1,
                            flexWrap: c.Z.NoWrap
                        }, r.createElement(v.b, null, r.createElement(c.Va, {
                            display: c.W.Flex,
                            flexDirection: c.Y.Column,
                            flexWrap: c.Z.NoWrap,
                            fullHeight: !0
                        }, this.renderAdditionalGameList(this.props.videoGameChanges))))))))
                    }, t.prototype.renderAdditionalGameList = function(e) {
                        var t = this;
                        return e.map(function(e, n) {
                            return r.createElement(f, {
                                index: n,
                                gameChange: e,
                                key: t.props.videoID + "-" + e.offset,
                                videoID: t.props.videoID,
                                onBalloonItemClick: t.props.onBalloonItemClick
                            })
                        })
                    }, t
                }(r.Component)),
                y = n("kduP"),
                S = n("2xye"),
                C = function(e) {
                    return r.createElement(c.Va, null, r.createElement(c.V, {
                        color: c.O.Alt,
                        ellipsis: !0
                    }, e.videoGameChanges.map(function(t, n, i) {
                        return r.createElement(c.Na, {
                            key: n
                        }, r.createElement(c.T, {
                            to: {
                                pathname: Object(y.c)(t.label),
                                state: {
                                    content: S.PageviewContent.TextLink,
                                    medium: e.trackingContext && e.trackingContext.medium
                                }
                            },
                            type: c.U.Inherit
                        }, t.label, E(n, i.length - 1) ? null : ", "))
                    })))
                },
                E = function(e, t) {
                    return e === t
                },
                _ = n("N0BP"),
                w = (n("XA5B"), function(e) {
                    var t = r.createElement(c.xb, {
                        className: "preview-card-iconic-image__wrapper",
                        borderRadius: c.x.Small,
                        overflow: c.Ya.Hidden
                    }, r.createElement(c.o, {
                        ratio: e.aspect || c.p.BoxArt,
                        align: c.d.Center
                    }, r.createElement(c.S, i.__assign({}, e.imageProps))));
                    return e.linkTo && (t = r.createElement(c.T, i.__assign({}, Object(_.a)(e), {
                        to: e.linkTo,
                        onClick: e.onClick
                    }), t)), t
                });
            w.displayName = "PreviewCardIconicImage";
            n("cRsL");
            var T, O = function(e) {
                    var t = s("preview-card-top-bar", {
                        "preview-card-top-bar--gray": !e.selected,
                        "preview-card-top-bar--green": e.selected
                    });
                    return r.createElement(c.Va, {
                        display: c.W.Flex,
                        padding: {
                            x: 1,
                            y: .5
                        },
                        justifyContent: c.Ua.Between,
                        alignItems: c.f.Center,
                        className: t
                    }, r.createElement(c.Va, {
                        display: c.W.InlineFlex
                    }, r.createElement(c.V, {
                        "data-test-selector": "top-bar-title-selector",
                        color: c.O.Overlay,
                        bold: !0,
                        transform: c.Mb.Uppercase
                    }, e.title)), e.subTitle && r.createElement(c.Va, {
                        display: c.W.InlineFlex
                    }, r.createElement(c.V, {
                        "data-test-selector": "top-bar-sub-title-selector",
                        color: c.O.Overlay
                    }, e.subTitle)))
                },
                N = (n("m493"), function(e) {
                    var t = .5,
                        n = null;
                    "number" == typeof e.progressBarPercent && e.progressBarPercent > 0 && (n = r.createElement(c.Va, {
                        position: c.db.Absolute,
                        attachBottom: !0,
                        fullWidth: !0
                    }, r.createElement(c.gb, {
                        borderRadius: c.x.None,
                        size: c.ib.Small,
                        value: e.progressBarPercent,
                        mask: !0
                    })), t = 1);
                    var a = 1,
                        o = null;
                    return e.topBar && (o = r.createElement(c.Va, {
                        position: c.db.Absolute,
                        attachTop: !0,
                        fullWidth: !0
                    }, r.createElement(O, i.__assign({}, e.topBar))), a = 3), r.createElement(c.Va, {
                        position: c.db.Absolute,
                        attachTop: !0,
                        attachLeft: !0,
                        fullWidth: !0,
                        fullHeight: !0,
                        className: "preview-card-overlay"
                    }, o, n, r.createElement(c.Va, {
                        position: c.db.Absolute,
                        attachTop: !0,
                        attachLeft: !0,
                        margin: e.topBar ? {
                            x: 1,
                            y: a
                        } : 1,
                        "data-test-selector": "top-left-selector"
                    }, e.topLeft), r.createElement(c.Va, {
                        position: c.db.Absolute,
                        attachTop: !0,
                        attachRight: !0,
                        margin: e.topBar ? {
                            x: 1,
                            y: a
                        } : 1,
                        "data-test-selector": "top-right-selector"
                    }, e.topRight), r.createElement(c.Va, {
                        position: c.db.Absolute,
                        attachBottom: !0,
                        attachLeft: !0,
                        margin: {
                            x: .5,
                            y: t
                        },
                        "data-test-selector": "bottom-left-selector"
                    }, e.bottomLeft), r.createElement(c.Va, {
                        position: c.db.Absolute,
                        attachBottom: !0,
                        attachRight: !0,
                        margin: {
                            x: .5,
                            y: t
                        },
                        "data-test-selector": "bottom-right-selector"
                    }, e.bottomRight))
                }),
                I = (n("kF1+"), function(e) {
                    var t = e.icon && r.createElement(c.Va, {
                        display: c.W.Flex,
                        margin: {
                            right: .5
                        }
                    }, r.createElement(c.mb, {
                        asset: e.icon,
                        width: 10,
                        height: 10
                    }));
                    return e.withBackground ? r.createElement(c.xb, {
                        alignItems: c.f.Center,
                        background: c.r.Overlay,
                        borderRadius: c.x.Small,
                        className: "preview-card-stat",
                        color: c.O.Overlay,
                        display: c.W.Flex,
                        fontSize: c.Aa.Size6,
                        justifyContent: c.Ua.Center
                    }, t, r.createElement(c.V, null, e.value)) : r.createElement(c.xb, {
                        className: "preview-card-stat",
                        color: c.O.Overlay,
                        display: c.W.Flex,
                        padding: {
                            x: .5
                        }
                    }, t, r.createElement(c.V, null, e.value))
                }),
                D = n("GnwI"),
                R = (n("B3R5"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            didAnimatedPreviewLoad: !1,
                            didAnimatedPreviewFailToLoad: !1,
                            isHovered: !1
                        }, t.onImageError = function() {
                            t.props.latencyTracking.reportInteractive()
                        }, t.onImageLoad = function() {
                            t.props.latencyTracking.reportInteractive()
                        }, t.onAnimatedImageLoad = function(e) {
                            void 0 !== t.props.animatedImageProps && e.currentTarget.src === t.props.animatedImageProps.src && t.setState({
                                didAnimatedPreviewLoad: !0
                            })
                        }, t.onAnimatedImageLoadError = function(e) {
                            void 0 !== t.props.animatedImageProps && e.currentTarget.src === t.props.animatedImageProps.src && t.setState({
                                didAnimatedPreviewFailToLoad: !0
                            })
                        }, t.handleFocus = function() {
                            t.setState({
                                isHovered: !0
                            })
                        }, t.handleBlur = function() {
                            t.setState({
                                isHovered: !1
                            })
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.trackImageLatency || this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        var e = {};
                        return this.props.animatedImageProps && (e = {
                            onMouseEnter: this.handleFocus,
                            onMouseLeave: this.handleBlur,
                            onFocus: this.handleFocus,
                            onBlur: this.handleBlur
                        }), r.createElement("div", i.__assign({}, e, {
                            onClick: this.props.onClick
                        }), r.createElement(c.xb, {
                            background: c.r.Alt2,
                            overflow: c.Ya.Hidden
                        }, r.createElement(c.o, {
                            ratio: this.props.aspectRatio
                        }, this.renderImage())))
                    }, t.prototype.renderImage = function() {
                        var e, t = !(!this.props.animatedImageProps || !this.state.isHovered || this.state.didAnimatedPreviewFailToLoad),
                            n = s("preview-card-thumbnail__image", ((e = {})["preview-card-thumbnail__image--animated"] = this.state.isHovered && this.state.didAnimatedPreviewLoad, e));
                        return t && void 0 !== this.props.animatedImageProps ? r.createElement("div", {
                            className: n
                        }, r.createElement(c.S, i.__assign({}, this.props.animatedImageProps, {
                            onLoad: this.onAnimatedImageLoad,
                            onError: this.onAnimatedImageLoadError,
                            "data-test-selector": "preview-card-thumbnail__image-selector"
                        }))) : r.createElement("div", {
                            className: n
                        }, r.createElement(c.S, i.__assign({}, this.props.staticImageProps, {
                            onLoad: this.onImageLoad,
                            onError: this.onImageError,
                            "data-test-selector": "preview-card-thumbnail__image-selector"
                        })))
                    }, t
                }(r.Component)),
                x = Object(D.c)("PreviewCardThumbnail")(R),
                F = (n("80G/"), function(e) {
                    var t = null;
                    return e.subtitles && e.subtitles.length > 0 && (t = e.subtitles.map(function(e, t) {
                        return r.createElement(c.Va, {
                            key: t,
                            "data-test-selector": "preview-card-titles__subtitle"
                        }, r.createElement(c.V, {
                            color: c.O.Alt,
                            ellipsis: !0
                        }, "string" == typeof e ? e : r.createElement(c.T, {
                            "data-a-target": e.automationSelector,
                            to: e.linkTo,
                            onClick: e.onClick,
                            type: c.U.Inherit
                        }, e.text)))
                    })), r.createElement("div", null, r.createElement(c.T, i.__assign({}, Object(_.a)(e), {
                        to: e.linkTo,
                        onClick: e.onClick,
                        type: c.U.Inherit,
                        "data-test-selector": "preview-card-titles__primary-link"
                    }), r.createElement(c.V, {
                        type: c.Nb.H3,
                        fontSize: c.Aa.Size5,
                        lines: 1,
                        bold: !0,
                        ellipsis: !0
                    }, e.title)), r.createElement(c.Va, {
                        className: "preview-card-titles__subtitle-wrapper"
                    }, t))
                }),
                P = n("H1ft"),
                V = n("ZbA5"),
                L = n("QVaV"),
                M = n("hyVY"),
                j = n("MXoD"),
                A = n("0LAi"),
                U = n("fVj5");
            ! function(e) {
                e.LockSelector = "video-lock", e.UpsellSelector = "upsell"
            }(T || (T = {}));
            var W, B, G = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (!this.props.restriction || !this.props.restriction.productName || !this.props.restriction.title) return null;
                    var e = Object(a.d)("Get It Now", "VideoPreviewCardRestriction"),
                        t = this.props.restriction.canViewRestricted,
                        n = t ? Object(a.d)("unlocked", "VideoPreviewCardRestriction") : Object(a.d)("locked", "VideoPreviewCardRestriction"),
                        i = t ? c.nb.Unlock : c.nb.Lock;
                    return r.createElement(c.Va, null, !t && r.createElement(c.xb, {
                        background: c.r.Overlay,
                        className: "video-preview-card-restriction",
                        color: c.O.Overlay,
                        display: c.W.Flex,
                        position: c.db.Absolute,
                        attachTop: !0,
                        attachLeft: !0,
                        zIndex: c.ac.Default,
                        padding: {
                            x: 5
                        },
                        textAlign: c.Jb.Center,
                        fullWidth: !0,
                        fullHeight: !0,
                        alignItems: c.f.Center,
                        alignContent: c.e.Center,
                        flexDirection: c.Y.Column,
                        flexWrap: c.Z.Wrap,
                        justifyContent: c.Ua.Center,
                        "data-test-selector": T.LockSelector
                    }, r.createElement(c.Na, {
                        margin: {
                            bottom: 1
                        }
                    }, r.createElement(c.V, {
                        color: c.O.Overlay,
                        fontSize: c.Aa.Size5,
                        "data-test-selector": T.UpsellSelector
                    }, Object(a.d)("View with {title}", {
                        title: this.props.restriction.title
                    }, "VideoPreviewCardRestriction"))), r.createElement(c.Va, null, r.createElement(c.z, {
                        type: c.F.Hollow,
                        ariaLabel: e,
                        targetBlank: !0,
                        disabled: "" === this.props.restriction.upsellLinkTo,
                        linkTo: this.props.restriction.upsellLinkTo,
                        overlay: !0
                    }, e))), r.createElement(c.xb, {
                        display: c.W.InlineFlex,
                        position: c.db.Absolute,
                        attachTop: this.props.attachTop,
                        attachBottom: !this.props.attachTop,
                        attachRight: !0,
                        margin: .5,
                        zIndex: c.ac.Default,
                        fontSize: c.Aa.Size6,
                        background: c.r.Overlay,
                        borderRadius: c.x.Medium,
                        color: c.O.Overlay
                    }, r.createElement(c.Qb, {
                        direction: this.props.attachTop ? c.Sb.Bottom : c.Sb.Top,
                        align: c.Rb.Right,
                        label: n
                    }, r.createElement(c.mb, {
                        asset: i,
                        height: 20,
                        width: 20
                    }))))
                }, t
            }(r.PureComponent);
            n("5NSO");

            function z(e) {
                return void 0 !== e.watchedProgressPercent
            }

            function H(e) {
                return void 0 !== e.clipCreatedByChannelLogin
            }! function(e) {
                e.Avatar = "preview-card-avatar", e.BoxArt = "preview-card-box-art"
            }(W || (W = {})),
            function(e) {
                e[e.SingleGameList = 1] = "SingleGameList", e[e.SingleChannelList = 2] = "SingleChannelList", e[e.MixedGameAndChannelList = 3] = "MixedGameAndChannelList"
            }(B || (B = {}));
            var q = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.isTagsExperiment = Object(U.b)(), t.getTrackingContext = function(e) {
                            var n = t.props.trackingContext;
                            return {
                                content: n && n.content ? n.content : e,
                                medium: n && n.medium
                            }
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement("div", i.__assign({
                            className: "preview-card"
                        }, Object(_.a)(this.props)), r.createElement(c.xb, {
                            position: c.db.Relative,
                            borderRadius: c.x.Medium,
                            overflow: c.Ya.Hidden
                        }, this.renderVODRestrictionOverlay(), r.createElement(c.T, {
                            to: Object(j.a)(this.getTrackingContext(S.PageviewContent.VideoThumbnail), this.props.linkTo),
                            onClick: this.props.onThumbnailClick || this.props.onClick,
                            "data-a-target": "preview-card-image-link"
                        }, this.props.thumbnailImageProps && r.createElement(x, {
                            staticImageProps: this.props.thumbnailImageProps,
                            animatedImageProps: z(this.props) && this.props.animatedImageProps || void 0,
                            trackImageLatency: this.props.trackImageLatency
                        }), this.renderOverlay())), r.createElement(c.Va, {
                            display: c.W.Flex,
                            flexWrap: c.Z.NoWrap,
                            margin: {
                                top: 1
                            }
                        }, r.createElement(c.Va, {
                            flexGrow: 0,
                            flexShrink: 0
                        }, this.renderIconicImage()), r.createElement(c.Va, {
                            className: "preview-card__titles-wrapper",
                            flexGrow: 1,
                            flexShrink: 1
                        }, this.renderTitles(), this.renderTags()), this.props.contextualCardActionProps && r.createElement(c.Va, {
                            flexGrow: 0,
                            flexShrink: 0
                        }, r.createElement(this.props.contextualCardActionProps.component, i.__assign({}, this.props.contextualCardActionProps.props)))), this.renderAppendages())
                    }, t.prototype.renderOverlay = function() {
                        return function(e) {
                            return void 0 !== e.streamType
                        }(this.props) ? r.createElement(N, {
                            topLeft: r.createElement(V.a, {
                                type: this.props.streamType,
                                hosting: !!this.props.hostedByChannelLogin
                            }),
                            topRight: void 0,
                            bottomLeft: r.createElement(I, {
                                value: Object(a.d)("{viewerCount, plural, one {# viewer} other {# viewers}}", {
                                    viewerCount: this.props.currentViewerCount
                                }, "VideoPreviewCard")
                            }),
                            bottomRight: void 0
                        }) : z(this.props) ? r.createElement(N, {
                            topLeft: void 0 !== this.props.durationInSeconds && r.createElement(I, {
                                value: Object(M.b)(this.props.durationInSeconds),
                                icon: c.nb.Play,
                                withBackground: !0
                            }),
                            topRight: this.props.listPosition && r.createElement(I, {
                                withBackground: !0,
                                value: this.getListPositionLabel()
                            }),
                            bottomLeft: r.createElement(I, {
                                value: this.getViewCountLabel()
                            }),
                            bottomRight: r.createElement(I, {
                                value: Object(a.c)(new Date(this.props.datePublished), "medium")
                            }),
                            progressBarPercent: this.props.watchedProgressPercent,
                            topBar: this.props.topBar
                        }) : H(this.props) ? r.createElement(N, {
                            topLeft: r.createElement(I, {
                                value: Object(M.b)(this.props.durationInSeconds),
                                icon: c.nb.Clip,
                                withBackground: !0
                            }),
                            topRight: void 0,
                            bottomLeft: r.createElement(I, {
                                value: this.getViewCountLabel()
                            }),
                            bottomRight: r.createElement(I, {
                                value: Object(a.c)(new Date(this.props.datePublished), "medium")
                            })
                        }) : void 0
                    }, t.prototype.getListPositionLabel = function() {
                        return z(this.props) && this.props.listPosition ? Object(a.d)("{totalVideos, plural, one {{position} / # video} other {{position} / # videos}}", {
                            position: this.props.listPosition.position,
                            totalVideos: this.props.listPosition.totalVideos
                        }, "VideoPreviewCard") : ""
                    }, t.prototype.getViewCountLabel = function() {
                        return z(this.props) || H(this.props) ? Object(a.d)("{viewerCount, plural, one {# view} other {# views}}", {
                            viewerCount: this.props.viewCount
                        }, "VideoPreviewCard") : ""
                    }, t.prototype.renderIconicImage = function() {
                        return this.props.context === B.SingleChannelList && this.props.gameBoxArtImageProps && this.props.gameBoxArtImageProps.src && this.props.gameTitleLinkTo ? r.createElement(c.Va, {
                            margin: {
                                right: 1
                            }
                        }, r.createElement(w, {
                            imageProps: this.props.gameBoxArtImageProps,
                            linkTo: Object(j.a)(this.getTrackingContext(S.PageviewContent.GameBoxart), this.props.gameTitleLinkTo),
                            onClick: this.props.onGameTitleClick,
                            aspect: c.p.BoxArt,
                            "data-test-selector": W.BoxArt,
                            "data-a-target": "preview-card-boxart-link"
                        })) : (this.props.context === B.SingleGameList || this.props.context === B.MixedGameAndChannelList) && this.props.channelImageProps && this.props.channelImageProps.src ? r.createElement(c.Va, {
                            margin: {
                                right: 1
                            }
                        }, r.createElement(w, {
                            imageProps: this.props.channelImageProps,
                            linkTo: Object(j.a)(this.getTrackingContext(S.PageviewContent.UserThumbnail), this.props.channelLinkTo),
                            onClick: this.props.onChannelImageClick || this.props.onChannelLoginClick,
                            aspect: c.p.Aspect1x1,
                            "data-test-selector": W.Avatar
                        })) : void 0
                    }, t.prototype.renderTitles = function() {
                        var e = null,
                            t = [];
                        return this.shouldShowGameBalloon(this.props) || t.push({
                            text: Object(L.a)(this.props.channelLogin, this.props.channelDisplayName, !0),
                            linkTo: Object(j.a)(this.getTrackingContext(S.PageviewContent.ChannelMetadata), this.props.channelLinkTo),
                            onClick: this.props.onChannelLoginClick,
                            automationSelector: "preview-card-channel-link"
                        }), H(this.props) && this.props.clipCreatedByChannelLoginLinkTo ? t.push({
                            text: Object(a.d)("Clipped by {userName}", {
                                userName: this.props.clipCreatedByChannelLogin || ""
                            }, "VideoPreviewCard"),
                            linkTo: this.props.clipCreatedByChannelLoginLinkTo,
                            onClick: this.props.onClipCreatedByChannelLoginClick,
                            automationSelector: "preview-card-clip-curator-link"
                        }) : z(this.props) && this.props.multipleVideoGameMarkersType && this.props.videoGameChanges && this.props.videoGameChanges.length > 0 ? e = this.renderPreviewCardGameInfo(this.props.multipleVideoGameMarkersType, this.props.videoGameChanges, this.props.onVideoGameBalloonClick, this.props.onVideoGameBalloonItemClick) : this.props.context !== B.SingleGameList && this.props.gameTitle && this.props.gameTitleLinkTo && t.push({
                            text: this.props.gameTitle,
                            linkTo: Object(j.a)(this.getTrackingContext(S.PageviewContent.GameMetadata), this.props.gameTitleLinkTo),
                            onClick: this.props.onGameTitleClick,
                            automationSelector: "preview-card-game-link"
                        }), r.createElement(r.Fragment, null, r.createElement(F, {
                            title: this.props.title,
                            onClick: this.props.onVideoTitleClick || this.props.onClick,
                            linkTo: Object(j.a)(this.getTrackingContext(S.PageviewContent.VideoTitle), this.props.linkTo),
                            subtitles: t,
                            "data-a-target": "preview-card-title-link"
                        }), e)
                    }, t.prototype.renderTags = function() {
                        return this.isTagsExperiment && this.props.tagListProps && 0 !== this.props.tagListProps.tags.length ? r.createElement(c.Va, {
                            margin: {
                                top: .5
                            }
                        }, r.createElement(A.a, i.__assign({}, this.props.tagListProps, {
                            tagNumberLimit: 3
                        }))) : null
                    }, t.prototype.renderAppendages = function() {
                        if (this.props.playerMetadata && this.props.playerMetadataGame) return r.createElement(c.Va, {
                            margin: {
                                top: this.props.tagListProps && 0 !== this.props.tagListProps.tags.length ? .5 : 0
                            }
                        }, r.createElement(m, {
                            streamMetadata: this.props.playerMetadata,
                            game: this.props.playerMetadataGame
                        }))
                    }, t.prototype.renderVODRestrictionOverlay = function() {
                        return z(this.props) && this.props.restriction && this.props.restriction.productName && this.props.restriction.title ? r.createElement(G, {
                            restriction: this.props.restriction,
                            attachTop: !0
                        }) : null
                    }, t.prototype.shouldShowGameBalloon = function(e) {
                        return !!z(e) && (!!(e.videoGameChanges && e.videoGameChanges.length > 0) && e.multipleVideoGameMarkersType === P.a.Balloon)
                    }, t.prototype.renderPreviewCardGameInfo = function(e, t, n, i) {
                        switch (e) {
                            case P.a.Balloon:
                                return r.createElement(k, {
                                    videoGameChanges: t,
                                    videoID: t[0].videoID,
                                    onBalloonClick: n,
                                    onBalloonItemClick: i
                                });
                            case P.a.Inline:
                                return r.createElement(C, {
                                    videoGameChanges: t,
                                    trackingContext: this.props.trackingContext
                                });
                            case P.a.None:
                                return null;
                            default:
                                return e
                        }
                    }, t
                }(r.Component),
                Q = Object(D.c)("PreviewCard", {
                    autoReportInteractive: !0
                })(q);
            n.d(t, !1, function() {
                return W
            }), n.d(t, "b", function() {
                return B
            }), n.d(t, !1, function() {
                return q
            }), n.d(t, "a", function() {
                return Q
            })
        },
        GzyO: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            }), n.d(t, "b", function() {
                return o
            });
            var i = n("/7QA"),
                r = "twilight.emote_picker_history";

            function a(e) {
                var t = i.l.get(r, {}),
                    n = t[e.id];
                n ? (n.uses++, n.lastUpdatedAt = Date.now()) : t[e.id] = {
                    emote: e,
                    lastUpdatedAt: Date.now(),
                    uses: 1
                }, i.l.set(r, t)
            }

            function o() {
                var e = i.l.get(r, {}) || {},
                    t = {};
                return Object.keys(e).forEach(function(n) {
                    void 0 !== e[n] && (t[e[n].emote.token] = {
                        count: e[n].uses
                    })
                }), t
            }
        },
        H1ft: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return o
            });
            var i, r = n("/7QA"),
                a = n("D7An");
            ! function(e) {
                e.None = "None", e.Inline = "Inline", e.Balloon = "Balloon"
            }(i || (i = {}));
            var o = function() {
                switch (r.o.experiments.getAssignment(a.b.Archer)) {
                    case "balloon":
                        return i.Balloon;
                    case "inline":
                        return i.Inline;
                    case "control":
                    default:
                        return i.None
                }
            }
        },
        H4B0: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "feedItemClip"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Clip"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "clipCreatedAt"
                            },
                            name: {
                                kind: "Name",
                                value: "createdAt"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "embedURL"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "thumbnailURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "width"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "480"
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "height"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "272"
                                }
                            }],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "viewCount"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "slug"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "durationSeconds"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "clipTitle"
                            },
                            name: {
                                kind: "Name",
                                value: "title"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "broadcaster"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "feedUser"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "reactions"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "emote"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "token"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "setID"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "count"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "hasReacted"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "video"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "game"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "curator"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 346
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/feed/models/user-fragment.gql"\nfragment feedItemClip on Clip {\nid\nclipCreatedAt: createdAt\nembedURL\nthumbnailURL(width:480 height:272)\nviewCount\nslug\ndurationSeconds\nclipTitle: title\nbroadcaster {\n...feedUser\n}\nreactions {\nemote {\nid\ntoken\nsetID\n}\ncount\nself {\nhasReacted\n}\n}\nvideo {\ngame {\nid\nname\n}\n}\ncurator {\nid\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("k960").definitions)), e.exports = i
        },
        H9ix: function(e, t, n) {},
        HfKK: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Shelves"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "requestID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "platform"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "langWeightedCCU"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "limit"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Int"
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "itemsPerRow"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Int"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "shelves"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "requestID"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "requestID"
                                    }
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "platform"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "platform"
                                    }
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "langWeightedCCU"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "langWeightedCCU"
                                    }
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "first"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "limit"
                                    }
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "itemsPerRow"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "itemsPerRow"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "edges"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "node"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "FragmentSpread",
                                                    name: {
                                                        kind: "Name",
                                                        value: "shelf"
                                                    },
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 331
                }
            };
            i.loc.source = {
                body: '#import "twilight/pages/front/v2/queries/shelf-fragment.gql"\nquery Shelves($requestID: String! $platform: String! $langWeightedCCU: Boolean $limit: Int $itemsPerRow: Int) {\nshelves(requestID: $requestID platform: $platform langWeightedCCU: $langWeightedCCU first: $limit itemsPerRow: $itemsPerRow) {\nedges {\nnode {\n...shelf\n}\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("Vn2t").definitions)), e.exports = i
        },
        Igt5: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return r
            }), n.d(t, "d", function() {
                return a
            }), n.d(t, "c", function() {
                return o
            }), n.d(t, "e", function() {
                return s
            }), n.d(t, "f", function() {
                return l
            }), n.d(t, "g", function() {
                return c
            }), n.d(t, "i", function() {
                return d
            }), n.d(t, "j", function() {
                return u
            }), n.d(t, "k", function() {
                return p
            }), n.d(t, "l", function() {
                return m
            }), n.d(t, "h", function() {
                return h
            }), n.d(t, "m", function() {
                return f
            });
            var i = "directory.LANGUAGE_TAGS_UPDATED",
                r = "directory.LOL_CHAMPIONS_CHANGED",
                a = "directory.LOL_CHAMPIONS_LOADING",
                o = "directory.LOL_CHAMPIONS_ERRORED",
                s = "directory.TAG_FILTER_ADDED",
                l = "directory.TAG_FILTER_CHANGED",
                c = "directory.TAG_FILTER_REMOVED";

            function d(e) {
                return {
                    type: i,
                    languageTags: e
                }
            }

            function u(e) {
                return {
                    type: o,
                    leagueOfLegendsChampionsErrored: e
                }
            }

            function p(e) {
                return {
                    type: a,
                    leagueOfLegendsChampionsLoading: e
                }
            }

            function m(e) {
                var t = {},
                    n = e.data;
                for (var i in n) n.hasOwnProperty(i) && (t[n[i].id] = n[i]);
                return {
                    type: r,
                    apiData: e,
                    championsMap: t,
                    apiVersion: e.version
                }
            }

            function h(e, t) {
                return {
                    type: s,
                    addedTag: e,
                    categoryName: t
                }
            }

            function f(e, t) {
                return {
                    type: c,
                    categoryName: t,
                    removedTag: e
                }
            }
        },
        JGCS: function(e, t, n) {},
        "Jxh/": function(e, t, n) {
            "use strict";

            function i(e) {
                var t = document.createElement("textarea");
                t.style.position = "fixed", t.style.top = "0", t.style.left = "0", t.style.fontSize = "12pt", t.style.width = "2em", t.style.height = "2em", t.style.padding = "0", t.style.border = "none", t.style.outline = "none", t.style.boxShadow = "none", t.style.background = "transparent", t.value = e, document.body.appendChild(t), t.select();
                var n = !0;
                try {
                    n = document.execCommand("copy")
                } catch (e) {
                    n = !1
                }
                return document.body.removeChild(t), n
            }
            n.d(t, "a", function() {
                return i
            })
        },
        L7EG: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "VideoShareBox_TrackingVideoContext"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "videoID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "video"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "videoID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcastType"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "owner"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "login"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "roles"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isPartner"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "game"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 156
                }
            };
            n.loc.source = {
                body: "query VideoShareBox_TrackingVideoContext($videoID: ID!) {\nvideo(id: $videoID) {\nid\nbroadcastType\nowner {\nid\nlogin\nroles {\nisPartner\n}\n}\ngame {\nid\nname\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        MIhF: function(e, t, n) {},
        MJbm: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA"),
                o = (n("efEE"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.logger = a.o.logger.withCategory("resize-detector"), t.onScroll = function() {
                            var e = t.container,
                                n = e.offsetWidth,
                                i = e.offsetHeight,
                                r = e.offsetLeft,
                                a = e.offsetTop;
                            t.logger.debug("Resize Detector -- onScroll"), n === t.width && i === t.height && a === t.top && r === t.left || (t.width = n, t.height = i, t.props.onResize(n, i, a, r)), t.reset()
                        }, t.setGrowDivRef = function(e) {
                            return t.growDiv = e
                        }, t.setGrowChildDivRef = function(e) {
                            return t.growChildDiv = e
                        }, t.setShrinkDivRef = function(e) {
                            return t.shrinkDiv = e
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement("div", {
                            className: "resize-detector"
                        }, r.createElement("div", {
                            className: "resize-detector",
                            ref: this.setGrowDivRef
                        }, r.createElement("div", {
                            className: "resize-detector__grow",
                            ref: this.setGrowChildDivRef
                        })), r.createElement("div", {
                            className: "resize-detector",
                            ref: this.setShrinkDivRef
                        }, r.createElement("div", {
                            className: "resize-detector__shrink"
                        })))
                    }, t.prototype.componentDidMount = function() {
                        if (this.growDiv) {
                            this.growDiv.parentElement || this.logger.warn("growDiv.parentElement is undefined!"), this.container = this.growDiv.parentElement.parentElement;
                            var e = this.container.style.position;
                            if ("relative" !== e && "absolute" !== e && "fixed" !== e) {
                                var t = window.getComputedStyle(this.container);
                                t && "static" === t.getPropertyValue("position") && (this.container.style.position = "relative")
                            }
                            this.onScroll(), this.growDiv.addEventListener("scroll", this.onScroll), this.shrinkDiv.addEventListener("scroll", this.onScroll)
                        } else this.logger.warn("growDiv is undefined!")
                    }, t.prototype.componentWillUnmount = function() {
                        this.growDiv.removeEventListener("scroll", this.onScroll), this.shrinkDiv.removeEventListener("scroll", this.onScroll)
                    }, t.prototype.reset = function() {
                        var e = this.growDiv,
                            t = this.shrinkDiv,
                            n = this.growChildDiv.style;
                        n.width = "100000px", n.height = "100000px", e.scrollLeft = 1e5, e.scrollTop = 1e5, t.scrollLeft = 1e5, t.scrollTop = 1e5
                    }, t
                }(r.Component));
            n.d(t, "a", function() {
                return o
            })
        },
        MLDe: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return d
            }), n.d(t, "b", function() {
                return u
            }), n.d(t, "c", function() {
                return m
            }), n.d(t, "d", function() {
                return h
            });
            var i, r, a = n("/7QA"),
                o = n("wbMx"),
                s = n("2xye"),
                l = n("BQs+"),
                c = ((i = {})[o.b.Twitter] = "twitter", i[o.b.Reddit] = "reddit", i[o.b.VKontakte] = "vkontakte", i[o.b.Facebook] = "facebook", i[o.b.Copy] = "link", i[o.b.CopyInput] = "option_link", i[o.b.Download] = "download", i),
                d = {
                    MyClips: "MyClips",
                    ClipsOfMyChannel: "ClipsOfMyChannel"
                },
                u = {
                    Game: "TopClipsGame",
                    Channel: "TopClipsChannel"
                },
                p = ((r = {
                    MyClips: s.PageviewLocation.MyClipsManager,
                    ClipsOfMyChannel: s.PageviewLocation.ChannelClipsManager,
                    TopClipsGame: s.PageviewLocation.ClipsGame,
                    TopClipsChannel: s.PageviewLocation.ChannelClips
                })[s.PageviewLocation.ClipsEditing] = s.PageviewLocation.ClipsEditing, r[s.PageviewLocation.ClipsViewing] = s.PageviewLocation.ClipsViewing, r[s.PageviewLocation.ClipsWatchPage] = s.PageviewLocation.ClipsWatchPage, r),
                m = function(e, t, n, i, r) {
                    return function(o) {
                        a.o.tracking.track(s.SpadeEventType.VideoShare, {
                            vod_id: e,
                            vod_type: s.SpadeVideoBroadcastType.Clip,
                            share_platform: c[o],
                            location: p[r],
                            game: t,
                            channel_id: Number(n || 0),
                            channel: i,
                            live: null
                        })
                    }
                },
                h = function(e, t, n, i, r, o) {
                    return function() {
                        a.o.tracking.track(s.SpadeEventType.VideoShare, {
                            vod_id: e,
                            vod_type: s.SpadeVideoBroadcastType.Clip,
                            share_platform: l.a.Link,
                            location: p[r],
                            game: t,
                            channel_id: Number(n || 0),
                            channel: i,
                            live: null,
                            shared_item_url: o
                        })
                    }
                }
        },
        MPK0: function(e, t, n) {},
        McYG: function(e, t, n) {
            "use strict";

            function i(e, t) {
                return "https://www.twitch.tv/" + t + "/clip/" + e
            }
            n.d(t, "a", function() {
                return i
            })
        },
        MdYN: function(e, t, n) {
            "use strict";
            var i, r = n("/MKj"),
                a = n("fvjX"),
                o = n("aCAx"),
                s = n("mrSG"),
                l = n("TSYQ"),
                c = n("q1tI"),
                d = n("/7QA"),
                u = n("cZKs"),
                p = n("jsEL"),
                m = n("GnwI"),
                h = n("/HY+"),
                f = n("4qQ0"),
                g = n("8Ad5"),
                v = n("2iEm"),
                b = n("u5aL"),
                k = n("uX80"),
                y = n("wbMx"),
                S = n("Jxh/"),
                C = n("kduP"),
                E = n("f00E"),
                _ = n("vhpE"),
                w = n("bq0i"),
                T = n("yR8l"),
                O = n("4rCz"),
                N = n("ndwU");
            ! function(e) {
                e[e.View = 0] = "View", e[e.Report = 1] = "Report", e[e.Delete = 2] = "Delete", e[e.DeleteAll = 3] = "DeleteAll", e[e.Ban = 4] = "Ban", e[e.Timeout = 5] = "Timeout"
            }(i || (i = {}));
            var I = n("Ue10"),
                D = n("WsU7"),
                R = [i.Delete, i.DeleteAll],
                x = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.clipsMaintenance = Object(N.a)(), n.renderMenuItem = function(e) {
                            var t = n.menuData.get(e);
                            return e && t ? c.createElement(I.Sa, {
                                key: t.display,
                                onClick: t.destinationHandler,
                                "data-a-target": "clip-moderation-button-" + t.display,
                                disabled: n.clipsMaintenance && R.includes(e)
                            }, c.createElement(I.Va, {
                                padding: {
                                    x: 1,
                                    y: .5
                                }
                            }, t.display)) : null
                        }, n.menuData = new Map([
                            [i.Report, {
                                display: Object(O.d)("Report", "ModerationMenu"),
                                destinationHandler: function() {
                                    return n.props.updateModalViewState(i.Report)
                                }
                            }],
                            [i.Delete, {
                                display: Object(O.d)("Delete", "ModerationMenu"),
                                destinationHandler: function() {
                                    return n.props.updateModalViewState(i.Delete)
                                }
                            }],
                            [i.DeleteAll, {
                                display: Object(O.d)("Delete All Clips from Video", "ModerationMenu"),
                                destinationHandler: function() {
                                    return n.props.updateModalViewState(i.DeleteAll)
                                }
                            }],
                            [i.Ban, {
                                display: Object(O.d)("Ban User", "ModerationMenu"),
                                destinationHandler: function() {
                                    return n.props.updateModalViewState(i.Ban)
                                }
                            }],
                            [i.Timeout, {
                                display: Object(O.d)("Timeout User (24 hr)", "ModerationMenu"),
                                destinationHandler: function() {
                                    return n.props.updateModalViewState(i.Timeout)
                                }
                            }]
                        ]), n
                    }
                    return s.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        var e = this.props.data,
                            t = this.props.clip;
                        if (!e || !e.currentUser) return null;
                        var n = e.currentUser.isStaff || e.currentUser.isSiteAdmin,
                            r = !!t.curator && e.currentUser.id === t.curator.id,
                            a = !!t.broadcaster && e.currentUser.id === t.broadcaster.id,
                            o = r || a || n,
                            s = a || n,
                            l = [i.Report];
                        return o && l.push(i.Delete), s && (l.push(i.DeleteAll), t.curator && t.broadcaster && (l.push(i.Ban), l.push(i.Timeout))), c.createElement(I.Va, {
                            className: "moderation-menu"
                        }, c.createElement(w.a, null, c.createElement(I.z, {
                            type: I.F.Hollow,
                            icon: I.nb.More,
                            ariaLabel: Object(O.d)("More Options", "ModerationMenu"),
                            "data-a-target": "moderation-menu-button"
                        }), c.createElement(I.u, {
                            direction: I.v.TopRight
                        }, c.createElement(I.Va, {
                            padding: {
                                y: .5
                            }
                        }, this.moderationMenuRender(l)))))
                    }, t.prototype.moderationMenuRender = function(e) {
                        var t = this;
                        return e.map(function(e) {
                            return t.renderMenuItem(e)
                        })
                    }, t = s.__decorate([Object(T.a)(D), Object(m.c)("ModerationMenu")], t)
                }(c.Component),
                F = n("MLDe"),
                P = (n("n/Dx"), 2e3),
                V = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            isShowingBalloon: !1,
                            playerRefID: Object(E.a)()
                        }, t.timeoutID = null, t.copyClipURL = function() {
                            var e;
                            try {
                                e = Object(S.a)(t.props.clip.url)
                            } catch (e) {
                                return void d.j.warn("Failed to copy", e)
                            }
                            e && (t.setState({
                                isShowingBalloon: !0
                            }), t.timeoutID = setTimeout(function() {
                                t.setState({
                                    isShowingBalloon: !1
                                })
                            }, P), Object(F.c)(t.props.clip.id, t.props.clip.game && t.props.clip.game.name, t.props.clip.broadcaster && t.props.clip.broadcaster.id, t.props.clip.broadcaster && t.props.clip.broadcaster.login, t.props.pageType)(y.b.CopyInput))
                        }, t.dismissBalloon = function() {
                            t.setState({
                                isShowingBalloon: !1
                            }), t.timeoutID && (clearTimeout(t.timeoutID), t.timeoutID = null)
                        }, t
                    }
                    return s.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive(), this.props.reportPlayerInstanceStarted(this.state.playerRefID)
                    }, t.prototype.render = function() {
                        var e, t = this.props.clip.broadcaster && c.createElement(v.a, {
                            to: "/" + this.props.clip.broadcaster.login,
                            onClick: this.props.closeModal,
                            "data-a-target": "clip-modal-broadcaster-link"
                        }, this.props.clip.broadcaster.login);
                        return e = this.props.clip.game && t ? Object(d.d)("{broadcaster} playing {game}", {
                            broadcaster: t,
                            game: c.createElement(v.a, {
                                to: "" + Object(C.c)(this.props.clip.game.name),
                                onClick: this.props.closeModal,
                                "data-a-target": "clip-modal-game-link"
                            }, this.props.clip.game.name)
                        }, "ClipsViewModalContent") : t, c.createElement(I.xb, {
                            className: "clips-view-modal-content",
                            background: I.r.Base
                        }, c.createElement(I.Va, {
                            padding: {
                                bottom: 2
                            }
                        }, c.createElement(I.o, {
                            ratio: I.p.Aspect16x9
                        }, c.createElement("iframe", {
                            src: this.props.clip.embedURL,
                            width: "100%",
                            height: "100%",
                            allowFullScreen: !0
                        }))), c.createElement(I.Va, {
                            padding: {
                                x: 2,
                                bottom: 2
                            }
                        }, c.createElement(I.Va, {
                            display: I.W.Flex,
                            flexWrap: I.Z.NoWrap
                        }, c.createElement(I.Va, {
                            flexGrow: 1,
                            margin: {
                                right: 1
                            }
                        }, c.createElement(b.a, {
                            onClickOut: this.dismissBalloon
                        }, c.createElement(k.a, {
                            text: this.props.clip.url,
                            icon: !0,
                            iconAsset: I.nb.Link,
                            onSelection: this.copyClipURL,
                            "data-a-target": "clip-share-input"
                        }, c.createElement(I.u, {
                            show: this.state.isShowingBalloon,
                            direction: I.v.TopRight
                        }, c.createElement(I.Sa, {
                            onClick: this.dismissBalloon
                        }, c.createElement(I.Va, {
                            padding: 1
                        }, c.createElement(I.V, {
                            bold: !0
                        }, Object(d.d)("Link copied to clipboard", "ClipsViewModalContent")))))))), c.createElement(_.a, {
                            clip: this.props.clip,
                            pageType: this.props.pageType
                        }), c.createElement(x, {
                            clip: this.props.clip,
                            updateModalViewState: this.props.updateModalViewState
                        }))), c.createElement(I.Va, {
                            padding: {
                                x: 2,
                                bottom: 2
                            },
                            display: I.W.Flex,
                            flexWrap: I.Z.NoWrap,
                            justifyContent: I.Ua.Between,
                            fullWidth: !0,
                            overflow: I.Ya.Hidden
                        }, c.createElement(I.Va, {
                            flexGrow: 1,
                            ellipsis: !0
                        }, c.createElement(I.Na, {
                            ellipsis: !0
                        }, c.createElement(I.xb, {
                            display: I.W.Flex,
                            fontSize: I.Aa.Size5
                        }, c.createElement(I.Va, {
                            ellipsis: !0
                        }, this.props.clip.title), c.createElement(I.Va, {
                            flexShrink: 0
                        }, c.createElement(I.V, {
                            type: I.Nb.Span,
                            color: I.O.Alt2
                        }, " • ", Object(d.d)("{created, date, medium}", {
                            created: new Date(this.props.clip.createdAt)
                        }, "ClipsViewModalContent"))))), c.createElement(I.Na, {
                            ellipsis: !0
                        }, c.createElement(I.xb, {
                            color: I.O.Alt2
                        }, e, e && !!this.props.clip.curator && c.createElement("span", null, " • "), this.props.clip.curator && Object(d.d)("Clipped by {curator}", {
                            curator: c.createElement(v.a, {
                                to: "/" + this.props.clip.curator.login,
                                onClick: this.props.closeModal,
                                "data-a-target": "clip-modal-curator-link"
                            }, this.props.clip.curator.login)
                        }, "ClipsViewModalContent")))), c.createElement(I.xb, {
                            display: I.W.Flex,
                            padding: {
                                bottom: 2,
                                left: 2
                            },
                            fontSize: I.Aa.Size5,
                            color: I.O.Alt2,
                            flexShrink: 0
                        }, c.createElement(I.Va, {
                            margin: {
                                right: .5
                            },
                            alignItems: I.f.Center,
                            display: I.W.Flex
                        }, c.createElement(I.mb, {
                            asset: I.nb.GlyphViews
                        })), Object(d.d)("{viewCount, number} views", {
                            viewCount: this.props.clip.viewCount
                        }, "ClipsViewModalContent"))))
                    }, t = s.__decorate([Object(m.c)("ClipsViewModalContent")], t)
                }(c.Component),
                L = n("S1Za");
            var M = Object(r.connect)(null, function(e) {
                    return Object(a.bindActionCreators)({
                        reportPlayerInstanceStarted: L.b
                    }, e)
                })(V),
                j = (n("9a8W"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onKeyDown = function(e) {
                            var n = e.charCode || e.keyCode;
                            n === g.a.Left ? t.updateClipBackward() : n === g.a.Right && t.updateClipForward()
                        }, t.updateClipForward = function() {
                            t.updateClipIndex(t.props.clipIndex + 1)
                        }, t.updateClipBackward = function() {
                            t.updateClipIndex(t.props.clipIndex - 1)
                        }, t
                    }
                    return s.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive(), this.setUpArrowListeners()
                    }, t.prototype.render = function() {
                        var e = null,
                            t = null;
                        this.props.clipIndex > 0 && (e = c.createElement(I.Va, {
                            position: I.db.Absolute,
                            display: I.W.Flex,
                            alignItems: I.f.Stretch,
                            className: "clip-carousel-button clip-carousel-button--left"
                        }, c.createElement(I.A, {
                            ariaLabel: Object(d.d)("Previous clip", "ClipsViewModalNavigation"),
                            type: I.C.Primary,
                            icon: I.nb.AngleLeft,
                            onClick: this.updateClipBackward,
                            "data-test-selector": "clips-view-modal-navigation-back"
                        })));
                        var n = this.props.getClips();
                        return this.props.loadMoreClips && n.length - this.props.clipIndex < 4 && this.props.loadMoreClips(), this.props.clipIndex < n.length - 1 && (t = c.createElement(I.Va, {
                            position: I.db.Absolute,
                            display: I.W.Flex,
                            alignItems: I.f.Stretch,
                            className: "clip-carousel-button clip-carousel-button--right"
                        }, c.createElement(I.A, {
                            ariaLabel: Object(d.d)("Next clip", "ClipsViewModalNavigation"),
                            type: I.C.Primary,
                            icon: I.nb.AngleRight,
                            onClick: this.updateClipForward,
                            "data-test-selector": "clips-view-modal-navigation-forward"
                        }))), c.createElement(I.Va, {
                            className: "clips-view-modal-navigation"
                        }, e, c.createElement(M, {
                            clip: this.props.clip,
                            updateModalViewState: this.props.updateModalViewState,
                            pageType: this.props.pageType,
                            closeModal: this.props.closeModal
                        }), t)
                    }, t.prototype.componentWillUnmount = function() {
                        document.removeEventListener("keydown", this.onKeyDown)
                    }, t.prototype.setUpArrowListeners = function() {
                        document.addEventListener("keydown", this.onKeyDown)
                    }, t.prototype.updateClipIndex = function(e) {
                        var t = Math.max(0, e),
                            n = this.props.getClips();
                        n.length - t < 4 && this.props.loadMoreClips && this.props.loadMoreClips(), t < n.length && this.props.showModal(B, {
                            getClips: this.props.getClips,
                            clip: n[t],
                            clipIndex: t,
                            loadMoreClips: this.props.loadMoreClips,
                            pageType: this.props.pageType
                        })
                    }, t
                }(c.Component)),
                A = Object(m.c)("ClipsViewModalNavigation")(j);
            var U = Object(r.connect)(null, function(e) {
                    return Object(a.bindActionCreators)({
                        showModal: o.d,
                        closeModal: o.c
                    }, e)
                })(A),
                W = (n("ygyh"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            modalView: i.View
                        }, t.setToViewState = function() {
                            t.updateClipsModalViewState(i.View)
                        }, t.updateClipsModalViewState = function(e) {
                            t.setState({
                                modalView: e
                            })
                        }, t
                    }
                    return s.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        var e, t, n = ((e = {})["clips-modal-view"] = !0, e["clips-modal-view--wide"] = !1, e);
                        switch (this.state.modalView) {
                            case i.Report:
                                t = c.createElement(h.a, {
                                    title: Object(d.d)("Report this Clip", "ClipsViewModal"),
                                    reportContext: {
                                        contentType: f.a.Clip,
                                        contentID: this.props.clip.slug,
                                        targetUserID: this.props.clip.broadcaster && this.props.clip.broadcaster.id || "",
                                        additionalTrackingID: this.props.clip.curator && this.props.clip.curator.id || ""
                                    },
                                    onClose: this.setToViewState
                                });
                                break;
                            case i.Delete:
                                t = c.createElement(p.d, {
                                    slug: this.props.clip.slug,
                                    onClose: this.setToViewState
                                });
                                break;
                            case i.DeleteAll:
                                t = c.createElement(p.e, {
                                    slug: this.props.clip.slug,
                                    onClose: this.setToViewState
                                });
                                break;
                            case i.Ban:
                            case i.Timeout:
                                if (this.props.clip.curator && this.props.clip.broadcaster) {
                                    t = c.createElement(p.b, {
                                        targetUser: {
                                            displayName: this.props.clip.curator.displayName || "",
                                            login: this.props.clip.curator.login || ""
                                        },
                                        broadcasterID: this.props.clip.broadcaster.id || "",
                                        isTemporary: this.state.modalView === i.Timeout,
                                        onClose: this.setToViewState
                                    });
                                    break
                                }
                            default:
                                t = c.createElement(U, {
                                    getClips: this.props.getClips,
                                    clip: this.props.clip,
                                    clipIndex: this.props.clipIndex,
                                    updateModalViewState: this.updateClipsModalViewState,
                                    loadMoreClips: this.props.loadMoreClips,
                                    pageType: this.props.pageType
                                }), n["clips-modal-view--wide"] = !0
                        }
                        return c.createElement(I.Va, {
                            className: l(n)
                        }, t, c.createElement(u.a, {
                            closeOnBackdropClick: !0,
                            closeOnPageNavigation: !0
                        }))
                    }, t = s.__decorate([Object(m.c)("ClipsViewModal")], t)
                }(c.Component));
            var B = Object(r.connect)(null, function(e) {
                return Object(a.bindActionCreators)({
                    showModal: o.d
                }, e)
            })(W);
            n.d(t, "a", function() {
                return B
            }), n.d(t, !1, function() {})
        },
        Mj6i: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return s
            });
            var i = n("mrSG"),
                r = n("yR8l"),
                a = n("0FG4"),
                o = n("S4w9");

            function s() {
                return Object(r.a)(o, {
                    props: function(e) {
                        if (e.data) {
                            var t = e.data.currentUser && e.data.currentUser.emoteSets || [],
                                n = t && Object(a.b)(t);
                            return {
                                emoteSetsData: i.__assign({}, e.data, {
                                    currentUser: e.data.currentUser || null,
                                    emoteMap: n,
                                    emoteSets: t
                                })
                            }
                        }
                        return {}
                    },
                    skip: function(e) {
                        return !e.isLoggedIn
                    }
                })
            }
        },
        NhAf: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Feed_Composer_CreatePost"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "CreatePostInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "createPost"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "post"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "feedItemPost"
                                            },
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "tweetStatus"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "tweet"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 194
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/feed/models/post-fragment.gql"\nmutation Feed_Composer_CreatePost($input: CreatePostInput!) {\ncreatePost(input: $input) {\npost {\n...feedItemPost\n}\ntweetStatus\ntweet\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("qH6+").definitions)), e.exports = i
        },
        OUrp: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            }), n.d(t, "d", function() {
                return o
            }), n.d(t, "e", function() {
                return s
            }), n.d(t, "c", function() {
                return i
            }), n.d(t, "b", function() {
                return r
            });
            var i, r, a = "carousel-player__main-description",
                o = "carousel-player-left-button",
                s = "carousel-player-right-button";
            ! function(e) {
                e[e.Horizontal = 1] = "Horizontal", e[e.Vertical = 2] = "Vertical"
            }(i || (i = {})),
            function(e) {
                e[e.Stream = 1] = "Stream", e[e.Vod = 2] = "Vod"
            }(r || (r = {}))
        },
        OhvS: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "video"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Video"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "game"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "game"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "lengthSeconds"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "owner"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "user"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "previewThumbnailURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "width"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "400"
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "height"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "225"
                                }
                            }],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "publishedAt"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "title"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "viewCount"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "contentTags"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "tagFragment"
                                    },
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 359
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/tags/models/tag-fragment.gql"\n#import "twilight/pages/front/v2/queries/user-fragment.gql"\n#import "twilight/pages/front/v2/queries/game-fragment.gql"\nfragment video on Video {\nid\ngame {\n...game\n}\nlengthSeconds\nowner {\n...user\n}\npreviewThumbnailURL(width: 400 height: 225)\npublishedAt\ntitle\nviewCount\ncontentTags {\n...tagFragment\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};

            function a(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }
            i.definitions = i.definitions.concat(a(n("iiOx").definitions)), i.definitions = i.definitions.concat(a(n("fga6").definitions)), i.definitions = i.definitions.concat(a(n("0ubH").definitions)), e.exports = i
        },
        On2s: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return v
            });
            var i, r = n("mrSG"),
                a = n("/7QA"),
                o = n("8rUg"),
                s = n.n(o),
                l = n("ZrRH"),
                c = n.n(l),
                d = n("6H22"),
                u = n.n(d),
                p = n("X7a7"),
                m = n("YhoA"),
                h = n("Pcnk"),
                f = n("mz1O"),
                g = a.o.logger.withCategory("metadata-info");
            ! function(e) {
                e.Hearthstone = "hearthstone", e.PUBG = "playerunknown's battlegrounds", e.League = "league of legends", e.Overwatch = "overwatch", e.CSGO = "counter-strike%3a global offensive"
            }(i || (i = {}));
            var v = function(e, t) {
                    return r.__awaiter(void 0, void 0, Promise, function() {
                        var n, i, o, s, l, c;
                        return r.__generator(this, function(r) {
                            switch (r.label) {
                                case 0:
                                    return n = t.toLowerCase(), i = e.counterStrikeGlobalOffensive && e.counterStrikeGlobalOffensive.skill, o = e.hearthstone && e.hearthstone.broadcasterHeroClass, s = e.leagueOfLegends && e.leagueOfLegends.championID, l = e.overwatch && e.overwatch.broadcasterCharacter, i && n === m.a.CounterStrike ? [4, b(i)] : [3, 2];
                                case 1:
                                    return [2, r.sent()];
                                case 2:
                                    return o && n === m.a.Hearthstone ? [4, k(o)] : [3, 4];
                                case 3:
                                    return [2, r.sent()];
                                case 4:
                                    return l && n === m.a.Overwatch ? [4, y(l)] : [3, 6];
                                case 5:
                                    return [2, r.sent()];
                                case 6:
                                    if (s && n === m.a.LeagueOfLegends && (c = a.o.store.getState()).directory)
                                        if (c.directory.leagueOfLegends.championsMap) {
                                            if (c.directory.leagueOfLegends.championsMap) return [2, S(s, c.directory.leagueOfLegends.championsMap, c.directory.leagueOfLegends.version)]
                                        } else a.o.store.dispatch(Object(p.b)());
                                    r.label = 7;
                                case 7:
                                    return [2, null]
                            }
                        })
                    })
                },
                b = function(e) {
                    return r.__awaiter(void 0, void 0, Promise, function() {
                        var t, n, i;
                        return r.__generator(this, function(r) {
                            switch (r.label) {
                                case 0:
                                    return r.trys.push([0, 2, , 3]), [4, Object(f.a)()];
                                case 1:
                                    return t = r.sent(), (n = {})[e] = t[0]["Skill Group"][e - 1], [2, {
                                        name: n[e].display_name,
                                        label: Object(h.b)(h.a.CSGOSkillGroup),
                                        spriteDetails: {
                                            imageWidth: n[e].image_width,
                                            imageHeight: n[e].image_height,
                                            spriteOffsetX: n[e].sprite_x_offset,
                                            spriteOffsetY: n[e].sprite_y_offset,
                                            spriteURL: s.a
                                        }
                                    }];
                                case 2:
                                    return i = r.sent(), g.error(i, "Failed to load Counter-Strike skill group data"), [2, null];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                },
                k = function(e) {
                    return r.__awaiter(void 0, void 0, void 0, function() {
                        var t, n, i;
                        return r.__generator(this, function(r) {
                            switch (r.label) {
                                case 0:
                                    return r.trys.push([0, 2, , 3]), [4, Object(f.b)()];
                                case 1:
                                    return t = r.sent(), n = {}, t[0].Class.forEach(function(e) {
                                        n[e.class] = e
                                    }), [2, {
                                        name: n[e].display_name,
                                        label: Object(h.b)(h.a.HearthstoneClass),
                                        spriteDetails: {
                                            imageWidth: n[e].image_width,
                                            imageHeight: n[e].image_height,
                                            spriteOffsetX: n[e].sprite_x_offset,
                                            spriteOffsetY: n[e].sprite_y_offset,
                                            spriteURL: c.a
                                        }
                                    }];
                                case 2:
                                    return i = r.sent(), g.error(i, "Failed to load Hearthstone class data"), [2, null];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                },
                y = function(e) {
                    return r.__awaiter(void 0, void 0, void 0, function() {
                        var t, n, i, a, o, s, l, c, d, p, m, v;
                        return r.__generator(this, function(r) {
                            switch (r.label) {
                                case 0:
                                    return r.trys.push([0, 2, , 3]), [4, Object(f.d)()];
                                case 1:
                                    for (n = r.sent(), i = void 0, a = 0, o = n; a < o.length; a++)
                                        for (s in i = o[a])
                                            if (i.hasOwnProperty(s))
                                                for (l = i[s], c = 0, d = l; c < d.length; c++)
                                                    if ((p = d[c]).character === e) return (t = {})[p.character] = p, [2, {
                                                        name: (m = t)[e].display_name,
                                                        label: Object(h.b)(h.a.OverwatchCharacter),
                                                        spriteDetails: {
                                                            imageWidth: m[e].image_width,
                                                            imageHeight: m[e].image_height,
                                                            spriteOffsetX: m[e].sprite_x_offset,
                                                            spriteOffsetY: m[e].sprite_y_offset,
                                                            spriteURL: u.a
                                                        }
                                                    }];
                                    return [2, null];
                                case 2:
                                    return v = r.sent(), g.error(v, "Failed to load Overwatch character data"), [2, null];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                },
                S = function(e, t, n) {
                    if (!t || !e) return null;
                    var i = t[e],
                        r = "https://ddragon.leagueoflegends.com/cdn/" + n + "/img/sprite/" + i.image.sprite;
                    return {
                        name: i.name,
                        label: Object(h.b)(h.a.LeagueChampion),
                        spriteDetails: {
                            imageWidth: i.image.w,
                            imageHeight: i.image.h,
                            spriteOffsetX: i.image.x,
                            spriteOffsetY: i.image.y,
                            spriteURL: r
                        }
                    }
                }
        },
        OpME: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return c
            }), n.d(t, "d", function() {
                return d
            }), n.d(t, "c", function() {
                return p
            }), n.d(t, "a", function() {
                return m
            }), n.d(t, "f", function() {
                return f
            }), n.d(t, "e", function() {
                return g
            });
            var i = n("mrSG"),
                r = n("lZdE"),
                a = n("cpJf"),
                o = {
                    "^B-?\\)$": "B)",
                    "^:-?[z|Z|\\|]$": ":|",
                    "^:-?\\)$": ":)",
                    "^:-?\\($": ":(",
                    "^:-?(p|P)$": ":P",
                    "^;-?(p|P)$": ";P",
                    "^:-?[\\\\/]$": ":/",
                    "^;-?\\)$": ";)",
                    "^R-?\\)$": "R)",
                    "^:>$": ":>",
                    "^[oO](_|\\.)[oO]$": "O_o",
                    "^:-?D$": ":D",
                    "^:-?(o|O)$": ":O",
                    "^>\\($": ">(",
                    "^:-?(?:7|L)$": ":7",
                    "^:-?(S|s)$": ":S",
                    "^#-?[\\\\/]$": "#/",
                    "^<\\]$": "<]",
                    "^<3$": "<3",
                    "^&lt;3$": "<3",
                    "^&lt;\\]$": "<]",
                    "^&gt;\\($": ">("
                },
                s = ["1.0", "2.0", "3.0"],
                l = new Set([457, 33, 42, 0]);

            function c(e) {
                for (var t = [], n = function(e) {
                        if (!e || !e.id || !e.token) return "continue";
                        var n = h(e.token),
                            r = o[n] || n,
                            a = s.reduce(function(t, n) {
                                var i = t;
                                return i && (i = i.concat(", ")), i.concat("https://static-cdn.jtvnw.net/emoticons/v1/" + e.id + "/" + n + " " + n + "x")
                            }, "");
                        t.push(i.__assign({
                            displayName: r,
                            srcSet: a
                        }, e))
                    }, r = 0, a = e; r < a.length; r++) {
                    n(a[r])
                }
                return t
            }
            var d = function(e) {
                var t = h(e);
                return o[t] || t
            };

            function u(e) {
                return e.filter(function(e) {
                    return !!e && !!e.id && !!e.token
                }).sort(function(e, t) {
                    return parseInt(e.id, 10) - parseInt(t.id, 10)
                })
            }

            function p(e) {
                for (var t = [], n = 0, i = e; n < i.length; n++) {
                    var r = i[n];
                    if (r && r.id && r.emotes) {
                        for (var a = {
                                id: r.id,
                                emotes: []
                            }, o = 0, s = r.emotes; o < s.length; o++) {
                            var l = s[o];
                            l && l.id && l.token && a.emotes.push(l)
                        }
                        t.push(a)
                    }
                }
                return t
            }

            function m(e) {
                for (var t = [], n = [], i = 0, r = e; i < r.length; i++) {
                    var a = r[i];
                    if (a && a.id && a.emotes) {
                        var o = {
                            id: a.id,
                            emotes: c(u(a.emotes))
                        };
                        l.has(parseInt(a.id, 10)) ? t.push(o) : n.push(o)
                    }
                }
                return n.concat(t)
            }
            var h = function(e) {
                    return function(e) {
                        return /[\|\\\^\$\*\+\?\:\#]/.test(e)
                    }(e) ? "^" + e.replace(/\\(?=[&;:])/g, "") + "$" : e
                },
                f = function(e, t, n) {
                    var i = n || a.d,
                        o = [],
                        s = [],
                        l = [],
                        c = new RegExp("^" + Object(r.a)(t), "i");
                    return e.forEach(function(e) {
                        i[e.token] ? l.push(e) : e.token.match(c) ? o.push(e) : s.push(e)
                    }), o.sort(function(e, t) {
                        return e.token < t.token ? -1 : e.token > t.token ? 1 : 0
                    }), s.sort(function(e, t) {
                        return e.token < t.token ? -1 : e.token > t.token ? 1 : 0
                    }), l.sort(function(e, t) {
                        return i[t.token].count - i[e.token].count
                    }), l.concat(o).concat(s)
                },
                g = function(e) {
                    var t = {};
                    return e.filter(function(e) {
                        return !t.hasOwnProperty(e.token) && (t[e.token] = !0)
                    })
                }
        },
        Oy4H: function(e, t, n) {},
        PDCe: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "ReportUserModal_ReportUserCommunity"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ReportUserInCommunityInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "reportUserInCommunity"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "user"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 138
                }
            };
            n.loc.source = {
                body: "mutation ReportUserModal_ReportUserCommunity($input: ReportUserInCommunityInput!) {\nreportUserInCommunity(input: $input) {\nuser {\nid\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        Pcnk: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return a
            });
            var i, r = n("/7QA");
            ! function(e) {
                e[e.CSGOMap = 0] = "CSGOMap", e[e.CSGOSkillGroup = 1] = "CSGOSkillGroup", e[e.HearthstoneClass = 2] = "HearthstoneClass", e[e.HearthstoneMode = 3] = "HearthstoneMode", e[e.LeagueChampion = 4] = "LeagueChampion", e[e.OverwatchCharacter = 5] = "OverwatchCharacter"
            }(i || (i = {}));
            var a = function(e) {
                switch (e) {
                    case i.CSGOMap:
                        return Object(r.d)("Map", "CSGOMapFilter");
                    case i.CSGOSkillGroup:
                        return Object(r.d)("Rank", "CSGORankFilter");
                    case i.HearthstoneClass:
                        return Object(r.d)("Class", "HearthstoneClassFilter");
                    case i.HearthstoneMode:
                        return Object(r.d)("Mode", "HearthstoneModeFilter");
                    case i.LeagueChampion:
                        return Object(r.d)("Champion", "LeagueFilter");
                    case i.OverwatchCharacter:
                        return Object(r.d)("Hero", "OverwatchFilter");
                    default:
                        return ""
                }
            }
        },
        QV0j: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = n("oB8h"),
                r = function(e) {
                    switch (e) {
                        case i.a.Live:
                            return i.a.Live;
                        case i.a.Premiere:
                            return i.a.Premiere;
                        case i.a.Rerun:
                            return i.a.Rerun;
                        case i.a.WatchParty:
                            return i.a.WatchParty;
                        default:
                            return null
                    }
                }
        },
        QzrU: function(e, t, n) {},
        R0Op: function(e, t, n) {},
        RQ6e: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("TSYQ"),
                a = n("q1tI"),
                o = n("/7QA"),
                s = n("fvjX"),
                l = n("yR8l"),
                c = n("GnwI"),
                d = n("+PZR"),
                u = n("Ue10"),
                p = n("gIsd"),
                m = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleChange = function(e) {
                            t.props.onChange && t.props.onChange(e.target.value)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                        this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        var e = null,
                            t = Object(o.d)("Select One...", "ReportUserModal");
                        this.props.data.loading ? e = [a.createElement("option", {
                            key: "Loading"
                        }, Object(o.d)("Loading...", "ReportReasonsSelect"))] : e = (this.props.data.reportReasons || Object(d.b)()).map(function(e) {
                            return a.createElement("option", {
                                key: e.id,
                                value: e.id
                            }, e.text)
                        });
                        return a.createElement(u.Va, {
                            margin: {
                                bottom: 2
                            }
                        }, a.createElement(u.Ca, {
                            id: "reporting-modal__select",
                            label: Object(o.d)("Select Reason (required)", "ReportUserModal")
                        }, a.createElement(u.sb, {
                            id: "reporting-modal__select",
                            "data-test-selector": "reporting-modal.select",
                            disabled: this.props.data.loading || !!this.props.data.error,
                            onChange: this.handleChange,
                            defaultValue: t
                        }, a.createElement("option", {
                            disabled: !0,
                            key: "default"
                        }, t), e)))
                    }, t
                }(a.Component),
                h = Object(s.compose)(Object(l.a)(p, {
                    options: function(e) {
                        return {
                            variables: {
                                content: e.reportContentType
                            }
                        }
                    }
                }), Object(c.c)("ReportReasonSelect"))(m);
            n("y4Ne");
            n.d(t, "a", function() {
                return g
            }), n.d(t, "b", function() {
                return f
            }), n.d(t, "c", function() {
                return v
            });
            var f, g = "community_rules_violation";
            ! function(e) {
                e[e.Unsubmitted = 0] = "Unsubmitted", e[e.Success = 1] = "Success", e[e.FormError = 2] = "FormError", e[e.MutationError = 3] = "MutationError", e[e.UserError = 4] = "UserError", e[e.CommunityError = 5] = "CommunityError"
            }(f || (f = {}));
            var v = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        community: null,
                        description: "",
                        reason: null,
                        isCommunityReason: !1,
                        selectedCommunityID: null,
                        selectedCommunityName: null
                    }, t.headerMessage = Object(o.d)("Tell us your concern about this content so that we can review it to determine whether there has been a violation of the {tosLink}. {br} (Abuse of this feature is a violation of the terms of service)", {
                        br: a.createElement("br", null),
                        tosLink: a.createElement("a", {
                            href: "https://www.twitch.tv/p/terms-of-service",
                            target: "_blank"
                        }, Object(o.d)("terms of service", "ReportUser"))
                    }, "ReportUser"), t.handleSubmit = function(e) {
                        if (e.preventDefault(), t.state.reason && t.state.description.length > 0) {
                            if (t.state.reason === g && !t.state.selectedCommunityID) {
                                if (!t.props.targetUser.directories.nodes.length) return void t.props.onError(f.CommunityError);
                                t.props.onError(f.FormError)
                            }
                            t.props.onSubmit(t.state.reason || "", t.state.description, t.state.selectedCommunityID, t.state.selectedCommunityName)
                        } else t.props.onError(f.FormError)
                    }, t.handleTextAreaChange = function(e) {
                        t.setState({
                            description: e.target.value
                        })
                    }, t.handleReasonChange = function(e) {
                        t.setState({
                            reason: e,
                            isCommunityReason: !1
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(u.Va, {
                        display: u.W.Flex,
                        flexDirection: u.Y.Column,
                        alignItems: u.f.Center,
                        justifyContent: u.Ua.Center
                    }, this.renderStatusMessage(), this.renderBody())
                }, t.prototype.renderBody = function() {
                    return this.props.submitStatus === f.Success ? a.createElement("div", null, a.createElement(u.z, {
                        onClick: this.props.onClose
                    }, a.createElement(u.Va, {
                        padding: {
                            x: 2
                        }
                    }, Object(o.d)("Close", "ReportUser")))) : a.createElement("div", null, a.createElement(u.Va, {
                        "data-test-selector": "reporting.title",
                        margin: {
                            bottom: 1
                        },
                        "data-a-target": "reporting-channel-name"
                    }, a.createElement(u.V, {
                        type: u.Nb.H4
                    }, this.props.title), a.createElement(u.xb, {
                        color: u.O.Alt2,
                        margin: {
                            top: 1
                        }
                    }, this.headerMessage)), a.createElement("form", null, a.createElement(u.xb, {
                        borderTop: !0,
                        borderBottom: !0,
                        margin: {
                            y: 2
                        },
                        padding: {
                            y: 2
                        }
                    }, a.createElement(h, {
                        reportContentType: this.props.reportContentType,
                        onChange: this.handleReasonChange
                    }), a.createElement(u.Ca, {
                        id: "reporting__text-area",
                        label: Object(o.d)("Description (required)", "ReportUser")
                    }, a.createElement(u.Kb, {
                        defaultValue: this.props.defaultDescription,
                        onChange: this.handleTextAreaChange
                    }))), a.createElement(u.xb, {
                        display: u.W.Flex,
                        justifyContent: u.Ua.Center
                    }, a.createElement(u.z, {
                        onClick: this.handleSubmit
                    }, a.createElement(u.Va, {
                        padding: {
                            x: 2
                        }
                    }, Object(o.d)("Send", "ReportUser"))))))
                }, t.prototype.renderStatusMessage = function() {
                    var e = null;
                    switch (this.props.submitStatus) {
                        case f.FormError:
                            e = Object(o.d)("Reason and Description are required.", "ReportUser");
                            break;
                        case f.MutationError:
                            e = Object(o.d)("Sorry, a network error occurred when submitting your report. Please try again later.", "ReportUser");
                            break;
                        case f.Success:
                            e = Object(o.d)("Thank you for your report.", "ReportUser");
                            break;
                        case f.UserError:
                            e = Object(o.d)("This account could not be reported. It may have already been suspended, or the owner may have deleted it.", "ReportUser");
                            break;
                        case f.CommunityError:
                            e = Object(o.d)("A report of this type could not be sent because this user has not selected a Community.", "ReportUser");
                            break;
                        default:
                            return null
                    }
                    var t = r({
                        "reporting__error-container": this.props.submitStatus !== f.Success,
                        "reporting__success-container": this.props.submitStatus === f.Success
                    });
                    return a.createElement(u.xb, {
                        className: t,
                        fullWidth: this.props.submitStatus !== f.Success,
                        "data-test-selector": "reporting.error",
                        margin: {
                            bottom: 2
                        },
                        padding: 1
                    }, e)
                }, t
            }(a.Component)
        },
        RXle: function(e, t, n) {
            "use strict";
            var i = n("86FS");
            n.d(t, "VideoPreviewCard", function() {
                return i.a
            });
            n("0T/G");
            var r = n("0Rl0");
            n.d(t, "VideoPreviewCardPlaceholder", function() {
                return r.a
            })
        },
        RuiO: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Core_Services_Spade_SubEvent_User"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "withVideo"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "videoID"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "canPrimeSubscribe"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "subscriptionBenefit"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "tier"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "purchasedWithPrime"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "video"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "videoID"
                                    }
                                }
                            }],
                            directives: [{
                                kind: "Directive",
                                name: {
                                    kind: "Name",
                                    value: "include"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "if"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "withVideo"
                                        }
                                    }
                                }]
                            }],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcastType"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 266
                }
            };
            n.loc.source = {
                body: "query Core_Services_Spade_SubEvent_User($channelID: ID! $withVideo: Boolean! $videoID: ID) {\nuser(id: $channelID) {\nid\nself {\ncanPrimeSubscribe\nsubscriptionBenefit {\nid\ntier\npurchasedWithPrime\n}\n}\n}\nvideo(id: $videoID) @include(if: $withVideo) {\nid\nbroadcastType\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        S4w9: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "UserEmotes"
                    },
                    variableDefinitions: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "emoteSets"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "emotes"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "token"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 76
                }
            };
            n.loc.source = {
                body: "query UserEmotes {\ncurrentUser {\nid\nemoteSets {\nid\nemotes {\nid\ntoken\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        SWMh: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            });
            var i = n("mrSG"),
                r = n("b6Yk"),
                a = function(e, t, n) {
                    return i.__awaiter(void 0, void 0, Promise, function() {
                        var a, o;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    a = null, i.label = 1;
                                case 1:
                                    return i.trys.push([1, 3, , 4]), [4, r.a.get("/v5/videos/" + e + "/markers")];
                                case 2:
                                    return (o = i.sent()).body && o.body.markers.game_changes && (a = o.body.markers.game_changes.sort(function(e, t) {
                                        return e.time - t.time
                                    }).map(function(e, n, i) {
                                        var r = i[n + 1];
                                        return {
                                            duration: r ? r.time - e.time : t - e.time,
                                            offset: e.time,
                                            label: e.label,
                                            thumbnailUrl: e.thumbnail.sheet_url,
                                            videoID: o.body.vod_id
                                        }
                                    }), n && n.boxArtURL && a.unshift({
                                        duration: a[0].offset,
                                        videoID: e,
                                        offset: 0,
                                        label: n.name,
                                        thumbnailUrl: n.boxArtURL
                                    })), [3, 4];
                                case 3:
                                    return i.sent(), [3, 4];
                                case 4:
                                    return [2, a || []]
                            }
                        })
                    })
                }
        },
        TVuH: function(e, t, n) {},
        UUve: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return a
            }), n.d(t, "c", function() {
                return o
            }), n.d(t, "a", function() {
                return s
            }), n.d(t, "d", function() {
                return c
            }), n.d(t, "e", function() {
                return d
            });
            var i = n("/7QA"),
                r = n("y5D0"),
                a = "SUB_CHECKOUT__PRODUCT",
                o = "SUB_CHECKOUT__RECIPIENT",
                s = "SUB_CHECKOUT__MYSTERY_GIFT_COUNT",
                l = [a, o, s];

            function c() {
                l.forEach(function(e) {
                    return i.m.remove(e)
                })
            }

            function d(e) {
                return function() {
                    return Object(r.e)(e, {
                        onClose: c
                    })
                }
            }
        },
        Uive: function(e, t, n) {
            "use strict";
            var i = n("/MKj"),
                r = n("mrSG"),
                a = n("q1tI"),
                o = n("/7QA"),
                s = n("N0BP"),
                l = n("MPw5"),
                c = n("cTNz"),
                d = n("KxT4"),
                u = n("YUvD"),
                p = "#google_ads_iframe_\\/3576121\\/twitch\\/directory_0",
                m = "#google_ads_iframe_\\/3576121\\/twitch\\/directory_1",
                h = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.logger = o.j.withCategory("ad-slot"), n.createSlot = function(e) {
                            return r.__awaiter(n, void 0, void 0, function() {
                                var t;
                                return r.__generator(this, function(n) {
                                    switch (n.label) {
                                        case 0:
                                            if (this.state.slotCreated) return [2];
                                            this.setState({
                                                slotCreated: !0
                                            }), n.label = 1;
                                        case 1:
                                            return n.trys.push([1, 3, , 4]), [4, l.a.createSlot(e.slotID, e.adUnit, e.adSize, e.targeting, e.autoEnable, e.gdpr.blockConsentRequiredContent)];
                                        case 2:
                                            return t = n.sent(), Object(c.h)(t.getSlotElementId()), this.setState({
                                                slot: t
                                            }), [3, 4];
                                        case 3:
                                            return n.sent(), this.logger.warn("Unable to create ad slot", {
                                                slotID: e.slotID,
                                                adUnit: e.adUnit,
                                                adSize: e.adSize,
                                                targeting: e.targeting,
                                                autoEnable: e.autoEnable,
                                                blockConsentRequiredContent: e.gdpr.blockConsentRequiredContent
                                            }), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, n.setRef = function(e) {
                            return n.slotRef = e
                        }, n.onSlotRenderEnd = function(e) {
                            var t = e.slot.getSlotElementId();
                            if (n.state.slot && t === n.props.slotID) {
                                if (n.logger.debug("Ad slot render ended", {
                                        elementID: t,
                                        lineItemID: e.lineItemId,
                                        createdID: e.creativeId,
                                        isEmpty: e.isEmpty,
                                        serviceName: e.serviceName,
                                        size: e.size
                                    }), e.isEmpty) return;
                                if (!n.slotRef) return;
                                if (n.props.slotID === c.b.anonFront.takeover) return void(document.body.classList.contains("takeover") && n.setState({
                                    shouldDisplay: !0
                                }, function() {
                                    return n.slotRendered(e.slot)
                                }));
                                var i;
                                if (n.props.slotID === c.b.directory.banner) return void((i = n.slotRef.querySelector(p)) && 1 !== i.clientWidth && n.setState({
                                    shouldDisplay: !0
                                }, function() {
                                    return n.slotRendered(e.slot)
                                }));
                                if (n.props.slotID === c.b.directory.rectangle) return void((i = n.slotRef.querySelector(m)) && 1 !== i.clientWidth && n.setState({
                                    shouldDisplay: !0
                                }, function() {
                                    return n.slotRendered(e.slot)
                                }));
                                n.setState({
                                    shouldDisplay: !0
                                }, function() {
                                    return n.slotRendered(e.slot)
                                })
                            }
                        }, n.slotRendered = function(e) {
                            n.props.slotRendered && n.props.slotRendered(e)
                        }, n.shouldCreateSlot = function(e) {
                            return e.gdpr.status !== d.b.Loading && e.trackingSet
                        }, n.state = {
                            shouldDisplay: !1
                        }, n
                    }
                    return r.__extends(t, e), t.prototype.componentDidMount = function() {
                        c.g.addListener(c.f, this.onSlotRenderEnd), this.shouldCreateSlot(this.props) ? (this.logger.debug("Consent ready. Tracking is set. Creating slot (componentDidMount)", this.props.slotID), this.createSlot(this.props)) : this.logger.debug("Consent not ready or Tracking is not set. Skipping slot creation (componentDidMount)", this.props.slotID)
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        this.state.slotCreated || (!this.shouldCreateSlot(e) || e.gdpr.status === this.props.gdpr.status && e.trackingSet === this.props.trackingSet ? this.logger.debug("Tracking is not set. Skipping slot creation (componentWillReceiveProps)", this.props.slotID) : (this.logger.debug("Tracking is set. Creating slot (componentWillReceiveProps)", this.props.slotID), this.createSlot(e)))
                    }, t.prototype.componentWillUnmount = function() {
                        this.logger.debug("Destroying Slot (componentWillUnmount)", this.props.slotID), c.g.removeListener(c.f, this.onSlotRenderEnd), this.state.slot && l.a.destroySlot(this.state.slot)
                    }, t.prototype.shouldComponentUpdate = function(e, t) {
                        return t.shouldDisplay !== this.state.shouldDisplay
                    }, t.prototype.render = function() {
                        var e = r.__assign({}, this.props.injectStyles);
                        return this.state.shouldDisplay || (e.display = "none"), a.createElement("div", r.__assign({
                            style: e,
                            id: this.props.slotID,
                            ref: this.setRef
                        }, Object(s.a)(this.props)))
                    }, t
                }(a.Component),
                f = Object(u.a)(d.c.Amazon)(h);
            var g = Object(i.connect)(function(e) {
                return {
                    trackingSet: e.ads.trackingSet
                }
            })(f);
            n.d(t, "a", function() {
                return g
            })
        },
        Vn2t: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "shelf"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Shelf"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "title"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "shelfTitle"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "content"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "edges"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "shelfContentEdge"
                                            },
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }, {
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "shelfTitle"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ShelfTitle"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "key"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "context"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "game"
                                    },
                                    directives: []
                                }]
                            }
                        }]
                    }
                }, {
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "shelfContentEdge"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ShelfContentEdge"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "cursor"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "node"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "shelfClip"
                                    },
                                    directives: []
                                }, {
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "video"
                                    },
                                    directives: []
                                }, {
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    directives: []
                                }, {
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "game"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "trackingID"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 518
                }
            };
            i.loc.source = {
                body: '#import "twilight/pages/front/v2/queries/clip-fragment.gql"\n#import "twilight/pages/front/v2/queries/video-fragment.gql"\n#import "twilight/pages/front/v2/queries/stream-fragment.gql"\n#import "twilight/pages/front/v2/queries/game-fragment.gql"\nfragment shelf on Shelf {\nid\ntitle {\n...shelfTitle\n}\ncontent {\nedges {\n...shelfContentEdge\n}\n}\n}\nfragment shelfTitle on ShelfTitle {\nkey\ncontext {\n...game\n}\n}\nfragment shelfContentEdge on ShelfContentEdge {\ncursor\nnode {\n...shelfClip\n...video\n...stream\n...game\n}\ntrackingID\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};

            function a(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }
            i.definitions = i.definitions.concat(a(n("jMH6").definitions)), i.definitions = i.definitions.concat(a(n("OhvS").definitions)), i.definitions = i.definitions.concat(a(n("A8tl").definitions)), i.definitions = i.definitions.concat(a(n("0ubH").definitions)), e.exports = i
        },
        VrOd: function(e, t, n) {},
        Vsf8: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ClipsModalDeleteAll_Clip"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "slug"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "clip"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "slug"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "video"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcast"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 101
                }
            };
            n.loc.source = {
                body: "query ClipsModalDeleteAll_Clip($slug: ID!) {\nclip(slug: $slug) {\nid\nvideo {\nid\n}\nbroadcast {\nid\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        VwyG: function(e, t, n) {
            "use strict";
            var i = n("/MKj"),
                r = n("kRBY"),
                a = n("mrSG"),
                o = n("q1tI"),
                s = n("oJmH"),
                l = n("/7QA"),
                c = n("yR8l"),
                d = n("GnwI"),
                u = n("nt5g"),
                p = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.logger = l.j.withCategory("role-restricted"), n.state = {
                            loading: t.isLoggedIn,
                            permitted: !1,
                            roles: {
                                staff: !1,
                                editor: !1,
                                owner: !1
                            },
                            error: null
                        }, n
                    }
                    return a.__extends(t, e), t.prototype.componentDidUpdate = function(e) {
                        var t = e.data && e.data.loading,
                            n = this.props.data && this.props.data.loading;
                        (!this.props.isLoggedIn || t && !n) && this.props.latencyTracking.reportInteractive()
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        this.maybeSetRoleState(e)
                    }, t.prototype.componentDidMount = function() {
                        this.maybeSetRoleState(this.props)
                    }, t.prototype.render = function() {
                        return this.props.children(this.state)
                    }, t.prototype.maybeSetRoleState = function(e) {
                        if (e.isLoggedIn && e.data) {
                            var t = function(e) {
                                    var t = e.data,
                                        n = {
                                            staff: !1,
                                            editor: !1,
                                            owner: !1
                                        };
                                    t && !t.error && !t.loading && t.user && t.currentUser && (n.staff = !(!t.currentUser.roles || !t.currentUser.roles.isStaff), n.editor = !(!t.user.self || !t.user.self.isEditor), n.owner = t.user.id === t.currentUser.id);
                                    return n
                                }(e),
                                n = {
                                    loading: e.data.loading,
                                    permitted: function(e, t) {
                                        if (e.owner) return !0;
                                        if (e.staff && t.staff) return !0;
                                        if (e.editor && t.editor) return !0;
                                        return !1
                                    }(t, e.permittedRoles),
                                    roles: t,
                                    error: null
                                };
                            e.data.error ? (n.error = new Error(e.data.error.toString()), this.logger.warn("Unable to retrieve data from GraphQL.", {
                                err: n.error
                            })) : e.data.loading || e.data.user && e.data.currentUser || (n.error = new Error("Failed to fetch user information"), this.logger.warn("Failed to fetch user information.", {
                                err: n.error
                            })), this.setState(n)
                        }
                    }, t
                }(o.Component);
            var m = Object(s.compose)(Object(c.a)(u, {
                options: function(e) {
                    return {
                        variables: {
                            contentOwnerLogin: e.ownerLogin
                        }
                    }
                },
                skip: function(e) {
                    return !e.isLoggedIn
                }
            }), Object(d.c)("RoleRestricted"))(p);
            var h = Object(i.connect)(function(e) {
                return {
                    isLoggedIn: Object(r.f)(e)
                }
            })(m);
            n.d(t, "a", function() {
                return h
            })
        },
        W8Fi: function(e, t, n) {
            "use strict";

            function i(e) {
                return e.some(function(e) {
                    return !!e.self && !!e.self.promotion
                })
            }

            function r(e) {
                return e.some(function(e) {
                    return !!e.giftPromotion
                })
            }

            function a(e) {
                return e.some(function(e) {
                    return !!e.self && !!e.self.paidUpgradePromotion
                })
            }

            function o(e, t) {
                var n;
                return t ? n = e.giftPromotion : e.self && (n = e.self.promotion), n ? n.newPrice : e.price
            }

            function s(e, t) {
                var n;
                return t ? n = e.giftPromotion : e.self && (n = e.self.promotion), n ? n.discountValue : 0
            }

            function l(e) {
                return e.self && e.self.paidUpgradePromotion ? e.self.paidUpgradePromotion.newPrice : e.price
            }

            function c(e) {
                return e.find(function(e) {
                    return !!e.self && !!e.self.paidUpgradePromotion
                }) || null
            }

            function d(e, t) {
                return !!e && !!t && a(e) && !t.paidUpgrade && !!t.gift && t.gift.isGift
            }
            n.d(t, "g", function() {
                return i
            }), n.d(t, "e", function() {
                return r
            }), n.d(t, "f", function() {
                return a
            }), n.d(t, "c", function() {
                return o
            }), n.d(t, "d", function() {
                return s
            }), n.d(t, "a", function() {
                return l
            }), n.d(t, "b", function() {
                return c
            }), n.d(t, "h", function() {
                return d
            })
        },
        WsU7: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ModerationMenu_CurrentUser"
                    },
                    variableDefinitions: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "isSiteAdmin"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "isStaff"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 75
                }
            };
            n.loc.source = {
                body: "query ModerationMenu_CurrentUser {\ncurrentUser {\nid\nisSiteAdmin\nisStaff\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        X2bz: function(e, t, n) {},
        X7Ac: function(e, t, n) {
            "use strict";
            var i = n("wbMx");
            n.d(t, "a", function() {
                return i.a
            }), n.d(t, "b", function() {
                return i.b
            })
        },
        X7a7: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("cr+I"),
                a = n("/7QA"),
                o = n("b6Yk"),
                s = {
                    en: "en_US",
                    de: "de_DE",
                    es: "es_ES",
                    "es-mx": "es_ES",
                    fr: "fr_FR",
                    it: "it_IT",
                    hu: "hu_HU",
                    pl: "pl_PL",
                    pt: "pt_BR",
                    "pt-br": "pt_BR",
                    vi: "vn_VN",
                    tr: "tr_TR",
                    ro: "ro_RO",
                    cs: "cs_CZ",
                    el: "el_GR",
                    ru: "ru_RU",
                    th: "th_TH",
                    "zh-cn": "zh_CN",
                    "zh-tw": "zh_TW",
                    ja: "ja_JP",
                    ko: "ko_KR"
                },
                l = function(e) {
                    return e && s[e] || "en_US"
                },
                c = n("Igt5");
            n.d(t, "b", function() {
                return m
            }), n.d(t, "d", function() {
                return h
            }), n.d(t, "c", function() {
                return f
            }), n.d(t, "a", function() {
                return g
            });
            var d = "languageTags",
                u = 0,
                p = 350;

            function m() {
                var e = this;
                return function(t) {
                    clearTimeout(u), u = setTimeout(function() {
                        return i.__awaiter(e, void 0, void 0, function() {
                            var e, n, s, d, u, p;
                            return i.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        e = a.o.logger.withCategory("leagueoflegends-api"), t(Object(c.k)(!0)), i.label = 1;
                                    case 1:
                                        return i.trys.push([1, 3, , 4]), n = a.o.intl.getLanguageCode(), s = l(n), d = o.a.getAPIURL("/api/lol/champions?" + r.stringify({
                                            locale: s,
                                            on_site: 1
                                        })).toString(), [4, o.a.get(d)];
                                    case 2:
                                        return (u = i.sent()).body ? t(Object(c.l)(u.body)) : (e.warn("LoL champion API response body was empty."), t(Object(c.j)(!0))), [3, 4];
                                    case 3:
                                        throw p = i.sent(), t(Object(c.j)(!0)), e.error(p, "Failed to load LoL champion data"), p;
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, p)
                }
            }

            function h(e, t) {
                var n = this;
                return function(r) {
                    return i.__awaiter(n, void 0, void 0, function() {
                        var n, o;
                        return i.__generator(this, function(i) {
                            return n = new Set(g()), t ? n.add(e) : n.delete(e), o = Array.from(n), a.l.set(d, o), r(Object(c.i)(o)), [2]
                        })
                    })
                }
            }

            function f(e) {
                var t = this;
                return function(n) {
                    return i.__awaiter(t, void 0, void 0, function() {
                        return i.__generator(this, function(t) {
                            return a.l.set(d, e), n(Object(c.i)(e)), [2]
                        })
                    })
                }
            }

            function g() {
                return a.l.get(d, [])
            }
        },
        XA5B: function(e, t, n) {},
        "XW/r": function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Reaction_Remove"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "RemoveReactionInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "removeReaction"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "content"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "feedItemClip"
                                            },
                                            directives: []
                                        }, {
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "feedItemPost"
                                            },
                                            directives: []
                                        }, {
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "feedItemVideo"
                                            },
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 211
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/feed/models/post-fragment.gql"\nmutation Reaction_Remove($input: RemoveReactionInput!) {\nremoveReaction(input: $input) {\ncontent {\n...feedItemClip\n...feedItemPost\n...feedItemVideo\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("qH6+").definitions)), e.exports = i
        },
        YhoA: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }),
                function(e) {
                    e.CounterStrike = "counter-strike: global offensive", e.Hearthstone = "hearthstone", e.LeagueOfLegends = "league of legends", e.Overwatch = "overwatch"
                }(i || (i = {}))
        },
        ZbA5: function(e, t, n) {
            "use strict";
            var i, r, a, o, s = n("mrSG"),
                l = n("TSYQ"),
                c = n("q1tI"),
                d = n("/7QA"),
                u = n("oB8h"),
                p = n("Ue10");
            n("kVMo");
            ! function(e) {
                e.HostingDot = "stream-type-indicator__hosting-dot"
            }(o || (o = {}));
            var m = ((i = {})[u.a.Live] = "stream-type-indicator--live", i[u.a.Premiere] = "stream-type-indicator--premiere", i[u.a.Rerun] = "stream-type-indicator--rerun", i[u.a.WatchParty] = "stream-type-indicator--rerun", i),
                h = ((r = {})[u.a.Premiere] = p.nb.VideoPremiere, r[u.a.Rerun] = p.nb.VideoRerun, r[u.a.WatchParty] = p.nb.VideoRerun, r),
                f = ((a = {})[u.a.Premiere] = p.ob.Live, a[u.a.Rerun] = p.ob.Inherit, a[u.a.WatchParty] = p.ob.Inherit, a),
                g = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return s.__extends(t, e), t.prototype.render = function() {
                        return c.createElement(p.xb, {
                            className: this.getClassNames(),
                            color: p.O.Overlay,
                            background: p.r.Overlay,
                            padding: {
                                x: .5
                            },
                            borderRadius: p.x.Small,
                            display: p.W.Flex
                        }, c.createElement(p.Va, {
                            display: p.W.Flex,
                            alignItems: p.f.Center,
                            margin: {
                                right: .5
                            }
                        }, this.getIcon()), c.createElement(p.V, {
                            type: p.Nb.Span
                        }, this.getLabel()))
                    }, t.prototype.getClassNames = function() {
                        var e = {
                            "stream-type-indicator": !0
                        };
                        return e[m[this.props.type]] = !0, l(e)
                    }, t.prototype.getIcon = function() {
                        return this.props.hosting ? c.createElement(p.xb, {
                            borderRadius: p.x.Rounded,
                            className: "stream-type-indicator__hosting-dot",
                            "data-test-selector": o.HostingDot
                        }) : this.props.type === u.a.Live ? c.createElement(p.Va, {
                            className: "stream-type-indicator__live-wrapper",
                            display: p.W.Flex,
                            alignItems: p.f.Center
                        }, c.createElement(p.K, {
                            status: p.M.Live,
                            size: p.L.Small
                        })) : c.createElement(p.mb, {
                            asset: h[this.props.type],
                            type: f[this.props.type],
                            width: 14,
                            height: 14
                        })
                    }, t.prototype.getLabel = function() {
                        if (this.props.hosting) return Object(d.d)("Hosting", "StreamTypeIndicator");
                        switch (this.props.type) {
                            case u.a.Live:
                                return Object(d.d)("LIVE", "StreamTypeIndicator");
                            case u.a.Premiere:
                                return Object(d.d)("Premiere", "StreamTypeIndicator");
                            case u.a.Rerun:
                            case u.a.WatchParty:
                                return Object(d.d)("Rerun", "StreamTypeIndicator");
                            default:
                                return ""
                        }
                    }, t
                }(c.Component);
            n.d(t, !1, function() {
                return o
            }), n.d(t, "a", function() {
                return g
            })
        },
        ZrRH: function(e, t, n) {
            e.exports = n.p + "assets/hearthstone-classes-d5c707fb47547e9585bc.png"
        },
        ZtEv: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return i
            }), n.d(t, "c", function() {
                return r
            }), n.d(t, "e", function() {
                return a
            }), n.d(t, "a", function() {
                return o
            });
            var i, r, a, o, s = n("0Log");
            n.d(t, "d", function() {
                    return s.ModerationActions
                }),
                function(e) {
                    e[e.Message = 0] = "Message", e[e.ExtensionMessage = 1] = "ExtensionMessage", e[e.Moderation = 2] = "Moderation", e[e.ModerationAction = 3] = "ModerationAction", e[e.TargetedModerationAction = 4] = "TargetedModerationAction", e[e.AutoMod = 5] = "AutoMod", e[e.SubscriberOnlyMode = 6] = "SubscriberOnlyMode", e[e.FollowerOnlyMode = 7] = "FollowerOnlyMode", e[e.SlowMode = 8] = "SlowMode", e[e.EmoteOnlyMode = 9] = "EmoteOnlyMode", e[e.R9KMode = 10] = "R9KMode", e[e.Connected = 11] = "Connected", e[e.Disconnected = 12] = "Disconnected", e[e.Reconnect = 13] = "Reconnect", e[e.Hosting = 14] = "Hosting", e[e.Unhost = 15] = "Unhost", e[e.Hosted = 16] = "Hosted", e[e.Subscription = 17] = "Subscription", e[e.Resubscription = 18] = "Resubscription", e[e.GiftPaidUpgrade = 19] = "GiftPaidUpgrade", e[e.SubGift = 20] = "SubGift", e[e.Clear = 21] = "Clear", e[e.RoomMods = 22] = "RoomMods", e[e.RoomState = 23] = "RoomState", e[e.Raid = 24] = "Raid", e[e.Unraid = 25] = "Unraid", e[e.Ritual = 26] = "Ritual", e[e.Notice = 27] = "Notice", e[e.Info = 28] = "Info", e[e.BadgesUpdated = 29] = "BadgesUpdated", e[e.Purchase = 30] = "Purchase", e[e.BitsCharity = 31] = "BitsCharity", e[e.CrateGift = 32] = "CrateGift", e[e.RewardGift = 33] = "RewardGift", e[e.SubMysteryGift = 34] = "SubMysteryGift"
                }(i || (i = {})),
                function(e) {
                    e[e.Post = 0] = "Post", e[e.Action = 1] = "Action", e[e.PostWithMention = 2] = "PostWithMention"
                }(r || (r = {})),
                function(e) {
                    e[e.Ban = 0] = "Ban", e[e.Timeout = 1] = "Timeout"
                }(a || (a = {})),
                function(e) {
                    e[e.MessageRejectedPrompt = 0] = "MessageRejectedPrompt", e[e.CheerMessageRejectedPrompt = 1] = "CheerMessageRejectedPrompt", e[e.MessageRejected = 2] = "MessageRejected", e[e.MessageAllowed = 3] = "MessageAllowed", e[e.MessageDenied = 4] = "MessageDenied", e[e.CheerMessageDenied = 5] = "CheerMessageDenied", e[e.CheerMessageTimeout = 6] = "CheerMessageTimeout"
                }(o || (o = {}))
        },
        a1OF: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return u
            }), n.d(t, "b", function() {
                return p
            }), n.d(t, "f", function() {
                return m
            }), n.d(t, "c", function() {
                return h
            }), n.d(t, "e", function() {
                return f
            }), n.d(t, "d", function() {
                return g
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("oe5X"),
                o = n("0FG4"),
                s = n("kRBY"),
                l = n("60o1"),
                c = ["#FF0000", "#0000FF", "#008000", "#B22222", "#FF7F50", "#9ACD32", "#FF4500", "#2E8B57", "#DAA520", "#D2691E", "#5F9EA0", "#1E90FF", "#FF69B4", "#8A2BE2", "#00FF7F"],
                d = {};

            function u(e, t, n, r, a, o) {
                void 0 === a && (a = !1), void 0 === o && (o = !1);
                var s = Object(l.a)(t.displayName, t.username);
                return {
                    badges: t.badges || {},
                    bits: t.bits,
                    user: i.__assign({}, s, {
                        userLogin: t.username,
                        userID: t.userID,
                        userType: t.userType,
                        color: t.color || p(t.userID)
                    }),
                    messageParts: m(e, t.emotes || {}, t.bits, n, r, t.username),
                    deleted: a,
                    hidden: o,
                    timestamp: Date.now()
                }
            }

            function p(e, t) {
                return void 0 === t && (t = 15), "number" != typeof d[e] && (d[e] = Math.floor(Math.random() * t)), c[d[e]]
            }

            function m(e, t, n, i, l, c) {
                var d = Object(s.e)(r.o.store.getState()),
                    u = {
                        cheers: n ? i : void 0,
                        emotes: {
                            type: o.a.Position,
                            map: t
                        },
                        links: {
                            blockLinks: l,
                            parseClips: !0,
                            parseVods: !0
                        },
                        mentions: {
                            senderLogin: c,
                            sessionUser: d
                        }
                    };
                return Object(a.a)(e, u)
            }

            function h(e) {
                return e.match(/[^\uD800-\uDFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDFFF]/g)
            }

            function f(e, t) {
                return "https://static-cdn.jtvnw.net/emoticons/v1/" + e + "/" + Math.min(Math.ceil(t), 3) + ".0"
            }

            function g(e) {
                return {
                    src: f(e, 1),
                    srcSet: f(e, 1) + " 1x, " + f(e, 2) + " 2x, " + f(e, 3) + " 4x"
                }
            }
        },
        aU5I: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "FollowedGames_Games"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "limit"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Int"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "followedGames"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "first"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "limit"
                                            }
                                        }
                                    }],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "nodes"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "name"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "viewersCount"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "boxArtURL"
                                                    },
                                                    arguments: [{
                                                        kind: "Argument",
                                                        name: {
                                                            kind: "Name",
                                                            value: "width"
                                                        },
                                                        value: {
                                                            kind: "IntValue",
                                                            value: "285"
                                                        }
                                                    }, {
                                                        kind: "Argument",
                                                        name: {
                                                            kind: "Name",
                                                            value: "height"
                                                        },
                                                        value: {
                                                            kind: "IntValue",
                                                            value: "380"
                                                        }
                                                    }],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 156
                }
            };
            n.loc.source = {
                body: "query FollowedGames_Games($limit: Int) {\ncurrentUser{\nid\nfollowedGames(first: $limit){\nnodes{\nid\nname\nviewersCount\nboxArtURL(width: 285 height: 380)\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        ajXS: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Reaction_Add"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "AddReactionInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "addReaction"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "content"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "feedItemClip"
                                            },
                                            directives: []
                                        }, {
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "feedItemPost"
                                            },
                                            directives: []
                                        }, {
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "feedItemVideo"
                                            },
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 319
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/feed/models/clip-fragment.gql"\n#import "twilight/features/feed/models/post-fragment.gql"\n#import "twilight/features/feed/models/video-fragment.gql"\nmutation Reaction_Add($input: AddReactionInput!) {\naddReaction(input: $input) {\ncontent {\n...feedItemClip\n...feedItemPost\n...feedItemVideo\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};

            function a(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }
            i.definitions = i.definitions.concat(a(n("H4B0").definitions)), i.definitions = i.definitions.concat(a(n("qH6+").definitions)), i.definitions = i.definitions.concat(a(n("poSz").definitions)), e.exports = i
        },
        b6Yk: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("kRBY"),
                o = function() {
                    function e() {}
                    return e.get = function(e, t, n) {
                        return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, Promise, function() {
                            return i.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        return [4, this.request(e, i.__assign({}, t, {
                                            method: "GET"
                                        }), n)];
                                    case 1:
                                        return [2, r.sent()]
                                }
                            })
                        })
                    }, e.getOrThrow = function(e, t, n) {
                        return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, Promise, function() {
                            return i.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        return [4, this.requestOrThrow(e, i.__assign({}, t, {
                                            method: "GET"
                                        }), n)];
                                    case 1:
                                        return [2, r.sent()]
                                }
                            })
                        })
                    }, e.put = function(e, t, n) {
                        return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, Promise, function() {
                            return i.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        return [4, this.request(e, i.__assign({}, t, {
                                            method: "PUT"
                                        }), n)];
                                    case 1:
                                        return [2, r.sent()]
                                }
                            })
                        })
                    }, e.putOrThrow = function(e, t, n) {
                        return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, Promise, function() {
                            return i.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        return [4, this.requestOrThrow(e, i.__assign({}, t, {
                                            method: "PUT"
                                        }), n)];
                                    case 1:
                                        return [2, r.sent()]
                                }
                            })
                        })
                    }, e.post = function(e, t, n) {
                        return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, Promise, function() {
                            return i.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        return [4, this.request(e, i.__assign({}, t, {
                                            method: "POST"
                                        }), n)];
                                    case 1:
                                        return [2, r.sent()]
                                }
                            })
                        })
                    }, e.postOrThrow = function(e, t, n) {
                        return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, Promise, function() {
                            return i.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        return [4, this.requestOrThrow(e, i.__assign({}, t, {
                                            method: "POST"
                                        }), n)];
                                    case 1:
                                        return [2, r.sent()]
                                }
                            })
                        })
                    }, e.delete = function(e, t, n) {
                        return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, Promise, function() {
                            return i.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        return [4, this.request(e, i.__assign({}, t, {
                                            method: "DELETE"
                                        }), n)];
                                    case 1:
                                        return [2, r.sent()]
                                }
                            })
                        })
                    }, e.deleteOrThrow = function(e, t, n) {
                        return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, Promise, function() {
                            return i.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        return [4, this.requestOrThrow(e, i.__assign({}, t, {
                                            method: "DELETE"
                                        }), n)];
                                    case 1:
                                        return [2, r.sent()]
                                }
                            })
                        })
                    }, e.request = function(e, t, n) {
                        return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, Promise, function() {
                            var r, a, o, s;
                            return i.__generator(this, function(l) {
                                switch (l.label) {
                                    case 0:
                                        return t = this.constructOptions(t, n), r = t.headers ? t.headers["Content-Type"] : void 0, a = this.serialize(t.body, r), o = i.__assign({}, t, {
                                            body: a
                                        }), [4, this._fetch(e, o)];
                                    case 1:
                                        return s = l.sent(), [4, this.constructLegacyAPIResponse(s)];
                                    case 2:
                                        return [2, l.sent()]
                                }
                            })
                        })
                    }, e.requestOrThrow = function(e, t, n) {
                        return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, Promise, function() {
                            var r;
                            return i.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        return a.trys.push([0, 2, , 3]), [4, this.request(e, t, n)];
                                    case 1:
                                        if ((r = a.sent()).requestError) throw r.requestError;
                                        if (r.error) throw new Error("Error while sending legacy-api request: " + r.error.status + " - " + r.error.message);
                                        return [2, i.__assign({}, r, {
                                            body: r.body
                                        })];
                                    case 2:
                                        throw a.sent();
                                    case 3:
                                        return [2]
                                }
                            })
                        })
                    }, e.getAPIURL = function(e) {
                        return new URL(e, r.o.config.apiBaseURL)
                    }, e.constructLegacyAPIResponse = function(e) {
                        return i.__awaiter(this, void 0, Promise, function() {
                            var t, n, r, a;
                            return i.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        t = {
                                            status: e.status
                                        }, i.label = 1;
                                    case 1:
                                        return i.trys.push([1, 3, , 4]), [4, e.json()];
                                    case 2:
                                        return n = i.sent(), e.ok ? t.body = n : t.error = n, [3, 4];
                                    case 3:
                                        return r = i.sent(), e.headers && e.headers.get && (a = e.headers.get("Content-Type")) && -1 !== a.indexOf("application/json") && (t.requestError = r), [3, 4];
                                    case 4:
                                        return [2, t]
                                }
                            })
                        })
                    }, e._fetch = function(e, t) {
                        return void 0 === t && (t = {}), i.__awaiter(this, void 0, Promise, function() {
                            return i.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        return [4, fetch(this.getAPIURL(e).toString(), t)];
                                    case 1:
                                        return [2, n.sent()]
                                }
                            })
                        })
                    }, e.constructOptions = function(e, t) {
                        return e = Object.assign({}, e, {
                            headers: i.__assign({}, this.getDefaultHeaders(e, t), e.headers)
                        })
                    }, e.serialize = function(e, t) {
                        return "application/json; charset=UTF-8" === t ? JSON.stringify(e) : "string" == typeof e ? e : e && FormData.prototype.isPrototypeOf(e) ? e : e ? (this.logger.error(new Error("Could not serialize this request body for the content-type provided."), "attempting to serialize object with a non-JSON content-type", {
                            contentType: t
                        }), null) : null
                    }, e.getDefaultHeaders = function(e, t) {
                        var n = r.o.store.getState(),
                            i = {
                                Accept: "application/vnd.twitchtv.v" + (t.version || 5) + "+json; charset=UTF-8",
                                "Accept-Language": "en-us",
                                "Client-ID": r.o.config.legacyClientID,
                                "X-Requested-With": "XMLHttpRequest"
                            };
                        e.body && FormData.prototype.isPrototypeOf(e.body) || (i["Content-Type"] = "application/json; charset=UTF-8");
                        var o = Object(a.e)(n);
                        return o && (i.Authorization = "OAuth " + o.authToken, o.legacyCSRFToken && (i["Twitch-Api-Token"] = o.legacyCSRFToken)), t.excludeHeaders && t.excludeHeaders.forEach(function(e) {
                            i[e] && delete i[e]
                        }), i
                    }, e.logger = r.o.logger.withCategory("legacy-api"), e
                }()
        },
        bTcf: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "VideoShareBox_CollectionTrackingMeta"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "creatorID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "creatorID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "roles"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isPartner"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 117
                }
            };
            n.loc.source = {
                body: "query VideoShareBox_CollectionTrackingMeta($creatorID: ID!) {\nuser(id: $creatorID) {\nid\nlogin\nroles {\nisPartner\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        br9A: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            }), n.d(t, "b", function() {
                return c
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("2xye"),
                o = n("I6K6"),
                s = n("RuiO"),
                l = {
                    BuyCustomMysteryGift: "buy_custom_mystery_gift",
                    BuyGiftSub: "buy_gift_sub",
                    BuyGiftToPaidUpgrade: "buy_gift_to_paid_upgrade",
                    BuyMysteryGift: "buy_mystery_gift",
                    BuyPaidUpgrade: "buy_paid_upgrade",
                    ClickCheckout: "click_checkout_button",
                    ClickMoreSubOptions: "more_options_click",
                    ClickGiftSubOptions: "gift_options_click",
                    ClickPrimeFAQ: "click_prime_faq",
                    ClickSignupForPrime: "click_signup_for_prime",
                    ClickBack: "back_top_level",
                    CloseSubMenu: "close_subscribe_menu",
                    GiftASub: "gift_a_sub",
                    OpenSubMenu: "open_subscribe_menu",
                    SubWithPrime: "samus_spend_credit"
                };

            function c(e) {
                return i.__awaiter(this, void 0, void 0, function() {
                    var t, n, l, c, d, u, p, m, h, f, g, v, b;
                    return i.__generator(this, function(i) {
                        switch (i.label) {
                            case 0:
                                t = r.n.getVideoPlayerTrackingData().vodID, n = !!t, l = {
                                    channelID: e.channelID,
                                    withVideo: !1
                                }, n && (l.withVideo = !0, l.videoID = t), c = null, i.label = 1;
                            case 1:
                                return i.trys.push([1, 3, , 4]), [4, r.o.apollo.client.query({
                                    query: s,
                                    variables: l
                                })];
                            case 2:
                                return c = i.sent(), [3, 4];
                            case 3:
                                return d = i.sent(), r.j.error(d, "Failed to make query for channel info in FollowEvent reporting.", {
                                    channelID: e.channelID
                                }), [3, 4];
                            case 4:
                                return u = c && c.data && c.data.user || null, c && !u && r.j.error(new Error("GraphQL empty response"), "Query for channel info in SubEvent reporting returned no data.", {
                                    channelID: e.channelID
                                }), p = null, c && n && ((m = c && c.data && c.data.video) ? p = Object(o.a)(m.broadcastType) : r.j.error(new Error("GraphQL empty response"), "Query for video info in SubEvent reporting returned no data.", {
                                    currentVideoID: t
                                })), h = u && u.self, f = h ? !!h.subscriptionBenefit : null, g = h && h.subscriptionBenefit && h.subscriptionBenefit.purchasedWithPrime || !1, v = h ? h.canPrimeSubscribe : null, b = {
                                    action: e.action,
                                    can_subscribe: v,
                                    channel: e.channelLogin,
                                    channel_id: e.channelID,
                                    checkout_button_tier: e.checkoutButtonTier,
                                    has_sub_credit: e.hasSubCredit,
                                    host_channel: e.hostChannelLogin,
                                    host_channel_id: e.hostChannelID,
                                    is_menu_open: e.isMenuOpen,
                                    is_subscribed: f,
                                    is_subscribed_current_tier: h && h.subscriptionBenefit && h.subscriptionBenefit.tier,
                                    mystery_gift_count: e.mysteryGiftCount || null,
                                    sub_location: e.sub_location,
                                    sub_recipient: e.giftRecipient,
                                    modal: e.modal,
                                    modal_level: e.modalLevel || "",
                                    show_prime_content: e.showPrimeContent,
                                    show_resub: u ? v && g : null,
                                    vod_id: t,
                                    vod_type: p,
                                    viewport_height: window.innerHeight,
                                    viewport_width: window.innerWidth
                                }, r.n.track(a.SpadeEventType.Subscription, b), [2]
                        }
                    })
                })
            }
        },
        c38k: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "feedItemStream"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Stream"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "title"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "broadcaster"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "feedUser"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "game"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "viewersCount"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "previewImageURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "width"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "480"
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "height"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "272"
                                }
                            }],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "createdAt"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 212
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/feed/models/user-fragment.gql"\nfragment feedItemStream on Stream {\nid\ntitle\nbroadcaster {\n...feedUser\n}\ngame {\nid\nname\n}\nviewersCount\npreviewImageURL(width: 480 height: 272)\ncreatedAt\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("k960").definitions)), e.exports = i
        },
        "cH/u": function(e, t, n) {},
        cMjZ: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = n("o4DC");

            function r(e) {
                return e && Object(i.c)(e) || ""
            }
        },
        cRsL: function(e, t, n) {},
        cpJf: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }), n.d(t, "d", function() {
                    return a
                }), n.d(t, "c", function() {
                    return o
                }), n.d(t, "b", function() {
                    return r
                }),
                function(e) {
                    e.Chat = "stream_chat", e.Feeds = "feeds", e.Room = "chatroom", e.Whisper = "whisper", e.VodChat = "vod-chat"
                }(i || (i = {}));
            var r, a = {
                    TriHard: {
                        count: 196568036
                    },
                    Kappa: {
                        count: 192158118
                    },
                    "4Head": {
                        count: 155758710
                    },
                    PogChamp: {
                        count: 151485090
                    },
                    cmonBruh: {
                        count: 146352878
                    },
                    BibleThump: {
                        count: 56472964
                    },
                    WutFace: {
                        count: 45069031
                    },
                    Kreygasm: {
                        count: 41387580
                    },
                    DansGame: {
                        count: 38097659
                    },
                    hi5F: {
                        count: 34986404
                    },
                    SMOrc: {
                        count: 34734484
                    },
                    KappaPride: {
                        count: 34262839
                    },
                    VoHiYo: {
                        count: 27886434
                    },
                    SwiftRage: {
                        count: 24561900
                    },
                    ResidentSleeper: {
                        count: 24438298
                    },
                    EleGiggle: {
                        count: 19891526
                    },
                    FailFish: {
                        count: 19118343
                    },
                    NotLikeThis: {
                        count: 18802905
                    },
                    Keepo: {
                        count: 18351415
                    },
                    BabyRage: {
                        count: 18220906
                    },
                    MingLee: {
                        count: 18026207
                    },
                    pbfSSH: {
                        count: 16911241
                    },
                    forsenE: {
                        count: 14960299
                    },
                    HeyGuys: {
                        count: 14851569
                    },
                    ANELE: {
                        count: 14648986
                    },
                    PJSalt: {
                        count: 14438861
                    }
                },
                o = ["354", "49106", "4339", "48", "25", "55338", "70433", "1902", "68856", "81103", "76171", "27509"];
            ! function(e) {
                e.Web = "WEB", e.IOS = "IOS", e.Android = "ANDROID"
            }(r || (r = {}))
        },
        d34l: function(e, t, n) {},
        dAHa: function(e, t, n) {
            "use strict";
            var i, r = n("mrSG"),
                a = n("q1tI"),
                o = n("/MKj"),
                s = n("fvjX"),
                l = n("/7QA"),
                c = n("yR8l"),
                d = n("BhFH"),
                u = n("iS14"),
                p = n("geRD"),
                m = n("f00E"),
                h = n("D7An"),
                f = n("2xye"),
                g = n("GnwI"),
                v = n("QVaV"),
                b = n("Ue10"),
                k = (n("MPK0"), "report-wizard-block"),
                y = "report-wizard-unblock",
                S = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            userBlocked: t.props.userBlocked || !1
                        }, t.renderBlock = function() {
                            return a.createElement(b.T, {
                                hoverUnderlineNone: !0,
                                onClick: t.handleBlock,
                                "data-test-selector": k
                            }, a.createElement(b.Va, {
                                display: b.W.Flex,
                                alignItems: b.f.Center
                            }, a.createElement(b.mb, {
                                type: b.ob.Brand,
                                asset: b.nb.Ban
                            }), a.createElement(b.Va, {
                                margin: {
                                    left: .5
                                }
                            }, Object(l.d)("Block {user}", {
                                user: t.props.targetUser.displayName
                            }, "ReportWizardBlockActions"))))
                        }, t.renderUnblock = function() {
                            return a.createElement(b.Va, {
                                className: "reporting-wizard__block-actions",
                                display: b.W.Flex,
                                alignItems: b.f.Center
                            }, a.createElement(b.mb, {
                                type: b.ob.Success,
                                asset: b.nb.FollowCheck
                            }), a.createElement(b.Va, {
                                margin: {
                                    right: 1
                                }
                            }, a.createElement(b.V, {
                                className: "block-user__success",
                                type: b.Nb.Span
                            }, Object(l.d)("{user} blocked", {
                                user: t.props.targetUser.displayName
                            }, "ReportWizardBlockActions"))), a.createElement(b.T, {
                                hoverUnderlineNone: !0,
                                onClick: t.handleUnblock,
                                "data-test-selector": y
                            }, a.createElement(b.Va, {
                                margin: {
                                    left: .5
                                }
                            }, Object(l.d)("Unblock", "ReportWizardBlockActions"))))
                        }, t.handleBlock = function() {
                            return r.__awaiter(t, void 0, void 0, function() {
                                return r.__generator(this, function(e) {
                                    return this.props.onBlock(), this.setState({
                                        userBlocked: !0
                                    }), [2]
                                })
                            })
                        }, t.handleUnblock = function() {
                            t.props.onUnblock(), t.setState({
                                userBlocked: !1
                            })
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        var e = this.state.userBlocked ? this.renderUnblock() : this.renderBlock(),
                            t = Object(v.a)(this.props.targetUser.login, this.props.targetUser.displayName, !0);
                        return a.createElement(b.xb, {
                            borderTop: !0,
                            padding: {
                                y: 1
                            },
                            margin: {
                                top: 1
                            }
                        }, a.createElement(b.Va, null, Object(l.d)("Would you like to block {user}?", {
                            user: t
                        }, "ReportWizardBlockActions")), a.createElement(b.xb, {
                            color: b.O.Alt2,
                            margin: {
                                y: 1
                            }
                        }, a.createElement(b.Wb, {
                            baseFontSize: b.Aa.Size6
                        }, a.createElement("p", null, Object(l.d)("Blocking {user} will:", {
                            user: t
                        }, "ReportWizardBlockActions")), a.createElement("ul", null, a.createElement("li", null, Object(l.d)("Prevent them from sending you whispers", "ReportWizardBlockActions")), a.createElement("li", null, Object(l.d)("Prevent them from hosting you", "ReportWizardBlockActions")), a.createElement("li", null, Object(l.d)("Prevent them from adding you as a friend", "ReportWizardBlockActions")), a.createElement("li", null, Object(l.d)("Filter their messages out of chats you don’t moderate", "ReportWizardBlockActions"))))), a.createElement(b.Va, {
                            margin: {
                                top: 1
                            }
                        }, e))
                    }, t
                }(a.Component),
                C = n("4qQ0");
            ! function(e) {
                e.Link = "link", e.MultipleChoice = "multiple choice", e.Text = "text", e.Textarea = "textarea"
            }(i || (i = {}));
            var E, _ = {
                    generalFilter: function() {
                        return Object(l.d)("I don't think their content or behavior is allowed on Twitch", "ReportModalWizard")
                    },
                    me: function() {
                        return Object(l.d)("Me", "ReportModalWizard")
                    },
                    someoneElse: function() {
                        return Object(l.d)("Someone else", "ReportModalWizard")
                    },
                    sexuallyCoercive: function() {
                        return Object(l.d)("acting in a sexually coercive or inappropriate way", "ReportModalWizard")
                    },
                    abusiveViolence: function() {
                        return Object(l.d)("They're threatening violence or physical harm", "ReportModalWizard")
                    },
                    commitingViolence: function() {
                        return Object(l.d)("They're committing acts of violence or physical harm", "ReportModalWizard")
                    },
                    threatening: function() {
                        return Object(l.d)("threatening, harming, or endangering someone", "ReportModalWizard")
                    },
                    abusive: function() {
                        return Object(l.d)("being hateful, harassing, or abusive", "ReportModalWizard")
                    }
                },
                w = {
                    input_description: {
                        getTitle: function() {
                            return Object(l.d)("Could you provide more detail about this issue? You may include links to videos, clips, and content outside Twitch.", "ReportModalWizard")
                        },
                        value: "description",
                        type: i.Textarea,
                        required: !0
                    },
                    input_link: {
                        getTitle: function() {
                            return Object(l.d)("If possible, please provide a link to show us where the issue occurred. Links that do not lead to the original source of the content may not be usable as evidence.", "ReportModalWizard")
                        },
                        rows: 2,
                        value: "external links",
                        type: i.Textarea
                    },
                    input_usernames: {
                        getTitle: function() {
                            return Object(l.d)("If you know the usernames of any other Twitch accounts that may be owned by this person, please list them in this space.", "ReportModalWizard")
                        },
                        value: "other usernames",
                        rows: 2,
                        type: i.Textarea
                    },
                    input_connection: {
                        getTitle: function() {
                            return Object(l.d)("Please describe how you connected the offsite content to this Twitch account.", "ReportModalWizard")
                        },
                        value: "offsite content connection",
                        type: i.Textarea
                    },
                    input_comments: {
                        getTitle: function() {
                            return Object(l.d)("If you have any other comments you would like to add, please do so here.", "ReportModalWizard")
                        },
                        value: "comments",
                        type: i.Textarea
                    },
                    input_identifyOwner: {
                        getTitle: function() {
                            return Object(l.d)("Please describe how you identified this person as the owner of this Twitch account.", "ReportModalWizard")
                        },
                        rows: 2,
                        value: "connect account owner",
                        type: i.Textarea
                    },
                    endBlurb_socialmedia: {
                        getTitle: function() {
                            return Object(l.d)("Please submit a report to the site or service where the incident occurred as well if you have not already done so.", "ReportModalWizard")
                        },
                        type: i.Text
                    },
                    endBlurb_threat: {
                        getTitle: function() {
                            return Object(l.d)("If you feel you are in immediate danger, please contact your local law enforcement.", "ReportModalWizard")
                        },
                        type: i.Text
                    },
                    endLink_selfharm: {
                        getTitle: function() {
                            return Object(l.d)("Learn more about mental health support", "ReportModalWizard")
                        },
                        value: "https://help.twitch.tv/customer/en/portal/articles/2904486-twitch-cares-mental-health-support-information",
                        type: i.Link
                    },
                    endLink_DMCA: {
                        getTitle: function() {
                            return Object(l.d)("View our DMCA Notification Guidelines", "ReportModalWizard")
                        },
                        value: "https://www.twitch.tv/p/legal/dmca-guidelines/",
                        type: i.Link
                    },
                    endLink_trademark: {
                        getTitle: function() {
                            return Object(l.d)("View our Trademark Policy", "ReportModalWizard")
                        },
                        value: "https://www.twitch.tv/p/legal/trademark-policy/",
                        type: i.Link
                    },
                    endLink_devAgreement: {
                        getTitle: function() {
                            return Object(l.d)("View our Developer Agreement", "ReportModalWizard")
                        },
                        value: "https://www.twitch.tv/p/legal/developer-agreement/",
                        type: i.Link
                    },
                    endLink_eventCoC: {
                        getTitle: function() {
                            return Object(l.d)("View our Events Code of Conduct", "ReportModalWizard")
                        },
                        value: "https://www.twitch.tv/p/legal/events-code-of-conduct",
                        type: i.Link
                    },
                    messaging_general: {
                        getTitle: _.generalFilter,
                        value: "general_messaging",
                        omitFromDescription: !0
                    },
                    profile_general: {
                        getTitle: _.generalFilter,
                        value: "general_profile",
                        omitFromDescription: !0
                    },
                    maliciousRaid: {
                        getTitle: function() {
                            return Object(l.d)("They're participating in a malicious raid", "ReportModalWizard")
                        },
                        value: "malicious raid",
                        reportReason: C.b.Harassment
                    },
                    violence: {
                        getTitle: function() {
                            return Object(l.d)("It contains threats, harm, or endangerment of someone", "ReportModalWizard")
                        },
                        value: "violence/threats",
                        reportReason: C.b.Harm
                    },
                    report_username: {
                        getTitle: function() {
                            return Object(l.d)("They're using an inappropriate or offensive username", "ReportModalWizard")
                        },
                        value: "inappropriate username",
                        reportReason: C.b.OffensiveUsername
                    },
                    report_emotes: {
                        getTitle: function() {
                            return Object(l.d)("The emotes are inappropriate or offensive", "ReportModalWizard")
                        },
                        value: "inappropriate emotes",
                        reportReason: C.b.Other
                    },
                    abusive: {
                        getTitle: function() {
                            return Object(l.d)("It's hateful, harassing, or abusive", "ReportModalWizard")
                        },
                        value: "abusive"
                    },
                    scam: {
                        getTitle: function() {
                            return Object(l.d)("It contains attempts to scam other community members", "ReportModalWizard")
                        },
                        value: "scam",
                        reportReason: C.b.Spam
                    },
                    emptyStream: {
                        getTitle: function() {
                            return Object(l.d)("There's nobody on the stream", "ReportModalWizard")
                        },
                        value: "empty stream"
                    },
                    impersonation: {
                        getTitle: function() {
                            return Object(l.d)("They're impersonating someone", "ReportModalWizard")
                        },
                        value: "impersonation",
                        reportReason: C.b.Impersonation
                    },
                    underage: {
                        getTitle: function() {
                            return Object(l.d)("They're underage (12 or younger)", "ReportModalWizard")
                        },
                        value: "underage",
                        reportReason: C.b.Underaged
                    },
                    report_ip: {
                        getTitle: function() {
                            return Object(l.d)("I think they're using copyrighted content, trademarks, or other intellectual property that's not theirs", "ReportModalWizard")
                        },
                        value: "intellectual property"
                    },
                    inappropriateContent: {
                        getTitle: function() {
                            return Object(l.d)("It's inappropriate or obscene", "ReportModalWizard")
                        },
                        value: "inappropriate content"
                    },
                    violateDevAgreement: {
                        getTitle: function() {
                            return Object(l.d)("I think they're violating Twitch's Developer Agreement", "ReportModalWizard")
                        },
                        value: "violating developer agreement"
                    },
                    revealPersonalInfo: {
                        getTitle: function() {
                            return Object(l.d)("They might have revealed someone's personal information", "ReportModalWizard")
                        },
                        value: "revealing personal info",
                        reportReason: C.b.Other
                    },
                    inappropriateBadge: {
                        getTitle: function() {
                            return Object(l.d)("Their emote or subscriber badge violates Twitch's Guidelines", "ReportModalWizard")
                        },
                        value: "emote/subscriber badge",
                        reportReason: C.b.Other
                    },
                    noModeration: {
                        getTitle: function() {
                            return Object(l.d)("They're not moderating their chat appropriately", "ReportModalWizard")
                        },
                        value: "not moderating chat",
                        reportReason: C.b.Other
                    },
                    inappropriateExtension: {
                        getTitle: function() {
                            return Object(l.d)("Their extension contains malicious or inappropriate content", "ReportModalWizard")
                        },
                        value: "inappropriate extension",
                        reportReason: C.b.Other
                    },
                    cheating: {
                        getTitle: function() {
                            return Object(l.d)("They're cheating in an online game", "ReportModalWizard")
                        },
                        value: "cheating",
                        reportReason: C.b.Cheating
                    },
                    bitsViolation: {
                        getTitle: function() {
                            return Object(l.d)("Their use of Bits goes against Twitch's Policy", "ReportModalWizard")
                        },
                        value: "bits violation",
                        reportReason: C.b.BitsViolation
                    },
                    video_labeling: {
                        getTitle: function() {
                            return Object(l.d)("Their content is labeled incorrectly", "ReportModalWizard")
                        },
                        value: "incorrect label",
                        reportReason: C.b.Miscategorized
                    },
                    video_inactive: {
                        getTitle: function() {
                            return Object(l.d)("The stream is inactive (sleeping/AFK)", "ReportModalWizard")
                        },
                        value: "inactive stream",
                        reportReason: C.b.Miscategorized
                    },
                    video_general: {
                        getTitle: _.generalFilter,
                        value: "general_video",
                        omitFromDescription: !0
                    },
                    hateSpeech: {
                        getTitle: function() {
                            return Object(l.d)("They're using hate speech, hateful symbols, or hateful media", "ReportModalWizard")
                        },
                        value: "hate speech",
                        reportReason: C.b.HatefulConduct
                    },
                    harassment: {
                        getTitle: function() {
                            return Object(l.d)("They're harassing or bullying someone", "ReportModalWizard")
                        },
                        value: "harassment",
                        reportReason: C.b.Harassment
                    },
                    abusiveViolence: {
                        getTitle: _.abusiveViolence,
                        value: "threatening violence",
                        reportReason: C.b.Harm
                    },
                    commitingViolence: {
                        getTitle: _.commitingViolence,
                        value: "committing violence",
                        reportReason: C.b.Harm
                    },
                    swatting: {
                        getTitle: function() {
                            return Object(l.d)("They're inciting or committing swatting or a DDOS attack", "ReportModalWizard")
                        },
                        value: "swatting/ddosing",
                        reportReason: C.b.Harassment
                    },
                    personalInfo: {
                        getTitle: function() {
                            return Object(l.d)("They're purposely revealing personal information", "ReportModalWizard")
                        },
                        value: "revealing personal info",
                        reportReason: C.b.Harassment
                    },
                    threat_me: {
                        getTitle: function() {
                            return Object(l.d)("At me", "ReportModalWizard")
                        },
                        value: "against me",
                        reportReason: C.b.Harm
                    },
                    threat_person: {
                        getTitle: function() {
                            return Object(l.d)("At someone else", "ReportModalWizard")
                        },
                        value: "against another person",
                        reportReason: C.b.Harm
                    },
                    threat_group: {
                        getTitle: function() {
                            return Object(l.d)("At a group of people", "ReportModalWizard")
                        },
                        value: "against group of people",
                        reportReason: C.b.Harm
                    },
                    threat_selfharm: {
                        getTitle: function() {
                            return Object(l.d)("They're threatening self-harm", "ReportModalWizard")
                        },
                        value: "selfharm"
                    },
                    inappropriate_game: {
                        getTitle: function() {
                            return Object(l.d)("The game isn't allowed on Twitch", "ReportModalWizard")
                        },
                        value: "prohibited game",
                        reportReason: C.b.Prohibited
                    },
                    sexuallyViolent: {
                        getTitle: function() {
                            return Object(l.d)("Violent sexual conduct", "ReportModalWizard")
                        },
                        value: "sexually violent",
                        reportReason: C.b.SexualViolence
                    },
                    childAnimal: {
                        getTitle: function() {
                            return Object(l.d)("Sexual conduct involving a child or animal", "ReportModalWizard")
                        },
                        value: "sexual conduct; child or animal",
                        reportReason: C.b.SexualViolence
                    },
                    pornographic: {
                        getTitle: function() {
                            return Object(l.d)("Sexually explicit or pornographic content", "ReportModalWizard")
                        },
                        value: "pornographic",
                        reportReason: C.b.SexualContent
                    },
                    gory: {
                        getTitle: function() {
                            return Object(l.d)("Extreme violence or gore", "ReportModalWizard")
                        },
                        value: "gory",
                        reportReason: C.b.Gore
                    },
                    suggestive: {
                        getTitle: function() {
                            return Object(l.d)("Sexually suggestive content", "ReportModalWizard")
                        },
                        value: "sexually suggestive",
                        reportReason: C.b.SexualContent
                    },
                    nudity: {
                        getTitle: function() {
                            return Object(l.d)("Full or partial nudity", "ReportModalWizard")
                        },
                        value: "nudity",
                        reportReason: C.b.SexualContent
                    },
                    other: {
                        getTitle: function() {
                            return Object(l.d)("There's something else wrong with it...", "ReportModalWizard")
                        },
                        value: "other",
                        reportReason: C.b.Other
                    },
                    evasion: {
                        getTitle: function() {
                            return Object(l.d)("They were banned or suspended and are trying to get around it (ban evasion)", "ReportModalWizard")
                        },
                        value: "ban evasion"
                    },
                    evasion_sitewide: {
                        getTitle: function() {
                            return Object(l.d)("A sitewide ban from Twitch", "ReportModalWizard")
                        },
                        value: "sitewide ban",
                        reportReason: C.b.TosBanEvasion
                    },
                    evasion_chat: {
                        getTitle: function() {
                            return Object(l.d)("A chat ban from one or more channels", "ReportModalWizard")
                        },
                        value: "chat ban",
                        reportReason: C.b.ChatBanEvasion
                    },
                    evasion_messaging: {
                        getTitle: function() {
                            return Object(l.d)("A block from messaging me", "ReportModalWizard")
                        },
                        value: "messaging block",
                        reportReason: C.b.ChatBanEvasion
                    },
                    impersonation_me: {
                        getTitle: _.me,
                        value: "impersonating me",
                        reportReason: C.b.Impersonation
                    },
                    impersonation_brand: {
                        getTitle: function() {
                            return Object(l.d)("Someone I represent, or a brand/company I work for", "ReportModalWizard")
                        },
                        value: "impersonating brand",
                        reportReason: C.b.Impersonation
                    },
                    impersonation_other: {
                        getTitle: _.someoneElse,
                        value: "impersonating someone else",
                        reportReason: C.b.Impersonation
                    },
                    selfharm: {
                        getTitle: function() {
                            return Object(l.d)("I'm concerned for their wellbeing", "ReportModalWizard")
                        },
                        value: "selfharm",
                        reportReason: C.b.SelfHarm
                    },
                    chat: {
                        getTitle: function() {
                            return Object(l.d)("In a stream chat message", "ReportModalWizard")
                        },
                        value: "chat"
                    },
                    profile: {
                        getTitle: function() {
                            return Object(l.d)("In the profile content, extensions, or emotes", "ReportModalWizard")
                        },
                        value: "profile"
                    },
                    video: {
                        getTitle: function() {
                            return Object(l.d)("In a live stream, video, or clip", "ReportModalWizard")
                        },
                        value: "video"
                    },
                    room: {
                        getTitle: function(e) {
                            return Object(l.d)("In one of {username}'s rooms", {
                                username: e
                            }, "ReportModalWizard")
                        },
                        value: "room"
                    },
                    whisper: {
                        getTitle: function() {
                            return Object(l.d)("In a whisper (private message)", "ReportModalWizard")
                        },
                        value: "whisper",
                        reportContext: C.a.Whisper
                    },
                    username: {
                        getTitle: function() {
                            return Object(l.d)("In the username", "ReportModalWizard")
                        },
                        value: "username",
                        reportReason: C.b.OffensiveUsername
                    },
                    report_other: {
                        getTitle: function() {
                            return Object(l.d)("Somewhere else...", "ReportModalWizard")
                        },
                        value: "somewhere else",
                        omitFromDescription: !0
                    },
                    video_streamer: {
                        getTitle: function() {
                            return Object(l.d)("The streamer or channel owner", "ReportModalWizard")
                        },
                        value: "streamer"
                    },
                    video_someoneElse: {
                        getTitle: function() {
                            return Object(l.d)("Someone else in the video", "ReportModalWizard")
                        },
                        value: "someone else in video"
                    },
                    video_chatSomeone: {
                        getTitle: function() {
                            return Object(l.d)("Someone in chat", "ReportModalWizard")
                        },
                        value: "someone in chat",
                        differentTarget: !0
                    },
                    report_channelOwner: {
                        getTitle: function() {
                            return Object(l.d)("The channel owner", "ReportModalWizard")
                        },
                        value: "channel owner"
                    },
                    report_member: {
                        getTitle: function() {
                            return Object(l.d)("Another community member", "ReportModalWizard")
                        },
                        value: "community member",
                        differentTarget: !0
                    },
                    location_onTwitch: {
                        getTitle: function() {
                            return Object(l.d)("On Twitch", "ReportModalWizard")
                        },
                        value: "on twitch"
                    },
                    location_anotherSite: {
                        getTitle: function() {
                            return Object(l.d)("On another site or service", "RpoertModalWizard")
                        },
                        value: "another site"
                    },
                    location_TwitchEvent: {
                        getTitle: function() {
                            return Object(l.d)("In person, at a Twitch event", "ReportModalWizard")
                        },
                        value: "twitch event"
                    },
                    external_incitingRaids: {
                        getTitle: function() {
                            return Object(l.d)("inciting brigading or malicious raids", "ReportModalWizard")
                        },
                        reportReason: C.b.Harassment,
                        value: "brigading/raids"
                    },
                    external_threatening: {
                        getTitle: _.threatening,
                        value: "threatening"
                    },
                    external_harassment: {
                        getTitle: _.abusive,
                        value: "hateful/harassing"
                    },
                    external_abusiveViolence: {
                        getTitle: _.abusiveViolence,
                        value: "external site; threatening violence",
                        reportReason: C.b.Harm
                    },
                    external_commitingViolence: {
                        getTitle: _.commitingViolence,
                        value: "external site; committing violence",
                        reportReason: C.b.Harm
                    },
                    conduct_impersonation: {
                        getTitle: function() {
                            return Object(l.d)("impersonating someone", "ReportModalWizard")
                        },
                        value: "impersonation",
                        reportReason: C.b.Impersonation
                    },
                    spam: {
                        getTitle: function() {
                            return Object(l.d)("They're spamming or spreading malicious links", "ReportModalWizard")
                        },
                        value: "spam",
                        reportReason: C.b.Spam
                    },
                    spam_bot: {
                        getTitle: function() {
                            return Object(l.d)("I think this is a bot account", "ReportModalWizard")
                        },
                        value: "bot"
                    },
                    spam_scam: {
                        getTitle: function() {
                            return Object(l.d)("They're trying to scam other community members or sending malicious links", "ReportModalWizard")
                        },
                        value: "scam or malicious links"
                    },
                    spam_repeated: {
                        getTitle: function() {
                            return Object(l.d)("They're sending repeated messages (spam)", "ReportModalWizard")
                        },
                        value: "repeat messages"
                    }
                },
                T = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onChange = function(e) {
                            var n = e.target,
                                i = n.name,
                                r = n.value;
                            t.props.onChangeText(i, r)
                        }, t.onSelect = function(e) {
                            if (t.props.currentCard.items && e.currentTarget.parentElement) {
                                var n = Number(e.currentTarget.parentElement.getAttribute("data-a-index")),
                                    i = t.props.currentCard.items[n];
                                t.props.onChangeRadio(i)
                            }
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        var e = this.props.currentCard.getDescription ? a.createElement(b.Va, {
                            padding: {
                                bottom: 1
                            }
                        }, this.props.currentCard.getDescription()) : null;
                        return a.createElement(b.Va, {
                            className: "reporting-wizard-card"
                        }, e, a.createElement(b.Ca, {
                            label: this.props.currentCard.getLabel ? this.props.currentCard.getLabel() : ""
                        }, this.renderCardItems()))
                    }, t.prototype.renderCardItems = function() {
                        var e = this,
                            t = this.props.currentCard,
                            n = [];
                        return t.items && t.type && (n = t.items.filter(function(e) {
                            return !!e
                        }).map(function(t, n) {
                            switch (t.type) {
                                case i.Text:
                                    return a.createElement(b.Va, {
                                        key: n,
                                        padding: {
                                            bottom: 1
                                        }
                                    }, t.getTitle());
                                case i.Link:
                                    return a.createElement(b.Va, {
                                        key: n,
                                        padding: {
                                            bottom: 1
                                        }
                                    }, a.createElement(b.T, {
                                        to: t.value,
                                        targetBlank: !0
                                    }, a.createElement(b.Va, {
                                        display: b.W.Flex
                                    }, a.createElement(b.Va, {
                                        display: b.W.Inline,
                                        padding: {
                                            right: .5
                                        }
                                    }, a.createElement(b.mb, {
                                        asset: b.nb.Document
                                    })), t.getTitle())));
                                case i.Textarea:
                                    var r = t.value ? e.props.userTextInputs[t.value] : void 0,
                                        o = t.required && (!r || !!r && 0 === r.trim().length);
                                    return a.createElement(b.Va, {
                                        key: n,
                                        padding: {
                                            bottom: 1
                                        }
                                    }, a.createElement(b.Ca, {
                                        label: t.getTitle(),
                                        labelOptional: t.required ? "" : Object(l.d)("Optional", "ReportModalWizardCard")
                                    }, a.createElement(b.Kb, {
                                        onChange: e.onChange,
                                        rows: t.rows || 3,
                                        name: t.value,
                                        error: e.props.error && o,
                                        value: r,
                                        "data-test-selector": "report-wizard-textarea"
                                    })));
                                case i.MultipleChoice:
                                default:
                                    return a.createElement(b.Va, {
                                        key: n,
                                        padding: {
                                            y: .5
                                        }
                                    }, a.createElement(b.jb, {
                                        checked: !!e.props.currentSelection && e.props.currentSelection.value === t.value,
                                        onChange: e.onSelect,
                                        label: t.getTitle(e.props.targetUser.displayName),
                                        "data-a-index": n,
                                        name: "card",
                                        value: t.value
                                    }))
                            }
                        })), n
                    }, t
                }(a.Component),
                O = n("RQ6e");
            ! function(e) {
                e.Confirm = "Confirm", e.MultipleChoice = "MultipleChoice", e.Info = "End Card"
            }(E || (E = {}));
            var N, I, D, R = {
                    contentGeneral: function() {
                        return Object(l.d)("What would you like to report?", "ReportModalWizard")
                    },
                    content: function() {
                        return Object(l.d)("What's wrong with this content?", "ReportModalWizard")
                    },
                    identifyUser: function() {
                        return Object(l.d)("Who do you want to report?", "ReportModalWizard")
                    },
                    thisPersonIs: function() {
                        return Object(l.d)("This person is...", "ReportModalWizard")
                    },
                    relevantStatements: function() {
                        return Object(l.d)("What would you like to report? (Please choose the most relevant statement that applies.)", "ReportModalWizard")
                    }
                },
                x = {
                    report: function(e) {
                        return Object(l.d)("Report {username}", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    reportVideo: function(e) {
                        return Object(l.d)("Report {username}'s Video", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    reportMessage: function(e) {
                        return Object(l.d)("Report {username}'s Message", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    reportProfile: function(e) {
                        return Object(l.d)("Report {username}'s Profile Or Other Content", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    reportAbusive: function(e) {
                        return Object(l.d)("Report {username} for Abusive Conduct", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    tellUsMore: function() {
                        return Object(l.d)("Tell Us More", "ReportModalWizard")
                    },
                    thanks: function() {
                        return Object(l.d)("Thanks for letting us know", "ReportModalWizard")
                    },
                    thanksConcern: function() {
                        return Object(l.d)("Thank you for your concern", "ReportModalWizard")
                    }
                },
                F = {
                    getDescription: function() {
                        return Object(l.d)("Reports are reviewed by Twitch Staff 24 hours a day. We will issue penalties, such as account suspension and/or content removal, once we verify that a violation of our policies has occurred.", "ReportModalWizard")
                    },
                    blockPrompt: !0,
                    getTitle: x.thanks,
                    type: E.Info,
                    value: "end card"
                },
                P = {
                    socialMedia: r.__assign({}, F, {
                        items: [w.endBlurb_socialmedia]
                    }),
                    violence: r.__assign({}, F, {
                        items: [w.endBlurb_threat]
                    }),
                    legal: {
                        getTitle: x.thanksConcern,
                        getDescription: function() {
                            return Object(l.d)("To submit a claim or report a violation of this type, you will need to follow the steps listed on the relevant page below.", "ReportModalWizard")
                        },
                        items: [w.endLink_DMCA, w.endLink_trademark, w.endLink_devAgreement],
                        type: E.Info,
                        value: "ip end"
                    },
                    selfharm: {
                        getTitle: x.thanksConcern,
                        getDescription: function() {
                            return Object(l.d)("If you know the user personally, and you believe them to be in danger, please contact their local authorities immediately. The link below contains some general information that may be of use.", "ReportModalWizard")
                        },
                        items: [w.endLink_selfharm],
                        type: E.Info,
                        value: "selfharm end"
                    },
                    twitchEvent: {
                        getTitle: x.thanksConcern,
                        getDescription: function() {
                            return Object(l.d)("Please bring this concern to the attention of staff or security at the event if you have not already done so. More information is available at the link below.", "ReportModalWizard")
                        },
                        items: [w.endLink_eventCoC],
                        value: "twitch event end",
                        type: E.Info
                    }
                },
                V = {
                    getTitle: x.report,
                    getLabel: function() {
                        return Object(l.d)("Where is the problem?", "ReportModalWizard")
                    },
                    items: [w.video, w.whisper, w.chat, w.room, w.profile, w.username, w.report_other],
                    type: E.MultipleChoice,
                    value: "content type"
                },
                L = {
                    identifyUser: {
                        getTitle: x.reportVideo,
                        getLabel: R.identifyUser,
                        items: [w.video_streamer, w.video_someoneElse, w.video_chatSomeone],
                        type: E.MultipleChoice,
                        value: "video identify user"
                    },
                    content: {
                        getTitle: x.reportVideo,
                        getLabel: R.contentGeneral,
                        items: [w.revealPersonalInfo, w.video_labeling, w.video_inactive, w.video_general, w.report_ip, w.violateDevAgreement, w.selfharm],
                        type: E.MultipleChoice,
                        value: "video report reason"
                    },
                    general: {
                        getTitle: x.reportVideo,
                        getLabel: R.content,
                        items: [w.report_username, w.violence, w.abusive, w.cheating, w.scam, w.inappropriateContent, w.evasion, w.impersonation, w.underage, w.bitsViolation],
                        type: E.MultipleChoice,
                        value: "video general report reason"
                    }
                },
                M = {
                    content: {
                        getTitle: x.reportMessage,
                        getLabel: R.contentGeneral,
                        items: [w.revealPersonalInfo, w.evasion, w.spam, w.maliciousRaid, w.report_username, w.messaging_general, w.selfharm],
                        type: E.MultipleChoice,
                        value: "message report reason"
                    },
                    general: {
                        getTitle: x.reportMessage,
                        getLabel: R.content,
                        items: [w.report_emotes, w.violence, w.abusive, w.inappropriateContent, w.impersonation, w.underage, w.bitsViolation],
                        type: E.MultipleChoice,
                        value: "message general report reason"
                    }
                },
                j = r.__assign({}, M.content, {
                    getDescription: function() {
                        return Object(l.d)("Please note that we may review additional messages in this conversation to determine the context of your report.", "ReportModalWizard")
                    }
                }),
                A = {
                    content: {
                        getTitle: x.reportProfile,
                        getLabel: R.contentGeneral,
                        items: [w.revealPersonalInfo, w.inappropriateBadge, w.inappropriateExtension, w.noModeration, w.profile_general, w.report_ip, w.violateDevAgreement, w.selfharm],
                        type: E.MultipleChoice,
                        value: "profile report reason"
                    },
                    general: {
                        getTitle: x.reportProfile,
                        getLabel: R.content,
                        items: [w.report_username, w.violence, w.abusive, w.scam, w.inappropriateContent, w.evasion, w.impersonation, w.underage, w.bitsViolation],
                        type: E.MultipleChoice,
                        value: "profile general report reason"
                    }
                },
                U = {
                    getTitle: function(e) {
                        return Object(l.d)("Report {username}'s Room", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    getLabel: R.identifyUser,
                    items: [w.report_channelOwner, w.report_member],
                    value: "room report user",
                    type: E.MultipleChoice
                },
                W = {
                    getTitle: x.tellUsMore,
                    items: [w.input_description],
                    type: E.Confirm,
                    value: "tell us more"
                },
                B = {
                    banEvasion: r.__assign({}, W, {
                        items: [w.input_usernames, w.input_description],
                        value: "ban evasion tell us more"
                    }),
                    socialMedia: r.__assign({}, W, {
                        items: [w.input_link, w.input_connection, w.input_description],
                        nextCard: P.socialMedia,
                        value: "social media tell us more"
                    })
                },
                G = {
                    content: {
                        getTitle: x.reportAbusive,
                        getLabel: R.relevantStatements,
                        items: [w.hateSpeech, w.harassment, w.abusiveViolence, w.commitingViolence, w.swatting, w.personalInfo],
                        type: E.MultipleChoice,
                        value: "abuse type"
                    },
                    violence: {
                        getTitle: function(e) {
                            return Object(l.d)("Report {username} for Violence or Threats", {
                                username: e
                            }, "ReportModalWizard")
                        },
                        getLabel: function() {
                            return Object(l.d)("Are the threats or actions directed at you or someone else?", "ReportModalWizard")
                        },
                        items: [w.threat_me, w.threat_person, w.threat_group, w.threat_selfharm],
                        type: E.MultipleChoice,
                        value: "violence type"
                    }
                },
                z = {
                    identifyLocation: {
                        getTitle: function(e) {
                            return Object(l.d)("Report {username} for something else...", {
                                username: e
                            }, "ReportModalWizard")
                        },
                        getLabel: function() {
                            return Object(l.d)("Where did the problem happen?", "ReportModalWizard")
                        },
                        items: [w.location_onTwitch, w.location_anotherSite, w.location_TwitchEvent],
                        type: E.MultipleChoice,
                        value: "off-site conduct location"
                    },
                    externalSite: {
                        getTitle: function(e) {
                            return Object(l.d)("Report {username}'s Conduct on Another Site or Service", {
                                username: e
                            }, "ReportModalWizard")
                        },
                        getLabel: R.thisPersonIs,
                        getDescription: function() {
                            return Object(l.d)("Please note that incidents reported through this form must involve Twitch community members. If possible, please submit a report to the site or service where the incident occurred as well.", "ReportModalWizard")
                        },
                        items: [w.external_incitingRaids, w.external_threatening, w.external_harassment],
                        type: E.MultipleChoice,
                        nextCard: B.socialMedia,
                        value: "external site conduct"
                    },
                    external_violence: r.__assign({}, G.violence, {
                        items: [w.threat_me, w.threat_person, w.threat_group],
                        nextCard: B.socialMedia
                    }),
                    external_abusive: r.__assign({}, G.content, {
                        items: [w.hateSpeech, w.harassment, w.external_abusiveViolence, w.external_commitingViolence, w.swatting, w.personalInfo],
                        nextCard: B.socialMedia
                    })
                },
                H = {
                    getTitle: function(e) {
                        return Object(l.d)("Report {username}'s Spam or Malicious Links", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    getLabel: R.contentGeneral,
                    items: [w.spam_bot, w.spam_scam, w.spam_repeated],
                    type: E.MultipleChoice,
                    value: "spam type"
                },
                q = {
                    getTitle: function(e) {
                        return Object(l.d)("Report {username} for Inappropriate Content", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    getLabel: R.relevantStatements,
                    items: [w.inappropriate_game, w.gory, w.sexuallyViolent, w.childAnimal, w.pornographic, w.suggestive, w.nudity, w.other],
                    type: E.MultipleChoice,
                    value: "inappropriate content type"
                },
                Q = {
                    getTitle: function(e) {
                        return Object(l.d)("Report {username} for Evading a Ban", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    getLabel: function() {
                        return Object(l.d)("What kind of ban are they evading?", "ReportModalWizard")
                    },
                    value: "ban type",
                    items: [w.evasion_chat, w.evasion_sitewide, w.evasion_messaging],
                    type: E.MultipleChoice,
                    nextCard: B.banEvasion
                },
                Y = {
                    getTitle: function(e) {
                        return Object(l.d)("Report {username} for Impersonation", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    getLabel: function() {
                        return Object(l.d)("Who is being impersonated?", "ReportModalWizard")
                    },
                    getDescription: function() {
                        return Object(l.d)("Parody, cosplay, and other portrayals without the intent to deceive or defraud are allowed under Twitch's Community Guidelines. If you would still like to submit a report, please continue.", "ReportModalWizard")
                    },
                    items: [w.impersonation_me, w.impersonation_brand, w.impersonation_other],
                    type: E.MultipleChoice,
                    value: "impersonation type"
                },
                $ = V,
                K = W,
                X = F,
                Z = {
                    video: L.identifyUser,
                    whisper: j,
                    chat: M.content,
                    profile: A.content,
                    room: U,
                    "somewhere else": z.identifyLocation,
                    streamer: L.content,
                    "someone else in video": L.content,
                    "someone in chat": M.content,
                    general_video: L.general,
                    general_messaging: M.general,
                    general_profile: A.general,
                    "channel owner": A.content,
                    "community member": M.content,
                    "on twitch": A.content,
                    "another site": z.externalSite,
                    "twitch event": P.twitchEvent,
                    "brigading/raids": B.socialMedia,
                    threatening: z.external_violence,
                    "hateful/harassing": z.external_abusive,
                    "external site; threatening violence": z.external_violence,
                    "external site; committing violence": z.external_violence,
                    "external site; scam": B.socialMedia,
                    "ban evasion": Q,
                    spam: H,
                    hateful: G.content,
                    impersonation: Y,
                    "violence/threats": G.violence,
                    "threatening violence": G.violence,
                    "committing violence": G.violence,
                    abusive: G.content,
                    "inappropriate content": q,
                    "intellectual property": P.legal,
                    "violating developer agreement": P.legal
                },
                J = {
                    selfharm: P.selfharm,
                    harm: P.violence,
                    other: X
                },
                ee = {
                    CHANNEL_FEED_POST_REPORT: A.content,
                    COMMUNITY_REPORT: A.content,
                    CHAT_REPORT: M.content,
                    CLIP_REPORT: L.content,
                    EVENT_REPORT: A.content,
                    EXTENSION_REPORT: A.content,
                    LIVE_UP_REPORT: A.content,
                    ROOM_REPORT: U,
                    WHISPER_REPORT: j,
                    VOD_COMMENT_REPORT: M.content
                },
                te = "report-wizard-back",
                ne = "report-wizard-close",
                ie = "report-wizard-next",
                re = "report-wizard-submit",
                ae = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            currentCard: t.props.currentCard || ee[t.props.reportContentType] || $,
                            prevCards: [],
                            currentSelection: null,
                            prevSelections: [],
                            displacedSelections: [],
                            userTextInput: {},
                            error: "",
                            reportReason: t.props.reportReason || "",
                            modalCloseTracked: !1,
                            targetUnknown: !1,
                            reportContext: t.props.reportContentType
                        }, t.renderPrimer = function() {
                            return a.createElement(b.Va, {
                                margin: {
                                    top: 1
                                }
                            }, a.createElement(b.V, null, Object(l.d)("We are going to ask you a few questions to help us investigate your report quickly and accurately.", "ReportModalWizard")))
                        }, t.renderButtons = function() {
                            var e = Object(l.d)("Close", "ReportModalWizard"),
                                n = t.handleClose,
                                i = ne,
                                r = !1,
                                o = t.state.prevCards.length ? t.renderBack() : null;
                            switch (t.state.currentCard.type) {
                                case E.MultipleChoice:
                                    e = Object(l.d)("Next", "ReportModalWizard"), n = t.handleNext, i = ie, r = !t.state.currentSelection;
                                    break;
                                case E.Confirm:
                                    e = Object(l.d)("Submit Report", "ReportModalWizard"), n = t.handleSubmit, r = !t.state.userTextInput, i = re
                            }
                            return a.createElement(b.Va, null, o, a.createElement(b.z, {
                                onClick: n,
                                disabled: r,
                                "data-test-selector": i
                            }, a.createElement(b.Va, {
                                padding: {
                                    x: 1
                                }
                            }, e)))
                        }, t.renderBack = function() {
                            return a.createElement(b.Va, {
                                margin: {
                                    right: 1
                                },
                                display: b.W.InlineBlock
                            }, a.createElement(b.z, {
                                type: b.F.Hollow,
                                onClick: t.handleBack,
                                "data-test-selector": te
                            }, a.createElement(b.Va, {
                                padding: {
                                    x: 1
                                }
                            }, Object(l.d)("Back", "ReportModalWizard"))))
                        }, t.getTitle = function() {
                            return t.state.currentCard.getTitle && t.props.targetUser.displayName && t.props.targetUser.id ? t.state.targetUnknown ? t.state.currentCard.getTitle(Object(l.d)("Another User", "ReportModalWizard")) : t.state.currentCard.getTitle(t.props.targetUser.displayName) : t.state.targetUnknown ? Object(l.d)("Report User", "ReportModalWizard") : t.props.title
                        }, t.handleClose = function() {
                            t.setState({
                                modalCloseTracked: !0
                            }, function() {
                                return t.props.trackClose(D.Finish, t.state.currentCard.value)
                            }), t.props.onClose()
                        }, t.handleNext = function() {
                            if (t.state.currentSelection && t.state.currentSelection.value) {
                                var e = t.state.currentCard,
                                    n = t.state.prevCards.concat(e),
                                    i = t.state.prevSelections.concat(t.state.currentSelection),
                                    r = t.state.displacedSelections[t.state.displacedSelections.length - 1],
                                    a = t.state.currentSelection.differentTarget || t.state.targetUnknown,
                                    o = t.state.currentSelection.reportContext || t.state.reportContext,
                                    s = e.nextCard || K;
                                Z[t.state.currentSelection.value] && (s = Z[t.state.currentSelection.value]);
                                var l = t.state.currentSelection.reportReason || t.state.reportReason,
                                    c = s.type === E.Info;
                                t.setState({
                                    currentCard: s,
                                    reportReason: l,
                                    prevCards: c ? [] : n,
                                    prevSelections: i,
                                    targetUnknown: a,
                                    currentSelection: r || null,
                                    displacedSelections: t.state.displacedSelections.slice(0, -1),
                                    reportContext: o
                                }, function() {
                                    return t.trackNavigation(I.Next, e.value)
                                })
                            }
                        }, t.createReportDescription = function() {
                            return "" + (t.state.reportContext !== t.props.reportContentType ? "report context: " + t.props.reportContentType + "\n\n" : "") + t.state.prevSelections.map(function(e) {
                                if (!e.omitFromDescription) return e.value
                            }).filter(function(e) {
                                return !!e
                            }).join(" > ") + "\n\n" + Object.keys(t.state.userTextInput).map(function(e) {
                                return e + ": " + t.state.userTextInput[e]
                            }).join("\n")
                        }, t.requiredInputsNonEmpty = function() {
                            if (t.state.currentCard.items) return 0 === t.state.currentCard.items.filter(function(e) {
                                if (e.type !== i.Textarea || !e.required) return !1;
                                var n = t.state.userTextInput[e.value],
                                    r = n && 0 === n.trim().length;
                                return !n || r
                            }).length
                        }, t.handleSubmit = function() {
                            return r.__awaiter(t, void 0, void 0, function() {
                                var e, t, n, i, a = this;
                                return r.__generator(this, function(r) {
                                    switch (r.label) {
                                        case 0:
                                            return e = Object(l.d)("Additional information is required.", "ReportModalWizard"), this.requiredInputsNonEmpty() ? (t = this.state.reportReason || "other", n = this.createReportDescription(), [4, this.props.onSubmit(t, n, null, null, this.state.reportContext)]) : [3, 2];
                                        case 1:
                                            switch (r.sent(), this.props.submitStatus) {
                                                case O.b.FormError:
                                                    this.setState({
                                                        error: e
                                                    });
                                                    break;
                                                case O.b.Success:
                                                    i = X, J[t] && (i = J[t]), this.state.currentCard.nextCard && (i = this.state.currentCard.nextCard), this.setState({
                                                        currentCard: i,
                                                        prevCards: [],
                                                        prevSelections: [],
                                                        currentSelection: null,
                                                        displacedSelections: [],
                                                        userTextInput: {},
                                                        error: ""
                                                    }, function() {
                                                        return a.trackNavigation(I.Submit)
                                                    });
                                                    break;
                                                case O.b.UserError:
                                                    this.setState({
                                                        error: Object(l.d)("This account could not be reported. It may have already been suspended, or the owner may have deleted it.", "ReportModalWizard")
                                                    });
                                                    break;
                                                case O.b.MutationError:
                                                default:
                                                    this.setState({
                                                        error: Object(l.d)("Sorry, a network error occurred when submitting your report. Please try again later.", "ReportModalWizard")
                                                    })
                                            }
                                            return [3, 3];
                                        case 2:
                                            this.props.onError(O.b.FormError), this.setState({
                                                error: e
                                            }), r.label = 3;
                                        case 3:
                                            return [2]
                                    }
                                })
                            })
                        }, t.handleBack = function() {
                            return r.__awaiter(t, void 0, void 0, function() {
                                var e, t, n, i, a, o = this;
                                return r.__generator(this, function(r) {
                                    return e = this.state.currentCard, t = this.state.prevCards[this.state.prevCards.length - 1], n = this.state.prevSelections[this.state.prevSelections.length - 1], i = !n.differentTarget && this.state.targetUnknown, a = this.state.displacedSelections, this.state.currentSelection && (a = a.concat(this.state.currentSelection)), t && n && this.setState({
                                        currentCard: t,
                                        currentSelection: n,
                                        displacedSelections: a,
                                        prevCards: this.state.prevCards.slice(0, -1),
                                        prevSelections: this.state.prevSelections.slice(0, -1),
                                        error: "",
                                        targetUnknown: i
                                    }, function() {
                                        return o.trackNavigation(I.Back, e.value)
                                    }), [2]
                                })
                            })
                        }, t.handleTextInput = function(e, n) {
                            var i = t.state.userTextInput;
                            i[e] = n, t.setState({
                                userTextInput: i
                            })
                        }, t.handleSelection = function(e) {
                            if (t.state.currentCard.items && e !== t.state.currentSelection) {
                                var n = t.state.targetUnknown;
                                if (n) n = 0 === t.state.displacedSelections.filter(function(e) {
                                    return e.differentTarget
                                }).length;
                                var i = t.state.reportContext;
                                (t.state.displacedSelections.filter(function(e) {
                                    return e.reportContext
                                }).length || t.state.currentSelection && t.state.currentSelection.reportContext) && (i = t.props.reportContentType), t.setState({
                                    currentSelection: e,
                                    displacedSelections: [],
                                    userTextInput: {},
                                    targetUnknown: n,
                                    reportContext: i
                                })
                            }
                        }, t.trackNavigation = function(e, n) {
                            t.props.trackAction(e, n, t.state.currentCard.value)
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.componentWillUnmount = function() {
                        this.state.modalCloseTracked || this.props.trackClose(D.Close, this.state.currentCard.value)
                    }, t.prototype.render = function() {
                        var e = this.state.currentCard.type === E.Info && this.state.currentCard.blockPrompt ? a.createElement(S, {
                                targetUser: this.props.targetUser,
                                onBlock: this.props.onBlock,
                                onUnblock: this.props.onUnblock,
                                userBlocked: this.props.userBlocked
                            }) : null,
                            t = this.state.error ? a.createElement(b.xb, {
                                fullWidth: !0,
                                margin: {
                                    bottom: 1
                                },
                                padding: 1,
                                className: "reporting__error-container"
                            }, this.state.error) : null,
                            n = this.state.prevCards.length || this.state.currentCard.type === E.Info ? null : this.renderPrimer();
                        return a.createElement(b.xb, {
                            className: "reporting-wizard",
                            display: b.W.Flex,
                            margin: {
                                x: 1
                            },
                            flexDirection: b.Y.Column,
                            fullHeight: !0,
                            "data-test-card-value": this.state.currentCard.value
                        }, t, a.createElement(b.V, {
                            bold: !0,
                            fontSize: b.Aa.Size4
                        }, this.getTitle()), n, a.createElement(b.Va, {
                            margin: {
                                y: 1
                            }
                        }, a.createElement(T, {
                            currentCard: this.state.currentCard,
                            currentSelection: this.state.currentSelection,
                            targetUser: this.props.targetUser,
                            targetUserID: this.props.targetUser.id,
                            onChangeRadio: this.handleSelection,
                            onChangeText: this.handleTextInput,
                            userTextInputs: this.state.userTextInput,
                            error: this.props.submitStatus === O.b.FormError && !!this.state.error
                        }), e), this.renderButtons())
                    }, t
                }(a.Component),
                oe = n("+PZR"),
                se = n("PDCe"),
                le = n("s8Ou"),
                ce = n("0hI/");
            n.d(t, "c", function() {
                    return I
                }), n.d(t, "a", function() {
                    return D
                }), n.d(t, "b", function() {
                    return ue
                }),
                function(e) {
                    e.Close = "close", e.Open = "open", e.Submit = "submit_report", e.ToggleSettings = "modal_settings"
                }(N || (N = {})),
                function(e) {
                    e.Back = "back", e.Close = "close", e.Open = "open", e.Next = "next", e.Submit = "submit_report", e.ToggleSettings = "modal_settings"
                }(I || (I = {})),
                function(e) {
                    e.Close = "close", e.Finish = "finish"
                }(D || (D = {}));
            var de = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.handleSubmit = function(e, t, i, a, o) {
                        return r.__awaiter(n, void 0, void 0, function() {
                            var n, s, c, d, u = this;
                            return r.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        if (e !== O.a) return [3, 5];
                                        c = {
                                            userID: this.props.data.targetUser.id,
                                            communityID: i || "",
                                            reason: t
                                        }, r.label = 1;
                                    case 1:
                                        return r.trys.push([1, 3, , 4]), [4, this.props.reportUserInCommunity(Object(p.a)(c))];
                                    case 2:
                                        return r.sent(), l.o.tracking.track(f.SpadeEventType.CommunityModeration, {
                                            community_id: i,
                                            name: a,
                                            is_official: !1,
                                            user_id: this.props.sessionUser && this.props.sessionUser.id,
                                            target_id: this.props.reportContext.targetUserID,
                                            action: "report",
                                            reason: e
                                        }), this.setState({
                                            submitStatus: O.b.Success
                                        }, function() {
                                            u.state.showWizard || u.trackAction(N.Submit)
                                        }), [3, 4];
                                    case 3:
                                        return n = r.sent(), l.j.error(n, "ReportUserInCommunity Mutation failed."), this.setState({
                                            submitStatus: O.b.MutationError
                                        }), [3, 4];
                                    case 4:
                                        return [3, 9];
                                    case 5:
                                        if (s = o === C.a.Whisper ? o : this.props.reportContext.contentType, c = {
                                                description: t,
                                                reason: e,
                                                content: s,
                                                contentID: this.props.reportContext.contentID,
                                                extra: this.props.reportContext.extra,
                                                targetID: this.props.data.targetUser.id
                                            }, this.props.reportContext.contentType === C.a.Community && this.props.reportContext.extra && (c.description = Object(oe.a)(this.props.reportContext.extra, t)), null === c.targetID) return this.setState({
                                            submitStatus: O.b.UserError
                                        }), [2];
                                        r.label = 6;
                                    case 6:
                                        return r.trys.push([6, 8, , 9]), [4, this.props.reportUser(Object(p.a)(c))];
                                    case 7:
                                        return r.sent(), this.props.reportContext.contentType === C.a.Community && l.o.tracking.track(f.SpadeEventType.CommunityReport, {
                                            community_id: this.props.reportContext.contentID,
                                            name: this.props.reportContext.extra,
                                            is_official: !1,
                                            user_id: this.props.sessionUser && this.props.sessionUser.id,
                                            reason: e
                                        }), this.setState({
                                            submitStatus: O.b.Success
                                        }, function() {
                                            u.state.showWizard || u.trackAction(N.Submit)
                                        }), [3, 9];
                                    case 8:
                                        return d = r.sent(), l.j.error(d, "ReportUser Mutation failed."), this.setState({
                                            submitStatus: O.b.MutationError
                                        }), [3, 9];
                                    case 9:
                                        return [2]
                                }
                            })
                        })
                    }, n.handleChildError = function(e) {
                        return n.setState({
                            submitStatus: e
                        })
                    }, n.handleClose = function() {
                        n.props.onClose && n.props.onClose(n.state.submitStatus, n.state.userBlocked)
                    }, n.onBlock = function() {
                        n.props.blockUserMutation(n.props.data.targetUser.id, void 0, void 0, r.__assign({}, n.props.sessionUser, {
                            __typename: "User"
                        })), n.setState({
                            userBlocked: !0
                        })
                    }, n.onUnblock = function() {
                        n.props.unblockUserMutation(n.props.data.targetUser.id, r.__assign({}, n.props.sessionUser, {
                            __typename: "User"
                        })), n.setState({
                            userBlocked: !1
                        })
                    }, n.trackOpen = function(e) {
                        n.state.openEventSent || (n.state.showWizard ? n.trackWizardAction(I.Open, void 0, e) : n.trackAction(N.Open), n.setState({
                            openEventSent: !0
                        }))
                    }, n.trackClose = function(e, t) {
                        n.state.closeEventSent || (n.state.showWizard ? n.trackWizardAction(I.Close, t, void 0, e) : n.trackAction(N.Close), n.setState({
                            closeEventSent: !0
                        }))
                    }, n.trackWizardAction = function(e, t, i, r) {
                        l.o.tracking.track(f.SpadeEventType.ReportWizardFlowAction, {
                            ui_context: n.props.reportContext.contentType,
                            target_user_id: n.props.reportContext.targetUserID,
                            report_sent: n.state.submitStatus === O.b.Success,
                            modal_type: "wizard_v1",
                            extra_user_id: n.props.reportContext.additionalTrackingID,
                            action: e,
                            close_type: r,
                            report_session_id: n.reportID,
                            current_step: t,
                            navigated_to: i
                        })
                    }, n.trackAction = function(e) {
                        l.o.tracking.track(f.SpadeEventType.ReportFlowAction, {
                            ui_context: n.props.reportContext.contentType,
                            target_user_id: n.props.reportContext.targetUserID,
                            report_sent: n.state.submitStatus === O.b.Success,
                            extra_user_id: n.props.reportContext.additionalTrackingID,
                            action: e,
                            report_session_id: n.reportID
                        })
                    }, n.reportID = Object(m.a)();
                    var i = l.o.experiments.getAssignment(h.b.NewReportingWizard);
                    return n.state = {
                        submitStatus: O.b.Unsubmitted,
                        showWizard: "yes" === i,
                        openEventSent: !1,
                        closeEventSent: !1,
                        userBlocked: !1
                    }, n
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.trackOpen()
                }, t.prototype.componentWillUnmount = function() {
                    this.handleClose(), this.state.showWizard || this.trackClose()
                }, t.prototype.render = function() {
                    if (this.props.data.error) return a.createElement(b.Va, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(b.V, {
                        fontSize: b.Aa.Size5
                    }, Object(l.d)("There was an unexpected error. Please refresh the page and try again", "ReportUser")));
                    if (this.props.data.loading) return a.createElement(b.cb, {
                        lineCount: 3
                    });
                    if (this.props.data.targetUser) {
                        var e = {
                            onClose: this.handleClose,
                            onError: this.handleChildError,
                            onSubmit: this.handleSubmit,
                            reportContentType: this.props.reportContext.contentType,
                            submitStatus: this.state.submitStatus,
                            title: this.props.title,
                            defaultDescription: this.props.defaultDescription
                        };
                        return this.state.showWizard ? this.props.data.loading ? a.createElement(b.Xa, null) : a.createElement(ae, r.__assign({}, e, {
                            user: this.props.sessionUser,
                            onBlock: this.onBlock,
                            onUnblock: this.onUnblock,
                            targetUser: this.props.data.targetUser,
                            trackAction: this.trackWizardAction,
                            trackClose: this.trackClose,
                            userBlocked: this.userBlocked
                        })) : a.createElement(O.c, r.__assign({}, e, {
                            targetUser: this.props.data.targetUser
                        }))
                    }
                    return a.createElement(b.Va, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(b.V, {
                        fontSize: b.Aa.Size5
                    }, Object(l.d)("The user you are trying to report does not exist", "ReportUser")))
                }, Object.defineProperty(t.prototype, "userBlocked", {
                    get: function() {
                        var e = this;
                        return !!(this.props.data.currentUser && this.props.data.currentUser.blockedUsers && this.props.data.currentUser.blockedUsers.find(function(t) {
                            return !!t && t.id === e.props.reportContext.targetUserID
                        }))
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(a.Component);
            var ue = Object(s.compose)(Object(c.a)(se, {
                name: "reportUserInCommunity"
            }), Object(c.a)(le, {
                name: "reportUser"
            }), Object(c.a)(ce, {
                options: function(e) {
                    return {
                        variables: {
                            targetUserID: e.reportContext.targetUserID
                        }
                    }
                }
            }), Object(g.c)("ReportUser", {
                autoReportInteractive: !0
            }), Object(d.a)(), Object(u.a)(), Object(o.connect)(function(e) {
                return {
                    sessionUser: e.session.user
                }
            }, null))(de)
        },
        e1GG: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "PostPermissions"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "id"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "feedItemContent"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "InlineFragment",
                                    typeCondition: {
                                        kind: "NamedType",
                                        name: {
                                            kind: "Name",
                                            value: "Post"
                                        }
                                    },
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "self"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "permissions"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "canDelete"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 117
                }
            };
            n.loc.source = {
                body: "query PostPermissions($id: ID!) {\nfeedItemContent(id: $id) {\n...on Post {\nid\nself {\npermissions {\ncanDelete\n}\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        efEE: function(e, t, n) {},
        fga6: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "user"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "User"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "broadcastSettings"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "title"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "displayName"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "profileImageURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "width"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "50"
                                }
                            }],
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 104
                }
            };
            n.loc.source = {
                body: "fragment user on User {\nid\nbroadcastSettings {\nid\ntitle\n}\ndisplayName\nlogin\nprofileImageURL(width: 50)\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        g6EN: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Pulse"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "limit"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Int"
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "cursor"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Cursor"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "feedUser"
                                    },
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "isConnectedToTwitter"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "pulseFeed"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "items"
                                            },
                                            arguments: [{
                                                kind: "Argument",
                                                name: {
                                                    kind: "Name",
                                                    value: "first"
                                                },
                                                value: {
                                                    kind: "Variable",
                                                    name: {
                                                        kind: "Name",
                                                        value: "limit"
                                                    }
                                                }
                                            }, {
                                                kind: "Argument",
                                                name: {
                                                    kind: "Name",
                                                    value: "after"
                                                },
                                                value: {
                                                    kind: "Variable",
                                                    name: {
                                                        kind: "Name",
                                                        value: "cursor"
                                                    }
                                                }
                                            }],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "FragmentSpread",
                                                    name: {
                                                        kind: "Name",
                                                        value: "feed"
                                                    },
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 271
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/feed/models/feed-fragment.gql"\n#import "twilight/features/feed/models/user-fragment.gql"\nquery Pulse($limit: Int $cursor: Cursor) {\ncurrentUser {\n...feedUser\nisConnectedToTwitter\npulseFeed {\nitems(first: $limit after: $cursor) {\n...feed\n}\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};

            function a(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }
            i.definitions = i.definitions.concat(a(n("4rAQ").definitions)), i.definitions = i.definitions.concat(a(n("k960").definitions)), e.exports = i
        },
        gAd6: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "VideoPreviewCardGameID"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "name"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "game"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 73
                }
            };
            n.loc.source = {
                body: "query VideoPreviewCardGameID($name: String!) {\ngame(name: $name) {\nid\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        gIsd: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ReportUserModal_ReportReasons"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "content"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ReportContentType"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "reportReasons"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "content"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "content"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "text"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 114
                }
            };
            n.loc.source = {
                body: "query ReportUserModal_ReportReasons($content: ReportContentType!) {\nreportReasons(content: $content) {\nid\ntext\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        gTu3: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }),
                function(e) {
                    e[e.Default = 0] = "Default", e[e.Recipient = 1] = "Recipient", e[e.Sender = 2] = "Sender"
                }(i || (i = {}))
        },
        hV6K: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA"),
                o = n("yR8l"),
                s = n("TSYQ"),
                l = n("/0dD"),
                c = n("76Lv"),
                d = n("OUrp"),
                u = n("+qcr"),
                p = n("GnwI"),
                m = n("Ue10"),
                h = (n("d34l"), "carousel-card-live"),
                f = "carousel-card-vod",
                g = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.renderIndicator = function() {
                            return t.props.item.content.type === d.b.Stream ? r.createElement(m.K, {
                                status: m.M.Live,
                                size: m.L.Small,
                                "data-test-selector": h
                            }) : r.createElement(m.mb, {
                                asset: m.nb.GlyphViews,
                                "data-test-selector": f
                            })
                        }, t.itemClick = function() {
                            t.props.itemClick(t.props.item)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        var e = s({
                                "carousel-nav__item": !0,
                                "carousel-nav__item--active": this.props.itemActive
                            }),
                            t = Object(u.d)(this.props.item.imageURL) ? this.props.item.imageURL : this.props.item.broadcaster.profileImageURL;
                        return r.createElement(m.Va, {
                            className: e,
                            margin: {
                                x: .5
                            },
                            padding: {
                                bottom: .5
                            },
                            flexGrow: 1,
                            position: m.db.Relative
                        }, r.createElement(m.Qb, {
                            label: (this.props.item.isSponsored ? Object(a.d)("Sponsored", "CarouselCardComponent") : "") + " " + this.props.item.broadcaster.displayName,
                            direction: m.Sb.Top,
                            display: m.W.Block
                        }, r.createElement(m.Sa, i.__assign({
                            onClick: this.itemClick
                        }, Object(m.bc)(this.props)), r.createElement(m.o, {
                            ratio: m.p.Aspect16x9
                        }, r.createElement(m.Va, {
                            className: "carousel-nav__img-container",
                            fullHeight: !0
                        }, r.createElement(m.Va, {
                            className: "carousel-nav__meta",
                            zIndex: m.ac.Above,
                            alignItems: m.f.Center,
                            position: m.db.Absolute,
                            attachBottom: !0,
                            margin: {
                                left: .5
                            }
                        }, this.renderIndicator(), r.createElement(m.Va, {
                            display: m.W.InlineFlex,
                            margin: {
                                left: .5
                            }
                        }, r.createElement(m.V, {
                            color: m.O.Overlay,
                            type: m.Nb.Span
                        }, Object(a.e)(this.props.item.content.viewersCount)))), r.createElement("img", {
                            className: "carousel-nav__img",
                            "data-content-id": this.props.item.content.id,
                            src: t,
                            alt: this.props.item.broadcaster.displayName,
                            "data-a-target": "carousel-image"
                        }), this.props.item.isSponsored ? r.createElement(m.Va, {
                            position: m.db.Absolute,
                            attachRight: !0,
                            attachTop: !0
                        }, r.createElement(m.mb, {
                            asset: m.nb.Featured,
                            type: m.ob.Brand,
                            width: 20,
                            height: 20
                        })) : "")))))
                    }, t = i.__decorate([Object(p.c)("CarouselCard")], t)
                }(r.Component),
                v = n("6x+I"),
                b = n("2iEm"),
                k = n("QVaV"),
                y = (n("cH/u"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.getContentRender = function() {
                            var e = s("horizontal-carousel-player__details", {
                                    "horizontal-carousel-player__details--overlay": t.props.darkTheme
                                }),
                                n = Object(a.d)("playing {game}", {
                                    game: r.createElement(b.a, {
                                        to: {
                                            pathname: "/directory/game/" + t.props.item.content.gameName,
                                            state: Object(u.b)(t.props.item.isScheduled)
                                        }
                                    }, t.props.item.content.gameName)
                                }, "HorizontalCarouselPlayer"),
                                i = {
                                    type: t.props.item.content.type,
                                    id: t.props.item.content.id,
                                    onPlayerInit: t.props.onPlayerInit,
                                    onPlayerDestroy: t.props.onPlayerDestroy,
                                    onVideoTimeChange: t.onVideoTimeChange
                                };
                            return r.createElement(m.xb, {
                                className: "horizontal-carousel-player",
                                borderRadius: m.x.Medium,
                                overflow: m.Ya.Hidden,
                                margin: {
                                    bottom: 2
                                },
                                display: m.W.Flex,
                                flexDirection: m.Y.Row,
                                color: m.O.Alt
                            }, r.createElement(m.Va, {
                                flexGrow: 1,
                                flexShrink: 0
                            }, r.createElement(m.Va, {
                                className: "horizontal-carousel-player__video",
                                position: m.db.Relative,
                                overflow: m.Ya.Hidden
                            }, Object(u.c)(i))), r.createElement(m.xb, {
                                className: e,
                                flexGrow: 0,
                                padding: 2,
                                borderRadius: {
                                    topRight: m.x.Medium,
                                    bottomRight: m.x.Medium
                                }
                            }, r.createElement(m.Va, {
                                display: m.W.Flex,
                                flexWrap: m.Z.NoWrap,
                                textAlign: m.Jb.Left,
                                alignItems: m.f.Center,
                                padding: {
                                    bottom: .5
                                }
                            }, r.createElement(m.Va, {
                                margin: {
                                    right: 1
                                },
                                flexShrink: 0
                            }, r.createElement("span", {
                                onClick: t.promotionCardClick.bind(t, "thumbnail")
                            }, r.createElement(b.a, {
                                to: {
                                    pathname: "/" + t.props.item.broadcaster.login,
                                    state: Object(u.b)(t.props.item.isScheduled)
                                },
                                "data-a-target": "carousel-profile-image"
                            }, r.createElement(m.q, {
                                src: t.props.item.broadcaster.profileImageURL,
                                alt: Object(a.d)("Profile Picture for {login}", {
                                    login: t.props.item.broadcaster.login
                                }, "HorizontalCarouselPlayer"),
                                size: 40
                            })))), r.createElement(m.Va, {
                                margin: {
                                    right: 1
                                },
                                flexGrow: 1
                            }, r.createElement(m.V, {
                                fontSize: m.Aa.Size4,
                                color: m.O.Base,
                                lineHeight: m.Wa.Heading,
                                "data-a-target": "carousel-broadcaster-displayname"
                            }, Object(k.a)(t.props.item.broadcaster.login, t.props.item.broadcaster.displayName)), r.createElement(m.V, {
                                fontSize: m.Aa.Size6,
                                color: m.O.Base,
                                "data-a-target": "carousel-user-playing-message"
                            }, r.createElement("span", {
                                onClick: t.promotionCardClick.bind(t, "game_name")
                            }, n)))), r.createElement(m.Va, {
                                margin: {
                                    y: 1
                                }
                            }, r.createElement("span", {
                                onClick: t.promotionCardClick.bind(t, "stream_title")
                            }, r.createElement(b.a, {
                                to: t.getLinkForTitle()
                            }, r.createElement(m.V, {
                                type: m.Nb.Span,
                                "data-a-target": d.a,
                                fontSize: m.Aa.Size3,
                                lineHeight: m.Wa.Heading
                            }, t.props.item.title)))), r.createElement(v, {
                                source: t.props.item.description || ""
                            })))
                        }, t.getLinkForTitle = function() {
                            if (t.props.item.content.type === d.b.Stream) return {
                                pathname: "/" + t.props.item.broadcaster.login,
                                state: Object(u.b)(t.props.item.isScheduled)
                            };
                            var e = t.state && t.state.videoOffset || 0;
                            return {
                                pathname: "/videos/" + t.props.item.content.id + "?t=" + e,
                                state: Object(u.b)(t.props.item.isScheduled)
                            }
                        }, t.getPlaceholderRender = function() {
                            var e = s("horizontal-carousel-player__details", {
                                "horizontal-carousel-player__details--overlay": t.props.darkTheme
                            });
                            return r.createElement(m.Va, {
                                display: m.W.Flex,
                                flexWrap: m.Z.NoWrap,
                                flexShrink: 0,
                                margin: {
                                    bottom: 2
                                }
                            }, r.createElement(m.Va, {
                                flexGrow: 1,
                                flexShrink: 1,
                                fullWidth: !0
                            }, r.createElement(m.o, {
                                ratio: m.p.Aspect16x9
                            }, r.createElement(m.cb, {
                                "data-test-selector": "carousel-player-placeholder"
                            }))), r.createElement(m.Va, {
                                className: s(e),
                                flexGrow: 0,
                                flexShrink: 0,
                                padding: 2
                            }, r.createElement(m.Va, {
                                display: m.W.Flex,
                                flexWrap: m.Z.NoWrap,
                                textAlign: m.Jb.Left,
                                alignItems: m.f.Start
                            }, r.createElement(m.Va, {
                                margin: {
                                    right: 1
                                },
                                flexShrink: 0
                            }, r.createElement(m.cb, {
                                width: 40,
                                height: 40
                            })), r.createElement(m.Va, {
                                margin: {
                                    right: 1
                                },
                                flexGrow: 1
                            }, r.createElement(m.V, null, r.createElement(m.cb, {
                                width: 70
                            })), r.createElement(m.V, null, r.createElement(m.cb, {
                                width: 70
                            })))), r.createElement(m.Va, {
                                margin: {
                                    y: 1
                                }
                            }, r.createElement(m.V, null, r.createElement(m.cb, {
                                lineCount: 1
                            })), r.createElement(m.V, null, r.createElement(m.cb, {
                                lineCount: 4
                            })))))
                        }, t.onVideoTimeChange = function(e) {
                            t.setState({
                                videoOffset: e
                            })
                        }, t.promotionCardClick = function(e) {
                            t.props.onPromotionCardClick(t.props.item, e)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentWillUpdate = function(e) {
                        e.item !== this.props.item && this.props.onPromotionCardView(e.item)
                    }, t.prototype.render = function() {
                        return this.props.item ? this.getContentRender() : this.getPlaceholderRender()
                    }, t
                }(r.Component)),
                S = n("/MKj"),
                C = n("dIU+"),
                E = (n("EZOg"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.getContentRender = function() {
                            var e = s("vertical-carousel-player__details", {
                                    "vertical-carousel-player__details--overlay": t.props.darkTheme
                                }),
                                n = Object(a.d)("{login} playing {game}", {
                                    login: r.createElement("span", {
                                        onClick: t.promotionCardClick.bind(t, "display_name")
                                    }, r.createElement(b.a, {
                                        to: {
                                            pathname: "/" + t.props.item.broadcaster.login,
                                            state: Object(u.b)(t.props.item.isScheduled)
                                        },
                                        "data-a-target": "carousel-broadcaster-displayname"
                                    }, Object(k.a)(t.props.item.broadcaster.login, t.props.item.broadcaster.displayName))),
                                    game: r.createElement("span", {
                                        onClick: t.promotionCardClick.bind(t, "game_name")
                                    }, r.createElement(b.a, {
                                        to: {
                                            pathname: "/directory/game/" + t.props.item.content.gameName,
                                            state: Object(u.b)(t.props.item.isScheduled)
                                        },
                                        "data-a-target": "carousel-broadcaster-game-name"
                                    }, t.props.item.content.gameName))
                                }, "VerticalCarouselPlayer"),
                                i = {
                                    type: t.props.item.content.type,
                                    id: t.props.item.content.id,
                                    onPlayerInit: t.props.onPlayerInit,
                                    onPlayerDestroy: t.props.onPlayerDestroy
                                };
                            return r.createElement(m.xb, {
                                className: "vertical-carousel-player",
                                padding: {
                                    bottom: 1,
                                    x: 1
                                },
                                color: m.O.Alt
                            }, r.createElement(m.Va, {
                                className: "vertical-carousel-player__video",
                                position: m.db.Relative,
                                overflow: m.Ya.Hidden
                            }, Object(u.c)(i)), r.createElement(m.Va, {
                                className: s(e),
                                display: m.W.Flex,
                                flexWrap: m.Z.NoWrap,
                                textAlign: m.Jb.Left,
                                alignItems: m.f.Center,
                                padding: {
                                    y: 1
                                }
                            }, r.createElement(m.Va, {
                                margin: {
                                    right: 1
                                },
                                flexShrink: 0
                            }, r.createElement("span", {
                                onClick: t.promotionCardClick.bind(t, "thumbnail")
                            }, r.createElement(b.a, {
                                to: "/" + t.props.item.broadcaster.login,
                                "data-a-target": "carousel-avatar-link"
                            }, r.createElement(m.q, {
                                src: t.props.item.broadcaster.profileImageURL,
                                alt: Object(a.d)("Profile Picture for {login}", {
                                    login: t.props.item.broadcaster.login
                                }, "VerticalCarouselPlayer"),
                                size: 40
                            })))), r.createElement(m.Va, {
                                margin: {
                                    right: 1
                                },
                                flexGrow: 1
                            }, r.createElement(m.V, {
                                "data-a-target": d.a,
                                fontSize: m.Aa.Size5,
                                color: m.O.Base,
                                bold: !0
                            }, t.props.item.title), r.createElement(m.V, {
                                fontSize: m.Aa.Size6,
                                color: m.O.Base
                            }, n)), r.createElement(m.Va, {
                                flexShrink: 0
                            }, t.renderFollowButton())), r.createElement(v, {
                                source: t.props.item.description || ""
                            }))
                        }, t.getPlaceholderRender = function() {
                            return r.createElement(m.Va, {
                                padding: {
                                    bottom: 1,
                                    x: 1
                                }
                            }, r.createElement(m.o, {
                                ratio: m.p.Aspect16x9
                            }, r.createElement(m.cb, {
                                "data-test-selector": "carousel-player-placeholder"
                            })), r.createElement(m.Va, {
                                display: m.W.Flex,
                                flexWrap: m.Z.NoWrap,
                                textAlign: m.Jb.Left,
                                alignItems: m.f.Center,
                                padding: {
                                    y: 1
                                }
                            }, r.createElement(m.Va, {
                                margin: {
                                    right: 1
                                },
                                flexShrink: 0
                            }, r.createElement(m.cb, {
                                width: 40,
                                height: 40
                            })), r.createElement(m.Va, {
                                margin: {
                                    right: 1
                                },
                                flexGrow: 1
                            }, r.createElement(m.V, null, r.createElement(m.cb, {
                                width: 150
                            })), r.createElement(m.V, null, r.createElement(m.cb, {
                                width: 100
                            }))), r.createElement(m.Va, {
                                flexShrink: 0
                            }, r.createElement(m.cb, {
                                width: 70,
                                height: 30
                            }))), r.createElement(m.V, null, r.createElement(m.cb, {
                                lineCount: 3
                            })))
                        }, t.promotionCardClick = function(e) {
                            t.props.onPromotionCardClick(t.props.item, e)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return this.props.item ? this.getContentRender() : this.getPlaceholderRender()
                    }, t.prototype.renderFollowButton = function() {
                        return this.props.firstPageLoaded ? r.createElement(C.a, {
                            "data-a-target": "carousel-follow-button",
                            channelLogin: this.props.item.broadcaster.login,
                            followUIType: C.b.IconAndText,
                            unfollowUIType: C.b.IconOnly,
                            showLoadingPlaceholder: !0
                        }) : r.createElement(m.cb, {
                            width: 70,
                            height: 30
                        })
                    }, t
                }(r.Component));
            var _, w = Object(S.connect)(function(e) {
                    return {
                        firstPageLoaded: e.session.firstPageLoaded
                    }
                })(E),
                T = n("44NB"),
                O = (n("QzrU"), 6),
                N = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            activeItem: t.props.items[0],
                            startingIndex: 0
                        }, t.displayEventFired = !1, t.renderLeftButton = function() {
                            if (t.props.items.length > O) {
                                var e = t.state.startingIndex > 0;
                                return r.createElement(m.Va, {
                                    display: m.W.Flex,
                                    alignItems: m.f.Stretch
                                }, r.createElement(m.A, {
                                    ariaLabel: Object(a.d)("Page Left", "CarouselPlayerComponent"),
                                    icon: m.nb.AngleLeft,
                                    onClick: t.handlePageLeft,
                                    "data-test-selector": d.d,
                                    disabled: !e
                                }))
                            }
                            return null
                        }, t.renderRightButton = function() {
                            if (t.props.items.length > O) {
                                var e = t.props.items.length > t.state.startingIndex + O;
                                return r.createElement(m.Va, {
                                    display: m.W.Flex,
                                    alignItems: m.f.Stretch
                                }, r.createElement(m.A, {
                                    ariaLabel: Object(a.d)("Page Right", "CarouselPlayerComponent"),
                                    icon: m.nb.AngleRight,
                                    onClick: t.handlePageRight,
                                    "data-test-selector": d.e,
                                    disabled: !e
                                }))
                            }
                            return null
                        }, t.getCardsRender = function() {
                            if (t.state.activeItem) return t.displayEventFired || (Object(T.a)(t.props.items), t.displayEventFired = !0), t.props.items.slice(t.state.startingIndex, t.state.startingIndex + O).map(function(e, n) {
                                return r.createElement(g, {
                                    key: e.content.id,
                                    item: e,
                                    itemClick: t.selectContent,
                                    itemActive: e.content.id === t.state.activeItem.content.id,
                                    "data-a-target": "carousel-card-" + n
                                })
                            });
                            for (var e = [], n = 0; n < O; n++) e.push(r.createElement(m.Va, {
                                key: n,
                                margin: {
                                    x: .5
                                },
                                flexGrow: 1
                            }, r.createElement(m.o, {
                                ratio: m.p.Aspect16x9
                            }, r.createElement(m.cb, null)), r.createElement(m.Va, {
                                margin: {
                                    top: .5
                                }
                            }, r.createElement(m.cb, {
                                height: 4
                            }))));
                            return e
                        }, t.getLayoutRender = function() {
                            var e = {
                                darkTheme: t.props.darkTheme || !1,
                                item: t.state.activeItem,
                                onPromotionCardClick: t.trackPromotionClick,
                                onPromotionCardView: t.trackPromotionView
                            };
                            switch (t.props.layout) {
                                case d.c.Vertical:
                                    return r.createElement(w, i.__assign({}, e));
                                default:
                                    return r.createElement(y, i.__assign({}, e))
                            }
                        }, t.selectContent = function(e) {
                            t.setState({
                                activeItem: e
                            });
                            var n = {
                                broadcast_type: e.content.subType,
                                carousel_index: t.props.items.indexOf(e),
                                channel: e.broadcaster.login,
                                game: e.content.gameName,
                                promotion_was_scheduled: e.isScheduled,
                                views: e.content.viewersCount
                            };
                            Object(T.b)(n)
                        }, t.trackPromotionClick = function(e, n) {
                            var i = e.broadcaster,
                                r = e.content,
                                a = e.isScheduled,
                                o = {
                                    broadcast_type: r.subType,
                                    carousel_index: t.props.items.indexOf(t.state.activeItem),
                                    channel: i.displayName,
                                    game: r.gameName,
                                    promotion_was_scheduled: a,
                                    views: r.viewersCount
                                };
                            Object(T.d)(o, n)
                        }, t.trackPromotionView = function(e) {
                            var n = {
                                broadcast_type: e.content.subType,
                                carousel_index: t.props.items.indexOf(e),
                                channel: e.broadcaster.login,
                                game: e.content.gameName,
                                promotion_was_scheduled: e.isScheduled,
                                views: e.content.viewersCount
                            };
                            Object(T.e)(n)
                        }, t.handlePageRight = function() {
                            var e = t.props.items.length - O;
                            e !== t.state.startingIndex && (Object(T.c)("next"), t.setState({
                                startingIndex: e
                            }))
                        }, t.handlePageLeft = function() {
                            t.state.startingIndex > 0 && (Object(T.c)("prev"), t.setState({
                                startingIndex: 0
                            }))
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive()
                    }, t.prototype.componentWillUpdate = function(e) {
                        !this.state.activeItem && e.items.length > 0 && this.setState({
                            activeItem: e.items[0]
                        })
                    }, t.prototype.render = function() {
                        var e;
                        return this.props.darkTheme && (e = Object(c.b)(l.a.Dark)), r.createElement(m.Va, {
                            className: s("carousel-player", e)
                        }, this.getLayoutRender(), r.createElement(m.xb, {
                            background: m.r.Alt,
                            borderRadius: m.x.Medium
                        }, r.createElement(m.Va, {
                            display: m.W.Flex,
                            flexWrap: m.Z.NoWrap,
                            padding: {
                                x: .5,
                                y: 1
                            }
                        }, this.renderLeftButton(), this.getCardsRender(), this.renderRightButton())))
                    }, t = i.__decorate([Object(p.c)("CarouselPlayer")], t)
                }(r.Component),
                I = n("pR+Y");
            ! function(e) {
                e[e.AnonFront = 1] = "AnonFront", e[e.Front = 2] = "Front"
            }(_ || (_ = {}));

            function D(e, t, n) {
                switch (t) {
                    case _.AnonFront:
                        return r.createElement(N, {
                            items: e,
                            isLoading: n,
                            layout: d.c.Horizontal,
                            darkTheme: !0
                        });
                    default:
                        return r.createElement(m.xb, {
                            className: "featured-broadcasters",
                            background: m.r.Base,
                            elevation: 1
                        }, r.createElement(m.Va, {
                            padding: 1
                        }, r.createElement(m.V, {
                            fontSize: m.Aa.Size5,
                            color: m.O.Alt2
                        }, Object(a.d)("Featured Broadcasters", "FeaturedBroadcastersComponent"))), r.createElement(N, {
                            items: e,
                            isLoading: n,
                            layout: d.c.Vertical
                        }))
                }
            }

            function R(e) {
                return D([], e, !0)
            }
            var x = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getRender = function(e) {
                        var n = !(!t.props.data.loading && !t.props.data.error);
                        return D(e, t.props.renderContext, n)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.postRender()
                }, t.prototype.componentDidUpdate = function() {
                    this.postRender()
                }, t.prototype.render = function() {
                    var e = function(e) {
                        return e.map(function(e) {
                            var t = "",
                                n = null;
                            return e.stream && e.stream.game && null !== e.stream.game.name && (t = e.stream.game.name), e.stream && e.stream.broadcaster && (n = e.stream.broadcaster), {
                                broadcaster: {
                                    displayName: n ? n.displayName : "",
                                    id: n ? n.id : "",
                                    login: n ? n.login : "",
                                    profileImageURL: n ? n.profileImageURL : ""
                                },
                                content: {
                                    id: n ? n.login : "",
                                    gameName: t,
                                    type: d.b.Stream,
                                    subType: e.stream ? e.stream.type : "",
                                    viewersCount: e.stream ? e.stream.viewersCount : 0
                                },
                                description: function(e) {
                                    return e.replace(/\[\]\(.+\)/, "")
                                }(e.description || ""),
                                imageURL: e.imageURL || "",
                                isScheduled: e.isScheduled || !1,
                                isSponsored: e.isSponsored || !1,
                                priorityLevel: e.priorityLevel,
                                title: e.title || ""
                            }
                        })
                    }(this.props.data.featuredStreams || []);
                    return this.getRender(e)
                }, t.prototype.postRender = function() {
                    this.props.data && !this.props.data.loading && this.props.latencyTracking.reportInteractive()
                }, t = i.__decorate([Object(o.a)(I, {
                    options: function(e) {
                        return {
                            variables: {
                                language: a.o.intl.getLanguageCode(),
                                first: e.streamCount || 8,
                                acceptedMature: a.l.get("mature", !1)
                            }
                        }
                    }
                }), Object(p.c)("FeaturedBroadcasters")], t)
            }(r.Component);
            n.d(t, "b", function() {
                return _
            }), n.d(t, !1, function() {
                return R
            }), n.d(t, "a", function() {
                return x
            })
        },
        i6WW: function(e, t, n) {
            "use strict";
            var i = n("/7QA"),
                r = n("RcPG"),
                a = new RegExp("(?:^|\\s)(?:https?://)?clips.twitch.tv/(\\w+)(?:/)?(\\w+)?(?:/edit)?(?:$|\\s)?"),
                o = new RegExp("(?:^|\\s)(?:https?:\\/\\/)?(?:www\\.)?twitch\\.tv\\/(\\w+)\\/clip\\/(\\w+)(?:$|\\s)?");
            var s = new RegExp("(?:^|\\s)(?:https?://)?(?:(?:www|go).)?twitch.tv/videos/(\\d+)(?:$|\\s)?");
            n.d(t, "a", function() {
                return c
            });
            var l = /^(?:(https?:\/\/)?((?:[\w#%\-+=:~]+\.)+[a-z]{2,8}(?:\/[\w./#%&()\-+=:?~]*)?))$/;

            function c(e, t) {
                var n = e.match(l);
                if (!n) return null;
                if (t.blockLinks) return {
                    type: r.a.Text,
                    content: " <" + Object(i.d)("deleted link", "CreateMessageData") + "> "
                };
                var c = n[1],
                    d = n[2],
                    u = "" + (c || "https://") + d;
                if (t.parseClips && function(e) {
                        void 0 === e && (e = "");
                        var t = a.test(e) && !e.includes("clips.twitch.tv/2017/"),
                            n = o.test(e);
                        return t || n
                    }(u)) {
                    var p = function(e) {
                        void 0 === e && (e = "");
                        var t = e.match(a);
                        if (t && t.length > 0 && void 0 !== t.index) return t[1];
                        var n = e.match(o);
                        return n && n.length > 0 && void 0 !== n.index ? n[2] : ""
                    }(u);
                    return {
                        type: r.a.ClipLink,
                        content: {
                            slug: p,
                            url: u,
                            displayText: e
                        }
                    }
                }
                if (t.parseVods && function(e) {
                        return void 0 === e && (e = ""), s.test(e)
                    }(u)) {
                    var m = function(e) {
                        void 0 === e && (e = "");
                        var t = e.match(s);
                        return null === t ? "" : t && t.length > 0 && void 0 !== t.index ? t[1] : ""
                    }(u);
                    return {
                        type: r.a.VideoLink,
                        content: {
                            id: m,
                            url: u,
                            displayText: e
                        }
                    }
                }
                return {
                    type: r.a.Link,
                    content: {
                        displayText: e,
                        url: u
                    }
                }
            }
        },
        iS14: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            });
            var i = n("mrSG"),
                r = n("yR8l"),
                a = n("8jSG"),
                o = n("cMjZ"),
                s = n("zixI");

            function l() {
                var e = this;
                return Object(r.a)(s, {
                    props: function(t) {
                        return {
                            unblockUserMutation: function(n, r) {
                                return i.__awaiter(e, void 0, void 0, function() {
                                    return i.__generator(this, function(e) {
                                        switch (e.label) {
                                            case 0:
                                                return t.mutate ? [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            targetUserID: n
                                                        }
                                                    },
                                                    optimisticResponse: {
                                                        unblockUser: {
                                                            __typename: "UnblockUserPayload",
                                                            targetUser: {
                                                                __typename: "User",
                                                                id: n
                                                            }
                                                        }
                                                    },
                                                    update: function(e) {
                                                        var t = e.readFragment({
                                                            id: Object(o.a)(r),
                                                            fragment: a
                                                        });
                                                        t && (t.blockedUsers = t.blockedUsers.filter(function(e) {
                                                            return null !== e && e.id !== n
                                                        }), e.writeFragment({
                                                            id: Object(o.a)(r),
                                                            fragment: a,
                                                            data: t
                                                        }))
                                                    }
                                                })] : [3, 2];
                                            case 1:
                                                return e.sent(), [3, 3];
                                            case 2:
                                                throw new Error("unblockUserMutation is not ready");
                                            case 3:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }
        },
        "if/Q": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "embeddedEmote"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "EmbeddedEmote"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "emoteID"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "setID"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "from"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "to"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 65
                }
            };
            n.loc.source = {
                body: "fragment embeddedEmote on EmbeddedEmote {\nemoteID\nsetID\nfrom\nto\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        iyGE: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("yR8l"),
                a = 60,
                o = 60 * a,
                s = 24 * o,
                l = 7 * s,
                c = 4 * l;
            var d, u = n("4w0E");

            function p(e) {
                var t = this;
                return Object(r.a)(u, {
                    props: function(n) {
                        return {
                            banUserMutation: function(r, d) {
                                return void 0 === d && (d = null), i.__awaiter(t, void 0, void 0, function() {
                                    var t;
                                    return i.__generator(this, function(i) {
                                        switch (i.label) {
                                            case 0:
                                                if (t = e(n.ownProps).channelID, !n.mutate) return [3, 5];
                                                i.label = 1;
                                            case 1:
                                                return i.trys.push([1, 3, , 4]), [4, n.mutate({
                                                    variables: {
                                                        input: {
                                                            channelID: t,
                                                            bannedUserLogin: r,
                                                            expiresIn: d && function(e) {
                                                                if (!e) return "0s";
                                                                var t = e,
                                                                    n = "";
                                                                if (t > c) {
                                                                    var i = Math.floor(t / c);
                                                                    t -= i * c, n += i + "mo"
                                                                }
                                                                if (t > l) {
                                                                    var r = Math.floor(t / l);
                                                                    t -= r * l, n += r + "w"
                                                                }
                                                                if (t > s) {
                                                                    var d = Math.floor(t / s);
                                                                    t -= d * s, n += d + "d"
                                                                }
                                                                if (t > o) {
                                                                    var u = Math.floor(t / o);
                                                                    t -= u * o, n += u + "h"
                                                                }
                                                                if (t > a) {
                                                                    var p = Math.floor(t / a);
                                                                    t -= p * a, n += p + "m"
                                                                }
                                                                return t > 0 && (n += t + "s"), n
                                                            }(d)
                                                        }
                                                    }
                                                })];
                                            case 2:
                                                return [2, i.sent().data];
                                            case 3:
                                                throw i.sent(), new Error("Unable to ban user");
                                            case 4:
                                                return [3, 6];
                                            case 5:
                                                throw new Error("Ban user mutation is not ready");
                                            case 6:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }
            n.d(t, "a", function() {
                    return d
                }), n.d(t, "b", function() {
                    return p
                }),
                function(e) {
                    e.Forbidden = "FORBIDDEN", e.TargetNotFound = "TARGET_NOT_FOUND", e.TargetIsSelf = "TARGET_IS_SELF", e.TargetIsAnonymous = "TARGET_IS_ANONYMOUS", e.TargetIsMod = "TARGET_IS_MOD", e.TargetIsBroadcaster = "TARGET_IS_BROADCASTER", e.TargetIsStaff = "TARGET_IS_STAFF", e.TargetIsAdmin = "TARGET_IS_ADMIN", e.TargetIsGlobalMod = "TARGET_IS_GLOBAL_MOD", e.TargetIsAlreadyBanned = "TARGET_ALREADY_BANNED", e.DurationInvalid = "DURATION_INVALID"
                }(d || (d = {}))
        },
        j4u0: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            });
            var i, r = n("/7QA"),
                a = n("D7An"),
                o = n("kRBY"),
                s = "gladiator_staff_alpha";

            function l() {
                var e = null;
                return function() {
                    if (null === e) {
                        var t = Object(o.e)(r.o.store.getState()),
                            n = t && t.roles && t.roles.isStaff;
                        e = !(!n || !r.b.get(s, !1)) || r.o.experiments.getAssignment(a.b.DiscoGladiator) === i.Variant1
                    }
                    return e
                }
            }! function(e) {
                e.Control = "control", e.Variant1 = "variant1"
            }(i || (i = {}))
        },
        jMH6: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "shelfClip"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Clip"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "slug"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "url"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "embedURL"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "clipTitle"
                            },
                            name: {
                                kind: "Name",
                                value: "title"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "clipViewCount"
                            },
                            name: {
                                kind: "Name",
                                value: "viewCount"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "curator"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "user"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "game"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "game"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "broadcaster"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "user"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "thumbnailURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "width"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "480"
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "height"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "272"
                                }
                            }],
                            directives: []
                        }, {
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "clipCreatedAt"
                            },
                            name: {
                                kind: "Name",
                                value: "createdAt"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "durationSeconds"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "language"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "champBadge"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 377
                }
            };
            i.loc.source = {
                body: '#import "twilight/pages/front/v2/queries/user-fragment.gql"\n#import "twilight/pages/front/v2/queries/game-fragment.gql"\nfragment shelfClip on Clip {\nid\nslug\nurl\nembedURL\nclipTitle: title\nclipViewCount: viewCount\ncurator {\n...user\n}\ngame {\n...game\n}\nbroadcaster {\n...user\n}\nthumbnailURL(width:480 height:272)\nclipCreatedAt: createdAt\ndurationSeconds\nlanguage\nchampBadge {\nid\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};

            function a(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }
            i.definitions = i.definitions.concat(a(n("fga6").definitions)), i.definitions = i.definitions.concat(a(n("0ubH").definitions)), e.exports = i
        },
        jeZI: function(e, t, n) {},
        jsEL: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA"),
                o = n("u5aL"),
                s = n("Ue10"),
                l = (n("wC0O"), {
                    TITLE: "clips-modal-title",
                    MAIN_BODY: "clips-modal-main-body",
                    SUCCESS_BODY: "clips-modal-success-body",
                    ERROR_BODY: "clips-modal-error-body",
                    SUBMIT_BUTTON: "clips-modal-submit-button",
                    CANCEL_BUTTON: "clips-modal-cancel-button"
                }),
                c = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.renderSuccess = function() {
                            return t.props.successContent ? r.createElement(s.xb, {
                                "data-test-selector": l.SUCCESS_BODY,
                                padding: {
                                    x: 2,
                                    y: 1
                                },
                                margin: {
                                    bottom: 1
                                },
                                borderMarked: !0,
                                background: s.r.Alt,
                                fullWidth: !0
                            }, r.createElement(s.V, {
                                type: s.Nb.Strong
                            }, t.props.successContent)) : null
                        }, t.renderError = function() {
                            return t.props.errorContent ? r.createElement(s.xb, {
                                "data-test-selector": l.ERROR_BODY,
                                padding: {
                                    x: 1,
                                    y: .5
                                },
                                margin: {
                                    bottom: 1
                                },
                                borderMarked: !0,
                                background: s.r.Alt,
                                fullWidth: !0
                            }, r.createElement(s.V, {
                                type: s.Nb.Strong,
                                color: s.O.Error
                            }, t.props.errorContent)) : null
                        }, t.onSubmit = function() {
                            t.props.onSubmit()
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return this.props.successContent ? r.createElement(o.a, {
                            onClickOut: this.props.onClose
                        }, r.createElement(s.xb, {
                            padding: 2,
                            background: s.r.Base,
                            className: "clip-modal"
                        }, this.renderSuccess(), r.createElement(s.Va, {
                            display: s.W.Flex,
                            justifyContent: s.Ua.Center
                        }, r.createElement(s.Va, {
                            margin: {
                                x: 1
                            }
                        }, r.createElement(s.z, {
                            "data-test-selector": l.CANCEL_BUTTON,
                            onClick: this.props.onClose
                        }, Object(a.d)("Close", "ClipsModal")))))) : r.createElement(o.a, {
                            onClickOut: this.props.onClose
                        }, r.createElement(s.xb, {
                            padding: 2,
                            background: s.r.Base,
                            className: "clip-modal"
                        }, r.createElement(s.xb, {
                            "data-test-selector": l.TITLE,
                            borderBottom: !0,
                            margin: {
                                bottom: 2
                            },
                            padding: {
                                bottom: 1
                            }
                        }, this.props.title), r.createElement(s.xb, {
                            "data-test-selector": l.MAIN_BODY,
                            borderBottom: !0,
                            margin: {
                                bottom: 2
                            },
                            padding: {
                                bottom: 2
                            }
                        }, this.renderError(), this.props.body), r.createElement(s.Va, {
                            display: s.W.Flex,
                            justifyContent: s.Ua.Center
                        }, r.createElement(s.Va, {
                            margin: {
                                x: 1
                            }
                        }, r.createElement(s.z, {
                            "data-test-selector": l.CANCEL_BUTTON,
                            type: s.F.Text,
                            onClick: this.props.onClose
                        }, Object(a.d)("Cancel", "ClipsModal"))), r.createElement(s.Va, {
                            margin: {
                                x: 1
                            }
                        }, r.createElement(s.z, {
                            "data-test-selector": l.SUBMIT_BUTTON,
                            type: this.props.buttonType ? this.props.buttonType : s.F.Default,
                            onClick: this.onSubmit,
                            disabled: this.props.submitDisabled
                        }, this.props.buttonContent), this.props.isLoading && r.createElement(s.Xa, {
                            delay: 0
                        })))))
                    }, t
                }(r.Component),
                d = n("iyGE"),
                u = n("GnwI"),
                p = 86400,
                m = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            isLoading: !1,
                            hasErrored: !1,
                            hasSucceeded: !1
                        }, t.renderTitle = function() {
                            return t.props.isTemporary ? r.createElement(s.V, {
                                type: s.Nb.H5,
                                ellipsis: !0
                            }, Object(a.d)("Timeout this Clip Creator for 24 hours from Your Channel", "ClipsModalBanUser")) : r.createElement(s.V, {
                                type: s.Nb.H5,
                                ellipsis: !0
                            }, Object(a.d)("Ban this Clip Creator from Your Channel", "ClipsModalBanUser"))
                        }, t.renderBodyText = function() {
                            return t.props.isTemporary ? r.createElement(s.V, null, Object(a.d)("{clipCreator} will temporarily be timed out from creating clips and chatting in your channel for 24 hours.", {
                                clipCreator: t.props.targetUser.displayName
                            }, "ClipsModalBanUser")) : r.createElement(s.V, null, Object(a.d)("{clipCreator} will be permanently banned from creating clips and chatting in your channel.", {
                                clipCreator: t.props.targetUser.displayName
                            }, "ClipsModalBanUser"))
                        }, t.renderButtonText = function() {
                            return t.props.isTemporary ? Object(a.d)("Timeout User", "ClipsModalBanUser") : Object(a.d)("Ban User", "ClipsModalBanUser")
                        }, t.renderSuccess = function() {
                            return t.state.hasSucceeded ? Object(a.d)("Success!", "ClipsModalBanUser") : null
                        }, t.renderFailure = function() {
                            return t.state.hasErrored ? t.props.isTemporary ? Object(a.d)("There was a problem timing out this clip creator", "ClipsModalBanUser") : Object(a.d)("There was a problem banning this clip creator", "ClipsModalBanUser") : null
                        }, t.banUser = function() {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var e, t;
                                return i.__generator(this, function(n) {
                                    switch (n.label) {
                                        case 0:
                                            this.setState({
                                                isLoading: !0,
                                                hasSucceeded: !1,
                                                hasErrored: !1
                                            }), e = this.props.targetUser.login, t = this.props.isTemporary ? this.props.banUserMutation(e, p) : this.props.banUserMutation(e), n.label = 1;
                                        case 1:
                                            return n.trys.push([1, 3, , 4]), [4, t];
                                        case 2:
                                            return n.sent().banUserFromChatRoom.error ? this.setState({
                                                hasErrored: !0,
                                                isLoading: !1
                                            }) : this.setState({
                                                hasSucceeded: !0,
                                                isLoading: !1
                                            }), [3, 4];
                                        case 3:
                                            return n.sent(), this.setState({
                                                hasErrored: !0,
                                                isLoading: !1
                                            }), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        return r.createElement(c, {
                            onSubmit: this.banUser,
                            onClose: this.props.onClose,
                            title: this.renderTitle(),
                            body: this.renderBodyText(),
                            buttonContent: this.renderButtonText(),
                            buttonType: s.F.Alert,
                            submitDisabled: this.state.isLoading || this.state.hasSucceeded,
                            successContent: this.renderSuccess(),
                            errorContent: this.renderFailure(),
                            isLoading: this.state.isLoading
                        })
                    }, t
                }(r.Component),
                h = Object(u.c)("ClipsModalBanUser")(Object(d.b)(function(e) {
                    return {
                        channelID: e.broadcasterID
                    }
                })(m)),
                f = n("yR8l"),
                g = n("vUXZ");

            function v(e) {
                return Object(f.a)(g, e)
            }
            var b = n("DJtx"),
                k = (n("n9Ey"), {
                    isLoading: !1,
                    hasErrored: !1,
                    hasSucceeded: !1
                }),
                y = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.onDeleteClick = function() {
                            return i.__awaiter(n, void 0, void 0, function() {
                                return i.__generator(this, function(e) {
                                    switch (e.label) {
                                        case 0:
                                            this.setState({
                                                isLoading: !0,
                                                hasSucceeded: !1,
                                                hasErrored: !1
                                            }), e.label = 1;
                                        case 1:
                                            return e.trys.push([1, 3, , 4]), this.props.data.clip ? [4, this.props.deleteClip(this.props.slug)] : [2];
                                        case 2:
                                            return e.sent(), this.setState({
                                                isLoading: !1,
                                                hasSucceeded: !0
                                            }), [3, 4];
                                        case 3:
                                            return e.sent(), this.setState({
                                                isLoading: !1,
                                                hasErrored: !0
                                            }), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, n.state = k, n
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = [r.createElement(s.V, {
                            key: "title",
                            type: s.Nb.H4
                        }, Object(a.d)("Delete This Clip", "ClipsModalDelete")), r.createElement(s.Va, {
                            key: "message",
                            margin: {
                                top: 1
                            }
                        }, r.createElement(s.V, {
                            type: s.Nb.P,
                            color: s.O.Alt2
                        }, Object(a.d)("This clip will be permanently deleted.", "ClipsModalDelete")))];
                        if (!this.props.data.clip) return null;
                        var t = null;
                        this.props.data.clip.curator && (t = r.createElement("span", null, " • ", Object(a.d)("Clipped by {curator}", {
                            curator: this.props.data.clip.curator.login
                        }, "ClipsModalDelete")));
                        var n = r.createElement(s.xb, {
                            display: s.W.Flex,
                            flexWrap: s.Z.NoWrap
                        }, r.createElement(s.Va, {
                            className: "clips-modal-delete__thumb",
                            margin: {
                                right: 1
                            }
                        }, r.createElement(s.o, {
                            ratio: s.p.Aspect16x9
                        }, r.createElement("img", {
                            src: this.props.data.clip.thumbnailURL
                        }))), r.createElement(s.Va, null, r.createElement(s.V, {
                            type: s.Nb.H5
                        }, this.props.data.clip.title), r.createElement(s.V, {
                            color: s.O.Alt2
                        }, Object(a.d)("{created, date, medium}", {
                            created: new Date(this.props.data.clip.createdAt)
                        }, "ClipsModalDelete"), t), r.createElement(s.V, {
                            color: s.O.Alt2
                        }, Object(a.d)("{viewCount, number} views", {
                            viewCount: this.props.data.clip.viewCount
                        }, "ClipsModalDelete"))));
                        return r.createElement(c, {
                            onSubmit: this.onDeleteClick,
                            onClose: this.props.onClose,
                            title: e,
                            body: n,
                            buttonContent: Object(a.d)("Delete", "ClipsModalDelete"),
                            buttonType: s.F.Alert,
                            submitDisabled: this.state.hasSucceeded || this.state.isLoading,
                            successContent: this.state.hasSucceeded ? Object(a.d)("Success!", "ClipsModalDelete") : null,
                            errorContent: this.state.hasErrored ? Object(a.d)("There was a problem deleting this clip.", "ClipsModalDelete") : null,
                            isLoading: this.state.isLoading
                        })
                    }, t
                }(r.Component),
                S = Object(f.a)(b)(v({
                    props: function(e) {
                        return {
                            deleteClip: function(t) {
                                return i.__awaiter(void 0, void 0, void 0, function() {
                                    var n;
                                    return i.__generator(this, function(i) {
                                        switch (i.label) {
                                            case 0:
                                                return i.trys.push([0, 2, , 3]), [4, e.mutate({
                                                    variables: {
                                                        input: {
                                                            slugs: [t]
                                                        }
                                                    }
                                                })];
                                            case 1:
                                                return i.sent(), e.ownProps.onDelete && e.ownProps.onDelete(t), [3, 3];
                                            case 2:
                                                throw n = i.sent(), a.j.error(n, "Failed to delete clip"), n;
                                            case 3:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })(y)),
                C = n("oJmH"),
                E = n("Vsf8"),
                _ = {
                    isLoading: !1,
                    hasErrored: !1,
                    hasSucceeded: !1
                },
                w = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.deleteAll = function() {
                            return i.__awaiter(n, void 0, void 0, function() {
                                return i.__generator(this, function(e) {
                                    switch (e.label) {
                                        case 0:
                                            this.setState({
                                                isLoading: !0,
                                                hasSucceeded: !1,
                                                hasErrored: !1
                                            }), e.label = 1;
                                        case 1:
                                            return e.trys.push([1, 3, , 4]), [4, this.props.deleteAllClips(this.props.broadcastID, this.props.videoID)];
                                        case 2:
                                            return e.sent(), this.setState({
                                                isLoading: !1,
                                                hasSucceeded: !0
                                            }), [3, 4];
                                        case 3:
                                            return e.sent(), this.setState({
                                                isLoading: !1,
                                                hasErrored: !0
                                            }), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, n.renderSuccess = function() {
                            return n.state.hasSucceeded ? Object(a.d)("A request has been made to delete the clip. Please wait a few minutes for this to take effect.", "ClipsModalDeleteAll") : null
                        }, n.renderFailure = function() {
                            return n.state.hasErrored ? Object(a.d)("There was a problem deleting this clip.", "ClipsModalDeleteAll") : null
                        }, n.state = _, n
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        var e = r.createElement(s.V, {
                            type: s.Nb.P
                        }, Object(a.d)("This clip and all other clips created from the same video will be permanently deleted.", "ClipsModalDeleteAll"));
                        return r.createElement(c, {
                            onSubmit: this.deleteAll,
                            onClose: this.props.onClose,
                            title: r.createElement(s.V, {
                                type: s.Nb.H4
                            }, Object(a.d)("Delete All Clips from Related Video", "ClipsModalDeleteAll")),
                            body: e,
                            buttonContent: Object(a.d)("Delete", "ClipsModalDeleteAll"),
                            buttonType: s.F.Alert,
                            submitDisabled: this.state.isLoading || this.state.hasSucceeded || "" === this.props.broadcastID,
                            isLoading: this.state.isLoading,
                            successContent: this.renderSuccess(),
                            errorContent: this.renderFailure()
                        })
                    }, t
                }(r.Component),
                T = Object(C.compose)(Object(u.c)("ClipsModalDeleteAll"), v({
                    props: function(e) {
                        return {
                            deleteAllClips: function(t, n) {
                                return i.__awaiter(void 0, void 0, void 0, function() {
                                    var r, o, s;
                                    return i.__generator(this, function(i) {
                                        switch (i.label) {
                                            case 0:
                                                return i.trys.push([0, 6, , 7]), r = void 0, n ? [4, e.mutate({
                                                    variables: {
                                                        input: {
                                                            videoID: n
                                                        }
                                                    }
                                                })] : [3, 2];
                                            case 1:
                                                return o = i.sent(), r = o.data, [3, 5];
                                            case 2:
                                                return t ? [4, e.mutate({
                                                    variables: {
                                                        input: {
                                                            broadcastID: t
                                                        }
                                                    }
                                                })] : [3, 4];
                                            case 3:
                                                return o = i.sent(), r = o.data, [3, 5];
                                            case 4:
                                                throw new Error("Invalid broadcastID specified for deleteAllClips");
                                            case 5:
                                                return e.ownProps.onDeleteAll && e.ownProps.onDeleteAll(r.deleteClips.clips), [3, 7];
                                            case 6:
                                                throw s = i.sent(), a.j.error(s, "Failed to delete clips from VOD"), s;
                                            case 7:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                }), Object(f.a)(E, {
                    props: function(e) {
                        var t = e.data.clip;
                        return t ? {
                            videoID: t.video ? t.video.id : null,
                            broadcastID: t.broadcast.id
                        } : {
                            videoID: null,
                            broadcastID: ""
                        }
                    },
                    options: function(e) {
                        return {
                            variables: {
                                slug: e.slug
                            }
                        }
                    }
                }))(w),
                O = {
                    isLoading: !1,
                    hasErrored: !1,
                    hasSucceeded: !1
                },
                N = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.renderSuccess = function() {
                            return n.state.hasSucceeded ? Object(a.d)("Clips successfully deleted.", "ClipsModalBatchDelete") : null
                        }, n.renderError = function() {
                            return n.state.hasErrored ? Object(a.d)("There was a problem deleting this clip.", "ClipsModalBatchDelete") : null
                        }, n.onDeleteClick = function() {
                            return i.__awaiter(n, void 0, void 0, function() {
                                return i.__generator(this, function(e) {
                                    switch (e.label) {
                                        case 0:
                                            this.setState({
                                                isLoading: !0,
                                                hasSucceeded: !1,
                                                hasErrored: !1
                                            }), e.label = 1;
                                        case 1:
                                            return e.trys.push([1, 3, , 4]), [4, this.props.deleteClips()];
                                        case 2:
                                            return e.sent(), this.setState({
                                                hasSucceeded: !0,
                                                isLoading: !1
                                            }), [3, 4];
                                        case 3:
                                            return e.sent(), this.setState({
                                                hasErrored: !0,
                                                isLoading: !1
                                            }), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, n.state = O, n
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = r.createElement(s.V, {
                                type: s.Nb.H4
                            }, Object(a.d)("Delete these clips?", "ClipsModalBatchDelete")),
                            t = r.createElement(s.V, {
                                type: s.Nb.P
                            }, Object(a.d)("These clips will be permanently deleted. Are you sure?", "ClipsModalBatchDelete"));
                        return r.createElement(c, {
                            onSubmit: this.onDeleteClick,
                            onClose: this.props.onClose,
                            title: e,
                            body: t,
                            buttonContent: Object(a.d)("Delete", "ClipsModalBatchDelete"),
                            buttonType: s.F.Alert,
                            submitDisabled: this.state.hasSucceeded || this.state.isLoading,
                            isLoading: this.state.isLoading,
                            successContent: this.renderSuccess(),
                            errorContent: this.renderError()
                        })
                    }, t
                }(r.Component),
                I = v({
                    props: function(e) {
                        return {
                            deleteClips: function() {
                                return i.__awaiter(void 0, void 0, void 0, function() {
                                    var t;
                                    return i.__generator(this, function(n) {
                                        switch (n.label) {
                                            case 0:
                                                return n.trys.push([0, 2, , 3]), [4, e.mutate({
                                                    variables: {
                                                        input: {
                                                            slugs: e.ownProps.clipSlugs
                                                        }
                                                    }
                                                })];
                                            case 1:
                                                return n.sent(), e.ownProps.onBatchDelete && e.ownProps.onBatchDelete(), [3, 3];
                                            case 2:
                                                throw t = n.sent(), a.j.error(t, "Failed to delete clips"), t;
                                            case 3:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })(N);
            n.d(t, "a", function() {
                return c
            }), n.d(t, "b", function() {
                return h
            }), n.d(t, "d", function() {
                return S
            }), n.d(t, "e", function() {
                return T
            }), n.d(t, "c", function() {
                return I
            })
        },
        jtyt: function(e, t, n) {
            "use strict";
            var i, r;
            n.d(t, "b", function() {
                    return i
                }), n.d(t, "a", function() {
                    return r
                }),
                function(e) {
                    e[e.Unspecified = 0] = "Unspecified", e[e.NotInterested = 1] = "NotInterested", e[e.AlreadyWatched = 3] = "AlreadyWatched", e[e.Other = 4] = "Other"
                }(i || (i = {})),
                function(e) {
                    e[e.Channel = 1] = "Channel", e[e.Category = 2] = "Category", e[e.Shelf = 3] = "Shelf", e[e.Vod = 4] = "Vod"
                }(r || (r = {}))
        },
        k960: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "feedUser"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "User"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "displayName"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "profileImageURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "width"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "70"
                                }
                            }],
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 76
                }
            };
            n.loc.source = {
                body: "fragment feedUser on User {\nid\ndisplayName\nlogin\nprofileImageURL(width:70)\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        kDHn: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "FrontPageNew_User"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "limit"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Int"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "createdAt"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "followedGames"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "first"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "limit"
                                            }
                                        }
                                    }],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "nodes"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 115
                }
            };
            n.loc.source = {
                body: "query FrontPageNew_User($limit: Int) {\ncurrentUser {\nid\ncreatedAt\nfollowedGames(first: $limit) {\nnodes {\nid\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "kF1+": function(e, t, n) {},
        kSkr: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "BlockUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "BlockUserInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "blockUser"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "targetUser"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 94
                }
            };
            n.loc.source = {
                body: "mutation BlockUser($input: BlockUserInput!) {\nblockUser(input: $input) {\ntargetUser {\nid\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        kVMo: function(e, t, n) {},
        kW4h: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "FeaturedContentCarouselStreams"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "language"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "first"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Int"
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "acceptedMature"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "featuredStreams"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "language"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "language"
                                    }
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "first"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    }
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "acceptedMature"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "acceptedMature"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "imageURL"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "isScheduled"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "isSponsored"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "priorityLevel"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "broadcaster"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "displayName"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "profileImageURL"
                                                    },
                                                    arguments: [{
                                                        kind: "Argument",
                                                        name: {
                                                            kind: "Name",
                                                            value: "width"
                                                        },
                                                        value: {
                                                            kind: "IntValue",
                                                            value: "150"
                                                        }
                                                    }],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "login"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "game"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "name"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "type"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "viewersCount"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "previewImageURL"
                                            },
                                            arguments: [{
                                                kind: "Argument",
                                                name: {
                                                    kind: "Name",
                                                    value: "width"
                                                },
                                                value: {
                                                    kind: "IntValue",
                                                    value: "320"
                                                }
                                            }, {
                                                kind: "Argument",
                                                name: {
                                                    kind: "Name",
                                                    value: "height"
                                                },
                                                value: {
                                                    kind: "IntValue",
                                                    value: "180"
                                                }
                                            }],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "title"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 390
                }
            };
            n.loc.source = {
                body: "query FeaturedContentCarouselStreams($language: String $first: Int $acceptedMature: Boolean) {\nfeaturedStreams(language: $language first: $first acceptedMature: $acceptedMature) {\nimageURL\nisScheduled\nisSponsored\npriorityLevel\nstream {\nbroadcaster {\ndisplayName\nid\nprofileImageURL(width: 150)\nlogin\n}\ngame {\nid\nname\n}\nid\ntype\nviewersCount\npreviewImageURL(width: 320 height: 180)\n}\ntitle\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        lRiI: function(e, t, n) {},
        lZdE: function(e, t, n) {
            "use strict";

            function i(e) {
                return e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")
            }
            n.d(t, "a", function() {
                return i
            })
        },
        m493: function(e, t, n) {},
        mhEZ: function(e, t, n) {},
        mmRu: function(e, t, n) {
            "use strict";
            var i = n("/MKj"),
                r = n("mrSG"),
                a = n("q1tI"),
                o = n("u5aL"),
                s = n("/7QA"),
                l = n("Ue10"),
                c = function(e) {
                    return a.createElement(l.A, {
                        icon: l.nb.Emoticons,
                        ariaLabel: Object(s.d)("Emote picker", "EmotePickerButton"),
                        type: l.C.Secondary,
                        onClick: e.onClick,
                        "data-a-target": "emote-picker-button"
                    })
                },
                d = n("0D4T"),
                u = n("GnwI"),
                p = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            hasInteracted: !1,
                            isEmotePickerMenuVisible: !1,
                            isEmotePickerButtonVisible: !1
                        }, t.onClickOut = function() {
                            t.setState({
                                isEmotePickerMenuVisible: !1
                            })
                        }, t.onClickEmote = function(e, n) {
                            t.props.onClickEmote && t.props.onClickEmote(e, n)
                        }, t.toggleEmotePicker = function() {
                            t.setState(function(e) {
                                return {
                                    isEmotePickerMenuVisible: !e.isEmotePickerMenuVisible
                                }
                            })
                        }, t.onEmotePickerDataLoaded = function(e) {
                            e && t.setState({
                                isEmotePickerButtonVisible: !0
                            })
                        }, t.onInteraction = function() {
                            return t.setState({
                                hasInteracted: !0
                            })
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive(), this.props.inputRef && (this.props.inputRef.addEventListener("mouseenter", this.onInteraction), this.props.inputRef.addEventListener("focus", this.onInteraction))
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.inputRef && (this.props.inputRef.removeEventListener("mouseenter", this.onInteraction), this.props.inputRef.removeEventListener("focus", this.onInteraction))
                    }, t.prototype.render = function() {
                        var e = null;
                        this.state.isEmotePickerButtonVisible && (e = a.createElement(c, {
                            onClick: this.toggleEmotePicker
                        }));
                        var t = null;
                        this.hasInteractedOrPageload && (t = a.createElement(d.a, {
                            channelOwnerID: this.props.channelOwnerID,
                            emotePickerSource: this.props.emotePickerSource,
                            onClickEmote: this.onClickEmote,
                            onLoad: this.onEmotePickerDataLoaded,
                            toggleVisibility: this.toggleEmotePicker,
                            visible: this.state.isEmotePickerMenuVisible,
                            direction: this.props.direction
                        }));
                        var n = a.createElement(l.Va, r.__assign({
                            className: "emote-picker-and-button"
                        }, this.layoutProps), e, t);
                        return this.props.shouldCloseOnClickOut ? a.createElement(o.a, {
                            onClickOut: this.onClickOut
                        }, n) : n
                    }, Object.defineProperty(t.prototype, "hasInteractedOrPageload", {
                        get: function() {
                            return !(!this.props.firstPageLoaded && !this.state.hasInteracted)
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(t.prototype, "layoutProps", {
                        get: function() {
                            var e = {
                                attachTop: !!this.props.attachTop,
                                attachRight: !!this.props.attachRight,
                                attachBottom: !!this.props.attachBottom,
                                attachLeft: !!this.props.attachLeft,
                                padding: this.props.padding
                            };
                            return this.props.position && (e.position = this.props.position), e
                        },
                        enumerable: !0,
                        configurable: !0
                    }), t
                }(a.Component),
                m = Object(u.c)("EmotePicker")(p);
            var h = Object(i.connect)(function(e) {
                    return {
                        firstPageLoaded: e.session.firstPageLoaded
                    }
                })(m),
                f = n("cpJf");
            n.d(t, "a", function() {
                return h
            }), n.d(t, "c", function() {
                return d.a
            }), n.d(t, !1, function() {
                return f.a
            }), n.d(t, !1, function() {
                return f.d
            }), n.d(t, !1, function() {
                return f.c
            }), n.d(t, !1, function() {
                return f.b
            }), n.d(t, "b", function() {
                return c
            })
        },
        mz1O: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            }), n.d(t, "b", function() {
                return a
            }), n.d(t, "c", function() {
                return o
            }), n.d(t, "d", function() {
                return s
            }), n.d(t, "e", function() {
                return l
            }), n.d(t, "f", function() {
                return c
            });
            var i = n("mrSG"),
                r = function() {
                    return i.__awaiter(void 0, void 0, void 0, function() {
                        return i.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return [4, n.e(172).then(function() {
                                        var e = n("vrl6");
                                        return Object.assign({}, e, {
                                            default: e
                                        })
                                    })];
                                case 1:
                                    return [2, e.sent().items]
                            }
                        })
                    })
                },
                a = function() {
                    return i.__awaiter(void 0, void 0, void 0, function() {
                        return i.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return [4, n.e(171).then(function() {
                                        var e = n("+4ZJ");
                                        return Object.assign({}, e, {
                                            default: e
                                        })
                                    })];
                                case 1:
                                    return [2, e.sent().items]
                            }
                        })
                    })
                },
                o = function() {
                    return i.__awaiter(void 0, void 0, void 0, function() {
                        return i.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return [4, n.e(170).then(function() {
                                        var e = n("nSs0");
                                        return Object.assign({}, e, {
                                            default: e
                                        })
                                    })];
                                case 1:
                                    return [2, e.sent().items]
                            }
                        })
                    })
                },
                s = function() {
                    return i.__awaiter(void 0, void 0, void 0, function() {
                        return i.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return [4, n.e(169).then(function() {
                                        var e = n("1Bro");
                                        return Object.assign({}, e, {
                                            default: e
                                        })
                                    })];
                                case 1:
                                    return [2, e.sent().items]
                            }
                        })
                    })
                },
                l = function() {
                    return i.__awaiter(void 0, void 0, void 0, function() {
                        return i.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return [4, n.e(168).then(function() {
                                        var e = n("Dpq/");
                                        return Object.assign({}, e, {
                                            default: e
                                        })
                                    })];
                                case 1:
                                    return [2, e.sent().items]
                            }
                        })
                    })
                },
                c = function() {
                    return i.__awaiter(void 0, void 0, void 0, function() {
                        return i.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return [4, n.e(167).then(function() {
                                        var e = n("bVYI");
                                        return Object.assign({}, e, {
                                            default: e
                                        })
                                    })];
                                case 1:
                                    return [2, e.sent().items]
                            }
                        })
                    })
                }
        },
        "n/Dx": function(e, t, n) {},
        n9Ey: function(e, t, n) {},
        nt5g: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "RoleRestricted"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "contentOwnerLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "roles"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isStaff"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "contentOwnerLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isEditor"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 147
                }
            };
            n.loc.source = {
                body: "query RoleRestricted($contentOwnerLogin: String!) {\ncurrentUser {\nid\nroles {\nisStaff\n}\n}\nuser(login: $contentOwnerLogin) {\nid\nself {\nisEditor\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        oJov: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA"),
                o = n("Ue10"),
                s = (n("1mcJ"), function(e) {
                    return r.createElement(o.Va, i.__assign({
                        className: "drops-badge",
                        position: o.db.Absolute,
                        attachTop: !0,
                        attachRight: !0
                    }, Object(o.bc)(e)), r.createElement(o.Qb, {
                        direction: o.Sb.Top,
                        align: o.Rb.Right,
                        label: Object(a.d)("Offers in-game Drops", "DropsBadge")
                    }, r.createElement(o.xb, {
                        className: "drops-badge__drops-icon",
                        position: o.db.Relative,
                        padding: {
                            top: .5,
                            right: .5,
                            bottom: 3,
                            left: 3
                        },
                        overflow: o.Ya.Hidden,
                        color: o.O.Overlay,
                        zIndex: o.ac.Default
                    }, r.createElement(o.T, {
                        type: o.U.Inherit,
                        hoverColorInherit: !0,
                        to: "https://help.twitch.tv/customer/en/portal/articles/2754380-how-to-earn-drops"
                    }, r.createElement(o.mb, {
                        asset: o.nb.Drops
                    })))))
                }),
                l = n("0LAi"),
                c = n("fVj5"),
                d = function(e) {
                    return r.createElement(o.Va, null, r.createElement(o.y, i.__assign({}, e)), Object(c.a)() && e.tagListProps && 0 !== e.tagListProps.tags.length && r.createElement(o.Va, {
                        margin: {
                            top: .5
                        }
                    }, r.createElement(l.a, i.__assign({}, e.tagListProps, {
                        tagNumberLimit: 3
                    }))), !0 === e.showDropsBadge && r.createElement(s, null))
                };
            n.d(t, "a", function() {
                return d
            })
        },
        oTxG: function(e, t, n) {},
        oe5X: function(e, t, n) {
            "use strict";
            var i = n("XmgI"),
                r = n("RcPG"),
                a = n("0FG4"),
                o = n("i6WW"),
                s = n("gTu3"),
                l = n("6j5V"),
                c = /^(['"*([{</]*)@((?:[^\u0000-\u007F]|[\w-])+)/;

            function d(e, t) {
                if (!t) return !1;
                var n = t.displayName,
                    i = t.login;
                return e === n || e.toLowerCase() === i
            }

            function u(e, t) {
                void 0 === t && (t = {});
                var n = t.cheers,
                    u = t.emotes,
                    f = t.links,
                    g = t.mentions,
                    v = m(e),
                    b = "",
                    k = 0;
                return p(v.reduce(function(e, t, p) {
                    if (h(t)) return b = "", e;
                    if (0 === b.length && (k = p), b += t, p !== v.length - 1 && !h(v[p + 1])) return e;
                    var m = u && Object(a.c)(b, k, u);
                    if (m) return e.concat(m);
                    var y = n && Object(i.d)(b, n);
                    if (y) return e.concat(y);
                    var S = f && Object(o.a)(b, f);
                    if (S) return e.concat(S);
                    var C = g && function(e, t) {
                        var n = e.match(c);
                        if (!n) return d(e, t.sessionUser) ? [{
                            type: r.a.CurrentUserHighlight,
                            content: e
                        }] : null;
                        var i = [],
                            a = n[1],
                            o = n[2],
                            u = e.slice(n[0].length);
                        a.length && i.push(Object(l.a)(a));
                        var p = s.a.Default;
                        return d(o, t.sessionUser) ? p = s.a.Recipient : t.sessionUser && t.sessionUser.login === t.senderLogin && (p = s.a.Sender), i.push({
                            type: r.a.Mention,
                            content: {
                                recipient: o,
                                currentUserMentionRelation: p
                            }
                        }), u.length && i.push(Object(l.a)(u)), i
                    }(b, g);
                    return C ? e.concat([C]) : e.concat(Object(l.a)(b))
                }, []))
            }

            function p(e) {
                return e.reduce(function(e, t, n) {
                    return 0 === n ? [].concat.call(e, t) : [].concat.call(e, Object(l.a)(" "), t)
                }, []).reduce(function(e, t, n) {
                    if (0 === n) return e.concat(t);
                    var i = e[e.length - 1];
                    return t.type === r.a.Text && i.type === r.a.Text ? (i.content = "" + i.content + t.content, e) : e.concat(t)
                }, [])
            }

            function m(e) {
                return e.match(/[^\uD800-\uDFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDFFF]/g) || []
            }

            function h(e) {
                return /\s/.test(e)
            }
            n.d(t, "a", function() {
                return u
            }), n.d(t, !1, function() {
                return p
            }), n.d(t, !1, function() {
                return m
            })
        },
        p52R: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }),
                function(e) {
                    e.Admin = "admin", e.GlobalMod = "global_mod", e.Moderator = "mod", e.Owner = "owner", e.Staff = "staff", e.Subscriber = "subscriber", e.User = ""
                }(i || (i = {}))
        },
        "pR+Y": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "FeaturedStreams"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "language"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "first"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Int"
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "acceptedMature"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "featuredStreams"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "language"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "language"
                                    }
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "first"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    }
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "acceptedMature"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "acceptedMature"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "description"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "imageURL"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "isScheduled"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "isSponsored"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "priorityLevel"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "broadcaster"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "displayName"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "profileImageURL"
                                                    },
                                                    arguments: [{
                                                        kind: "Argument",
                                                        name: {
                                                            kind: "Name",
                                                            value: "width"
                                                        },
                                                        value: {
                                                            kind: "IntValue",
                                                            value: "150"
                                                        }
                                                    }],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "login"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "game"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "name"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "type"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "viewersCount"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "title"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 347
                }
            };
            n.loc.source = {
                body: "query FeaturedStreams($language: String $first: Int $acceptedMature: Boolean) {\nfeaturedStreams(language: $language first: $first acceptedMature: $acceptedMature) {\ndescription\nimageURL\nisScheduled\nisSponsored\npriorityLevel\nstream {\nbroadcaster {\ndisplayName\nid\nprofileImageURL(width: 150)\nlogin\n}\ngame {\nid\nname\n}\nid\ntype\nviewersCount\n}\ntitle\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        poSz: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "feedItemVideo"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Video"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "description"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "game"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "lengthSeconds"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "owner"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "feedUser"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "previewThumbnailURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "width"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "480"
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "height"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "272"
                                }
                            }],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "publishedAt"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "reactions"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "emote"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "token"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "setID"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "count"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "hasReacted"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "title"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "videoViewCount"
                            },
                            name: {
                                kind: "Name",
                                value: "viewCount"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 316
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/feed/models/user-fragment.gql"\nfragment feedItemVideo on Video {\nid\ndescription\ngame {\nid\nname\n}\nlengthSeconds\nowner {\n...feedUser\n}\npreviewThumbnailURL(width: 480 height: 272)\npublishedAt\nreactions {\nemote {\nid\ntoken\nsetID\n}\ncount\nself {\nhasReacted\n}\n}\ntitle\nvideoViewCount: viewCount #\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("k960").definitions)), e.exports = i
        },
        "qH6+": function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "feedItemPost"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Post"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "createdAt"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "body"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "content"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "emotes"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "embeddedEmote"
                                            },
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "reactions"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "emote"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "token"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "setID"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "count"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "hasReacted"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "embeds"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "feedItemClip"
                                    },
                                    directives: []
                                }, {
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "feedItemVideo"
                                    },
                                    directives: []
                                }, {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                        kind: "NamedType",
                                        name: {
                                            kind: "Name",
                                            value: "PhotoOEmbed"
                                        }
                                    },
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "title"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "inputURL"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "providerName"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "authorName"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "thumbnail"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "url"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                        kind: "NamedType",
                                        name: {
                                            kind: "Name",
                                            value: "VideoOEmbed"
                                        }
                                    },
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "title"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "inputURL"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "providerName"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "authorName"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "thumbnail"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "url"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "html"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "author"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "feedUser"
                                    },
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 631
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/chat/models/embedded-emote-fragment.gql"\n#import "twilight/features/feed/models/clip-fragment.gql"\n#import "twilight/features/feed/models/user-fragment.gql"\n#import "twilight/features/feed/models/video-fragment.gql"\nfragment feedItemPost on Post {\nid\ncreatedAt\nbody {\ncontent\nemotes {\n...embeddedEmote\n}\n}\nreactions {\nemote {\nid\ntoken\nsetID\n}\ncount\nself {\nhasReacted\n}\n}\nembeds {\n...feedItemClip\n...feedItemVideo\n... on PhotoOEmbed {\ntitle\ninputURL\nproviderName\nauthorName\nthumbnail {\nurl\n}\n}\n... on VideoOEmbed {\ntitle\ninputURL\nproviderName\nauthorName\nthumbnail {\nurl\n}\nhtml\n}\n}\nauthor {\n...feedUser\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};

            function a(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }
            i.definitions = i.definitions.concat(a(n("if/Q").definitions)), i.definitions = i.definitions.concat(a(n("H4B0").definitions)), i.definitions = i.definitions.concat(a(n("k960").definitions)), i.definitions = i.definitions.concat(a(n("poSz").definitions)), e.exports = i
        },
        r62z: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            }), n.d(t, "c", function() {
                return c
            }), n.d(t, "b", function() {
                return d
            }), n.d(t, "d", function() {
                return u
            });
            var i = n("+GjP"),
                r = "https://www.facebook.com/sharer/sharer.php",
                a = "https://www.twitter.com/share",
                o = "https://www.reddit.com/submit",
                s = "https://vk.com/share.php";

            function l(e) {
                return Object(i.e)(r, {
                    u: e
                })
            }

            function c(e, t) {
                return Object(i.e)(a, {
                    url: e,
                    text: t
                })
            }

            function d(e, t) {
                return Object(i.e)(o, {
                    url: e,
                    title: t
                })
            }

            function u(e) {
                return Object(i.e)(s, {
                    url: e
                })
            }
        },
        s8Ou: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "ReportUserModal_ReportUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ReportContentInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "reportContent"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "contentID"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 111
                }
            };
            n.loc.source = {
                body: "mutation ReportUserModal_ReportUser($input: ReportContentInput!) {\nreportContent(input: $input) {\ncontentID\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        uX80: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return c
            });
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("fvjX"),
                o = n("GnwI"),
                s = n("Ue10"),
                l = (n("TVuH"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.selectOnFocus = function(e) {
                            e.currentTarget.select(), t.props.onSelection && t.props.onSelection()
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        return r.createElement(s.Va, i.__assign({
                            position: s.db.Relative,
                            className: "selectable-input-wrapper"
                        }, Object(s.bc)(this.props)), r.createElement(s.Pa, {
                            type: s.Ra.Text,
                            value: this.props.text,
                            readOnly: !0,
                            onFocus: this.selectOnFocus,
                            icon: this.props.iconAsset,
                            id: this.props.id
                        }), this.props.children)
                    }, t
                }(r.Component)),
                c = Object(a.compose)(Object(o.c)("SelectableInput"))(l)
        },
        v8tf: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ClipsDownloadButton"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "slug"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "clip"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "slug"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcaster"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "game"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "videoQualities"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "sourceURL"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 131
                }
            };
            n.loc.source = {
                body: "query ClipsDownloadButton($slug: ID!) {\nclip(slug: $slug) {\nid\nbroadcaster {\nid\n}\ngame {\nid\nname\n}\nvideoQualities {\nsourceURL\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        vDRX: function(e, t, n) {},
        vP7P: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("GnwI"),
                o = n("eFQ3"),
                s = n("Ue10"),
                l = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onChannelStatus = function() {}, t.onWheelPostMessage = function(e) {
                            if (t.postMessageIsWheelEvent(e) && t.componentEl) {
                                var n = e.data.args[0].data,
                                    r = new WheelEvent("wheel", i.__assign({
                                        bubbles: !0
                                    }, n));
                                t.componentEl.dispatchEvent(r)
                            }
                        }, t.setComponentRef = function(e) {
                            t.componentEl = e
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive(), window.addEventListener("message", this.onWheelPostMessage)
                    }, t.prototype.componentWillUnmount = function() {
                        window.removeEventListener("message", this.onWheelPostMessage)
                    }, t.prototype.render = function() {
                        return r.createElement("div", {
                            ref: this.setComponentRef
                        }, r.createElement(s.o, {
                            ratio: s.p.Aspect16x9
                        }, this.getVideoEmbedComponent()))
                    }, t.prototype.getVideoEmbedComponent = function() {
                        var e = this.props,
                            t = e.channelLogin,
                            n = e.vodID,
                            a = e.embedURL,
                            l = e.playerTypeOverride,
                            c = {
                                disableTheatreButton: !0,
                                onChannelStatus: this.onChannelStatus,
                                playerTypeOverride: l || o.a.Frontpage
                            };
                        return a ? r.createElement("iframe", {
                            src: a,
                            width: "100%",
                            height: "100%",
                            allowFullScreen: !0
                        }) : t ? r.createElement(o.b, i.__assign({
                            channelLogin: t
                        }, c)) : n ? r.createElement(o.b, i.__assign({
                            vodID: n
                        }, c)) : r.createElement(s.Va, null)
                    }, t.prototype.postMessageIsWheelEvent = function(e) {
                        return "player.embed.client" === e.data.namespace && "bridgeplayereventwithpayload" === e.data.method && e.data.args.length > 0 && "wheel" === e.data.args[0].event
                    }, t = i.__decorate([Object(a.c)("EmbedVideoPlayer")], t)
                }(r.Component);
            n.d(t, !1, function() {
                return "player.embed.client"
            }), n.d(t, !1, function() {
                return "bridgeplayereventwithpayload"
            }), n.d(t, "a", function() {
                return l
            })
        },
        vUXZ: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Clips_DeleteClips"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "DeleteClipsInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "deleteClips"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "clips"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "slug"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 106
                }
            };
            n.loc.source = {
                body: "mutation Clips_DeleteClips($input: DeleteClipsInput!) {\ndeleteClips(input: $input) {\nclips {\nid\nslug\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        vhpE: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return m
            }), n.d(t, "a", function() {
                return h
            });
            var i, r = n("mrSG"),
                a = n("q1tI"),
                o = n("wbMx"),
                s = n("+GjP"),
                l = n("2xye"),
                c = n("MLDe"),
                d = n("McYG"),
                u = n("4L7N"),
                p = n("Ue10"),
                m = [{
                    type: o.b.Twitter,
                    params: {
                        tt_medium: "twtr"
                    }
                }, {
                    type: o.b.Facebook,
                    params: {
                        tt_medium: "fb"
                    }
                }, {
                    type: o.b.Reddit,
                    params: {
                        tt_medium: "redt"
                    }
                }, {
                    type: o.b.Copy
                }];
            ! function(e) {
                e.MainContainer = "main-container", e.DownloadButtonContainer = "download-button-container", e.ShareButtonTwitter = "share-button-twitter", e.ShareButtonFacebook = "share-button-facebook", e.ShareButtonReddit = "share-button-reddit", e.ShareButtonCopy = "share-button-copy"
            }(i || (i = {}));
            var h = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    var e = {
                            margin: {
                                right: 1
                            }
                        },
                        t = {};
                    return this.props.asBalloon && (t = {
                        justifyContent: p.Ua.Between
                    }, e = {}), a.createElement(p.Va, r.__assign({
                        className: "clips-social-share",
                        display: p.W.Flex,
                        flexWrap: p.Z.NoWrap
                    }, t, {
                        "data-test-selector": i.MainContainer
                    }), a.createElement(p.Va, r.__assign({
                        display: p.W.InlineBlock
                    }, e, {
                        "data-test-selector": i.DownloadButtonContainer
                    }), a.createElement(u.a, {
                        broadcasterLogin: this.props.clip.broadcaster && this.props.clip.broadcaster.login || "",
                        broadcasterId: this.props.clip.broadcaster && this.props.clip.broadcaster.id || "",
                        slug: this.props.clip.slug,
                        pageType: this.props.pageType
                    })), this.renderSocialButton(e, i.ShareButtonTwitter, o.b.Twitter, {
                        tt_medium: "twtr"
                    }), this.renderSocialButton(e, i.ShareButtonFacebook, o.b.Facebook, {
                        tt_medium: "fb"
                    }), this.renderSocialButton(e, i.ShareButtonReddit, o.b.Reddit, {
                        tt_medium: "redt"
                    }), this.renderSocialButton(e, i.ShareButtonCopy, o.b.Copy))
                }, t.prototype.renderSocialButton = function(e, t, n, i) {
                    var u = Object(s.e)(this.props.clip.url, i);
                    return this.props.pageType === l.PageviewLocation.ClipsWatchPage && this.props.clip.broadcaster && this.props.clip.broadcaster.login && (u = Object(s.e)(Object(d.a)(this.props.clip.slug, this.props.clip.broadcaster.login), i)), a.createElement(p.Va, r.__assign({
                        key: n
                    }, e, {
                        "data-test-selector": t
                    }), a.createElement(o.a, {
                        key: n,
                        type: n,
                        text: this.props.clip.title,
                        url: u,
                        onShareClick: Object(c.c)(this.props.clip.id, this.props.clip.game && this.props.clip.game.name, this.props.clip.broadcaster && this.props.clip.broadcaster.id, this.props.clip.broadcaster && this.props.clip.broadcaster.login, this.props.pageType)
                    }))
                }, t
            }(a.Component)
        },
        wC0O: function(e, t, n) {},
        wbMx: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return i
            }), n.d(t, "a", function() {
                return d
            });
            var i, r = n("mrSG"),
                a = n("q1tI"),
                o = n("/7QA"),
                s = n("Jxh/"),
                l = n("r62z"),
                c = n("Ue10");
            n("jeZI");
            ! function(e) {
                e[e.Twitter = 0] = "Twitter", e[e.Reddit = 1] = "Reddit", e[e.VKontakte = 2] = "VKontakte", e[e.Facebook = 3] = "Facebook", e[e.Copy = 4] = "Copy", e[e.CopyInput = 5] = "CopyInput", e[e.Download = 6] = "Download"
            }(i || (i = {}));
            var d = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.renderLink = function() {
                        var e = "social-button__link " + n.addSocialClassModifier("social-button__link");
                        return n.props.type === i.Download ? a.createElement("a", r.__assign({
                            href: n.props.url,
                            target: "_blank",
                            className: e,
                            onClick: n.onShareClickHandler
                        }, Object(c.bc)(n.props), {
                            download: n.props.text
                        }), n.renderIcon()) : n.isLink() ? a.createElement("a", r.__assign({
                            href: n.getLinkTarget(),
                            target: "_blank",
                            className: e,
                            onClick: n.onShareClickHandler
                        }, Object(c.bc)(n.props)), n.renderIcon()) : a.createElement("button", r.__assign({
                            onClick: n.copyPageUrl,
                            onMouseLeave: n.clearIsCopiedStatus,
                            className: e
                        }, Object(c.bc)(n.props)), n.renderIcon())
                    }, n.onShareClickHandler = function() {
                        n.props.onShareClick && n.props.onShareClick(n.props.type)
                    }, n.clearIsCopiedStatus = function() {
                        n.setState({
                            isCopied: !1
                        })
                    }, n.getUrl = function() {
                        return n.props.url || window.location.href
                    }, n.copyPageUrl = function(e) {
                        e && e.preventDefault(), n.props.onShareClick && n.props.onShareClick(n.props.type), Object(s.a)(n.getUrl()), n.setState({
                            isCopied: !0
                        })
                    }, n.renderIcon = function() {
                        var e = n.getAssetFromType();
                        return a.createElement(c.Va, {
                            className: "social-button__icon " + n.addSocialClassModifier("social-button__icon"),
                            display: c.W.Flex,
                            alignItems: c.f.Center,
                            justifyContent: c.Ua.Center
                        }, a.createElement(c.mb, {
                            asset: e
                        }))
                    }, n.isLink = function() {
                        return n.props.type !== i.Copy
                    }, n.getTooltipFromType = function() {
                        switch (n.props.type) {
                            case i.Twitter:
                                return "Twitter";
                            case i.Reddit:
                                return "Reddit";
                            case i.Facebook:
                                return "Facebook";
                            case i.VKontakte:
                                return "VKontakte";
                            case i.Download:
                                return Object(o.d)("Download", "SocialButton");
                            case i.Copy:
                                return n.state.isCopied ? Object(o.d)("Copied", "SocialButton") : Object(o.d)("Copy to clipboard", "SocialButton");
                            default:
                                return ""
                        }
                    }, n.getAssetFromType = function() {
                        switch (n.props.type) {
                            case i.Twitter:
                                return c.nb.Twitter;
                            case i.Facebook:
                                return c.nb.Facebook;
                            case i.VKontakte:
                                return c.nb.VKontakte;
                            case i.Reddit:
                                return c.nb.Reddit;
                            case i.Download:
                                return c.nb.Download;
                            case i.Copy:
                            default:
                                return c.nb.Copy
                        }
                    }, n.addSocialClassModifier = function(e) {
                        switch (n.props.type) {
                            case i.Twitter:
                                return e + "--twitter";
                            case i.Reddit:
                                return e + "--reddit";
                            case i.Facebook:
                                return e + "--facebook";
                            case i.VKontakte:
                                return e + "--vkontakte";
                            case i.Download:
                                return e + "--download";
                            case i.Copy:
                                return e + "--copy";
                            default:
                                return ""
                        }
                    }, n.getLinkTarget = function() {
                        var e = n.props,
                            t = e.text,
                            r = e.type,
                            a = n.getUrl(),
                            o = t || "";
                        switch (r) {
                            case i.Reddit:
                                return Object(l.b)(a, o);
                            case i.VKontakte:
                                return Object(l.d)(a);
                            case i.Facebook:
                                return Object(l.a)(a);
                            case i.Twitter:
                                return Object(l.c)(a, o);
                            default:
                                return ""
                        }
                    }, n.state = {
                        isCopied: !1
                    }, n
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(c.Va, {
                        className: "social-button"
                    }, a.createElement(c.Qb, {
                        label: this.getTooltipFromType(),
                        direction: c.Sb.Bottom
                    }, this.renderLink()))
                }, t
            }(a.Component)
        },
        x75U: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            }), n.d(t, "b", function() {
                return c
            });
            var i = n("mrSG"),
                r = n("17x9"),
                a = n("q1tI"),
                o = n("2xye"),
                s = n("yI6f"),
                l = {
                    cardIDtoItemTrackingIDMap: r.object,
                    trackTitleClick: r.func,
                    trackTitleImpression: r.func,
                    trackImpression: r.func,
                    trackClick: r.func
                };

            function c() {
                return function(e) {
                    return function(t) {
                        function n(e) {
                            var n = t.call(this, e) || this;
                            return n.getChildContext = function() {
                                return {
                                    trackTitleClick: n.trackTitleClick,
                                    trackTitleImpression: n.trackTitleImpression,
                                    trackImpression: n.trackImpression,
                                    trackClick: n.trackClick,
                                    cardIDtoItemTrackingIDMap: n.state.cardIDtoItemTrackingIDMap
                                }
                            }, n.mapShelfCardsToRequestIDs = function(e, t, n) {
                                return void 0 === n && (n = {}), e.reduce(function(e, n) {
                                    return n.node && !e[n.node.id] && (e[n.node.id] = t), e
                                }, n)
                            }, n.trackTitleImpression = function(e) {
                                var t = Object(s.f)(e.title),
                                    i = t.reasonType,
                                    r = t.reasonTarget,
                                    a = t.rowName,
                                    l = Object(s.e)(),
                                    c = {
                                        component: s.a.Header,
                                        contentEdge: null,
                                        itemTrackingID: l,
                                        itemPosition: null,
                                        reasonType: i,
                                        reasonTarget: r,
                                        reasonTargetType: null,
                                        requestID: n.props.requestID,
                                        rowName: a,
                                        rowPosition: n.props.position,
                                        tagID: null,
                                        filtered: !1,
                                        tagSet: "[]",
                                        tagStreamerSet: "[]"
                                    };
                                Object(s.h)(c, o.PageviewContent.HeaderGameName), n.setState({
                                    headerImpressionID: l
                                })
                            }, n.trackTitleClick = function() {
                                var e = n.props.shelf,
                                    t = Object(s.f)(e.title),
                                    i = t.reasonType,
                                    r = t.reasonTarget,
                                    a = t.reasonTargetType,
                                    l = t.rowName,
                                    c = {
                                        component: s.a.Header,
                                        contentEdge: null,
                                        itemTrackingID: n.state.headerImpressionID,
                                        requestID: n.state.headerRequestID,
                                        itemPosition: null,
                                        rowPosition: n.props.position,
                                        reasonType: i,
                                        reasonTarget: r,
                                        reasonTargetType: a,
                                        rowName: l,
                                        tagID: null,
                                        filtered: !1,
                                        tagSet: "[]",
                                        tagStreamerSet: "[]"
                                    };
                                Object(s.g)(c, o.PageviewContent.HeaderGameName)
                            }, n.trackImpression = function(e, t, i, r) {
                                if (t.node && !n.state.cardIDtoItemTrackingIDMap[t.node.id]) {
                                    var a = Object(s.e)(),
                                        o = Object(s.f)(e.title),
                                        l = o.reasonType,
                                        c = o.reasonTarget,
                                        d = o.reasonTargetType,
                                        u = o.rowName,
                                        p = {
                                            component: s.a.Card,
                                            contentEdge: t,
                                            itemTrackingID: a,
                                            itemPosition: i,
                                            reasonType: l,
                                            reasonTarget: c,
                                            reasonTargetType: d,
                                            requestID: n.state.cardIDtoRequestIDMap[t.node.id],
                                            rowName: u,
                                            rowPosition: n.props.position,
                                            tagID: null,
                                            filtered: !1,
                                            tagSet: JSON.stringify(r),
                                            tagStreamerSet: "[]"
                                        };
                                    Object(s.h)(p), n.setState(function(e) {
                                        var n = e.cardIDtoItemTrackingIDMap;
                                        return n[t.node.id] = a, {
                                            cardIDtoItemTrackingIDMap: n
                                        }
                                    })
                                }
                            }, n.trackClick = function(e, t, i, r, a, o) {
                                if (t.node) {
                                    var l = n.state,
                                        c = l.cardIDtoRequestIDMap,
                                        d = l.cardIDtoItemTrackingIDMap,
                                        u = Object(s.f)(e.title),
                                        p = u.reasonType,
                                        m = u.reasonTarget,
                                        h = u.reasonTargetType,
                                        f = u.rowName,
                                        g = {
                                            component: s.a.Card,
                                            contentEdge: t,
                                            itemTrackingID: d[t.node.id] || null,
                                            requestID: c[t.node.id],
                                            itemPosition: i,
                                            rowPosition: n.props.position,
                                            reasonType: p,
                                            reasonTarget: m,
                                            reasonTargetType: h,
                                            rowName: f,
                                            tagID: void 0 !== o ? o : null,
                                            filtered: !1,
                                            tagSet: JSON.stringify(a),
                                            tagStreamerSet: "[]"
                                        };
                                    Object(s.g)(g, r)
                                }
                            }, n.state = {
                                cardIDtoItemTrackingIDMap: {},
                                cardIDtoRequestIDMap: n.mapShelfCardsToRequestIDs(e.shelf.content.edges || [], e.requestID, {}),
                                headerImpressionID: null,
                                headerRequestID: e.requestID
                            }, n
                        }
                        return i.__extends(n, t), n.prototype.componentWillReceiveProps = function(e) {
                            var t = this,
                                n = e.shelf,
                                i = e.requestID;
                            n.content.edges !== this.props.shelf.content.edges && this.setState(function(e) {
                                return {
                                    cardIDtoRequestIDMap: t.mapShelfCardsToRequestIDs(n.content.edges || [], i, e.cardIDtoRequestIDMap)
                                }
                            })
                        }, n.prototype.render = function() {
                            var t = Object(s.f)(this.props.shelf.title).rowName,
                                n = {
                                    trackTitleClick: this.getChildContext().trackTitleClick,
                                    trackTitleImpression: this.getChildContext().trackTitleImpression,
                                    trackImpression: this.getChildContext().trackImpression,
                                    trackClick: this.getChildContext().trackClick,
                                    shelfTrackingProps: {
                                        item_tracking_id: this.state.headerImpressionID,
                                        item_position: null,
                                        row_name: t,
                                        row_position: this.props.position
                                    }
                                };
                            return a.createElement(e, i.__assign({}, this.props, n))
                        }, n.childContextTypes = l, n
                    }(a.Component)
                }
            }
        },
        y4Ne: function(e, t, n) {},
        yI6f: function(e, t, n) {
            "use strict";
            var i, r, a, o, s, l, c, d = n("/7QA"),
                u = n("f00E"),
                p = n("2xye"),
                m = n("3sMy"),
                h = function() {
                    return Object(u.b)().substring(0, 16)
                };
            ! function(e) {
                e.TwitchHome = "twitch_home", e.BrowseLiveChannels = "browse_livechannels", e.BrowseCategories = "browse_categories", e.BrowseInCategoryChannels = "browse_incategory_channels"
            }(r || (r = {})),
            function(e) {
                e.Live = "live", e.Clip = "clip", e.Vod = "vod", e.Game = "game"
            }(a || (a = {})),
            function(e) {
                e.Card = "card", e.Header = "header"
            }(o || (o = {})),
            function(e) {
                e.Followed = "followed", e.Watched = "watched", e.Popularity = "popularity", e.Personalized = "personalized"
            }(s || (s = {})),
            function(e) {
                e.Live = "live", e.Clip = "clip", e.Vod = "vod", e.Game = "game"
            }(l || (l = {})),
            function(e) {
                e.Live = "recs_live", e.Vod = "recs_vod", e.Clip = "recs_clip"
            }(c || (c = {}));
            var f = ((i = {})[m.a.TopLiveChannels] = function(e) {
                return {
                    reasonType: s.Popularity,
                    reasonTarget: null,
                    reasonTargetType: l.Live,
                    rowName: e
                }
            }, i[m.a.TopGames] = function(e) {
                return {
                    reasonType: s.Popularity,
                    reasonTarget: null,
                    reasonTargetType: l.Game,
                    rowName: e
                }
            }, i[m.a.TopChannelsPlayingGame] = function(e, t) {
                return {
                    reasonType: s.Popularity,
                    reasonTarget: t.context && t.context.id || null,
                    reasonTargetType: l.Game,
                    rowName: e
                }
            }, i[m.a.TopLiveChannelsYouMayLike] = function(e) {
                return {
                    reasonType: s.Personalized,
                    reasonTarget: null,
                    reasonTargetType: l.Live,
                    rowName: e
                }
            }, i[m.a.TopGamesForYou] = function(e) {
                return {
                    reasonType: s.Personalized,
                    reasonTarget: null,
                    reasonTargetType: l.Game,
                    rowName: e
                }
            }, i[m.a.RecommendedBecauseYouWatchX] = function(e, t) {
                return {
                    reasonType: s.Watched,
                    reasonTarget: t.context && t.context.id || null,
                    reasonTargetType: l.Game,
                    rowName: e
                }
            }, i[m.a.RecommendedBecauseYouFollowX] = function(e, t) {
                return {
                    reasonType: s.Followed,
                    reasonTarget: t.context && t.context.id || null,
                    reasonTargetType: null,
                    rowName: e
                }
            }, i[m.a.GreatNewClipsYouMayHaveMissed] = function(e) {
                return {
                    reasonType: s.Popularity,
                    reasonTarget: null,
                    reasonTargetType: l.Clip,
                    rowName: e
                }
            }, i[m.a.TopNewVideosYouMayHaveMissed] = function(e) {
                return {
                    reasonType: s.Popularity,
                    reasonTarget: null,
                    reasonTargetType: l.Vod,
                    rowName: e
                }
            }, i);

            function g(e) {
                var t = e.key;
                return f[t] ? f[t](t, e) : {
                    reasonType: null,
                    reasonTarget: "",
                    reasonTargetType: null,
                    rowName: t
                }
            }

            function v(e, t) {
                var n, i = null,
                    o = null,
                    s = null,
                    l = e.contentEdge && e.contentEdge.node && e.contentEdge.node.id || "";
                if (e.contentEdge) switch (e.contentEdge.node && e.contentEdge.node.__typename) {
                    case "Stream":
                        i = (n = e.contentEdge.node).broadcaster && n.broadcaster.id, o = a.Live, l = String(n.broadcaster && n.broadcaster.id), s = n.game ? n.game.id : null;
                        break;
                    case "Clip":
                        i = (n = e.contentEdge.node).broadcaster && n.broadcaster.id, o = a.Clip, s = n.game ? n.game.id : null;
                        break;
                    case "Video":
                        i = (n = e.contentEdge.node).owner && n.owner.id, o = a.Vod, s = n.game ? n.game.id : null;
                        break;
                    case "Game":
                        n = e.contentEdge.node, i = null, o = a.Game, s = n.id
                }
                return {
                    component: e.component,
                    request_id: e.requestID,
                    section: r.TwitchHome,
                    model_tracking_id: e.contentEdge && e.contentEdge.trackingID,
                    item_tracking_id: e.itemTrackingID,
                    item_id: l,
                    channel_id: null === i ? null : Number(i),
                    item_position: e.itemPosition,
                    item_subsection: t || null,
                    item_page: p.PageviewMedium.TwitchHome,
                    row_position: e.rowPosition,
                    content_type: o,
                    reason_type: e.reasonType,
                    reason_target: e.reasonTarget,
                    reason_target_type: e.reasonTargetType,
                    row_name: e.rowName,
                    tag_set: e.tagSet,
                    tag_streamer_set: e.tagStreamerSet,
                    filtered: e.filtered,
                    category: s,
                    tag_id: e.tagID
                }
            }

            function b(e, t) {
                var n = v(e, t);
                d.n.track(p.SpadeEventType.ItemClick, n)
            }

            function k(e, t) {
                var n = v(e, t);
                d.n.track(p.SpadeEventType.ItemDisplay, n)
            }

            function y(e) {
                var t = {
                    endpoint: e.endpoint,
                    request_id: e.requestID,
                    section: e.section
                };
                d.n.track(p.SpadeEventType.RecRequestClient, t)
            }
            var S = n("x75U"),
                C = n("A65o");
            n.d(t, "e", function() {
                return h
            }), n.d(t, "c", function() {
                return r
            }), n.d(t, "b", function() {
                return a
            }), n.d(t, "a", function() {
                return o
            }), n.d(t, !1, function() {
                return s
            }), n.d(t, !1, function() {
                return l
            }), n.d(t, "d", function() {
                return c
            }), n.d(t, "f", function() {
                return g
            }), n.d(t, "g", function() {
                return b
            }), n.d(t, "h", function() {
                return k
            }), n.d(t, "i", function() {
                return y
            }), n.d(t, !1, function() {
                return S.a
            }), n.d(t, "j", function() {
                return S.b
            }), n.d(t, !1, function() {
                return C.a
            })
        },
        yWUM: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = "0h0m1s";

            function r(e) {
                if (0 === e) return i;
                if (!e || e < 0) return "";
                var t = e,
                    n = Math.floor(t / 3600);
                return t %= 3600, n + "h" + Math.floor(t / 60) + "m" + (t %= 60) + "s"
            }
        },
        ygyh: function(e, t, n) {},
        ykET: function(e, t, n) {
            "use strict";
            var i = n("q1tI"),
                r = n("2iEm"),
                a = n("RcPG"),
                o = n("a1OF");
            n("mrSG"), n("p52R"), n("ZtEv"), n("60o1");

            function s(e) {
                var t = {};
                return e.forEach(function(e) {
                    t[e.from] = {
                        startIndex: e.from,
                        id: e.emoteID
                    }
                }), t
            }
            var l = n("Ue10");
            n.d(t, "a", function() {
                return d
            });
            var c = /^(https?:\/\/)?(www.)?twitch\.tv/;

            function d(e, t, n, d) {
                void 0 === t && (t = []);
                for (var u, p = [], m = e.split(/\n/), h = function(e, h) {
                        if (e > 0 && (h += m[e - 1].length + 1), d && "" === m[e]) return p.push(i.createElement(l.V, {
                            key: e
                        }, "\n")), u = h, "continue";
                        var f = t.map(function(e) {
                                return function(e, t) {
                                    return {
                                        emoteID: e.emoteID,
                                        from: e.from - t,
                                        to: e.to - t,
                                        setID: e.setID
                                    }
                                }(e, h)
                            }).filter(function(t) {
                                return ! function(e, t) {
                                    return e.from < 0 || e.from >= t || e.to < 0 || e.to >= t
                                }(t, m[e].length)
                            }),
                            g = Object(o.f)(m[e], s(f), 0, {}, !1, n);
                        p.push(i.createElement(l.V, {
                            key: e
                        }, function(e) {
                            for (var t = [], n = 0; n < e.length; n++) {
                                var o = e[n];
                                switch (o.type) {
                                    case a.a.ClipLink:
                                        t.push(i.createElement("a", {
                                            key: n,
                                            href: o.content.url,
                                            target: "_blank"
                                        }, o.content.url));
                                        break;
                                    case a.a.VideoLink:
                                    case a.a.Link:
                                        o.content.url.match(c) ? t.push(i.createElement(r.a, {
                                            key: n,
                                            to: o.content.url.replace(c, "")
                                        }, o.content.displayText)) : t.push(i.createElement("a", {
                                            key: n,
                                            href: o.content.url,
                                            target: "_blank",
                                            rel: "noopener noreferrer"
                                        }, o.content.displayText));
                                        break;
                                    case a.a.Mention:
                                        t.push(i.createElement(r.a, {
                                            key: n,
                                            to: "/" + o.content.recipient
                                        }, o.content.recipient));
                                        break;
                                    case a.a.Emote:
                                        o.content.images.themed || t.push(i.createElement("img", {
                                            key: n,
                                            src: o.content.images.sources["1x"],
                                            alt: o.content.alt
                                        }));
                                        break;
                                    case a.a.Text:
                                        t.push(i.createElement("span", {
                                            key: n
                                        }, o.content))
                                }
                            }
                            return t
                        }(g))), u = h
                    }, f = 0, g = 0; f < m.length; f++) h(f, g), g = u;
                return p
            }
        },
        zixI: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "UnblockUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "UnblockUserInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "unblockUser"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "targetUser"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 100
                }
            };
            n.loc.source = {
                body: "mutation UnblockUser($input: UnblockUserInput!) {\nunblockUser(input: $input) {\ntargetUser {\nid\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        }
    }
]);