webpackJsonp([43], {
    106: function(e, t, n) {
        "use strict";

        function i(e) {
            var t = r.b.get("prime_blocked_regions", []);
            return !!e && !t.includes(e.toUpperCase())
        }

        function a(e) {
            var t = ["US"];
            return !e || !t.includes(e.toUpperCase())
        }
        t.b = i, t.a = a;
        var r = n(2)
    },
    107: function(e, t, n) {
        "use strict";

        function i(e) {
            return function(t) {
                return function(n) {
                    function i(t) {
                        var i = n.call(this, t) || this;
                        return i.mutator = function(e, t) {
                            return i.options.mutator(e, t)
                        }, i.options = e(t), i
                    }
                    return a.__extends(i, n), i.prototype.componentDidMount = function() {
                        this.options.skip || this.subscribe(this.options)
                    }, i.prototype.componentWillReceiveProps = function(t) {
                        var n = e(t);
                        n.topic === this.options.topic || n.skip || (this.unsubscribe(), this.subscribe(n)), this.options = n
                    }, i.prototype.componentWillUnmount = function() {
                        this.unsubscribe()
                    }, i.prototype.render = function() {
                        return r.createElement(t, a.__assign({}, this.props))
                    }, i.prototype.subscribe = function(e) {
                        this.unsubscriber = Object(s.j)({
                            query: e.query,
                            variables: e.variables,
                            topic: e.topic,
                            type: e.type,
                            types: e.types,
                            mutator: this.mutator,
                            skipMessage: e.skipMessage
                        })
                    }, i.prototype.unsubscribe = function() {
                        this.unsubscriber && this.unsubscriber()
                    }, i
                }(r.Component)
            }
        }
        var a = n(0),
            r = n(1),
            s = n(30);
        n.d(t, "a", function() {
            return i
        })
    },
    108: function(e, t, n) {
        "use strict";

        function i() {
            return Math.floor(((new Date).getTime() - 6e5) / 1e3)
        }

        function a() {
            var e = new Date;
            return e.setMonth(e.getMonth() - 1), Math.floor(e.getTime() / 1e3)
        }
        n.d(t, "a", function() {
            return d
        });
        var r = n(0),
            s = n(509),
            o = (n.n(s), n(66)),
            l = n(271),
            c = {
                games: {
                    indexName: o.a.Games,
                    hitsPerPage: 2,
                    topNumericFilters: ["popularity>1"],
                    singleTypeNumericFilters: [],
                    optionalFacetFilters: ""
                },
                videos: {
                    indexName: o.a.Videos,
                    hitsPerPage: 6,
                    get topNumericFilters() {
                        return ["created_at>" + a()]
                    },
                    singleTypeNumericFilters: [],
                    optionalFacetFilters: ""
                },
                users: {
                    indexName: o.a.Users,
                    hitsPerPage: 2,
                    topNumericFilters: ["followers>50"],
                    singleTypeNumericFilters: [],
                    optionalFacetFilters: ""
                },
                channels: {
                    indexName: o.a.Channels,
                    hitsPerPage: 6,
                    get topNumericFilters() {
                        return ["channel_count>10", "updated_on>" + i()]
                    },
                    get singleTypeNumericFilters() {
                        return ["updated_on>" + i()]
                    },
                    optionalFacetFilters: ""
                },
                communities: {
                    indexName: o.a.Communities,
                    hitsPerPage: 2,
                    topNumericFilters: ["channels>9"],
                    singleTypeNumericFilters: [],
                    optionalFacetFilters: ""
                }
            },
            d = function() {
                function e(e, t) {
                    this.client = s(e, t)
                }
                return e.prototype.queryTopResults = function(e, t) {
                    return r.__awaiter(this, void 0, void 0, function() {
                        var n, i, a, s, o;
                        return r.__generator(this, function(r) {
                            switch (r.label) {
                                case 0:
                                    return n = [], i = [], n.push(this.getTopResult(c.games, e)), n.push(this.getTopResult(c.videos, e)), n.push(this.getTopResult(c.users, e)), n.push(this.getTopResult(c.channels, e)), n.push(this.getTopResult(c.communities, e)), i.push(this.getTotalResult(c.games, e)), i.push(this.getTotalResult(c.videos, e)), i.push(this.getTotalResult(c.users, e)), i.push(this.getTotalResult(c.channels, e)), i.push(this.getTotalResult(c.communities, e)), [4, this.client.search(n.concat(i))];
                                case 1:
                                    return a = r.sent(), s = a.results, o = {
                                        id: t,
                                        games: {
                                            totalHits: s[5].nbHits,
                                            hits: s[0].hits
                                        },
                                        videos: {
                                            totalHits: s[6].nbHits,
                                            hits: s[1].hits
                                        },
                                        users: {
                                            totalHits: s[7].nbHits,
                                            hits: s[2].hits
                                        },
                                        channels: {
                                            totalHits: s[8].nbHits,
                                            hits: s[3].hits
                                        },
                                        communities: {
                                            totalHits: s[9].nbHits,
                                            hits: s[4].hits
                                        }
                                    }, [2, o]
                            }
                        })
                    })
                }, e.prototype.queryForType = function(e, t, n, i) {
                    var a = void 0 === i ? {} : i,
                        s = a.page,
                        l = void 0 === s ? 0 : s,
                        d = a.hitsPerPage,
                        u = void 0 === d ? 50 : d,
                        p = a.facetFilters,
                        m = void 0 === p ? "" : p,
                        h = a.numericFilters;
                    return r.__awaiter(this, void 0, void 0, function() {
                        var i, a, s, d, p, f, g, v, b = this;
                        return r.__generator(this, function(k) {
                            switch (k.label) {
                                case 0:
                                    switch (i = {
                                        id: n,
                                        currentPage: l
                                    }, a = function(e) {
                                        return r.__awaiter(b, void 0, void 0, function() {
                                            var n, a;
                                            return r.__generator(this, function(r) {
                                                switch (r.label) {
                                                    case 0:
                                                        return n = {
                                                            indexName: e.indexName,
                                                            query: t,
                                                            params: {
                                                                page: l,
                                                                hitsPerPage: u,
                                                                numericFilters: h || e.singleTypeNumericFilters,
                                                                facets: "*",
                                                                facetFilters: m
                                                            }
                                                        }, [4, this.client.search([n])];
                                                    case 1:
                                                        return a = r.sent(), i.exhaustedHits = !a.results[0].nbHits || a.results[0].hits.length < u, [2, {
                                                            totalHits: a.results[0].nbHits,
                                                            hits: a.results[0].hits
                                                        }]
                                                }
                                            })
                                        })
                                    }, s = e) {
                                        case o.a.Games:
                                            return [3, 1];
                                        case o.a.Users:
                                            return [3, 3];
                                        case o.a.Channels:
                                            return [3, 5];
                                        case o.a.Videos:
                                            return [3, 7];
                                        case o.a.Communities:
                                            return [3, 9]
                                    }
                                    return [3, 11];
                                case 1:
                                    return d = i, [4, a(c.games)];
                                case 2:
                                    return d.games = k.sent(), [3, 12];
                                case 3:
                                    return p = i, [4, a(c.users)];
                                case 4:
                                    return p.users = k.sent(), [3, 12];
                                case 5:
                                    return f = i, [4, a(c.channels)];
                                case 6:
                                    return f.channels = k.sent(), [3, 12];
                                case 7:
                                    return g = i, [4, a(c.videos)];
                                case 8:
                                    return g.videos = k.sent(), [3, 12];
                                case 9:
                                    return v = i, [4, a(c.communities)];
                                case 10:
                                    return v.communities = k.sent(), [3, 12];
                                case 11:
                                    return [2, null];
                                case 12:
                                    return [2, i]
                            }
                        })
                    })
                }, e.prototype.queryVideos = function(e, t, n) {
                    return r.__awaiter(this, void 0, void 0, function() {
                        var i, a, s, d;
                        return r.__generator(this, function(r) {
                            switch (r.label) {
                                case 0:
                                    switch (n.sort) {
                                        case l.b.Newest:
                                            i = o.a.VideosNewest;
                                            break;
                                        case l.b.Popular:
                                        default:
                                            i = o.a.Videos
                                    }
                                    switch (a = [], n.length) {
                                        case l.a.Short:
                                            a.push("length<=900");
                                            break;
                                        case l.a.Long:
                                            a.push("length>900")
                                    }
                                    switch (s = {
                                        indexName: i,
                                        query: e,
                                        params: {
                                            page: 0,
                                            hitsPerPage: c.videos.hitsPerPage,
                                            numericFilters: a,
                                            facets: "*",
                                            facetFilters: ""
                                        }
                                    }, n.type) {
                                        case l.c.PastBroadcasts:
                                            s.params.facetFilters = "broadcast_type:archive";
                                            break;
                                        case l.c.Uploads:
                                            s.params.facetFilters = "broadcast_type:upload";
                                            break;
                                        case l.c.Highlights:
                                            s.params.facetFilters = "broadcast_type:highlight"
                                    }
                                    return [4, this.client.search([s])];
                                case 1:
                                    return d = r.sent(), [2, {
                                        id: t,
                                        totalHits: d.results[0].nbHits,
                                        hits: d.results[0].hits
                                    }]
                            }
                        })
                    })
                }, e.prototype.getTopResult = function(e, t) {
                    return {
                        indexName: e.indexName,
                        query: t,
                        params: {
                            page: 0,
                            hitsPerPage: e.hitsPerPage,
                            numericFilters: e.topNumericFilters
                        }
                    }
                }, e.prototype.getTotalResult = function(e, t) {
                    return {
                        indexName: e.indexName,
                        query: t,
                        params: {
                            hitsPerPage: 0,
                            numericFilters: e.singleTypeNumericFilters
                        }
                    }
                }, e
            }()
    },
    109: function(e, t, n) {
        "use strict";

        function i(e) {
            return "subscribe-button-modal-tab-" + e
        }
        var a, r = n(0),
            s = n(1),
            o = n(2),
            l = n(142),
            c = n(68),
            d = n(88),
            u = n(5),
            p = n(276),
            m = n(141),
            h = n(275),
            f = n(282),
            g = n(89),
            v = n(49),
            b = n(3),
            k = (n(494), "gift-subscription-button"),
            S = "subscribe-button";
        ! function(e) {
            e[e.Prime = 0] = "Prime", e[e.Tier1 = 1] = "Tier1", e[e.Tier2 = 2] = "Tier2", e[e.Tier3 = 3] = "Tier3"
        }(a || (a = {}));
        var y = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.toggleActiveTab = function(e) {
                        if (e.currentTarget.parentElement) switch (e.currentTarget.parentElement.getAttribute("data-a-target")) {
                            case "subscribe-button-modal-tab-" + a.Prime:
                                n.setState({
                                    activeTab: a.Prime,
                                    currentPurchasePrice: n.messages.tier1Price
                                }), n.props.onSelectTierTab(a.Prime);
                                break;
                            case "subscribe-button-modal-tab-" + a.Tier1:
                                n.setState({
                                    activeTab: a.Tier1,
                                    currentPurchasePrice: n.messages.tier1Price
                                }), n.props.onSelectTierTab(a.Tier1);
                                break;
                            case "subscribe-button-modal-tab-" + a.Tier2:
                                n.setState({
                                    activeTab: a.Tier2,
                                    currentPurchasePrice: n.messages.tier2Price
                                }), n.props.onSelectTierTab(a.Tier2);
                                break;
                            case "subscribe-button-modal-tab-" + a.Tier3:
                                n.setState({
                                    activeTab: a.Tier3,
                                    currentPurchasePrice: n.messages.tier3Price
                                }), n.props.onSelectTierTab(a.Tier3);
                                break;
                            default:
                                n.setState({
                                    activeTab: a.Prime,
                                    currentPurchasePrice: n.messages.tier1Price
                                }), n.props.onSelectTierTab(a.Prime)
                        }
                    }, n.getTabTitle = function() {
                        switch (n.state.activeTab) {
                            case a.Prime:
                                return n.messages.freeSubWithPrime;
                            case a.Tier1:
                                return n.messages.tier1Sub;
                            case a.Tier2:
                                return n.messages.tier2Sub;
                            case a.Tier3:
                                return n.messages.tier3Sub;
                            default:
                                return n.messages.tier1Sub
                        }
                    }, n.getTierSubscribeButton = function() {
                        var e = n.props.subscriptionProducts[n.state.activeTab - 1];
                        return n.props.isGift ? n.props.giftRecipient ? s.createElement(b.u, {
                            ariaLabel: n.messages.giftSubscription + " " + n.state.currentPurchasePrice,
                            "data-test-selector": k,
                            onClick: n.reportGiftCheckoutAction,
                            targetBlank: !0,
                            purchase: n.state.currentPurchasePrice,
                            linkTo: Object(c.a)(e.url, {
                                recipient: n.props.giftRecipient
                            })
                        }, n.messages.giftSubscription) : s.createElement(b.u, {
                            ariaLabel: n.messages.giftSubscription + " " + n.state.currentPurchasePrice,
                            "data-test-selector": k,
                            onClick: n.onGiftSelect,
                            purchase: n.state.currentPurchasePrice
                        }, n.messages.giftSubscription) : n.state.subbedTier === n.state.activeTab && n.state.activeTab === a.Prime ? s.createElement(f.a, {
                            authToken: n.props.authToken,
                            "data-a-target": "subscribe-with-prime-button",
                            isSubscribed: n.props.isSubscribed,
                            isSubscribedWithPrime: n.props.subbedTier === m.a,
                            onSubscribedWithPrime: n.onSubscribedWithPrime,
                            reportSubMenuAction: n.props.reportSubMenuAction,
                            subLogin: n.props.subLogin,
                            userHasPrime: n.props.userHasPrime,
                            canPrimeSubscribe: n.props.canPrimeSubscribe
                        }) : s.createElement(h.a, {
                            isSubbedToTier: n.state.subbedTier === n.state.activeTab,
                            tierPrice: n.state.currentPurchasePrice,
                            reportSubAction: n.props.reportSubMenuAction,
                            url: e.url,
                            "data-a-target": "subscribe-now-button",
                            "data-test-selector": S
                        })
                    }, n.onSubscribedWithPrime = function() {
                        n.props.onSubscribedWithPrime && n.props.onSubscribedWithPrime()
                    }, n.reportGiftCheckoutAction = function() {
                        n.props.reportSubMenuAction({
                            action: v.a.BuyGiftSub,
                            checkoutButtonTier: n.state.currentPurchasePrice,
                            giftRecipient: n.props.giftRecipient ? n.props.giftRecipient : null
                        })
                    }, n.onGiftSelect = function() {
                        n.props.reportSubMenuAction({
                            action: v.a.GiftASub,
                            checkoutButtonTier: n.state.currentPurchasePrice
                        }), n.props.onGiftSelect && n.props.onGiftSelect()
                    }, n.mapSubbedTierToTabs = function(e) {
                        e.subbedTier === l.a.Prime ? (n.setState({
                            activeTab: a.Prime,
                            subbedTier: a.Prime
                        }), e.onSelectTierTab(a.Prime)) : e.subbedTier === l.a.Tier1 ? (n.setState({
                            activeTab: a.Tier1,
                            subbedTier: a.Tier1
                        }), e.onSelectTierTab(a.Tier1)) : e.subbedTier === l.a.Tier2 ? (n.setState({
                            activeTab: a.Tier2,
                            subbedTier: a.Tier2
                        }), e.onSelectTierTab(a.Tier2)) : e.subbedTier === l.a.Tier3 ? (n.setState({
                            activeTab: a.Tier3,
                            subbedTier: a.Tier3
                        }), e.onSelectTierTab(a.Tier3)) : e.isGift ? e.onSelectTierTab(n.state.activeTab) : e.onSelectTierTab(a.Prime)
                    }, n.getExtraEmotes = function(e) {
                        return (e === a.Tier2 ? Object(d.b)(n.props.subscriptionProducts[1].emotes) : Object(d.b)(n.props.subscriptionProducts[2].emotes.concat(n.props.subscriptionProducts[1].emotes))).map(function(e) {
                            return s.createElement(b.U, {
                                display: b.H.InlineFlex,
                                margin: {
                                    right: .5
                                },
                                key: e.id
                            }, s.createElement("img", {
                                srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/" + e.srcSet
                            }))
                        })
                    }, n.state = n.getInitialState(), n
                }
                return r.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.setMessages(this.props), this.mapSubbedTierToTabs(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.setMessages(e)
                }, t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = null;
                    this.state.subbedTier && (e = s.createElement(b.U, {
                        display: b.H.InlineFlex,
                        margin: {
                            right: .5
                        },
                        className: "subscription-balloon-options__subbed-star"
                    }, s.createElement(b._8, {
                        asset: b._9.Star
                    })));
                    var t = null,
                        n = null,
                        r = null,
                        c = s.createElement(b.U, {
                            display: b.H.InlineFlex
                        }, this.state.subbedTier === a.Tier3 && e, s.createElement(b._18, {
                            active: this.state.activeTab === a.Tier3,
                            "data-a-target": i(a.Tier3),
                            onClick: this.toggleActiveTab
                        }, this.messages.tier3TabName));
                    this.props.subbedTier !== l.a.Prime || this.props.isGift || (t = s.createElement(b.U, {
                        display: b.H.InlineFlex,
                        margin: {
                            right: 2
                        }
                    }, s.createElement(b.U, {
                        display: b.H.InlineFlex,
                        margin: {
                            right: 1
                        },
                        className: "subscription-balloon-options__prime-crown"
                    }, s.createElement(b._8, {
                        asset: b._9.Crown
                    })), s.createElement(b._18, {
                        active: this.state.activeTab === a.Prime,
                        "data-a-target": i(a.Prime),
                        onClick: this.toggleActiveTab
                    }, this.messages.prime))), this.props.subbedTier && this.props.subbedTier !== l.a.Tier1 || (n = s.createElement(b.U, {
                        display: b.H.InlineFlex,
                        margin: {
                            right: 2
                        }
                    }, this.state.subbedTier === a.Tier1 && e, s.createElement(b._18, {
                        active: this.state.activeTab === a.Tier1,
                        "data-a-target": i(a.Tier1),
                        onClick: this.toggleActiveTab
                    }, this.messages.tier1TabName))), this.props.subbedTier && this.props.subbedTier !== l.a.Prime && this.props.subbedTier !== l.a.Tier1 && this.props.subbedTier !== l.a.Tier2 || (r = s.createElement(b.U, {
                        display: b.H.InlineFlex,
                        margin: {
                            right: 2
                        }
                    }, this.state.subbedTier === a.Tier2 && e, s.createElement(b._18, {
                        active: this.state.activeTab === a.Tier2,
                        "data-a-target": i(a.Tier2),
                        onClick: this.toggleActiveTab
                    }, this.messages.tier2TabName)));
                    var d = null;
                    (this.messages.tier2EmoteCount > 0 && this.state.activeTab === a.Tier2 || this.messages.tier3EmoteCount > 0 && this.state.activeTab === a.Tier3) && (d = s.createElement(b.U, {
                        display: b.H.InlineFlex,
                        alignItems: b.c.Center
                    }, this.getExtraEmotes(this.state.activeTab), s.createElement(b._21, {
                        bold: !0
                    }, Object(o.d)("Plus {extraEmoteCount, number} extra channel emote(s)", {
                        extraEmoteCount: this.state.activeTab === a.Tier2 ? this.messages.tier2EmoteCount : this.messages.tier3EmoteCount
                    }, "SubTierTabs"))));
                    var u = this.props.subscriptionProducts[this.state.activeTab - 1];
                    return s.createElement(b.U, {
                        className: "channel-header__subscription-balloon-options"
                    }, s.createElement(b.U, {
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(b._19, null, t, n, r, c)), s.createElement(b.U, null, s.createElement(b.U, {
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(b._21, {
                        type: b._26.H5,
                        bold: !0
                    }, this.getTabTitle())), s.createElement(b.U, {
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(b._21, null, this.messages.subTierBenefits)), d, s.createElement(p.a, {
                        subscriptionProduct: u,
                        isGift: this.props.isGift
                    }), s.createElement(b.U, {
                        margin: {
                            top: 1,
                            right: 1
                        }
                    }, this.getTierSubscribeButton())))
                }, t.prototype.getInitialState = function() {
                    var e = this.props.subscriptionProducts[0].price;
                    return (Object(g.d)(this.props.subscriptionProducts) || Object(g.c)(this.props.subscriptionProducts)) && (e = Object(g.a)(this.props.subscriptionProducts[0], this.props.isGift)), {
                        activeTab: a.Tier1,
                        currentPurchasePrice: e,
                        subbedTier: null
                    }
                }, t.prototype.setMessages = function(e) {
                    var t = e.subscriptionProducts[1].emotes.length,
                        n = t + e.subscriptionProducts[2].emotes.length;
                    this.messages = {
                        tier2EmoteCount: t,
                        tier3EmoteCount: n,
                        prime: Object(o.d)("Prime", "SubTierTabs"),
                        subscribed: Object(o.d)("Subscribed", "SubTierTabs"),
                        subTierBenefits: Object(o.d)("Includes {availableEmoteCount, number} emoticon(s), subscriber badge, customizable messages upon subscribing, and ad-free viewing", {
                            availableEmoteCount: e.subscriptionProducts[0].emotes.length
                        }, "SubTierTabs"),
                        tier1Price: e.subscriptionProducts[0].price,
                        tier2Price: e.subscriptionProducts[1].price,
                        tier3Price: e.subscriptionProducts[2].price,
                        tier1TabName: e.subscriptionProducts[0].price,
                        tier2TabName: e.subscriptionProducts[1].price,
                        tier3TabName: e.subscriptionProducts[2].price,
                        subscribeNow: Object(o.d)("Subscribe Now", "SubTierTabs"),
                        freeSubWithPrime: Object(o.d)("Free Channel Sub with Twitch Prime", "SubTierTabs"),
                        giftSubscription: Object(o.d)("Gift A Subscription", "SubTierTabs"),
                        tier1Sub: e.subscriptionProducts[0].displayName,
                        tier2Sub: e.subscriptionProducts[1].displayName,
                        tier3Sub: e.subscriptionProducts[2].displayName
                    }, (Object(g.d)(e.subscriptionProducts) || Object(g.c)(e.subscriptionProducts)) && (this.messages.tier1Price = Object(g.a)(e.subscriptionProducts[0], this.props.isGift), this.messages.tier2Price = Object(g.a)(e.subscriptionProducts[1], this.props.isGift), this.messages.tier3Price = Object(g.a)(e.subscriptionProducts[2], this.props.isGift))
                }, t = r.__decorate([Object(u.c)("SubTierTabs")], t)
            }(s.Component),
            _ = y;
        n.d(t, !1, function() {
            return k
        }), n.d(t, !1, function() {
            return S
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, !1, function() {
            return i
        }), n.d(t, "a", function() {
            return _
        })
    },
    110: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        });
        var i;
        ! function(e) {
            e.Playing = "PLAYING", e.Streaming = "BROADCASTING", e.Watching = "WATCHING"
        }(i || (i = {}));
        var a;
        ! function(e) {
            e.Playing = "playing", e.Streaming = "broadcasting", e.Watching = "watching"
        }(a || (a = {}))
    },
    111: function(e, t, n) {
        "use strict";

        function i(e, t) {
            return u.__awaiter(this, void 0, void 0, function() {
                var n, i, a, r, s, o, l, c, d, p;
                return u.__generator(this, function(u) {
                    switch (u.label) {
                        case 0:
                            if (n = null, i = null, a = null, r = null, s = null, !t.channelID) return [3, 5];
                            u.label = 1;
                        case 1:
                            return u.trys.push([1, 3, , 4]), [4, m.n.apollo.client.query({
                                query: k,
                                variables: {
                                    id: t.channelID
                                }
                            })];
                        case 2:
                            return r = u.sent(), [3, 4];
                        case 3:
                            return l = u.sent(), m.i.error(l, "Failed to make query for channel info in FollowEvent reporting.", {
                                channelID: t.channelID
                            }), [3, 4];
                        case 4:
                            a = r && r.data && r.data.user, a ? s = a.hosting.stream && a.hosting.stream.game ? a.hosting.stream.game.name : a.stream && a.stream.game && a.stream.game.name : m.i.error(new Error("GraphQL empty response"), "Query for channel info in FollowEvent reporting return no data.", {
                                channelID: t.channelID
                            }), u.label = 5;
                        case 5:
                            if (!(c = m.m.getVideoPlayerTrackingData().vodID)) return [3, 10];
                            u.label = 6;
                        case 6:
                            return u.trys.push([6, 8, , 9]), [4, m.n.apollo.client.query({
                                query: v,
                                variables: {
                                    id: c
                                }
                            })];
                        case 7:
                            return n = u.sent(), [3, 9];
                        case 8:
                            return d = u.sent(), m.i.error(d, "Failed to make query for VOd info in FollowEvent reporting.", {
                                currentVODID: c
                            }), [3, 9];
                        case 9:
                            i = n && n.data && n.data.video, i ? o = Object(b.a)(i.broadcastType) : (o = null, m.i.error(new Error("GraphQL empty response"), "Query for video info in FollowEvent reporting return no data.", {
                                currentVODID: c
                            })), u.label = 10;
                        case 10:
                            return p = {
                                channel: t.channelLogin,
                                channel_id: t.channelID,
                                channel_game: s,
                                cta_visible: m.m.getVideoPlayerTrackingData().followCTAVisible,
                                host_channel: t.hostChannelLogin,
                                host_channel_id: t.hostChannelID,
                                game: t.game,
                                partner: a ? a.isPartner : null,
                                src: t.src,
                                vod_id: c,
                                vod_type: o
                            }, m.m.track(e, p), [2]
                    }
                })
            })
        }

        function a(e) {
            return {
                isLoggedIn: Object(d.d)(e)
            }
        }

        function r(e) {
            return Object(o.bindActionCreators)({
                login: function() {
                    return Object(c.f)(l.a.FollowButton)
                }
            }, e)
        }
        var s = n(6),
            o = n(9),
            l = n(54),
            c = n(39),
            d = n(17),
            u = n(0),
            p = n(1),
            m = n(2),
            h = n(47),
            f = n(7),
            g = n(20),
            v = n(512),
            b = n(139),
            k = n(513),
            S = {
                Channel: "channel"
            },
            y = n(13),
            _ = n(5),
            N = n(3),
            E = n(514),
            T = (n(515), n(516)),
            C = n(517),
            D = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isFollowing: !1,
                        showDropdown: !1,
                        disableNotifications: !0
                    }, t.userDataLoaded = function() {
                        return t.props.data && !t.props.data.loading && !t.props.data.error && t.props.data.user
                    }, t.toggleFollowing = function() {
                        var e;
                        t.state.isFollowing ? (t.unfollowUser(), e = y.SpadeEventType.Unfollow) : (t.followUser(), e = y.SpadeEventType.Follow), t.props.data && i(e, {
                            channelLogin: t.props.data.user.login,
                            channelID: t.props.data.user.id,
                            hostChannelLogin: t.props.hostChannelLogin,
                            hostChannelID: t.props.hostChannelID,
                            src: S.Channel
                        }), t.setState(function(e) {
                            return {
                                isFollowing: !e.isFollowing,
                                disableNotifications: !1
                            }
                        })
                    }, t.followUser = function() {
                        if (t.props.followUser && t.props.data) {
                            t.setState({
                                showDropdown: !0
                            });
                            var e = u.__assign({}, Object(g.a)({
                                disableNotifications: !1,
                                targetID: t.props.data.user.id
                            }), {
                                optimisticResponse: {
                                    followUser: {
                                        __typename: "FollowUserPayload",
                                        follow: {
                                            disableNotifications: !1,
                                            __typename: "Follow"
                                        }
                                    }
                                }
                            });
                            t.props.followUser(e).then(function(e) {
                                var n = function(t) {
                                    return t.user.self.follower.disableNotifications = e.data.followUser.follow.disableNotifications, t
                                };
                                Object(g.d)(C, {
                                    login: t.props.channelLogin
                                }, n)
                            })
                        }
                    }, t.unfollowUser = function() {
                        if (t.props.unfollowUser && t.props.data) {
                            var e = u.__assign({}, Object(g.a)({
                                targetID: t.props.data.user.id
                            }), {
                                optimisticResponse: {
                                    unfollowUser: {
                                        __typename: "UnfollowUserPayload",
                                        follow: {
                                            disableNotifications: null,
                                            __typename: "Follow"
                                        }
                                    }
                                }
                            });
                            t.props.unfollowUser(e).then(function() {
                                var e = function(e) {
                                    return e.user.self.follower.disableNotifications = null, e
                                };
                                Object(g.d)(C, {
                                    login: t.props.channelLogin
                                }, e)
                            })
                        }
                    }, t.toggleNotificationsEnabled = function() {
                        if (t.props.followUser && t.props.data) {
                            var e = u.__assign({}, Object(g.a)({
                                disableNotifications: !t.state.disableNotifications,
                                targetID: t.props.data.user.id
                            }), {
                                optimisticResponse: {
                                    followUser: {
                                        __typename: "FollowUserPayload",
                                        follow: {
                                            disableNotifications: !t.state.disableNotifications,
                                            __typename: "Follow"
                                        }
                                    }
                                }
                            });
                            t.props.followUser(e).then(function(e) {
                                var n = function(t) {
                                    return t.user.self.follower.disableNotifications = e.data.followUser.follow.disableNotifications, t
                                };
                                Object(g.d)(C, {
                                    login: t.props.channelLogin
                                }, n)
                            }), t.setState(function(e) {
                                return {
                                    disableNotifications: !e.disableNotifications
                                }
                            })
                        }
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.props.channelLogin && !this.userDataLoaded() || !this.props.updateContainerWidth || this.props.updateContainerWidth(), this.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    !e.data || e.data.loading || e.data.error || this.setState({
                        isFollowing: e.data.user.self && null !== e.data.user.self.follower.disableNotifications,
                        disableNotifications: e.data.user.self && e.data.user.self.follower.disableNotifications
                    })
                }, t.prototype.render = function() {
                    var e = this.props.isHostedFollow && this.props.channelName ? Object(m.d)("Follow {username}", {
                        username: this.props.channelName
                    }, "FollowButton") : Object(m.d)("Follow", "FollowButton");
                    if (!this.props.isLoggedIn) return p.createElement(N.u, u.__assign({
                        tabIndex: this.props.tabIndex,
                        ariaLabel: e,
                        icon: this.props.hideIcon ? void 0 : N._9.Heart,
                        onClick: this.props.login,
                        blurAfterClick: this.props.blurAfterClick,
                        "data-a-target": "follow-button"
                    }, Object(N._39)(this.props), {
                        size: this.props.size
                    }), e);
                    if (this.props.showLoadingPlaceholder && (!this.props.data || this.props.data.loading)) return p.createElement(N._1, {
                        width: 70,
                        height: 30
                    });
                    if (!this.props.followUser || !this.props.unfollowUser || !this.props.data || this.props.data.loading || this.props.data.error || !this.props.data.user || this.props.data.user.id === this.props.data.currentUser.id) return null;
                    var t = this.state.disableNotifications ? Object(m.d)("Opt in to notifications to receive updates on this channel's activity, including when they go live.", "FollowButton") : Object(m.d)("You will be notified on this channel's activity, including when they go live.", "FollowButton");
                    if (!this.state.isFollowing) return p.createElement(N.u, u.__assign({
                        blurAfterClick: this.props.blurAfterClick,
                        ariaLabel: e,
                        size: this.props.size,
                        "data-a-target": "follow-button",
                        "data-test-selector": "follow-button",
                        icon: this.props.hideIcon ? void 0 : N._9.Heart,
                        onClick: this.toggleFollowing
                    }, Object(N._39)(this.props), {
                        tabIndex: this.props.tabIndex
                    }), e);
                    if (this.props.hideWhenFollowing) return null;
                    var n = this.props.balloonDirection ? this.props.balloonDirection : N.q.BottomRight;
                    return p.createElement(N.U, {
                        display: N.H.Flex,
                        className: "follow-btn"
                    }, p.createElement(N.U, null, p.createElement(N.v, {
                        ariaLabel: Object(m.d)("Unfollow", "FollowButton"),
                        "data-a-target": "unfollow-button",
                        "data-test-selector": "unfollow-button",
                        icon: N._9.Heart,
                        onClick: this.toggleFollowing,
                        statusAlertIcon: N._9.Unheart
                    })), p.createElement(h.a, {
                        display: N.H.InlineFlex,
                        openByDefault: this.state.showDropdown
                    }, p.createElement("button", {
                        tabIndex: this.props.tabIndex,
                        "aria-label": Object(m.d)("Dropdown", "FollowButton"),
                        className: "follow-btn__dropdown-toggle",
                        "data-a-target": "follow-dropdown-toggle"
                    }, p.createElement(N.U, {
                        justifyContent: N.T.Center,
                        display: N.H.Flex,
                        alignItems: N.c.Stretch,
                        fullHeight: !0
                    }, p.createElement(N._8, {
                        asset: N._9.GlyphArrDown
                    }))), p.createElement(N.p, {
                        size: N.r.Small,
                        direction: n,
                        "data-a-target": "follow-notifications-balloon"
                    }, p.createElement(N.U, {
                        display: N.H.Flex,
                        padding: 1
                    }, p.createElement(N.U, {
                        display: N.H.Flex,
                        margin: {
                            bottom: 1
                        }
                    }, p.createElement(N._21, {
                        type: N._26.H6
                    }, Object(m.d)("You are following {followingName}", {
                        followingName: this.props.data.user.displayName
                    }, "FollowButton"))), p.createElement(N.U, {
                        display: N.H.Flex,
                        flexWrap: N.K.NoWrap,
                        padding: {
                            bottom: 1
                        }
                    }, p.createElement(N.U, {
                        display: N.H.Flex,
                        padding: {
                            right: 2
                        }
                    }, p.createElement("span", null, p.createElement(N._21, {
                        type: N._26.H6
                    }, Object(m.d)("Notifications", "FollowButton")))), p.createElement(N.U, {
                        display: N.H.Flex,
                        flexShrink: 0
                    }, p.createElement(N._29, {
                        onChange: this.toggleNotificationsEnabled,
                        checked: !this.state.disableNotifications,
                        "data-a-target": "notifications-toggle"
                    }))), p.createElement(N.U, {
                        display: N.H.InlineFlex,
                        padding: {
                            bottom: 1
                        }
                    }, p.createElement(N._21, {
                        type: N._26.Span,
                        color: N.F.Alt2
                    }, t))))))
                }, t.prototype.reportInteractive = function() {
                    this.props.isLoggedIn ? this.props.channelLogin && !this.userDataLoaded() || this.props.latencyTracking.reportInteractive() : this.props.latencyTracking.reportInteractive()
                }, t = u.__decorate([Object(f.a)(C, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.isLoggedIn || !e.channelLogin
                    }
                }), Object(f.a)(E, {
                    name: "followUser"
                }), Object(f.a)(T, {
                    name: "unfollowUser"
                }), Object(_.c)("FollowButton")], t)
            }(p.Component),
            w = D,
            I = Object(s.a)(a, r)(w);
        n.d(t, "a", function() {
            return I
        })
    },
    1252: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                isLoggedIn: Object(d.d)(e),
                theme: e.ui.theme
            }
        }

        function a(e) {
            return Object(s.bindActionCreators)({
                logout: l.g,
                login: function() {
                    return l.f(o.a.TopNavLoginButton)
                },
                changeTheme: c.b
            }, e)
        }
        var r = n(6),
            s = n(9),
            o = n(54),
            l = n(39),
            c = n(132),
            d = n(17),
            u = n(0),
            p = n(4),
            m = n(1),
            h = n(2),
            f = n(64),
            g = n(7),
            v = n(31),
            b = n(5),
            k = n(3),
            S = n(1253),
            y = (n(1254), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onCardClick = function() {
                        n.setState({
                            dropdownOpen: !n.state.dropdownOpen
                        })
                    }, n.onClickOut = function() {
                        n.setState({
                            dropdownOpen: !1
                        })
                    }, n.onLoginClick = function(e) {
                        e.preventDefault(), n.props.login()
                    }, n.onLogoutClick = function(e) {
                        e.preventDefault(), n.props.logout()
                    }, n.onDarkModeCheckboxClick = function() {
                        var e = n.props.theme === v.a.Dark ? v.a.Light : v.a.Dark;
                        n.props.changeTheme(e, c.a.UserMenu)
                    }, n.state = {
                        dropdownOpen: !1
                    }, n
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.props.data.loading || this.props.data.error) return m.createElement(k._1, null);
                    if (this.props.isOnboarding) return m.createElement(k.U, {
                        display: k.H.Flex,
                        className: "minimal-top-nav__user",
                        fullHeight: !0
                    }, m.createElement(k.U, {
                        display: k.H.Flex,
                        flexWrap: k.K.NoWrap,
                        alignItems: k.c.Center,
                        flexGrow: 1,
                        padding: {
                            right: 1
                        },
                        fullHeight: !0
                    }, m.createElement(k.U, {
                        margin: {
                            x: 1
                        },
                        flexShrink: 0
                    }, m.createElement(k.U, null, m.createElement(k.l, {
                        size: 30,
                        imageSrc: this.props.data.currentUser.profileImageURL,
                        imageAlt: "User avatar"
                    }))), m.createElement(k.U, {
                        flexGrow: 1,
                        flexShrink: 1,
                        flexDirection: k.J.Column,
                        ellipsis: !0
                    }, m.createElement(k._17, {
                        className: "minimal-top-nav__username"
                    }, this.props.data.currentUser.displayName))));
                    if (this.props.isLoggedIn) {
                        var e = null;
                        this.props.darkModeEnabled && (e = m.createElement(k._17, {
                            borderBottom: !0,
                            margin: {
                                y: 1
                            }
                        }, m.createElement(k.U, {
                            margin: {
                                x: 2,
                                bottom: 1
                            }
                        }, m.createElement(k.E, {
                            id: "dark-mode-toggle",
                            label: Object(h.d)("Dark Mode", "MinimalUser"),
                            "data-a-target": "dark-mode-toggle",
                            "data-test-selector": "dark-mode-toggle",
                            "data-a-value": this.props.theme,
                            checked: this.props.theme === v.a.Dark,
                            onChange: this.onDarkModeCheckboxClick
                        }))));
                        var t = p("theme--dark", {
                                "minimal-top-nav__dropdown-open": this.state.dropdownOpen
                            }),
                            n = p({
                                "minimal-top-nav__dropdown-open": this.state.dropdownOpen
                            }, {
                                "minimal-top-nav__dropdown": !this.state.dropdownOpen
                            });
                        return m.createElement(f.a, {
                            onClickOut: this.onClickOut,
                            className: t
                        }, m.createElement(k.U, {
                            display: k.H.Flex,
                            className: "minimal-top-nav__user",
                            fullHeight: !0
                        }, m.createElement(k.S, {
                            onClick: this.onCardClick,
                            "data-test-selector": "user-menu-toggle"
                        }, m.createElement(k.U, {
                            display: k.H.Flex,
                            flexWrap: k.K.NoWrap,
                            alignItems: k.c.Center,
                            flexGrow: 1,
                            padding: {
                                right: 1
                            },
                            fullHeight: !0
                        }, m.createElement(k.U, {
                            margin: {
                                x: 1
                            },
                            flexShrink: 0
                        }, m.createElement(k.U, null, m.createElement(k.l, {
                            size: 30,
                            imageSrc: this.props.data.currentUser.profileImageURL,
                            imageAlt: "User avatar"
                        }))), m.createElement(k.U, {
                            flexGrow: 1,
                            flexShrink: 1,
                            flexDirection: k.J.Column,
                            ellipsis: !0
                        }, m.createElement(k._17, {
                            className: "minimal-top-nav__username"
                        }, this.props.data.currentUser.displayName)), m.createElement(k._17, {
                            display: k.H.Flex,
                            flexShrink: 0,
                            className: "minimal-top-nav__expand"
                        }, m.createElement(k._8, {
                            asset: k._9.GlyphArrDown
                        }))))), m.createElement(k._17, {
                            fullWidth: !0,
                            overflow: k.Y.Hidden,
                            position: k._2.Absolute,
                            padding: {
                                y: 1
                            },
                            background: k.m.Base,
                            className: n,
                            "data-test-selector": "dropdown-down"
                        }, e, m.createElement(k.S, {
                            onClick: this.onLogoutClick
                        }, m.createElement(k._17, {
                            color: k.F.Alt,
                            display: k.H.Flex,
                            alignItems: k.c.Center,
                            padding: {
                                x: 2,
                                y: .5
                            }
                        }, m.createElement(k.U, {
                            display: k.H.Flex,
                            alignItems: k.c.Center,
                            margin: {
                                right: 1
                            }
                        }, m.createElement(k._8, {
                            asset: k._9.NavLogout,
                            height: 18,
                            width: 18
                        })), m.createElement(k._21, null, Object(h.d)("Log Out", "MinimalUser"))))))
                    }
                    return m.createElement(k.U, {
                        margin: 1
                    }, m.createElement(k.u, {
                        onClick: this.onLoginClick
                    }, Object(h.d)("Log in", "MinimalUser")))
                }, t.prototype.reportInteractive = function() {
                    !this.props.data || this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t = u.__decorate([Object(b.c)("MinimalUser"), Object(g.a)(S)], t)
            }(m.Component)),
            _ = y,
            N = Object(r.a)(i, a)(_);
        n.d(t, "a", function() {
            return N
        })
    },
    1253: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "MinimalTopNav_MinimalUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 110
            }
        };
        n.loc.source = {
            body: "query MinimalTopNav_MinimalUser {\n  currentUser {\n    id\n    displayName\n    profileImageURL(width: 70)\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    1254: function(e, t) {},
    131: function(e, t, n) {
        "use strict";

        function i(e) {
            return void 0 === e && (e = ""), k.test(e)
        }

        function a(e) {
            void 0 === e && (e = "");
            var t = e.match(k);
            if (null === t) return "";
            if (t && t.length > 0 && void 0 !== t.index) {
                return t[1]
            }
            return ""
        }

        function r(e) {
            return void 0 === e && (e = ""), y.test(e)
        }

        function s(e) {
            void 0 === e && (e = "");
            var t = e.match(y);
            if (null === t) return "";
            if (t && t.length > 0 && void 0 !== t.index) {
                return t[1]
            }
            return ""
        }

        function o(e, t, n, i, a, r) {
            void 0 === r && (r = !1);
            var s;
            s = a ? Object(S.b)(e, a) : c(t.emotes);
            var o = Object(_.a)(t.displayName, t.username);
            return {
                badges: t.badges || {},
                bits: t.bits,
                user: f.__assign({}, o, {
                    userLogin: t.username,
                    userID: t.userID,
                    userType: t.userType,
                    color: t.color || l(t.userID)
                }),
                messageParts: e ? d(e, s, t.bits, n, i, o.userDisplayName) : [],
                deleted: r,
                timestamp: Date.now()
            }
        }

        function l(e, t) {
            return void 0 === t && (t = 15), "number" != typeof E[e] && (E[e] = Math.floor(Math.random() * t)), N[E[e]]
        }

        function c(e) {
            var t = [];
            return e && Object.keys(e).forEach(function(n) {
                e[n].forEach(function(e) {
                    t[e.startIndex] = {
                        startIndex: e.startIndex,
                        endIndex: e.endIndex + 1,
                        data: {
                            images: {
                                themed: !1,
                                sources: {
                                    "1x": h(n, 1),
                                    "2x": h(n, 2),
                                    "4x": h(n, 4)
                                }
                            }
                        }
                    }
                })
            }), t
        }

        function d(e, t, n, i, a, r) {
            void 0 === t && (t = []);
            var s = [],
                o = 0,
                l = u(e);
            t.forEach(function(t) {
                var c = l ? l.slice(o, t.startIndex).join("") : e.slice(o, t.startIndex);
                c && (s = n ? s.concat(p(c, r, a, i)) : s.concat(m(c, r, a))), s.push({
                    type: b.a.Emote,
                    content: f.__assign({
                        alt: l ? l.slice(t.startIndex, t.endIndex).join("") : e.slice(t.startIndex, t.endIndex)
                    }, t.data)
                }), o = t.endIndex
            });
            var c = l ? l.slice(o).join("") : e.slice(o);
            return c && (s = n ? s.concat(p(c, r, a, i)) : s.concat(m(c, r, a))), s
        }

        function u(e) {
            var t = /[^\uD800-\uDFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDFFF]/g;
            return e.match(t)
        }

        function p(e, t, n, i) {
            if (!i) return m(e, t, n);
            var a = Object(v.c)(e, i).map(function(e) {
                return e.type === b.a.Text ? m(e.content, t, n) : e
            });
            return [].concat.apply([], a)
        }

        function m(e, t, n) {
            var o = /([^\w@#%\-+=:~])?(?:(https?:\/\/)?(?:[\w@#%\-+=:~]+\.)+[a-z]{2,6}(?:\/[\w.\/@#%&()\-+=:?~]*)?)([^\w.\/@#%&()\-+=:?~]|\s|$)/g,
                l = /([^\w@#%\-+=:~])?(@)([^\u0000-\u007F]+|\w+)+([^\w.\/@#%&()\-+=:?~]|\s|$)/g,
                c = [],
                d = e.split(/\s+/);
            return d.forEach(function(e, u) {
                o.lastIndex = 0;
                var p = o.exec(e);
                l.lastIndex = 0;
                var m = l.exec(e);
                if (p) {
                    var h = p.index,
                        f = !1,
                        v = !1,
                        k = p[1];
                    k && (h += 1, /\s/.test(k) || (f = !0)), 0 !== h && c.push({
                        type: b.a.Text,
                        content: (v ? " " : "") + e.slice(0, h) + (f ? " " : "")
                    }), v = !1;
                    var S = o.lastIndex,
                        y = p[3];
                    if (y && (S -= 1, /\s/.test(y) || (v = !0)), n) c.push({
                        type: b.a.Text,
                        content: " <" + Object(g.d)("deleted link", "CreateMessageData") + "> "
                    });
                    else {
                        var _ = p[2],
                            N = (_ ? "" : "https://") + e.slice(h, S);
                        if (i(N)) {
                            var E = a(N);
                            c.push({
                                type: b.a.ClipLink,
                                content: {
                                    slug: E,
                                    url: N,
                                    displayText: e.slice(h, S)
                                }
                            })
                        } else if (r(N)) {
                            var T = s(N);
                            c.push({
                                type: b.a.VideoLink,
                                content: {
                                    id: T,
                                    url: N,
                                    displayText: e.slice(h, S)
                                }
                            })
                        } else c.push({
                            type: b.a.Link,
                            content: {
                                displayText: e.slice(h, S),
                                url: N
                            }
                        })
                    }
                    var C = e.slice(S),
                        D = "";
                    u < d.length - 1 && (D = " "), C && c.push({
                        type: b.a.Text,
                        content: (v ? " " : "") + C + D
                    })
                } else {
                    if (!m) {
                        var w = c.length && c[c.length - 1],
                            D = "";
                        if (u < d.length - 1 && (D = " "), w && w.type === b.a.Text) w.content += e + D;
                        else {
                            var I = "";
                            u && (I = " "), c.push({
                                type: b.a.Text,
                                content: I + e + D
                            })
                        }
                        return
                    }
                    var P = m[3];
                    c.push({
                        type: b.a.Mention,
                        content: {
                            sender: t,
                            recipient: P
                        }
                    })
                }
            }), c
        }

        function h(e, t) {
            return "https://static-cdn.jtvnw.net/emoticons/v1/" + e + "/" + Math.min(Math.ceil(t), 3) + ".0"
        }
        var f = n(0),
            g = n(2),
            v = n(374),
            b = n(261),
            k = new RegExp("(?:^|\\s)(?:https?://)?clips.twitch.tv/(\\w+)(?:/)?(\\w+)?(?:/edit)?(?:$|\\s)?"),
            S = n(268),
            y = new RegExp("(?:^|\\s)(?:https?://)?(?:(?:www|go).)?twitch.tv/videos/(\\d+)(?:$|\\s)?"),
            _ = n(383);
        t.a = o, t.b = l, t.f = d, t.d = u, t.c = m, t.e = h;
        var N = ["#FF0000", "#0000FF", "#008000", "#B22222", "#FF7F50", "#9ACD32", "#FF4500", "#2E8B57", "#DAA520", "#D2691E", "#5F9EA0", "#1E90FF", "#FF69B4", "#8A2BE2", "#00FF7F"],
            E = {}
    },
    132: function(e, t, n) {
        "use strict";

        function i(e, t, n) {
            return void 0 === n && (n = !0),
                function(i) {
                    i(Object(s.o)(e)), n && Object(r.d)(e), t && Object(o.b)(e, t)
                }
        }
        n.d(t, "a", function() {
            return a
        }), t.b = i;
        var a, r = n(33),
            s = n(58),
            o = n(139);
        ! function(e) {
            e[e.UserMenu = 1] = "UserMenu", e[e.TypedCommand = 2] = "TypedCommand"
        }(a || (a = {}))
    },
    134: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e.Emote = "emote", e.Mention = "mention", e.Hashtag = "hashtag", e.None = "none"
        }(i || (i = {}))
    },
    135: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(1),
            r = n(2),
            s = n(89),
            o = n(3),
            l = (n(491), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.hasDiscount(this.props.subscriptionProducts)) {
                        var e = this.getMessage();
                        return a.createElement(o._17, {
                            textAlign: o._22.Center,
                            className: "sub-discount-banner",
                            padding: 1,
                            color: o.F.Overlay,
                            "data-test-selector": "sub-discount-banner"
                        }, a.createElement(o._21, {
                            bold: !0
                        }, e))
                    }
                    return null
                }, t.prototype.getMessage = function() {
                    var e = Object(s.b)(this.props.subscriptionProducts[0], this.props.isGift);
                    return this.props.isGift ? Object(r.d)("Gift a sub and get {percent} off!", {
                        percent: Object(r.e)(e / 100, "percent")
                    }, "SubDiscountBanner") : Object(r.d)("Get {percent} off the first month of any paid subscription!", {
                        percent: Object(r.e)(e / 100, "percent")
                    }, "SubDiscountBanner")
                }, t.prototype.hasDiscount = function(e) {
                    return this.props.isGift ? Object(s.c)(e) : Object(s.d)(e)
                }, t
            }(a.Component)),
            c = l;
        n.d(t, !1, function() {
            return "sub-discount-banner"
        }), n.d(t, "a", function() {
            return c
        })
    },
    138: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                authToken: Object(o.a)(e)
            }
        }
        var a = n(0),
            r = n(1),
            s = n(6),
            o = n(17),
            l = n(5),
            c = n(141),
            d = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.reportInteractive = function() {
                        t.props.latencyTracking.reportInteractive()
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(c.b, {
                        authToken: this.props.authToken,
                        hostChannelID: this.props.hostChannelID,
                        hostChannelLogin: this.props.hostChannelLogin,
                        channelLogin: this.props.channelLogin,
                        updateContainerWidth: this.props.updateContainerWidth,
                        reportInteractive: this.reportInteractive
                    })
                }, t = a.__decorate([Object(l.c)("SubscribeButton")], t)
            }(r.Component),
            u = Object(s.a)(i)(d);
        n.d(t, !1, function() {
            return d
        }), n.d(t, "b", function() {
            return u
        }), n.d(t, !1, function() {}), n.d(t, "a", function() {
            return c.a
        }), n.d(t, !1, function() {
            return c.b
        })
    },
    139: function(e, t, n) {
        "use strict";

        function i(e, t) {
            var n = "";
            switch (t) {
                case l.a.TypedCommand:
                    n = "typed_command";
                    break;
                case l.a.UserMenu:
                    n = "user_menu";
                    break;
                default:
                    n = "user_menu"
            }
            var i = "";
            switch (e) {
                case s.a.Dark:
                    i = "dark";
                    break;
                case s.a.Light:
                    i = "light";
                    break;
                default:
                    i = "light"
            }
            r.m.track(c.SpadeEventType.ThemeChange, {
                source: n,
                mode: i
            })
        }

        function a(e) {
            switch (e) {
                case o.a.Archive:
                    return c.SpadeVideoBroadcastType.Archive;
                case o.a.Highlight:
                    return c.SpadeVideoBroadcastType.Highlight;
                case o.a.Upload:
                    return c.SpadeVideoBroadcastType.Upload;
                case o.a.WatchParty:
                    return c.SpadeVideoBroadcastType.WatchParty;
                case o.a.PastPremiere:
                    return c.SpadeVideoBroadcastType.PastPremiere;
                case o.a.PremiereUpload:
                    return c.SpadeVideoBroadcastType.PremiereUpload;
                default:
                    return e
            }
        }
        t.b = i, t.a = a;
        var r = n(2),
            s = n(31),
            o = n(263),
            l = n(132),
            c = n(13)
    },
    140: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(4),
            r = n(1),
            s = n(9),
            o = n(2),
            l = n(7),
            c = n(5),
            d = n(281),
            u = n(3),
            p = n(486),
            m = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleChange = function(e) {
                        t.props.onChange(e.target.value)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = null,
                        t = Object(o.d)("Select One...", "ReportUserModal");
                    return e = this.props.data.loading ? [r.createElement("option", {
                        key: "Loading"
                    }, Object(o.d)("Loading...", "ReportReasonsSelect"))] : Object(d.b)(this.props.data.reportReasons).map(function(e) {
                        return r.createElement("option", {
                            key: e.canonical,
                            value: e.canonical
                        }, e.localized)
                    }), r.createElement(u.U, {
                        margin: {
                            bottom: 2
                        }
                    }, r.createElement(u.M, {
                        id: "reporting-modal__select",
                        label: Object(o.d)("Select Reason (required)", "ReportUserModal")
                    }, r.createElement(u._14, {
                        id: "reporting-modal__select",
                        "data-test-selector": "reporting-modal.select",
                        disabled: this.props.data.loading || !!this.props.data.error,
                        onChange: this.handleChange,
                        defaultValue: t
                    }, r.createElement("option", {
                        disabled: !0,
                        key: "default"
                    }, t), e)))
                }, t = i.__decorate([Object(c.c)("ReportReasonSelect")], t)
            }(r.Component),
            h = Object(l.a)(p, {
                options: function(e) {
                    return {
                        variables: {
                            content: e.reportContentType
                        }
                    }
                }
            })(m),
            f = (n(487), n(488));
        n.d(t, "a", function() {
            return v
        }), n.d(t, "b", function() {
            return g
        }), n.d(t, "c", function() {
            return k
        });
        var g, v = "community_rules_violation";
        ! function(e) {
            e[e.Unsubmitted = 0] = "Unsubmitted", e[e.Success = 1] = "Success", e[e.FormError = 2] = "FormError", e[e.MutationError = 3] = "MutationError"
        }(g || (g = {}));
        var b = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        community: null,
                        description: "",
                        reason: null,
                        isCommunityReason: !1,
                        selectedCommunityID: null,
                        selectedCommunityName: null
                    }, t.headerMessage = Object(o.d)("Tell us your concern about this content so that we can review it to determine whether there has been a violation of the {tosLink}. {br} (Abuse of this feature is a violation of the terms of service)", {
                        br: r.createElement("br", null),
                        tosLink: r.createElement("a", {
                            href: "https://www.twitch.tv/p/terms-of-service",
                            target: "_blank"
                        }, Object(o.d)("terms of service", "ReportUser"))
                    }, "ReportUser"), t.selectCommunity = function(e) {
                        t.setState({
                            selectedCommunityID: e.target.value,
                            selectedCommunityName: e.target.name
                        })
                    }, t.handleSubmit = function(e) {
                        e.preventDefault(), t.state.reason && t.state.description.length > 0 ? t.props.onSubmit(t.state.reason || "", t.state.description, t.state.selectedCommunityID, t.state.selectedCommunityName) : t.props.onError(g.FormError)
                    }, t.handleTextAreaChange = function(e) {
                        t.setState({
                            description: e.target.value
                        })
                    }, t.handleReasonChange = function(e) {
                        if (!t.props.data || t.props.data.loading || t.props.data.error || !t.props.data.user) return null;
                        var n = t.props.data.user.directories.nodes.filter(function(e) {
                            return "COMMUNITY" === e.directoryType
                        });
                        n.length && e === v ? t.setState({
                            reason: e,
                            selectedCommunityID: n[0].id,
                            selectedCommunityName: n[0].name,
                            isCommunityReason: !0
                        }) : t.setState({
                            reason: e,
                            isCommunityReason: !1
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(u.U, {
                        display: u.H.Flex,
                        flexDirection: u.J.Column,
                        alignItems: u.c.Center,
                        justifyContent: u.T.Center
                    }, this.renderStatusMessage(), this.renderBody())
                }, t.prototype.renderBody = function() {
                    return this.props.submitStatus === g.Success ? r.createElement("div", null, r.createElement(u.u, {
                        onClick: this.props.onClose
                    }, r.createElement(u.U, {
                        padding: {
                            x: 2
                        }
                    }, Object(o.d)("Close", "ReportUser")))) : r.createElement("div", null, r.createElement(u.U, {
                        "data-test-selector": "reporting.title",
                        margin: {
                            bottom: 1
                        },
                        "data-a-target": "reporting-channel-name"
                    }, r.createElement(u._21, {
                        type: u._26.H4
                    }, this.props.title), r.createElement(u._17, {
                        color: u.F.Alt2,
                        margin: {
                            top: 1
                        }
                    }, this.headerMessage)), r.createElement("form", null, r.createElement(u._17, {
                        borderTop: !0,
                        borderBottom: !0,
                        margin: {
                            y: 2
                        },
                        padding: {
                            y: 2
                        }
                    }, r.createElement(h, {
                        reportContentType: this.props.reportContentType,
                        onChange: this.handleReasonChange
                    }), this.renderCommunitiesSelector(), r.createElement(u.M, {
                        id: "reporting__text-area",
                        label: Object(o.d)("Description (required)", "ReportUser")
                    }, r.createElement(u._23, {
                        defaultValue: this.props.defaultDescription,
                        onChange: this.handleTextAreaChange
                    }))), r.createElement(u._17, {
                        display: u.H.Flex,
                        justifyContent: u.T.Center
                    }, r.createElement(u.u, {
                        onClick: this.handleSubmit
                    }, r.createElement(u.U, {
                        padding: {
                            x: 2
                        }
                    }, Object(o.d)("Send", "ReportUser"))))))
                }, t.prototype.renderCommunitiesSelector = function() {
                    if (!this.props.data || this.props.data.loading || this.props.data.error || !this.props.data.user) return null;
                    if (this.state.isCommunityReason) {
                        var e = this.props.data.user.directories.nodes.filter(function(e) {
                                return "COMMUNITY" === e.directoryType
                            }),
                            t = e.map(function(e) {
                                return r.createElement("option", {
                                    key: e.id,
                                    value: e.id,
                                    name: e.name
                                }, e.displayName)
                            });
                        return r.createElement(u.U, {
                            margin: {
                                bottom: 2
                            }
                        }, r.createElement(u.M, {
                            id: "reporting__select-community",
                            label: Object(o.d)("Community", "ReportUser")
                        }, r.createElement(u._14, {
                            id: "reporting__select-community",
                            "data-test-selector": "reporting.select-community",
                            disabled: this.props.data.loading || !!this.props.data.error,
                            onChange: this.selectCommunity
                        }, t)))
                    }
                }, t.prototype.renderStatusMessage = function() {
                    var e = null;
                    switch (this.props.submitStatus) {
                        case g.FormError:
                            e = Object(o.d)("Reason and Description are required.", "ReportUser");
                            break;
                        case g.MutationError:
                            e = Object(o.d)("Sorry, a network error occurred when submitting your report. Please try again later.", "ReportUser");
                            break;
                        case g.Success:
                            e = Object(o.d)("Thank you for your report.", "ReportUser");
                            break;
                        default:
                            return null
                    }
                    var t = a({
                        "reporting__error-container": this.props.submitStatus !== g.Success,
                        "reporting__success-container": this.props.submitStatus === g.Success
                    });
                    return r.createElement(u._17, {
                        className: t,
                        fullWidth: this.props.submitStatus !== g.Success,
                        "data-test-selector": "reporting.error",
                        margin: {
                            bottom: 2
                        },
                        padding: 1
                    }, e)
                }, t
            }(r.Component),
            k = Object(s.compose)(Object(l.a)(f, {
                options: function(e) {
                    return {
                        fetchPolicy: "network-only",
                        variables: {
                            userId: e.targetUserID
                        }
                    }
                }
            }))(b)
    },
    141: function(e, t, n) {
        "use strict";

        function i(e) {
            var t = new Map;
            return t.set(x.b.Prime, null), e.forEach(function(e, n) {
                t.set(n + 1, e)
            }), t
        }
        var a, r = n(0),
            s = n(1),
            o = n(2),
            l = n(47),
            c = n(7),
            d = n(87),
            u = n(142),
            p = n(106),
            m = n(20),
            h = n(30),
            f = n(18),
            g = n(5),
            v = n(40),
            b = n(66),
            k = n(108),
            S = n(267),
            y = n(28),
            _ = n(48),
            N = n(68),
            E = n(444),
            T = n(49),
            C = n(3),
            D = (n(490), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        selectedUser: null
                    }, t.messages = {
                        noResults: Object(o.d)("No Results", "GiftRecipientSearchResult"),
                        buyGift: Object(o.d)("Buy Gift Subscription", "GiftRecipientSearchResult"),
                        searchHint: Object(o.d)("Start typing to see a list of suggestions here.", "GiftRecipientSearchResult")
                    }, t.reportGiftCheckoutAction = function() {
                        t.props.reportSubMenuAction({
                            action: T.a.BuyGiftSub,
                            checkoutButtonTier: t.props.selectedProductPrice,
                            giftRecipient: t.state.selectedUser ? t.state.selectedUser.login : null
                        })
                    }, t.onUserClick = function(e) {
                        for (var n = e.target; n.parentElement && !n.dataset.user_id;) n = n.parentElement;
                        n.dataset.user_id && n.dataset.user_login && n.dataset.user_name ? t.setState({
                            selectedUser: {
                                id: n.dataset.userId || "",
                                login: n.dataset.user_login || "",
                                name: n.dataset.user_name || ""
                            }
                        }) : t.setState({
                            selectedUser: null
                        })
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    (e.isWaiting || e.isErrored || !e.hasInput) && this.setState({
                        selectedUser: null
                    })
                }, t.prototype.render = function() {
                    var e;
                    return e = this.props.isWaiting ? s.createElement(C.U, {
                        fullHeight: !0
                    }, s.createElement(C.X, {
                        fillContent: !0
                    })) : this.props.hasInput ? this.props.isErrored ? this.getErrorMessage() : this.props.userResults && this.props.userResults.totalHits > 0 ? this.getUserResultContent() : this.getNoResultsMessage() : s.createElement(C.U, {
                        margin: 1
                    }, s.createElement(C._21, {
                        color: C.F.Alt2
                    }, this.messages.searchHint)), s.createElement("div", {
                        onKeyDown: this.props.onKeyDown
                    }, s.createElement(C._17, {
                        className: "gift-recipient-search-result-view",
                        background: C.m.Alt,
                        position: C._2.Relative,
                        overflow: C.Y.Hidden,
                        display: C.H.Block,
                        margin: {
                            bottom: 2
                        },
                        borderLeft: !0,
                        borderBottom: !0,
                        borderRight: !0
                    }, s.createElement(C.P, {
                        overflow: C.Y.Hidden,
                        position: C._2.Relative
                    }, s.createElement(y.b, {
                        suppressScrollX: !0
                    }, s.createElement(C.U, null, e, s.createElement(y.a, {
                        enabled: !this.props.isWaiting && this.props.hasInput,
                        loadMore: this.props.loadMore
                    }))))), this.getBuyGiftButton())
                }, t.prototype.getBuyGiftButton = function() {
                    var e = Object(N.a)(this.props.selectedProductURL, {
                            recipient: this.state.selectedUser ? this.state.selectedUser.login : ""
                        }),
                        t = s.createElement(E.a, {
                            subProductId: this.props.selectedProductId,
                            giftRecipient: this.state.selectedUser ? this.state.selectedUser.login : null,
                            onClick: this.reportGiftCheckoutAction,
                            checkoutURL: e
                        }),
                        n = null;
                    if (this.state.selectedUser) {
                        var i = Object(_.a)(this.state.selectedUser.login || "", this.state.selectedUser.name || "");
                        n = s.createElement(C.P, {
                            margin: {
                                x: 1
                            }
                        }, s.createElement(C._21, null, Object(o.d)("for {displayName}", {
                            displayName: s.createElement(C._21, {
                                bold: !0,
                                type: C._26.Span
                            }, i)
                        }, "GiftRecipientSearchResult")))
                    }
                    return s.createElement(C.U, {
                        display: C.H.Flex,
                        alignItems: C.c.Center,
                        fullWidth: !0
                    }, t, n)
                }, t.prototype.getErrorMessage = function() {
                    return s.createElement(C.U, {
                        fullWidth: !0,
                        textAlign: C._22.Center,
                        justifyContent: C.T.Center
                    }, s.createElement(C._21, null, Object(o.d)("Something went wrong", "GiftRecipientSearchResult")))
                }, t.prototype.getUserResultContent = function() {
                    var e = this;
                    return this.props.userResults ? this.props.userResults.results.map(function(t) {
                        var n = Object(_.a)(t.login || "", t.name || "");
                        return s.createElement(C.S, {
                            tabIndex: -1,
                            "data-ts_selectable": !0,
                            "data-tt_content": !0,
                            key: "git-recipient-result__" + t.id,
                            "data-user_id": t.id,
                            "data-user_login": t.login,
                            "data-user_name": t.name,
                            onClick: e.onUserClick,
                            "data-test-selector": "subscribe-button__gift_search_result"
                        }, s.createElement(C.U, {
                            padding: .5
                        }, s.createElement(C.A, {
                            row: !0
                        }, s.createElement(C.C, {
                            imageAlt: t.thumbnailAltText,
                            imageSrc: t.thumbnail ? t.thumbnail : "",
                            size: C.D.Size4,
                            aspect: C.k.Aspect1x1
                        }), s.createElement(C.B, null, s.createElement(C.P, {
                            padding: {
                                x: 1
                            }
                        }, s.createElement(C._21, {
                            type: C._26.H5,
                            ellipsis: !0
                        }, n))))))
                    }) : s.createElement(C._1, null)
                }, t.prototype.getNoResultsMessage = function() {
                    return s.createElement(C.U, {
                        margin: 1
                    }, s.createElement(C._21, {
                        color: C.F.Alt2
                    }, this.messages.noResults))
                }, t = r.__decorate([Object(g.c)("GiftRecipientSearchResultPanel")], t)
            }(s.Component)),
            w = D,
            I = n(135),
            P = (n(492), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleChange = function(e) {
                        t.props.onChange(e.target.value)
                    }, t
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    if (this.props.selectedSubProduct) {
                        this.formatMessages();
                        var e = this.props.selectedSubProduct ? s.createElement(I.a, {
                                subscriptionProducts: [this.props.selectedSubProduct],
                                isGift: !0
                            }) : null,
                            t = this.props.selectedSubProduct && this.props.selectedSubProduct.giftPromotion ? s.createElement(C._21, {
                                className: "subscription-gift-recipient-search__discount-message"
                            }, this.messages.giftPromo) : null;
                        return s.createElement(C.U, null, e, s.createElement(C.U, {
                            padding: 2,
                            className: "subscription-gift-recipient-search"
                        }, s.createElement(C.U, null, s.createElement(C.U, {
                            display: C.H.Flex,
                            justifyContent: C.T.Between,
                            alignItems: C.c.Center,
                            margin: {
                                bottom: 1
                            }
                        }, s.createElement(C._21, {
                            type: C._26.H4,
                            bold: !0
                        }, this.messages.giftSubscription), s.createElement(C.u, {
                            type: C.z.Text,
                            "data-a-target": "subscribe-back-button",
                            icon: C._9.AngleLeft,
                            onClick: this.props.onBack
                        }, s.createElement(C.U, {
                            alignItems: C.c.Center,
                            display: C.H.InlineFlex
                        }, s.createElement(C._21, null, this.messages.back)))), s.createElement(C.U, null, s.createElement(C._21, null, this.messages.giftSingleMonth), t, s.createElement(C.U, {
                            display: C.H.Flex,
                            justifyContent: C.T.Center,
                            fullWidth: !0,
                            padding: {
                                top: 1
                            }
                        }, s.createElement(C.P, {
                            fullWidth: !0
                        }, s.createElement("div", null, s.createElement(C._11, {
                            onChange: this.handleChange,
                            onKeyDown: this.props.onKeyDown,
                            id: "gift-recipient-search",
                            placeholder: this.messages.searchPlaceholder
                        }), s.createElement(w, {
                            hasInput: this.props.hasInput,
                            userResults: this.props.userResults,
                            isErrored: this.props.isErrored,
                            isWaiting: this.props.isWaiting,
                            loadMore: this.props.loadMore,
                            onKeyDown: this.props.onKeyDown,
                            selectedProductId: this.props.selectedSubProduct.id,
                            selectedProductURL: this.props.selectedSubProduct.url,
                            selectedProductPrice: this.props.selectedSubProduct.price,
                            reportSubMenuAction: this.props.reportSubMenuAction
                        }))))))))
                    }
                    return s.createElement(C._1, null)
                }, t.prototype.formatMessages = function() {
                    var e = this.props.selectedSubProduct && this.props.selectedSubProduct.giftPromotion ? this.props.selectedSubProduct.giftPromotion : null;
                    this.messages = {
                        giftSubscription: Object(o.d)("Choose a Gift Recipient", "GiftRecipientSearch"),
                        giftSingleMonth: Object(o.d)("{subDisplayName}: {giftPrice} Gift Subscription (Single Month)", {
                            subDisplayName: this.props.selectedSubProduct ? this.props.selectedSubProduct.displayName : "",
                            giftPrice: this.props.selectedSubProduct ? this.props.selectedSubProduct.price : ""
                        }, "GiftRecipientSearch"),
                        back: Object(o.d)("Back", "GiftRecipientSearch"),
                        searchPlaceholder: Object(o.d)("Search for a Twitch ID", "GiftRecipientSearch"),
                        giftPromo: Object(o.d)("{price} (Save {percent})", {
                            price: e ? e.newPrice : "",
                            percent: Object(o.e)(e ? e.discountValue / 100 : 0, "percent")
                        }, "GiftRecipientSearch")
                    }
                }, t
            }(s.Component)),
            O = 50,
            F = function(e) {
                function t() {
                    var t = e.call(this) || this;
                    return t.onChange = function(e) {
                        if (t.inputTimer && (clearTimeout(t.inputTimer), t.inputTimer = 0), !e) return void t.setState(t.getEmptyState());
                        t.setState({
                            isWaiting: !0
                        }), t.inputTimer = setTimeout(function() {
                            return t.doSearch(e)
                        }, O)
                    }, t.loadMore = function() {
                        return r.__awaiter(t, void 0, void 0, function() {
                            var e, t, n, i;
                            return r.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        if (this.state.queryID || !0 === this.state.exhaustedHits) return [2];
                                        e = this.state.currentPage + 1, a.label = 1;
                                    case 1:
                                        return a.trys.push([1, 3, , 4]), [4, this.searchClient.queryForType(b.a.Users, this.state.term, "", {
                                            page: e
                                        })];
                                    case 2:
                                        return t = a.sent(), [3, 4];
                                    case 3:
                                        return n = a.sent(), this.setState(r.__assign({}, this.getEmptyState(), {
                                            isErrored: !0,
                                            hasInput: !0
                                        })), [2];
                                    case 4:
                                        return t ? (i = Object(S.b)({
                                            searchResults: t,
                                            append: e > 0,
                                            currentUserResults: this.state.currentUserResults
                                        }), this.setState({
                                            currentUserResults: i.currentUserResults,
                                            term: this.state.term,
                                            hasInput: !0,
                                            isWaiting: !1,
                                            currentPage: e,
                                            exhaustedHits: i.exhaustedHits
                                        }), [2]) : (this.setState(r.__assign({}, this.getEmptyState(), {
                                            isErrored: !0,
                                            hasInput: !0
                                        })), [2])
                                }
                            })
                        })
                    }, t.onKeyDown = function(e) {
                        t.state.term && (e.keyCode === v.a.Esc ? t.setState({
                            hasInput: !1
                        }) : e.keyCode === v.a.Up ? t.focusNext(-1) : e.keyCode === v.a.Down && t.focusNext(1))
                    }, t.state = t.getEmptyState(), t.searchClient = new k.a(o.a.algoliaApplicationID, o.a.algoliaAPIKey), t
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    return s.createElement(P, {
                        onChange: this.onChange,
                        loadMore: this.loadMore,
                        onKeyDown: this.onKeyDown,
                        userResults: this.state.currentUserResults,
                        hasInput: this.state.hasInput,
                        isErrored: this.state.isErrored,
                        isWaiting: this.state.isWaiting,
                        onBack: this.props.onBack,
                        selectedSubProduct: this.props.selectedSubProduct,
                        reportSubMenuAction: this.props.reportSubMenuAction
                    })
                }, t.prototype.getEmptyState = function() {
                    return {
                        currentUserResults: {
                            totalHits: 0,
                            results: []
                        },
                        term: "",
                        hasInput: !1,
                        isErrored: !1,
                        queryID: "",
                        isWaiting: !1,
                        currentPage: -1,
                        focusSelectable: !1,
                        exhaustedHits: !1
                    }
                }, t.prototype.doSearch = function(e) {
                    return r.__awaiter(this, void 0, void 0, function() {
                        var t, n, i, a, s, o;
                        return r.__generator(this, function(l) {
                            switch (l.label) {
                                case 0:
                                    this.inputTimer = 0, t = -1, n = f.a(), i = "INPUT" === document.activeElement.tagName, this.setState({
                                        queryID: n,
                                        focusSelectable: !i && !!this.state.currentFocus
                                    }), l.label = 1;
                                case 1:
                                    return l.trys.push([1, 3, , 4]), t = 0, [4, this.searchClient.queryForType(b.a.Users, e, n)];
                                case 2:
                                    return a = l.sent(), [3, 4];
                                case 3:
                                    return s = l.sent(), this.setState(r.__assign({}, this.getEmptyState(), {
                                        isErrored: !0,
                                        hasInput: !0,
                                        term: e
                                    })), [2];
                                case 4:
                                    return a ? this.state.queryID !== a.id ? [2] : (o = Object(S.b)({
                                        searchResults: a,
                                        append: !1
                                    }), this.setState(function(n) {
                                        return r.__assign({}, n, o, {
                                            queryID: "",
                                            term: e,
                                            hasInput: !0,
                                            isWaiting: !1,
                                            currentPage: t
                                        })
                                    }), [2]) : (this.setState(r.__assign({}, this.getEmptyState(), {
                                        isErrored: !0,
                                        hasInput: !0,
                                        term: e
                                    })), [2])
                            }
                        })
                    })
                }, t.prototype.focusNext = function(e) {
                    var t, n = document.querySelectorAll("[data-ts_selectable=true]"),
                        i = document.activeElement,
                        a = Array.prototype.indexOf.call(n, i);
                    if (t = a < 0 ? e > 0 ? 0 : n.length - 1 : a + e, t < 0 && (t = 0), !(t >= n.length)) {
                        var r = n.item(t);
                        r.focus(), r.tabIndex = 0, this.state.currentFocus && (this.state.currentFocus.tabIndex = -1), this.setState({
                            currentFocus: r
                        })
                    }
                }, t = r.__decorate([Object(g.c)("GiftRecipientSearch")], t)
            }(s.Component),
            U = F,
            R = n(270),
            x = n(109),
            M = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.setMessages()
                }, t.prototype.render = function() {
                    return s.createElement(C.U, {
                        padding: 2
                    }, s.createElement(C.U, null, s.createElement(C.U, {
                        display: C.H.Flex,
                        justifyContent: C.T.Between,
                        alignItems: C.c.Center,
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(C._21, {
                        type: C._26.H4,
                        bold: !0
                    }, this.messages.allSubscriptions), s.createElement(C.u, {
                        type: C.z.Text,
                        "data-a-target": "subscribe-back-button",
                        "data-test-selector": "subscribe-button__back-button",
                        icon: C._9.AngleLeft,
                        onClick: this.props.onBack
                    }, s.createElement(C.U, {
                        alignItems: C.c.Center,
                        display: C.H.InlineFlex
                    }, s.createElement(C._21, null, this.messages.back)))), s.createElement(x.a, {
                        channelDisplayName: this.props.channelDisplayName,
                        onSelectTierTab: this.props.onSelectTierTab,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        subscriptionProducts: this.props.subscriptionProducts,
                        userHasPrime: !1,
                        canPrimeSubscribe: !1,
                        isSubscribed: this.props.isSubscribed
                    })))
                }, t.prototype.setMessages = function() {
                    this.messages = {
                        back: Object(o.d)("Back", "PaidSubOptions"),
                        allSubscriptions: Object(o.d)("All Paid Subscriptions", "PaidSubOptions")
                    }
                }, t
            }(s.Component),
            L = M,
            A = n(276),
            j = n(138),
            B = n(282);
        ! function(e) {
            e[e.Top = 0] = "Top", e[e.SubOptions = 1] = "SubOptions", e[e.GiftOptions = 2] = "GiftOptions", e[e.RecipientSelect = 3] = "RecipientSelect"
        }(a || (a = {}));
        var W = n(89),
            H = n(495),
            V = (n(496), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.handleTopPageSubButtonClick = function() {
                        n.props.reportSubMenuAction({
                            action: T.a.ClickCheckout,
                            checkoutButtonTier: n.messages.tier1Price
                        })
                    }, n.showGiftOptions = function() {
                        n.props.reportSubMenuAction({
                            action: T.a.ClickGiftSubOptions,
                            modalLevel: "second_page"
                        }), n.setState(function() {
                            return {
                                currentPage: a.GiftOptions
                            }
                        })
                    }, n.showSubOptions = function() {
                        n.props.reportSubMenuAction({
                            action: T.a.ClickMoreSubOptions,
                            modalLevel: "second_page"
                        }), n.setState(function() {
                            return {
                                currentPage: a.SubOptions
                            }
                        })
                    }, n.showRecipientSelect = function() {
                        n.setState(function() {
                            return {
                                currentPage: a.RecipientSelect
                            }
                        })
                    }, n.showTop = function() {
                        n.setState(function() {
                            return {
                                currentPage: a.Top
                            }
                        })
                    }, n.goToPreviousPage = function() {
                        return n.props.reportSubMenuAction({
                            action: T.a.ClickBack,
                            modalLevel: n.state.currentPage === a.SubOptions || n.state.currentPage === a.GiftOptions ? "top_page" : "second_page"
                        }), n.state.currentPage === a.SubOptions || n.state.currentPage === a.GiftOptions ? void n.showTop() : n.state.currentPage === a.RecipientSelect ? void n.showGiftOptions() : void 0
                    }, n.onSelectTierTab = function(e) {
                        var t = n.tabToSubProduct.get(e);
                        if (t) {
                            var i = n.props.subscriptionProducts.findIndex(function(e) {
                                return e.price === t.price
                            });
                            i !== n.state.selectedSubProductIndex && n.setState({
                                selectedSubProductIndex: i
                            }), n.props.onSelectTierTab(t.price)
                        } else n.props.onSelectTierTab(j.a)
                    }, n.state = {
                        currentPage: a.Top,
                        selectedSubProductIndex: 0,
                        giftingEnabled: !1
                    }, n.tabToSubProduct = i(t.subscriptionProducts), n
                }
                return r.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.getGiftingExperimentAssignment()
                }, t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (!e.data.error && void 0 === e.subscriptionProducts[0].self && this.isDiscountDataReady(e)) {
                        var t = Object.assign({}, e.data.user.subscriptionProducts);
                        this.props.setPromotionData(t)
                    }
                }, t.prototype.render = function() {
                    return this.setMessages(), this.state.currentPage === a.Top ? this.getTopPage() : this.state.currentPage === a.SubOptions ? this.getPaidOptionsPage() : this.state.currentPage === a.GiftOptions ? this.getGiftOptionsPage() : this.state.currentPage === a.RecipientSelect ? this.getGiftRecipientSearchPage() : this.getTopPage()
                }, t.prototype.getGiftingExperimentAssignment = function() {
                    return r.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return r.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, o.n.experiments.getAssignment("TWILIGHT_SUB_GIFTING")];
                                case 1:
                                    return e = t.sent(), this.setState({
                                        giftingEnabled: "yes" === e
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.getPaidOptionsPage = function() {
                    var e = null;
                    return this.props.subscriptionProducts && (e = s.createElement(I.a, {
                        subscriptionProducts: this.props.subscriptionProducts
                    })), s.createElement(C.U, null, e, s.createElement(L, {
                        onBack: this.goToPreviousPage,
                        channelDisplayName: this.props.channelDisplayName,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        subscriptionProducts: this.props.subscriptionProducts,
                        isSubscribed: !1
                    }))
                }, t.prototype.getGiftOptionsPage = function() {
                    var e = null;
                    return this.props.subscriptionProducts && (e = s.createElement(I.a, {
                        subscriptionProducts: this.props.subscriptionProducts,
                        isGift: !0
                    })), s.createElement(C.U, null, e, s.createElement(C.U, {
                        padding: 2
                    }, s.createElement(R.a, {
                        onBack: this.goToPreviousPage,
                        channelDisplayName: this.props.channelDisplayName,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        subscriptionProducts: this.props.subscriptionProducts,
                        onGiftSelect: this.showRecipientSelect
                    })))
                }, t.prototype.getGiftRecipientSearchPage = function() {
                    return s.createElement(U, {
                        onBack: this.goToPreviousPage,
                        selectedSubProduct: this.props.subscriptionProducts[this.state.selectedSubProductIndex],
                        reportSubMenuAction: this.props.reportSubMenuAction
                    })
                }, t.prototype.getTopPage = function() {
                    var e = null,
                        t = null,
                        n = null,
                        i = this.messages.tier1Price;
                    Object(W.d)(this.props.subscriptionProducts) && (i = Object(W.a)(this.props.subscriptionProducts[0])), (this.props.inPrimeRegion || this.props.userHasPrime) && (n = this.renderPrimeSection()), this.props.isNonStandardSub || (e = s.createElement(C.U, {
                        margin: {
                            right: 1
                        },
                        display: C.H.Inline
                    }, s.createElement(C.u, {
                        ariaLabel: this.messages.seeMoreSubOptions,
                        onClick: this.showSubOptions,
                        type: C.z.Hollow,
                        "data-test-selector": "subscribe-button__more-sub-options-button",
                        "data-a-target": "see-more-sub-options-button"
                    }, this.messages.seeMoreSubOptions))), this.state.giftingEnabled && (t = s.createElement(C.U, {
                        display: C.H.Inline
                    }, s.createElement(C.u, {
                        ariaLabel: this.messages.giftSubscription,
                        onClick: this.showGiftOptions,
                        type: C.z.Hollow,
                        "data-test-selector": "subscribe-button__gift"
                    }, this.messages.giftSubscription)));
                    var a = null;
                    return this.props.subscriptionProducts && (a = s.createElement(I.a, {
                        subscriptionProducts: this.props.subscriptionProducts
                    })), s.createElement(C.U, null, a, s.createElement(C.U, {
                        padding: 2
                    }, n, s.createElement(C.U, null, s.createElement(C._21, {
                        type: C._26.H4,
                        bold: !0
                    }, this.messages.paidSubscription), s.createElement(A.a, {
                        subscriptionProduct: this.props.subscriptionProducts[0]
                    }), s.createElement(C.U, {
                        display: C.H.Flex
                    }, s.createElement(C.U, {
                        margin: {
                            right: 1,
                            top: 1
                        }
                    }, s.createElement(C.u, {
                        ariaLabel: this.messages.subscribeTier1,
                        "data-a-target": "tier1-subscribe-button",
                        "data-test-selector": "subscribe-button__top-page-sub-button",
                        linkTo: this.props.subscriptionProducts[0].url,
                        onClick: this.handleTopPageSubButtonClick,
                        purchase: i,
                        targetBlank: !0
                    }, this.messages.subscribe)))), s.createElement(C.U, {
                        margin: {
                            right: 1,
                            top: 2
                        }
                    }, e, t)))
                }, t.prototype.renderPrimeSection = function() {
                    var e = this.props.userHasPrime ? this.messages.useFreeChannelSub : this.messages.primeUpsell;
                    return s.createElement(C.U, {
                        margin: {
                            bottom: 2
                        }
                    }, s.createElement(C.U, {
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(C._21, {
                        type: C._26.H4,
                        bold: !0
                    }, this.messages.freeSubWithPrime)), s.createElement(C.U, null, s.createElement(C.U, {
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(C._21, null, e)), s.createElement(B.a, {
                        authToken: this.props.authToken,
                        "data-a-target": "subscribe-with-prime-button",
                        isSubscribed: !1,
                        isSubscribedWithPrime: !1,
                        onSubscribedWithPrime: this.props.onSubscribedWithPrime,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        subLogin: this.props.subLogin,
                        userHasPrime: this.props.userHasPrime,
                        canPrimeSubscribe: this.props.canPrimeSubscribe
                    })))
                }, t.prototype.setMessages = function() {
                    var e = this.props.subscriptionProducts[0].price;
                    Object(W.d)(this.props.subscriptionProducts) && (e = Object(W.a)(this.props.subscriptionProducts[0])), this.messages = {
                        useFreeChannelSub: Object(o.d)("Use your free channel subscription to directly support your favorite streamer. {upsellTextLink}", {
                            upsellTextLink: s.createElement("a", {
                                href: "https://help.twitch.tv/customer/en/portal/articles/2572060-twitch-prime-guide",
                                target: "_blank"
                            }, Object(o.d)("Learn more about your free sub", "BalloonNonSubbedUser"))
                        }, "BalloonNonSubbedUser"),
                        primeUpsell: Object(o.d)("{upsellTextBold}, plus get free game loot every month, ad-free viewing, and loads more with Twitch Prime.", {
                            upsellTextBold: s.createElement("strong", null, Object(o.d)("Support your favorite streamer", "BalloonNonSubbedUser"))
                        }, "BalloonNonSubbedUser"),
                        freeSubWithPrime: Object(o.d)("Free Channel Sub with Twitch Prime", "BalloonNonSubbedUser"),
                        changeSubscription: Object(o.d)("Change Your Subscription", "BalloonNonSubbedUser"),
                        seeMoreSubOptions: Object(o.d)("More Paid Subscription Options", "BalloonNonSubbedUser"),
                        tier1Price: Object(o.d)("{tier1Price}", {
                            tier1Price: e
                        }, "BalloonNonSubbedUser"),
                        paidSubscription: Object(o.d)("Paid Subscription", "BalloonNonSubbedUser"),
                        tier1PricePerMonth: Object(o.d)("{price} / Month", {
                            price: this.props.subscriptionProducts[0].price
                        }, "BalloonNonSubbedUser"),
                        subscribeTier1: Object(o.d)("Subscribe {tier1Price}", {
                            tier1Price: e
                        }, "BalloonNonSubbedUser"),
                        subscribeToUser: Object(o.d)("Subscribe to {username}", {
                            username: this.props.channelDisplayName
                        }, "BalloonNonSubbedUser"),
                        subscribe: Object(o.d)("Subscribe", "BalloonNonSubbedUser"),
                        back: Object(o.d)("Back", "BalloonNonSubbedUser"),
                        allSubscriptions: Object(o.d)("All Paid Subscriptions", "BalloonNonSubbedUser"),
                        chooseGiftSubscription: Object(o.d)("Choose A Gift Subscription", "BalloonNonSubbedUser"),
                        discountMessage: Object(o.d)("{price} for the first month (Save 50%)", {
                            price: e
                        }, "BalloonNonSubbedUser"),
                        giftSubscription: Object(o.d)("Gift a Subscription", "BalloonNonSubbedUser"),
                        giftDiscountDisclaimer: Object(o.d)("Promotions do not apply to Gift Subscriptions", "BalloonNonSubbedUser")
                    }
                }, t.prototype.isDiscountDataReady = function(e) {
                    return e.data.user.subscriptionProducts.some(function(e) {
                        return !(!e || !(e.self && e.self.promotion || e.giftPromotion))
                    })
                }, t = r.__decorate([Object(c.a)(H, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(g.c)("BalloonNonSubbedUser")], t)
            }(s.Component)),
            G = V,
            q = n(497),
            z = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.showTop = function() {
                        n.setState(function() {
                            return {
                                currentPage: a.Top
                            }
                        })
                    }, n.showRecipientSelect = function() {
                        n.setState(function() {
                            return {
                                currentPage: a.RecipientSelect
                            }
                        })
                    }, n.showGiftOptions = function() {
                        n.props.reportSubMenuAction({
                            action: T.a.ClickGiftSubOptions
                        }), n.setState(function() {
                            return {
                                currentPage: a.GiftOptions
                            }
                        })
                    }, n.showSubOptions = function() {
                        n.setState(function() {
                            return {
                                currentPage: a.SubOptions
                            }
                        })
                    }, n.goToPreviousPage = function() {
                        return n.state.currentPage === a.GiftOptions || n.state.currentPage === a.SubOptions || n.state.giftShortcut ? (n.showTop(), void n.setState({
                            giftShortcut: !1
                        })) : n.state.currentPage === a.RecipientSelect ? void n.showGiftOptions() : void 0
                    }, n.onGiftSelect = function() {
                        n.props.reportSubMenuAction({
                            action: T.a.GiftASub,
                            checkoutButtonTier: n.props.subscriptionProducts[0].price
                        }), n.setState({
                            selectedSubProductIndex: 0,
                            giftShortcut: !0
                        }), n.showRecipientSelect()
                    }, n.handleTopPageSubButtonClick = function() {
                        n.props.reportSubMenuAction({
                            action: T.a.ClickCheckout,
                            checkoutButtonTier: n.props.subscriptionProducts[0].price
                        })
                    }, n.onSelectTierTab = function(e) {
                        var t = n.tabToSubProduct.get(e);
                        if (t) {
                            var i = n.props.subscriptionProducts.findIndex(function(e) {
                                return e.price === t.price
                            });
                            i !== n.state.selectedSubProductIndex && n.setState({
                                selectedSubProductIndex: i
                            }), n.props.onSelectTierTab(t.price)
                        } else n.props.onSelectTierTab(j.a)
                    }, n.state = {
                        currentPage: a.Top,
                        selectedSubProductIndex: 0,
                        giftShortcut: !1
                    }, n.tabToSubProduct = i(t.subscriptionProducts), n
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (!e.data.error && void 0 === e.subscriptionProducts[0].self && this.isDiscountDataReady(e)) {
                        var t = Object.assign({}, e.data.user.subscriptionProducts);
                        this.props.setPromotionData(t)
                    }
                }, t.prototype.render = function() {
                    return this.setMessages(), this.state.currentPage === a.Top ? this.getTopPage() : this.state.currentPage === a.SubOptions ? this.getSubOptionsPage() : this.state.currentPage === a.GiftOptions ? this.getGiftOptionsPage() : this.state.currentPage === a.RecipientSelect ? this.getGiftRecipientSearchPage() : this.getTopPage()
                }, t.prototype.getGiftRecipientSearchPage = function() {
                    return s.createElement(U, {
                        onBack: this.goToPreviousPage,
                        selectedSubProduct: this.props.subscriptionProducts[this.state.selectedSubProductIndex],
                        reportSubMenuAction: this.props.reportSubMenuAction
                    })
                }, t.prototype.getGiftOptionsPage = function() {
                    var e = null;
                    return this.props.subscriptionProducts && (e = s.createElement(I.a, {
                        subscriptionProducts: this.props.subscriptionProducts,
                        isGift: !0
                    })), s.createElement(C.U, null, e, s.createElement(C.U, {
                        padding: 2
                    }, s.createElement(R.a, {
                        onBack: this.goToPreviousPage,
                        channelDisplayName: this.props.channelDisplayName,
                        subscriptionProducts: this.props.subscriptionProducts,
                        onGiftSelect: this.showRecipientSelect,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.props.reportSubMenuAction
                    })))
                }, t.prototype.getSubOptionsPage = function() {
                    return s.createElement(L, {
                        onBack: this.goToPreviousPage,
                        channelDisplayName: this.props.channelDisplayName,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        subscriptionProducts: this.props.subscriptionProducts,
                        isSubscribed: !0
                    })
                }, t.prototype.getTopPageGiftSection = function() {
                    var e = this.props.subscriptionProducts[0].price;
                    return Object(W.c)(this.props.subscriptionProducts) && (e = Object(W.a)(this.props.subscriptionProducts[0], !0)), s.createElement(C.U, null, s.createElement(C._21, {
                        type: C._26.H4,
                        bold: !0
                    }, this.messages.helpGrow), s.createElement(C.U, {
                        margin: {
                            top: 1,
                            bottom: 1
                        },
                        display: C.H.Flex
                    }, s.createElement(C.u, {
                        ariaLabel: this.messages.giftSubscription + " " + e,
                        onClick: this.onGiftSelect,
                        purchase: e
                    }, this.messages.giftSubscription), s.createElement(C.U, {
                        margin: {
                            left: 1
                        }
                    }, s.createElement(C.u, {
                        ariaLabel: this.messages.giftOptions,
                        onClick: this.showGiftOptions,
                        type: C.z.Hollow
                    }, this.messages.giftOptions))))
                }, t.prototype.getTopPageUpgradeSection = function() {
                    return s.createElement(C.U, null, s.createElement(C._21, {
                        type: C._26.H4,
                        bold: !0
                    }, this.messages.upgradeSubscription), s.createElement(x.a, {
                        authToken: this.props.authToken,
                        onSubscribedWithPrime: this.props.onSubscribedWithPrime,
                        subLogin: this.props.subLogin,
                        userHasPrime: this.props.userHasPrime,
                        canPrimeSubscribe: this.props.canPrimeSubscribe,
                        channelDisplayName: this.props.channelDisplayName,
                        onSelectTierTab: this.onSelectTierTab,
                        subbedTier: this.props.subbedTier,
                        subscriptionProducts: this.props.subscriptionProducts,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        onGiftSelect: this.showRecipientSelect,
                        isSubscribed: !0
                    }))
                }, t.prototype.getGiftInfoSection = function() {
                    var e, t, n = null;
                    return this.props.giftPaidUpgrade ? (e = this.messages.yourSubscription, t = this.messages.giftInfo, n = this.messages.giftUpgradeInfo) : (e = this.messages.yourGiftSub, t = this.messages.giftInfoWithExpiration), s.createElement(C.U, null, s.createElement(C._21, {
                        bold: !0,
                        type: C._26.H4
                    }, e), s.createElement(C.P, {
                        margin: {
                            y: 1
                        }
                    }, s.createElement(C._21, null, t)), n)
                }, t.prototype.getGiftExtendSection = function() {
                    var e = null,
                        t = null;
                    return this.props.isNonStandardSub || (e = s.createElement(C.U, {
                        margin: {
                            right: 1
                        },
                        display: C.H.Inline
                    }, s.createElement(C.u, {
                        ariaLabel: this.messages.seeMoreSubOptions,
                        onClick: this.showSubOptions,
                        type: C.z.Hollow,
                        "data-a-target": "see-more-sub-options-button"
                    }, this.messages.seeMoreSubOptions))), t = s.createElement(C.U, {
                        display: C.H.Inline
                    }, s.createElement(C.u, {
                        ariaLabel: this.messages.giftSubscription,
                        onClick: this.showGiftOptions,
                        type: C.z.Hollow
                    }, this.messages.giftSubscription)), s.createElement(C.U, null, s.createElement(C.U, {
                        margin: {
                            top: 1
                        }
                    }, s.createElement(C._21, {
                        type: C._26.H4,
                        bold: !0
                    }, this.messages.extendSubscription), s.createElement(C.P, {
                        margin: {
                            top: 1
                        }
                    }, s.createElement(C._21, null, this.messages.tier1PricePerMonth)), s.createElement(C.U, {
                        margin: {
                            right: 1,
                            top: 1
                        }
                    }, s.createElement(C.u, {
                        ariaLabel: this.props.subscriptionProducts[0].price,
                        "data-a-target": "tier1-subscribe-button",
                        linkTo: this.props.subscriptionProducts[0].url,
                        onClick: this.handleTopPageSubButtonClick,
                        purchase: this.props.subscriptionProducts[0].price,
                        targetBlank: !0
                    }, this.messages.subscribe))), s.createElement(C.U, {
                        margin: {
                            right: 1,
                            top: 2
                        }
                    }, e, t))
                }, t.prototype.getTopPage = function() {
                    var e = null,
                        t = null;
                    this.props.userHasGiftSub ? this.props.userHasGiftSub && !this.props.giftPaidUpgrade ? (e = this.getGiftInfoSection(), t = this.getGiftExtendSection()) : (e = this.getGiftInfoSection(), t = this.getTopPageGiftSection()) : (e = this.getTopPageGiftSection(), t = this.getTopPageUpgradeSection());
                    var n = null;
                    return this.props.subscriptionProducts && (n = s.createElement(I.a, {
                        subscriptionProducts: this.props.subscriptionProducts,
                        isGift: !0
                    })), s.createElement(C.U, null, n, s.createElement(C.U, {
                        className: "channel-header__subscription-modal-main",
                        padding: 2
                    }, s.createElement(C.U, {
                        margin: {
                            bottom: 2
                        }
                    }, e), t))
                }, t.prototype.setMessages = function() {
                    var e;
                    switch (this.props.subbedTier) {
                        case u.a.Tier1:
                            e = this.props.subscriptionProducts[0].price;
                            break;
                        case u.a.Tier2:
                            e = this.props.subscriptionProducts[1].price;
                            break;
                        case u.a.Tier3:
                            e = this.props.subscriptionProducts[2].price;
                            break;
                        default:
                            e = this.props.subscriptionProducts[0].price
                    }
                    this.messages = {
                        upgradeSubscription: Object(o.d)("Upgrade Your Subscription", "BalloonSubbedUser"),
                        helpGrow: Object(o.d)("Help Grow {streamer}'s Community", {
                            streamer: this.props.channelDisplayName
                        }, "BalloonSubbedUser"),
                        giftSubscription: Object(o.d)("Gift A Subscription", "BalloonSubbedUser"),
                        giftOptions: Object(o.d)("More Gift Options", "BalloonSubbedUser"),
                        chooseGiftSubscription: Object(o.d)("Choose A Gift Subscription", "BalloonSubbedUser"),
                        back: Object(o.d)("Back", "BalloonSubbedUser"),
                        yourSubscription: Object(o.d)("Your Subscription", "BalloonSubbedUser"),
                        extendSubscription: Object(o.d)("Extend Your Subscription", "BalloonSubbedUser"),
                        yourGiftSub: Object(o.d)("Your Gift Subscription", "BalloonSubbedUser"),
                        seeMoreSubOptions: Object(o.d)("More Paid Subscription Options", "BalloonSubbedUser"),
                        subscribe: Object(o.d)("Subscribe", "BalloonSubbedUser"),
                        giftInfo: Object(o.d)("{giftPrice} Gift Subscription from {giftSender}", {
                            giftPrice: e,
                            giftSender: s.createElement(C._21, {
                                bold: !0,
                                type: C._26.Span
                            }, this.props.giftSender || "")
                        }, "BalloonSubbedUser"),
                        giftUpgradeInfo: Object(o.d)("Your new {upgradePrice} Paid Subscription will begin on {subStartDate}", {
                            upgradePrice: this.props.giftPaidUpgrade ? this.props.giftPaidUpgrade.price : "",
                            subStartDate: this.getFormattedGiftUpgradeStartDate()
                        }, "BalloonSubbedUser"),
                        giftInfoWithExpiration: Object(o.d)("{giftPrice} Subscription from {giftSender} - Benefits expire on {giftEndDate}", {
                            giftPrice: e,
                            giftSender: s.createElement(C._21, {
                                bold: !0,
                                type: C._26.Span
                            }, this.props.giftSender || ""),
                            giftEndDate: this.getFormattedGiftEndDate()
                        }, "BalloonSubbedUser"),
                        tier1PricePerMonth: Object(o.d)("{price} / Month", {
                            price: this.props.subscriptionProducts[0].price
                        }, "BalloonSubbedUser"),
                        allSubscriptions: Object(o.d)("All Paid Subscriptions", "BalloonSubbedUser")
                    }
                }, t.prototype.getFormattedGiftUpgradeStartDate = function() {
                    return this.props.giftPaidUpgrade && this.props.giftPaidUpgrade.startsAt ? this.getLongDateFormat(this.props.giftPaidUpgrade.startsAt) : ""
                }, t.prototype.getFormattedGiftEndDate = function() {
                    return this.props.giftSubEndDate ? this.getLongDateFormat(this.props.giftSubEndDate) : ""
                }, t.prototype.getLongDateFormat = function(e) {
                    var t = "";
                    try {
                        t = Object(o.c)(new Date(e), {
                            month: "long",
                            day: "numeric"
                        })
                    } catch (e) {
                        o.i.debug(e, "There was an error formatting gift upgrade start date."), t = ""
                    }
                    return t
                }, t.prototype.isDiscountDataReady = function(e) {
                    return e.data.user.subscriptionProducts.some(function(e) {
                        return !(!e || !(e.self && e.self.promotion || e.giftPromotion))
                    })
                }, t = r.__decorate([Object(c.a)(q, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.subLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.subLogin
                    }
                }), Object(g.c)("BalloonSubbedUser")], t)
            }(s.Component),
            $ = z,
            K = (n(498), n(499));
        n.d(t, "a", function() {
            return Q
        }), n.d(t, "b", function() {
            return J
        });
        var Q = "prime",
            Y = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isSubscribed: !1,
                        activeTierPrice: Q,
                        subbedTier: null,
                        subData: null,
                        inPrimeRegion: !1,
                        isNonStandardSub: !1,
                        isGiftSub: !1,
                        hasReconciledUser: !1,
                        subGiftingEnabled: !1
                    }, t.modalLevel = "top_page", t.reportSubMenuAction = function(e) {
                        Object(T.b)({
                            action: e.action || "",
                            channelLogin: t.props.channelLogin || "",
                            channelID: t.props.data && t.props.data.user.id,
                            checkoutButtonTier: e.checkoutButtonTier || t.state.activeTierPrice.slice(),
                            hasSubCredit: !!t.props.data.user.self && t.props.data.user.self.canPrimeSubscribe,
                            hostChannelID: t.props.hostChannelID,
                            hostChannelLogin: t.props.hostChannelLogin,
                            isMenuOpen: !(e.action === T.a.OpenSubMenu),
                            sub_location: "channel_page",
                            modal: !t.state.isSubscribed,
                            modalLevel: t.state.isSubscribed ? "" : t.modalLevel.slice(),
                            showPrimeContent: t.state.inPrimeRegion,
                            giftRecipient: e.giftRecipient || null
                        }), !e.modalLevel || e.action !== T.a.ClickMoreSubOptions && e.action !== T.a.ClickBack || (t.modalLevel = e.modalLevel, t.setState({
                            activeTierPrice: Q
                        }))
                    }, t.handleMenuToggle = function(e) {
                        t.reportSubMenuAction({
                            action: e ? T.a.CloseSubMenu : T.a.OpenSubMenu
                        })
                    }, t.onSelectTierTab = function(e) {
                        t.state.activeTierPrice !== e && t.setState({
                            activeTierPrice: e
                        })
                    }, t.onSubscribedWithPrime = function() {
                        t.reportSubMenuAction({
                            action: T.a.SubWithPrime
                        }), t.modalLevel = "", t.setState({
                            isSubscribed: !0,
                            subbedTier: u.a.Prime
                        }), Object(m.d)(K, {
                            login: t.props.channelLogin
                        }, function(e) {
                            return e.user && e.user.self && (e.user.self.canPrimeSubscribe = !1, e.user.self.subscriptionBenefit = {
                                id: Object(f.a)(),
                                purchasedWithPrime: !0,
                                tier: Q,
                                endsAt: null,
                                paidUpgrade: null,
                                gift: {
                                    isGift: !1,
                                    gifter: null,
                                    __typename: "SubscriptionGift"
                                },
                                __typename: "SubscriptionBenefit"
                            }), e
                        })
                    }, t.setMessages = function() {
                        var e;
                        e = t.state.subGiftingEnabled ? Object(o.d)("Gift A Sub", "SubscribeButton") : Object(o.d)("Subscribed", "SubscribeButton"), t.messages = {
                            subscribe: t.props.hostChannelID ? Object(o.d)("Subscribe to {username}", {
                                username: t.props.data.user.displayName
                            }, "SubscribeButton") : Object(o.d)("Subscribe", "SubscribeButton"),
                            subscribed: t.props.hostChannelID ? Object(o.d)("Subscribed to {username}", {
                                username: t.props.data.user.displayName
                            }, "SubscribeButton") : e,
                            discountMessage: Object(o.d)("Get 50% off the first month of any paid Subscription", "SubscribeButton")
                        }
                    }, t.setPromotionData = function(e) {
                        if (t.state) {
                            var n = Object.assign({}, t.state.subData);
                            if (null !== n) {
                                for (var i = [], a = 0; a < 3; a++) {
                                    var r = Object.assign({}, n.subscriptionProducts[a]);
                                    r.self = e[a].self, r.giftPromotion = e[a].giftPromotion, i.push(r)
                                }
                                n.subscriptionProducts = i, t.setState({
                                    subData: n
                                })
                            }
                        }
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.getGiftingExperimentAssignment()
                }, t.prototype.componentWillUnmount = function() {
                    this.props.reportInteractive()
                }, t.prototype.componentDidMount = function() {
                    this.props.reportInteractive && this.isUserDataReady(this.props) && this.props.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.props.channelLogin && !this.isUserDataReady(this.props) || !this.props.updateContainerWidth || this.props.updateContainerWidth(), this.props.reportInteractive && this.props.data && !this.props.data.loading && this.props.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (this.isUserDataReady(e) && e.pubsub.messages.subscriptionInfo !== this.props.pubsub.messages.subscriptionInfo && this.props.data.refetch(), this.props.channelLogin !== e.channelLogin && this.setState({
                            subData: null,
                            isSubscribed: !1,
                            hasReconciledUser: !1
                        }), this.isUserDataReady(e) && this.hasSubscriptionProducts(e)) {
                        if (!this.state.inPrimeRegion && e.data.requestInfo && Object(p.b)(e.data.requestInfo.countryCode) && this.setState({
                                inPrimeRegion: !0
                            }), e.data.currentUser && this.isOwnChannel(e)) return void this.setState({
                            hasReconciledUser: !0
                        });
                        if (this.setState({
                                subData: e.data.user,
                                isNonStandardSub: 1 === e.data.user.subscriptionProducts.length
                            }), e.data.user.subscriptionProducts.some(this.isSubscriptionProductInvalid) && this.setState({
                                isNonStandardSub: !0
                            }), e.data.currentUser && e.data.user.self)
                            if (e.data.user.self.subscriptionBenefit) {
                                var t = e.data.user.self.subscriptionBenefit.purchasedWithPrime ? Q : e.data.user.self.subscriptionBenefit.tier;
                                this.modalLevel = "";
                                var n = e.data.user.self.subscriptionBenefit.gift.isGift;
                                this.setState({
                                    isSubscribed: !0,
                                    subbedTier: t,
                                    hasReconciledUser: !0,
                                    isGiftSub: n
                                })
                            } else this.setState({
                                isSubscribed: !1,
                                hasReconciledUser: !0
                            });
                        else this.setState({
                            hasReconciledUser: !0
                        })
                    }
                }, t.prototype.render = function() {
                    if (!this.shouldRender() || !this.hasSubscriptionProducts(this.props)) return null;
                    if (this.setMessages(), this.props.data.currentUser && this.state.isSubscribed && this.state.isNonStandardSub) return s.createElement(C.u, {
                        disabled: !0,
                        ariaLabel: this.messages.subscribed,
                        icon: C._9.Star
                    }, this.messages.subscribed);
                    var e = this.state.subbedTier === u.a.Prime ? C._9.Crown : C._9.Star,
                        t = this.state.isSubscribed ? this.messages.subscribed : this.messages.subscribe,
                        n = this.state.isSubscribed ? "subscribed-button" : "subscribe-button",
                        i = s.createElement(C.u, {
                            "data-a-target": n,
                            "data-test-selector": "subscribe-button__dropdown",
                            ariaLabel: t,
                            type: this.state.isSubscribed ? C.z.Success : C.z.Default,
                            dropdown: !0,
                            icon: this.state.isSubscribed ? e : void 0
                        }, t),
                        a = this.props.hostChannelID ? C.q.TopLeft : C.q.BottomRight;
                    return s.createElement(l.a, {
                        onToggle: this.handleMenuToggle
                    }, i, s.createElement(C.p, {
                        size: C.r.Large,
                        direction: a,
                        "data-a-target": "sub-balloon"
                    }, this.renderBalloonContent()))
                }, t.prototype.renderBalloonContent = function() {
                    return this.state.subData ? (o.i.debug("rendering sub balloon", {
                        state: this.state
                    }), this.props.data.currentUser ? this.state.isSubscribed ? s.createElement($, {
                        authToken: this.props.authToken,
                        canPrimeSubscribe: !!this.props.data.user.self && this.props.data.user.self.canPrimeSubscribe,
                        channelDisplayName: this.state.subData.displayName,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.reportSubMenuAction,
                        subbedTier: this.state.subbedTier,
                        isNonStandardSub: this.state.isNonStandardSub,
                        subscriptionProducts: this.state.subData.subscriptionProducts,
                        onSubscribedWithPrime: this.onSubscribedWithPrime,
                        userHasPrime: this.props.data.currentUser.hasPrime,
                        userHasGiftSub: this.state.isGiftSub,
                        subLogin: this.state.subData.login,
                        giftSubEndDate: this.props.data.user.self && this.props.data.user.self.subscriptionBenefit ? this.props.data.user.self.subscriptionBenefit.endsAt : void 0,
                        giftPaidUpgrade: this.props.data.user.self && this.props.data.user.self.subscriptionBenefit && this.props.data.user.self.subscriptionBenefit.paidUpgrade ? this.props.data.user.self.subscriptionBenefit.paidUpgrade : void 0,
                        giftSender: this.getGiftSender(),
                        setPromotionData: this.setPromotionData
                    }) : s.createElement(C.U, null, s.createElement(G, {
                        authToken: this.props.authToken,
                        channelDisplayName: this.state.subData.displayName,
                        channelLogin: this.props.channelLogin,
                        canPrimeSubscribe: !!this.props.data.user.self && this.props.data.user.self.canPrimeSubscribe,
                        inPrimeRegion: this.state.inPrimeRegion,
                        isNonStandardSub: this.state.isNonStandardSub,
                        onSelectTierTab: this.onSelectTierTab,
                        onSubscribedWithPrime: this.onSubscribedWithPrime,
                        reportSubMenuAction: this.reportSubMenuAction,
                        subLogin: this.state.subData.login,
                        subscriptionProducts: this.state.subData.subscriptionProducts,
                        userHasPrime: this.props.data.currentUser.hasPrime,
                        setPromotionData: this.setPromotionData
                    })) : s.createElement(G, {
                        authToken: this.props.authToken,
                        channelDisplayName: this.state.subData.displayName,
                        channelLogin: this.props.channelLogin,
                        canPrimeSubscribe: !!this.props.data.user.self && this.props.data.user.self.canPrimeSubscribe,
                        inPrimeRegion: this.state.inPrimeRegion,
                        isNonStandardSub: this.state.isNonStandardSub,
                        onSelectTierTab: this.onSelectTierTab,
                        onSubscribedWithPrime: this.onSubscribedWithPrime,
                        reportSubMenuAction: this.reportSubMenuAction,
                        subLogin: this.state.subData.login,
                        subscriptionProducts: this.state.subData.subscriptionProducts,
                        userHasPrime: !1,
                        setPromotionData: this.setPromotionData
                    })) : (o.i.debug("NOT rendering sub balloon; sub data not yet ready", {
                        state: this.state
                    }), null)
                }, t.prototype.hasSubscriptionProducts = function(e) {
                    return e.data.user.subscriptionProducts && e.data.user.subscriptionProducts.length > 0
                }, t.prototype.shouldRender = function() {
                    return !!this.isUserDataReady(this.props) && (!this.hasSubscriptionProducts(this.props) || !!this.isSubscriptionReady())
                }, t.prototype.isUserDataReady = function(e) {
                    return e.data && e.data.user && !e.data.loading && !e.data.error
                }, t.prototype.isOwnChannel = function(e) {
                    return e.data.user.id === (e.data.currentUser && e.data.currentUser.id)
                }, t.prototype.isSubscriptionReady = function() {
                    return this.state.subData && this.state.hasReconciledUser
                }, t.prototype.getGiftSender = function() {
                    return this.state.isGiftSub && this.props.data.user.self && this.props.data.user.self.subscriptionBenefit && this.props.data.user.self.subscriptionBenefit.gift.isGift ? this.props.data.user.self.subscriptionBenefit.gift.gifter.displayName : null
                }, t.prototype.getGiftingExperimentAssignment = function() {
                    return r.__awaiter(this, void 0, void 0, function() {
                        var e, t;
                        return r.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    e = "no", n.label = 1;
                                case 1:
                                    return n.trys.push([1, 3, , 4]), [4, o.n.experiments.getAssignment("TWILIGHT_SUB_GIFTING")];
                                case 2:
                                    return e = n.sent(), [3, 4];
                                case 3:
                                    return t = n.sent(), e = "no", [3, 4];
                                case 4:
                                    return this.setState({
                                        subGiftingEnabled: "yes" === e
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.isSubscriptionProductInvalid = function(e) {
                    return !e.emoteSetID
                }, t = r.__decorate([Object(c.a)(K, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(d.a)([{
                    topic: function(e) {
                        return Object(h.n)(e.data.currentUser && e.data.currentUser.id || "")
                    },
                    mapMessageTypesToProps: {
                        "*": "subscriptionInfo"
                    },
                    skip: function(e) {
                        return !(e.data && !e.data.loading && !e.data.error && e.data.currentUser)
                    }
                }])], t)
            }(s.Component),
            J = Y
    },
    142: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        });
        var i;
        ! function(e) {
            e[e.PercentOff = 0] = "PercentOff"
        }(i || (i = {}));
        var a = {
            Prime: "prime",
            Tier1: "1000",
            Tier2: "2000",
            Tier3: "3000"
        }
    },
    143: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return h
        }), n.d(t, "a", function() {
            return f
        }), n.d(t, "d", function() {
            return i
        }), n.d(t, "c", function() {
            return g
        });
        var i, a = n(0),
            r = n(4),
            s = (n.n(r), n(291)),
            o = (n.n(s), n(1)),
            l = (n.n(o), n(2)),
            c = n(292),
            d = n(293),
            u = n(5),
            p = n(3),
            m = n(520),
            h = (n.n(m), 920),
            f = "34rem",
            g = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.logger = l.i.withCategory("RightColumn"), n.handleToggleVisibility = function() {
                        var e = n.getLayoutCache();
                        n.props.isExpanded ? (n.props.collapse(), e.resource.isRightColumnClosedByUserAction = !0) : (n.props.expand(), e.resource.isRightColumnClosedByUserAction = !1), l.k.set(l.n.config.layoutCacheKey, e), Object(c.c)({
                            element: c.a.Chat,
                            action: n.props.isExpanded ? c.b.Close : c.b.Open
                        })
                    }, n.hideOnBreakpoint = function() {
                        if (n.containerRef) {
                            var e = h;
                            window.innerWidth < e && !n.props.theatreModeEnabled ? "none" !== n.containerRef.style.display && (n.containerRef.style.display = "none") : "none" === n.containerRef.style.display && (n.containerRef.style.display = "")
                        }
                    }, n.setContainerRef = function(e) {
                        return n.containerRef = e
                    }, n.state = {
                        content: null,
                        contentID: null
                    }, i && n.logger.warn("RightColumn should only ever be used in the Root. Use <RightColumnContent> instead to wrap components that should display in the right column."), i = n, n
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    window.addEventListener("resize", this.hideOnBreakpoint), this.hideOnBreakpoint(), this.reportInteractive(), s.bind("alt+r", this.handleToggleVisibility)
                }, t.prototype.componentDidUpdate = function() {
                    this.hideOnBreakpoint(), this.state.content && this.reportInteractive()
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("resize", this.hideOnBreakpoint), s.unbind("alt+r")
                }, t.prototype.render = function() {
                    if (!this.state.content) return null;
                    var e = r("right-column", {
                        "right-column--collapsed": !this.props.isExpanded,
                        "right-column--theatre": this.props.theatreModeEnabled
                    });
                    return o.createElement(p.U, {
                        className: e,
                        refDelegate: this.setContainerRef,
                        flexShrink: 0,
                        fullHeight: !0,
                        position: this.props.theatreModeEnabled ? p._2.Fixed : p._2.Relative,
                        attachTop: this.props.theatreModeEnabled,
                        attachRight: this.props.theatreModeEnabled
                    }, o.createElement(p.U, {
                        position: p._2.Relative,
                        flexGrow: 0,
                        flexShrink: 0,
                        fullHeight: !0,
                        display: this.props.isExpanded ? p.H.Block : p.H.Hide
                    }, this.state.content), o.createElement(p.P, {
                        className: "right-column__toggle-visibility",
                        position: p._2.Absolute,
                        flexGrow: 0,
                        flexShrink: 0,
                        display: p.H.Block,
                        zIndex: p._38.Above
                    }, o.createElement("button", {
                        onClick: this.handleToggleVisibility,
                        "data-a-target": "right-column__toggle-collapse-btn"
                    }, o.createElement(p.P, {
                        className: "right-column__toggle-visibility-icon",
                        position: p._2.Absolute
                    }, o.createElement(p._21, {
                        type: p._26.Span
                    }, o.createElement(p._8, {
                        asset: p._9.GlyphArrDown
                    }))))))
                }, t.prototype.provideContent = function(e, t) {
                    this.state.content && this.state.contentID !== t && this.logger.warn("Displaying another component already. Only one component can be displayed at a time using <RightColumnContent>. Check the page or other subcomponents to find the other instance and determine which one should be showing."), this.setState({
                        content: e,
                        contentID: t
                    })
                }, t.prototype.removeContent = function() {
                    this.setState({
                        content: null,
                        contentID: null
                    })
                }, t.prototype.reportInteractive = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.getLayoutCache = function() {
                    return l.k.get(l.n.config.layoutCacheKey, d.a)
                }, t = a.__decorate([Object(u.c)("RightColumn")], t)
            }(o.Component)
    },
    144: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                firstPageLoaded: e.session.firstPageLoaded
            }
        }

        function a(e) {
            return e ? e.slice().filter(function(e) {
                return (null !== e.activity || null !== e.availability) && (e.availability === pe.a.Online || e.availability === pe.a.Idle || e.availability === pe.a.Busy)
            }).sort(function(e, t) {
                if (!e.activity && !t.activity) return r(e, t);
                if (e.activity && !t.activity) return -1;
                if (!e.activity && t.activity) return 1;
                if (e.activity && t.activity) {
                    if (e.activity.type === ue.a.Watching && t.activity.type !== ue.a.Watching) return -1;
                    if (e.activity.type !== ue.a.Watching && t.activity.type === ue.a.Watching) return 1;
                    if (e.activity.type === ue.a.Watching && t.activity.type === ue.a.Watching) return r(e, t);
                    if (e.activity.type === ue.a.Streaming && t.activity.type !== ue.a.Streaming) return -1;
                    if (e.activity.type !== ue.a.Streaming && t.activity.type === ue.a.Streaming) return 1;
                    if (e.activity.type === ue.a.Streaming && t.activity.type === ue.a.Streaming) return r(e, t);
                    if (e.activity.type === ue.a.Playing && t.activity.type !== ue.a.Playing) return -1;
                    if (e.activity.type !== ue.a.Playing && t.activity.type === ue.a.Playing) return 1;
                    if (e.activity.type === ue.a.Playing && t.activity.type === ue.a.Playing) return r(e, t)
                }
                return u(e, t)
            }) : []
        }

        function r(e, t) {
            return e.availability || t.availability ? e.availability && !t.availability ? -1 : !e.availability && t.availability ? 1 : e.availability === pe.a.Online && t.availability !== pe.a.Online ? -1 : e.availability !== pe.a.Online && t.availability === pe.a.Online ? 1 : e.availability === pe.a.Online && t.availability === pe.a.Online ? u(e, t) : e.availability === pe.a.Idle && t.availability !== pe.a.Idle ? -1 : e.availability !== pe.a.Idle && t.availability === pe.a.Idle ? 1 : e.availability === pe.a.Idle && t.availability === pe.a.Idle ? u(e, t) : e.availability === pe.a.Busy && t.availability !== pe.a.Busy ? -1 : e.availability !== pe.a.Busy && t.availability === pe.a.Busy ? 1 : (e.availability === pe.a.Busy && (t.availability, pe.a.Busy), u(e, t)) : -1
        }

        function s(e, t, n, i) {
            var a = e.slice(),
                r = new Set,
                s = a.filter(function(e) {
                    return e.stream && e.stream.id
                });
            s.forEach(function(e) {
                r.add(e.id)
            });
            var c = i ? s : l(s),
                u = o(c),
                p = t.filter(function(e) {
                    return !r.has(e.id)
                });
            p.reverse();
            var m = d(p, n);
            return u.concat(m)
        }

        function o(e) {
            var t = [],
                n = [],
                i = [];
            return e.forEach(function(e) {
                switch (e.stream && e.stream.type || ae.a.Live) {
                    case ae.a.Premiere:
                        n.push(e);
                        break;
                    case ae.a.WatchParty:
                    case ae.a.Rerun:
                        i.push(e);
                        break;
                    default:
                        t.push(e)
                }
            }), t.concat(n, i)
        }

        function l(e) {
            return e.sort(function(e, t) {
                return e.stream && t.stream ? null !== e.stream.viewersCount && null === t.stream.viewersCount ? -1 : null !== t.stream.viewersCount && null === e.stream.viewersCount ? 1 : null === e.stream.viewersCount || null === t.stream.viewersCount ? 0 : e.stream.viewersCount > t.stream.viewersCount ? -1 : e.stream.viewersCount < t.stream.viewersCount ? 1 : p(e, t) : 0
            })
        }

        function c(e) {
            var t = {},
                n = {};
            if (!e.length) return t;
            var i = Date.now() - 6048e5;
            return e.forEach(function(e) {
                var a = e.owner && e.owner.id;
                if (a && !n[e.owner.id]) {
                    if (e.self && e.self.viewingHistory && e.self.viewingHistory.position) return void(n[e.owner.id] = !0);
                    var r = new Date(e.publishedAt).getTime();
                    if (r && !(r < i)) {
                        var s = t[a] || [];
                        s.push(e), t[a] = s
                    }
                }
            }), t
        }

        function d(e, t) {
            if (!t) return e;
            var n = e.filter(function(e) {
                    return null !== e.id && !!t[e.id]
                }),
                i = e.filter(function(e) {
                    return null !== e.id && !t[e.id]
                });
            return n.sort(function(e, n) {
                var i = null !== e.id && t[e.id],
                    a = null !== n.id && t[n.id],
                    r = i && i.length || 0;
                return (a && a.length || 0) - r
            }), n.concat(i)
        }

        function u(e, t) {
            if (!e.node && !t.node) return 0;
            if (e.node && !t.node) return -1;
            if (t.node && !e.node) return 1;
            var n = e.node.displayName || e.node.login || "",
                i = t.node.displayName || t.node.login || "";
            return n.localeCompare(i)
        }

        function p(e, t) {
            var n = e.displayName || e.login || "",
                i = t.displayName || t.login || "";
            return n.localeCompare(i)
        }

        function m(e, t, n) {
            var i = I.b.get("sidenav_follow_data_sample_rate", 1e4);
            if (!Math.floor(Math.random() * i)) {
                var a = {
                    is_collapsed: n,
                    followed_channels_total: 0
                };
                if (!t && (a.followed_channels_total = e.follows.edges ? e.follows.edges.length : 0, e.followedLiveUsers && e.followedLiveUsers.nodes)) {
                    var r = e.followedLiveUsers.nodes.reduce(function(e, t) {
                        return g(t) === he ? e + 1 : e
                    }, 0);
                    a.followed_channels_live_stream = e.followedLiveUsers.nodes.length - r, a.followed_channels_rerun = r
                }
                I.n.tracking.track(re.SpadeEventType.SideNavDetails, a)
            }
        }

        function h(e) {
            I.n.tracking.track(re.SpadeEventType.SideNavLoadMore, {
                displayed_channel_count: e
            })
        }

        function f(e, t) {
            I.n.tracking.track(re.SpadeEventType.SideNavChannelClick, {
                click_target_state: g(t),
                click_target_index: e
            })
        }

        function g(e) {
            return e.stream && e.stream.id ? "watch_party" === e.stream.type ? he : me : fe
        }

        function v(e) {
            return {
                currentUserID: e.session.user && "" + e.session.user.id || ""
            }
        }

        function b(e) {
            return Object(Ee.bindActionCreators)({
                openThread: function(e) {
                    return Object(Te.l)({
                        collapsed: !1,
                        threadID: e,
                        ignoreCollapseIfOpen: !0
                    }, Object(Ce.a)())
                }
            }, e)
        }

        function k(e) {
            return {
                firstPageLoaded: e.session.firstPageLoaded
            }
        }

        function S(e) {
            return {
                currentUserID: e.session.user && "" + e.session.user.id || ""
            }
        }

        function y(e) {
            return Object(Ee.bindActionCreators)({
                openThread: function(e) {
                    return Object(Te.l)({
                        collapsed: !1,
                        threadID: e,
                        ignoreCollapseIfOpen: !0
                    }, Object(Ce.a)())
                }
            }, e)
        }

        function _(e) {
            return {
                currentUserID: e.session.user && "" + e.session.user.id || ""
            }
        }

        function N(e) {
            return Object(Ee.bindActionCreators)({
                openThread: function(e) {
                    return Object(Te.l)({
                        collapsed: !1,
                        threadID: e,
                        ignoreCollapseIfOpen: !0
                    }, Object(Ce.a)())
                }
            }, e)
        }
        var E, T = n(0),
            C = n(4),
            D = n(1),
            w = n(10),
            I = n(2),
            P = n(28),
            O = n(7),
            F = n(31),
            U = n(33),
            R = n(292),
            x = n(293),
            M = n(5),
            L = n(6),
            A = n(111),
            j = n(56),
            B = n(48),
            W = n(147),
            H = n(3),
            V = (n(521), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.setContainerRef = function(e) {
                        return t.containerRef = e
                    }, t.onMouseEnter = function() {
                        t.props.tooltipLabel ? t.props.tooltipLayer.show({
                            label: t.props.tooltipLabel,
                            from: t.containerRef,
                            align: H._31.Center,
                            direction: H._32.Right
                        }) : t.props.tooltipContent && t.props.tooltipLayer.showRich({
                            from: t.containerRef,
                            richContent: t.props.tooltipContent,
                            allowHover: t.props.offline,
                            delayOpenMS: 1e3,
                            forceDarkTheme: !0,
                            balloonDirection: t.props.offline ? H.q.Right : H.q.RightCenter
                        })
                    }, t.onMouseLeave = function() {
                        t.props.tooltipLayer.hide()
                    }, t.addEventListeners = function() {
                        t.containerRef && (t.containerRef.addEventListener("mouseenter", t.onMouseEnter), t.containerRef.addEventListener("mouseleave", t.onMouseLeave))
                    }, t.removeEventListeners = function() {
                        t.containerRef && (t.containerRef.removeEventListener("mouseenter", t.onMouseEnter), t.containerRef.removeEventListener("mouseleave", t.onMouseLeave))
                    }, t
                }
                return T.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive(), this.addEventListeners()
                }, t.prototype.componentWillUnmount = function() {
                    this.removeEventListeners()
                }, t.prototype.render = function() {
                    return this.props.collapsed ? D.createElement("div", {
                        ref: this.setContainerRef,
                        "data-test-selector": "side-nav-card-collapsed"
                    }, D.createElement(H.P, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        display: H.H.Flex,
                        alignItems: H.c.Center,
                        flexWrap: H.K.NoWrap
                    }, D.createElement(w.a, {
                        to: this.props.linkTo,
                        className: "side-nav-card",
                        onClick: this.props.onClick
                    }, D.createElement(H.U, {
                        className: C("side-nav-card__avatar", {
                            "side-nav-card__avatar--offline": this.props.offline
                        }),
                        flexShrink: 0
                    }, D.createElement(H.l, {
                        imageSrc: this.props.avatarSrc,
                        imageAlt: this.props.avatarAlt,
                        size: 30,
                        presenceIndicator: this.props.avatarPresence,
                        presenceStatus: this.props.presenceStatus
                    }))))) : D.createElement("div", {
                        ref: this.setContainerRef
                    }, D.createElement(H.U, {
                        className: "side-nav-card",
                        position: H._2.Relative,
                        display: H.H.Flex,
                        alignItems: H.c.Center
                    }, D.createElement(H.P, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        display: H.H.Flex,
                        alignItems: H.c.Center,
                        flexWrap: H.K.NoWrap,
                        fullWidth: !0
                    }, D.createElement(w.a, T.__assign({
                        to: this.props.linkTo,
                        className: "side-nav-card__link",
                        onClick: this.props.onClick
                    }, Object(H._39)(this.props)), D.createElement(H.U, {
                        className: C("side-nav-card__avatar", {
                            "side-nav-card__avatar--offline": this.props.offline
                        }),
                        flexShrink: 0,
                        alignItems: H.c.Center
                    }, D.createElement(H.l, {
                        imageSrc: this.props.avatarSrc,
                        imageAlt: this.props.avatarAlt,
                        size: 30,
                        presenceIndicator: this.props.avatarPresence,
                        presenceStatus: this.props.presenceStatus
                    })), D.createElement(H.U, {
                        fullWidth: !0,
                        flexDirection: H.J.Column,
                        flexGrow: 1,
                        margin: {
                            left: 1
                        },
                        display: H.H.Flex,
                        "data-a-target": "side-nav-card-metadata"
                    }, D.createElement("div", {
                        className: "side-nav-card__title",
                        title: this.props.title,
                        "data-a-target": "side-nav-title"
                    }, D.createElement(H._21, {
                        ellipsis: !0,
                        fontSize: H.L.Size5
                    }, this.props.titleElement || this.props.title)), D.createElement(H._17, {
                        className: "side-nav-card__metadata",
                        fontSize: H.L.Size6,
                        display: H.H.Flex,
                        justifyContent: H.T.Between,
                        flexWrap: H.K.NoWrap,
                        ellipsis: !0
                    }, D.createElement(H.P, {
                        flexGrow: 1,
                        "data-a-target": "side-nav-game-title"
                    }, D.createElement(H._21, {
                        type: H._26.Span,
                        ellipsis: !0
                    }, this.props.metadataLeft)), D.createElement(H.U, {
                        flexShrink: 0,
                        margin: {
                            left: .5
                        },
                        "data-a-target": "side-nav-live-status"
                    }, this.props.metadataRight))))), this.getCardSlideInContent()))
                }, t.prototype.getCardSlideInContent = function() {
                    return this.props.slideInContent ? D.createElement(H.U, {
                        className: "side-nav-card__hover-content",
                        position: H._2.Absolute,
                        display: H.H.Flex,
                        alignItems: H.c.Center,
                        attachRight: !0,
                        padding: {
                            right: 1
                        },
                        "data-a-target": "side-nav-card-hover"
                    }, this.props.slideInContent) : null
                }, t = T.__decorate([Object(M.c)("SideNavCard"), Object(W.c)()], t)
            }(D.Component)),
            G = V,
            q = function(e) {
                function t() {
                    var t = e.call(this) || this;
                    return t.renderGame = function() {
                        return t.props.gameName ? D.createElement(H.P, {
                            flexGrow: 1,
                            display: H.H.Flex,
                            flexDirection: H.J.Row
                        }, D.createElement("div", {
                            className: "recommended-channel__game",
                            title: t.props.gameName,
                            "data-a-target": "featured-channel-game-title"
                        }, D.createElement(H.U, {
                            ellipsis: !0,
                            flexGrow: 1
                        }, t.props.gameName))) : null
                    }, t.getSlideInContent = function() {
                        if (t.props.firstPageLoaded) return D.createElement(A.a, {
                            tabIndex: -1,
                            blurAfterClick: !0,
                            hideIcon: !0,
                            hideWhenFollowing: !0,
                            size: H.x.Small,
                            channelLogin: t.props.channelLogin,
                            "data-a-target": "featured-channel-follow-button"
                        })
                    }, t.state = {
                        hovered: !1
                    }, t
                }
                return T.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return D.createElement(G, T.__assign({
                        collapsed: this.props.collapsed,
                        title: this.props.displayName,
                        titleElement: Object(B.a)(this.props.channelLogin, this.props.displayName),
                        avatarAlt: this.props.displayName,
                        avatarSrc: this.props.profileImageURL,
                        linkTo: {
                            pathname: "/" + this.props.channelLogin,
                            state: {
                                content: "featured_channels",
                                medium: "twitch_socialcolumn"
                            }
                        },
                        metadataLeft: this.renderGame(),
                        slideInContent: this.getSlideInContent()
                    }, Object(j.a)(this.props)))
                }, t = T.__decorate([Object(M.c)("Featured Channel")], t)
            }(D.Component),
            z = q,
            $ = Object(L.a)(i)(z),
            K = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.setRef = function(e) {
                        return t.ref = e
                    }, t.onMouseEnter = function() {
                        t.props.tooltipLayer.show({
                            from: t.ref,
                            label: t.props.title,
                            align: H._31.Center,
                            direction: H._32.Right
                        })
                    }, t.onMouseLeave = function() {
                        t.props.tooltipLayer.hide()
                    }, t.addEventListeners = function() {
                        t.ref && (t.ref.addEventListener("mouseenter", t.onMouseEnter), t.ref.addEventListener("mouseleave", t.onMouseLeave))
                    }, t.removeEventListeners = function() {
                        t.ref && (t.ref.removeEventListener("mouseenter", t.onMouseEnter), t.ref.removeEventListener("mouseleave", t.onMouseLeave))
                    }, t
                }
                return T.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.addEventListeners()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.collapsed && !e.collapsed && this.removeEventListeners()
                }, t.prototype.componentDidUpdate = function(e) {
                    this.props.collapsed && !e.collapsed && this.addEventListeners()
                }, t.prototype.componentWillUnmount = function() {
                    this.removeEventListeners()
                }, t.prototype.render = function() {
                    var e, t = {
                            "side-nav-header": !0
                        },
                        n = this.props,
                        i = n.collapsed,
                        a = n.collapsedIcon,
                        r = n.title;
                    return e = a ? D.createElement(H._8, {
                        asset: a,
                        width: 20,
                        height: 20
                    }) : D.createElement(H._8, {
                        asset: H._9.FriendsSC,
                        width: 20,
                        height: 20
                    }), i ? D.createElement(H._17, {
                        className: C(t),
                        color: H.F.Alt2,
                        display: H.H.Flex,
                        justifyContent: H.T.Center,
                        alignItems: H.c.Center,
                        margin: {
                            top: 1
                        },
                        padding: {
                            top: 1,
                            bottom: .5
                        },
                        "data-a-target": "side-nav-header-collapsed",
                        refDelegate: this.setRef
                    }, e, D.createElement(H._17, {
                        borderTop: !0,
                        fullWidth: !0,
                        margin: {
                            top: 1
                        }
                    })) : D.createElement(H.U, {
                        className: C(t),
                        margin: {
                            top: 1,
                            x: 1
                        },
                        padding: {
                            top: 1,
                            bottom: .5
                        },
                        "data-a-target": "side-nav-header-expanded"
                    }, D.createElement(H._21, {
                        type: H._26.H5,
                        color: H.F.Alt
                    }, r), D.createElement(H._17, {
                        borderTop: !0,
                        fullWidth: !0,
                        margin: {
                            top: 1
                        }
                    }))
                }, t
            }(D.Component),
            Q = Object(M.c)("Side Nav Header", {
                autoReportInteractive: !0
            })(Object(W.c)()(K)),
            Y = n(522),
            J = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getFeaturedChannels = function() {
                        return !t.props.data.loading && !t.props.data.error && t.props.data.featuredStreams && t.props.data.featuredStreams.length - 1 ? t.props.data.featuredStreams.filter(function(e) {
                            return e.stream && e.stream.broadcaster && e.stream.broadcaster.displayName
                        }).slice(0, 5).map(function(e, n) {
                            return e.stream && e.stream.broadcaster && e.stream.broadcaster.displayName && e.stream.broadcaster.id ? D.createElement($, {
                                key: "featured-channels-" + e.stream.id,
                                id: e.stream.id,
                                displayName: e.stream.broadcaster.displayName,
                                gameName: e.stream.game ? e.stream.game.name : "",
                                profileImageURL: e.stream.broadcaster.profileImageURL,
                                collapsed: t.props.collapsed,
                                channelLogin: e.stream.broadcaster.login,
                                "data-a-id": "featured-channel-" + n,
                                "data-a-target": "featured-channel"
                            }) : null
                        }) : []
                    }, t
                }
                return T.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data.loading || this.props.data.error || !this.props.data.featuredStreams || this.props.latencyTracking.reportInteractive(Math.min(this.props.data.featuredStreams.length, 4))
                }, t.prototype.render = function() {
                    var e = Object(I.d)("Featured Channels", "FeaturedChannels");
                    return this.props.collapsed ? D.createElement(H.U, {
                        margin: {
                            bottom: 2
                        }
                    }, D.createElement(Q, {
                        title: e,
                        collapsed: this.props.collapsed,
                        collapsedIcon: H._9.NavChannels
                    }), this.getFeaturedChannels()) : D.createElement(H.U, {
                        margin: {
                            bottom: 2
                        }
                    }, D.createElement(Q, {
                        title: e
                    }), D.createElement(H.P, {
                        fullWidth: !0
                    }, D.createElement("figure", null, D.createElement("svg", {
                        width: "240",
                        height: "100",
                        viewBox: "0 0 240 108"
                    }, D.createElement("g", {
                        fill: "none",
                        fillRule: "evenodd"
                    }, D.createElement("path", {
                        fill: "#D7CCEB",
                        d: "M123 56v8h-20V44h20v8l8-8h4v20h-4"
                    }), D.createElement("path", {
                        fill: "#4B367C",
                        d: "M158 30v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zm-86 0v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zm0 46v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zm86 0v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zm17-23v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zM57 53v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zm37 27l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8v-4zm0-57v-4l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8zm34 0v-4l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8zm0 61v-4l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8zm19-31v-4l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8zm-72 0v-4l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8z"
                    }))))), D.createElement(H.U, {
                        padding: {
                            x: 1
                        },
                        margin: {
                            bottom: 2
                        },
                        textAlign: H._22.Center
                    }, D.createElement(H._21, {
                        color: H.F.Alt2,
                        fontSize: H.L.Size6
                    }, Object(I.d)("Follow channels and easily access your favorites here. Here are a few you might like!", "FeaturedChannels"))), this.getFeaturedChannels())
                }, t = T.__decorate([Object(O.a)(Y, {
                    options: function() {
                        return {
                            variables: {
                                language: I.n.intl.getLanguageCode()
                            }
                        }
                    }
                }), Object(M.c)("Featured Channels")], t)
            }(D.Component),
            X = J,
            Z = function(e) {
                var t = Object(I.d)("Online Friends", "NoOnlineFriends"),
                    n = Object(I.d)("Twitch is better together. Add some Friends to see who's online and chat!", "NoOnlineFriends"),
                    i = Object(I.d)("None of your Friends are online. Get out there and add more!", "NoOnlineFriends"),
                    a = e.hasOfflineFriends ? "online-friends-no-friends-online" : "online-friends-no-friends";
                return D.createElement(H.U, {
                    margin: {
                        bottom: 2
                    }
                }, D.createElement(Q, {
                    title: t
                }), D.createElement(H.P, {
                    margin: {
                        y: 1
                    },
                    fullWidth: !0
                }, D.createElement("figure", null, D.createElement("svg", {
                    width: "240",
                    height: "100",
                    viewBox: "0 0 240 108"
                }, D.createElement("defs", null, D.createElement("linearGradient", {
                    x1: "100%",
                    x2: "0%",
                    y1: "50%",
                    y2: "50%"
                }, D.createElement("stop", {
                    stopColor: "#4B367C",
                    stopOpacity: "0",
                    offset: "0%"
                }), D.createElement("stop", {
                    stopColor: "#4B367C",
                    stopOpacity: "0",
                    offset: "3.947%"
                }), D.createElement("stop", {
                    stopColor: "#4B367C",
                    offset: "12.281%"
                }), D.createElement("stop", {
                    stopColor: "#4B367C",
                    offset: "87.719%"
                }), D.createElement("stop", {
                    stopColor: "#4B367C",
                    stopOpacity: "0",
                    offset: "96.053%"
                }), D.createElement("stop", {
                    stopColor: "#4B367C",
                    stopOpacity: "0",
                    offset: "100%"
                }))), D.createElement("g", {
                    fill: "none",
                    fillRule: "evenodd"
                }, D.createElement("path", {
                    fill: "#4B367C",
                    d: "M174.606 56h-13.21l-11.154 26.932c-.212.51-.806 1.1-1.31 1.31L127 93.326V87l-4-4h-6l-4 4v6.326L99.9 87.9 97 85v-7l-4-4h-6l-.666.666L78.604 56h-13.21L57.75 74.452c-.21.507-.787 1.087-1.298 1.3L44 80.908V78l-4-4h-6l-4 4v3.737L15.548 75.75c-.507-.21-1.087-.787-1.3-1.298L6.16 54.918c-.21-.507-.21-1.326 0-1.836l8.09-19.534c.21-.507.79-1.087 1.3-1.3l19.534-8.09c.507-.21 1.326-.21 1.836 0L48 28.748V41h12.838l4.556 11h13.21l7.454-18H100v-6l-3-3v-3.7l22.074-9.142c.51-.212 1.348-.21 1.852 0L143 21.3V25l-3 3v6h13.942l7.455 18h13.21l7.642-18.452c.21-.507.784-1.087 1.295-1.3l10.59-4.385L194 34h20v-6l10.452 4.25c.507.21 1.087.787 1.3 1.298l8.09 19.534c.21.507.21 1.326 0 1.836l-8.09 19.534c-.21.507-.79 1.087-1.3 1.3l-19.534 8.09c-.507.21-1.326.21-1.836 0L193 79.666V67h-13.838l-4.556-11zM119.08 28.16l-16.702 6.917c-.498.206-1.09.793-1.3 1.3l-6.92 16.704c-.205.5-.21 1.335 0 1.84l6.92 16.705c.205.498.792 1.09 1.3 1.3l16.703 6.92c.5.205 1.335.21 1.84 0l16.705-6.92c.498-.205 1.09-.792 1.3-1.3l6.92-16.703c.205-.497.21-1.33 0-1.84l-6.92-16.7c-.205-.5-.792-1.09-1.3-1.3l-16.703-6.92c-.497-.206-1.33-.21-1.84 0zm-83.12 10l-9.53 3.948c-.528.22-1.106.804-1.32 1.32l-3.948 9.53c-.218.528-.213 1.352 0 1.867l3.948 9.532c.22.526.804 1.105 1.32 1.318l9.53 3.948c.528.22 1.352.214 1.867 0l9.532-3.948c.523-.218 1.102-.804 1.315-1.32l3.948-9.53c.22-.528.214-1.35 0-1.867l-3.948-9.53c-.218-.528-.804-1.106-1.32-1.32l-9.53-3.948c-.528-.218-1.35-.213-1.867 0zm167.107.106l-9.532 3.948c-.527.218-1.106.804-1.32 1.32l-3.947 9.53c-.22.528-.214 1.352 0 1.867l3.948 9.535c.218.527.804 1.106 1.32 1.32l9.53 3.947c.528.22 1.352.215 1.867 0l9.532-3.947c.527-.218 1.106-.804 1.32-1.32l3.947-9.53c.22-.528.214-1.352 0-1.867l-3.948-9.532c-.218-.527-.804-1.106-1.32-1.32l-9.53-3.947c-.528-.22-1.352-.215-1.867 0z"
                }), D.createElement("path", {
                    fill: "#D7CCEB",
                    d: "M92 17l2 2v5l-3 2v1h4l2 2v2H83v-2l2-2h4v-1l-3-2v-5l2-2h4zm0 60l2 2v5l-3 2v1h4l2 2v2H83v-2l2-2h4v-1l-3-2v-5l2-2h4zm30 9l2 2v5l-3 2v1h4l2 2v2h-14v-2l2-2h4v-1l-3-2v-5l2-2h4zm30-69l2 2v5l-3 2v1h4l2 2v2h-14v-2l2-2h4v-1l-3-2v-5l2-2h4zm54 0l2 2v5l-3 2v1h4l2 2v2h-14v-2l2-2h4v-1l-3-2v-5l2-2h4zM39 77l2 2v5l-3 2v1h4l2 2v2H30v-2l2-2h4v-1l-3-2v-5l2-2h4zm137-7h14v10h-14V70zm5 2v6l5-3-5-3zM51 28h14v10H51V28zm5 2v6l5-3-5-3zm154 29l-4-4v4h-10V49h10v4l4-4h2v10h-2zM29 55l3-6h2l3 1 3-1h2l3 6v2l-2 2h-2l-2-2h-4l-2 2h-2l-2-2v-2zm10-2v1h1v-1h-1zm1 1v1h1v-1h-1zm1-1v1h1v-1h-1zm-1-1v1h1v-1h-1zm-7 1h-1v1h1v1h1v-1h1v-1h-1v-1h-1v1zm91-14l4 4v10l-6 4v2h8l4 4v4h-28v-4l4-4h8v-2l-6-4V43l4-4h8z"
                }))))), D.createElement(H.U, {
                    padding: {
                        x: 1
                    },
                    textAlign: H._22.Center
                }, D.createElement(H._21, {
                    color: H.F.Alt2,
                    fontSize: H.L.Size6,
                    "data-a-target": a
                }, e.hasOfflineFriends ? i : n)))
            },
            ee = Object(M.c)("No Online Friends", {
                autoReportInteractive: !0
            })(Z),
            te = function(e) {
                return e.collapsed ? D.createElement(H.U, {
                    className: "anon-side-nav",
                    fullWidth: !0
                }, D.createElement(X, {
                    collapsed: e.collapsed
                })) : D.createElement(H.U, {
                    className: "anon-side-nav",
                    fullWidth: !0
                }, D.createElement(X, {
                    collapsed: e.collapsed
                }), !e.collapsed && D.createElement(ee, null))
            },
            ne = Object(M.c)("Anon Side Nav", {
                autoReportInteractive: !0
            })(te);
        ! function(e) {
            e.ViewerCount = "VIEWER_COUNT", e.Relevance = "RELEVANCE"
        }(E || (E = {}));
        var ie = n(263),
            ae = n(145),
            re = n(13),
            se = (n(523), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return T.__extends(t, e), t.prototype.render = function() {
                    var e = [];
                    if (this.props.videos)
                        for (var t = 0; t < 3 && t < this.props.videos.length; t++) e.push(this.getVideoSummary(this.props.videos[t]));
                    return D.createElement(H.U, null, e, this.getAllRecentVideosLabel())
                }, t.prototype.getAllRecentVideosLabel = function() {
                    return D.createElement(H.S, {
                        linkTo: "/" + this.props.creatorLogin + "/videos/all",
                        key: "recentVideoLabel",
                        alpha: !0,
                        blurAfterClick: !0
                    }, D.createElement(H.U, {
                        textAlign: H._22.Center,
                        padding: .5
                    }, D.createElement(H._21, {
                        transform: H._25.Capitalize
                    }, Object(I.d)("See all recent videos", "OfflineFollowedChannelTooltip"))))
                }, t.prototype.getVideoSummary = function(e) {
                    return D.createElement(H.S, {
                        linkTo: "/videos/" + e.id,
                        key: "videoSumm-" + e.id,
                        alpha: !0,
                        blurAfterClick: !0
                    }, D.createElement(H.U, {
                        padding: {
                            top: .5,
                            bottom: .5
                        }
                    }, D.createElement(H.A, {
                        row: !0
                    }, D.createElement(H.C, {
                        imageSrc: e.previewThumbnailURL,
                        imageAlt: e.title,
                        size: H.D.Size8,
                        aspect: H.k.Aspect16x9
                    }), D.createElement(H.B, null, D.createElement(H.U, {
                        padding: {
                            left: 1,
                            right: 1
                        },
                        className: "offline-followed-channel-tooltip__video-body"
                    }, D.createElement(H._21, {
                        color: H.F.Base,
                        title: e.title,
                        lines: 2
                    }, e.title), D.createElement(H._21, {
                        color: H.F.Alt2,
                        "data-test-selector": "offline-followed-channel-tooltip-text"
                    }, Object(I.d)("{views, plural, one {{formattedViews} view} other {{formattedViews} views}}", {
                        views: e.viewCount,
                        formattedViews: Object(I.e)(e.viewCount)
                    }, "OnlineFollowedChannelTooltip")))))))
                }, t
            }(D.Component)),
            oe = (n(524), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return T.__extends(t, e), t.prototype.render = function() {
                    var e = null,
                        t = null;
                    switch (this.props.streamType) {
                        case ae.a.Premiere:
                            e = D.createElement(H._8, {
                                asset: H._9.VideoPremiere,
                                type: H._10.Live,
                                width: 12,
                                height: 12
                            }), t = Object(I.d)("Video Premiere", "OnlineFollowedChannelTooltip");
                            break;
                        case ae.a.WatchParty:
                        case ae.a.Rerun:
                            e = D.createElement(H._8, {
                                asset: H._9.VideoRerun,
                                type: H._10.Alt2,
                                width: 12,
                                height: 12
                            }), t = Object(I.d)("Rerun", "OnlineFollowedChannelTooltip");
                            break;
                        default:
                            if (!this.props.collapsed) break;
                            e = D.createElement(H.V, {
                                size: H.W.Small
                            }), t = Object(I.d)("Live", "OnlineFollowedChannelTooltip")
                    }
                    return D.createElement(H.U, {
                        className: "online-followed-channel-tooltip__body"
                    }, this.props.collapsed && D.createElement(H._21, {
                        color: H.F.Link,
                        ellipsis: !0
                    }, this.props.gameName ? this.props.channelDisplayName + " · " + this.props.gameName : this.props.channelDisplayName), D.createElement(H._21, {
                        color: H.F.Base,
                        lines: 2
                    }, this.props.streamTitle), e && D.createElement(H.U, {
                        display: H.H.Flex,
                        alignItems: H.c.Center
                    }, e, D.createElement(H.P, {
                        padding: {
                            left: .5
                        }
                    }, D.createElement(H._21, {
                        color: H.F.Alt2,
                        type: H._26.Span
                    }, t, this.props.collapsed && this.props.viewership ? " | " + Object(I.d)("{viewers} viewers", {
                        viewers: Object(I.e)(this.props.viewership)
                    }, "OnlineFollowedChannelTooltip") : null))))
                }, t
            }(D.Component)),
            le = (n(525), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return T.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e, t = this.getMetadataLeft(),
                        n = this.getTooltipContent(),
                        i = this.isChannelOffline(),
                        a = Object(B.a)(this.props.user.login, this.props.user.displayName, !0);
                    return !n && this.props.collapsed && (e = t.length > 0 && !i ? a + " - " + t : a), D.createElement(G, T.__assign({
                        avatarAlt: a,
                        avatarSrc: this.props.user.profileImageURL,
                        collapsed: this.props.collapsed,
                        linkTo: {
                            pathname: this.getChannelLink(),
                            state: {
                                content: re.PageviewContent.FollowedChannels,
                                medium: re.PageviewMedium.SideNav
                            }
                        },
                        metadataLeft: t,
                        metadataRight: this.getMetadataRight(),
                        onClick: this.props.onChannelClick,
                        offline: this.isChannelOffline(),
                        title: a,
                        titleElement: Object(B.a)(this.props.user.login, this.props.user.displayName),
                        tooltipLabel: this.props.collapsed && !this.props.premieresEnabled ? e : void 0,
                        tooltipContent: this.getTooltipContent()
                    }, Object(H._39)(this.props)))
                }, t.prototype.getMetadataLeft = function() {
                    return this.props.user.stream && this.props.user.stream.game ? this.props.user.stream.game.name : this.props.recentChannelVideos && this.props.recentChannelVideos.length > 0 && this.props.videoExperimentAssignment !== ht ? Object(I.d)("{numVideos, plural, one {{numVideos} new video} other {{numVideos} new videos}}", {
                        numVideos: this.props.recentChannelVideos.length
                    }, "FollowedChannel") : this.props.user.lastBroadcast && this.props.user.lastBroadcast.game && this.props.user.lastBroadcast.game.name && this.props.videoExperimentAssignment === ht ? this.props.user.lastBroadcast.game.name : ""
                }, t.prototype.getMetadataRight = function() {
                    return this.props.user.stream && this.props.user.stream.id ? D.createElement(H.U, {
                        display: H.H.Flex,
                        alignItems: H.c.Center
                    }, this.getLiveIndicator(), D.createElement(H.U, {
                        margin: {
                            left: .5
                        }
                    }, Object(I.e)(this.props.user.stream.viewersCount || 0))) : D.createElement(H._21, {
                        type: H._26.Span
                    }, Object(I.d)("Offline", "FollowedChannel"))
                }, t.prototype.getLiveIndicator = function() {
                    if (!this.props.user.stream || !this.props.user.stream.id) return null;
                    switch (this.props.user.stream.type) {
                        case ae.a.Premiere:
                            return this.props.premieresEnabled ? D.createElement(H._8, {
                                asset: H._9.VideoPremiere,
                                type: H._10.Live,
                                width: 12,
                                height: 12
                            }) : D.createElement(H.V, {
                                size: H.W.Small
                            });
                        case ae.a.WatchParty:
                        case ae.a.Rerun:
                            return this.props.premieresEnabled ? D.createElement(H._8, {
                                asset: H._9.VideoRerun,
                                type: H._10.Alt2,
                                width: 12,
                                height: 12
                            }) : D.createElement("span", {
                                className: "followed-channel__vodcast-live-indicator"
                            }, D.createElement(H.V, {
                                size: H.W.Small
                            }));
                        default:
                            return D.createElement(H.V, {
                                size: H.W.Small
                            })
                    }
                }, t.prototype.getTooltipContent = function() {
                    if (this.isChannelOffline()) {
                        if (this.props.videoExperimentAssignment === ht || !this.props.user.login) return;
                        return D.createElement(se, {
                            creatorLogin: this.props.user.login,
                            videos: this.props.recentChannelVideos
                        })
                    }
                    if (this.props.premieresEnabled) return D.createElement(oe, {
                        streamType: this.props.user.stream && this.props.user.stream.type || ae.a.Live,
                        streamTitle: this.props.user.stream && this.props.user.stream.title || "",
                        collapsed: this.props.collapsed,
                        channelDisplayName: this.props.user.displayName || "",
                        gameName: this.props.user.stream && this.props.user.stream.game && this.props.user.stream.game.name || void 0,
                        viewership: this.props.user.stream && this.props.user.stream.viewersCount || 0
                    })
                }, t.prototype.isChannelOffline = function() {
                    return !(this.props.user.stream && this.props.user.stream.id.length > 0)
                }, t.prototype.getChannelLink = function() {
                    return this.isChannelOffline() ? this.props.recentChannelVideos && this.props.recentChannelVideos.length > 0 && this.props.videoExperimentAssignment !== ht ? "/videos/" + this.props.recentChannelVideos[0].id : "/" + this.props.user.login + "/videos/all" : "/" + this.props.user.login
                }, t = T.__decorate([Object(M.c)("FollowedChannel")], t)
            }(D.Component)),
            ce = le,
            de = (n(526), function(e) {
                var t = H.T.Between;
                return e.lessDisabled && (t = H.T.End), D.createElement(H.U, {
                    padding: 1,
                    display: H.H.Flex,
                    fullWidth: !0,
                    overflow: H.Y.Hidden,
                    textAlign: H._22.Left,
                    justifyContent: t
                }, !e.lessDisabled && D.createElement("button", {
                    className: "side-nav-show-more-toggle__button",
                    onClick: e.onClickLess,
                    "data-a-target": "side-nav-show-less-button"
                }, Object(I.d)("Show less", "SideNavShowMoreToggleButton")), !e.moreDisabled && D.createElement("button", {
                    className: "side-nav-show-more-toggle__button",
                    onClick: e.onClickMore,
                    "data-a-target": "side-nav-show-more-button"
                }, Object(I.d)("Show more", "SideNavShowMoreToggleButton")))
            }),
            ue = n(110),
            pe = n(50),
            me = "live",
            he = "rerun",
            fe = "offline",
            ge = n(527),
            ve = n(528),
            be = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        sortedFollows: [],
                        displayAmount: 5
                    }, t.fetchInterval = 0, t.hasRequestedTracking = !1, t.followedVideoDict = {}, t.sortFollowedChannels = function(e) {
                        if (e.data.loading || e.data.error || !e.data.currentUser || !e.data.currentUser.followedLiveUsers) return [];
                        var n = e.data.currentUser.followedLiveUsers.nodes.slice(),
                            i = (e.data.currentUser.follows.edges || []).map(function(e) {
                                return e.node
                            }),
                            a = (e.videoData && e.videoData.currentUser && e.videoData.currentUser.followedVideos && e.videoData.currentUser.followedVideos.edges || []).map(function(e) {
                                return e.node
                            });
                        t.followedVideoDict = c(a);
                        var r = s(n, i, t.followedVideoDict, e.sortByRelevance);
                        t.setState({
                            sortedFollows: r
                        })
                    }, t.getFollowedChannels = function() {
                        return t.props.data.loading || t.props.data.error ? [] : t.state.sortedFollows.slice(0, t.state.displayAmount).map(function(e, n) {
                            if (!e.id) return null;
                            var i = t.onChannelClick.bind(t, n, e);
                            return D.createElement(ce, {
                                key: "followed-channels-" + e.id,
                                user: e,
                                recentChannelVideos: t.followedVideoDict[e.id],
                                collapsed: t.props.collapsed,
                                "data-a-id": "followed-channel-" + n,
                                "data-a-target": "followed-channel",
                                onChannelClick: i,
                                premieresEnabled: t.props.premieresEnabled,
                                videoExperimentAssignment: t.props.videoExperimentAssignment
                            })
                        })
                    }, t.getShowMore = function() {
                        return t.props.collapsed || !t.state.sortedFollows || t.state.sortedFollows.length <= 5 ? null : D.createElement(de, {
                            onClickMore: t.onClickShowMore,
                            onClickLess: t.onClickShowLess,
                            lessDisabled: t.state.displayAmount <= 5,
                            moreDisabled: t.state.displayAmount >= t.state.sortedFollows.length
                        })
                    }, t.onClickShowMore = function() {
                        var e = Math.min(t.state.displayAmount + 10, t.state.sortedFollows.length);
                        t.setState({
                            displayAmount: e
                        }), h(e)
                    }, t.onClickShowLess = function() {
                        var e = 10 * (Math.floor((t.state.displayAmount + 4) / 10) - 1) + 5;
                        t.setState({
                            displayAmount: e
                        })
                    }, t.onChannelClick = function(e, t) {
                        f(e, t)
                    }, t.isRenderReady = function() {
                        return !(t.props.data.loading || t.props.data.error || !t.props.data.currentUser) && (!t.props.data.currentUser.follows.edges || 0 === t.props.data.currentUser.follows.edges.length || t.props.data.currentUser.follows.edges.length > 0 && t.state.sortedFollows.length > 0)
                    }, t
                }
                return T.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.isRenderReady() && this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.sortFollowedChannels(e)
                }, t.prototype.componentWillUnmount = function() {
                    clearInterval(this.fetchInterval)
                }, t.prototype.render = function() {
                    var e = !this.props.data.loading && !this.props.data.error && this.props.data.currentUser && (!this.props.data.currentUser.follows.edges || 0 === this.props.data.currentUser.follows.edges.length);
                    return this.props.data.loading || this.props.data.error || !this.props.data.currentUser || this.hasRequestedTracking || (this.hasRequestedTracking = !0, m(this.props.data.currentUser, e || !1, this.props.collapsed)), e ? D.createElement(X, {
                        collapsed: this.props.collapsed
                    }) : D.createElement(H.U, {
                        className: "followed-channels"
                    }, D.createElement(Q, {
                        title: Object(I.d)("Followed Channels", "FollowedChannels"),
                        collapsed: this.props.collapsed,
                        collapsedIcon: H._9.Heart
                    }), this.getFollowedChannels(), this.getShowMore())
                }, t = T.__decorate([Object(O.a)(ve, {
                    options: function(e) {
                        return {
                            pollInterval: 6e5,
                            variables: {
                                limit: 100,
                                cursor: "",
                                sort: e.sortByRelevance ? E.Relevance : E.ViewerCount
                            }
                        }
                    }
                }), Object(O.a)(ge, {
                    options: function(e) {
                        return {
                            variables: {
                                videoTypes: e.videoExperimentAssignment === ft ? [ie.a.Archive, ie.a.Highlight, ie.a.Upload] : [ie.a.Highlight, ie.a.Upload]
                            }
                        }
                    },
                    name: "videoData",
                    skip: function(e) {
                        return e.videoExperimentAssignment === ht
                    }
                }), Object(M.c)("Followed Channels")], t)
            }(D.Component),
            ke = be,
            Se = n(107),
            ye = n(38),
            _e = n(283),
            Ne = n(30),
            Ee = n(9),
            Te = n(57),
            Ce = n(72),
            De = n(285),
            we = n(148),
            Ie = n(71),
            Pe = n(286),
            Oe = n(55),
            Fe = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderJoinButton = function() {
                        var e = null,
                            n = Object(Ie.d)(t.props.user.login, t.props.activity);
                        return n && (e = {
                            pathname: n,
                            state: {
                                content: re.PageviewContent.Presence,
                                medium: re.PageviewMedium.SideNav
                            }
                        }), D.createElement(Pe.a, {
                            link: e,
                            onClick: t.handleJoinClick,
                            "data-a-target": "friend-join-button"
                        })
                    }, t.handleClick = function(e) {
                        e.preventDefault();
                        var n = Object(Oe.a)(t.props.user.id, t.props.currentUserID);
                        t.props.openThread(n), Object(we.c)({
                            force: !0,
                            timeout: 0
                        })
                    }, t.handleJoinClick = function() {
                        Object(De.b)({
                            context: De.a.FriendsListButton,
                            friendActivity: t.props.activity,
                            friendLogin: t.props.user.login
                        })
                    }, t.getPresenceStatus = function() {
                        switch (t.props.availability) {
                            case pe.a.Online:
                                return 3;
                            case pe.a.Idle:
                                return 5;
                            case pe.a.Busy:
                                return 4;
                            default:
                                return
                        }
                    }, t.onMouseEnter = function() {
                        Object(we.d)({
                            id: t.props.user.id,
                            direction: H.q.Right,
                            ref: t.ref
                        })
                    }, t.onMouseLeave = function() {
                        return Object(we.c)()
                    }, t.setRefDelegate = function(e) {
                        t.ref = e
                    }, t
                }
                return T.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return D.createElement("div", {
                        ref: this.setRefDelegate,
                        onMouseEnter: this.onMouseEnter,
                        onMouseLeave: this.onMouseLeave
                    }, D.createElement(G, T.__assign({
                        title: this.props.user.displayName,
                        titleElement: Object(B.a)(this.props.user.login, this.props.user.displayName),
                        avatarAlt: this.props.user.displayName,
                        avatarSrc: this.props.user.profileImageURL,
                        avatarPresence: !0,
                        presenceStatus: this.getPresenceStatus(),
                        onClick: this.handleClick,
                        linkTo: "#",
                        metadataLeft: D.createElement(Ie.b, {
                            availability: this.props.availability,
                            activity: this.props.activity,
                            condensed: !0
                        }),
                        slideInContent: this.renderJoinButton(),
                        collapsed: this.props.collapsed
                    }, Object(H._39)(this.props))))
                }, t = T.__decorate([Object(M.c)("OnlineFriend")], t)
            }(D.Component),
            Ue = Fe,
            Re = Object(L.a)(v, b)(Ue),
            xe = n(294),
            Me = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.defaultInitialRenderCount = 15, n.sortTimeout = 0, n.onMouseEnter = function() {
                        n.state.hasInteracted || n.setState({
                            hasInteracted: !0
                        })
                    }, n.renderOnlineFriends = function() {
                        return n.state.sortedFriends.length ? (n.state.hasInteracted ? n.state.sortedFriends : n.state.sortedFriends.slice(0, n.getDisplayCount())).map(function(e, t) {
                            return e.node.id ? D.createElement(Re, {
                                activity: e.activity,
                                availability: e.availability,
                                key: "online-friends-" + e.node.id,
                                collapsed: n.props.collapsed,
                                user: e.node,
                                "data-a-id": "online-friend-" + t,
                                "data-a-target": "online-friend",
                                "data-a-name": "online-friend-" + e.node.login
                            }) : null
                        }) : []
                    }, n.getDisplayCount = function() {
                        return n.state.hasInteracted ? n.state.sortedFriends.length : Math.min(n.defaultInitialRenderCount, n.state.sortedFriends.length)
                    }, n.state = {
                        sortedFriends: [],
                        hasSorted: !1,
                        initialRenderCount: n.defaultInitialRenderCount,
                        hasInteracted: !1
                    }, n
                }
                return T.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t = this;
                    this.sortTimeout && (clearTimeout(this.sortTimeout), this.sortTimeout = 0), this.sortTimeout = setTimeout(function() {
                        var n = !!e.friends && e.friends.length > 0;
                        t.setState({
                            sortedFriends: a(e.friends),
                            hasSorted: n
                        }), t.props.latencyTracking.reportInteractive(t.getDisplayCount())
                    }, 100)
                }, t.prototype.componentDidMount = function() {
                    this.props.loading || this.props.errored || !this.props.friends || this.setState({
                        sortedFriends: a(this.props.friends),
                        hasSorted: !0
                    })
                }, t.prototype.render = function() {
                    return this.props.friends && 0 !== this.props.friends.length || this.props.errored || this.props.loading || this.props.collapsed ? !this.props.errored && !this.props.loading && this.props.friends && this.state.hasSorted && this.props.friends.length > 0 && 0 === this.state.sortedFriends.length && !this.props.collapsed ? D.createElement(ee, {
                        hasOfflineFriends: !0
                    }) : D.createElement("div", {
                        className: "online-friends",
                        onMouseEnter: this.onMouseEnter,
                        "data-a-target": "online-friends-list"
                    }, D.createElement(Q, {
                        title: Object(I.d)("Online Friends", "OnlineFriends"),
                        collapsed: this.props.collapsed,
                        collapsedIcon: H._9.FriendsSC
                    }), this.renderOnlineFriends()) : D.createElement(ee, null)
                }, t = T.__decorate([Object(Se.a)(function(e) {
                    return {
                        query: xe,
                        skip: !e.friends || 0 === e.friends.length,
                        topic: Object(Ne.f)(e.selfID || ""),
                        type: ye.c.Presence,
                        mutator: function(t, n) {
                            if (!n.currentUser || !n.currentUser.friends) return n;
                            for (var i = -1, a = 0; a < n.currentUser.friends.edges.length; a++) {
                                if (+n.currentUser.friends.edges[a].node.id === t.data.user_id) {
                                    i = a;
                                    break
                                }
                            }
                            if (i >= 0) {
                                var r = n.currentUser.friends.edges[i];
                                r.availability = t.data.availability.toUpperCase();
                                var s = "$User:" + e.selfID + ".friends.edges." + i + ".activity";
                                r.activity = Object(_e.a)(t.data.activity, s)
                            }
                            return n
                        }
                    }
                }), Object(Se.a)(function(e) {
                    return {
                        query: xe,
                        skip: !e.friends || 0 === e.friends.length,
                        topic: Object(Ne.b)(e.selfID || ""),
                        mutator: function(t, n) {
                            if (!n.currentUser || !n.currentUser.friends) return n;
                            var i = t.change === ye.a.Removed || t.change === ye.a.SelfRemoved;
                            if ((t.change === ye.a.Accepted || t.change === ye.a.SelfAccepted) && setTimeout(function() {
                                    e && e.refetch && e.refetch()
                                }), !i) return n;
                            for (var a = -1, r = t.change === ye.a.SelfRemoved, s = 0; s < n.currentUser.friends.edges.length; s++) {
                                if (n.currentUser.friends.edges[s].node.id === (r ? t.target_user_id : t.user_id)) {
                                    a = s;
                                    break
                                }
                            }
                            return a >= 0 && n.currentUser.friends.edges.splice(a, 1), n
                        }
                    }
                }), Object(M.c)("OnlineFriends")], t)
            }(D.Component),
            Le = Me,
            Ae = n(18),
            je = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getSlideInContent = function() {
                        if (t.props.firstPageLoaded) return D.createElement(A.a, {
                            tabIndex: -1,
                            hideIcon: !0,
                            hideWhenFollowing: !0,
                            size: H.x.Small,
                            channelLogin: t.props.login,
                            "data-a-target": "recommended-channel-follow-button"
                        })
                    }, t
                }
                return T.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = Object(B.a)(this.props.login, this.props.displayName, !0),
                        t = this.props.gameName.length > 0 ? e + " - " + this.props.gameName : e;
                    return D.createElement(G, T.__assign({
                        title: e,
                        titleElement: Object(B.a)(this.props.login, this.props.displayName),
                        avatarAlt: e,
                        avatarSrc: this.props.profileImageURL,
                        linkTo: {
                            pathname: "/" + this.props.login,
                            state: {
                                content: re.PageviewContent.RecommendedChannels,
                                medium: re.PageviewMedium.SideNav,
                                content_index: this.props.contentIndex
                            }
                        },
                        metadataLeft: this.props.gameName,
                        slideInContent: this.getSlideInContent(),
                        collapsed: this.props.collapsed,
                        tooltipLabel: t
                    }, Object(H._39)(this.props)))
                }, t = T.__decorate([Object(M.c)("RecommendedChannel")], t)
            }(D.Component),
            Be = je,
            We = Object(L.a)(k)(Be),
            He = n(529),
            Ve = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasLoadedMore: !1
                    }, t.getRecommendedChannels = function() {
                        return t.props.data.currentUser.recommendations.liveRecommendations.nodes.slice(0, t.getNodesToDisplayCount()).map(function(e, n) {
                            return e.broadcaster && e.broadcaster.id && e.broadcaster.login ? D.createElement(We, {
                                id: e.broadcaster.id,
                                key: "recommended-channels-" + e.id,
                                collapsed: t.props.collapsed,
                                "data-a-id": "recommended-channel-" + n,
                                "data-a-target": "recommended-channel",
                                displayName: e.broadcaster.displayName,
                                contentIndex: n,
                                gameName: e.game && e.game.name || "",
                                login: e.broadcaster.login,
                                profileImageURL: e.broadcaster.profileImageURL
                            }) : null
                        })
                    }, t.hasDataToDisplay = function() {
                        return !(t.props.data.loading || t.props.data.error || !t.props.data.currentUser || 0 === t.props.data.currentUser.recommendations.liveRecommendations.nodes.length)
                    }, t.getNodesToDisplayCount = function() {
                        return t.hasDataToDisplay ? t.state.hasLoadedMore ? t.props.data.currentUser.recommendations.liveRecommendations.nodes.length : Math.min(t.props.data.currentUser.recommendations.liveRecommendations.nodes.length, 3) : 0
                    }, t.onClickShowMore = function() {
                        t.setState({
                            hasLoadedMore: !0
                        })
                    }, t.onClickShowLess = function() {
                        t.setState({
                            hasLoadedMore: !1
                        })
                    }, t
                }
                return T.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data.loading || this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (!this.hasDataToDisplay()) return null;
                    var e = null;
                    return !this.props.collapsed && this.props.data.currentUser.recommendations.liveRecommendations.nodes.length > 3 && (e = D.createElement(de, {
                        onClickMore: this.onClickShowMore,
                        onClickLess: this.onClickShowLess,
                        lessDisabled: !this.state.hasLoadedMore,
                        moreDisabled: this.state.hasLoadedMore
                    })), D.createElement("div", {
                        className: "recommended-channels"
                    }, D.createElement(Q, {
                        title: Object(I.d)("Recommended Channels", "RecommendedChannels"),
                        collapsed: this.props.collapsed,
                        collapsedIcon: H._9.NavChannels
                    }), this.getRecommendedChannels(), e)
                }, t = T.__decorate([Object(O.a)(He, {
                    options: function() {
                        return {
                            variables: {
                                first: 10,
                                recID: Object(Ae.a)(),
                                language: ""
                            }
                        }
                    }
                }), Object(M.c)("RecommendedChannels")], t)
            }(D.Component),
            Ge = Ve,
            qe = n(20),
            ze = n(530),
            $e = n(531),
            Ke = function(e) {
                function t() {
                    var t = e.call(this) || this;
                    return t.getSlideInContent = function() {
                        if (!t.state.working) {
                            var e = Object(I.d)("Add Friend", "RecommendedFriend");
                            return D.createElement(H.v, {
                                tabIndex: -1,
                                ariaLabel: e,
                                type: H.w.Primary,
                                icon: H._9.AddFriend,
                                size: H.x.Small,
                                onClick: t.onClickAddFriend,
                                "data-a-target": "recommended-friend-add-button"
                            })
                        }
                    }, t.handleClick = function(e) {
                        e.preventDefault();
                        var n = Object(Oe.a)(t.props.user.id, t.props.currentUserID);
                        t.props.openThread(n), Object(we.c)({
                            force: !0,
                            timeout: 0
                        })
                    }, t.onClickAddFriend = function() {
                        t.setState({
                            working: !0
                        }, function() {
                            var e = Object(qe.a)({
                                targetID: t.props.user.id
                            });
                            t.props.createFriendRequest(e).then(t.props.onRecommendationChanged).catch(function() {
                                return t.setState({
                                    working: !1
                                })
                            })
                        })
                    }, t.onMouseEnter = function() {
                        Object(we.d)({
                            id: t.props.user.id,
                            direction: H.q.Right,
                            ref: t.ref
                        })
                    }, t.onMouseLeave = function() {
                        return Object(we.c)()
                    }, t.setRefDelegate = function(e) {
                        t.ref = e
                    }, t.state = {
                        working: !1
                    }, t
                }
                return T.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return D.createElement("div", {
                        ref: this.setRefDelegate,
                        onMouseEnter: this.onMouseEnter,
                        onMouseLeave: this.onMouseLeave
                    }, D.createElement(G, T.__assign({
                        title: this.props.user.displayName,
                        titleElement: Object(B.a)(this.props.user.login, this.props.user.displayName),
                        avatarAlt: this.props.user.displayName,
                        avatarSrc: this.props.user.profileImageURL,
                        onClick: this.handleClick,
                        linkTo: "#",
                        metadataLeft: "",
                        collapsed: this.props.collapsed,
                        slideInContent: this.getSlideInContent()
                    }, Object(H._39)(this.props))))
                }, t = T.__decorate([Object(O.a)(ze, {
                    name: "createFriendRequest"
                }), Object(O.a)($e, {
                    name: "dismissFriendRecommendation"
                }), Object(M.c)("RecommendedFriend")], t)
            }(D.Component),
            Qe = Ke,
            Ye = Object(L.a)(S, y)(Qe),
            Je = n(532),
            Xe = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getRecommendedFriends = function() {
                        return t.props.data.currentUser.recommendations.friends.slice(0, t.getDisplayCount(t.props)).map(function(e, n) {
                            return e.user.id ? D.createElement(Ye, {
                                key: "recommended-friends-" + e.user.id,
                                user: e.user,
                                collapsed: t.props.collapsed,
                                onRecommendationChanged: t.onRecommendationDataChanged,
                                "data-a-id": "recommended-friend-" + n,
                                "data-a-target": "recommended-friend"
                            }) : null
                        })
                    }, t.getDisplayCount = function(e) {
                        return Math.min(5, e.data.currentUser.recommendations.friends.length)
                    }, t.onRecommendationDataChanged = function() {
                        t.props.data.refetch()
                    }, t
                }
                return T.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data.loading || this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.props.collapsed || this.props.data.loading || this.props.data.error || 0 === this.props.data.currentUser.recommendations.friends.length ? null : D.createElement("div", {
                        className: "recommended-friends"
                    }, D.createElement(Q, {
                        title: Object(I.d)("Recommended Friends", "RecommendedFriends")
                    }), this.getRecommendedFriends())
                }, t = T.__decorate([Object(O.a)(Je), Object(M.c)("RecommendedFriends")], t)
            }(D.Component),
            Ze = Xe,
            et = n(66),
            tt = n(108),
            nt = n(533),
            it = n(534),
            at = function(e) {
                function t() {
                    var t = e.call(this) || this;
                    return t.handleClick = function(e) {
                        e.preventDefault();
                        var n = Object(Oe.a)(t.props.id, t.props.currentUserID);
                        t.props.openThread(n)
                    }, t.getSlideInContent = function() {
                        if (!t.state.working) {
                            if (t.state.requested) {
                                var e = Object(I.d)("Cancel Request", "SearchFriendResult");
                                return D.createElement(H.v, {
                                    ariaLabel: e,
                                    type: H.w.Primary,
                                    icon: H._9.Close,
                                    size: H.x.Small,
                                    onClick: t.onClickCancelRequest,
                                    "data-a-target": "search-result-cancel-button"
                                })
                            }
                            var n = Object(I.d)("Add Friend", "SearchFriendResult");
                            return D.createElement(H.v, {
                                ariaLabel: n,
                                type: H.w.Primary,
                                icon: H._9.AddFriend,
                                size: H.x.Small,
                                onClick: t.onClickAddFriend,
                                "data-a-target": "search-result-add-button"
                            })
                        }
                    }, t.onClickAddFriend = function() {
                        t.setState({
                            working: !0
                        }, function() {
                            t.props.createFriendRequest(Object(qe.a)({
                                targetID: t.props.id
                            })).then(function() {
                                t.setState({
                                    working: !1,
                                    requested: !0
                                })
                            }).catch(function() {
                                t.setState({
                                    working: !1
                                })
                            })
                        })
                    }, t.onClickCancelRequest = function() {
                        t.setState({
                            working: !0
                        }, function() {
                            t.props.cancelFriendRequest(Object(qe.a)({
                                targetID: t.props.id
                            })).then(function() {
                                t.setState({
                                    working: !1,
                                    requested: !1
                                })
                            }).catch(function() {
                                t.setState({
                                    working: !1
                                })
                            })
                        })
                    }, t.state = {
                        working: !1,
                        requested: !1
                    }, t
                }
                return T.__extends(t, e), t.prototype.render = function() {
                    return D.createElement(G, T.__assign({
                        title: this.props.displayName,
                        titleElement: Object(B.a)(this.props.login, this.props.displayName),
                        avatarAlt: this.props.displayName,
                        avatarSrc: this.props.profileImageURL,
                        linkTo: "#",
                        onClick: this.handleClick,
                        slideInContent: this.getSlideInContent(),
                        collapsed: this.props.collapsed
                    }, Object(j.a)(this.props)))
                }, t = T.__decorate([Object(O.a)(it, {
                    name: "createFriendRequest"
                }), Object(O.a)(nt, {
                    name: "cancelFriendRequest"
                }), Object(M.c)("Search Friend Result")], t)
            }(D.Component),
            rt = at,
            st = Object(L.a)(_, N)(rt),
            ot = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.inputTimeout = 0, n.renderFilteredFriends = function() {
                        return n.state.filteredFriends && 0 !== n.state.filteredFriends.length ? n.state.filteredFriends.filter(function(e) {
                            return null !== e.node.id
                        }).map(function(e, t) {
                            return D.createElement(Re, {
                                activity: e.activity,
                                availability: e.availability,
                                key: "friend-search-results-" + e.node.id,
                                collapsed: n.props.collapsed,
                                user: e.node,
                                "data-a-id": "friend-search-result-" + t,
                                "data-a-target": "friend-search-result"
                            })
                        }) : []
                    }, n.renderSearchResults = function() {
                        var e = n.state.searchResults;
                        return e && e.users && 0 !== e.users.totalHits ? e.users.hits.map(function(e, t) {
                            return D.createElement(st, {
                                id: e.objectID,
                                displayName: e.name,
                                login: e.login,
                                profileImageURL: e.profile_image,
                                key: "search-results-" + e.objectID,
                                collapsed: n.props.collapsed,
                                "data-a-id": "search-result-" + t,
                                "data-a-target": "search-result"
                            })
                        }) : []
                    }, n.renderNoResults = function() {
                        return D.createElement(H.U, {
                            padding: {
                                x: 1,
                                y: .5
                            }
                        }, D.createElement(H._21, {
                            color: H.F.Alt2
                        }, Object(I.d)('Sorry, we couldn\'t find anyone named "{user}"', {
                            user: n.props.searchInput
                        }, "SearchFriendResult")))
                    }, n.trySearchAndFilter = function(e) {
                        if (e.searchInput && 0 === e.searchInput.length) return clearTimeout(n.inputTimeout), void(n.inputTimeout = 0);
                        clearTimeout(n.inputTimeout), n.inputTimeout = setTimeout(function() {
                            if (n.search(e.searchInput), e.friends && e.searchInput) {
                                var t = e.searchInput || "",
                                    i = {},
                                    a = e.friends.filter(function(e) {
                                        var n = e.node.displayName || e.node.login || "",
                                            a = n.toLowerCase().includes(t.toLowerCase());
                                        return a && (i[e.node.login] = !0), a
                                    });
                                n.setState({
                                    filteredFriends: a,
                                    filterFriendsByLogin: i
                                })
                            }
                        }, 200)
                    }, n.state = {
                        searching: !0
                    }, n.searchClient = new tt.a(I.a.algoliaApplicationID, I.a.algoliaAPIKey), n
                }
                return T.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.props.searchInput !== e.searchInput && this.trySearchAndFilter(e)
                }, t.prototype.componentDidMount = function() {
                    this.trySearchAndFilter(this.props)
                }, t.prototype.componentWillUnmount = function() {
                    clearTimeout(this.inputTimeout), this.inputTimeout = 0
                }, t.prototype.render = function() {
                    var e = null,
                        t = !this.state.filteredFriends || 0 === this.state.filteredFriends.length,
                        n = !this.state.searchResults || !this.state.searchResults.users || 0 === this.state.searchResults.users.hits.length;
                    return e = !this.state.searching && t && n ? this.renderNoResults() : [this.renderFilteredFriends(), this.renderSearchResults()], D.createElement("div", {
                        className: "recommended-friends"
                    }, D.createElement(Q, {
                        title: Object(I.d)("Results", "SearchFriendResults")
                    }), e)
                }, t.prototype.search = function(e) {
                    return T.__awaiter(this, void 0, void 0, function() {
                        var t, n = this;
                        return T.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return e ? (this.setState({
                                        searching: !0
                                    }), [4, this.searchClient.queryForType(et.a.Users, e, Object(Ae.a)(), {
                                        hitsPerPage: 10
                                    })]) : [2];
                                case 1:
                                    return t = i.sent(), this.inputTimeout && e === this.props.searchInput && (t && t.users && (t.users.hits = t.users.hits.filter(function(e) {
                                        return n.state.filterFriendsByLogin && !n.state.filterFriendsByLogin[e.login]
                                    })), this.setState({
                                        searchResults: t,
                                        searching: !1
                                    })), [2]
                            }
                        })
                    })
                }, t = T.__decorate([Object(M.c)("Search Friend Results")], t)
            }(D.Component),
            lt = ot,
            ct = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleInputChange = function(e) {
                        t.props.onInputChange(e.target.value)
                    }, t
                }
                return T.__extends(t, e), t.prototype.render = function() {
                    return this.props.collapsed ? null : D.createElement(H._17, {
                        borderTop: !0,
                        padding: 1
                    }, D.createElement(H._11, {
                        id: "side-nav.find-friends",
                        placeholder: Object(I.d)("Search to Add Friends", "SearchFriendsInput"),
                        onChange: this.handleInputChange,
                        "data-a-target": "side-nav-search-input"
                    }))
                }, t
            }(D.Component),
            dt = n(295);
        n(535);
        n.d(t, "d", function() {
            return ut
        }), n.d(t, "b", function() {
            return ht
        }), n.d(t, "a", function() {
            return ft
        }), n.d(t, "c", function() {
            return bt
        });
        var ut = 1200,
            pt = "treatment",
            mt = "control",
            ht = "none",
            ft = "all_content",
            gt = "no_archives",
            vt = function(e) {
                function t(t) {
                    var n = e.call(this) || this;
                    n.handleToggleVisibility = function() {
                        var e = n.getLayoutCache();
                        n.props.collapsed ? (n.props.expandSideNav(), e.resource.isSocialColumnClosedByUserAction = !1) : (n.props.collapseSideNav(), e.resource.isSocialColumnClosedByUserAction = !0), I.k.set(I.n.config.layoutCacheKey, e), Object(R.c)({
                            element: R.a.SocialColumn,
                            action: n.props.collapsed ? R.b.Open : R.b.Close
                        })
                    }, n.collapseOnBreakpoint = function() {
                        var e = window.innerWidth;
                        e < ut && !n.state.forceCollapsed ? n.setState({
                            forceCollapsed: !0
                        }) : e >= ut && n.state.forceCollapsed && n.setState({
                            forceCollapsed: !1
                        }), n.resetAnimationState()
                    }, n.handleWindowResize = function() {
                        n.resizeAnimationFrame || (n.resizeAnimationFrame = requestAnimationFrame(n.collapseOnBreakpoint))
                    }, n.resetAnimationState = function() {
                        n.resizeAnimationFrame = null
                    }, n.onHistoryChange = function(e) {
                        var t = n.props.isLoggedIn,
                            i = Object(dt.a)({
                                isLoggedIn: t,
                                location: e
                            });
                        i !== n.state.hideSideNav && n.setState({
                            hideSideNav: i
                        })
                    }, n.onSearchInputChange = function(e) {
                        n.setState({
                            searchInput: e
                        })
                    }, n.reportInteractive = function() {
                        n.props.isLoggedIn && (n.props.data.loading || n.props.data.error) || n.props.latencyTracking.reportInteractive()
                    }, n.getRelevanceSortingAssignment = function(e) {
                        switch (e) {
                            case pt:
                                return !0;
                            case mt:
                            default:
                                return !1
                        }
                    }, n.getVideoAssignment = function(e) {
                        switch (e) {
                            case ht:
                            case ft:
                            case gt:
                                return e;
                            default:
                                return ht
                        }
                    };
                    var i = t.isLoggedIn,
                        a = t.location;
                    return n.state = {
                        hideSideNav: Object(dt.a)({
                            isLoggedIn: i,
                            location: a
                        }),
                        forceCollapsed: !1,
                        videoExperimentAssignment: ht,
                        premieresEnabled: !1,
                        sortByRelevance: !1
                    }, n
                }
                return T.__extends(t, e), t.prototype.componentWillMount = function() {
                    return T.__awaiter(this, void 0, void 0, function() {
                        var e, t, n;
                        return T.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return [4, I.n.experiments.getAssignment("TWILIGHT_VIDEOS_IN_SIDENAV")];
                                case 1:
                                    return e = i.sent(), [4, I.n.experiments.getAssignment("TWILIGHT_PREMIERE_UPLOAD_FLOW")];
                                case 2:
                                    return t = i.sent(), [4, I.n.experiments.getAssignment("TWILIGHT_AML_RANKING_FOLLOWS")];
                                case 3:
                                    return n = i.sent(), this.setState({
                                        videoExperimentAssignment: this.getVideoAssignment(e),
                                        premieresEnabled: "yes" === t,
                                        sortByRelevance: this.getRelevanceSortingAssignment(n)
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.componentDidMount = function() {
                    this.reportInteractive(), this.historyUnlisten = I.n.history.listen(this.onHistoryChange), window.addEventListener("resize", this.handleWindowResize), this.collapseOnBreakpoint()
                }, t.prototype.componentDidUpdate = function() {
                    this.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    !this.props.collapsed && e.collapsed && this.state.searchInput && this.state.searchInput.length > 0 && this.setState({
                        searchInput: ""
                    })
                }, t.prototype.componentWillUnmount = function() {
                    this.historyUnlisten(), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame), window.removeEventListener("resize", this.handleWindowResize)
                }, t.prototype.render = function() {
                    var e = this.props.collapsed || this.state.forceCollapsed,
                        t = C("side-nav", {
                            "side-nav--collapsed": e
                        }),
                        n = {
                            "side-nav__toggle-visibility": !0,
                            "side-nav__toggle-visibility--open": e
                        },
                        i = D.createElement(H.P, {
                            position: H._2.Absolute,
                            flexGrow: 0,
                            flexShrink: 0,
                            display: this.state.forceCollapsed ? H.H.Hide : H.H.Block,
                            className: C(n)
                        }, D.createElement("button", {
                            onClick: this.handleToggleVisibility
                        }, D.createElement(H.P, {
                            className: "side-nav__toggle-visibility-icon",
                            position: H._2.Absolute
                        }, D.createElement(H._21, {
                            type: H._26.Span
                        }, D.createElement(H._8, {
                            asset: H._9.GlyphArrDown
                        })))));
                    if (!this.props.isLoggedIn) return this.state.hideSideNav ? null : D.createElement(H.U, {
                        className: t,
                        flexShrink: 0,
                        flexGrow: 0,
                        fullHeight: !0,
                        position: H._2.Relative
                    }, D.createElement(H.U, {
                        className: Object(U.c)(F.a.Dark),
                        flexShrink: 0,
                        fullWidth: !0,
                        fullHeight: !0
                    }, D.createElement(H._17, {
                        borderRight: !0,
                        className: "side-nav__theme-wrapper",
                        flexShrink: 0,
                        flexGrow: 1,
                        flexDirection: H.J.Column,
                        flexWrap: H.K.NoWrap,
                        fullWidth: !0,
                        fullHeight: !0,
                        display: H.H.Flex,
                        position: H._2.Relative
                    }, D.createElement(H.U, {
                        flexWrap: H.K.NoWrap,
                        fullHeight: !0,
                        display: H.H.Flex,
                        position: H._2.Relative,
                        fullWidth: !0
                    }, D.createElement(H.P, {
                        flexGrow: 1,
                        fullWidth: !0
                    }, D.createElement(P.b, {
                        suppressScrollX: !0
                    }, D.createElement(ne, {
                        collapsed: e
                    })))))), i);
                    var a = this.state.searchInput && this.state.searchInput.length > 0 && !e,
                        r = null,
                        s = this.props.data && !this.props.data.error && !this.props.data.loading,
                        o = s && this.props.data.currentUser,
                        l = o && o.friends ? o.friends.edges : [];
                    a && (r = D.createElement(H.P, {
                        position: H._2.Absolute,
                        attachLeft: !0,
                        attachRight: !0,
                        attachTop: !0
                    }, D.createElement(P.b, {
                        className: "side-nav__overlay-wrapper",
                        suppressScrollX: !0
                    }, D.createElement(lt, {
                        searchInput: this.state.searchInput,
                        friends: l,
                        key: "search-friend-results",
                        collapsed: e
                    }))));
                    var c = o ? o.id : "";
                    return D.createElement(H.U, {
                        className: t,
                        flexShrink: 0,
                        fullHeight: !0,
                        position: H._2.Relative
                    }, D.createElement(H.U, {
                        className: Object(U.c)(F.a.Dark),
                        flexShrink: 0,
                        fullWidth: !0,
                        fullHeight: !0
                    }, D.createElement(H._17, {
                        className: "side-nav__theme-wrapper",
                        borderRight: !0,
                        flexShrink: 0,
                        flexGrow: 1,
                        flexDirection: H.J.Column,
                        flexWrap: H.K.NoWrap,
                        fullWidth: !0,
                        fullHeight: !0,
                        display: H.H.Flex,
                        position: H._2.Relative
                    }, D.createElement(H.U, {
                        className: "side-nav__overlay-wrapper",
                        flexWrap: H.K.NoWrap,
                        fullHeight: !0,
                        display: H.H.Flex,
                        position: H._2.Relative,
                        overflow: H.Y.Hidden,
                        fullWidth: !0
                    }, D.createElement(H.P, {
                        flexGrow: 1,
                        fullWidth: !0,
                        overflow: H.Y.Hidden
                    }, D.createElement(P.b, {
                        suppressScrollX: !0
                    }, D.createElement(H.U, {
                        flexGrow: 1,
                        fullWidth: !0
                    }, D.createElement(ke, {
                        collapsed: e,
                        premieresEnabled: this.state.premieresEnabled,
                        videoExperimentAssignment: this.state.videoExperimentAssignment,
                        sortByRelevance: this.state.sortByRelevance
                    }), D.createElement(Le, {
                        collapsed: e,
                        friends: l,
                        selfID: c,
                        loading: this.props.data.loading,
                        errored: !!this.props.data.error,
                        refetch: this.props.data.refetch
                    }), this.props.firstPageLoaded && D.createElement(Ge, {
                        collapsed: e
                    }), this.props.firstPageLoaded && D.createElement(Ze, {
                        collapsed: e
                    })))), r), D.createElement(ct, {
                        collapsed: e,
                        onInputChange: this.onSearchInputChange
                    }))), i)
                }, t.prototype.getLayoutCache = function() {
                    return I.k.get(I.n.config.layoutCacheKey, x.a)
                }, t = T.__decorate([Object(M.c)("SideNav"), Object(O.a)(xe, {
                    skip: function(e) {
                        return !e.isLoggedIn
                    }
                })], t)
            }(D.Component),
            bt = Object(w.f)(vt)
    },
    145: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e.Live = "live", e.WatchParty = "watch_party", e.Premiere = "premiere", e.Rerun = "rerun"
        }(i || (i = {}))
    },
    146: function(e, t, n) {
        "use strict";

        function i() {
            return {
                byID: {},
                orderedIDs: [],
                openedIDs: [],
                focusedID: ""
            }
        }

        function a(e, t) {
            switch (void 0 === e && (e = i()), t.type) {
                case b.f:
                    var n = g.__assign({}, e),
                        a = n.byID[t.data.threadID],
                        d = n.openedIDs.includes(t.data.threadID);
                    return a || (n = v(n, function(e) {
                        return e.orderedIDs
                    }, function(e) {
                        return e.push(t.data.threadID), e
                    }), n = v(n, function(e) {
                        return e.byID
                    }, function(e) {
                        return e[t.data.threadID] = t.data, e
                    })), n.openedIDs.includes(t.data.threadID) && !n.byID[t.data.threadID].hidden || (n.byID[t.data.threadID].hidden = t.data.hidden), t.data.ignoreCollapseIfOpen || t.data.collapsed || (n.focusedID = t.data.threadID), n = l(n, t.data.threadID, t.contentWidth), (!d || d && !t.data.ignoreCollapseIfOpen) && (t.data.collapsed || (n = c(n, t.data.threadID, t.contentWidth))), n;
                case b.b:
                    if (!e.byID[t.threadID]) return e;
                    var n = v(e, function(e) {
                        return e.byID
                    }, function(e) {
                        return delete e[t.threadID], e
                    });
                    return n = v(n, function(e) {
                        return e.orderedIDs
                    }, function(e) {
                        return e.filter(function(e) {
                            return e !== t.threadID
                        })
                    }), n = v(n, function(e) {
                        return e.openedIDs
                    }, function(e) {
                        return e.filter(function(e) {
                            return e !== t.threadID
                        })
                    }), e.focusedID === t.threadID && (n.focusedID = n.openedIDs[0]), o(n, t.contentWidth);
                case b.c:
                    return e.byID[t.threadID] ? (e.focusedID === t.threadID && (e.focusedID = ""), v(e, function(e) {
                        return e.byID
                    }, function(e) {
                        return e[t.threadID].collapsed = !0, e
                    })) : e;
                case b.d:
                    return c(e, t.threadID, t.contentWidth);
                case b.e:
                    return v(e, function(e) {
                        return e.focusedID
                    }, function() {
                        return t.threadID
                    });
                case b.g:
                    return v(e, function(e) {
                        return e.focusedID
                    }, function(e) {
                        return e === t.threadID ? "" : e
                    });
                case b.a:
                    var u = r(e);
                    if (u > t.contentWidth) {
                        if (e.openedIDs.length <= 1) return e;
                        for (var p = g.__assign({}, e); u > t.contentWidth && p.openedIDs.length > 1;) p = s(p), u = r(p);
                        return p
                    }
                    if (t.contentWidth - u >= S) {
                        var m = Math.floor((t.contentWidth - u) / S),
                            h = Math.min(m, e.orderedIDs.length - e.openedIDs.length);
                        if (0 === h) return e;
                        for (var p = g.__assign({}, e), f = 0; f < h; f++)
                            if (p = o(p, t.contentWidth), p.openedIDs.length > 1)
                                for (var k = p.openedIDs, y = k.length, _ = 0, N = p.orderedIDs; _ < N.length; _++) {
                                    var E = N[_];
                                    if (k[y - 1] === E) {
                                        var T = k.splice(y - 2, 1);
                                        k.push(T[0]);
                                        break
                                    }
                                    if (k[y - 2] === E) break
                                }
                            return p
                    }
                    return e;
                default:
                    return e
            }
        }

        function r(e) {
            if (0 === e.openedIDs.length) return 0;
            for (var t = 0, n = 0, i = e.openedIDs; n < i.length; n++) {
                var a = i[n],
                    r = e.byID[a];
                r.hidden || (t += r.collapsed ? k : S)
            }
            return t
        }

        function s(e) {
            var t = e.openedIDs.slice(),
                n = t.pop();
            return n && e.focusedID === n && t.length > 0 && (t.pop(), t.push(n)), v(e, function(e) {
                return e.openedIDs
            }, function() {
                return t
            })
        }

        function o(e, t) {
            var n = e.orderedIDs.filter(function(t) {
                return !e.openedIDs.includes(t)
            });
            return n.length > 0 ? l(e, n[0], t) : e
        }

        function l(e, t, n) {
            var i = n - r(e),
                a = g.__assign({}, e);
            return a.openedIDs.includes(t) || (i < S && (a = s(a)), a = v(a, function(e) {
                return e.openedIDs
            }, function(e) {
                return e.push(t), e
            })), a
        }

        function c(e, t, n) {
            if (!e.byID[t]) return e;
            var i = v(e, function(e) {
                return e.byID
            }, function(e) {
                return e[t].collapsed = !1, e
            });
            return i.focusedID = t, r(e) > n && (i = s(i)), i
        }

        function d() {
            return {
                byThreadID: {}
            }
        }

        function u(e, t) {
            switch (void 0 === e && (e = d()), t.type) {
                case y.a:
                    return e.byThreadID[t.threadID] ? v(e, function(e) {
                        return e.byThreadID[t.threadID]
                    }, function(e) {
                        return [{
                            threadID: t.threadID,
                            afterMessageID: t.afterMessageID,
                            content: t.content
                        }].concat(e)
                    }) : v(e, function(e) {
                        return e.byThreadID
                    }, function(e) {
                        return g.__assign((n = {}, n[t.threadID] = [{
                            threadID: t.threadID,
                            afterMessageID: t.afterMessageID,
                            content: t.content
                        }], n), e);
                        var n
                    });
                default:
                    return e
            }
        }

        function p(e, t) {
            return e.whispers ? e.whispers.display.byID[t] : null
        }

        function m(e, t) {
            return e.whispers.notifications.byThreadID[t] || []
        }
        var h = n(9),
            f = n(2),
            g = n(0),
            v = n(136),
            b = n(57),
            k = 234,
            S = 310,
            y = n(278);
        t.b = p, t.a = m;
        var _ = Object(h.combineReducers)({
            display: a,
            notifications: u
        });
        f.n.store.registerReducer("whispers", _)
    },
    147: function(e, t, n) {
        "use strict";

        function i() {
            return function(e) {
                return function(t) {
                    function n() {
                        var e = null !== t && t.apply(this, arguments) || this;
                        return e.logger = p.i.withCategory("TooltipLayer"), e.show = function(t) {
                            a ? a.showTooltip(t) : e.logger.error(new Error, "Attempted to show a tooltip in the global layer, but the global layer was not mounted.")
                        }, e.showRich = function(t) {
                            a ? a.showRichTooltip(t) : e.logger.error(new Error, "Attempted to show a tooltip in the global layer, but the global layer was not mounted.")
                        }, e.hide = function() {
                            a ? a.hideTooltip() : e.logger.error(new Error, "Attempted to show a tooltip in the global layer, but the global layer was not mounted.")
                        }, e
                    }
                    return r.__extends(n, t), n.prototype.render = function() {
                        var t = {
                            tooltipLayer: {
                                show: this.show,
                                showRich: this.showRich,
                                hide: this.hide
                            }
                        };
                        return o.createElement(e, r.__assign({}, this.props, t))
                    }, n
                }(o.Component)
            }
        }
        var a, r = n(0),
            s = n(4),
            o = n(1),
            l = n(31),
            c = n(33),
            d = n(3),
            u = (n(507), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    var e = (t = {}, t[Object(c.c)(l.a.Dark)] = this.props.forceDarkTheme, t);
                    return o.createElement(d.U, {
                        className: s("rich-content-tooltip", e)
                    }, this.props.children, o.createElement(d.p, {
                        show: this.props.show,
                        direction: this.props.balloonDirection || d.q.Right,
                        tailOffset: this.props.balloonDirection !== d.q.RightCenter ? 16 : 0
                    }, o.createElement("div", {
                        ref: this.props.refCallback,
                        className: "rich-content-tooltip__pointer-target"
                    }, o.createElement(d.U, {
                        padding: .5
                    }, this.props.content))));
                    var t
                }, t
            }(o.Component)),
            p = n(2),
            m = (n(508), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        options: null,
                        richOptions: null,
                        hovering: !1
                    }, n.clearTimeoutAndRun = function(e, t) {
                        void 0 === t && (t = 0), n.displayTimeout && (clearTimeout(n.displayTimeout), n.displayTimeout = 0), n.displayTimeout = setTimeout(function() {
                            e(), n.displayTimeout = 0
                        }, t)
                    }, n.setRef = function(e) {
                        n.removeEventListeners(), n.addEventListeners(e), n.ref = e
                    }, n.addEventListeners = function(e) {
                        e && (e.addEventListener("mouseenter", n.handleMouseEnter), e.addEventListener("mouseleave", n.handleMouseLeave), e.addEventListener("click", n.handleMouseClick))
                    }, n.removeEventListeners = function() {
                        n.ref && (n.ref.removeEventListener("mouseenter", n.handleMouseEnter), n.ref.removeEventListener("mouseleave", n.handleMouseLeave), n.ref.removeEventListener("click", n.handleMouseClick))
                    }, n.handleMouseEnter = function() {
                        n.setState({
                            hovering: !0
                        })
                    }, n.handleMouseLeave = function() {
                        n.setState({
                            hovering: !1
                        }, function() {
                            n.displayTimeout || n.hideTooltip()
                        })
                    }, n.handleMouseClick = function() {
                        n.setState({
                            hovering: !1
                        }, function() {
                            n.hideTooltip(!0)
                        })
                    }, a = n, n
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    var e = this.state.options && this.state.options.from || this.state.richOptions && this.state.richOptions.from;
                    if (!e) return null;
                    var t = this.state.richOptions ? 2 : 0,
                        n = e.getBoundingClientRect(),
                        i = {
                            left: n.left,
                            top: n.top,
                            width: n.width + t,
                            height: n.height
                        },
                        a = o.createElement("div", {
                            style: {
                                width: i.width,
                                height: i.height
                            }
                        }),
                        r = null;
                    return this.state.options ? r = o.createElement(d._30, {
                        direction: this.state.options.direction,
                        align: this.state.options.align,
                        label: this.state.options.label,
                        show: !0
                    }, a) : this.state.richOptions && (r = o.createElement(u, {
                        content: this.state.richOptions.richContent,
                        refCallback: this.state.richOptions.allowHover && this.setRef || void 0,
                        forceDarkTheme: this.state.richOptions.forceDarkTheme,
                        balloonDirection: this.state.richOptions.balloonDirection,
                        show: !0
                    }, a)), o.createElement("div", {
                        className: "tooltip-layer",
                        style: i
                    }, r)
                }, t.prototype.showTooltip = function(e) {
                    var t = this;
                    this.clearTimeoutAndRun(function() {
                        t.setState({
                            options: e,
                            richOptions: null
                        })
                    }), this.hoverTimeout && (clearTimeout(this.hoverTimeout), this.hoverTimeout = 0)
                }, t.prototype.showRichTooltip = function(e) {
                    var t = this;
                    this.clearTimeoutAndRun(function() {
                        t.setState({
                            richOptions: e,
                            options: null
                        })
                    }, e && e.delayOpenMS && !this.hoverTimeout ? e.delayOpenMS : 0), this.hoverTimeout && (clearTimeout(this.hoverTimeout), this.hoverTimeout = 0)
                }, t.prototype.hideTooltip = function(e) {
                    var t = this;
                    e || this.state.hovering || this.displayTimeout || (this.hoverTimeout = setTimeout(function() {
                        clearTimeout(t.hoverTimeout), t.hoverTimeout = 0
                    }, 1e3)), this.clearTimeoutAndRun(function() {
                        t.state.hovering || t.setState({
                            options: null,
                            richOptions: null
                        })
                    }, !e && this.state.richOptions && this.state.richOptions.allowHover ? 400 : 0)
                }, t
            }(o.Component));
        n.d(t, "a", function() {
            return u
        }), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "c", function() {
            return i
        }), n.d(t, "b", function() {
            return m
        }), n.d(t, !1, function() {})
    },
    148: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                currentUserID: e.session.user && "" + e.session.user.id
            }
        }

        function a(e) {
            if (l && e.ref) {
                var t = s(e.direction, e.ref),
                    n = o(t);
                l.showUserCard({
                    id: e.id,
                    direction: e.direction,
                    from: {
                        x: n.coords.x,
                        y: n.coords.y
                    },
                    tailOffset: n.offset
                })
            }
        }

        function r(e) {
            void 0 === e && (e = {}), l && l.hideUserCard(e)
        }

        function s(e, t) {
            var n = t.getBoundingClientRect();
            switch (e) {
                case u.q.Bottom:
                case u.q.BottomLeft:
                    return {
                        x: n.left,
                        y: n.bottom
                    };
                case u.q.BottomCenter:
                    return {
                        x: n.left + n.width / 2,
                        y: n.bottom
                    };
                case u.q.BottomRight:
                    return {
                        x: n.right,
                        y: n.bottom
                    };
                case u.q.Left:
                case u.q.Top:
                case u.q.TopLeft:
                    return {
                        x: n.left,
                        y: n.top
                    };
                case u.q.LeftCenter:
                    return {
                        x: n.left,
                        y: n.top + n.height / 2
                    };
                case u.q.TopCenter:
                    return {
                        x: n.left + n.width / 2,
                        y: n.top
                    };
                case u.q.TopRight:
                case u.q.Right:
                    return {
                        x: n.right,
                        y: n.top
                    };
                case u.q.RightCenter:
                    return {
                        x: n.right,
                        y: n.top + n.height / 2
                    };
                default:
                    return {
                        x: n.left,
                        y: n.bottom
                    }
            }
        }

        function o(e) {
            var t = c.__assign({}, e),
                n = 0;
            return e.y + C + 20 > window.innerHeight && (t.y = window.innerHeight - C - 20, n = e.y - t.y), {
                coords: t,
                offset: n
            }
        }
        var l, c = n(0),
            d = n(1),
            u = n(3),
            p = (n(511), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        options: null,
                        hovering: !1
                    }, n.clearTimeoutAndRun = function(e, t) {
                        void 0 === t && (t = 400), n.displayTimeout && (clearTimeout(n.displayTimeout), n.displayTimeout = 0), n.displayTimeout = setTimeout(function() {
                            e(), n.displayTimeout = 0
                        }, t)
                    }, n.setRef = function(e) {
                        n.removeEventListeners(), n.addEventListeners(e), n.ref = e
                    }, n.addEventListeners = function(e) {
                        e && (e.addEventListener("mouseenter", n.handleMouseEnter, !0), e.addEventListener("mouseleave", n.handleMouseLeave))
                    }, n.removeEventListeners = function() {
                        n.ref && (n.ref.removeEventListener("mouseenter", n.handleMouseEnter), n.ref.removeEventListener("mouseleave", n.handleMouseLeave))
                    }, n.handleMouseEnter = function() {
                        n.setState({
                            hovering: !0
                        })
                    }, n.handleMouseLeave = function() {
                        n.setState({
                            hovering: !1
                        }, function() {
                            n.displayTimeout || n.hideUserCard()
                        })
                    }, l = n, n
                }
                return c.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.state.options || this.removeEventListeners()
                }, t.prototype.render = function() {
                    var e = null;
                    if (this.state.options) {
                        var t = {
                            left: this.state.options.from.x,
                            top: this.state.options.from.y
                        };
                        e = d.createElement("div", {
                            className: "user-card-layer__balloon",
                            style: t,
                            ref: this.setRef
                        }, d.createElement(T, {
                            id: this.state.options.id,
                            direction: this.state.options.direction ? this.state.options.direction : u.q.Right,
                            tailOffset: this.state.options.tailOffset
                        }))
                    }
                    return e
                }, t.prototype.showUserCard = function(e) {
                    var t = this;
                    this.clearTimeoutAndRun(function() {
                        t.setState({
                            options: e
                        })
                    })
                }, t.prototype.hideUserCard = function(e) {
                    var t = this;
                    void 0 === e && (e = {}), this.clearTimeoutAndRun(function() {
                        t.state.hovering && !e.force || t.setState({
                            options: null
                        })
                    }, e.timeout)
                }, t
            }(d.Component)),
            m = n(6),
            h = n(2),
            f = n(446),
            g = n(111),
            v = n(447),
            b = n(7),
            k = n(448),
            S = n(71),
            y = n(55),
            _ = (n(518), n(519)),
            N = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getContent = function() {
                        if (t.props.data.loading) return d.createElement("div", {
                            className: "user-card"
                        }, d.createElement(u.X, {
                            fillContent: !0
                        }));
                        var e = {
                            backgroundImage: "url(" + (t.props.data.user.bannerImageURL || f),
                            backgroundPosition: "center",
                            backgroundSize: "auto 100%",
                            backgroundRepeat: "repeat"
                        };
                        return d.createElement(u.U, {
                            padding: 1
                        }, d.createElement("div", {
                            className: "user-card theme--dark",
                            style: t.props.data.loading ? {} : e
                        }, d.createElement(u.U, {
                            padding: 1,
                            display: u.H.Flex,
                            flexDirection: u.J.Column,
                            fullHeight: !0,
                            fullWidth: !0,
                            className: "user-card__overlay",
                            "data-a-target": "user-card-modal"
                        }, d.createElement(u.U, {
                            alignItems: u.c.Center,
                            justifyContent: u.T.Center,
                            display: u.H.Flex,
                            flexDirection: u.J.Column,
                            textAlign: u._22.Center,
                            fullWidth: !0,
                            flexGrow: 1
                        }, d.createElement(u.l, {
                            imageSrc: t.props.data.user.profileImageURL,
                            size: 50,
                            imageAlt: t.props.data.user.displayName
                        }), d.createElement(u.U, {
                            padding: {
                                top: .5
                            },
                            ellipsis: !0,
                            className: "user-card__display-name"
                        }, t.props.data.user.displayName), t.getBio()), t.getButtons())))
                    }, t.getBio = function() {
                        if (t.props.data.loading || t.props.data.error) return null;
                        if (!t.props.data.user.description) return d.createElement(u.U, {
                            ellipsis: !0,
                            className: "user-card__bio",
                            padding: {
                                top: .5
                            }
                        }, Object(h.d)("This user has no bio.", "UserCard"));
                        var e = null;
                        return t.props.data.user && (t.props.data.user.activity || t.props.data.user.availability) && (e = d.createElement(S.b, {
                            availability: t.props.data.user.availability,
                            activity: t.props.data.user.activity
                        })), d.createElement(u.U, {
                            ellipsis: !0,
                            className: "user-card__bio",
                            padding: {
                                top: .5
                            }
                        }, e && d.createElement(u._21, {
                            color: u.F.Alt
                        }, e), t.props.data.user.description)
                    }, t.getButtons = function() {
                        return d.createElement(u.U, {
                            display: u.H.Flex,
                            flexDirection: u.J.Row,
                            justifyContent: u.T.Between,
                            fullWidth: !0,
                            flexGrow: 0
                        }, d.createElement(u.U, {
                            display: u.H.InlineFlex,
                            flexDirection: u.J.Row
                        }, d.createElement(u.U, {
                            padding: {
                                right: 1
                            }
                        }, d.createElement(k.a, {
                            channelID: t.props.id
                        })), d.createElement(g.a, {
                            channelLogin: t.props.data.user.login
                        })), d.createElement(v.a, {
                            threadID: t.getThreadID(),
                            onClick: t.onWhisperButtonClick
                        }))
                    }, t.onWhisperButtonClick = function() {
                        r({
                            force: !0,
                            timeout: 0
                        })
                    }, t.getThreadID = function() {
                        return t.props.currentUserID ? Object(y.a)(t.props.data.user.id, t.props.currentUserID) : ""
                    }, t
                }
                return c.__extends(t, e), t.prototype.render = function() {
                    return this.props.data.error ? null : d.createElement(u.p, {
                        direction: this.props.direction,
                        size: u.r.Large,
                        show: !0,
                        tailOffset: this.props.tailOffset
                    }, this.getContent())
                }, t = c.__decorate([Object(b.a)(_, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.id
                            }
                        }
                    }
                })], t)
            }(d.Component),
            E = N,
            T = Object(m.a)(i)(E),
            C = 214;
        n.d(t, "b", function() {
            return p
        }), n.d(t, "a", function() {
            return T
        }), n.d(t, "d", function() {
            return a
        }), n.d(t, "c", function() {
            return r
        })
    },
    1555: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(1),
            r = n(10),
            s = n(13),
            o = n(5),
            l = n(1252),
            c = n(3),
            d = (n(1556), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(c.P, {
                        position: c._2.Fixed,
                        attachTop: !0,
                        fullWidth: !0
                    }, a.createElement("nav", {
                        className: "minimal-top-nav"
                    }, a.createElement(c.U, {
                        className: "minimal-top-nav__menu",
                        display: c.H.Flex,
                        alignItems: c.c.Stretch,
                        flexWrap: c.K.NoWrap,
                        fullHeight: !0,
                        justifyContent: c.T.Between
                    }, a.createElement(c.P, {
                        display: c.H.InlineFlex,
                        alignItems: c.c.Center,
                        flexShrink: 0
                    }, a.createElement(r.a, {
                        to: {
                            pathname: "/",
                            state: {
                                medium: s.PageviewMedium.TopNav,
                                content: s.PageviewContent.Logo
                            }
                        },
                        className: "minimal-top-nav__home-link"
                    }, a.createElement(c._8, {
                        asset: c._9.LogoTwitch,
                        width: 94,
                        height: 32
                    }))), a.createElement(l.a, {
                        darkModeEnabled: this.props.darkModeEnabled
                    }))))
                }, t = i.__decorate([Object(o.c)("MinimalTopNav", {
                    autoReportInteractive: !0
                })], t)
            }(a.Component)),
            u = d,
            p = u;
        n.d(t, "a", function() {
            return p
        })
    },
    1556: function(e, t) {},
    20: function(e, t, n) {
        "use strict";

        function i(e, t) {
            var n = new Set(e.map(function(e) {
                return e.node.id
            }));
            return e.concat(t.filter(function(e) {
                return !n.has(e.node.id)
            }))
        }

        function a(e) {
            return {
                variables: {
                    input: e
                }
            }
        }

        function r(e, t, n, i) {
            void 0 === t && (t = {});
            try {
                var a = l.n.apollo.client.readQuery({
                    query: e,
                    variables: t
                });
                if (i && i(a)) return;
                var r = o(a, function(e) {
                    return e
                }, function(e) {
                    return n(e)
                });
                l.n.apollo.client.writeQuery({
                    query: e,
                    variables: t,
                    data: r
                })
            } catch (e) {
                l.i.warn("Failed writing updated query to Apollo", e)
            }
        }

        function s(e) {
            try {
                var t = e.id,
                    n = e.fragment,
                    i = e.mutator,
                    a = l.n.apollo.client.readFragment({
                        id: t,
                        fragment: n
                    }),
                    r = o(a, function(e) {
                        return e
                    }, function(e) {
                        return i(e)
                    });
                l.n.apollo.client.writeFragment({
                    fragment: n,
                    id: t,
                    data: r
                })
            } catch (e) {
                l.i.warn("Failed writing updated query to Apollo", e)
            }
        }
        t.b = i, t.a = a, t.d = r, t.c = s;
        var o = n(136),
            l = (n.n(o), n(2))
    },
    2007: function(e, t) {},
    2087: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                firstPageLoaded: !!e.session.firstPageLoaded,
                isLoggedIn: Object(s.d)(e),
                theme: e.ui.theme
            }
        }
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var a = n(6),
            r = n(10),
            s = n(17),
            o = n(0),
            l = n(1),
            c = n(113),
            d = n(114),
            u = n(5),
            p = n(1555),
            m = n(450),
            h = n(3),
            f = (n(2007), c.a.wrap(function() {
                return n.e(63).then(n.bind(null, 2088))
            }, "SubsLandingPage")),
            g = c.a.wrap(function() {
                return n.e(64).then(n.bind(null, 2089))
            }, "SubsBroadcasterPage"),
            v = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return o.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(h.U, {
                        className: "twilight-root",
                        position: h._2.Absolute,
                        overflow: h.Y.Hidden,
                        attachRight: !0,
                        attachBottom: !0,
                        attachLeft: !0
                    }, l.createElement(p.a, null), l.createElement(h.U, {
                        display: h.H.Flex,
                        flexWrap: h.K.NoWrap,
                        fullHeight: !0,
                        position: h._2.Relative
                    }, l.createElement(h.P, {
                        position: h._2.Relative,
                        flexGrow: 1,
                        fullHeight: !0,
                        fullWidth: !0
                    }, l.createElement("main", {
                        className: m.b
                    }, l.createElement(r.e, null, l.createElement(r.d, {
                        path: "/subs/:channelName",
                        component: g
                    }), l.createElement(r.d, {
                        path: "/subs",
                        component: f
                    })))), l.createElement(d.a, null)))
                }, t = o.__decorate([Object(u.c)("SubsRoot", {
                    autoReportInteractive: !0
                })], t)
            }(l.Component),
            b = v,
            k = Object(a.a)(i)(b),
            S = Object(r.f)(k);
        n.d(t, "SubsRoot", function() {
            return S
        })
    },
    260: function(e, t, n) {
        "use strict";
        n.d(t, "n", function() {
            return r
        }), n.d(t, "b", function() {
            return s
        }), n.d(t, "a", function() {
            return o
        }), n.d(t, "j", function() {
            return l
        }), n.d(t, "l", function() {
            return c
        }), n.d(t, "k", function() {
            return d
        }), n.d(t, "m", function() {
            return u
        }), n.d(t, "f", function() {
            return p
        }), n.d(t, "g", function() {
            return m
        }), n.d(t, "c", function() {
            return h
        }), n.d(t, "d", function() {
            return f
        }), n.d(t, "e", function() {
            return g
        }), n.d(t, "i", function() {
            return v
        }), n.d(t, "h", function() {
            return b
        });
        var i, a = n(265),
            r = {
                ERROR_DISPLAY_TIMEOUT: 5e3,
                GET_BALANCE_RATE_LIMIT: 5e3,
                UNDO_PROMPT_DURATION: 5e3
            },
            s = "https://d3aqoihi2n8ty8.cloudfront.net/cheer",
            o = "https://d3aqoihi2n8ty8.cloudfront.net/actions",
            l = 8e5,
            c = 1e4,
            d = 500,
            u = 1e3,
            p = "cheer",
            m = a.a.Purple,
            h = "FIRST_PARTY",
            f = "THIRD_PARTY",
            g = (i = {}, i[a.a.Gray] = "#979797", i[a.a.Purple] = "#9c3ee8", i[a.a.Green] = "#1db2a5", i[a.a.Blue] = "#0099fe", i[a.a.Red] = "#f43021", i[a.a.Yellow] = "#f3a71a", i),
            v = "hgc-2017",
            b = "https://d3aqoihi2n8ty8.cloudfront.net/hgc2017"
    },
    261: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e[e.Text = 0] = "Text", e[e.Mention = 1] = "Mention", e[e.Link = 2] = "Link", e[e.Emote = 3] = "Emote", e[e.ClipLink = 4] = "ClipLink", e[e.VideoLink = 5] = "VideoLink"
        }(i || (i = {}))
    },
    262: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e.ChannelFeedComment = "CHANNEL_FEED_COMMENT_REPORT", e.ChannelFeedPost = "CHANNEL_FEED_POST_REPORT", e.Chat = "CHAT_REPORT", e.Clip = "CLIP_REPORT", e.Collection = "COLLECTION_REPORT", e.Community = "COMMUNITY_REPORT", e.Event = "EVENT_REPORT", e.Extension = "EXTENSION_REPORT", e.LiveUp = "LIVE_UP_REPORT", e.Raid = "RAID_REPORT", e.StreamUp = "STREAM_UP_REPORT", e.User = "USER_REPORT", e.VideoChatMessage = "VOD_COMMENT_REPORT", e.Vod = "VOD_REPORT"
        }(i || (i = {}))
    },
    263: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e.Archive = "ARCHIVE", e.Highlight = "HIGHLIGHT", e.Upload = "UPLOAD", e.WatchParty = "WATCH_PARTY", e.PastPremiere = "PAST_PREMIERE", e.PremiereUpload = "PREMIERE_UPLOAD"
        }(i || (i = {}))
    },
    265: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e[e.Gray = 1] = "Gray", e[e.Purple = 100] = "Purple", e[e.Green = 1e3] = "Green", e[e.Blue = 5e3] = "Blue", e[e.Red = 1e4] = "Red", e[e.Yellow = 1e5] = "Yellow"
        }(i || (i = {}))
    },
    266: function(e, t, n) {
        "use strict";
        n.d(t, "c", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, "a", function() {
            return r
        });
        var i;
        ! function(e) {
            e.Spam = "Spam", e.Harassment = "Harassment"
        }(i || (i = {}));
        var a;
        ! function(e) {
            e.Spam = "spam", e.Harassment = "harassment", e.Other = "other"
        }(a || (a = {}));
        var r;
        ! function(e) {
            e.Whisper = "WHISPER", e.Chat = "CHAT"
        }(r || (r = {}))
    },
    267: function(e, t, n) {
        "use strict";

        function i(e) {
            var t, n, i, r, c, d = e.append,
                u = void 0 !== d && d,
                p = e.searchResults,
                m = e.currentGameResults,
                h = e.currentUserResults,
                f = e.currentCommunityResults,
                g = e.currentVideoResults,
                v = e.currentLiveResults;
            if (p.games && (t = {
                    totalHits: p.games.totalHits,
                    results: u && m ? m.results : []
                }, u && p.exhaustedHits && m && !p.games.totalHits && (t.totalHits = m.totalHits), t.results = t.results.concat(p.games.hits.map(function(e, t) {
                    var n, i = s.n.intl.getLanguageCode();
                    return n = i && void 0 !== e.localizations && i in e.localizations ? e.localizations[i] : e.name, {
                        title: n,
                        thumbnailAltText: e.name,
                        linkTo: {
                            pathname: Object(o.d)(e.name),
                            state: {
                                content: l.PageviewContent.Game,
                                content_index: t,
                                medium: l.PageviewMedium.NavSearch
                            }
                        },
                        id: e.objectID,
                        popularity: e.popularity
                    }
                }))), p.videos) {
                var b = u && g ? g.results : [],
                    k = p.videos.totalHits;
                u && p.exhaustedHits && g && !p.videos.totalHits && (k = g.totalHits), r = a(b, p.videos, k)
            }
            return p.users && (n = {
                totalHits: u && h ? h.totalHits : p.users.totalHits,
                results: u && h ? h.results : []
            }, u && p.exhaustedHits && h && !p.users.totalHits && (n.totalHits = h.totalHits), n.results = n.results.concat(p.users.hits.map(function(e, t) {
                return {
                    login: e.login,
                    name: e.name,
                    thumbnail: e.profile_image || s.a.defaultAvatarURL,
                    thumbnailAltText: e.name,
                    linkTo: {
                        pathname: "/" + e.login,
                        state: {
                            content: l.PageviewContent.User,
                            content_index: t,
                            medium: l.PageviewMedium.NavSearch
                        }
                    },
                    id: e.objectID,
                    followers: e.followers
                }
            }))), p.channels && (c = {
                totalHits: u && v ? v.totalHits : p.channels.totalHits,
                results: u && v ? v.results : []
            }, c.results = c.results.concat(p.channels.hits.map(function(e, t) {
                return {
                    viewerCount: e.channel_count,
                    login: e.login,
                    name: e.name,
                    thumbnailAltText: e.status,
                    linkTo: {
                        pathname: "/" + e.login,
                        state: {
                            content: l.PageviewContent.Live,
                            content_index: t,
                            medium: l.PageviewMedium.NavSearch
                        }
                    },
                    id: e.objectID,
                    status: e.status
                }
            }))), p.communities && (i = {
                totalHits: p.communities.totalHits,
                results: u && f ? f.results : []
            }, u && p.exhaustedHits && f && !p.communities.totalHits && (i.totalHits = f.totalHits), i.results = i.results.concat(p.communities.hits.map(function(e, t) {
                return {
                    name: e.name,
                    thumbnail: e.avatar_image_url,
                    thumbnailAltText: e.name,
                    linkTo: {
                        pathname: "/communities/" + e.name,
                        state: {
                            content: l.PageviewContent.Community,
                            content_index: t,
                            medium: l.PageviewMedium.NavSearch
                        }
                    },
                    viewerCount: e.viewers,
                    id: e.objectID
                }
            }))), {
                currentGameResults: t,
                currentUserResults: n,
                currentLiveResults: c,
                currentCommunityResults: i,
                currentVideoResults: r,
                exhaustedHits: p.exhaustedHits
            }
        }

        function a(e, t, n) {
            return {
                results: e.concat(t.hits.map(r)),
                totalHits: t.totalHits || n
            }
        }

        function r(e, t) {
            return {
                title: e.title,
                thumbnail: e.thumbnail,
                thumbnailAltText: e.title,
                linkTo: {
                    pathname: "/videos/" + e.objectID,
                    state: {
                        content: l.PageviewContent.Video,
                        content_index: t,
                        medium: l.PageviewMedium.NavSearch
                    }
                },
                login: e.broadcaster_login,
                name: e.broadcaster_name,
                createdAt: e.created_at,
                length: e.length,
                id: e.objectID
            }
        }
        t.b = i, t.a = r;
        var s = n(2),
            o = n(377),
            l = n(13)
    },
    268: function(e, t, n) {
        "use strict";

        function i(e, t) {
            var n = [];
            if (!e || !t) return n;
            for (var i = /\S+/g, a = i.exec(e); a;) {
                var s = a[0],
                    o = t[s];
                if (o && "function" != typeof o) {
                    var l = Object(r.d)(e.slice(0, a.index)),
                        c = l ? l.length : a.index;
                    n[c] = {
                        startIndex: c,
                        endIndex: c + s.length,
                        data: {
                            alt: s,
                            images: {
                                themed: !1,
                                sources: {
                                    "1x": Object(r.e)(o.id, 1),
                                    "2x": Object(r.e)(o.id, 2),
                                    "4x": Object(r.e)(o.id, 4)
                                }
                            }
                        }
                    }
                }
                a = i.exec(e)
            }
            return n
        }

        function a(e) {
            for (var t = {}, n = 0, i = e; n < i.length; n++)
                for (var a = i[n], r = 0, l = a.emotes; r < l.length; r++)
                    for (var c = l[r], d = s[c.token] || [c.token], u = 0, p = d; u < p.length; u++) {
                        var m = p[u];
                        t[m] && a.id === o || (t[m] = {
                            id: c.id,
                            token: m
                        })
                    }
            return t
        }
        t.b = i, t.a = a;
        var r = n(131),
            s = {
                "\\:\\&gt\\;": [":>"],
                "\\&gt\\;\\(": [">("],
                "\\&lt\\;\\]": ["<]"],
                "\\&lt\\;3": ["<3"],
                ":-?(?:7|L)": [":-7", ":-L", ":7", ":L"],
                "[oO](_|\\.)[oO]": ["o_o", "O_O", "o_O", "O_o", "o.o", "O.O", "o.O", "O.o"],
                "\\;-?(p|P)": [";-p", ";-P", ";p", ";P"],
                "\\;-?\\)": [";-)", ";)"],
                "\\:-?(o|O)": [":-o", ":-O", ":o", ":O"],
                "\\:-?(p|P)": [":-p", ":-P", ":p", ":P"],
                "\\:-?(S|s)": [":-S", ":-s", ":s", ":S"],
                "\\:-?[\\\\/]": [":-/", ":-\\", ":/", ":\\"],
                "\\:-?[z|Z|\\|]": [":-|", ":-Z", ":-z", ":|", ":Z", ":z"],
                "\\:-?\\(": [":-(", ":("],
                "\\:-?\\)": [":-)", ":)"],
                "\\:-?D": [":-D", ":D"],
                "#-?[\\\\/]": ["#-/", "#-\\", "#/", "#\\"],
                "B-?\\)": ["B-)", "B)"],
                "R-?\\)": ["R-)", "R)"]
            },
            o = "0"
    },
    269: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return i
        }), n.d(t, "a", function() {
            return a
        });
        var i = {
                TriHard: {
                    count: 196568036
                },
                Kappa: {
                    count: 192158118
                },
                "4Head": {
                    count: 155758710
                },
                PogChamp: {
                    count: 151485090
                },
                cmonBruh: {
                    count: 146352878
                },
                BibleThump: {
                    count: 56472964
                },
                WutFace: {
                    count: 45069031
                },
                Kreygasm: {
                    count: 41387580
                },
                DansGame: {
                    count: 38097659
                },
                hi5F: {
                    count: 34986404
                },
                SMOrc: {
                    count: 34734484
                },
                KappaPride: {
                    count: 34262839
                },
                VoHiYo: {
                    count: 27886434
                },
                SwiftRage: {
                    count: 24561900
                },
                ResidentSleeper: {
                    count: 24438298
                },
                EleGiggle: {
                    count: 19891526
                },
                FailFish: {
                    count: 19118343
                },
                NotLikeThis: {
                    count: 18802905
                },
                Keepo: {
                    count: 18351415
                },
                BabyRage: {
                    count: 18220906
                },
                MingLee: {
                    count: 18026207
                },
                pbfSSH: {
                    count: 16911241
                },
                forsenE: {
                    count: 14960299
                },
                HeyGuys: {
                    count: 14851569
                },
                ANELE: {
                    count: 14648986
                },
                PJSalt: {
                    count: 14438861
                }
            },
            a = ["354", "49106", "4339", "48", "25", "55338", "70433", "1902", "68856", "81103", "76171", "27509"]
    },
    270: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(1),
            r = n(2),
            s = n(109),
            o = n(3),
            l = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onGiftSelect = function() {
                        t.props.onGiftSelect && t.props.onGiftSelect()
                    }, t.onSelectTierTab = function(e) {
                        t.props.onSelectTierTab && t.props.onSelectTierTab(e)
                    }, t.reportSubMenuAction = function(e) {
                        t.props.reportSubMenuAction && t.props.reportSubMenuAction(e)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(o.U, null, a.createElement(o.U, {
                        display: o.H.Flex,
                        justifyContent: o.T.Between,
                        alignItems: o.c.Center,
                        fullWidth: !0
                    }, a.createElement(o._21, {
                        bold: !0,
                        type: o._26.H5
                    }, Object(r.d)("Choose A Gift Subscription", "GiftTierTabs")), a.createElement(o.u, {
                        type: o.z.Text,
                        icon: o._9.AngleLeft,
                        onClick: this.props.onBack,
                        "data-test-selector": "sub-gift-select-back-button"
                    }, a.createElement(o.U, {
                        alignItems: o.c.Center,
                        display: o.H.InlineFlex
                    }, a.createElement(o._21, null, Object(r.d)("Back", "GiftTierTabs"))))), a.createElement(s.a, {
                        isGift: !0,
                        giftRecipient: this.props.giftRecipient,
                        onGiftSelect: this.onGiftSelect,
                        channelDisplayName: this.props.channelDisplayName,
                        subscriptionProducts: this.props.subscriptionProducts,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.reportSubMenuAction,
                        userHasPrime: !1,
                        canPrimeSubscribe: !1,
                        isSubscribed: !1
                    }))
                }, t
            }(a.Component),
            c = l;
        n.d(t, !1, function() {
            return "sub-gift-select-back-button"
        }), n.d(t, "a", function() {
            return c
        })
    },
    271: function(e, t, n) {
        "use strict";
        n.d(t, "c", function() {
            return i
        }), n.d(t, "a", function() {
            return a
        }), n.d(t, "b", function() {
            return r
        });
        var i;
        ! function(e) {
            e[e.AllVideos = 0] = "AllVideos", e[e.PastBroadcasts = 1] = "PastBroadcasts", e[e.Uploads = 2] = "Uploads", e[e.Highlights = 3] = "Highlights"
        }(i || (i = {}));
        var a;
        ! function(e) {
            e[e.AnyLength = 0] = "AnyLength", e[e.Short = 1] = "Short", e[e.Long = 2] = "Long"
        }(a || (a = {}));
        var r;
        ! function(e) {
            e[e.Popular = 0] = "Popular", e[e.Newest = 1] = "Newest"
        }(r || (r = {}))
    },
    272: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                isLoggedIn: Object(D.d)(e)
            }
        }

        function a(e) {
            return Object(N.bindActionCreators)({
                login: function() {
                    return Object(C.f)(E.a.ReportHoster)
                },
                showReportUserModal: function(e) {
                    var t = d.__rest(e, []);
                    return Object(T.d)(w.a, t)
                }
            }, e)
        }

        function r() {
            return !!window.Twitch && !!window.Twitch.Player
        }

        function s(e) {
            return {
                theatreModeEnabled: e.ui.theatreModeEnabled,
                isLoggedIn: Object(D.d)(e),
                authToken: Object(D.a)(e)
            }
        }

        function o(e) {
            return Object(N.bindActionCreators)({
                enableTheatreMode: P.l,
                disableTheatreMode: P.k,
                togglePersistentPlayer: P.p
            }, e)
        }

        function l(e, t, n) {
            if (!e.collectionID && e.videoID) return void t.push("/videos/" + e.videoID);
            if (e.collectionID && e.videoID) {
                if (n && n.currentVideoID && n.currentCollectionID && n.currentVideoID === e.videoID && n.currentCollectionID === e.collectionID) return;
                return void t.push("/videos/" + e.videoID + "?collection=" + e.collectionID)
            }
            if (e.collectionID && !e.videoID) return void t.push("/collections/" + e.collectionID);
            m.i.withCategory("video-player").error(new Error("No collection or video specified from the emitted player transition event."), "No collection or video specified from the emitted player transition event.")
        }
        var c, d = n(0),
            u = n(1),
            p = n(10),
            m = n(2),
            h = n(111),
            f = n(47),
            g = n(13),
            v = n(140),
            b = n(262),
            k = n(138),
            S = n(3),
            y = (n(536), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleReportHosterClick = function() {
                        t.props.isLoggedIn ? t.props.showReportUserModal({
                            onClose: t.handleReportModalClose,
                            reportContext: {
                                contentType: b.a.User,
                                targetUserID: t.props.hostChannelID
                            },
                            title: Object(m.d)("Report {channelDisplayName}", {
                                channelDisplayName: t.props.hostChannelDisplayName
                            }, "VideoPlayerHostingUI")
                        }) : t.props.login()
                    }, t.handleReportModalClose = function(e) {
                        (e === v.b.MutationError || e === v.b.Success) && t.props.history.push("/")
                    }, t
                }
                return d.__extends(t, e), t.prototype.render = function() {
                    var e = !!this.props.hostedChannelDisplayName;
                    return u.createElement(S._17, {
                        className: "video-player-hosting-ui__container"
                    }, e && this.renderHeader(), u.createElement("span", {
                        key: "video-player"
                    }, this.props.children), u.createElement(S.U, {
                        display: e ? S.H.Block : S.H.Hide,
                        position: S._2.Relative,
                        zIndex: S._38.Above
                    }, e && this.renderFooter()))
                }, t.prototype.renderHeader = function() {
                    return u.createElement(S.e, {
                        type: S.i.SlideInBottom,
                        delay: S.f.Medium,
                        duration: S.g.Medium,
                        enabled: !0
                    }, u.createElement(p.a, {
                        key: "hosting-ui-header",
                        className: "video-player-hosting-ui__link",
                        to: {
                            pathname: "/" + this.props.hostedChannelLogin,
                            state: {
                                medium: g.PageviewMedium.Channel,
                                content: g.PageviewContent.Host
                            }
                        },
                        "data-a-target": "hosting-ui-link",
                        "data-test-selector": "video-player-hosting-ui__header"
                    }, u.createElement(S._17, {
                        className: "video-player-hosting-ui__header",
                        display: S.H.Flex,
                        background: S.m.AccentAlt2,
                        color: S.F.Overlay,
                        alignItems: S.c.Center,
                        padding: {
                            x: 1,
                            y: .5
                        },
                        "data-a-target": "hosting-ui-header"
                    }, u.createElement(S.U, {
                        className: "video-player-hosting-ui__avatar-container"
                    }, u.createElement(S.l, {
                        imageSrc: this.props.hostedChannelProfileImageURL || "",
                        size: 30,
                        imageAlt: Object(m.d)("Hosted Channel {hostedChannelDisplayName}'s Avatar", {
                            hostedChannelDisplayName: this.props.hostedChannelDisplayName || ""
                        }, "VideoPlayerHostingUI")
                    })), u.createElement(S._17, {
                        margin: {
                            left: 1
                        },
                        fontSize: S.L.Size5
                    }, Object(m.d)("Hosting", "VideoPlayerHostingUI"), " ", u.createElement(S._21, {
                        type: S._26.Span,
                        className: "video-player-hosting-ui__channel-name",
                        color: S.F.OverlayAlt,
                        "data-a-target": "hosting-ui-channel-name"
                    }, this.props.hostedChannelDisplayName)))))
                }, t.prototype.renderFooter = function() {
                    return u.createElement(S.e, {
                        type: S.i.SlideInTop,
                        enabled: !0,
                        delay: S.f.Medium,
                        duration: S.g.Medium
                    }, u.createElement(S._17, {
                        key: "hosting-ui-footer",
                        background: S.m.AccentAlt2,
                        className: "video-player-hosting-ui__footer",
                        display: S.H.Block,
                        padding: 1,
                        "data-test-selector": "video-player-hosting-ui__footer",
                        "data-a-target": "hosting-ui-footer"
                    }, u.createElement(S.U, {
                        padding: {
                            y: .5
                        },
                        display: S.H.Flex,
                        justifyContent: S.T.Between
                    }, u.createElement(S.U, {
                        display: S.H.Flex
                    }, u.createElement(S.U, {
                        margin: {
                            right: 1
                        }
                    }, u.createElement(h.a, {
                        "data-a-target": "hosting-ui-follow-button",
                        channelName: this.props.hostedChannelLogin || "",
                        channelLogin: this.props.hostedChannelLogin,
                        hostChannelLogin: this.props.hostChannelLogin,
                        hostChannelID: this.props.hostChannelID,
                        isHostedFollow: !0,
                        balloonDirection: S.q.BottomLeft
                    })), u.createElement(S.U, null, u.createElement(k.b, {
                        channelLogin: this.props.hostedChannelLogin,
                        hostChannelID: this.props.hostChannelID,
                        hostChannelLogin: this.props.hostChannelLogin,
                        "data-a-target": "hosting-ui-subscribe-button"
                    }))), u.createElement(f.a, null, u.createElement(S.v, {
                        ariaLabel: Object(m.d)("More options", "HostingUI"),
                        overlay: !0,
                        icon: S._9.More,
                        onClick: this.handleReportHosterClick,
                        "data-a-target": "hosting-ui-more-button"
                    }), u.createElement(S.p, {
                        direction: S.q.TopRight,
                        "data-a-target": "hosting-ui-more-balloon"
                    }, u.createElement(S.U, {
                        padding: {
                            y: 1
                        }
                    }, u.createElement(S.S, {
                        onClick: this.handleReportHosterClick,
                        "data-a-target": "hosting-ui-report-button"
                    }, u.createElement(S.U, {
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, Object(m.d)("Report {hostChannelDisplayName}", {
                        hostChannelDisplayName: this.props.hostChannelDisplayName
                    }, "VideoPlayerHostingUI")))))))))
                }, t
            }(u.Component)),
            _ = n(6),
            N = n(9),
            E = n(54),
            T = n(37),
            C = n(39),
            D = n(17),
            w = n(379),
            I = Object(_.a)(i, a)(Object(p.f)(y)),
            P = n(58),
            O = n(4),
            F = n(296),
            U = n(291),
            R = n(21),
            x = n(505),
            M = n(5),
            L = n(506);
        ! function(e) {
            e.LoadStart = "loadstart", e.Error = "error", e.LoadedMetadata = "loadedmetadata", e.CanPlay = "canplay", e.Playing = "playing", e.Waiting = "waiting", e.Seeking = "seeking", e.Seeked = "seeked", e.Ended = "ended", e.DurationChange = "durationchange", e.TimeUpdate = "timeupdate", e.Play = "play", e.Pause = "pause", e.VolumeChange = "volumechange", e.RateChange = "ratechange"
        }(c || (c = {}));
        var A;
        ! function(e) {
            e.PlayerInit = "init", e.ContentShowing = "contentShowing", e.PlaybackStatistics = "playbackStatistics", e.ChansubRequired = "chansubRequired", e.VideoFailure = "videoFailure", e.Formats = "videoFormats", e.ABSStreamFormatChange = "abs_stream_format_change", e.FormatChanged = "videoFormatChanged", e.TimeChange = "timeChange", e.BufferChange = "bufferChange", e.SegmentChange = "segmentchange", e.UsherFailError = "usherFail", e.CaptionUpdate = "captions", e.SeekFailed = "seekfailed", e.VariantSwitchRequest = "variantSwitchRequested", e.ViewersChange = "viewerschange", e.StreamLoaded = "streamLoaded", e.VideoLoaded = "videoLoaded", e.VideoPaused = "videoPaused", e.QualityChange = "qualitychange", e.Online = "online", e.Offline = "offline", e.Restricted = "restricted", e.CastingChange = "castingchange", e.TheatreChange = "theatrechange", e.MidrollRequested = "midrollrequested", e.ManifestExtraInfo = "manifestExtraInfo", e.TransitionToCollectionVOD = "transitionToCollectionVod", e.TransitionToRecommendedVOD = "transitionToRecommendedVod", e.StitchedAdStart = "stitchedadstart", e.StichedAdEnd = "stitchedadend", e.PersistenPlayerToggle = "persistentPlayerEnableToggle", e.StatsUpdate = "statsupdate", e.PromptLoginModal = "prompt login modal", e.OpenStream = "openStream", e.PlayerReady = "ready", e.FullscreenChange = "fullscreenchange"
        }(A || (A = {}));
        var j, B = (n(537), n(451));
        ! function(e) {
            e.Embed = "embed", e.Frontpage = "frontpage", e.Site = "site"
        }(j || (j = {}));
        var W = {
                allowfullscreen: !0,
                autoplay: !0,
                branding: !1,
                channelInfo: !1,
                controls: !0,
                height: "100%",
                playsinline: !0,
                player: j.Site,
                showInfo: !1,
                showtheatre: !1,
                trackingProperties: {
                    client_app: "twilight"
                },
                width: "100%",
                oauth_token: ""
            },
            H = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.logger = m.i.withCategory("video-player"), n.checkPlayerDependencyStatus = function() {
                        r() ? (n.setState({
                            canInitializePlayer: !0
                        }), n.checkPlayerDependencyAnimationFrame = null) : n.checkPlayerDependencyAnimationFrame = requestAnimationFrame(n.checkPlayerDependencyStatus)
                    }, n.attachRef = function(e) {
                        return n.playerRef = e
                    }, n.onMetadataLoaded = function() {
                        var e = n.player && n.player.getSessionInfo();
                        e && (n.logger.debug("Got player session info from player instance", e), m.m.setVideoPlayerTrackingData({
                            broadcastID: e.broadcastId,
                            playSessionID: e.playSessionId
                        }))
                    }, n.onOpenStream = function() {
                        if (n.props.playerTypeOverride === j.Frontpage && n.player)
                            if (n.props.channelLogin) m.n.history.push("/" + n.props.channelLogin);
                            else if (n.props.vodID) {
                            var e = Math.floor(n.player.getCurrentTime());
                            m.n.history.push("/videos/" + n.props.vodID + "?t=" + Object(B.b)(e))
                        } else n.props.collectionID && m.n.history.push("/collections/" + n.props.collectionID)
                    }, n.onPlayerReady = function() {
                        n.player && (n.logger.debug("Ready"), n.props.latencyTracking.reportInteractive(), n.hasPlayed = !1, n.props.latencyTracking.reportCustomEvent(n.playerLoaded), n.setState({
                            playerInitialized: !0
                        }, function() {
                            return n.updatePlayerTrackingData(n.props.hostChannel)
                        }))
                    }, n.onPlayerPlay = function() {
                        n.logger.debug("Play"), n.reportPlayerPlayed(), n.props.onPauseToggled && n.props.onPauseToggled(!1)
                    }, n.onStreamStatusOnline = function() {
                        n.props.onStreamStatusChange && n.props.onStreamStatusChange(A.Online)
                    }, n.onStreamStatusOffline = function() {
                        n.props.onStreamStatusChange && n.props.onStreamStatusChange(A.Offline)
                    }, n.onTheatreChange = function(e) {
                        e ? (n.logger.debug("Theatre Entered"), n.props.enableTheatreMode && !n.props.theatreModeEnabled && n.props.enableTheatreMode()) : (n.logger.debug("Theatre Exited"), n.props.disableTheatreMode && n.props.theatreModeEnabled && n.props.disableTheatreMode())
                    }, n.onFullScreenChange = function() {
                        n.player && (n.logger.debug("Fullscreen change", n.player.fullscreen), n.player.fullscreen !== n.state.isFullScreen && n.setState({
                            isFullScreen: n.player.fullscreen
                        }))
                    }, n.onSeek = function() {
                        n.props.onSeek && n.player && n.props.onSeek(n.player.getCurrentTime())
                    }, n.onTimeUpdate = function() {
                        n.props.onVideoTimeChange && n.player && n.props.onVideoTimeChange(n.player.getCurrentTime())
                    }, n.onTransitionToCollectionVod = function(e) {
                        if (n.props.onNavigationRequest) {
                            var t = {};
                            e.vodId && (t.videoID = Object(x.a)(e.vodId)), e.collectionId && (t.collectionID = e.collectionId), n.props.onNavigationRequest(t)
                        }
                    }, n.onTransitionToRecommendedVod = function(e) {
                        if (n.props.onNavigationRequest) {
                            var t = {};
                            e.vodId && (t.videoID = Object(x.a)(e.vodId)), n.props.onNavigationRequest(t)
                        }
                    }, n.onPause = function() {
                        n.props.onPauseToggled && n.props.onPauseToggled(!0)
                    }, n.onPersistentPlayerToggled = function() {
                        n.props.togglePersistentPlayer && n.props.togglePersistentPlayer()
                    }, n.updatePlayerTrackingData = function(e) {
                        if (n.state.playerInitialized && n.player) {
                            var t = m.m.getLastPageview();
                            t ? n.logger.debug("Tracking data updated.", {
                                pageviewProperties: t,
                                hostChannel: e
                            }) : n.logger.debug("pageviewProperties not found; only hosting status updated", {
                                pageviewProperties: t,
                                hostChannel: e
                            }), n.player.setTrackingProperties(d.__assign({}, t, {
                                host_channel: e
                            }))
                        }
                    }, n.updatePlayerType = function() {
                        var e = n.props.playerTypeOverride || W.player;
                        n.player && n.playerType !== e && (n.player.setPlayerType(e), n.playerType = e)
                    }, n.maybeRecordClip = function() {
                        n.player && n.state.playerInitialized && n.player.recordClip()
                    }, n.playerCreated = n.registerCreatedEvent(), n.playerLoaded = n.registerLoadedEvent(), n.playerPlayed = n.registerPlayedEvent(), n.state = {
                        canInitializePlayer: r(),
                        playerInitialized: !1,
                        isFullScreen: !1
                    }, n.playerType = t.playerTypeOverride || W.player, n.lastSetChannel = t.channelLogin, t.instanceRef && t.instanceRef(n), n
                }
                return d.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    if (this.props.latencyTracking.reportCustomEvent(this.playerCreated), this.bindHotKeys(), this.state.canInitializePlayer ? this.initializePlayer() : this.checkPlayerDependencyAnimationFrame = window.requestAnimationFrame(this.checkPlayerDependencyStatus), m.m.eventEmitter.addListener(g.SpadeEventType.Pageview, function() {
                            return e.updatePlayerTrackingData(e.props.hostChannel)
                        }), window.__playerScriptChunk && !t.tagInjected) {
                        this.logger.debug("Loading player chunk after page loaded");
                        var n = document.createElement("script");
                        n.crossOrigin = "anonymous", n.src = window.__jqueryChunk, n.onload = function() {
                            var e = document.createElement("script");
                            e.async = !0, e.crossOrigin = "anonymous", e.src = window.__playerScriptChunk, document.body.appendChild(e)
                        }, document.body.appendChild(n);
                        var i = document.createElement("link");
                        i.href = window.__playerStyleChunk, i.media = "screen", i.rel = "stylesheet", i.type = "text/css", document.body.appendChild(i), t.tagInjected = !0
                    }
                }, t.prototype.componentWillUpdate = function(e, t) {
                    if (!this.state.canInitializePlayer && t.canInitializePlayer) return void this.initializePlayer();
                    if (t.canInitializePlayer && t.playerInitialized) {
                        if (this.updatePlayerTrackingData(e.hostChannel), this.updatePlayerType(), this.player && e.theatreModeEnabled !== this.player.getTheatre() && this.player.setTheatre(e.theatreModeEnabled), this.player && e.miniModeEnabled !== this.props.miniModeEnabled && this.player.setMiniPlayerMode(!!e.miniModeEnabled), this.player && e.paused !== this.lastPausedProp && (e.paused ? this.player.pause() : this.player.play(), this.lastPausedProp = e.paused), this.player && e.channelLogin && e.channelLogin !== this.lastSetChannel) return this.logger.debug("Setting Channel: ", e.channelLogin), this.player.setChannel(e.channelLogin), this.lastSetChannel = e.channelLogin, void m.m.setVideoPlayerTrackingData({
                            vodID: void 0
                        });
                        var n = e.collectionID && this.props.collectionID !== e.collectionID,
                            i = e.vodID && this.props.vodID !== e.vodID;
                        if (n || i) {
                            var a = e.vodID ? Object(B.a)(e.vodID) : "";
                            if ("" !== a && m.m.setVideoPlayerTrackingData({
                                    vodID: e.vodID
                                }), !this.player) return;
                            return void(n || e.collectionID && i ? this.player.setCollection(e.collectionID, a, e.nextVideoOffset) : this.player.setVideo(a, e.nextVideoOffset))
                        }
                        void 0 !== e.nextVideoOffset && e.nextVideoOffset >= 0 && this.props.nextVideoOffset !== e.nextVideoOffset && this.player && this.player.setCurrentTime(e.nextVideoOffset)
                    }
                }, t.prototype.render = function() {
                    var e = O("video-player", {
                        "video-player--theatre": this.props.theatreModeEnabled,
                        "video-player--logged-in": this.props.isLoggedIn,
                        "video-player--fullscreen": this.state.isFullScreen
                    });
                    return u.createElement("div", {
                        className: O(e),
                        "data-test-selector": "video-player"
                    }, u.createElement("div", {
                        className: "video-player__container",
                        ref: this.attachRef
                    }, u.createElement(L.b, {
                        channelLogin: this.props.channelLogin,
                        hostChannel: this.props.hostChannel,
                        playerType: this.playerType,
                        isLoggedIn: this.props.isLoggedIn
                    })))
                }, t.prototype.componentWillUnmount = function() {
                    this.props.latencyTracking.reportInteractive(), this.unbindHotKeys(), this.checkPlayerDependencyAnimationFrame && cancelAnimationFrame(this.checkPlayerDependencyAnimationFrame), this.maybeDetachFromWindow(), this.props.onDestroy && this.props.onDestroy(), this.player && (m.m.eventEmitter.removeListener(g.SpadeEventType.Pageview, this.updatePlayerTrackingData), this.player.removeEventListener(A.PlayerReady, this.onPlayerReady), this.player.removeEventListener(A.Online, this.onStreamStatusOnline), this.player.removeEventListener(A.Offline, this.onStreamStatusOffline), this.player.removeEventListener(c.Ended, this.onStreamStatusOffline), this.player.removeEventListener(c.Play, this.onPlayerPlay), this.player.removeEventListener(A.TheatreChange, this.onTheatreChange), this.player.removeEventListener(A.TransitionToCollectionVOD, this.onTransitionToCollectionVod), this.player.removeEventListener(A.FullscreenChange, this.onFullScreenChange), this.player.removeEventListener(c.Seeked, this.onSeek), this.player.removeEventListener(c.TimeUpdate, this.onTimeUpdate), this.player.removeEventListener(A.OpenStream, this.onOpenStream), this.player.removeEventListener(c.Pause, this.onPause), this.player.removeEventListener(A.PersistenPlayerToggle, this.onPersistentPlayerToggled), this.player.removeEventListener(c.LoadedMetadata, this.onMetadataLoaded), F.extensionService.unregisterPlayer(), this.player.destroy()), m.m.setVideoPlayerTrackingData({
                        vodID: void 0
                    })
                }, t.prototype.trackMiniPlayerAction = function(e, t) {
                    this.player && this.state.playerInitialized && this.player.trackMiniPlayerAction(e, t)
                }, t.prototype.initializePlayer = function() {
                    var e = d.__assign({}, W, {
                        showtheatre: !this.props.disableTheatreButton,
                        autoplay: !this.props.paused
                    });
                    this.props.playerTypeOverride && (e.player = this.props.playerTypeOverride, this.playerType = this.props.playerTypeOverride), this.props.channelLogin && (e.channel = this.props.channelLogin, this.lastSetChannel = this.props.channelLogin), this.props.collectionID && (e.collection = this.props.collectionID), this.props.vodID && (e.video = Object(B.a)(this.props.vodID), m.m.setVideoPlayerTrackingData({
                        vodID: this.props.vodID
                    })), this.props.nextVideoOffset && (e.time = Object(B.b)(this.props.nextVideoOffset)), this.lastPausedProp = this.props.paused, e.oauth_token = this.props.authToken || "", this.logger.debug("Initializing", e);
                    var t = new window.Twitch.Player(this.playerRef, e);
                    this.player = t, t.addEventListener(A.PlayerReady, this.onPlayerReady), t.addEventListener(A.Online, this.onStreamStatusOnline), t.addEventListener(A.Offline, this.onStreamStatusOffline), t.addEventListener(c.Ended, this.onStreamStatusOffline), t.addEventListener(c.Play, this.onPlayerPlay), t.addEventListener(c.Seeked, this.onSeek), t.addEventListener(c.TimeUpdate, this.onTimeUpdate), t.addEventListener(A.TheatreChange, this.onTheatreChange), t.addEventListener(A.FullscreenChange, this.onFullScreenChange), t.addEventListener(A.TransitionToCollectionVOD, this.onTransitionToCollectionVod), t.addEventListener(A.TransitionToRecommendedVOD, this.onTransitionToRecommendedVod), t.addEventListener(A.OpenStream, this.onOpenStream), t.addEventListener(c.Pause, this.onPause), t.addEventListener(A.PersistenPlayerToggle, this.onPersistentPlayerToggled), t.addEventListener(c.LoadedMetadata, this.onMetadataLoaded), F.extensionService.registerPlayer(this.player), this.props.onInit && this.props.onInit(t), this.maybeAttachToWindow(this.props)
                }, t.prototype.registerCreatedEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent("Player", "player-created", "Created", 1e3)
                }, t.prototype.registerLoadedEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent("Player", "player-loaded", "Init", 2500)
                }, t.prototype.registerPlayedEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent("Player", "player-played", "First Frame", 4e3)
                }, t.prototype.reportPlayerPlayed = function() {
                    this.hasPlayed || (this.hasPlayed = !0, this.playerPlayed && this.props.latencyTracking.reportCustomEvent(this.playerPlayed))
                }, t.prototype.maybeAttachToWindow = function(e) {
                    R.parse(window.location.search).attachPlayer && e.attachToWindow && this.player && (window.player = this.player)
                }, t.prototype.maybeDetachFromWindow = function() {
                    window.player = void 0
                }, t.prototype.bindHotKeys = function() {
                    U.bind("alt+x", this.maybeRecordClip)
                }, t.prototype.unbindHotKeys = function() {
                    U.unbind("alt+x")
                }, t.tagInjected = !1, t
            }(u.Component),
            V = Object(M.c)("VideoPlayer")(H),
            G = Object(_.a)(s, o)(V);
        n.d(t, !1, function() {
            return "hosting-ui-report-button"
        }), n.d(t, !1, function() {
            return "hosting-ui-more-balloon"
        }), n.d(t, !1, function() {
            return "hosting-ui-more-button"
        }), n.d(t, !1, function() {
            return "hosting-ui-channel-name"
        }), n.d(t, !1, function() {
            return "video-player-hosting-ui__header"
        }), n.d(t, !1, function() {
            return "video-player-hosting-ui__footer"
        }), n.d(t, !1, function() {
            return y
        }), n.d(t, "a", function() {
            return I
        }), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "b", function() {
            return j
        }), n.d(t, !1, function() {}), n.d(t, "c", function() {
            return G
        }), n.d(t, "d", function() {
            return l
        })
    },
    273: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                authToken: Object(u.a)(e)
            }
        }

        function a(e) {
            return Object(l.bindActionCreators)({
                updateEmoteSets: p.L
            }, e)
        }
        var r = n(0),
            s = n(1),
            o = n(6),
            l = n(9),
            c = n(7),
            d = n(87),
            u = n(17),
            p = n(378),
            m = n(88),
            h = n(2),
            f = ["4.99", "9.99", "24.99"],
            g = function(e, t) {
                var n = [];
                return t.forEach(function(t, i) {
                    t.emotes.length && t.emoteSetID && !e.has(parseInt(t.emoteSetID, 10)) && n.push(r.__assign({}, t, {
                        emotes: Object(m.b)(t.emotes),
                        level: i,
                        price: f[i]
                    }))
                }), n
            },
            v = function(e, t) {
                for (var n = [{
                        id: "0",
                        emotes: []
                    }], i = 0, a = t; i < a.length; i++) {
                    var r = a[i];
                    r.emoteSetID && e.has(parseInt(r.emoteSetID, 10)) && (n[0].emotes = n[0].emotes.concat(Object(m.b)(r.emotes)))
                }
                return n[0].emotes.length ? n : []
            },
            b = function(e) {
                for (var t = [], n = 0; n < e.length; n++) {
                    var i = e[n];
                    0 === n && i.emotes.length > 1 ? t[n] = Object(h.d)("Unlock {numEmotes, number} Sub Emotes", {
                        numEmotes: i.emotes.length
                    }, "assembleSubscribeTexts") : 0 === n ? t[n] = Object(h.d)("Unlock 1 Sub Emote", "assembleSubscribeTexts") : i.emotes.length > 1 ? t[n] = Object(h.d)("{numEmotes, number} Extra {price} Sub Emotes", {
                        numEmotes: i.emotes.length,
                        price: f[n]
                    }, "assembleSubscribeTexts") : i.emotes.length && (t[n] = Object(h.d)("1 Extra ${price, number} Sub Emote", {
                        price: f[n]
                    }, "assembleSubscribeTexts"))
                }
                return t
            },
            k = n(5),
            S = n(49),
            y = n(4),
            _ = n(28),
            N = n(40),
            E = n(274),
            T = n(69),
            C = n(3),
            D = (n(460), function(e) {
                var t = {
                        "emote-picker__tab": !0,
                        "pd-x-1": !0
                    },
                    n = null,
                    i = null;
                if (e.channelTabVisible) {
                    var a = y(r.__assign({}, t, {
                        "emote-picker__tab--active": e.channelTabEnabled && e.channelTabSelected,
                        "emote-picker__tab--disabled": !e.channelTabEnabled
                    }));
                    n = s.createElement("div", {
                        key: "ChannelTabLink",
                        id: "emote-picker__channel",
                        className: a,
                        onClick: e.channelTabEnabled ? e.selectChannelTab : void 0,
                        "data-a-target": "emote-channel-tab"
                    }, s.createElement("span", null, Object(T.d)("Channel", "EmotePicker")))
                }
                if (e.allTabVisible) {
                    var o = y(r.__assign({}, t, {
                        "emote-picker__tab--active": !(e.channelTabSelected && e.channelTabEnabled)
                    }));
                    i = s.createElement("div", {
                        key: "allTabLink",
                        id: "emote-picker__all",
                        className: o,
                        onClick: e.selectAllTab,
                        "data-a-target": "emote-all-tab"
                    }, s.createElement("span", null, Object(T.d)("All", "EmotePicker")))
                }
                return s.createElement(C._17, {
                    background: C.m.Base,
                    borderTop: !0,
                    className: "emote-picker__tabs-container"
                }, n, i)
            }),
            w = n(275),
            I = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    var e = [];
                    if (this.props.subscribeTexts)
                        for (var t = 0; t <= this.props.plan.level; t++) {
                            var n = this.props.subscribeTexts[t];
                            n && (t < this.props.plan.level ? (e.push(s.createElement("span", {
                                key: "upsell-predicate:" + t
                            }, n)), e.push(s.createElement("span", {
                                key: "upsell-plus:" + t
                            }, " + "))) : this.props.plan.level > 0 ? e.push(s.createElement("strong", {
                                key: "upsell-strong-end:" + this.props.plan.level
                            }, n)) : e.push(s.createElement("span", {
                                key: "upsell-end:" + t
                            }, n)))
                        }
                    if (!this.props.plan.emoteSetID) return null;
                    var i = {
                            id: this.props.plan.emoteSetID,
                            emotes: this.props.plan.emotes
                        },
                        a = {};
                    return this.props.plan.price && (a.purchase = Object(h.d)("${price}", {
                        price: this.props.plan.price
                    }, "PlanUpsell")), s.createElement(C.U, {
                        className: "emote-picker-plan-upsell",
                        display: C.H.Flex,
                        flexDirection: C.J.Column,
                        alignItems: C.c.Center,
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(E.a, {
                        emoteSet: i,
                        locked: !0
                    }), s.createElement(C.U, {
                        margin: 1,
                        alignItems: C.c.Center
                    }, e), s.createElement(w.a, {
                        isSubbedToTier: !1,
                        tierPrice: a.purchase || "",
                        reportSubAction: this.props.reportSubAction,
                        url: this.props.plan.url
                    }))
                }, t
            }(s.Component),
            P = (n(461), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.closeOnEsc = function(e) {
                        e.keyCode === N.a.Esc && n.props.toggleVisibility()
                    }, n.handleFilterChange = function(e) {
                        var t = e.target.value,
                            i = t.toLowerCase(),
                            a = n.filterAvailableUpsells(n.props.availableUpsells, i),
                            r = n.filterEmoteSets(n.props.ownedChannelEmoteSets, i);
                        n.setState({
                            filter: i,
                            filteredAllEmoteSets: n.filterEmoteSets(n.props.allEmoteSets, i),
                            filteredAvailableUpsells: a,
                            filteredOwnedChannelEmoteSets: r,
                            inputValue: t,
                            channelTabEnabled: r.length > 0 || a.length > 0
                        })
                    }, n.state = {
                        filter: "",
                        filteredOwnedChannelEmoteSets: t.ownedChannelEmoteSets,
                        filteredAvailableUpsells: t.availableUpsells,
                        filteredAllEmoteSets: t.allEmoteSets,
                        inputValue: "",
                        channelTabSelected: !0,
                        channelTabEnabled: t.ownedChannelEmoteSets.length > 0 || t.availableUpsells.length > 0
                    }, n.selectAllTab = function() {
                        return n.setChannelTabSelected(!1)
                    }, n.selectChannelTab = function() {
                        return n.setChannelTabSelected(!0)
                    }, n
                }
                return r.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    if (!e.gqlError)
                        if (this.state.filter.length > 0) {
                            var t = this.filterAvailableUpsells(this.props.availableUpsells, this.state.filter),
                                n = this.filterEmoteSets(this.props.ownedChannelEmoteSets, this.state.filter);
                            this.setState({
                                filteredAllEmoteSets: this.filterEmoteSets(this.props.allEmoteSets, this.state.filter),
                                filteredAvailableUpsells: t,
                                filteredOwnedChannelEmoteSets: n,
                                channelTabEnabled: n.length > 0 || t.length > 0
                            })
                        } else this.setState({
                            filteredOwnedChannelEmoteSets: e.ownedChannelEmoteSets,
                            filteredAvailableUpsells: e.availableUpsells,
                            filteredAllEmoteSets: e.allEmoteSets,
                            channelTabEnabled: e.ownedChannelEmoteSets.length > 0 || e.availableUpsells.length > 0
                        })
                }, t.prototype.render = function() {
                    return s.createElement(C.p, {
                        "data-a-target": "emote-picker",
                        direction: this.props.direction ? this.props.direction : C.q.TopRight,
                        size: this.props.size ? this.props.size : C.r.Medium,
                        noTail: !0,
                        show: !0
                    }, s.createElement(C.U, {
                        className: y("emote-picker")
                    }, this.renderTabContent(), s.createElement(C.U, {
                        className: "emote-picker__controls-container",
                        position: C._2.Relative
                    }, s.createElement(C._17, {
                        padding: 1,
                        borderTop: !0
                    }, s.createElement(C.Q, {
                        autoFocus: !0,
                        onChange: this.handleFilterChange,
                        onKeyDown: this.closeOnEsc,
                        placeholder: Object(h.d)("Search for Emotes", "EmotePicker"),
                        type: C.R.Text,
                        value: this.state.inputValue
                    })), s.createElement(D, {
                        allTabVisible: this.props.allEmoteSets.length > 0,
                        channelTabEnabled: this.state.channelTabEnabled,
                        channelTabSelected: this.state.channelTabSelected,
                        channelTabVisible: !!this.props.channelTabVisible,
                        selectAllTab: this.selectAllTab,
                        selectChannelTab: this.selectChannelTab
                    }))))
                }, t.prototype.renderTabContent = function() {
                    var e = this,
                        t = [];
                    return this.props.gqlError ? t.push(s.createElement(C.U, {
                        key: "emotePicker-error"
                    }, s.createElement(C._21, {
                        color: C.F.Error
                    }, Object(h.d)("Unable to load available emotes.", "EmotePicker")))) : this.props.loading ? t.push(s.createElement(C.U, {
                        alignItems: C.c.Center,
                        display: C.H.Flex,
                        key: "loading",
                        fullHeight: !0,
                        fullWidth: !0,
                        justifyContent: C.T.Center
                    }, s.createElement(C.X, {
                        key: "LoadingSpinner"
                    }))) : this.state.channelTabEnabled && this.state.channelTabSelected ? (this.state.filteredOwnedChannelEmoteSets.length > 0 && t.push(s.createElement(C.U, {
                        className: "emote-picker__content-block",
                        key: "ownedChannelEmoteSets",
                        padding: 1,
                        position: C._2.Relative
                    }, s.createElement(E.a, {
                        emoteSet: this.state.filteredOwnedChannelEmoteSets[0],
                        onClickEmote: this.props.onClickEmote,
                        locked: !1
                    }))), t = t.concat(this.state.filteredAvailableUpsells.map(function(t) {
                        return s.createElement(C.U, {
                            className: "emote-picker__content-block",
                            key: "planUpsell:" + t.level,
                            padding: 1,
                            position: C._2.Relative
                        }, s.createElement(I, {
                            plan: t,
                            subscribeTexts: e.props.subscribeTexts,
                            reportSubAction: e.props.reportSubAction
                        }))
                    }))) : t = this.state.filteredAllEmoteSets.map(function(t) {
                        return s.createElement(C.U, {
                            key: "emoteGrid" + t.id,
                            position: C._2.Relative,
                            padding: {
                                top: 1,
                                bottom: 2
                            },
                            className: "emote-picker__content-block"
                        }, s.createElement(E.a, {
                            emoteSet: t,
                            onClickEmote: e.props.onClickEmote,
                            locked: !1
                        }))
                    }), t.length > 0 ? s.createElement(_.b, {
                        className: "emote-picker__tab-content"
                    }, s.createElement(C.U, {
                        padding: 1
                    }, t)) : null
                }, t.prototype.filterEmoteSet = function(e, t) {
                    return e.filter(function(e) {
                        return e.token.toLowerCase().includes(t)
                    })
                }, t.prototype.setChannelTabSelected = function(e) {
                    this.setState({
                        channelTabSelected: e
                    })
                }, t.prototype.filterEmoteSets = function(e, t) {
                    for (var n = [], i = 0, a = e; i < a.length; i++) {
                        var r = a[i],
                            s = this.filterEmoteSet(r.emotes, t);
                        s.length > 0 && n.push({
                            id: r.id,
                            emotes: s
                        })
                    }
                    return n
                }, t.prototype.filterAvailableUpsells = function(e, t) {
                    for (var n = [], i = 0, a = e; i < a.length; i++) {
                        var s = a[i],
                            o = this.filterEmoteSet(s.emotes, t);
                        o.length > 0 && n.push(r.__assign({}, s, {
                            emotes: o
                        }))
                    }
                    return n
                }, t
            }(s.Component)),
            O = n(462),
            F = n(463),
            U = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.trackSubEvent = function(e) {
                        Object(S.b)(r.__assign({}, e, {
                            action: S.a.ClickCheckout,
                            channelID: n.props.channelData && n.props.channelData.user && n.props.channelData.user.id || "",
                            channelLogin: n.props.channelData && n.props.channelData.user && n.props.channelData.user.displayName || "",
                            isMenuOpen: null,
                            hasSubCredit: null,
                            sub_location: "emote_picker",
                            modal: !1,
                            showPrimeContent: !0,
                            giftRecipient: null
                        }))
                    };
                    var i = {
                        allEmoteSets: [],
                        availableUpsells: [],
                        channelTabVisible: !1,
                        gqlError: t.userData && !!t.userData.error || t.channelData && !!t.channelData.error || !1,
                        gqlLoading: t.userData && !!t.userData.loading || t.channelData && !!t.channelData.loading || !1,
                        subscribeTexts: [],
                        ownedChannelEmoteSets: [],
                        ownedSetIDs: new Set([])
                    };
                    return i = n.applyDataPropsToState(t, i), n.state = r.__assign({}, i), n
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.checkDataLoaded(this.props) && (this.props.onLoad && this.props.onLoad(this.checkForContent(this.props)), this.props.latencyTracking.reportInteractive())
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (e.userData && e.userData.error || e.channelData && e.channelData.error) this.setState({
                        gqlError: !0
                    });
                    else {
                        var t = this.applyDataPropsToState(e, this.state);
                        this.props.pubsub.messages.subscriptionInfo !== e.pubsub.messages.subscriptionInfo && (this.props.channelData && this.props.channelData.refetch(), this.props.userData && this.props.userData.refetch()), this.checkDataLoaded(e) && (e.latencyTracking.reportInteractive(), e.onLoad && e.onLoad(this.checkForContent(e)), t.gqlLoading = !1), this.state.allEmoteSets !== t.allEmoteSets && this.props.updateEmoteSets(t.allEmoteSets), this.setState(r.__assign({}, t, {
                            gqlError: !1
                        }))
                    }
                }, t.prototype.render = function() {
                    return this.props.visible ? s.createElement(P, {
                        allEmoteSets: this.state.allEmoteSets,
                        availableUpsells: this.state.availableUpsells,
                        channelTabVisible: this.state.channelTabVisible,
                        gqlError: this.state.gqlError,
                        loading: this.state.gqlLoading,
                        onClickEmote: this.props.onClickEmote,
                        ownedChannelEmoteSets: this.state.ownedChannelEmoteSets,
                        toggleVisibility: this.props.toggleVisibility,
                        subscribeTexts: this.state.subscribeTexts,
                        reportSubAction: this.trackSubEvent,
                        direction: this.props.direction,
                        size: this.props.size
                    }) : null
                }, t.prototype.checkDataLoaded = function(e) {
                    var t = !e.channelOwnerID || e.channelData && !e.channelData.loading,
                        n = !e.authToken || e.userData && !e.userData.loading;
                    return t && n
                }, t.prototype.checkForContent = function(e) {
                    var t = e.userData && e.userData.user && e.userData.user.emoteSets.length > 0 || !1,
                        n = e.channelData && e.channelData.user && e.channelData.user.subscriptionProducts.filter(this.subscriptionProductHasEmotes).length > 0 || !1;
                    return t || n
                }, t.prototype.applyDataPropsToState = function(e, t) {
                    var n = r.__assign({}, t);
                    return e.userData && e.userData.user && (n.ownedSetIDs = new Set(e.userData.user.emoteSets.map(function(e) {
                        return parseInt(e.id, 10)
                    })), n.allEmoteSets = Object(m.a)(e.userData.user.emoteSets)), e.channelData && e.channelData.user && (n.availableUpsells = g(n.ownedSetIDs, e.channelData.user.subscriptionProducts), n.subscribeTexts = b(e.channelData.user.subscriptionProducts), n.ownedChannelEmoteSets = v(n.ownedSetIDs, e.channelData.user.subscriptionProducts)), n.channelTabVisible = e.channelData && e.channelData.user && e.channelData.user.subscriptionProducts.filter(this.subscriptionProductHasEmotes).length > 0 || !1, n
                }, t.prototype.subscriptionProductHasEmotes = function(e) {
                    return void 0 !== e.emoteSetID && e.emotes.length > 0
                }, t = r.__decorate([Object(c.a)(O, {
                    name: "userData",
                    skip: function(e) {
                        return !e.authToken
                    }
                }), Object(c.a)(F, {
                    name: "channelData",
                    skip: function(e) {
                        return !e.channelOwnerID
                    },
                    options: function(e) {
                        return {
                            variables: {
                                channelOwnerID: e.channelOwnerID
                            }
                        }
                    }
                }), Object(d.a)([{
                    topic: function(e) {
                        return "user-subscribe-events-v1." + (e.userData && e.userData.user && e.userData.user.id)
                    },
                    mapMessageTypesToProps: {
                        "*": "subscriptionInfo"
                    },
                    skip: function(e) {
                        return !(e.userData && !e.userData.loading && !e.userData.error)
                    }
                }]), Object(k.c)("EmotePicker")], t)
            }(s.Component),
            R = Object(o.a)(i, a)(U);
        n.d(t, "a", function() {
            return R
        })
    },
    274: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(4),
            r = n(1),
            s = n(2),
            o = n(3),
            l = (n(459), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = a("emote-picker__emote-link", {
                            "emote-picker__emote-link--locked": this.props.locked
                        }),
                        n = r.createElement(o._17, {
                            alignItems: o.c.Center,
                            background: o.m.Overlay,
                            borderRadius: o.s.Small,
                            className: "emote-picker__emote-lock",
                            color: o.F.Overlay,
                            display: o.H.InlineFlex,
                            justifyContent: o.T.Center,
                            position: o._2.Absolute,
                            zIndex: o._38.Above
                        }, r.createElement(o._8, {
                            asset: o._9.Lock,
                            height: 10,
                            width: 10
                        })),
                        i = this.props.emoteSet.emotes.map(function(i) {
                            return r.createElement("div", {
                                key: i.id,
                                className: "emote-picker__emote"
                            }, r.createElement(o._30, {
                                label: i.displayName || Object(s.d)("Emote", "EmoteGrid"),
                                direction: o._32.Bottom
                            }, r.createElement(o.P, {
                                display: o.H.Flex,
                                alignItems: o.c.Center,
                                justifyContent: o.T.Center
                            }, r.createElement("button", {
                                className: t,
                                name: i.displayName,
                                onClick: e.props.locked ? void 0 : e.handleClickEmote.bind(e, i.id),
                                "data-a-target": i.displayName
                            }, r.createElement("figure", {
                                className: "emote-picker__emote-figure"
                            }, e.props.locked ? n : null, r.createElement("img", {
                                srcSet: i.srcSet,
                                alt: i.displayName
                            }))))))
                        });
                    return r.createElement(o.U, {
                        display: o.H.Flex,
                        justifyContent: o.T.Center
                    }, i)
                }, t.prototype.handleClickEmote = function(e, t) {
                    this.props.onClickEmote && this.props.onClickEmote(t.currentTarget.name, e)
                }, t
            }(r.Component));
        n.d(t, "a", function() {
            return l
        })
    },
    275: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(1),
            r = n(2),
            s = n(5),
            o = n(49),
            l = n(3),
            c = "subscribe-button__subscribe-tier-button",
            d = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.messages = {
                        subscribed: Object(r.d)("Subscribed", "SubTierButton"),
                        subscribeNow: Object(r.d)("Subscribe Now", "SubTierButton")
                    }, t.handleClick = function() {
                        t.props.reportSubAction({
                            action: o.a.ClickCheckout,
                            checkoutButtonTier: t.props.tierPrice
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.props.isSubbedToTier ? a.createElement(l.u, {
                        ariaLabel: this.messages.subscribed,
                        "data-test-selector": c,
                        disabled: !0,
                        icon: l._9.Star
                    }, this.messages.subscribed) : a.createElement(l.u, i.__assign({
                        ariaLabel: this.messages.subscribeNow + " " + this.props.tierPrice,
                        "data-test-selector": c,
                        linkTo: this.props.url,
                        onClick: this.handleClick,
                        purchase: this.props.tierPrice
                    }, Object(l._39)(this.props), {
                        targetBlank: void 0 === this.props.targetBlank || this.props.targetBlank
                    }), this.messages.subscribeNow)
                }, t = i.__decorate([Object(s.c)("SubTierButton")], t)
            }(a.Component),
            u = d;
        n.d(t, !1, function() {
            return c
        }), n.d(t, "a", function() {
            return u
        })
    },
    276: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(1),
            r = n(2),
            s = n(89),
            o = n(3),
            l = (n(493), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.subscriptionProduct;
                    if (void 0 === e) return null;
                    var t = Object(r.d)("{price} / Month", {
                        price: e.price
                    }, "SubDiscountPriceLabel");
                    if (this.hasDiscount()) {
                        var n = this.getMessage();
                        return a.createElement(o.U, {
                            "data-test-selector": "sub-discount-price-label__discounted"
                        }, a.createElement(o._21, {
                            color: o.F.Alt2,
                            decoration: o._24.Strikethrough
                        }, t), a.createElement(o._21, {
                            className: "sub-discount-price-label__discount-price",
                            type: o._26.H5,
                            bold: !0
                        }, n))
                    }
                    return a.createElement(o.U, {
                        "data-test-selector": "sub-discount-price-label__non-discounted"
                    }, a.createElement(o._21, null, t))
                }, t.prototype.hasDiscount = function() {
                    return this.props.isGift ? Object(s.c)([this.props.subscriptionProduct]) : Object(s.d)([this.props.subscriptionProduct])
                }, t.prototype.getMessage = function() {
                    return this.props.isGift ? Object(r.d)("{price} (Save {percent})", {
                        price: Object(s.a)(this.props.subscriptionProduct, this.props.isGift),
                        percent: Object(r.e)(Object(s.b)(this.props.subscriptionProduct, this.props.isGift) / 100, "percent")
                    }, "SubDiscountPriceLabel") : Object(r.d)("{price} for the first month (Save {percent})", {
                        price: Object(s.a)(this.props.subscriptionProduct, this.props.isGift),
                        percent: Object(r.e)(Object(s.b)(this.props.subscriptionProduct, this.props.isGift) / 100, "percent")
                    }, "SubDiscountPriceLabel")
                }, t
            }(a.Component)),
            c = l;
        n.d(t, !1, function() {
            return "sub-discount-price-label__discounted"
        }), n.d(t, !1, function() {
            return "sub-discount-price-label__non-discounted"
        }), n.d(t, "a", function() {
            return c
        })
    },
    277: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                sessionUser: e.session.user
            }
        }
        n.d(t, "a", function() {
            return S
        });
        var a = n(0),
            r = n(1),
            s = (n.n(r), n(6)),
            o = n(9),
            l = n(2),
            c = n(7),
            d = n(20),
            u = n(13),
            p = n(5),
            m = n(140),
            h = n(262),
            f = n(281),
            g = n(140),
            v = n(500),
            b = (n.n(v), n(501)),
            k = (n.n(b), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        submitStatus: g.b.Unsubmitted
                    }, t.handleSubmit = function(e, n, i, r) {
                        return a.__awaiter(t, void 0, void 0, function() {
                            var t, s, t, o;
                            return a.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        if (e !== m.a) return [3, 5];
                                        t = {
                                            userID: this.props.reportContext.targetUserID,
                                            communityID: i || "",
                                            reason: n
                                        }, a.label = 1;
                                    case 1:
                                        return a.trys.push([1, 3, , 4]), [4, this.props.reportUserInCommunity(Object(d.a)(t))];
                                    case 2:
                                        return a.sent(), l.n.tracking.track(u.SpadeEventType.CommunityModeration, {
                                            community_id: i,
                                            name: r,
                                            is_official: !1,
                                            user_id: this.props.sessionUser && this.props.sessionUser.id,
                                            target_id: this.props.reportContext.targetUserID,
                                            action: "report",
                                            reason: e
                                        }), this.setState({
                                            submitStatus: g.b.Success
                                        }), [3, 4];
                                    case 3:
                                        return s = a.sent(), l.i.error(s, "ReportUserInCommunity Mutation failed."), this.setState({
                                            submitStatus: g.b.MutationError
                                        }), [3, 4];
                                    case 4:
                                        return [3, 9];
                                    case 5:
                                        t = {
                                            description: n,
                                            reason: e,
                                            content: this.props.reportContext.contentType,
                                            contentID: this.props.reportContext.contentID,
                                            extra: this.props.reportContext.extra,
                                            targetID: this.props.reportContext.targetUserID
                                        }, this.props.reportContext.contentType === h.a.Community && this.props.reportContext.extra && (t.description = Object(f.a)(this.props.reportContext.extra, n)), a.label = 6;
                                    case 6:
                                        return a.trys.push([6, 8, , 9]), [4, this.props.reportUser(Object(d.a)(t))];
                                    case 7:
                                        return a.sent(), this.props.reportContext.contentType === h.a.Community && l.n.tracking.track(u.SpadeEventType.CommunityReport, {
                                            community_id: this.props.reportContext.contentID,
                                            name: this.props.reportContext.extra,
                                            is_official: !1,
                                            user_id: this.props.sessionUser && this.props.sessionUser.id,
                                            reason: e
                                        }), this.setState({
                                            submitStatus: g.b.Success
                                        }), [3, 9];
                                    case 8:
                                        return o = a.sent(), l.i.error(o, "ReportUser Mutation failed."), this.setState({
                                            submitStatus: g.b.MutationError
                                        }), [3, 9];
                                    case 9:
                                        return [2]
                                }
                            })
                        })
                    }, t.handleChildError = function(e) {
                        return t.setState({
                            submitStatus: e
                        })
                    }, t.handleClose = function() {
                        t.props.onClose && t.props.onClose(t.state.submitStatus)
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillUnmount = function() {
                    this.handleClose()
                }, t.prototype.render = function() {
                    return r.createElement(g.c, {
                        onClose: this.handleClose,
                        onError: this.handleChildError,
                        onSubmit: this.handleSubmit,
                        reportContentType: this.props.reportContext.contentType,
                        submitStatus: this.state.submitStatus,
                        targetUserID: this.props.reportContext.targetUserID,
                        title: this.props.title,
                        defaultDescription: this.props.defaultDescription
                    })
                }, t
            }(r.Component)),
            S = Object(o.compose)(Object(c.a)(v, {
                name: "reportUserInCommunity"
            }), Object(c.a)(b, {
                name: "reportUser"
            }), Object(p.c)("ReportUser"), Object(s.a)(i, null))(k)
    },
    278: function(e, t, n) {
        "use strict";

        function i(e, t, n) {
            return {
                type: a,
                threadID: e,
                afterMessageID: n,
                content: t
            }
        }
        n.d(t, "a", function() {
            return a
        }), t.b = i;
        var a = "whisperNotifications.WHISPER_THREAD_NOTIFIED"
    },
    279: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "blockedUsers"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "blockedUsers"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 67
            }
        };
        n.loc.source = {
            body: "fragment blockedUsers on User {\n  id\n  blockedUsers {\n    id\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    280: function(e, t, n) {
        "use strict";

        function i(e) {
            C.n.tracking.track(D.SpadeEventType.WhisperThreadMod, {
                conversation_id: e.threadID,
                action: e.action
            })
        }

        function a(e) {
            return T.__awaiter(this, void 0, void 0, function() {
                var t;
                return T.__generator(this, function(n) {
                    switch (n.label) {
                        case 0:
                            return [4, y()];
                        case 1:
                            return t = n.sent(), C.n.tracking.track(D.SpadeEventType.WhisperIgnoreUser, {
                                ui_context: e.context,
                                from_login: t && t.login,
                                ignored_login: e.targetUserLogin,
                                reason: e.reason || E.Other,
                                source: e.source
                            }), [2]
                    }
                })
            })
        }

        function r(e, t) {
            return T.__awaiter(this, void 0, void 0, function() {
                var n;
                return T.__generator(this, function(i) {
                    switch (i.label) {
                        case 0:
                            return [4, y()];
                        case 1:
                            return n = i.sent(), C.n.tracking.track(D.SpadeEventType.WhisperThreadMod, {
                                conversation_id: e,
                                action: t,
                                login: n && n.login
                            }), [2]
                    }
                })
            })
        }

        function s(e) {
            C.n.tracking.track(D.SpadeEventType.WhisperAllThreadsMod, {
                action: e
            })
        }

        function o() {
            s(I.MarkAllRead)
        }

        function l() {
            s(I.EnableDoNotDisturb)
        }

        function c() {
            s(I.DisableDoNotDisturb)
        }

        function d(e, t) {
            a({
                context: t,
                targetUserLogin: e,
                reason: E.Spam,
                source: "conversations_button"
            })
        }

        function u(e) {
            r(e, F.MarkNotSpam)
        }

        function p(e) {
            r(e, F.Archive)
        }

        function m(e) {
            i({
                threadID: e,
                action: P.Mute
            })
        }

        function h(e) {
            i({
                threadID: e,
                action: P.Unmute
            })
        }

        function f(e) {
            i({
                threadID: e,
                action: P.Expand
            })
        }

        function g(e) {
            i({
                threadID: e,
                action: P.Collapse
            })
        }

        function v(e) {
            i({
                threadID: e,
                action: P.Close
            })
        }

        function b(e) {
            i({
                threadID: e,
                action: P.Archive
            })
        }

        function k(e) {
            C.n.tracking.track(D.SpadeEventType.WhisperThreadCreate, {
                conversation_id: e.threadID,
                target_login: e.targetUserlogin,
                source: "search_target_result",
                search_result_rank: e.searchResultRank
            })
        }

        function S(e) {
            C.n.tracking.track(D.SpadeEventType.WhisperSearchClick, {
                query: e.searchQuery,
                source: "conversation_list",
                rank: e.searchResultRank,
                is_conversation: e.isConversation
            })
        }

        function y() {
            return T.__awaiter(this, void 0, void 0, function() {
                var e, t, n;
                return T.__generator(this, function(i) {
                    switch (i.label) {
                        case 0:
                            e = null, i.label = 1;
                        case 1:
                            return i.trys.push([1, 3, , 4]), [4, C.n.apollo.client.query({
                                query: w
                            })];
                        case 2:
                            return e = i.sent(), [3, 4];
                        case 3:
                            return t = i.sent(), C.i.error(t, "Failed to make query for current user info in WhisperSent reporting"), [3, 4];
                        case 4:
                            return n = e && e.data && e.data.currentUser, [2, n]
                    }
                })
            })
        }

        function _(e) {
            return T.__awaiter(this, void 0, void 0, function() {
                var t;
                return T.__generator(this, function(n) {
                    switch (n.label) {
                        case 0:
                            return [4, y()];
                        case 1:
                            return t = n.sent(), C.n.tracking.track(D.SpadeEventType.WhisperSent, {
                                to: e.targetUserLogin,
                                from: t && t.login,
                                player: "web",
                                is_turbo: t && t.hasTurbo,
                                conversation_id: e.threadID,
                                availability: t && t.availability
                            }), [2]
                    }
                })
            })
        }

        function N(e) {
            return T.__awaiter(this, void 0, void 0, function() {
                var t;
                return T.__generator(this, function(n) {
                    switch (n.label) {
                        case 0:
                            return [4, y()];
                        case 1:
                            return t = n.sent(), C.n.tracking.track(D.SpadeEventType.WhisperReceived, {
                                to: t && t.login,
                                from: e.targetUserLogin,
                                player: "web",
                                is_turbo: t && t.hasTurbo,
                                conversation_id: e.threadID
                            }), [2]
                    }
                })
            })
        }
        n.d(t, "a", function() {
            return O
        }), t.j = o, t.h = l, t.g = c, t.l = d, t.o = u, t.n = p, t.k = m, t.m = h, t.i = f, t.e = g, t.d = v, t.b = b, t.f = k, t.c = S, t.q = _, t.p = N;
        var E, T = n(0),
            C = n(2),
            D = n(13),
            w = n(466);
        n.n(w);
        ! function(e) {
            e.Harassment = "Harassment", e.Spam = "Spam", e.Other = "Other"
        }(E || (E = {}));
        var I;
        ! function(e) {
            e.MarkAllRead = "mark_all_read", e.EnableDoNotDisturb = "do_not_disturb_on", e.DisableDoNotDisturb = "do_not_disturb_off"
        }(I || (I = {}));
        var P;
        ! function(e) {
            e.Mute = "mute", e.Unmute = "unmute", e.Expand = "maximize", e.Collapse = "minimize", e.Close = "close", e.Archive = "archive", e.Open = "open"
        }(P || (P = {}));
        var O;
        ! function(e) {
            e.Dock = "dock", e.SpamPropmt = "dock_spam_cta"
        }(O || (O = {}));
        var F;
        ! function(e) {
            e.Archive = "archive", e.MarkNotSpam = "mark_not_spam"
        }(F || (F = {}))
    },
    281: function(e, t, n) {
        "use strict";

        function i(e) {
            if (e) {
                var t = e.map(function(e) {
                    return e.id
                });
                return s().filter(function(e) {
                    return t.includes(e.canonical)
                })
            }
            return s()
        }
        var a = function(e, t) {
                return 'community report (<a href="{link}">{link}</a>) {description}'.replace(/{link}/g, "https://www.twitch.tv/communities/{communityName}".replace("{communityName}", e)).replace(/{description}/, t)
            },
            r = n(2),
            s = function() {
                return [{
                    localized: Object(r.d)("Site Suspension Evasion", "ReportUserModal"),
                    canonical: "tos_ban_evasion"
                }, {
                    localized: Object(r.d)("Chat Ban Evasion", "ReportUserModal"),
                    canonical: "chat_ban_evasion"
                }, {
                    localized: Object(r.d)("Self-Harm", "ReportUserModal"),
                    canonical: "selfharm"
                }, {
                    localized: Object(r.d)("Attempts or Threats to Harm", "ReportUserModal"),
                    canonical: "harm"
                }, {
                    localized: Object(r.d)("Harassment", "ReportUserModal"),
                    canonical: "harassment"
                }, {
                    localized: Object(r.d)("Hate Speech", "ReportUserModal"),
                    canonical: "hate_speech"
                }, {
                    localized: Object(r.d)("Offensive Username", "ReportUserModal"),
                    canonical: "offensive_username"
                }, {
                    localized: Object(r.d)("Impersonation", "ReportUserModal"),
                    canonical: "impersonation"
                }, {
                    localized: Object(r.d)("Spam, Scams, or Other Malicious Content", "ReportUserModal"),
                    canonical: "spam"
                }, {
                    localized: Object(r.d)("Porn or Other Sexually Explicit Content", "ReportUserModal"),
                    canonical: "porn"
                }, {
                    localized: Object(r.d)("Nudity or Sexual Behavior/Attire", "ReportUserModal"),
                    canonical: "nudity"
                }, {
                    localized: Object(r.d)("Extreme Violence, Gore, or Other Obscene Content", "ReportUserModal"),
                    canonical: "gore"
                }, {
                    localized: Object(r.d)("Underaged User", "ReportUserModal"),
                    canonical: "underaged"
                }, {
                    localized: Object(r.d)("Cheating in Online Game", "ReportUserModal"),
                    canonical: "cheating"
                }, {
                    localized: Object(r.d)("Prohibited Game", "ReportUserModal"),
                    canonical: "prohibited"
                }, {
                    localized: Object(r.d)("Miscategorized Content or Other Category Violation", "ReportUserModal"),
                    canonical: "miscategorized"
                }, {
                    localized: Object(r.d)("Community Rules Violation", "ReportUserModal"),
                    canonical: "community_rules_violation"
                }, {
                    localized: Object(r.d)("Community is Violating Terms of Service", "ReportUserModal"),
                    canonical: "community_tos_violation"
                }, {
                    localized: Object(r.d)("Bits Acceptable Use Policy Violation", "ReportUserModal"),
                    canonical: "bits_violation"
                }, {
                    localized: Object(r.d)("Other Terms of Service Violation", "ReportUserModal"),
                    canonical: "other"
                }]
            };
        n.d(t, "a", function() {
            return a
        }), n.d(t, "b", function() {
            return i
        })
    },
    282: function(e, t, n) {
        "use strict";

        function i(e, t) {
            return a.__awaiter(this, void 0, void 0, function() {
                var n, i, r, l, c;
                return a.__generator(this, function(a) {
                    switch (a.label) {
                        case 0:
                            n = "https://api.twitch.tv/api/premium/credit/spend_token?channel_id=" + e, i = 1, a.label = 1;
                        case 1:
                            if (!(i <= o)) return [3, 7];
                            a.label = 2;
                        case 2:
                            return a.trys.push([2, 5, , 6]), [4, fetch(n, {
                                method: "POST",
                                headers: {
                                    "Client-ID": s.n.config.legacyClientID,
                                    Accept: "application/json; charset=UTF-8",
                                    "content-type": "application/json; charset=UTF-8",
                                    Authorization: "OAuth " + t
                                }
                            })];
                        case 3:
                            return r = a.sent(), [4, r.body];
                        case 4:
                            return l = a.sent(), [2, l];
                        case 5:
                            if (c = a.sent(), i === o) throw c;
                            return [3, 6];
                        case 6:
                            return ++i, [3, 1];
                        case 7:
                            return [2]
                    }
                })
            })
        }
        var a = n(0),
            r = n(1),
            s = n(2),
            o = 3,
            l = n(49),
            c = n(3),
            d = "subscribe-button__subscribe-with-prime",
            u = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isSubscribing: !1,
                        primeSubFailure: !0
                    }, t.handleStartPrimeTrialClick = function() {
                        t.props.reportSubMenuAction({
                            action: l.a.ClickSignupForPrime
                        })
                    }, t.handleSubWithPrimeClick = function() {
                        t.setState({
                            isSubscribing: !0
                        }, function() {
                            return a.__awaiter(t, void 0, void 0, function() {
                                var e;
                                return a.__generator(this, function(t) {
                                    switch (t.label) {
                                        case 0:
                                            return t.trys.push([0, 3, 4, 5]), this.props.authToken && this.props.userHasPrime && this.props.subLogin ? [4, i(this.props.subLogin, this.props.authToken)] : [3, 2];
                                        case 1:
                                            t.sent(), this.props.onSubscribedWithPrime(), t.label = 2;
                                        case 2:
                                            return [3, 5];
                                        case 3:
                                            return e = t.sent(), s.i.error(e, "Failed to subscribe with Prime", {
                                                subLogin: this.props.subLogin
                                            }), this.setState({
                                                isSubscribing: !1,
                                                primeSubFailure: !0
                                            }), [3, 5];
                                        case 4:
                                            return this.setState({
                                                isSubscribing: !1
                                            }), [7];
                                        case 5:
                                            return [2]
                                    }
                                })
                            })
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.setMessages()
                }, t.prototype.render = function() {
                    var e = this.props.isSubscribedWithPrime && this.props.canPrimeSubscribe;
                    return this.props.userHasPrime ? this.props.isSubscribed && !e ? r.createElement(c.u, a.__assign({
                        ariaLabel: this.messages.subscribed,
                        "data-test-selector": d,
                        disabled: !0,
                        icon: c._9.Crown
                    }, Object(c._39)(this.props)), this.messages.subscribed) : this.props.canPrimeSubscribe ? r.createElement(c.u, a.__assign({
                        ariaLabel: this.messages.subscribeFree,
                        "data-test-selector": d,
                        disabled: this.state.isSubscribing,
                        icon: c._9.Crown,
                        state: this.state.isSubscribing ? c.y.Loading : c.y.Default,
                        onClick: this.handleSubWithPrimeClick
                    }, Object(c._39)(this.props)), e ? this.messages.resubscribeFree : this.messages.subscribeFree) : r.createElement(c.u, a.__assign({
                        ariaLabel: this.messages.primeSubNotAvailable,
                        "data-test-selector": d,
                        disabled: !0,
                        icon: c._9.Crown
                    }, Object(c._39)(this.props)), this.messages.primeSubNotAvailable) : r.createElement(c.u, a.__assign({
                        ariaLabel: this.messages.startPrimeTrial,
                        "data-test-selector": d,
                        icon: c._9.Crown,
                        linkTo: s.a.tryPrimeURI,
                        onClick: this.handleStartPrimeTrialClick
                    }, Object(c._39)(this.props), {
                        targetBlank: !0
                    }), this.messages.startPrimeTrial)
                }, t.prototype.setMessages = function() {
                    this.messages = {
                        subscribed: Object(s.d)("Subscribed", "SubscribeWithPrime"),
                        startPrimeTrial: Object(s.d)("Start Your Free Trial", "SubscribeWithPrime"),
                        primeSubNotAvailable: Object(s.d)("Not yet!", "SubscribeWithPrime"),
                        subscribeFree: Object(s.d)("Subscribe Free", "SubscribeWithPrime"),
                        resubscribeFree: Object(s.d)("Resubscribe Free", "SubscribeWithPrime")
                    }
                }, t
            }(r.Component),
            p = u;
        n.d(t, !1, function() {
            return d
        }), n.d(t, "a", function() {
            return p
        })
    },
    283: function(e, t, n) {
        "use strict";

        function i(e, t) {
            switch (e.type) {
                case a.b.Playing:
                    return {
                        type: a.a.Playing,
                        "Symbol(id)": t,
                        __typename: "Playing",
                        game: {
                            id: e.game_id,
                            name: e.game,
                            "Symbol(id)": t + ".game",
                            __typename: "Game"
                        }
                    };
                case a.b.Streaming:
                    var n = {
                        type: a.a.Streaming,
                        "Symbol(id)": t,
                        __typename: "Streaming",
                        stream: {
                            id: e.channel_id,
                            game: null,
                            "Symbol(id)": t + ".stream",
                            __typename: "Stream"
                        }
                    };
                    return e.game && e.game_id && (n.stream.game = {
                        id: e.game_id,
                        name: e.game,
                        "Symbol(id)": t + ".stream.game",
                        __typename: "Game"
                    }), n;
                case a.b.Watching:
                    return {
                        type: a.a.Watching,
                        "Symbol(id)": t,
                        __typename: "Watching",
                        user: {
                            id: e.channel_id,
                            login: e.channel_login,
                            displayName: e.channel_display_name,
                            "Symbol(id)": t + ".user",
                            __typename: "User",
                            hosting: {
                                id: e.hosted_channel_id || null,
                                displayName: e.hosted_channel_display_name || null,
                                login: e.hosted_channel_login || null,
                                "Symbol(id)": t + ".user.hosting",
                                __typename: "User"
                            }
                        }
                    };
                default:
                    return null
            }
        }
        t.a = i;
        var a = n(110)
    },
    284: function(e, t, n) {
        "use strict";

        function i(e) {
            switch (e) {
                case Q.a.Online:
                    return L._4.Online;
                case Q.a.Away:
                case Q.a.Idle:
                    return L._4.Away;
                case Q.a.Busy:
                    return L._4.Busy;
                case Q.a.Offline:
                case Q.a.Invisible:
                default:
                    return L._4.Offline
            }
        }

        function a(e, t) {
            return {
                notifications: Object(re.a)(e, t.thread.id)
            }
        }

        function r(e, t) {
            return {
                messages: {
                    edges: e.map(function(e, n) {
                        return {
                            cursor: "" + n,
                            node: {
                                content: {
                                    content: e.content,
                                    emotes: []
                                },
                                deletedAt: null,
                                editedAt: null,
                                from: {
                                    id: t
                                },
                                id: e.id,
                                sentAt: (new Date).toISOString()
                            }
                        }
                    })
                },
                isMuted: !1,
                unreadMessagesCount: 0,
                participants: [],
                id: Object(N.b)(),
                spamInfo: {
                    lastMarkedNotSpamAt: null,
                    likelihood: "low"
                },
                userLastMessageRead: {
                    sentAt: (new Date).toISOString()
                }
            }
        }

        function s(e) {
            return Object(p.bindActionCreators)({
                notifyWhisperThread: m.b
            }, e)
        }
        var o, l = n(0),
            c = n(1),
            d = n(381),
            u = n(6),
            p = n(9),
            m = n(278),
            h = n(4),
            f = n(2),
            g = n(64),
            v = n(67),
            b = n(7),
            k = n(87),
            S = n(40),
            y = n(20),
            _ = n(30),
            N = n(18),
            E = n(441),
            T = n(384),
            C = n(88),
            D = n(10),
            w = n(47),
            I = n(442),
            P = n(285),
            O = n(266),
            F = n(13),
            U = n(71),
            R = n(286),
            x = n(32),
            M = n(90),
            L = n(3),
            A = n(279),
            j = n(467),
            B = n(468),
            W = n(469),
            H = n(470),
            V = "whispers-report-harassment-button",
            G = "whispers-report-spam-button",
            q = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderReportSpamButton = function() {
                        if (t.isBlocked) return null;
                        var e = Object(f.d)("Report Spam", "ThreadSettings");
                        return c.createElement(L.S, {
                            "data-test-selector": G,
                            ariaLabel: e,
                            onClick: t.reportUserSpam
                        }, c.createElement(L.U, {
                            padding: {
                                y: .5,
                                x: 1
                            }
                        }, e))
                    }, t.renderReportHarassmentButton = function() {
                        if (t.isBlocked) return null;
                        var e = Object(f.d)("Report Harrasment", "ThreadSettings");
                        return c.createElement(L.S, {
                            "data-test-selector": V,
                            ariaLabel: e,
                            onClick: t.reportUserHarassment
                        }, c.createElement(L.U, {
                            padding: {
                                y: .5,
                                x: 1
                            }
                        }, e))
                    }, t.onChannelRedirect = function() {
                        t.props.collapseThread && t.props.collapseThread()
                    }, t.toggleMutethread = function() {
                        var e = !t.props.isMuted,
                            n = l.__assign({}, Object(y.a)({
                                threadID: t.props.threadID,
                                isMuted: !t.props.isMuted
                            }), {
                                optimisticResponse: {
                                    updateWhisperThread: {
                                        thread: {
                                            id: t.props.threadID,
                                            isMuted: e,
                                            __typename: "WhisperThread"
                                        },
                                        __typename: "UpdateWhisperThreadPayload"
                                    }
                                }
                            });
                        t.props.setMuteThread && (e ? Object(M.j)(t.props.threadID) : Object(M.k)(t.props.threadID), t.props.setMuteThread(n))
                    }, t.reportUserHarassment = function() {
                        return l.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return l.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        e = Object(y.a)({
                                            targetUserID: this.props.userID,
                                            reason: O.c.Harassment,
                                            threadID: this.props.threadID
                                        }), n.label = 1;
                                    case 1:
                                        return n.trys.push([1, 3, , 4]), [4, this.props.reportWhisperThread(e)];
                                    case 2:
                                        return n.sent(), this.blockUser(), [3, 4];
                                    case 3:
                                        return t = n.sent(), f.i.error(t, "Failed to report whisper thread for harassment.", {
                                            threadID: this.props.threadID
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.reportUserSpam = function() {
                        return l.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return l.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        e = Object(y.a)({
                                            targetUserID: this.props.userID,
                                            reason: O.c.Spam,
                                            threadID: this.props.threadID
                                        }), n.label = 1;
                                    case 1:
                                        return n.trys.push([1, 3, , 4]), [4, this.props.reportWhisperThread(e)];
                                    case 2:
                                        return n.sent(), this.blockUser(), [3, 4];
                                    case 3:
                                        return t = n.sent(), f.i.error(t, "Failed to report whisper thread for spam.", {
                                            threadID: this.props.threadID
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.blockUser = function() {
                        var e = l.__assign({}, Object(y.a)({
                            targetUserID: t.props.userID,
                            reason: O.b.Other,
                            sourceContext: O.a.Whisper
                        }), {
                            optimisticResponse: {
                                blockUser: {
                                    __typename: "BlockUserPayload",
                                    targetUser: {
                                        __typename: "User",
                                        id: t.props.userID
                                    }
                                }
                            },
                            update: function(e) {
                                var n = e.readFragment({
                                    id: t.currentUserDataID,
                                    fragment: A
                                });
                                n && (n.blockedUsers.push({
                                    id: t.props.userID,
                                    __typename: "User"
                                }), e.writeFragment({
                                    id: t.currentUserDataID,
                                    fragment: A,
                                    data: n
                                }))
                            }
                        });
                        t.props.blockUser(e), t.props.onBlock && t.props.onBlock(t.props.threadID)
                    }, t.unblockUser = function() {
                        var e = l.__assign({}, Object(y.a)({
                            targetUserID: t.props.userID
                        }), {
                            optimisticResponse: {
                                unblockUser: {
                                    __typename: "UnblockUserPayload",
                                    targetUser: {
                                        id: t.props.userID,
                                        __typename: "User"
                                    }
                                }
                            },
                            update: function(e) {
                                var n = e.readFragment({
                                    id: t.currentUserDataID,
                                    fragment: A
                                });
                                n && (n.blockedUsers = n.blockedUsers.filter(function(e) {
                                    return e.id !== t.props.userID
                                }), e.writeFragment({
                                    id: t.currentUserDataID,
                                    fragment: A,
                                    data: n
                                }))
                            }
                        });
                        t.props.unblockUser(e), t.props.onUnblock && t.props.onUnblock(t.props.threadID)
                    }, t
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.displayName || this.props.login,
                        t = this.props.isMuted ? Object(f.d)("Turn Notifications On", "ThreadSettings") : Object(f.d)("Turn Notifications Off", "ThreadSettings"),
                        n = Object(f.d)("Go to {displayName}'s Channel", {
                            displayName: e
                        }, "ThreadSettings");
                    return c.createElement(L.U, {
                        display: L.H.Flex,
                        flexDirection: L.J.Column,
                        margin: 1
                    }, c.createElement(L.S, {
                        ariaLabel: t,
                        onClick: this.toggleMutethread
                    }, c.createElement(L.U, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, t)), c.createElement(L._17, {
                        borderBottom: !0,
                        margin: {
                            y: 1,
                            left: .5
                        }
                    }), this.renderBlockButton(), this.renderReportHarassmentButton(), this.renderReportSpamButton(), c.createElement(L.S, {
                        linkTo: "/" + this.props.login,
                        onClick: this.onChannelRedirect,
                        ariaLabel: n
                    }, c.createElement(L.U, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, n)))
                }, t.prototype.renderBlockButton = function() {
                    var e, t, n = this.props.displayName || this.props.login;
                    return this.isBlocked ? (e = Object(f.d)("Unblock {displayName}...", {
                        displayName: n
                    }, "ThreadSettings"), t = this.unblockUser) : (e = Object(f.d)("Block {displayName}...", {
                        displayName: n
                    }, "ThreadSettings"), t = this.blockUser), c.createElement(L.S, {
                        "data-test-selector": "whispers-block-user-button",
                        ariaLabel: e,
                        onClick: t
                    }, c.createElement(L.U, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, e))
                }, Object.defineProperty(t.prototype, "isBlocked", {
                    get: function() {
                        var e = this;
                        return !(!this.props.currentUser.blockedUsers || !this.props.currentUser.blockedUsers.find(function(t) {
                            return t.id === e.props.userID
                        }))
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "currentUserDataID", {
                    get: function() {
                        return f.n.apollo.client.dataIdFromObject ? f.n.apollo.client.dataIdFromObject(this.props.currentUser) || "" : ""
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(c.Component),
            z = Object(x.compose)(Object(b.a)(W, {
                name: "setMuteThread"
            }), Object(b.a)(j, {
                name: "blockUser"
            }), Object(b.a)(H, {
                name: "unblockUser"
            }), Object(b.a)(B, {
                name: "reportWhisperThread"
            }))(q),
            $ = n(471),
            K = n(472),
            Q = n(50),
            Y = n(280),
            J = (n(473), "report-as-spam-button"),
            X = "mark-not-spam-button",
            Z = "dismiss-prompt-button",
            ee = "spam-prompt-pending-target",
            te = "spam-prompt-reported-target",
            ne = {
                displayName: "???",
                login: "???",
                displayBadges: [],
                id: ""
            },
            ie = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        potentialSpamResolution: "pending"
                    }, t.renderPotentialSpamPrompt = function() {
                        if (t.props.spamInfo && "low" !== t.props.spamInfo.likelihood && null === t.props.spamInfo.lastMarkedNotSpamAt) {
                            if ("pending" === t.state.potentialSpamResolution) return c.createElement(L.U, {
                                "data-a-target": ee,
                                className: "thread-header__potential-spam-prompt",
                                attachRight: !0,
                                attachLeft: !0,
                                attachTop: !0
                            }, c.createElement(L._17, {
                                background: L.m.Alt2,
                                padding: .5,
                                elevation: 2
                            }, c.createElement(L.U, {
                                display: L.H.InlineBlock,
                                margin: .5
                            }, c.createElement(L._21, {
                                type: L._26.Span,
                                fontSize: L.L.Size6,
                                color: L.F.Alt2
                            }, Object(f.d)("It looks like this conversation triggered our spam detector. If it is spam, please report it!", "ThreadHeader"))), c.createElement(L.U, {
                                display: L.H.InlineBlock,
                                margin: .5
                            }, c.createElement(L.u, {
                                "data-a-target": J,
                                type: L.z.Alert,
                                onClick: t.reportSpam,
                                size: L.x.Small
                            }, Object(f.d)("Report spam", "ThreadHeader"))), c.createElement(L.U, {
                                display: L.H.InlineBlock,
                                margin: .5
                            }, c.createElement(L.u, {
                                "data-a-target": X,
                                onClick: t.markNotSpam,
                                size: L.x.Small
                            }, Object(f.d)("This is not spam", "ThreadHeader")))));
                            if ("reported" === t.state.potentialSpamResolution && t.interlocutor.displayName) return c.createElement(L.U, {
                                "data-a-target": te,
                                className: "thread-header__potential-spam-prompt",
                                attachRight: !0,
                                attachLeft: !0,
                                attachTop: !0
                            }, c.createElement(L._17, {
                                background: L.m.Alt2,
                                padding: .5,
                                elevation: 2
                            }, c.createElement(L.U, {
                                display: L.H.InlineBlock,
                                margin: .5
                            }, c.createElement(L._21, {
                                type: L._26.Span,
                                fontSize: L.L.Size6,
                                color: L.F.Alt2
                            }, Object(f.d)("Thank you for helping us fight spam. We've blocked {user} from sending you further whispers. You can undo this from the Whisper Settings Menu.", {
                                user: t.interlocutor.displayName
                            }, "ThreadHeader"))), c.createElement(L.U, {
                                display: L.H.InlineBlock,
                                margin: .5
                            }, c.createElement(L.u, {
                                "data-a-target": Z,
                                type: L.z.Text,
                                onClick: t.dismissSpamPrompt,
                                size: L.x.Small
                            }, Object(f.d)("Dismiss", "ThreadHeader")))))
                        }
                        return null
                    }, t.reportSpam = function() {
                        t.props.reportUserMutation(t.interlocutor.id, O.c.Spam, t.props.threadID), t.props.blockUserMutation(t.interlocutor.id, O.b.Other, O.a.Whisper, t.props.participants.currentUser), t.props.setThreadSpamStatusMutation(t.props.threadID, !0), Object(Y.l)(t.interlocutor.login, Y.a.SpamPropmt), t.setState({
                            potentialSpamResolution: "reported"
                        })
                    }, t.markNotSpam = function() {
                        t.props.setThreadSpamStatusMutation(t.props.threadID, !1), Object(Y.o)(t.props.threadID), t.setState({
                            potentialSpamResolution: "dismissed"
                        })
                    }, t.dismissSpamPrompt = function() {
                        t.props.onBlock && t.props.onBlock(t.props.threadID), Object(Y.n)(t.props.threadID), t.setState({
                            potentialSpamResolution: "dismissed"
                        })
                    }, t.onSettingsClick = function(e) {
                        e.stopPropagation()
                    }, t.onPresenceClick = function(e, n) {
                        n.stopPropagation();
                        var i = t.props.participants.currentUser && t.props.participants.currentUser.friends.edges.find(function(e) {
                            return e.node.id === t.interlocutor.id
                        });
                        t.props.participants.user && i && i.activity ? Object(P.b)({
                            context: e,
                            friendActivity: i.activity,
                            friendLogin: t.props.participants.user.login
                        }) : f.i.warn("[ThreadHeader] Attempted to track presence click without required data.")
                    }, t
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = h({
                            "thread-header__title-bar-container": !0,
                            "thread-header__title-bar-container--highlighted": this.props.isHighlighted,
                            "thread-header__title-bar-container--focused": this.props.isFocused
                        }),
                        n = h({
                            "thread-header": !0,
                            "thread-header--collapsed": this.props.isCollapsed
                        }),
                        a = Object(f.d)("Close", "WhisperThreadHeader"),
                        r = Object(f.d)("Settings", "WhisperThreadHeader");
                    if (this.props.isLoading || !this.props.participants.currentUser || !this.props.participants.user) return c.createElement(L.U, {
                        className: t,
                        display: L.H.Flex,
                        justifyContent: L.T.Between,
                        fullWidth: !0,
                        alignItems: L.c.Center,
                        padding: {
                            y: .5,
                            x: 1
                        },
                        flexShrink: 0,
                        flexGrow: 0,
                        flexWrap: L.K.NoWrap
                    }, c.createElement(L._1, {
                        height: 20,
                        width: 80
                    }), c.createElement(L.U, {
                        display: L.H.Flex
                    }, c.createElement(L.v, {
                        ariaLabel: a,
                        icon: L._9.RemoveTag,
                        "data-a-target": "whispers-thread__close-button-" + this.props.threadID,
                        onClick: this.props.onClose
                    })));
                    var s = null,
                        o = null,
                        l = null,
                        d = null,
                        u = this.props.participants.currentUser && this.props.participants.currentUser.friends.edges.find(function(t) {
                            return t.node.id === e.interlocutor.id
                        });
                    if (u && (o = c.createElement(L.U, {
                            margin: {
                                left: 1
                            },
                            display: L.H.Flex,
                            alignItems: L.c.Center
                        }, c.createElement(L._3, {
                            status: i(u.availability)
                        })), u.activity)) {
                        var p = Object(U.c)(u.activity, !0),
                            m = null,
                            g = Object(U.d)(this.props.participants.user.login, u.activity);
                        if (g && (m = {
                                pathname: g,
                                state: {
                                    content: F.PageviewContent.Presence,
                                    medium: F.PageviewMedium.Whispers
                                }
                            }), m) {
                            var v = h({
                                "thread-header__activity-link--highlighted": this.props.isHighlighted
                            });
                            l = c.createElement(D.a, {
                                className: v,
                                title: Object(U.c)(u.activity) || "",
                                onClick: this.onPresenceClick.bind(this, P.a.WhisperHeaderLink),
                                to: m,
                                "data-test-selector": "whispers-thread__presence-link"
                            }, p)
                        } else l = p;
                        this.props.isCollapsed || (d = c.createElement(L.U, {
                            padding: {
                                right: .5
                            }
                        }, c.createElement(R.a, {
                            link: m,
                            onClick: this.onPresenceClick.bind(this, P.a.WhisperHeaderButton),
                            shouldHollowOverlay: this.props.isHighlighted
                        })))
                    }!this.props.isCollapsed && this.props.participants.currentUser && (s = c.createElement(w.a, null, c.createElement(L.v, {
                        ariaLabel: r,
                        icon: L._9.Gear,
                        overlay: this.props.isHighlighted
                    }), c.createElement(L.p, {
                        direction: L.q.BottomRight,
                        offsetX: "0.5rem"
                    }, c.createElement(z, {
                        login: this.interlocutor.login,
                        displayName: this.interlocutor.displayName,
                        currentUser: this.props.participants.currentUser,
                        userID: this.interlocutor.id,
                        isMuted: this.props.isMuted,
                        threadID: this.props.threadID,
                        collapseThread: this.props.collapse,
                        onBlock: this.props.onBlock,
                        onUnblock: this.props.onUnblock
                    }))));
                    var b = this.interlocutor.displayBadges.map(function(e) {
                        return c.createElement(L.P, {
                            key: e.id,
                            flexShrink: 0,
                            margin: {
                                right: .5
                            }
                        }, c.createElement("img", {
                            alt: e.title,
                            title: e.title,
                            className: "thread-header__badge",
                            src: e.imageURL
                        }))
                    });
                    return c.createElement(L.U, {
                        className: n,
                        position: L._2.Relative,
                        fullWidth: !0
                    }, c.createElement("div", {
                        className: "thread-header__click-area",
                        onClick: this.props.onHeaderClick,
                        "data-a-target": "thread-header__click-area"
                    }, c.createElement(L.U, {
                        className: t,
                        fullWidth: !0,
                        padding: {
                            x: 1,
                            y: .5
                        },
                        alignItems: L.c.Center,
                        flexGrow: 1,
                        display: L.H.Flex,
                        "data-a-target": "whisper-thread__title-bar-" + this.props.threadID,
                        "data-click-out-id": "thread-expand-close",
                        flexWrap: L.K.NoWrap
                    }, c.createElement(L.U, {
                        fullHeight: !0,
                        flexGrow: 1,
                        display: L.H.Flex,
                        flexDirection: L.J.Column
                    }, c.createElement(L.U, {
                        display: L.H.Flex,
                        flexGrow: 1,
                        alignItems: L.c.Center,
                        flexWrap: L.K.NoWrap,
                        padding: {
                            right: 1
                        }
                    }, b, c.createElement(L._21, {
                        color: this.props.isHighlighted ? L.F.Overlay : L.F.Base,
                        type: L._26.Span,
                        bold: !0,
                        ellipsis: !0
                    }, this.interlocutor.displayName), o), c.createElement(L._17, {
                        className: "thread-header__activity",
                        color: this.props.isHighlighted ? L.F.Overlay : L.F.Base,
                        padding: {
                            right: 1
                        },
                        overflow: L.Y.Hidden
                    }, l)), c.createElement(L.U, {
                        display: L.H.Flex,
                        flexShrink: 0,
                        flexDirection: L.J.Row,
                        alignItems: L.c.Center
                    }, d, c.createElement("div", {
                        onClick: this.onSettingsClick
                    }, s), c.createElement(L.v, {
                        ariaLabel: a,
                        icon: L._9.RemoveTag,
                        "data-a-target": "thread-header__close-button-" + this.props.threadID,
                        onClick: this.props.onClose,
                        overlay: this.props.isHighlighted
                    })))), this.renderPotentialSpamPrompt())
                }, Object.defineProperty(t.prototype, "interlocutor", {
                    get: function() {
                        return this.props.participants.user || ne
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(c.Component),
            ae = Object(p.compose)(Object(I.a)(), function() {
                var e = this;
                return Object(b.a)($, {
                    props: function(t) {
                        return {
                            reportUserMutation: function(n, i, a) {
                                return l.__awaiter(e, void 0, void 0, function() {
                                    var e;
                                    return l.__generator(this, function(r) {
                                        switch (r.label) {
                                            case 0:
                                                if (!t.mutate) return [3, 4];
                                                r.label = 1;
                                            case 1:
                                                return r.trys.push([1, 3, , 4]), [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            targetUserID: n,
                                                            reason: i,
                                                            threadID: a
                                                        }
                                                    }
                                                })];
                                            case 2:
                                                return r.sent(), [3, 4];
                                            case 3:
                                                return e = r.sent(), f.i.error(e, "Unable to report user"), [3, 4];
                                            case 4:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }(), function() {
                var e = this;
                return Object(b.a)(K, {
                    props: function(t) {
                        return {
                            setThreadSpamStatusMutation: function(n, i) {
                                return l.__awaiter(e, void 0, void 0, function() {
                                    var e;
                                    return l.__generator(this, function(a) {
                                        switch (a.label) {
                                            case 0:
                                                if (!t.mutate) return [3, 4];
                                                a.label = 1;
                                            case 1:
                                                return a.trys.push([1, 3, , 4]), [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            threadID: n,
                                                            isSpam: i
                                                        }
                                                    }
                                                })];
                                            case 2:
                                                return a.sent(), [3, 4];
                                            case 3:
                                                return e = a.sent(), f.i.error(e, "Unable to modify threads spam status user"), [3, 4];
                                            case 4:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }())(ie),
            re = n(146),
            se = n(28),
            oe = n(115);
        ! function(e) {
            e[e.Timestamp = 0] = "Timestamp", e[e.Whisper = 1] = "Whisper", e[e.Warning = 2] = "Warning", e[e.NewMessages = 3] = "NewMessages", e[e.Notification = 4] = "Notification"
        }(o || (o = {}));
        var le = (n(474), n(287)),
            ce = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.message;
                    switch (e.type) {
                        case o.Timestamp:
                            return c.createElement(L._17, {
                                className: "thread-message__timestamp",
                                color: L.F.Alt2,
                                fontSize: L.L.Size7
                            }, Object(le.d)(e));
                        case o.Warning:
                            return c.createElement(L._17, {
                                className: "thread-message__warning",
                                color: L.F.Alt2
                            }, Object(le.e)());
                        case o.Whisper:
                            return c.createElement(L.U, {
                                className: "thread-message__message"
                            }, Object(le.f)(e));
                        case o.NewMessages:
                            return c.createElement(L._17, {
                                className: "thread-message__new-messages",
                                color: L.F.OverlayAlt,
                                fontSize: L.L.Size7
                            }, Object(le.b)());
                        case o.Notification:
                            return c.createElement(L.U, {
                                className: "thread-message__notification"
                            }, Object(le.c)(e));
                        default:
                            return null
                    }
                }, t
            }(c.Component),
            de = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        disableInfiniteTrigger: !0
                    }, t.loadMore = function() {
                        var e = t.scroll.scrollContent.scrollHeight;
                        return t.setState({
                            prevScrollHeight: e
                        }), t.props.loadMore()
                    }, t.renderMessages = function(e) {
                        return e.map(function(e, n) {
                            return c.createElement(ce, {
                                message: e,
                                key: t.generateMessageKey(e, n.toString())
                            })
                        })
                    }, t.getMessages = function() {
                        var e = t.props.unreadMessagesCount;
                        return t.props.thread.messages.edges.map(function(e) {
                            return {
                                type: o.Whisper,
                                content: e.node.content.content,
                                from: t.props.participantsByID[+e.node.from.id],
                                emotes: e.node.content.emotes,
                                id: e.node.id,
                                sentAt: new Date(e.node.sentAt),
                                editedAt: e.node.editedAt,
                                deletedAt: e.node.deletedAt
                            }
                        }).reduce(function(n, i, a, r) {
                            if (t.notificationsFor(i).forEach(function(e) {
                                    n.push(e)
                                }), n.push(i), 0 == --e && n.push(t.createNewMessagesIndicator()), 0 === a);
                            else if (a < r.length - 1) {
                                var s = r[a + 1];
                                !i.deletedAt && t.shouldAddTimestamp(i, s) && n.push(t.createTimestampMessage(i))
                            }
                            return a === r.length - 1 && (i.deletedAt || n.push(t.createTimestampMessage(i)), n.push(t.createWarningMessage())), n
                        }, []).reverse()
                    }, t.shouldAddTimestamp = function(e, t) {
                        return e.sentAt.valueOf() - t.sentAt.valueOf() > 6e5
                    }, t.createTimestampMessage = function(e) {
                        return {
                            type: o.Timestamp,
                            timestamp: new Date(e.sentAt)
                        }
                    }, t.notificationsFor = function(e) {
                        return t.props.notifications.filter(function(t) {
                            return t.afterMessageID === e.id
                        }).map(t.createNotificationLine)
                    }, t.createNotificationLine = function(e) {
                        return {
                            type: o.Notification,
                            content: e.content
                        }
                    }, t.createNewMessagesIndicator = function() {
                        return {
                            type: o.NewMessages
                        }
                    }, t.createWarningMessage = function() {
                        return {
                            type: o.Warning
                        }
                    }, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.scrollToBottom = function() {
                        t.scroll.scrollContent.scrollTop = t.scroll.scrollContent.scrollHeight
                    }, t
                }
                return l.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.scrollToBottom(), this.setState({
                        disableInfiniteTrigger: !1
                    })
                }, t.prototype.componentWillReceiveProps = function(e) {
                    (this.props.thread.messages.edges.length > 0 || e.thread.messages.edges.length > 0) && (0 === this.props.thread.messages.edges.length && e.thread.messages.edges.length > 0 || this.props.thread.messages.edges[0].cursor !== e.thread.messages.edges[0].cursor) && this.setState({
                        prevScrollHeight: this.scroll.scrollContent.scrollHeight
                    })
                }, t.prototype.componentDidUpdate = function(e) {
                    if (this.props.thread.messages.edges.length > e.thread.messages.edges.length)
                        if (this.props.thread.messages.edges[0] && e.thread.messages.edges[0] && this.props.thread.messages.edges[0].cursor === e.thread.messages.edges[0].cursor && this.props.thread.messages.edges[0].node.id === e.thread.messages.edges[0].node.id) {
                            if (this.state.prevScrollHeight && this.state.prevScrollHeight !== this.scroll.scrollContent.scrollHeight) {
                                var t = this.scroll.scrollContent.scrollHeight - this.state.prevScrollHeight;
                                this.scroll.scrollContent.scrollTop = t
                            }
                        } else this.scrollToBottom();
                    this.props.notifications.length > e.notifications.length && this.scrollToBottom()
                }, t.prototype.render = function() {
                    var e = this.getMessages();
                    return c.createElement(L.U, {
                        fullHeight: !0
                    }, c.createElement(se.b, {
                        scrollRef: this.saveScrollRef,
                        suppressScrollX: !0
                    }, c.createElement(L.U, null, c.createElement(se.a, {
                        enabled: !this.state.disableInfiniteTrigger,
                        loadMore: this.loadMore,
                        pixelThreshold: 200,
                        orientation: oe.b.Down,
                        contentLength: e.length
                    }), this.renderMessages(e))))
                }, t.prototype.generateMessageKey = function(e, t) {
                    switch (e.type) {
                        case o.NewMessages:
                        case o.Warning:
                            return "" + e.type;
                        case o.Timestamp:
                            return e.type + "-" + e.timestamp.getTime();
                        case o.Whisper:
                            return e.type + "-" + e.id;
                        default:
                            return f.i.warn("[ThreadMessages] Encountered an unknown message type."), t
                    }
                }, t
            }(c.Component),
            ue = de,
            pe = Object(u.a)(a)(ue),
            me = n(288),
            he = n(443),
            fe = n(55),
            ge = n(479),
            ve = (n(480), n(481)),
            be = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.refetchTimeout = 0, n.getEmotes = function() {
                        return Object.keys(n.props.emotes).map(function(e) {
                            return {
                                id: e,
                                emotes: Object(C.b)([n.props.emotes[e]])
                            }
                        })
                    }, n.onEmoticonClick = function(e) {
                        var t = n.autocompleteInput.getValue();
                        t && t.length > 0 && !t.endsWith(" ") && (t += " "), t += e + " ", n.autocompleteInput.setValue(t)
                    }, n.onBlock = function(e) {
                        n.addNotification(Object(f.d)("User successfully blocked", "whispers")), n.props.onBlock && n.props.onBlock(e)
                    }, n.onUnblock = function() {
                        n.addNotification(Object(f.d)("User successfully unblocked", "whispers"))
                    }, n.loadMore = function() {
                        return l.__awaiter(n, void 0, void 0, function() {
                            return l.__generator(this, function(e) {
                                return this.props.data.loading || this.props.data.error ? [2] : [2, this.props.loadMore()]
                            })
                        })
                    }, n.addNewThreadSendWhisper = function(e) {
                        var t = n.state.newThreadMessages;
                        t.unshift({
                            content: e,
                            id: Object(N.b)()
                        }), n.setState({
                            newThreadMessages: t
                        })
                    }, n.addNotification = function(e) {
                        n.props.notifyWhisperThread(n.props.threadID, e, n.getLastMessageID())
                    }, n.getLastMessageID = function() {
                        if (n.props.data.whisperThread && n.props.data.whisperThread.messages.edges[0]) return n.props.data.whisperThread.messages.edges[0].node.id
                    }, n.getPlaceholderThreadFromLocalState = function() {
                        return r(n.state.newThreadMessages, n.props.currentUserID)
                    }, n.handleHeaderClick = function() {
                        n.props.collapsed ? n.expand() : n.collapse()
                    }, n.expand = function() {
                        n.props.participants.currentUser && Object(M.h)(n.props.threadID), n.props.onExpand(n.props.threadID)
                    }, n.onClickOut = function() {
                        n.props.focused && n.props.onUnfocus(n.props.threadID)
                    }, n.handleClose = function() {
                        n.props.participants.currentUser && Object(M.c)(n.props.threadID), n.props.onClose(n.props.threadID)
                    }, n.collapse = function() {
                        n.props.participants.currentUser && Object(M.d)(n.props.threadID), n.props.onCollapse(n.props.threadID)
                    }, n.handleKeydown = function(e) {
                        if ((e.charCode || e.keyCode) === S.a.Enter) {
                            var t = n.autocompleteInput.getValue();
                            n.autocompleteInput.setValue(""), n.sendWhisper(t)
                        }
                    }, n.handleClick = function() {
                        n.props.onFocus(n.props.threadID), n.markThreadMessagesAsRead()
                    }, n.markThreadMessagesAsRead = function() {
                        n.props.data.loading || n.props.data.error || n.props.data.whisperThread && 0 === n.props.data.whisperThread.unreadMessagesCount || Object(me.a)({
                            threadID: n.props.threadID,
                            lastReadMessageID: n.props.data.whisperThread && n.props.data.whisperThread.messages.edges[0].node.id || ""
                        })
                    }, n.sendWhisper = function(e) {
                        if ("" !== e) {
                            n.props.data.error && n.addNewThreadSendWhisper(e);
                            var t = Object(fe.b)(n.props.threadID, n.props.currentUserID);
                            if (!t) return void f.i.warn("Unable to parse whisper recipient ID.");
                            n.props.participants.currentUser && n.props.participants.user && Object(M.m)({
                                threadID: n.props.threadID,
                                targetUserLogin: n.props.participants.user.login
                            }), Object(he.a)({
                                currentUserID: n.props.currentUserID,
                                emotes: n.props.emotes,
                                message: e,
                                recipientUserID: t
                            }).catch(function() {
                                var e = Object(f.d)("Your whisper was not delivered.", "Thread"),
                                    t = n.props.data.whisperThread && n.props.data.whisperThread.messages.edges[0].node.id;
                                n.props.notifyWhisperThread(n.props.threadID, e, t)
                            })
                        }
                    }, n.setAutocompleteInnerComponentRef = function(e) {
                        n.textInput = e
                    }, n.setAutocompleteInputRef = function(e) {
                        return n.autocompleteInput = e
                    }, n.handleContentClick = function() {
                        document.getSelection().toString() || n.textInput.focus()
                    }, n.state = {
                        newThreadMessages: []
                    }, n
                }
                return l.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t = this;
                    if (e.data.error || e.data.loading || !e.data.whisperThread || this.props.reportThreadData(e.threadID, e.data.whisperThread), this.props.data.error) {
                        var n = !1;
                        this.props.pubsub.messages.whisperReceived !== e.pubsub.messages.whisperReceived && e.pubsub.messages.whisperReceived && e.pubsub.messages.whisperReceived.data_object.thread_id === this.props.threadID && (n = !0), this.props.pubsub.messages.whisperSent !== e.pubsub.messages.whisperSent && e.pubsub.messages.whisperSent && e.pubsub.messages.whisperSent.data_object.thread_id === this.props.threadID && (n = !0), n && (clearTimeout(this.refetchTimeout), this.refetchTimeout = setTimeout(function() {
                            t.props.data.refetch()
                        }, 200))
                    }
                }, t.prototype.componentDidUpdate = function(e) {
                    e.data.whisperThread && this.props.data.whisperThread && (this.props.data.whisperThread.messages.edges.length, e.data.whisperThread.messages.edges.length)
                }, t.prototype.render = function() {
                    var e = h({
                        "whispers-thread": !0,
                        "whispers-thread--collapsed": this.props.collapsed,
                        "whispers-thread--focused": this.props.focused
                    });
                    return this.props.hidden ? null : c.createElement(g.a, {
                        onClickOut: this.onClickOut
                    }, c.createElement(L._17, {
                        className: e,
                        display: L.H.Flex,
                        flexShrink: 0,
                        flexGrow: 0,
                        position: L._2.Relative,
                        background: L.m.Base,
                        margin: {
                            left: 1
                        },
                        alignItems: L.c.Center,
                        justifyContent: L.T.Center,
                        "data-a-target": "whisper-thread-" + this.props.threadID + (this.props.collapsed ? "-collapsed" : ""),
                        elevation: 3
                    }, c.createElement(L.U, {
                        className: "whisper-thread__input",
                        position: L._2.Absolute,
                        fullWidth: !0,
                        padding: {
                            x: 1,
                            bottom: 1
                        },
                        attachBottom: !0
                    }, c.createElement(E.b, {
                        componentType: E.a.Input,
                        suggestionSource: E.c.Whisper,
                        iconRight: !0,
                        onFocus: this.handleClick,
                        onClick: this.handleClick,
                        onKeyDown: this.handleKeydown,
                        componentRefDelegate: this.setAutocompleteInnerComponentRef,
                        refDelegate: this.setAutocompleteInputRef
                    }, c.createElement(E.d, {
                        emotes: this.getEmotes()
                    })), c.createElement(T.a, {
                        attachBottom: !0,
                        attachRight: !0,
                        inputRef: this.textInput,
                        onClickEmote: this.onEmoticonClick,
                        padding: {
                            x: 1,
                            bottom: 1
                        },
                        position: L._2.Absolute,
                        shouldCloseOnClickOut: !0
                    })), c.createElement(L.P, {
                        fullWidth: !0
                    }, c.createElement("div", {
                        className: "whispers-thread__content",
                        onClick: this.handleContentClick
                    }, this.renderContent())), c.createElement(L.U, {
                        position: L._2.Absolute,
                        fullWidth: !0,
                        flexShrink: 0,
                        display: L.H.Flex,
                        alignItems: L.c.Center,
                        attachTop: !0
                    }, c.createElement(ae, {
                        isHighlighted: !!(this.props.data.whisperThread && this.props.data.whisperThread.unreadMessagesCount > 0),
                        isFocused: !!this.props.focused,
                        isMuted: !!this.props.data.whisperThread && this.props.data.whisperThread.isMuted,
                        isCollapsed: this.props.collapsed,
                        isLoading: this.props.data.loading || this.props.participants.loading || !this.props.participants.user || !this.props.participants.currentUser,
                        participants: this.props.participants,
                        spamInfo: this.props.data.whisperThread && this.props.data.whisperThread.spamInfo,
                        threadID: this.props.threadID,
                        collapse: this.collapse,
                        onHeaderClick: this.handleHeaderClick,
                        onBlock: this.onBlock,
                        onUnblock: this.onUnblock,
                        onClose: this.handleClose
                    }))))
                }, t.prototype.renderContent = function() {
                    var e;
                    return this.props.data.error ? (e = c.createElement(v.a, {
                        message: Object(f.d)("Sorry, something went wrong loading this conversation.", "WhisperThread")
                    }), e = c.createElement(L.U, null), this.props.participants.currentUser && this.props.participants.user && (e = c.createElement(pe, {
                        thread: this.getPlaceholderThreadFromLocalState(),
                        unreadMessagesCount: 0,
                        participantsByID: this.getUsersByID([this.props.participants.currentUser, this.props.participants.user]),
                        loadMore: this.loadMore
                    }))) : e = this.props.data.loading || this.props.participants.loading || !this.props.data.whisperThread ? c.createElement(L.U, {
                        display: L.H.Flex,
                        justifyContent: L.T.Center,
                        alignItems: L.c.Center,
                        margin: 2,
                        fullHeight: !0,
                        flexGrow: 1
                    }, c.createElement(L.X, null)) : c.createElement(pe, {
                        thread: this.props.data.whisperThread,
                        participantsByID: this.getUsersByID(this.props.data.whisperThread.participants),
                        unreadMessagesCount: this.props.data.whisperThread.unreadMessagesCount,
                        loadMore: this.loadMore
                    }), e
                }, t.prototype.getUsersByID = function(e) {
                    for (var t = {}, n = 0, i = e; n < i.length; n++) {
                        var a = i[n];
                        t[a.id] = a
                    }
                    return t
                }, t = l.__decorate([Object(b.a)(ge, {
                    options: function(e) {
                        return {
                            variables: {
                                targetUserID: Object(fe.b)(e.threadID, e.currentUserID) || ""
                            },
                            skip: !e.currentUserID || !e.threadID
                        }
                    },
                    name: "participants"
                }), Object(b.a)(ve, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.threadID
                            }
                        }
                    },
                    props: function(e) {
                        return l.__assign({}, e, {
                            loadMore: function() {
                                return e.data.fetchMore({
                                    query: ve,
                                    variables: l.__assign({}, e.data.variables, {
                                        cursor: e.data.whisperThread && e.data.whisperThread.messages.edges[e.data.whisperThread.messages.edges.length - 1].cursor
                                    }),
                                    updateQuery: function(e, t) {
                                        var n = t.fetchMoreResult,
                                            i = n;
                                        if (!i.whisperThread) return {
                                            whisperThread: null
                                        };
                                        if (!e.whisperThread) return {
                                            whisperThread: i.whisperThread
                                        };
                                        var a = l.__assign({}, i.whisperThread.messages, {
                                            edges: Object(y.b)(e.whisperThread.messages.edges, i.whisperThread.messages.edges)
                                        });
                                        return {
                                            whisperThread: l.__assign({}, i.whisperThread, {
                                                messages: a
                                            })
                                        }
                                    }
                                })
                            }
                        })
                    }
                }), Object(k.a)([{
                    topic: function(e) {
                        return Object(_.p)(e.currentUserID)
                    },
                    mapMessageTypesToProps: {
                        whisper_received: "whisperReceived",
                        whisper_sent: "whisperSent"
                    }
                }])], t)
            }(c.Component),
            ke = be,
            Se = Object(u.a)(null, s)(ke);
        n(482);
        n.d(t, "b", function() {
            return ye
        }), n.d(t, "a", function() {
            return _e
        });
        var ye, _e = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.resizeAnimationHandle = null, t.renderThread = function(e) {
                    return e ? c.createElement(Se, {
                        key: e.threadID,
                        currentUserID: t.props.currentUserID,
                        collapsed: e.collapsed,
                        hidden: e.hidden,
                        threadID: e.threadID,
                        onBlock: t.onBlock,
                        onCollapse: t.props.onCollapseThread,
                        emotes: t.props.emotes,
                        onClose: t.props.onCloseThread,
                        onExpand: t.props.onExpandThread,
                        onFocus: t.props.onFocusThread,
                        onUnfocus: t.props.onUnfocusThread,
                        focused: t.props.focusedThreadID === e.threadID,
                        reportThreadData: t.props.reportThreadData
                    }) : null
                }, t.onBlock = function(e) {
                    t.props.archiveThread(e), t.props.onBlockThread(e)
                }, t.setOpenThreadsRef = function(e) {
                    return ye = e
                }, t.handleContentResize = function() {
                    t.resizeAnimationHandle || (t.resizeAnimationHandle = requestAnimationFrame(function() {
                        t.props.onResizeContent(), t.resizeAnimationHandle = null
                    }))
                }, t
            }
            return l.__extends(t, e), t.prototype.render = function() {
                var e = this,
                    t = this.props.openedThreads.map(function(t) {
                        return e.renderThread(t)
                    });
                return c.createElement(L.U, {
                    className: "whispers-open-threads",
                    display: L.H.Flex,
                    flexDirection: L.J.RowReverse,
                    alignItems: L.c.End,
                    position: L._2.Absolute,
                    attachBottom: !0,
                    attachLeft: !0,
                    refDelegate: this.setOpenThreadsRef
                }, t, c.createElement(d.a, {
                    onResize: this.handleContentResize
                }))
            }, t
        }(c.Component)
    },
    285: function(e, t, n) {
        "use strict";

        function i(e) {
            return r.__awaiter(this, void 0, void 0, function() {
                var t, n, i, a, p, m, h, f;
                return r.__generator(this, function(r) {
                    switch (r.label) {
                        case 0:
                            return (t = e.friendActivity) ? (n = Object(c.d)(e.friendLogin, t)) ? (i = "/" === n[0] ? n.slice(1) : n, t.type !== o.a.Streaming ? [3, 1] : (a = {
                                target_action: u.Streaming,
                                target_channel: e.friendLogin,
                                target_game: t.stream.game && t.stream.game.name || void 0,
                                target_login: e.friendLogin,
                                target_url: i,
                                ui_context: e.context
                            }, [3, 7])) : (s.i.warn("[trackPresenceClick] Attempted to track a click on an unjoinable activity."), [2]) : (s.i.warn("[trackPresenceClick] Attempted to track a click with no activity."), [2]);
                        case 1:
                            if (t.type !== o.a.Watching) return [3, 6];
                            p = void 0, m = null, r.label = 2;
                        case 2:
                            return r.trys.push([2, 4, , 5]), [4, s.n.apollo.client.query({
                                query: d,
                                variables: {
                                    login: t.user.login
                                }
                            })];
                        case 3:
                            return m = r.sent(), [3, 5];
                        case 4:
                            return h = r.sent(), s.i.error(h, "[trackPresenceClick] Failed to query watched user data.", {
                                watchedUser: t.user.login
                            }), [3, 5];
                        case 5:
                            return f = m && m.data && m.data.user, f ? p = f.hosting.stream ? f.hosting.stream.game && f.hosting.stream.game.name || void 0 : f.stream && f.stream.game && f.stream.game.name || void 0 : s.i.error(new Error("GraphQL empty response"), "[trackPresenceClick] Query for watched user info returned no data.", {
                                watchedUser: t.user.login
                            }), a = {
                                target_action: u.Watching,
                                target_channel: t.user.login,
                                target_game: p,
                                target_hosted_channel: t.user.hosting && t.user.hosting.login || void 0,
                                target_login: e.friendLogin,
                                target_url: i,
                                ui_context: e.context
                            }, [3, 7];
                        case 6:
                            return s.i.warn("[trackPresenceClick] Attempted to track a click on an unjoinable activity."), [2];
                        case 7:
                            return s.m.track(l.SpadeEventType.PresenceClick, a), [2]
                    }
                })
            })
        }
        n.d(t, "a", function() {
            return a
        }), t.b = i;
        var a, r = n(0),
            s = n(2),
            o = n(110),
            l = n(13),
            c = n(71),
            d = n(465);
        n.n(d);
        ! function(e) {
            e.FriendsListButton = "friends", e.WhisperHeaderButton = "convo_join", e.WhisperHeaderLink = "convo_link"
        }(a || (a = {}));
        var u;
        ! function(e) {
            e.Streaming = "streaming", e.Watching = "watching"
        }(u || (u = {}))
    },
    286: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(1),
            r = n(2),
            s = n(3),
            o = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onHistoryChange = function(e) {
                        n.setState({
                            currentPathname: e.pathname
                        })
                    }, n.shouldShow = function() {
                        return n.props.link && n.state.currentPathname !== n.props.link.pathname
                    }, n.state = {
                        currentPathname: location.pathname
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.historyUnlisten = r.n.history.listen(this.onHistoryChange)
                }, t.prototype.componentWillUnmount = function() {
                    this.historyUnlisten()
                }, t.prototype.render = function() {
                    return this.props.link && this.shouldShow() ? a.createElement(s.u, {
                        linkTo: this.props.link,
                        onClick: this.props.onClick,
                        overlay: this.props.shouldHollowOverlay,
                        size: s.x.Small,
                        tabIndex: -1,
                        type: this.props.shouldHollowOverlay ? s.z.Hollow : s.z.Default
                    }, Object(r.d)("Join", "JoinButton")) : null
                }, t
            }(a.Component);
        n.d(t, "a", function() {
            return o
        })
    },
    287: function(e, t, n) {
        "use strict";

        function i(e) {
            var t = e.split(/\s+/),
                n = [];
            return t.forEach(function(e, i) {
                var a = /([^\w@#%\-+=:~])?(?:(https?:\/\/)?(?:[\w@#%\-+=:~]+\.)+[a-z]{2,6}(?:\/[\w.\/@#%&()\-+=:?~]*)?)([^\w.\/@#%&()\-+=:?~]|\s|$)/g,
                    r = a.exec(e);
                if (r) {
                    var o = r.index,
                        l = !1,
                        c = !1,
                        d = r[1];
                    d && (o += 1, /\s/.test(d) || (l = !0)), 0 !== o && n.push({
                        type: s.Text,
                        content: (c ? " " : "") + e.slice(0, o) + (l ? " " : "")
                    }), c = !1;
                    var u = a.lastIndex,
                        p = r[3];
                    p && (u -= 1, /\s/.test(p) || (c = !0));
                    var m = e.slice(o, u);
                    if (m.indexOf("@") > -1 && (-1 === m.indexOf("/") || m.indexOf("@") < m.indexOf("/"))) n.push({
                        type: s.Link,
                        content: {
                            displayText: m,
                            url: "mailto:" + m,
                            shouldOpenInNewTab: !1
                        }
                    });
                    else {
                        var h = r[2],
                            f = (h ? "" : "https://") + e.slice(o, u);
                        n.push({
                            type: s.Link,
                            content: {
                                displayText: e.slice(o, u),
                                shouldOpenInNewTab: !0,
                                url: f
                            }
                        })
                    }
                    var g = e.slice(u),
                        v = "";
                    i < t.length - 1 && (v = " "), g && n.push({
                        type: s.Text,
                        content: (c ? " " : "") + g + v
                    })
                } else {
                    var b = n.length && n[n.length - 1],
                        v = "";
                    if (i < t.length - 1 && (v = " "), b && b.type === s.Text) b.content += e + v;
                    else {
                        var k = "";
                        i && (k = " "), n.push({
                            type: s.Text,
                            content: k + e + v
                        })
                    }
                }
            }), n
        }

        function a(e) {
            var t = i(e);
            return t.reduce(function(e, n, i) {
                if (n.type === s.Text) e.push(n.content);
                else if (n.type === s.Link) {
                    var a = t[i - 1] && t[i - 1].type === s.Link;
                    a && e.push(" "), e.push(o.createElement("a", {
                        key: i,
                        href: n.content.url,
                        target: "__blank"
                    }, n.content.displayText))
                }
                return e
            }, [])
        }

        function r(e, t, n) {
            var i = [],
                r = 0,
                s = Object(d.d)(e);
            if (t.forEach(function(t) {
                    var n = t.from,
                        l = t.to,
                        p = {
                            themed: !1,
                            sources: {
                                "1x": Object(d.e)("" + t.emoteID, 1),
                                "2x": Object(d.e)("" + t.emoteID, 2),
                                "4x": Object(d.e)("" + t.emoteID, 4)
                            }
                        };
                    if (n > r) {
                        var m = s ? s.slice(r, n).join("") : e.slice(r, n);
                        i.push(o.createElement("span", {
                            key: "str-" + r,
                            className: "thread-message__message--part"
                        }, a(m)))
                    }
                    var h = s ? s.slice(n, l + 1).join("") : e.slice(n, l + 1);
                    i.push(o.createElement(c.a, {
                        key: "emote-" + r,
                        tooltipDirection: u._32.Top,
                        className: "thread-message__message--emote",
                        srcSet: p,
                        srcKey: "1x",
                        alt: h
                    })), r = l + 1
                }), r < e.length) {
                var p = s ? s.slice(r, s.length).join("") : e.slice(r, e.length);
                i.push(o.createElement("span", {
                    key: "str-" + r,
                    className: "thread-message__message--part"
                }, a(p)))
            }
            if (n) {
                var m = Object(l.d)("edited", "ThreadMessage"),
                    h = Object(l.d)("{timestamp, date, full} {timestamp, time, long}", {
                        timestamp: new Date(n)
                    }, "ThreadMessage");
                i.push(o.createElement(u.P, {
                    key: "editedAt",
                    margin: {
                        left: 1
                    }
                }, o.createElement(u._21, {
                    type: u._26.Span,
                    className: "thread-message__message--edited",
                    title: h,
                    color: u.F.Alt2
                }, "(" + m + ")")))
            }
            return i
        }
        var s, o = n(1),
            l = n(2),
            c = n(388),
            d = n(131);
        ! function(e) {
            e[e.Text = 0] = "Text", e[e.Link = 1] = "Link"
        }(s || (s = {}));
        var u = n(3);
        t.a = r, n.d(t, "f", function() {
            return p
        }), n.d(t, "e", function() {
            return m
        }), n.d(t, "d", function() {
            return h
        }), n.d(t, "c", function() {
            return f
        }), n.d(t, "b", function() {
            return g
        });
        var p = function(e) {
                var t = r(e.content, e.emotes, e.editedAt);
                if (e.deletedAt) return null;
                var n = e.from && e.from.chatColor || "",
                    i = e.from && e.from.displayName || o.createElement(u._21, {
                        type: u._26.Span,
                        italic: !0
                    }, Object(l.d)("Unknown", "ThreadMessage"));
                return o.createElement(u.U, {
                    padding: {
                        x: 1,
                        y: .5
                    }
                }, o.createElement("span", {
                    className: "thread-message__message--user-name",
                    style: {
                        color: n
                    }
                }, i), o.createElement("span", null, ": "), t)
            },
            m = function() {
                return o.createElement(u.U, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, Object(l.d)("Please don't share passwords or personal information.", "whispers"))
            },
            h = function(e) {
                var t = new Date,
                    n = Object(l.d)("Today, {timestamp, time, medium}", {
                        timestamp: e.timestamp
                    }, "ThreadMessage"),
                    i = Object(l.d)("{timestamp, time, medium}", {
                        timestamp: e.timestamp
                    }, "ThreadMessage"),
                    a = e.timestamp.toDateString() === t.toDateString() ? n : i;
                return o.createElement(u.U, {
                    padding: {
                        y: 1
                    },
                    textAlign: u._22.Center
                }, "" + a)
            },
            f = function(e) {
                return o.createElement(u.U, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, o.createElement(u._21, {
                    type: u._26.Span,
                    color: u.F.Alt2
                }, e.content))
            },
            g = function() {
                return o.createElement(u.U, {
                    textAlign: u._22.Center,
                    padding: {
                        y: .5
                    }
                }, Object(l.d)("New Whispers", "whispers"))
            }
    },
    288: function(e, t, n) {
        "use strict";

        function i(e) {
            var t = a.__assign({
                mutation: o
            }, Object(s.a)({
                threadID: e.threadID,
                lastReadMessageID: e.lastReadMessageID
            }), {
                optimisticResponse: {
                    updateWhisperThread: {
                        thread: {
                            __typename: "WhisperThread",
                            id: e.threadID,
                            unreadMessagesCount: 0
                        },
                        __typename: "UpdateWhisperThreadPayload"
                    }
                }
            });
            r.n.apollo.client.mutate(t)
        }
        t.a = i;
        var a = n(0),
            r = n(2),
            s = n(20),
            o = n(476);
        n.n(o)
    },
    289: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                id: "" + e.id,
                start: e.start,
                end: e.end
            }
        }

        function a(e) {
            return {
                __typename: "WhisperMessageEdge",
                cursor: "" + e.data_object.id,
                node: {
                    __typename: "WhisperMessage",
                    id: e.data_object.message_id,
                    sentAt: new Date(1e3 * e.data_object.sent_ts).toISOString(),
                    editedAt: null,
                    deletedAt: null,
                    content: {
                        __typename: "MessageBody",
                        content: e.data_object.body,
                        emotes: e.data_object.tags.emotes.map(function(e) {
                            return s(i(e))
                        })
                    },
                    from: {
                        __typename: "User",
                        id: "" + e.data_object.from_id
                    }
                }
            }
        }

        function r(e) {
            return e.map(function(e) {
                return s(i(e))
            })
        }

        function s(e) {
            return {
                from: e.start,
                to: e.end,
                emoteID: e.id,
                id: e.id + ";" + e.start + ";" + e.end,
                setID: "0",
                __typename: "EmbeddedEmote"
            }
        }
        t.c = a, t.b = r, t.a = s
    },
    290: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                isExpanded: e.ui.rightColumnExpanded,
                theatreModeEnabled: e.ui.theatreModeEnabled,
                sideNavExpanded: e.ui.sideNavExpanded
            }
        }

        function a(e) {
            return {
                collapse: function() {
                    return e(s.i())
                },
                expand: function() {
                    return e(s.m())
                }
            }
        }
        var r = n(6),
            s = n(58),
            o = n(143),
            l = Object(r.a)(i, a)(o.c);
        n.d(t, "b", function() {
            return l
        }), n.d(t, "a", function() {
            return o.a
        })
    },
    292: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return o
        }), n.d(t, "c", function() {
            return l
        });
        var i, a = n(0),
            r = n(2),
            s = n(13);
        ! function(e) {
            e.Chat = "chat", e.SocialColumn = "socialcolumn"
        }(i || (i = {}));
        var o;
        ! function(e) {
            e.Close = "close", e.Open = "open"
        }(o || (o = {}));
        var l = function(e) {
            var t = a.__assign({
                action_type: "click"
            }, e);
            r.m.track(s.SpadeEventType.SiteLayoutMod, t)
        }
    },
    293: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = {
            resource: {
                isSocialColumnClosedByUserAction: !1,
                isRightColumnClosedByUserAction: !1
            },
            time: Date.now()
        }
    },
    294: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "OnlineFriends"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "friends"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "activity"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "type"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Playing"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "game"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Streaming"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "stream"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "game"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }, {
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "name"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Watching"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "user"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "displayName"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "login"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "hosting"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }, {
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "displayName"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }, {
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "login"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "availability"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "displayName"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "login"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "profileImageURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "70"
                                                            }
                                                        }],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "hosting"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 841
            }
        };
        n.loc.source = {
            body: "query OnlineFriends {\n  currentUser {\n    id\n    friends {\n      edges {\n        activity {\n          type\n          ... on Playing {\n            game {\n              id\n              name\n            }\n          }\n          ... on Streaming {\n            stream {\n              id\n              game {\n                id\n                name\n              }\n            }\n          }\n          ... on Watching {\n            user {\n              id\n              displayName\n              login\n              hosting {\n                id\n                displayName\n                login\n              }\n            }\n          }\n        }\n        availability\n        node {\n          id\n          displayName\n          login\n          profileImageURL(width: 70)\n          hosting {\n            id\n          }\n        }\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    295: function(e, t, n) {
        "use strict";

        function i(e) {
            return !e.isLoggedIn && e.location.pathname === a
        }
        t.a = i;
        var a = "/"
    },
    30: function(e, t, n) {
        "use strict";

        function i(e) {
            return S.d.ImageUpload + "." + e
        }

        function a(e) {
            return S.d.UploadService + "." + e
        }

        function r(e) {
            return S.d.VideoPlaybackById + "." + e
        }

        function s(e) {
            return S.d.Presence + "." + e
        }

        function o(e, t) {
            return S.d.ModerationActionsByUserAndChannel + "." + e + "." + t
        }

        function l(e) {
            return S.d.Raid + "." + e
        }

        function c(e) {
            return S.d.Friendship + "." + e
        }

        function d(e) {
            return S.d.ChannelBitsPinEvents + "." + e
        }

        function u(e) {
            return S.d.UserSubscribeEvents + "." + e
        }

        function p(e) {
            return S.d.UserCrateEvents + "." + e
        }

        function m(e) {
            return S.d.UserCommerceEvents + "." + e
        }

        function h(e) {
            return S.d.Whispers + "." + e
        }

        function f(e) {
            return S.d.OnsiteNotifications + "." + e
        }

        function g(e) {
            return S.d.StreamChatRoom + "." + e
        }

        function v(e) {
            return k.j.subscribe({
                topic: e.topic,
                onMessage: function(t) {
                    t.type && !e.type && !e.types || t.type && e.type && t.type !== e.type || t.type && e.types && !e.types.includes(t.type) || Object(y.d)(e.query, e.variables, function(n) {
                        return e.mutator(t, n)
                    }, function(n) {
                        return !!e.skipMessage && e.skipMessage(t, n)
                    })
                }
            })
        }

        function b(e) {
            return k.j.subscribe({
                topic: e.topic,
                onMessage: function(t) {
                    t.type && t.type !== e.type || Object(y.c)({
                        fragment: e.fragment,
                        id: e.id,
                        mutator: function(n) {
                            return e.mutator(t, n)
                        }
                    })
                }
            })
        }
        t.c = i, t.k = a, t.o = r, t.f = s, t.d = o, t.g = l, t.b = c, t.a = d, t.n = u, t.m = p, t.l = m, t.p = h, t.e = f, t.h = g, t.j = v, t.i = b;
        var k = n(2),
            S = n(38),
            y = n(20)
    },
    374: function(e, t, n) {
        "use strict";

        function i(e, t) {
            var n = [],
                i = t.indexedActions,
                l = new RegExp("^(" + Object.keys(i).join("|") + ")(\\d+)$", "i"),
                c = e.split(/\s+/);
            return c.forEach(function(e, t) {
                var d = l.exec(e);
                if (d) {
                    var u = d[1].toLowerCase(),
                        p = +d[2],
                        m = i[u];
                    if (m || u !== r.f || (m = Object(s.b)()), m) {
                        var h = m.orderedTiers.find(function(e) {
                            return e.bits <= p
                        });
                        !h && p && (h = m.orderedTiers[0]), h && n.push({
                            type: o.a.Emote,
                            content: {
                                images: a(h),
                                alt: m.prefix,
                                cheerAmount: p,
                                cheerColor: h.color
                            }
                        })
                    }
                } else {
                    var f = n.length && n[n.length - 1],
                        g = "";
                    if (t < c.length - 1 && (g = " "), f && f.type === o.a.Text) f.content += e + g;
                    else {
                        var v = "";
                        t && (v = " "), n.push({
                            type: o.a.Text,
                            content: v + e + g
                        })
                    }
                }
            }), n
        }

        function a(e, t, n) {
            void 0 === n && (n = !0);
            var i = n ? "animated" : "static";
            return t ? {
                themed: !0,
                dark: (a = {}, a[t + "x"] = e.indexedImages.DARK[i].get(t), a),
                light: (r = {}, r[t + "x"] = e.indexedImages.LIGHT[i].get(t), r)
            } : {
                themed: !0,
                dark: {
                    "1x": e.indexedImages.DARK[i].get(1),
                    "1.5x": e.indexedImages.DARK[i].get(1.5),
                    "2x": e.indexedImages.DARK[i].get(2),
                    "3x": e.indexedImages.DARK[i].get(3),
                    "4x": e.indexedImages.DARK[i].get(4)
                },
                light: {
                    "1x": e.indexedImages.LIGHT[i].get(1),
                    "1.5x": e.indexedImages.LIGHT[i].get(1.5),
                    "2x": e.indexedImages.LIGHT[i].get(2),
                    "3x": e.indexedImages.LIGHT[i].get(3),
                    "4x": e.indexedImages.LIGHT[i].get(4)
                }
            };
            var a, r
        }
        n.d(t, "a", function() {
            return l
        }), t.c = i, t.b = a;
        var r = n(260),
            s = n(376),
            o = n(261),
            l = {
                indexedActions: {},
                orderedActions: []
            }
    },
    375: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                darkModeEnabled: Object(l.a)(e) === o.a.Dark
            }
        }
        var a = n(0),
            r = n(1),
            s = n(6),
            o = n(31),
            l = n(51),
            c = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this.props,
                        t = (e.defaultRes, e.sources),
                        n = (e.darkModeEnabled, a.__rest(e, ["defaultRes", "sources", "darkModeEnabled"])),
                        i = this.props.darkModeEnabled ? t.dark : t.light,
                        s = Object.keys(i);
                    delete n.dispatch;
                    var o = a.__assign({}, n, {
                        src: i[this.props.defaultRes || s[0]],
                        srcSet: s.map(function(e) {
                            return i[e] + " " + e
                        }).join(",")
                    });
                    return r.createElement("img", a.__assign({}, o, {
                        onLoad: this.props.onLoad
                    }))
                }, t
            }(r.Component),
            d = Object(s.a)(i)(c);
        n.d(t, "a", function() {
            return d
        })
    },
    376: function(e, t, n) {
        "use strict";

        function i() {
            if (!h) {
                var e = [],
                    t = {};
                Object.keys(u).forEach(function(n) {
                    var i = s(n, u[n]);
                    e.push(i), t[n.toLowerCase()] = i
                }), h = {
                    orderedActions: e,
                    indexedActions: t
                }
            }
            return h
        }

        function a() {
            return f || (f = r("Cheer")), f
        }

        function r(e) {
            return h ? h.indexedActions[e] : s(e, u[e])
        }

        function s(e, t) {
            var n = [c.a.Red, c.a.Blue, c.a.Green, c.a.Purple, c.a.Gray],
                i = new Map,
                a = n.map(function(t) {
                    var n = o(e, t);
                    return i.set(t, n), n
                });
            return {
                prefix: e,
                type: t,
                tiers: a,
                orderedTiers: a,
                indexedTiers: i
            }
        }

        function o(e, t) {
            for (var n = [], i = {}, a = 0, r = p; a < r.length; a++)
                for (var s = r[a], o = 0, c = m; o < c.length; o++) {
                    var u = c[o];
                    i[s] || (i[s] = {
                        animated: new Map,
                        static: new Map
                    });
                    var h = l(e, s, !0, t, u);
                    n.push(h), i[s].animated.set(u, h.url);
                    var f = l(e, s, !1, t, u);
                    n.push(f), i[s].static.set(u, f.url)
                }
            return {
                id: e + ";" + t,
                bits: t,
                color: d.e[t],
                images: n,
                indexedImages: i
            }
        }

        function l(e, t, n, i, a) {
            var r = n ? "gif" : "png";
            return {
                theme: t,
                isAnimated: n,
                dpiScale: a,
                url: "https://d3aqoihi2n8ty8.cloudfront.net/actions/" + e.toLowerCase() + "/" + t.toLowerCase() + "/" + (n ? "animated" : "static") + "/" + i + "/" + a + "." + r
            }
        }
        t.a = i, t.b = a;
        var c = n(265),
            d = n(260),
            u = {
                Cheer: d.c,
                Kreygasm: d.c,
                Kappa: d.c,
                Muxy: d.d,
                Streamlabs: d.d,
                SwiftRage: d.c,
                VoHiYo: d.c
            },
            p = ["LIGHT", "DARK"],
            m = [1, 1.5, 2, 3, 4],
            h = null,
            f = null
    },
    377: function(e, t, n) {
        "use strict";

        function i(e) {
            return e ? "/directory/" + e : "/directory"
        }

        function a(e) {
            return "/directory/game/" + encodeURIComponent(e)
        }

        function r(e) {
            return "/communities/" + encodeURIComponent(e)
        }

        function s(e) {
            return "/settings/" + encodeURIComponent(e)
        }

        function o(e) {
            return "/events/" + encodeURIComponent(e)
        }

        function l(e) {
            return c.b.get("premiere_video_manager_public", !1) ? "/" + encodeURIComponent(e) + "/manager" : "/" + encodeURIComponent(e) + "/manager_v2"
        }
        t.b = i, t.d = a, t.a = r, t.e = s, t.c = o, t.f = l;
        var c = n(2)
    },
    378: function(e, t, n) {
        "use strict";

        function i(e, t) {
            return {
                type: P,
                channel: e,
                messages: t
            }
        }

        function a() {
            return {
                type: N
            }
        }

        function r() {
            return {
                type: L
            }
        }

        function s() {
            return {
                type: A
            }
        }

        function o() {
            return {
                type: E
            }
        }

        function l() {
            return {
                type: _
            }
        }

        function c() {
            return {
                type: O
            }
        }

        function d() {
            return {
                type: F
            }
        }

        function u() {
            return {
                type: C
            }
        }

        function p(e, t) {
            return {
                type: I,
                channelLogin: e,
                duration: t
            }
        }

        function m(e) {
            return {
                type: w,
                duration: e
            }
        }

        function h() {
            return {
                type: D
            }
        }

        function f() {
            return {
                type: U
            }
        }

        function g() {
            return {
                type: R
            }
        }

        function v() {
            return {
                type: x
            }
        }

        function b() {
            return {
                type: M
            }
        }

        function k(e) {
            return {
                type: T,
                emoteSets: e
            }
        }

        function S(e, t) {
            return {
                type: j,
                command: e.toLowerCase(),
                handler: t
            }
        }

        function y(e) {
            return {
                type: B,
                command: e.toLowerCase()
            }
        }
        n.d(t, "b", function() {
            return _
        }), n.d(t, "c", function() {
            return N
        }), n.d(t, "d", function() {
            return E
        }), n.d(t, "e", function() {
            return T
        }), n.d(t, "i", function() {
            return C
        }), n.d(t, "f", function() {
            return D
        }), n.d(t, "g", function() {
            return w
        }), n.d(t, "h", function() {
            return I
        }), n.d(t, "j", function() {
            return P
        }), n.d(t, "l", function() {
            return O
        }), n.d(t, "k", function() {
            return F
        }), n.d(t, "o", function() {
            return U
        }), n.d(t, "n", function() {
            return R
        }), n.d(t, "q", function() {
            return x
        }), n.d(t, "p", function() {
            return M
        }), n.d(t, "s", function() {
            return L
        }), n.d(t, "r", function() {
            return A
        }), n.d(t, "a", function() {
            return j
        }), n.d(t, "m", function() {
            return B
        }), t.I = i, t.w = a, t.G = r, t.B = s, t.K = o, t.H = l, t.D = c, t.y = d, t.C = u, t.v = p, t.u = m, t.x = h, t.E = f, t.z = g, t.F = v, t.A = b, t.L = k, t.t = S, t.J = y;
        var _ = "chat.CHAT_HIDDEN",
            N = "chat.CHAT_RESET",
            E = "chat.CHAT_SHOWN",
            T = "chat.EMOTE_SETS_UPDATED",
            C = "chat.FOLLOWER_MODE_ENABLED",
            D = "chat.FOLLOWER_MODE_DISABLED",
            w = "chat.FOLLOWER_MODE_DURATION_CHANGED",
            I = "chat.FOLLOWER_MODE_DURATION_PREFERENCE_CHANGED",
            P = "chat.MESSAGES_UPDATED",
            O = "chat.MODICONS_ENABLED",
            F = "chat.MOD_ICONS_DISABLED",
            U = "chat.SLOW_MODE_ENABLED",
            R = "chat.SLOW_MODE_DISABLED",
            x = "chat.SUBS_ONLY_MODE_ENABLED",
            M = "chat.SUBS_ONLY_MODE_DISABLED",
            L = "chat.TIMESTAMPS_ENABLED",
            A = "chat.TIMESTAMPS_DISABLED",
            j = "chat.ADD_COMMAND",
            B = "chat.REMOVE_COMMAND"
    },
    379: function(e, t, n) {
        "use strict";

        function i(e) {
            return Object(l.bindActionCreators)({
                closeModal: d.c
            }, e)
        }
        var a = n(277),
            r = n(0),
            s = n(1),
            o = n(6),
            l = n(9),
            c = n(105),
            d = n(37),
            u = n(5),
            p = n(3),
            m = (n(502), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleClose = function(e) {
                        t.props.closeModal(), t.props.onClose && t.props.onClose(e)
                    }, t
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    return s.createElement(p._17, {
                        className: "reporting-modal__container",
                        background: p.m.Base,
                        padding: {
                            x: 2,
                            y: 3
                        }
                    }, s.createElement(a.a, {
                        onClose: this.handleClose,
                        reportContext: this.props.reportContext,
                        title: this.props.title,
                        defaultDescription: this.props.defaultDescription
                    }), s.createElement(c.a, null))
                }, t
            }(s.Component)),
            h = Object(l.compose)(Object(u.c)("ReportUserModal"), Object(o.a)(null, i))(m);
        n.d(t, !1, function() {}), n.d(t, !1, function() {
            return a.a
        }), n.d(t, !1, function() {
            return m
        }), n.d(t, "a", function() {
            return h
        })
    },
    38: function(e, t, n) {
        "use strict";
        n.d(t, "d", function() {
            return a
        }), n.d(t, "c", function() {
            return r
        }), n.d(t, "a", function() {
            return s
        }), n.d(t, "b", function() {
            return i
        }), n.d(t, "e", function() {
            return o
        });
        var i, a = {
                ChannelBitsEvents: "channel-bits-events-v1",
                ChannelBitsPinEvents: "channel-bit-events-public",
                ChannelSubscribeEvents: "channel-subscribe-events-v1",
                Friendship: "friendship",
                ImageUpload: "user-image-update",
                ModerationActionsByUserAndChannel: "chat_moderator_actions",
                OnsiteNotifications: "onsite-notifications",
                Presence: "presence",
                Raid: "raid",
                StreamChange: "stream-change-v1",
                StreamChatRoom: "stream-chat-room-v1",
                UploadService: "upload",
                UserCommerceEvents: "user-commerce-events",
                UserCrateEvents: "user-crate-events-v1",
                UserSubscribeEvents: "user-subscribe-events-v1",
                VideoPlayback: "video-playback",
                VideoPlaybackById: "video-playback-by-id",
                Whispers: "whispers"
            },
            r = {
                BitsPinEvent: "bits-pin-event",
                ChatNotification: "chat-notification",
                ImageUploadSuccess: "imageuploadsuccess",
                ModerationAction: "moderation_action",
                OnsiteNotificationCreate: "create-notification",
                OnsiteNotificationDelete: "delete-notification",
                OnsiteNotificationsRead: "read-notifications",
                OnsiteNotificationSummaryUpdate: "update-summary",
                OnsiteNotificationUpdate: "update-notification",
                Presence: "presence",
                PresenceSettings: "settings",
                RaidCancel: "raid_cancel",
                RaidUpdate: "raid_update",
                StreamChatRoomChatRichEmbed: "chat_rich_embed",
                StreamDown: "stream_down",
                StreamUp: "stream_up",
                UploadService: "upload",
                UserCrateEvent: "crate-event",
                ViewCount: "viewcount",
                Vodcast: "watchparty-vod",
                WhisperAllThreadsUpdate: "threads",
                WhisperDeleted: "whisper_deleted",
                WhisperEdited: "whisper_edited",
                WhisperReceived: "whisper_received",
                WhisperSent: "whisper_sent",
                WhisperThreadUpdate: "thread"
            },
            s = {
                Accepted: "accepted",
                Requested: "requested",
                Removed: "removed",
                SelfAccepted: "self_accepted",
                SelfRemoved: "self_removed",
                SelfRequested: "self_requested"
            };
        ! function(e) {
            e.Affiliate = "affiliate", e.AutoModEnabled = "automod_enabled", e.AutoModRejected = "automod_rejected", e.Ban = "ban", e.Clear = "clear", e.EmoteOnly = "emoteonly", e.EmoteOnlyOff = "emoteonlyoff", e.FollowersOnly = "followers", e.FollowersOnlyOff = "followersoff", e.Host = "host", e.Mod = "mod", e.R9kBeta = "r9kbeta", e.R9kBetaOff = "r9kbetaoff", e.Slow = "slow", e.SlowOff = "slowoff", e.SubsBeta = "subsbeta", e.SubscribersOnly = "subscribers", e.SubscribersOnlyOff = "subscribersoff", e.Timeout = "timeout", e.Unban = "unban", e.Unhost = "unhost", e.Unmod = "unmod", e.Untimeout = "untimeout"
        }(i || (i = {}));
        var o;
        ! function(e) {
            e.AutoModMessageRejected = "automod_message_rejected", e.AutoModMessageApproved = "automod_message_approved", e.AutoModMessageDenied = "automod_message_denied"
        }(o || (o = {}));
        var l;
        ! function(e) {
            e.Archive = "archive", e.Highlight = "highlight", e.Upload = "upload", e.Premiere = "premiere", e.Rerun = "rerun", e.WatchPartyPremiere = "watch_party_premiere", e.WatchPartyRerun = "watch_party_rerun"
        }(l || (l = {}));
        var c;
        ! function(e) {
            e.Private = "private", e.Public = "public"
        }(c || (c = {}))
    },
    381: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(1),
            r = n(2),
            s = (n(455), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.logger = r.n.logger.withCategory("resize-detector"), t.onScroll = function() {
                        var e = t.container,
                            n = e.offsetWidth,
                            i = e.offsetHeight,
                            a = e.offsetLeft,
                            r = e.offsetTop;
                        t.logger.debug("Resize Detector -- onScroll"), n === t.width && i === t.height && r === t.top && a === t.left || (t.width = n, t.height = i, t.props.onResize(n, i, r, a)), t.reset()
                    }, t.setGrowDivRef = function(e) {
                        return t.growDiv = e
                    }, t.setGrowChildDivRef = function(e) {
                        return t.growChildDiv = e
                    }, t.setShrinkDivRef = function(e) {
                        return t.shrinkDiv = e
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement("div", {
                        className: "resize-detector"
                    }, a.createElement("div", {
                        className: "resize-detector",
                        ref: this.setGrowDivRef
                    }, a.createElement("div", {
                        className: "resize-detector__grow",
                        ref: this.setGrowChildDivRef
                    })), a.createElement("div", {
                        className: "resize-detector",
                        ref: this.setShrinkDivRef
                    }, a.createElement("div", {
                        className: "resize-detector__shrink"
                    })))
                }, t.prototype.componentDidMount = function() {
                    if (!this.growDiv) return void this.logger.warn("growDiv is undefined!");
                    this.growDiv.parentElement || this.logger.warn("growDiv.parentElement is undefined!"), this.container = this.growDiv.parentElement.parentElement;
                    var e = this.container.style.position;
                    "relative" !== e && "absolute" !== e && "fixed" !== e && "static" === window.getComputedStyle(this.container).getPropertyValue("position") && (this.container.style.position = "relative"), this.onScroll(), this.growDiv.addEventListener("scroll", this.onScroll), this.shrinkDiv.addEventListener("scroll", this.onScroll)
                }, t.prototype.componentWillUnmount = function() {
                    this.growDiv.removeEventListener("scroll", this.onScroll), this.shrinkDiv.removeEventListener("scroll", this.onScroll)
                }, t.prototype.reset = function() {
                    var e = this,
                        t = e.growDiv,
                        n = e.shrinkDiv,
                        i = this.growChildDiv.style;
                    i.width = "100000px", i.height = "100000px", t.scrollLeft = 1e5, t.scrollTop = 1e5, n.scrollLeft = 1e5, n.scrollTop = 1e5
                }, t
            }(a.Component));
        n.d(t, "a", function() {
            return s
        })
    },
    383: function(e, t, n) {
        "use strict";

        function i(e) {
            return e.split("").map(function(e) {
                return e.charCodeAt(0) > 127
            }).reduce(function(e, t) {
                return e || t
            })
        }

        function a(e, t) {
            var n = e,
                a = !1;
            return n ? i(n) && (a = !0) : n = t, {
                userDisplayName: n,
                isIntl: a
            }
        }
        t.a = a
    },
    384: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                firstPageLoaded: e.session.firstPageLoaded
            }
        }
        var a = n(6),
            r = n(0),
            s = n(1),
            o = n(64),
            l = n(2),
            c = n(3),
            d = function(e) {
                return s.createElement(c.v, {
                    icon: c._9.Emoticons,
                    ariaLabel: Object(l.d)("Emote picker", "EmotePickerButton"),
                    type: c.w.Secondary,
                    onClick: e.onClick,
                    "data-a-target": "emote-picker-button"
                })
            },
            u = n(273),
            p = n(5),
            m = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasInteracted: !1,
                        isEmotePickerMenuVisible: !1,
                        isEmotePickerButtonVisible: !1
                    }, t.onClickOut = function() {
                        t.setState({
                            isEmotePickerMenuVisible: !1
                        })
                    }, t.onClickEmote = function(e, n) {
                        t.props.onClickEmote && t.props.onClickEmote(e, n)
                    }, t.toggleEmotePicker = function() {
                        t.setState(function(e) {
                            return {
                                isEmotePickerMenuVisible: !e.isEmotePickerMenuVisible
                            }
                        })
                    }, t.onEmotePickerDataLoaded = function(e) {
                        e && t.setState({
                            isEmotePickerButtonVisible: !0
                        })
                    }, t.onInteraction = function() {
                        return t.setState({
                            hasInteracted: !0
                        })
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive(), this.props.inputRef && (this.props.inputRef.addEventListener("mouseenter", this.onInteraction), this.props.inputRef.addEventListener("focus", this.onInteraction))
                }, t.prototype.componentWillUnmount = function() {
                    this.props.inputRef && (this.props.inputRef.removeEventListener("mouseenter", this.onInteraction), this.props.inputRef.removeEventListener("focus", this.onInteraction))
                }, t.prototype.render = function() {
                    var e = null;
                    this.state.isEmotePickerButtonVisible && (e = s.createElement(d, {
                        onClick: this.toggleEmotePicker
                    }));
                    var t = null;
                    this.hasInteractedOrPageload && (t = s.createElement(u.a, {
                        channelOwnerID: this.props.channelOwnerID,
                        onClickEmote: this.onClickEmote,
                        onLoad: this.onEmotePickerDataLoaded,
                        toggleVisibility: this.toggleEmotePicker,
                        visible: this.state.isEmotePickerMenuVisible,
                        direction: this.props.direction
                    }));
                    var n = s.createElement(c.U, r.__assign({
                        className: "emote-picker-and-button"
                    }, this.layoutProps), e, t);
                    return this.props.shouldCloseOnClickOut ? s.createElement(o.a, {
                        onClickOut: this.onClickOut
                    }, n) : n
                }, Object.defineProperty(t.prototype, "hasInteractedOrPageload", {
                    get: function() {
                        return !(!this.props.firstPageLoaded && !this.state.hasInteracted)
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "layoutProps", {
                    get: function() {
                        var e = {
                            attachTop: !!this.props.attachTop,
                            attachRight: !!this.props.attachRight,
                            attachBottom: !!this.props.attachBottom,
                            attachLeft: !!this.props.attachLeft,
                            padding: this.props.padding
                        };
                        return this.props.position && this.props.position in c._2 && (e.position = this.props.position), e
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(s.Component),
            h = Object(p.c)("EmotePicker")(m),
            f = Object(a.a)(i)(h),
            g = n(269);
        n.d(t, "a", function() {
            return f
        }), n.d(t, "c", function() {
            return u.a
        }), n.d(t, !1, function() {
            return g.b
        }), n.d(t, !1, function() {
            return g.a
        }), n.d(t, "b", function() {
            return d
        })
    },
    388: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(4),
            r = n(1),
            s = n(375),
            o = n(3),
            l = (n(475), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onImageLoad = function() {
                        n.setState({
                            imageLoaded: !0
                        })
                    }, n.renderImage = function() {
                        var e = null,
                            t = a("chat-image", n.props.className, {
                                hide: !n.state.imageLoaded
                            });
                        if (n.props.srcSet.themed) e = r.createElement(s.a, {
                            alt: n.props.alt,
                            className: t,
                            defaultRes: n.props.srcKey,
                            onLoad: n.onImageLoad,
                            sources: n.props.srcSet
                        });
                        else {
                            for (var i = [], o = 0, l = Object.keys(n.props.srcSet.sources); o < l.length; o++) {
                                var c = l[o];
                                i.push(n.props.srcSet.sources[c] + " " + c)
                            }
                            e = r.createElement("img", {
                                className: t,
                                onLoad: n.onImageLoad,
                                src: n.props.srcSet.sources[n.props.srcKey],
                                srcSet: i.join(","),
                                alt: n.props.alt
                            })
                        }
                        return e
                    }, n.renderPlaceholder = function() {
                        return n.state.imageLoaded ? null : r.createElement(o.P, {
                            display: o.H.InlineBlock
                        }, r.createElement(o._21, {
                            type: o._26.Span,
                            className: "chat-image__placeholder",
                            align: o._37.Top
                        }, r.createElement(o._1, {
                            height: 28,
                            width: 28
                        })))
                    }, n.state = {
                        imageLoaded: !1
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = r.createElement(o._30, {
                        direction: this.props.tooltipDirection || o._32.Top,
                        label: this.props.alt,
                        display: o.H.Inline,
                        offsetY: "0.9rem",
                        "data-a-target": "emote-name"
                    }, this.renderPlaceholder(), this.renderImage(), this.props.cheerText);
                    return this.props.cheerText ? r.createElement(o._21, {
                        type: o._26.Span,
                        noWrap: !0
                    }, e) : e
                }, t
            }(r.Component));
        n.d(t, "a", function() {
            return l
        })
    },
    398: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        });
        var i = n(0),
            a = n(1),
            r = (n.n(a), n(18)),
            s = n(3),
            o = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        showBalloon: !!t.props.openByDefault,
                        hasInteracted: !!t.props.openByDefault
                    }, t.toggleBalloonId = Object(r.a)(), t.handleButtonClick = function() {
                        t.setState(function(e) {
                            return {
                                showBalloon: !e.showBalloon,
                                hasInteracted: !0
                            }
                        }, function() {
                            t.props.onToggle && t.props.onToggle(!t.state.showBalloon)
                        })
                    }, t.handleGlobalClick = function(e) {
                        e.target.matches('[data-toggle-balloon-id="' + t.toggleBalloonId + '"] *') || t.setState({
                            showBalloon: !1
                        }, function() {
                            t.props.onToggle && t.props.onToggle(!t.state.showBalloon)
                        })
                    }, t.onMouseEnter = function() {
                        t.state.hasInteracted || t.setState({
                            hasInteracted: !0
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.openByDefault && document.addEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.componentWillUpdate = function(e, t) {
                    this.state.showBalloon !== t.showBalloon && (t.showBalloon ? document.addEventListener("click", this.handleGlobalClick, !0) : document.removeEventListener("click", this.handleGlobalClick, !0))
                }, t.prototype.componentWillUnmount = function() {
                    document.removeEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.render = function() {
                    var e = a.Children.toArray(this.props.children);
                    if (2 !== e.length) throw new Error("ToggleBalloonWrapper should only be given two children: a clickable and a Balloon");
                    var t = e[0],
                        n = e[1];
                    if (n.type !== s.p) throw new Error("ToggleBalloonWrapper needs a Balloon as its second child element");
                    var r = a.cloneElement(t, {
                            onClick: this.handleButtonClick
                        }),
                        o = null;
                    (this.state.hasInteracted || this.props.alwaysMountBalloonContent) && (o = a.cloneElement(n, {
                        show: this.state.showBalloon
                    }));
                    var l = r;
                    return this.props.tooltipProps && (l = a.createElement(s._30, i.__assign({}, this.props.tooltipProps), r)), a.createElement(s.U, {
                        "data-toggle-balloon-id": this.toggleBalloonId,
                        display: this.props.display,
                        position: s._2.Relative
                    }, a.createElement("div", {
                        style: {
                            display: "inherit"
                        },
                        onMouseEnter: this.onMouseEnter,
                        "data-test-selector": "toggle-balloon-wrapper__mouse-enter-detector"
                    }, l), o)
                }, t.prototype.toggleBalloon = function(e) {
                    void 0 === e && (e = !this.state.showBalloon), this.setState({
                        showBalloon: e,
                        hasInteracted: !0
                    })
                }, t
            }(a.Component)
    },
    441: function(e, t, n) {
        "use strict";
        var i, a = (n(456), n(0)),
            r = n(11),
            s = n(1),
            o = n(40),
            l = n(4),
            c = n(2),
            d = n(64),
            u = n(3),
            p = (n(457), "autocomplete-balloon-matches"),
            m = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.resizeAnimationFrame = 0, t.messages = {
                        noMatches: Object(c.d)("No matches.", "AutocompleteBalloon")
                    }, t.logger = c.i.withCategory("AutocompleteBalloon"), t.renderMatches = function() {
                        return t.props.matches.map(function(e, n) {
                            var i = t.state.selectedMatch,
                                a = i && i.replacement === e.replacement,
                                r = l("autocomplete-balloon__item", {
                                    "autocomplete-balloon__item--selected": a
                                });
                            return s.createElement(u.U, {
                                key: "autocomplete-match-" + n,
                                refDelegate: a ? t.focusOnOption : void 0,
                                "data-test-selector": p
                            }, s.createElement(u.P, {
                                display: u.H.Block,
                                fullWidth: !0
                            }, s.createElement("button", {
                                onMouseEnter: t.handleMatchMouseEnter,
                                className: r,
                                "data-a-target": e.replacement,
                                "data-click-index": n,
                                onClick: t.onMatchClick
                            }, s.createElement(u.U, {
                                padding: {
                                    x: .5
                                },
                                display: u.H.Flex,
                                alignItems: u.c.Center
                            }, e.element))))
                        })
                    }, t.handleMatchMouseEnter = function(e) {
                        var n = t.getMatchFromEvent(e);
                        n && t.setState({
                            selectedMatch: n
                        })
                    }, t.onMatchClick = function(e) {
                        var n = t.getMatchFromEvent(e);
                        n && t.props.onMatchSelect(n)
                    }, t.getMatchFromEvent = function(e) {
                        var n = t.props.matches,
                            i = e.currentTarget.getAttribute("data-click-index");
                        return !i || +i >= n.length ? (t.logger.error(new Error, "The index received from the UI element was not found in props.matches."), null) : n[+i]
                    }, t.handleKeydown = function(e) {
                        var n = e.charCode || e.keyCode,
                            i = function() {
                                e.preventDefault(), e.stopPropagation()
                            };
                        switch (n) {
                            case o.a.Tab:
                            case o.a.Enter:
                                i(), t.props.matches.length && t.state.selectedMatch ? t.props.onMatchSelect(t.state.selectedMatch) : t.props.onDismiss();
                                break;
                            case o.a.Up:
                            case o.a.Down:
                                if (!t.state.selectedMatch || !t.props.matches.length) return;
                                var a = t.props.matches.indexOf(t.state.selectedMatch);
                                if (-1 === a) return void t.logger.error(new Error, "The selected match was not found in props.matches.");
                                i();
                                var r = n === o.a.Up ? -1 : 1,
                                    s = t.getIndexWithinLength(a + r, t.props.matches.length),
                                    l = t.props.matches[s];
                                t.setState({
                                    selectedMatch: l
                                })
                        }
                    }, t.getIndexWithinLength = function(e, t) {
                        var n = e % t;
                        return n < 0 ? n + t : n
                    }, t.onResize = function() {
                        t.resizeAnimationFrame || (t.resizeAnimationFrame = requestAnimationFrame(t.setContainerHeight))
                    }, t.setContainerHeight = function() {
                        var e = t.props.containerElement && t.props.containerElement.clientHeight || 1080;
                        t.setState({
                            containerHeight: e
                        }), t.resizeAnimationFrame = 0
                    }, t.focusOnOption = function(e) {
                        if (e && t.autocompleteBalloonElement) {
                            var n = e.getBoundingClientRect(),
                                i = t.autocompleteBalloonElement.getBoundingClientRect();
                            (n.bottom > i.bottom || n.top < i.top) && e.scrollIntoView()
                        }
                    }, t.setAutocompleteBalloonElement = function(e) {
                        t.autocompleteBalloonElement = e
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    window.addEventListener("keydown", this.handleKeydown, !0), window.addEventListener("resize", this.onResize, !0), this.setContainerHeight(), this.props.matches.length > 0 && this.setState({
                        selectedMatch: this.props.matches[0]
                    })
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("resize", this.onResize, !0), window.removeEventListener("keydown", this.handleKeydown, !0), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this,
                        n = e.matches.reduce(function(e, n, i) {
                            return t.state.selectedMatch ? n.replacement === t.state.selectedMatch.replacement ? i : e : 0
                        }, 0);
                    this.setState({
                        selectedMatch: e.matches[n]
                    })
                }, t.prototype.render = function() {
                    var e;
                    return e = 0 === this.props.matches.length ? s.createElement(u.U, {
                        padding: {
                            x: .5
                        },
                        "data-test-selector": "autocomplete-balloon-no-matches"
                    }, s.createElement(u._21, {
                        type: u._26.Span,
                        color: u.F.Alt2
                    }, this.messages.noMatches)) : this.renderMatches(), s.createElement(u.U, {
                        position: u._2.Relative
                    }, s.createElement(d.a, {
                        onClickOut: this.props.onDismiss
                    }, s.createElement(u.p, {
                        direction: u.q.TopLeft,
                        "data-a-target": "autocomplete-balloon",
                        "data-test-selector": "autocomplete-balloon",
                        show: !0
                    }, s.createElement(u.U, {
                        refDelegate: this.setAutocompleteBalloonElement,
                        "data-test-selector": "autocomplete-matches-container",
                        className: "autocomplete-balloon",
                        overflow: u.Y.Auto,
                        padding: {
                            y: 1
                        }
                    }, s.createElement("div", {
                        style: {
                            maxHeight: this.state.containerHeight
                        }
                    }, e)))))
                }, t
            }(s.Component),
            h = n(134),
            f = n(13),
            g = {
                Chat: "chat",
                Feed: "feed",
                Whisper: "whisper"
            },
            v = {
                Emote: ":",
                Hashtag: "#",
                Mention: "@",
                Tab: "Tab",
                Whisper: "/w"
            },
            b = function(e) {
                switch (e) {
                    case h.a.Emote:
                        return v.Emote;
                    case h.a.Hashtag:
                        return v.Hashtag;
                    case h.a.Mention:
                        return v.Mention;
                    default:
                        return void c.i.warn("Chat Suggestions tracking was passed an unknown autocomplete type.")
                }
            },
            k = function(e) {
                var t = b(e.autocompleteType);
                if (t) {
                    var n = {
                        source: e.source,
                        start_character: t
                    };
                    c.m.track(f.SpadeEventType.ChatSuggestion, n)
                }
            },
            S = function(e) {
                var t = b(e.autocompleteType);
                if (t) {
                    var n = {
                        channel: e.channelLogin,
                        completed_text: e.completedText,
                        source: e.source,
                        start_character: t
                    };
                    c.m.track(f.SpadeEventType.ChatSuggestionComplete, n)
                }
            };
        ! function(e) {
            e.Input = "input", e.TextArea = "textarea"
        }(i || (i = {}));
        var y = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        autocompleteType: h.a.None,
                        matchedCursorPosition: 0,
                        matches: null,
                        value: ""
                    }, n.providers = [], n.onChange = function(e) {
                        n.setState({
                            value: e.target.value
                        }, function() {
                            n.getMatches()
                        }), n.props.onChange && n.props.onChange(e)
                    }, n.onKeyDown = function(e) {
                        var t = function() {
                                n.props.onKeyDown && n.props.onKeyDown(e)
                            },
                            i = function() {
                                e.preventDefault(), e.stopPropagation()
                            },
                            a = e.charCode || e.keyCode;
                        if (a === o.a.Enter) return void t();
                        switch (a) {
                            case o.a.Tab:
                                n.state.matches || (i(), n.getMatches(!0));
                                break;
                            case o.a.Esc:
                                n.state.matches && (i(), n.resetDisplayState())
                        }
                        t()
                    }, n.setComponentRefDelegate = function(e) {
                        n.componentRef = e, n.props.componentRefDelegate && n.props.componentRefDelegate(e)
                    }, n.getMatches = function(e) {
                        var t = n.state.value;
                        if (0 === n.providers.length || 0 === t.length) return void n.resetDisplayState();
                        var i = n.getCurrentCursorPosition();
                        if (i > t.length);
                        else
                            for (; i < t.length && !/\s/.test(t.charAt(i));) i++;
                        var a = t.substring(0, i);
                        if (0 === a.length || /\s/.test(a.substring(a.length - 1))) return void n.resetDisplayState();
                        for (var r = a.split(/\s/), s = r[r.length - 1], o = 0, l = n.providers; o < l.length; o++) {
                            var c = l[o];
                            if (!e || c.canBeTriggeredByTab) {
                                var d = c.getMatches(s, e);
                                if (d) return void n.setState({
                                    autocompleteType: c.autocompleteType,
                                    matchedCursorPosition: i,
                                    matches: d
                                })
                            }
                        }
                        n.resetDisplayState()
                    }, n.resetDisplayState = function(e, t) {
                        var i = a.__assign({}, n.state, {
                            autocompleteType: h.a.None,
                            matches: null
                        }, e || {});
                        n.setState(i, t)
                    }, n.insertReplacement = function(e) {
                        var t = n.state.value,
                            i = n.state.matchedCursorPosition,
                            r = t.substring(0, i),
                            s = r.lastIndexOf(e.current);
                        if (-1 === s) r = r.concat(e.replacement + " "), i = r.length;
                        else {
                            var o = r.substring(0, s),
                                l = t.length > s + e.current.length ? t.substring(s + e.current.length) : "",
                                c = l.startsWith(" ") ? e.replacement : e.replacement + " ";
                            r = "" + o + c + l, i = o.length + c.length
                        }
                        S(a.__assign({}, n.props.trackingParams || {}, {
                            autocompleteType: n.state.autocompleteType,
                            completedText: e.replacement,
                            source: n.props.suggestionSource
                        })), n.resetDisplayState({
                            value: r
                        }, function() {
                            n.setCursorPosition(i)
                        })
                    }, n.getCurrentCursorPosition = function() {
                        return n.componentRef.selectionStart
                    }, n.setCursorPosition = function(e) {
                        n.componentRef && (n.componentRef.setSelectionRange(e, e), n.componentRef.focus())
                    }, n.registerAutocompleteProvider = function(e) {
                        return n.providers.push(e),
                            function() {
                                var t = n.providers.indexOf(e);
                                n.providers.splice(t, 1)
                            }
                    }, t.refDelegate && t.refDelegate(n), n
                }
                return a.__extends(t, e), t.prototype.getChildContext = function() {
                    return {
                        registerAutocompleteProvider: this.registerAutocompleteProvider
                    }
                }, t.prototype.componentWillUpdate = function(e, t) {
                    !this.state.matches && t.matches && k({
                        autocompleteType: t.autocompleteType,
                        source: e.suggestionSource
                    })
                }, t.prototype.componentDidUpdate = function(e, t) {
                    t.value !== this.state.value && this.props.onValueUpdate && this.props.onValueUpdate(this.state.value)
                }, t.prototype.render = function() {
                    var e = a.__assign({}, this.props, {
                        onChange: this.onChange,
                        onKeyDown: this.onKeyDown,
                        refDelegate: this.setComponentRefDelegate,
                        value: this.state.value
                    });
                    return s.createElement(u.U, null, this.state.matches && s.createElement(m, {
                        matches: this.state.matches,
                        onMatchSelect: this.insertReplacement,
                        onDismiss: this.resetDisplayState,
                        containerElement: this.props.containerElement
                    }), this.props.componentType === i.Input ? s.createElement(u.Q, a.__assign({}, e, {
                        type: e.type || u.R.Text
                    })) : s.createElement(u._23, a.__assign({}, e)), this.props.children)
                }, t.prototype.getValue = function() {
                    return this.state.value
                }, t.prototype.setValue = function(e) {
                    this.resetDisplayState({
                        value: e
                    })
                }, t.childContextTypes = {
                    registerAutocompleteProvider: r.func
                }, t
            }(s.Component),
            _ = n(88),
            N = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.autocompleteType = h.a.Emote, t.canBeTriggeredByTab = !1, t.getMatches = function(e) {
                        return e.startsWith(":") ? e.length < 3 ? null : t.getMatchedEmotes(e) : null
                    }, t.getMatchedEmotes = function(e) {
                        var n = t.props.emotes;
                        if (!n || 0 === n.length) return null;
                        var i = e.substring(1),
                            a = n.reduce(function(e, n) {
                                var a = n.emotes.filter(function(e) {
                                    if (e.token) return t.doesEmoteMatchTerm(e, i)
                                });
                                return e.concat([a])
                            }, []).filter(function(e) {
                                return e.length > 0
                            }).reduce(function(e, t) {
                                return e.concat(t)
                            }, []);
                        return a = Object(_.d)(a), a = Object(_.e)(a, i), a.map(function(e) {
                            return {
                                current: ":" + i,
                                replacement: e.token,
                                element: t.renderEmoteSuggestion(e)
                            }
                        })
                    }, t.doesEmoteMatchTerm = function(e, t) {
                        var n = new RegExp("^" + t, "i");
                        if (e.token.match(n)) return !0;
                        var i = new RegExp("" + t.charAt(0).toUpperCase()),
                            a = new RegExp("^" + t.slice(1), "i"),
                            r = e.token.match(i);
                        return !!(r && r.index && e.token.slice(r.index + 1).match(a))
                    }, t.renderEmoteSuggestion = function(e) {
                        return [s.createElement(u.U, {
                            padding: {
                                right: .5
                            },
                            key: "emote-img-" + e.id
                        }, s.createElement("img", {
                            srcSet: e.srcSet
                        })), s.createElement(u._21, {
                            type: u._26.Span,
                            key: "emote-text-" + e.id
                        }, e.token)]
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.unregister = this.context.registerAutocompleteProvider(this)
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister()
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    registerAutocompleteProvider: r.func
                }, t
            }(s.Component);
        n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "b", function() {
            return y
        }), n.d(t, "a", function() {
            return i
        }), n.d(t, !1, function() {}), n.d(t, "d", function() {
            return N
        }), n.d(t, "c", function() {
            return g
        })
    },
    442: function(e, t, n) {
        "use strict";

        function i() {
            var e = this;
            return Object(o.a)(c, {
                props: function(t) {
                    return {
                        blockUserMutation: function(n, i, o, c) {
                            return r.__awaiter(e, void 0, void 0, function() {
                                var e;
                                return r.__generator(this, function(r) {
                                    switch (r.label) {
                                        case 0:
                                            if (!t.mutate) return [3, 4];
                                            r.label = 1;
                                        case 1:
                                            return r.trys.push([1, 3, , 4]), [4, t.mutate({
                                                variables: {
                                                    input: {
                                                        targetUserID: n,
                                                        sourceContext: o,
                                                        reason: i
                                                    }
                                                },
                                                optimisticResponse: {
                                                    blockUser: {
                                                        __typename: "BlockUserPayload",
                                                        targetUser: {
                                                            __typename: "User",
                                                            id: n
                                                        }
                                                    }
                                                },
                                                update: function(e) {
                                                    var t = e.readFragment({
                                                        id: a(c),
                                                        fragment: l
                                                    });
                                                    t && (t.blockedUsers.push({
                                                        id: n,
                                                        __typename: "User"
                                                    }), e.writeFragment({
                                                        id: a(c),
                                                        fragment: l,
                                                        data: t
                                                    }))
                                                }
                                            })];
                                        case 2:
                                            return r.sent(), [3, 4];
                                        case 3:
                                            return e = r.sent(), s.i.error(e, "Unable to block user"), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }
                    }
                }
            })
        }

        function a(e) {
            return e && s.n.apollo.client.dataIdFromObject ? s.n.apollo.client.dataIdFromObject(e) || "" : ""
        }
        t.a = i;
        var r = n(0),
            s = n(2),
            o = n(7),
            l = n(279),
            c = (n.n(l), n(464));
        n.n(c)
    },
    443: function(e, t, n) {
        "use strict";

        function i(e, t) {
            for (var n = [], i = /\S+/g, a = i.exec(e); a;) {
                var r = a[0],
                    s = t[r];
                if (s) {
                    var o = Object(u.d)(e.slice(0, a.index)),
                        l = o ? o.length : a.index;
                    n.push({
                        id: s.id,
                        start: l,
                        end: l + r.length - 1
                    })
                }
                a = i.exec(e)
            }
            return n
        }

        function a(e) {
            var t = e.currentUserID,
                n = e.emotes,
                a = e.message,
                u = e.recipientUserID;
            if ("" === t || "" === a || "" === u) return Promise.reject(new Error("Tried to send a whisper with nonsensical parameters."));
            var f = Object(c.b)(),
                g = s.__assign({
                    mutation: p
                }, Object(l.a)({
                    message: a,
                    nonce: f,
                    recipientUserID: u
                })),
                v = Object(m.a)(t, u),
                b = r(v);
            if (b) {
                var k = i(a, n).map(d.a);
                g.optimisticResponse = {
                    sendWhisper: {
                        __typename: "SendWhisperPayload",
                        message: {
                            content: {
                                content: a,
                                emotes: k,
                                __typename: "MessageBody"
                            },
                            from: {
                                id: t,
                                __typename: "User"
                            },
                            id: f,
                            sentAt: (new Date).toISOString(),
                            deletedAt: null,
                            editedAt: null,
                            __typename: "WhisperMessage"
                        }
                    }
                }, g.update = function(e, t) {
                    var n = "" + (parseInt(b.messages.edges[0].cursor, 10) + 1) || "";
                    if (t.data) {
                        var i = r(v);
                        if (i) {
                            var a = i.messages.edges.findIndex(function(e) {
                                return e.cursor === n
                            });
                            if (a < 0) {
                                var s = {
                                    cursor: n,
                                    node: t.data.sendWhisper.message,
                                    __typename: "WhisperMessageEdge"
                                };
                                i.messages.edges.unshift(s)
                            } else i.messages.edges[a].node = t.data.sendWhisper.message;
                            i.userLastMessageRead.sentAt = t.data.sendWhisper.message.sentAt, i.unreadMessagesCount = 0, e.writeQuery({
                                query: h,
                                data: {
                                    whisperThread: i
                                }
                            })
                        }
                    }
                }
            }
            return o.n.apollo.client.mutate(g)
        }

        function r(e) {
            try {
                return o.n.apollo.client.readQuery({
                    query: h,
                    variables: {
                        id: e
                    }
                }).whisperThread
            } catch (e) {
                return null
            }
        }
        var s = n(0),
            o = n(2),
            l = n(20),
            c = n(18),
            d = n(289),
            u = n(131),
            p = n(477),
            m = n(55),
            h = n(478);
        t.a = a
    },
    444: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(1),
            r = n(2),
            s = n(7),
            o = n(5),
            l = n(3),
            c = n(489),
            d = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        canGift: !1
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    e.data && e.data.user && e.data.user.self ? this.setState({
                        canGift: e.data.user.self.canGift
                    }) : this.setState({
                        canGift: !1
                    })
                }, t.prototype.render = function() {
                    return a.createElement(l.u, {
                        targetBlank: !0,
                        disabled: !this.state.canGift,
                        onClick: this.props.onClick,
                        linkTo: this.props.checkoutURL,
                        "data-test-selector": "gift-subscribe-button"
                    }, Object(r.d)("Gift Subscription", "GiftSubscribeButton"))
                }, t = i.__decorate([Object(o.c)("GiftSubscribeButton"), Object(s.a)(c, {
                    options: function(e) {
                        return {
                            variables: {
                                recipientLogin: e.giftRecipient,
                                subProductId: e.subProductId
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.giftRecipient || !e.subProductId
                    }
                })], t)
            }(a.Component),
            u = d;
        n.d(t, !1, function() {
            return "gift-subscribe-button"
        }), n.d(t, "a", function() {
            return u
        })
    },
    446: function(e, t, n) {
        e.exports = n.p + "assets/bg_glitch_pattern-34ca2e369aad1ed33b57f3d2d59c70eb.png"
    },
    447: function(e, t, n) {
        "use strict";

        function i(e) {
            return Object(r.bindActionCreators)({
                openThread: function(e) {
                    return Object(s.l)({
                        collapsed: !1,
                        threadID: e,
                        ignoreCollapseIfOpen: !0
                    }, Object(o.a)())
                }
            }, e)
        }
        var a = n(6),
            r = n(9),
            s = n(57),
            o = n(72),
            l = n(0),
            c = n(1),
            d = n(2),
            u = n(3),
            p = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleClick = function() {
                        t.props.onClick && t.props.onClick(), t.props.openThread(t.props.threadID)
                    }, t
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    var e = Object(d.d)("Whisper", "WhisperButton");
                    return c.createElement(u.u, {
                        onClick: this.handleClick
                    }, e)
                }, t
            }(c.Component),
            m = p,
            h = Object(a.a)(null, i)(m);
        n.d(t, "a", function() {
            return h
        })
    },
    448: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                isLoggedIn: Object(c.d)(e)
            }
        }

        function a(e) {
            return Object(s.bindActionCreators)({
                onLoginClick: function() {
                    return l.f(o.a.FriendAdd)
                }
            }, e)
        }
        var r = n(6),
            s = n(9),
            o = n(54),
            l = n(39),
            c = n(17),
            d = n(0),
            u = n(1),
            p = n(2),
            m = n(7),
            h = n(20),
            f = n(5),
            g = n(3),
            v = n(483),
            b = n(484),
            k = n(485),
            S = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hovered: !1
                    }, t.onClickAddFriend = function() {
                        t.props.onCreateFriendRequest(Object(h.a)({
                            targetID: t.props.channelID
                        }))
                    }, t.onClickUnfriend = function() {
                        t.props.onUnfriendUser(Object(h.a)({
                            targetID: t.props.channelID
                        }))
                    }, t.onToggleHover = function() {
                        t.setState(function(e) {
                            return {
                                hovered: !e.hovered
                            }
                        })
                    }, t
                }
                return d.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = Object(p.d)("Add Friend", "UserCard");
                    if (!this.props.isLoggedIn) return u.createElement(g.u, {
                        ariaLabel: e,
                        onClick: this.props.onLoginClick
                    }, e);
                    if (this.props.data.loading || this.props.data.error) return u.createElement(g._1, {
                        height: 30,
                        width: 60
                    });
                    if (!this.isFriend()) return u.createElement(g.u, {
                        onClick: this.onClickAddFriend
                    }, e);
                    var t = Object(p.d)("Unfriend", "UserCard"),
                        n = Object(p.d)("Friends", "UserCard"),
                        i = this.state.hovered ? t : n;
                    return u.createElement("div", {
                        onMouseEnter: this.onToggleHover,
                        onMouseLeave: this.onToggleHover
                    }, u.createElement(g.P, {
                        flexDirection: g.J.Row,
                        display: g.H.Flex,
                        alignItems: g.c.Center
                    }, u.createElement("button", {
                        "aria-label": t,
                        className: "user-card__status-btn",
                        onClick: this.onClickUnfriend,
                        "data-a-target": "unfriend-button"
                    }, u.createElement(g.U, {
                        display: g.H.Flex,
                        className: "user-card__status-btn--text",
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, u.createElement(g._21, null, i)))))
                }, t.prototype.isFriend = function() {
                    var e = this;
                    return !this.props.data.loading && !this.props.data.error && !!this.props.data.currentUser.friends.edges.find(function(t) {
                        return t.node.id === e.props.channelID
                    })
                }, t = d.__decorate([Object(f.c)("FriendButton"), Object(m.a)(b), Object(m.a)(k, {
                    name: "onUnfriendUser"
                }), Object(m.a)(v, {
                    name: "onCreateFriendRequest"
                })], t)
            }(u.Component),
            y = S,
            _ = Object(r.a)(i, a)(y);
        n.d(t, "a", function() {
            return _
        })
    },
    449: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(11),
            r = n(1),
            s = n(70),
            o = (n(539), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        scrollableProps: {}
                    }, t.getChildContext = function() {
                        return {
                            setRootScrollableProps: t.setRootScrollableProps,
                            resetRootScrollableProps: t.resetRootScrollableProps,
                            getRootScrollableOffsetHeight: t.getOffsetHeight,
                            setRootScrollableOffsetHeight: t.setOffsetHeight,
                            resetRootScrollableOffsetHeight: t.resetOffsetHeight
                        }
                    }, t.setRootScrollableProps = function(e) {
                        t.setState({
                            scrollableProps: e
                        })
                    }, t.resetRootScrollableProps = function() {
                        t.setState({
                            scrollableProps: {}
                        })
                    }, t.getOffsetHeight = function() {
                        return t.state.offsetHeight
                    }, t.setOffsetHeight = function(e) {
                        t.setState({
                            offsetHeight: e
                        })
                    }, t.resetOffsetHeight = function() {
                        t.setState({
                            offsetHeight: void 0
                        })
                    }, t.setScrollableAreaRef = function(e) {
                        return t.scrollableAreaRef = e
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = void 0,
                        t = this.state.offsetHeight;
                    t && (e = {
                        paddingTop: t
                    });
                    var n = i.__assign({
                        className: "root-scrollable",
                        contentClassName: "root-scrollable__content"
                    }, this.state.scrollableProps);
                    return r.createElement(s.b, i.__assign({}, n, {
                        "data-a-target": "root-scroller",
                        style: e,
                        scrollRef: this.setScrollableAreaRef,
                        scrollbarVerticalOffset: t
                    }), this.props.children)
                }, t.childContextTypes = {
                    setRootScrollableProps: a.func,
                    resetRootScrollableProps: a.func,
                    getRootScrollableOffsetHeight: a.func,
                    setRootScrollableOffsetHeight: a.func,
                    resetRootScrollableOffsetHeight: a.func
                }, t
            }(r.Component)),
            l = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.shouldSetRootScrollableProps = function(e, t) {
                        return !(!e || !t) && (e.disableDebounce !== t.disableDebounce || (e.scrollRef !== t.scrollRef || (e.contentClassName !== t.contentClassName || (e.scrollContentClassName !== t.scrollContentClassName || (e.suppressScrollX !== t.suppressScrollX || (e.suppressScrollY !== t.suppressScrollY || e.className !== t.className))))))
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.context.setRootScrollableProps(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.shouldSetRootScrollableProps(this.props, e) && this.context.setRootScrollableProps(e)
                }, t.prototype.componentWillUnmount = function() {
                    this.context.resetRootScrollableProps()
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    setRootScrollableProps: a.func,
                    resetRootScrollableProps: a.func
                }, t
            }(r.Component);
        n.d(t, "a", function() {
            return o
        }), n.d(t, "b", function() {
            return l
        })
    },
    450: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                collapsed: !e.ui.sideNavExpanded,
                isLoggedIn: Object(P.d)(e),
                firstPageLoaded: e.session.firstPageLoaded
            }
        }

        function a(e) {
            return Object(w.bindActionCreators)({
                collapseSideNav: I.j,
                expandSideNav: I.n
            }, e)
        }

        function r(e) {
            return {
                onBlockThread: function(t) {
                    return e(U.h(t, Object(R.a)()))
                },
                onCloseThread: function(t) {
                    return e(U.h(t, Object(R.a)()))
                },
                onCollapseThread: function(t) {
                    return e(U.i(t, Object(R.a)()))
                },
                onExpandThread: function(t) {
                    return e(U.j(t, Object(R.a)()))
                },
                onFocusThread: function(t) {
                    return e(U.k(t, Object(R.a)()))
                },
                onUnfocusThread: function(t) {
                    return e(U.n(t, Object(R.a)()))
                },
                onResizeContent: function() {
                    return e(U.m(Object(R.a)()))
                }
            }
        }

        function s(e) {
            return {
                openedThreads: e.whispers.display.openedIDs.map(function(t) {
                    return Object(F.b)(e, t)
                }),
                focusedThreadID: e.whispers.display.focusedID
            }
        }

        function o(e) {
            return Object.keys(e).reduce(function(t, n) {
                var i = e[n];
                return i.muted || i.archived ? t : t + i.unreadMessagesCount
            }, 0)
        }

        function l(e) {
            return e.type === A.c.WhisperSent
        }

        function c(e) {
            return e.type === A.c.WhisperReceived
        }

        function d(e) {
            return e.type === A.c.WhisperDeleted
        }

        function u(e) {
            return e.type === A.c.WhisperEdited
        }

        function p(e) {
            return e.type === A.c.WhisperThreadUpdate
        }

        function m(e) {
            return e.type === A.c.WhisperAllThreadsUpdate
        }

        function h(e, t, n, i) {
            if (!t.currentUser) return t;
            var a = H.l.get("whisperDoNotDisturb", !1),
                r = t.currentUser.whisperThreads.edges.find(function(t) {
                    return t.node.id === e.data_object.thread_id
                });
            if (r) {
                var s = Object(ce.c)(e);
                r.node.messages.edges.unshift(s), c(e) && (e.data_object.thread_id !== n ? r.node.unreadMessagesCount += 1 : Object(de.a)({
                    threadID: e.data_object.thread_id,
                    lastReadMessageID: e.data_object.message_id
                }), i({
                    threadID: e.data_object.thread_id,
                    collapsed: !0,
                    hidden: a
                })), r.node.isArchived = !1;
                var o = t.currentUser.whisperThreads.edges.filter(function(t) {
                    return t.node.id !== e.data_object.thread_id
                });
                o.unshift(r), t.currentUser.whisperThreads.edges = o
            } else i({
                threadID: e.data_object.thread_id,
                collapsed: !0,
                hidden: a
            });
            return t
        }

        function f(e, t) {
            if (!t.currentUser) return t;
            var n = t.currentUser.whisperThreads.edges.find(function(t) {
                return t.node.id === e.data_object.thread_id
            });
            if (n) {
                var i = n.node.messages.edges.find(function(t) {
                    return t.node.id === e.data_object.message_id
                });
                i && (i.node.deletedAt = new Date(1e3 * e.data_object.deleted_at).toISOString(), i.node.content.content = e.data_object.body, i.node.content.emotes = Object(ce.b)(e.data_object.tags.emotes))
            }
            return t
        }

        function g(e, t) {
            if (!t.currentUser) return t;
            var n = t.currentUser.whisperThreads.edges.find(function(t) {
                return t.node.id === e.data_object.thread_id
            });
            if (n) {
                var i = n.node.messages.edges.find(function(t) {
                    return t.node.id === e.data_object.message_id
                });
                i && (i.node.editedAt = new Date(1e3 * e.data_object.edited_at).toISOString(), i.node.content.content = e.data_object.body, i.node.content.emotes = Object(ce.b)(e.data_object.tags.emotes))
            }
            return t
        }

        function v(e, t, n) {
            if (!t.currentUser) return t;
            var i = t.currentUser.whisperThreads.edges.findIndex(function(t) {
                return t.node.id === e.data_object.id
            });
            if (i >= 0) {
                var a = t.currentUser.whisperThreads.edges[i],
                    r = a.node.messages.edges[0].cursor,
                    s = parseInt(r, 10) - e.data_object.last_read;
                a.node.unreadMessagesCount = s >= 0 ? s : 0, a.node.isMuted = e.data_object.muted, !a.node.isArchived && e.data_object.archived && n(e.data_object.id), a.node.isArchived = e.data_object.archived
            }
            return t
        }

        function b(e, t) {
            return t.currentUser ? (e.data_object.mark_all_read && t.currentUser.whisperThreads.edges.forEach(function(e) {
                e.node.unreadMessagesCount = 0
            }), t) : t
        }

        function k(e) {
            return {
                rightColumnExpanded: e.ui.rightColumnExpanded,
                theatreModeEnabled: e.ui.theatreModeEnabled,
                focusedThreadID: e.whispers.display.focusedID
            }
        }

        function S(e) {
            return {
                openThread: function(t) {
                    return e(U.l(t, Object(R.a)()))
                },
                closeThread: function(t) {
                    return e(U.h(t, Object(R.a)()))
                }
            }
        }
        var y = n(0),
            _ = n(1),
            N = n(504),
            E = n(452),
            T = n(449),
            C = n(144),
            D = n(6),
            w = n(9),
            I = n(58),
            P = n(17),
            O = Object(D.a)(i, a)(C.c),
            F = n(146),
            U = n(57),
            R = n(72),
            x = n(4),
            M = n(7),
            L = n(107),
            A = n(38),
            j = n(20),
            B = n(30),
            W = n(268),
            H = n(2),
            V = n(64),
            G = n(28),
            q = n(47),
            z = n(18),
            $ = n(66),
            K = n(108),
            Q = n(287),
            Y = n(3),
            J = (n(540), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleThreadClick = function() {
                        t.props.selectThread(t.props.threadID)
                    }, t.handleArchiveClick = function(e) {
                        e.stopPropagation(), t.props.archiveThread(t.props.threadID)
                    }, t
                }
                return y.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.user;
                    if (!e) return this.renderError();
                    var t = this.props.lastMessage ? Object(Q.a)(this.props.lastMessage.content.content, this.props.lastMessage.content.emotes, this.props.lastMessage.editedAt) : null,
                        n = this.props.unreadMessageCount,
                        i = e.displayName || e.login;
                    return _.createElement("div", {
                        onClick: this.handleThreadClick
                    }, _.createElement(Y._17, {
                        className: "whispers-list-item",
                        borderBottom: !0,
                        padding: 1,
                        display: Y.H.Flex,
                        flexDirection: Y.J.Row,
                        flexWrap: Y.K.NoWrap,
                        fullWidth: !0,
                        alignItems: Y.c.Center
                    }, _.createElement(Y.U, {
                        className: "whispers-list-item__avatar",
                        margin: {
                            right: .5
                        },
                        flexShrink: 0
                    }, _.createElement(Y.l, {
                        size: 30,
                        imageAlt: Object(H.d)("{interlocutorName}'s Avatar", {
                            interlocutorName: i
                        }, "WhisperThreadListItem"),
                        imageSrc: e.profileImageURL
                    })), _.createElement(Y.U, {
                        fullWidth: !0,
                        display: Y.H.Inline
                    }, _.createElement(Y._21, {
                        fontSize: Y.L.Size5,
                        bold: !0
                    }, i), _.createElement(Y.U, {
                        className: "whispers-list-item__last-message",
                        ellipsis: !0
                    }, t)), _.createElement(Y.U, {
                        className: "whispers-list-item__unread-count",
                        margin: {
                            right: 1
                        },
                        textAlign: Y._22.Right
                    }, _.createElement(Y._21, {
                        bold: !0
                    }, n > 0 && !this.props.muted ? n : null), this.props.muted && _.createElement(Y.U, {
                        display: Y.H.Flex,
                        alignItems: Y.c.Center,
                        justifyContent: Y.T.Center
                    }, _.createElement(Y._8, {
                        type: Y._10.Alt2,
                        asset: Y._9.WhisperMuted
                    }))), _.createElement("div", {
                        className: "whispers-list-item__archive"
                    }, _.createElement(Y.v, {
                        ariaLabel: Object(H.d)("Archive Thread", "WhisperThreadListItem"),
                        tabIndex: -1,
                        icon: Y._9.Close,
                        "data-a-target": "whispers-list-item__archive-button",
                        onClick: this.handleArchiveClick,
                        "data-click-out-id": "whispers-list-item__archive-button"
                    }))))
                }, t.prototype.renderError = function() {
                    return _.createElement(Y.U, null, _.createElement("p", null, Object(H.d)("Sorry, something went wrong fetching this conversation.", "WhisperThreadListItem")))
                }, t
            }(_.Component)),
            X = J,
            Z = n(90),
            ee = n(541),
            te = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.markAllWhispersAsRead = function() {
                        var e = Object(j.a)({
                            markAllAsRead: !0
                        });
                        n.props.markAllWhispersAsRead && (Object(Z.i)(), n.props.markAllWhispersAsRead(e)), n.props.onMarkAllMessagesRead && n.props.onMarkAllMessagesRead()
                    }, n.toggleDoNotDisturb = function() {
                        n.state.doNotDisturb ? (H.l.set("whisperDoNotDisturb", !1), Object(Z.f)(), n.setState({
                            doNotDisturb: !1
                        })) : (H.l.set("whisperDoNotDisturb", !0), Object(Z.g)(), n.setState({
                            doNotDisturb: !0
                        }))
                    }, n.state = {
                        doNotDisturb: H.l.get("whisperDoNotDisturb", !1)
                    }, n
                }
                return y.__extends(t, e), t.prototype.render = function() {
                    var e = this.state.doNotDisturb ? Object(H.d)("Disable Do Not Disturb", "ThreadsBoxSettings") : Object(H.d)("Enable Do Not Disturb", "ThreadsBoxSettings"),
                        t = Object(H.d)("Mark All Whispers as Read", "ThreadsBoxSettings");
                    return _.createElement(Y.U, {
                        className: "threads-box-settings",
                        display: Y.H.Flex,
                        flexDirection: Y.J.Column,
                        margin: 1
                    }, _.createElement(Y.S, {
                        ariaLabel: e,
                        onClick: this.toggleDoNotDisturb
                    }, _.createElement(Y.U, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, e)), _.createElement(Y.S, {
                        ariaLabel: t,
                        onClick: this.markAllWhispersAsRead
                    }, _.createElement(Y.U, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, t)))
                }, t = y.__decorate([Object(M.a)(ee, {
                    name: "markAllWhispersAsRead"
                })], t)
            }(_.Component),
            ne = te,
            ie = n(55),
            ae = (n(542), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onMarkAllMessagesRead = function() {
                        n.settingsMenu.toggleBalloon(!1)
                    }, n.renderUserSearchResult = function(e, t) {
                        var i = Object(H.d)("{username}'s avatar", {
                            username: e.name
                        }, "ThreadsBox");
                        return _.createElement("div", {
                            key: "searchResult:" + e.objectID,
                            onClick: n.handleUserSearchResultClick(e, t)
                        }, _.createElement(Y._17, {
                            className: "whispers-list-item",
                            borderBottom: !0,
                            padding: 1,
                            display: Y.H.Flex,
                            flexDirection: Y.J.Row,
                            flexWrap: Y.K.NoWrap,
                            fullWidth: !0,
                            alignItems: Y.c.Center
                        }, _.createElement(Y.U, {
                            margin: {
                                right: .5
                            },
                            flexShrink: 0
                        }, _.createElement(Y.l, {
                            size: 30,
                            imageSrc: e.profile_image,
                            imageAlt: i
                        })), _.createElement(Y.U, {
                            fullWidth: !0,
                            display: Y.H.Flex,
                            flexDirection: Y.J.Column
                        }, _.createElement(Y._21, {
                            fontSize: Y.L.Size5,
                            bold: !0
                        }, e.login), _.createElement(Y.U, null, " "))))
                    }, n.saveSettingsMenuRef = function(e) {
                        return n.settingsMenu = e
                    }, n.handleConversationsClick = function() {
                        n.setState(function(e) {
                            return {
                                open: !e.open
                            }
                        })
                    }, n.selectThread = function(e) {
                        n.handleClose(), n.clearSearchText(), n.props.selectThread(e)
                    }, n.handleClose = function() {
                        n.setState({
                            open: !1
                        })
                    }, n.clearSearchText = function() {
                        n.setState({
                            searchText: "",
                            searching: !1
                        })
                    }, n.onSearchInputChange = function(e) {
                        return y.__awaiter(n, void 0, void 0, function() {
                            var t, n = this;
                            return y.__generator(this, function(i) {
                                return t = e.currentTarget.value, clearTimeout(this.inputTimeout), t && 0 !== t.length ? (this.setState({
                                    searchText: t,
                                    searching: !0
                                }), this.inputTimeout = setTimeout(function() {
                                    n.search(n.state.searchText)
                                }, 200), [2]) : (this.inputTimeout = 0, this.clearSearchText(), [2])
                            })
                        })
                    }, n.handleUserSearchResultClick = function(e, t) {
                        return function() {
                            var i = e.objectID;
                            if (null !== n.props.currentUserID && i !== n.props.currentUserID) {
                                n.handleClose(), n.clearSearchText();
                                var a = Object(ie.a)(n.props.currentUserID, i);
                                Object(Z.e)({
                                    threadID: a,
                                    targetUserlogin: e.login,
                                    searchResultRank: t
                                }), Object(Z.b)({
                                    searchResultRank: t,
                                    searchQuery: n.state.searchText,
                                    isConversation: !1
                                }), n.props.selectThread(a)
                            }
                        }
                    }, n.filterExistingThreads = function(e) {
                        var t = e.toLowerCase();
                        return n.props.orderedThreadIDs.filter(function(e) {
                            var i = n.props.threadsByID[e].participants.find(function(e) {
                                return e.id !== n.props.currentUserID
                            });
                            return !(!i || !i.displayName) && i.displayName.toLowerCase().indexOf(t) >= 0
                        })
                    }, n.searchClient = new K.a(H.a.algoliaApplicationID, H.a.algoliaAPIKey), n.state = {
                        open: !1,
                        searchText: "",
                        searching: !1
                    }, n
                }
                return y.__extends(t, e), t.prototype.render = function() {
                    return _.createElement(V.a, {
                        onClickOut: this.handleClose
                    }, _.createElement(Y._17, {
                        className: "whispers-threads-box__container " + (this.state.open ? "whispers-threads-box__container--open" : ""),
                        display: Y.H.Flex,
                        flexDirection: Y.J.Column,
                        flexWrap: Y.K.NoWrap,
                        border: !0,
                        background: Y.m.Base,
                        position: Y._2.Absolute,
                        attachBottom: !0,
                        attachRight: !0,
                        "data-click-out-id": "threads-box",
                        "data-a-target": "threads-box-" + (this.state.open ? "open" : "closed")
                    }, this.renderHeader(), this.renderList(), this.renderFooter()))
                }, t.prototype.renderOpenCloseButton = function() {
                    var e = null;
                    if (this.props.unreadCount > 0) {
                        var t = this.props.unreadCount > 99 ? "99+" : this.props.unreadCount.toString();
                        e = _.createElement(Y.U, {
                            className: "whispers-threads-box__unread",
                            margin: {
                                y: .5
                            }
                        }, _.createElement("span", {
                            className: "whispers-threads-box__unread--count",
                            "data-a-target": "whisper-unreads"
                        }, t))
                    }
                    return _.createElement(Y._17, {
                        className: "whispers-threads-box__open-close",
                        position: Y._2.Relative,
                        background: Y.m.Alt2,
                        display: Y.H.Flex,
                        alignItems: Y.c.Center,
                        justifyContent: Y.T.Center
                    }, e, _.createElement(Y.v, {
                        ariaLabel: Object(H.d)("Close Threads", "WhisperThreadsBox"),
                        icon: Y._9.Conversations,
                        onClick: this.handleConversationsClick,
                        "data-a-target": "whisper-box-button"
                    }))
                }, t.prototype.renderList = function() {
                    var e = this;
                    if (!this.state.open) return null;
                    var t, n = null;
                    "" !== this.state.searchText && (n = _.createElement(Y._17, {
                        key: "otherPeopleDivider",
                        borderBottom: !0,
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, Object(H.d)("Other People", "WhispersThreadBox")));
                    var i = null;
                    if (this.state.searching ? i = _.createElement(Y.U, {
                            display: Y.H.Flex,
                            flexDirection: Y.J.Column,
                            margin: {
                                top: 4
                            },
                            alignItems: Y.c.Center
                        }, _.createElement(Y.X, {
                            delay: 0
                        })) : this.state.searchResults && this.state.searchResults.users && "" !== this.state.searchText && (i = this.state.searchResults.users.hits.filter(function(t) {
                            return !e.props.threadsByID[t.objectID]
                        }).map(this.renderUserSearchResult)), this.props.error) t = _.createElement(Y.U, {
                        margin: {
                            x: "auto"
                        },
                        display: Y.H.Flex,
                        justifyContent: Y.T.Center,
                        alignItems: Y.c.Center,
                        fullHeight: !0
                    }, _.createElement(Y._21, {
                        color: Y.F.Error
                    }, Object(H.d)("There was a problem loading whispers.", "WhisperThreadsBox")));
                    else if (this.props.loading) t = _.createElement(Y.X, null);
                    else {
                        var a = this.props.orderedThreadIDs;
                        "" !== this.state.searchText && (a = this.filterExistingThreads(this.state.searchText)), t = a.filter(function(t) {
                            return e.props.threadsByID[t] && !e.props.threadsByID[t].archived
                        }).map(function(t) {
                            var n = e.props.threadsByID[t];
                            return _.createElement(X, {
                                key: "whisperThread:" + n.id,
                                user: n.participants.find(function(t) {
                                    return t.id !== e.props.currentUserID
                                }),
                                threadID: n.id,
                                lastMessage: n.lastMessage,
                                archiveThread: e.props.archiveThread,
                                selectThread: e.selectThread,
                                unreadMessageCount: n.unreadMessagesCount,
                                muted: n.muted
                            })
                        })
                    }
                    return _.createElement(G.b, {
                        suppressScrollX: !0
                    }, _.createElement(Y.U, null, t, n, i, _.createElement(G.a, {
                        enabled: this.state.open,
                        loadMore: this.props.loadMore,
                        pixelThreshold: 200
                    })))
                }, t.prototype.renderHeader = function() {
                    return this.state.open ? _.createElement(Y._17, {
                        className: "whispers-threads-box__header",
                        "data-a-target": "whispers-threads-box__header",
                        alignItems: Y.c.Center,
                        background: Y.m.Alt,
                        borderBottom: !0,
                        color: Y.F.Base,
                        display: Y.H.Flex,
                        flexDirection: Y.J.Row,
                        flexGrow: 0,
                        flexShrink: 0,
                        padding: {
                            y: .5,
                            x: 1
                        },
                        "data-click-hide-id": "threads-box-header"
                    }, _.createElement(Y.U, {
                        flexGrow: 1,
                        display: Y.H.Flex
                    }, _.createElement(Y._21, {
                        type: Y._26.Span,
                        bold: !0
                    }, Object(H.d)("Whispers", "WhisperThreadsBox"))), _.createElement(q.a, {
                        ref: this.saveSettingsMenuRef
                    }, _.createElement(Y.v, {
                        ariaLabel: Object(H.d)("Settings", "WhisperThreadsBox"),
                        icon: Y._9.Gear,
                        "data-a-target": "whisper-settings-button"
                    }), _.createElement(Y.p, {
                        size: Y.r.Small,
                        direction: Y.q.BottomRight,
                        offsetX: "0.5rem"
                    }, _.createElement(ne, {
                        onMarkAllMessagesRead: this.onMarkAllMessagesRead
                    }))), _.createElement(Y.v, {
                        ariaLabel: Object(H.d)("Minimize", "WhisperThreadsBox"),
                        icon: Y._9.Minimize,
                        onClick: this.handleClose,
                        "data-a-target": "whisper-close-button"
                    })) : null
                }, t.prototype.renderFooter = function() {
                    return this.state.open ? _.createElement(Y._17, {
                        display: Y.H.Flex,
                        flexGrow: 0,
                        flexShrink: 0,
                        alignItems: Y.c.Center,
                        borderTop: !0,
                        background: Y.m.Alt
                    }, _.createElement(Y.U, {
                        flexGrow: 1,
                        padding: {
                            top: .5,
                            bottom: .5,
                            left: 1
                        }
                    }, _.createElement(Y._11, {
                        onChange: this.onSearchInputChange,
                        value: this.state.searchText,
                        placeholder: Object(H.d)("Search for People", "WhisperThreadsBox"),
                        id: "threads-box-filter",
                        autoFocus: !0,
                        "data-a-target": "whisper-search-input"
                    })), this.renderOpenCloseButton()) : this.renderOpenCloseButton()
                }, t.prototype.search = function(e) {
                    return y.__awaiter(this, void 0, void 0, function() {
                        var t;
                        return y.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return e ? [4, this.searchClient.queryForType($.a.Users, e, z.a())] : [2];
                                case 1:
                                    return t = n.sent(), this.setState({
                                        searchResults: t,
                                        searching: !1
                                    }), [2]
                            }
                        })
                    })
                }, t
            }(_.Component)),
            re = n(284),
            se = Object(D.a)(s, r)(re.a),
            oe = function(e) {
                for (var t = {}, n = 0, i = e; n < i.length; n++) {
                    var a = i[n];
                    t[a.id] = y.__assign({}, le(a))
                }
                return t
            },
            le = function(e) {
                return {
                    id: e.id,
                    messageHistory: e.messages.edges.map(function(e) {
                        return e.node
                    }).slice(0, -1),
                    lastMessage: e.messages.edges.map(function(e) {
                        return e.node
                    }).find(function(e) {
                        return !e.deletedAt
                    }) || null,
                    spamInfo: e.spamInfo,
                    participants: e.participants,
                    muted: e.isMuted,
                    archived: e.isArchived,
                    unreadMessagesCount: e.unreadMessagesCount
                }
            },
            ce = n(289),
            de = n(288),
            ue = n(543),
            pe = (n(544), n(545)),
            me = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.archiveThread = function(e) {
                        if (n.state.threadsByID[e]) {
                            var t = y.__assign({}, Object(j.a)({
                                threadID: e,
                                isArchived: !0
                            }), {
                                optimisticResponse: {
                                    updateWhisperThread: {
                                        thread: {
                                            __typename: "WhisperThread",
                                            id: e,
                                            isArchived: !0
                                        },
                                        __typename: "UpdateWhisperThreadPayload"
                                    }
                                }
                            });
                            n.props.archiveThread && (n.props.closeThread(e), n.props.data.currentUser && Object(Z.a)(e), n.props.archiveThread(t))
                        }
                    }, n.selectThread = function(e) {
                        n.props.openThread({
                            threadID: e,
                            collapsed: !1
                        })
                    }, n.loadMore = function() {
                        return y.__awaiter(n, void 0, void 0, function() {
                            return y.__generator(this, function(e) {
                                return this.props.data.loading || this.props.data.error ? [2] : [2, this.props.loadMore()]
                            })
                        })
                    }, n.handleThreadDataReport = function(e, t) {
                        n.state.threadsByID[e] || Object(j.d)(pe, {
                            cursor: null
                        }, function(e) {
                            return e.currentUser && e.currentUser.whisperThreads.edges.unshift({
                                cursor: "0",
                                node: y.__assign({}, t, {
                                    isArchived: !1
                                }),
                                __typename: "WhisperThreadEdge"
                            }), e
                        });
                        var i = y.__assign({}, n.state.threadsByID[e]);
                        t.messages && (i.messageHistory = t.messages.edges.map(function(e) {
                            return e.node
                        }).slice(0, -1)), !1 !== t.isMuted && !0 !== t.isMuted || (i.muted = t.isMuted);
                        var a = y.__assign({}, n.state.threadsByID, (r = {}, r[e] = i, r));
                        n.setState({
                            threadsByID: a,
                            unreadCount: o(a)
                        });
                        var r
                    };
                    var i = n.props.data.currentUser && oe(n.props.data.currentUser.whisperThreads.edges.map(function(e) {
                        return e.node
                    })) || {};
                    return n.state = {
                        error: !!n.props.data.error,
                        orderedThreadIDs: n.props.data.currentUser && n.props.data.currentUser.whisperThreads.edges.map(function(e) {
                            return e.node.id
                        }) || [],
                        threadsByID: i,
                        unreadCount: o(i),
                        emotes: {}
                    }, n
                }
                return y.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    if (e.data.error) this.setState({
                        error: !!e.data.error
                    });
                    else if (!e.data.loading && e.data.currentUser) {
                        var t = oe(e.data.currentUser.whisperThreads.edges.map(function(e) {
                                return e.node
                            })),
                            n = Object(W.a)(e.data.currentUser.emoteSets);
                        this.setState({
                            emotes: n,
                            threadsByID: t,
                            orderedThreadIDs: e.data.currentUser.whisperThreads.edges.map(function(e) {
                                return e.node.id
                            }),
                            unreadCount: o(t)
                        })
                    }
                }, t.prototype.render = function() {
                    if (!this.props.data.currentUser) return null;
                    var e = x({
                        whispers: !0,
                        "whispers--theatre-mode": this.props.theatreModeEnabled,
                        "whispers--right-column-expanded": this.props.rightColumnExpanded
                    });
                    return _.createElement(Y.U, {
                        className: e,
                        position: Y._2.Absolute,
                        attachBottom: !0,
                        attachLeft: !0,
                        margin: {
                            right: 1
                        }
                    }, _.createElement(se, {
                        currentUserID: this.props.data.currentUser.id,
                        emotes: this.state.emotes,
                        reportThreadData: this.handleThreadDataReport,
                        archiveThread: this.archiveThread
                    }), _.createElement(ae, {
                        currentUserID: this.props.data.currentUser.id,
                        error: this.state.error,
                        loading: this.props.data.loading,
                        unreadCount: this.state.unreadCount,
                        orderedThreadIDs: this.state.orderedThreadIDs,
                        threadsByID: this.state.threadsByID,
                        selectThread: this.selectThread,
                        archiveThread: this.archiveThread,
                        loadMore: this.loadMore
                    }))
                }, t = y.__decorate([Object(M.a)(pe, {
                    props: function(e) {
                        return y.__assign({}, e, {
                            loadMore: function() {
                                return e.data.fetchMore({
                                    query: pe,
                                    variables: y.__assign({}, e.data.variables, {
                                        cursor: e.data.currentUser && e.data.currentUser.whisperThreads.edges.length > 0 ? e.data.currentUser.whisperThreads.edges[e.data.currentUser.whisperThreads.edges.length - 1].cursor : null
                                    }),
                                    updateQuery: function(e, t) {
                                        var n = t.fetchMoreResult,
                                            i = n;
                                        return i.currentUser ? e.currentUser ? {
                                            currentUser: y.__assign({}, i.currentUser, {
                                                whisperThreads: y.__assign({}, i.currentUser.whisperThreads, {
                                                    edges: Object(j.b)(e.currentUser.whisperThreads.edges, i.currentUser.whisperThreads.edges)
                                                })
                                            })
                                        } : {
                                            currentUser: i.currentUser
                                        } : {
                                            currentUser: null
                                        }
                                    }
                                })
                            }
                        })
                    }
                }), Object(M.a)(ue, {
                    name: "archiveThread"
                }), Object(L.a)(function(e) {
                    return {
                        query: pe,
                        types: [A.c.WhisperDeleted, A.c.WhisperEdited, A.c.WhisperSent, A.c.WhisperAllThreadsUpdate, A.c.WhisperReceived, A.c.WhisperThreadUpdate],
                        variables: y.__assign({}, e.data.variables),
                        skip: !e.data.currentUser || void 0 === e.data.currentUser.id,
                        topic: Object(B.p)(e.data.currentUser && e.data.currentUser.id || ""),
                        mutator: function(t, n) {
                            if (!n.currentUser) return n;
                            if (l(t) || c(t)) {
                                if (c(t)) {
                                    var i = n.currentUser.whisperThreads.edges.find(function(e) {
                                        return e.node.id === t.data_object.thread_id
                                    });
                                    if (i) {
                                        var a = i.node.participants.find(function(e) {
                                            return e.id === "" + t.data_object.from_id
                                        });
                                        a && Object(Z.l)({
                                            targetUserLogin: a.login,
                                            threadID: t.data_object.thread_id
                                        })
                                    }
                                }
                                return h(t, n, e.focusedThreadID, e.openThread)
                            }
                            return d(t) ? f(t, n) : u(t) ? g(t, n) : p(t) ? v(t, n, e.closeThread) : m(t) ? b(t, n) : n
                        },
                        skipMessage: function(e, t) {
                            if (l(e)) {
                                if (!t.currentUser) return !1;
                                var n = t.currentUser.whisperThreads.edges.find(function(t) {
                                    return t.node.id === e.data_object.thread_id
                                });
                                if (n && n.node.messages.edges.findIndex(function(t) {
                                        return t.node.id === e.data_object.nonce
                                    }) >= 0) return !0
                            }
                            return !1
                        }
                    }
                })], t)
            }(_.Component),
            he = me,
            fe = Object(D.a)(k, S)(he),
            ge = n(10),
            ve = n(113),
            be = n(15),
            ke = n(5),
            Se = ve.a.wrap(function() {
                return n.e(48).then(n.bind(null, 2056))
            }, "AnonFrontPage"),
            ye = ve.a.wrap(function() {
                return n.e(32).then(n.bind(null, 2057))
            }, "BrowseCommunitiesPage"),
            _e = ve.a.wrap(function() {
                return n.e(32).then(n.bind(null, 2057))
            }, "BrowseForYouPage"),
            Ne = ve.a.wrap(function() {
                return n.e(32).then(n.bind(null, 2057))
            }, "BrowseCreativePage"),
            Ee = ve.a.wrap(function() {
                return n.e(41).then(n.bind(null, 2059))
            }, "ChannelClipsPage"),
            Te = ve.a.wrap(function() {
                return n.e(47).then(n.bind(null, 2060))
            }, "ChannelCollectionsPage"),
            Ce = ve.a.wrap(function() {
                return n.e(44).then(n.bind(null, 2061))
            }, "ChannelEventsPage"),
            De = ve.a.wrap(function() {
                return n.e(0).then(n.bind(null, 2062))
            }, "ChannelPage"),
            we = ve.a.wrap(function() {
                return n.e(40).then(n.bind(null, 2063))
            }, "ChannelVideosPage"),
            Ie = ve.a.wrap(function() {
                return n.e(34).then(n.bind(null, 2064))
            }, "ChannelClipsManagerPage"),
            Pe = ve.a.wrap(function() {
                return n.e(34).then(n.bind(null, 2064))
            }, "MyClipsManagerPage"),
            Oe = ve.a.wrap(function() {
                return n.e(57).then(n.bind(null, 2065))
            }, "DevOnlyRoot"),
            Fe = ve.a.wrap(function() {
                return n.e(45).then(n.bind(null, 2066))
            }, "DirectoryRootPage"),
            Ue = ve.a.wrap(function() {
                return n.e(54).then(n.bind(null, 2070))
            }, "DevOnlyTestingCarouselPage"),
            Re = ve.a.wrap(function() {
                return n.e(33).then(n.bind(null, 2071))
            }, "DirectoryPopularPage"),
            xe = ve.a.wrap(function() {
                return n.e(33).then(n.bind(null, 2071))
            }, "DirectoryPopularByLanguagePage"),
            Me = ve.a.wrap(function() {
                return n.e(32).then(n.bind(null, 2057))
            }, "BrowseGamePage"),
            Le = ve.a.wrap(function() {
                return n.e(55).then(n.bind(null, 2072))
            }, "EmailVerificationPage"),
            Ae = ve.a.wrap(function() {
                return n.e(49).then(n.bind(null, 2073))
            }, "EventLandingPage"),
            je = ve.a.wrap(function() {
                return n.e(50).then(n.bind(null, 2074))
            }, "FollowingRootPage"),
            Be = ve.a.wrap(function() {
                return n.e(46).then(n.bind(null, 2075))
            }, "FrontPage"),
            We = ve.a.wrap(function() {
                return n.e(56).then(n.bind(null, 2076))
            }, "ReportUserPage"),
            He = ve.a.wrap(function() {
                return n.e(51).then(n.bind(null, 2077))
            }, "StoreMerchPage"),
            Ve = ve.a.wrap(function() {
                return n.e(42).then(n.bind(null, 2078))
            }, "VideoWatchPage"),
            Ge = ve.a.wrap(function() {
                return n.e(52).then(n.bind(null, 2080))
            }, "GlobalNotificationSettingsPage"),
            qe = function() {
                return _.createElement(ge.c, {
                    path: "/",
                    to: "/directory/following"
                })
            },
            ze = function() {
                return window.location.reload(), null
            },
            $e = function(e) {
                return _.createElement(ge.c, {
                    to: "/popout/" + e.match.params.channelLogin + "/chat"
                })
            },
            Ke = function(e) {
                return _.createElement(ge.c, {
                    to: "/" + e.match.params.channelLogin + "/videos/all"
                })
            },
            Qe = function(e) {
                return _.createElement(ge.c, {
                    to: "/" + e.match.params.channelLogin + "/videos/archive"
                })
            },
            Ye = function(e) {
                return _.createElement(ge.c, {
                    to: "/directory/game/" + e.match.params.encodedCommunityName + "/videos/all"
                })
            },
            Je = function() {
                return _.createElement(ge.c, {
                    to: "/directory/all/xbox"
                })
            },
            Xe = function(e) {
                var t = e.isLoggedIn;
                return _.createElement(ge.e, null, H.a.buildType !== be.a.Production && _.createElement(ge.d, {
                    path: "/_dev/testing/carousel",
                    component: Ue
                }), H.a.buildType !== be.a.Production && _.createElement(ge.d, {
                    path: "/_dev",
                    component: Oe
                }), _.createElement(ge.d, {
                    exact: !0,
                    path: "/",
                    component: t ? Be : Se
                }), _.createElement(ge.d, {
                    path: "/bits",
                    render: ze
                }), _.createElement(ge.d, {
                    path: "/collections/:collectionID",
                    component: Ve
                }), _.createElement(ge.d, {
                    path: "/communities/:encodedCommunityName/details",
                    component: Fe
                }), _.createElement(ge.d, {
                    path: "/communities/:encodedCommunityName/:encodedLanguage",
                    component: Fe
                }), _.createElement(ge.d, {
                    path: "/communities/:encodedCommunityName",
                    component: Fe
                }), _.createElement(ge.d, {
                    path: "/directory/communities",
                    component: ye
                }), _.createElement(ge.d, {
                    path: "/directory/creative",
                    component: Ne
                }), _.createElement(ge.d, {
                    path: "/directory/foryou",
                    component: _e
                }), _.createElement(ge.d, {
                    path: "/directory/following/:category?",
                    component: je
                }), _.createElement(ge.d, {
                    path: "/directory/game/:encodedCommunityName/clips",
                    component: Fe
                }), H.a.buildType !== be.a.Production && _.createElement(ge.d, {
                    path: "/directory/game/:encodedCommunityName/details",
                    component: Fe
                }), _.createElement(ge.d, {
                    path: "/directory/game/:encodedCommunityName/videos/:filter",
                    component: Fe
                }), _.createElement(ge.d, {
                    path: "/directory/game/:encodedCommunityName/videos",
                    render: Ye
                }), _.createElement(ge.d, {
                    path: "/directory/game/:encodedCommunityName/:encodedLanguage",
                    component: Fe
                }), _.createElement(ge.d, {
                    path: "/directory/game/:encodedCommunityName",
                    component: Fe
                }), _.createElement(ge.d, {
                    path: "/directory/all/ps4",
                    component: Re
                }), _.createElement(ge.d, {
                    path: "/directory/all/xb1",
                    component: Je
                }), _.createElement(ge.d, {
                    path: "/directory/all/xbox",
                    component: Re
                }), _.createElement(ge.d, {
                    path: "/directory/all/:encodedLanguage",
                    component: xe
                }), _.createElement(ge.d, {
                    path: "/directory/all",
                    component: Re
                }), _.createElement(ge.d, {
                    path: "/directory/:category?",
                    component: Me
                }), _.createElement(ge.d, {
                    path: "/events/:eventName",
                    render: Ae
                }), _.createElement(ge.d, {
                    path: "/email-verification/:emailOpaqueId",
                    component: Le
                }), _.createElement(ge.d, {
                    path: "/following",
                    component: qe
                }), _.createElement(ge.d, {
                    path: "/popout",
                    render: ze
                }), _.createElement(ge.d, {
                    path: "/videos/:videoID",
                    component: Ve
                }), _.createElement(ge.d, {
                    path: "/store/merch",
                    component: He
                }), _.createElement(ge.d, {
                    path: "/store"
                }, _.createElement(ge.c, {
                    to: "/store/merch"
                })), _.createElement(ge.d, {
                    path: "/subs",
                    render: ze
                }), _.createElement(ge.d, {
                    path: "/settings/notifications",
                    component: Ge
                }), _.createElement(ge.d, {
                    path: "/:channelName/report",
                    component: We
                }), _.createElement(ge.d, {
                    path: "/:channelLogin/videos/(past_broadcasts?)",
                    render: Qe
                }), _.createElement(ge.d, {
                    path: "/:channelLogin/videos/:filter(all|archive|upload|highlight|past_premiere)",
                    component: we
                }), _.createElement(ge.d, {
                    path: "/:channelLogin/videos/:unknownFilter?",
                    render: Ke
                }), H.a.buildType !== be.a.Production && _.createElement(ge.d, {
                    path: "/:channelName/manager/clips/channel",
                    component: Ie
                }), H.a.buildType !== be.a.Production && _.createElement(ge.d, {
                    path: "/:channelName/manager/clips",
                    component: Pe
                }), _.createElement(ge.d, {
                    path: "/:channelName/clips",
                    component: Ee
                }), _.createElement(ge.d, {
                    path: "/:channelLogin/chat",
                    render: $e
                }), _.createElement(ge.d, {
                    path: "/:channelLogin/collections",
                    component: Te
                }), _.createElement(ge.d, {
                    path: "/:channelLogin/events",
                    component: Ce
                }), _.createElement(ge.d, {
                    path: "/:channelName/p/:entityID",
                    component: De
                }), _.createElement(ge.d, {
                    path: "/:channelName",
                    component: De
                }))
            },
            Ze = Object(ke.c)("DefaultRootRouter", {
                autoReportInteractive: !0
            })(Xe);
        n.d(t, "b", function() {
            return et
        }), n.d(t, "a", function() {
            return tt
        });
        var et = "twilight-main",
            tt = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.setMainRef = function(e) {
                        t.setState({
                            mainContentRef: e
                        })
                    }, t
                }
                return y.__extends(t, e), t.prototype.render = function() {
                    return _.createElement(Y.U, {
                        display: Y.H.Flex,
                        flexWrap: Y.K.NoWrap,
                        fullHeight: !0,
                        position: Y._2.Relative
                    }, _.createElement(O, null), _.createElement(Y.P, {
                        position: Y._2.Relative,
                        flexGrow: 1,
                        fullHeight: !0,
                        fullWidth: !0
                    }, _.createElement("main", {
                        className: et,
                        ref: this.setMainRef
                    }, _.createElement(T.a, null, _.createElement(Y.U, {
                        position: Y._2.Relative,
                        fullWidth: !0
                    }, _.createElement(Ze, {
                        isLoggedIn: this.props.isLoggedIn
                    }), _.createElement(N.b, {
                        mainRef: this.state.mainContentRef
                    }))), this.props.firstPageLoaded && _.createElement(fe, null))), _.createElement(E.a, null))
                }, t
            }(_.Component)
    },
    451: function(e, t, n) {
        "use strict";

        function i(e) {
            var t = Math.floor(e / 3600),
                n = Math.floor((e - 3600 * t) / 60),
                i = e - 3600 * t - 60 * n;
            return t < 10 && (t = "0" + t), n < 10 && (n = "0" + n), i < 10 && (i = "0" + i), t + "h" + n + "m" + i + "s"
        }

        function a(e) {
            return "" === e ? "" : e.startsWith("v") ? e : "v" + e
        }
        t.b = i, t.a = a
    },
    452: function(e, t, n) {
        "use strict";
        var i = n(290),
            a = n(0),
            r = n(1),
            s = n(2),
            o = n(18),
            l = n(143),
            c = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.renderPortal = function(e) {
                        l.d ? l.d.provideContent(e, n.contentID) : s.i.warn("RightColumn must be defined on the Root to manipulate its content.")
                    }, n.removePortal = function() {
                        l.d ? l.d.removeContent() : s.i.warn("RightColumn must be defined on the Root to manipulate its content.")
                    }, n.contentID = Object(o.a)(), n
                }
                return a.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    e.children ? this.renderPortal(e.children) : this.removePortal()
                }, t.prototype.componentDidMount = function() {
                    l.d || s.i.warn("RightColumn must be defined on the Root to manipulate its content."), this.props.children && this.renderPortal(this.props.children)
                }, t.prototype.componentWillUnmount = function() {
                    this.removePortal()
                }, t.prototype.render = function() {
                    return null
                }, t
            }(r.Component);
        n.d(t, "a", function() {
            return i.b
        }), n.d(t, "b", function() {
            return c
        })
    },
    454: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "currentUser"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "login"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "displayName"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "availability"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "activity"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "type"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "InlineFragment",
                                typeCondition: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Watching"
                                    }
                                },
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "user"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "InlineFragment",
                                typeCondition: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Streaming"
                                    }
                                },
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "stream"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "game"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "InlineFragment",
                                typeCondition: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Playing"
                                    }
                                },
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 323
            }
        };
        n.loc.source = {
            body: "fragment currentUser on User {\n  id\n  login\n  displayName\n  availability\n  activity {\n    type\n    ... on Watching {\n      user {\n        displayName\n      }\n    }\n    ... on Streaming {\n      stream {\n        game {\n          name\n        }\n      }\n    }\n    ... on Playing {\n      game {\n        name\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    455: function(e, t) {},
    456: function(e, t) {},
    457: function(e, t) {},
    458: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Core_Services_Spade_SubEvent_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "withVideo"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "videoID"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "canPrimeSubscribe"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "subscriptionBenefit"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "tier"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "purchasedWithPrime"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "video"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "videoID"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "withVideo"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "broadcastType"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 339
            }
        };
        n.loc.source = {
            body: "query Core_Services_Spade_SubEvent_User($channelID: ID!, $withVideo: Boolean!, $videoID: ID) {\n  user(id: $channelID) {\n    id\n    self {\n      canPrimeSubscribe\n      subscriptionBenefit {\n        id\n        tier\n        purchasedWithPrime\n      }\n    }\n  }\n  video(id: $videoID) @include(if: $withVideo) {\n    id\n    broadcastType\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    459: function(e, t) {},
    460: function(e, t) {},
    461: function(e, t) {},
    462: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "EmotePicker_EmotePicker_UserEmotes"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "emoteSets"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 144
            }
        };
        n.loc.source = {
            body: "query EmotePicker_EmotePicker_UserEmotes {\n  user {\n    id\n    emoteSets {\n      id\n      emotes {\n        id\n        token\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    463: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "EmotePicker_EmotePicker_UserSubscriptionProducts"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelOwnerID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelOwnerID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emoteSetID"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 265
            }
        };
        n.loc.source = {
            body: "query EmotePicker_EmotePicker_UserSubscriptionProducts($channelOwnerID: ID!) {\n  user(id: $channelOwnerID) {\n    id\n    login\n    displayName\n    subscriptionProducts {\n      id\n      url\n      emotes {\n        id\n        token\n      }\n      emoteSetID\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    464: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "WhisperThread_BlockUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BlockUserInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "blockUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "targetUser"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 127
            }
        };
        n.loc.source = {
            body: "mutation WhisperThread_BlockUser($input: BlockUserInput!) {\n  blockUser(input: $input) {\n    targetUser {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    465: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Presence_WatchingClick_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hosting"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "stream"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "game"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 279
            }
        };
        n.loc.source = {
            body: "query Presence_WatchingClick_User($login: String!) {\n  user(login: $login) {\n    id\n    stream {\n      id\n      game {\n        id\n        name\n      }\n    }\n    hosting {\n      id\n      stream {\n        id\n        game {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    466: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Whispers_Tracking_CurrentUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hasTurbo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "availability"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 107
            }
        };
        n.loc.source = {
            body: "query Whispers_Tracking_CurrentUser {\n  currentUser {\n    id\n    hasTurbo\n    availability\n    login\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    467: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Thread_BlockUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BlockUserInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "blockUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "targetUser"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 120
            }
        };
        n.loc.source = {
            body: "mutation Thread_BlockUser($input: BlockUserInput!) {\n  blockUser(input: $input) {\n    targetUser {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    468: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Thread_ReportUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportWhisperThreadInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "reportWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 137
            }
        };
        n.loc.source = {
            body: "mutation Thread_ReportUser($input: ReportWhisperThreadInput!) {\n  reportWhisperThread(input: $input) {\n    thread {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    469: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Thread_SetMuteThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateWhisperThreadInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "updateWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isMuted"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 154
            }
        };
        n.loc.source = {
            body: "mutation Thread_SetMuteThread($input: UpdateWhisperThreadInput!) {\n  updateWhisperThread(input: $input) {\n    thread {\n      id\n      isMuted\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    47: function(e, t, n) {
        "use strict";
        var i = n(398);
        n.d(t, "a", function() {
            return i.a
        })
    },
    470: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Thread_UnblockUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnblockUserInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "unblockUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "targetUser"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 126
            }
        };
        n.loc.source = {
            body: "mutation Thread_UnblockUser($input: UnblockUserInput!) {\n  unblockUser(input: $input) {\n    targetUser {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    471: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "WhisperThread_ReportUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportWhisperThreadInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "reportWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 144
            }
        };
        n.loc.source = {
            body: "mutation WhisperThread_ReportUser($input: ReportWhisperThreadInput!) {\n  reportWhisperThread(input: $input) {\n    thread {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    472: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "WhisperThread_SetThreadSpamStatus"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateWhisperThreadInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "updateWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "spamInfo"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "lastMarkedNotSpamAt"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "likelihood"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 225
            }
        };
        n.loc.source = {
            body: "mutation WhisperThread_SetThreadSpamStatus($input: UpdateWhisperThreadInput!) {\n  updateWhisperThread(input: $input) {\n    thread {\n      id\n      spamInfo {\n        lastMarkedNotSpamAt\n        likelihood\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    473: function(e, t) {},
    474: function(e, t) {},
    475: function(e, t) {},
    476: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Whispers_MarkThreadMessageRead"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateWhisperThreadInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "updateWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "unreadMessagesCount"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 176
            }
        };
        n.loc.source = {
            body: "mutation Whispers_MarkThreadMessageRead($input: UpdateWhisperThreadInput!) {\n  updateWhisperThread(input: $input) {\n    thread {\n      id\n      unreadMessagesCount\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    477: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "SendWhisper"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SendWhisperInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "sendWhisper"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "content"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "content"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "emotes"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "emoteID"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "setID"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "from"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "to"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "from"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "sentAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "editedAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "deletedAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 334
            }
        };
        n.loc.source = {
            body: "mutation SendWhisper($input: SendWhisperInput!) {\n  sendWhisper(input: $input) {\n    message {\n      id\n      content {\n        content\n        emotes {\n          id\n          emoteID\n          setID\n          from\n          to\n        }\n      }\n      from {\n        id\n      }\n      sentAt\n      editedAt\n      deletedAt\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    478: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "WhisperThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "whisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "userLastMessageRead"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "sentAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "unreadMessagesCount"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "messages"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "20"
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "content"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "content"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "emotes"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "emoteID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "setID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "from"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "to"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "from"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "sentAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "editedAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "deletedAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 539
            }
        };
        n.loc.source = {
            body: "query WhisperThread($id: ID!) {\n  whisperThread(id: $id) {\n    id\n    userLastMessageRead {\n      id\n      sentAt\n    }\n    unreadMessagesCount\n    messages(first: 20) {\n      edges {\n        cursor\n        node {\n          id\n          content {\n            content\n            emotes {\n              id\n              emoteID\n              setID\n              from\n              to\n            }\n          }\n          from {\n            id\n          }\n          sentAt\n          editedAt\n          deletedAt\n        }\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    479: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Whispers_Thread_Participants"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetUserID"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "blockedUsers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "chatColor"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "friends"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "availability"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "activity"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "type"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Playing"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "game"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Streaming"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "stream"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "game"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }, {
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "name"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Watching"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "user"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "displayName"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "login"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "hosting"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }, {
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "displayName"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetUserID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "title"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "imageURL"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "chatColor"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 1008
            }
        };
        n.loc.source = {
            body: "query Whispers_Thread_Participants($targetUserID: ID) {\n  currentUser {\n    id\n    blockedUsers {\n      id\n    }\n    chatColor\n    displayName\n    profileImageURL(width: 70)\n    login\n    friends {\n      edges {\n        node {\n          id\n        }\n        availability\n        activity {\n          type\n          ... on Playing {\n            game {\n              id\n              name\n            }\n          }\n          ... on Streaming {\n            stream {\n              id\n              game {\n                id\n                name\n              }\n            }\n          }\n          ... on Watching {\n            user {\n              id\n              displayName\n              login\n              hosting {\n                id\n                displayName\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  user(id: $targetUserID) {\n    id\n    displayBadges {\n      id\n      title\n      imageURL\n    }\n    chatColor\n    displayName\n    profileImageURL(width: 70)\n    login\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    48: function(e, t, n) {
        "use strict";

        function i(e) {
            return r.test(e)
        }
        n.d(t, "a", function() {
            return s
        });
        var a = n(1),
            r = (n.n(a), /^[\x00-\x7F]*$/),
            s = function(e, t, n) {
                return void 0 === n && (n = !1), t && e && !i(t) ? n ? t + " (" + e + ")" : a.createElement("span", null, t, " ", a.createElement("span", {
                    className: "intl-login"
                }, "(" + e + ")")) : t || (e || "")
            }
    },
    480: function(e, t) {},
    481: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Whispers_Thread_WhisperThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "cursor"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "whisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "userLastMessageRead"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "sentAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "participants"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "chatColor"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "profileImageURL"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "width"
                                            },
                                            value: {
                                                kind: "IntValue",
                                                value: "70"
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "spamInfo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "lastMarkedNotSpamAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "likelihood"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isMuted"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isArchived"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "messages"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "20"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "after"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "cursor"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "content"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "content"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "emotes"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "emoteID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "setID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "from"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "to"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "from"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "sentAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "editedAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "deletedAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "unreadMessagesCount"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 792
            }
        };
        n.loc.source = {
            body: "query Whispers_Thread_WhisperThread($id: ID!, $cursor: Cursor) {\n  whisperThread(id: $id) {\n    id\n    userLastMessageRead {\n      id\n      sentAt\n    }\n    participants {\n      id\n      chatColor\n      displayName\n      profileImageURL(width: 70)\n      login\n    }\n    spamInfo {\n      lastMarkedNotSpamAt\n      likelihood\n    }\n    isMuted\n    isArchived\n    messages(first: 20, after: $cursor) {\n      edges {\n        cursor\n        node {\n          id\n          content {\n            content\n            emotes {\n              id\n              emoteID\n              setID\n              from\n              to\n            }\n          }\n          from {\n            id\n          }\n          sentAt\n          editedAt\n          deletedAt\n        }\n      }\n    }\n    unreadMessagesCount\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    482: function(e, t) {},
    483: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FriendButton_CreateFriendRequest"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CreateFriendRequestInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "createFriendRequest"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 150
            }
        };
        n.loc.source = {
            body: "mutation FriendButton_CreateFriendRequest($input: CreateFriendRequestInput!) {\n  createFriendRequest(input: $input) {\n    user {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    484: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FriendButton"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "friends"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 130
            }
        };
        n.loc.source = {
            body: "query FriendButton {\n  currentUser {\n    id\n    friends {\n      edges {\n        node {\n          id\n        }\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    485: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FriendButton_UnfriendUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnfriendUserInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "unfriendUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 129
            }
        };
        n.loc.source = {
            body: "mutation FriendButton_UnfriendUser($input: UnfriendUserInput!) {\n  unfriendUser(input: $input) {\n    user {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    486: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_ReportReasons"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "content"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportContentType"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "reportReasons"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "content"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "content"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 118
            }
        };
        n.loc.source = {
            body: "query ReportUserModal_ReportReasons($content: ReportContentType!) {\n  reportReasons(content: $content) {\n    id\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    487: function(e, t) {},
    488: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_UserCommunities"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userId"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userId"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "directories"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "nodes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "directoryType"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 201
            }
        };
        n.loc.source = {
            body: "query ReportUserModal_UserCommunities($userId: ID!) {\n  user(id: $userId) {\n    id\n    directories {\n      nodes {\n        id\n        name\n        displayName\n        directoryType\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    489: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "GiftSubscribeButton_Gift_Eligibility"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "recipientLogin"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "String"
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "subProductId"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "recipientLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "canGift"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "product"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "subProductId"
                                                }
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 195
            }
        };
        n.loc.source = {
            body: "query GiftSubscribeButton_Gift_Eligibility($recipientLogin: String, $subProductId: String!) {\n  user(login: $recipientLogin) {\n    id\n    self {\n      canGift(product: $subProductId)\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    49: function(e, t, n) {
        "use strict";

        function i(e) {
            return a.__awaiter(this, void 0, void 0, function() {
                var t, n, i, c, d, u, p, m, h, f, g, v, b;
                return a.__generator(this, function(a) {
                    switch (a.label) {
                        case 0:
                            t = r.m.getVideoPlayerTrackingData().vodID, n = !!t, i = {
                                channelID: e.channelID,
                                withVideo: !1
                            }, n && (i.withVideo = !0, i.videoID = t), c = null, a.label = 1;
                        case 1:
                            return a.trys.push([1, 3, , 4]), [4, r.n.apollo.client.query({
                                query: l,
                                variables: i
                            })];
                        case 2:
                            return c = a.sent(), [3, 4];
                        case 3:
                            return d = a.sent(), r.i.error(d, "Failed to make query for channel info in FollowEvent reporting.", {
                                channelID: e.channelID
                            }), [3, 4];
                        case 4:
                            return u = c && c.data && c.data.user || null, c && !u && r.i.error(new Error("GraphQL empty response"), "Query for channel info in SubEvent reporting returned no data.", {
                                channelID: e.channelID
                            }), p = null, c && n && (m = c && c.data && c.data.video, m ? p = Object(o.a)(m.broadcastType) : r.i.error(new Error("GraphQL empty response"), "Query for video info in SubEvent reporting returned no data.", {
                                currentVideoID: t
                            })), h = u && u.self, f = h ? !!h.subscriptionBenefit : null, g = h && h.subscriptionBenefit && h.subscriptionBenefit.purchasedWithPrime || !1, v = h ? h.canPrimeSubscribe : null, b = {
                                action: e.action,
                                can_subscribe: v,
                                channel: e.channelLogin,
                                channel_id: e.channelID,
                                checkout_button_tier: e.checkoutButtonTier,
                                has_sub_credit: e.hasSubCredit,
                                host_channel: e.hostChannelLogin,
                                host_channel_id: e.hostChannelID,
                                is_menu_open: e.isMenuOpen,
                                is_subscribed: f,
                                is_subscribed_current_tier: h && h.subscriptionBenefit && h.subscriptionBenefit.tier,
                                sub_location: e.sub_location,
                                sub_recipient: e.giftRecipient,
                                modal: e.modal,
                                modal_level: e.modalLevel || "",
                                show_prime_content: e.showPrimeContent,
                                show_resub: u ? v && g : null,
                                vod_id: t,
                                vod_type: p,
                                viewport_height: window.innerHeight,
                                viewport_width: window.innerWidth
                            }, r.m.track(s.SpadeEventType.Subscription, b), [2]
                    }
                })
            })
        }
        n.d(t, "a", function() {
            return c
        }), t.b = i;
        var a = n(0),
            r = n(2),
            s = n(13),
            o = n(139),
            l = n(458),
            c = (n.n(l), {
                BuyGiftSub: "buy_gift_sub",
                ClickCheckout: "click_checkout_button",
                ClickMoreSubOptions: "more_options_click",
                ClickGiftSubOptions: "gift_options_click",
                ClickPrimeFAQ: "click_prime_faq",
                ClickSignupForPrime: "click_signup_for_prime",
                ClickBack: "back_top_level",
                CloseSubMenu: "close_subscribe_menu",
                GiftASub: "gift_a_sub",
                OpenSubMenu: "open_subscribe_menu",
                SubWithPrime: "samus_spend_credit"
            })
    },
    490: function(e, t) {},
    491: function(e, t) {},
    492: function(e, t) {},
    493: function(e, t) {},
    494: function(e, t) {},
    495: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChannelPage_SubscribeButton_Promotion"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "promotion"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "newPrice"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "oldPrice"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "discountType"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "discountValue"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "giftPromotion"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "newPrice"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "oldPrice"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "discountType"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "discountValue"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 361
            }
        };
        n.loc.source = {
            body: "query ChannelPage_SubscribeButton_Promotion($login: String!) {\nuser(login: $login) {\n  id\n  subscriptionProducts {\n    id\n    self {\n      promotion {\n        newPrice\n        oldPrice\n        discountType\n        discountValue\n      }\n    }\n      giftPromotion {\n        newPrice\n        oldPrice\n        discountType\n        discountValue\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    496: function(e, t) {},
    497: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChannelPage_SubscribeButton_Promotion"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "promotion"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "newPrice"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "oldPrice"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "discountType"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "discountValue"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "giftPromotion"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "newPrice"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "oldPrice"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "discountType"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "discountValue"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 361
            }
        };
        n.loc.source = {
            body: "query ChannelPage_SubscribeButton_Promotion($login: String!) {\nuser(login: $login) {\n  id\n  subscriptionProducts {\n    id\n    self {\n      promotion {\n        newPrice\n        oldPrice\n        discountType\n        discountValue\n      }\n    }\n      giftPromotion {\n        newPrice\n        oldPrice\n        discountType\n        discountValue\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    498: function(e, t) {},
    499: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChannelPage_SubscribeButton_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "price"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emoteSetID"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "canPrimeSubscribe"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "subscriptionBenefit"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "purchasedWithPrime"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "tier"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "endsAt"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "paidUpgrade"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "price"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "startsAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "gift"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "isGift"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "gifter"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "displayName"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hasPrime"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "requestInfo"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "countryCode"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 673
            }
        };
        n.loc.source = {
            body: "query ChannelPage_SubscribeButton_User($login: String!) {\n  user(login: $login) {\n    id\n    login\n    displayName\n    subscriptionProducts {\n      id\n      price\n      url\n      emoteSetID\n      displayName\n      name\n      emotes {\n        id\n      }\n    }\n    self {\n      canPrimeSubscribe\n      subscriptionBenefit {\n        id\n        purchasedWithPrime\n        tier\n        endsAt\n        paidUpgrade {\n          price\n          startsAt\n        }\n        gift {\n          isGift\n          gifter {\n            id\n            displayName\n          }\n        }\n      }\n    }\n  }\n  currentUser {\n    id\n    login\n    hasPrime\n  }\n  requestInfo {\n    countryCode\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    50: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = {
            Away: "AWAY",
            Busy: "BUSY",
            Idle: "IDLE",
            Invisible: "INVISIBLE",
            Offline: "OFFLINE",
            Online: "ONLINE"
        }
    },
    500: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_ReportUserCommunity"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportUserInCommunityInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "reportUserInCommunity"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 157
            }
        };
        n.loc.source = {
            body: "mutation ReportUserModal_ReportUserCommunity($input: ReportUserInCommunityInput!) {\n  reportUserInCommunity(input: $input) {\n    user {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    501: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_ReportUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportContentInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "reportContent"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "contentID"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 120
            }
        };
        n.loc.source = {
            body: "mutation ReportUserModal_ReportUser($input: ReportContentInput!) {\n  reportContent(input: $input) {\n    contentID\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    502: function(e, t) {},
    504: function(e, t, n) {
        "use strict";

        function i(e, t) {
            return !(!e && !t) && (!t || !e || (t.channelLogin !== e.channelLogin || t.vodID !== e.vodID || t.collectionID !== e.collectionID))
        }

        function a(e) {
            return {
                sideNavCollapsed: !e.ui.sideNavExpanded,
                rightNavCollapsed: !e.ui.rightColumnExpanded,
                theatreModeEnabled: e.ui.theatreModeEnabled
            }
        }

        function r(e) {
            return {
                isLoggedIn: Object(c.d)(e)
            }
        }

        function s(e) {
            return {
                theme: e.ui.theme,
                persistentPlayerEnabled: e.ui.persistentPlayerEnabled
            }
        }
        var o, l = n(6),
            c = n(17),
            d = n(0),
            u = n(1),
            p = n(10),
            m = n(2),
            h = n(4),
            f = n(11),
            g = n(290),
            v = n(144),
            b = n(272),
            k = n(3),
            S = (n(538), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        sideNavCollapsedByCSSBreakpoint: window.innerWidth < v.d
                    }, t.resizeAnimationFrame = 0, t.renderMiniTitle = function() {
                        return u.createElement(k.U, {
                            padding: {
                                y: .5,
                                right: .5
                            },
                            flexDirection: k.J.Row,
                            display: k.H.Flex,
                            alignItems: k.c.Center,
                            justifyContent: k.T.Between,
                            flexWrap: k.K.NoWrap,
                            className: "persistent-player__title",
                            zIndex: k._38.Above,
                            "data-test-selector": "persistent-player-mini-title"
                        }, u.createElement(k.U, {
                            ellipsis: !0,
                            margin: {
                                x: 1
                            }
                        }, u.createElement(k._21, {
                            fontSize: k.L.Size5,
                            type: k._26.Span
                        }, t.props.options.miniPlayerTitle)), u.createElement(k.v, {
                            ariaLabel: Object(m.d)("Dismiss Mini Player", "PersistentPlayerMini"),
                            icon: k._9.Close,
                            overlay: !0,
                            onClick: t.props.onClickDismiss,
                            "data-test-selector": "persistent-player-mini-dismiss"
                        }))
                    }, t.renderMiniHoverControls = function() {
                        var e = t.state.isPaused ? Object(m.d)("Play", "PersistentPlayerMini") : Object(m.d)("Pause", "PersistentPlayerMini");
                        return u.createElement(k.U, {
                            className: "persistent-player__hover-controls",
                            justifyContent: k.T.Center,
                            alignItems: k.c.Center,
                            display: k.H.Flex,
                            flexDirection: k.J.Row,
                            attachTop: !0,
                            attachBottom: !0,
                            attachLeft: !0,
                            attachRight: !0,
                            margin: {
                                top: 4
                            },
                            position: k._2.Absolute,
                            zIndex: k._38.Above,
                            "data-test-selector": "persistent-player-mini-hover"
                        }, t.renderMiniControl(k._9.MiniPlayerExpand, Object(m.d)("Expand Player", "PersistentPlayerMini"), "persistent-player-mini-expand", t.props.onClickExpand), u.createElement(k.U, {
                            margin: {
                                left: 2
                            }
                        }, t.renderMiniControl(t.state.isPaused ? k._9.MiniPlayerPlay : k._9.MiniPlayerPause, e, "persistent-player-mini-pause-play", t.togglePause)))
                    }, t.renderMiniControl = function(e, t, n, i) {
                        return u.createElement("button", {
                            className: "persistent-player__control",
                            onClick: i,
                            "aria-label": t,
                            "data-test-selector": n
                        }, u.createElement(k._8, {
                            asset: e,
                            width: 30,
                            height: 30
                        }))
                    }, t.renderMiniInterceptPointerView = function() {
                        return u.createElement(k.U, {
                            className: "persistent-player__intercept-view",
                            position: k._2.Absolute,
                            attachBottom: !0,
                            attachLeft: !0,
                            attachRight: !0,
                            zIndex: k._38.Above,
                            "data-test-selector": "persistent-player-mini-cover"
                        })
                    }, t.togglePause = function() {
                        t.setState(function(e) {
                            return {
                                shouldPause: !e.isPaused
                            }
                        })
                    }, t.onPauseToggled = function(e) {
                        t.setState({
                            isPaused: e,
                            shouldPause: e
                        })
                    }, t.collapseOnBreakpoint = function() {
                        var e = window.innerWidth;
                        e < v.d && !t.state.sideNavCollapsedByCSSBreakpoint ? t.setState({
                            sideNavCollapsedByCSSBreakpoint: !0
                        }) : e >= v.d && t.state.sideNavCollapsedByCSSBreakpoint && t.setState({
                            sideNavCollapsedByCSSBreakpoint: !1
                        }), t.resizeAnimationFrame = 0
                    }, t.handleWindowResize = function() {
                        t.resizeAnimationFrame || (t.resizeAnimationFrame = requestAnimationFrame(t.collapseOnBreakpoint))
                    }, t
                }
                return d.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    i(this.props.options.playerProps, e.options.playerProps) && this.setState({
                        shouldPause: !1
                    })
                }, t.prototype.componentDidMount = function() {
                    window.addEventListener("resize", this.handleWindowResize)
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("resize", this.handleWindowResize), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame)
                }, t.prototype.render = function() {
                    var e = this.context.getScrollContent();
                    if (!e) return null;
                    var t, n = this.props.theatreModeEnabled && !this.props.mini,
                        i = h({
                            "persistent-player--theatre": n
                        }),
                        a = this.props.mainRef.getBoundingClientRect();
                    if (n) t = {
                        position: "fixed",
                        left: 0,
                        top: 0,
                        maxHeight: "100vh",
                        height: "100%",
                        width: window.innerWidth < 820 || this.props.rightNavCollapsed ? "100%" : "calc(100% - " + g.a + ")",
                        zIndex: 3e3
                    };
                    else if (this.props.mini) t = {
                        position: "fixed",
                        width: "26rem",
                        height: "18.6rem",
                        left: a.left,
                        bottom: 0,
                        margin: "1rem",
                        zIndex: 1e3
                    };
                    else {
                        var r = this.props.contentRef.getBoundingClientRect(),
                            s = r.left - a.left,
                            o = a.right - r.right,
                            l = this.context.getRootScrollableOffsetHeight();
                        t = {
                            top: r.top - a.top + e.scrollTop,
                            left: s,
                            position: "absolute",
                            width: "100%",
                            maxWidth: "calc(100% - " + (s + o) + "px)",
                            maxHeight: "calc(100vh - 16rem)",
                            overflow: "hidden",
                            height: "auto",
                            marginTop: l ? "-" + l : void 0
                        }
                    }
                    return u.createElement("div", {
                        className: h("persistent-player", i),
                        style: t
                    }, this.props.mini && this.renderMiniTitle(), u.createElement(k.j, null, u.createElement(b.c, d.__assign({}, this.props.options.playerProps, {
                        instanceRef: this.props.onVideoPlayerInstance,
                        miniModeEnabled: this.props.mini,
                        paused: this.state.shouldPause,
                        onPauseToggled: this.onPauseToggled
                    }))), this.props.mini && this.renderMiniInterceptPointerView(), this.props.mini && this.renderMiniHoverControls())
                }, t.contextTypes = {
                    getScrollContent: f.func,
                    getRootScrollableOffsetHeight: f.func
                }, t
            }(u.Component)),
            y = Object(l.a)(a)(S);
        ! function(e) {
            e.CloseMini = "close", e.OpenMini = "open", e.ExpandPlayer = "expand", e.ContentChange = "content_change"
        }(o || (o = {}));
        var _;
        ! function(e) {
            e.Minimize = "minimize", e.Maximize = "maximize", e.UserMinimize = "user_minimize", e.UserMaximize = "user_maximize"
        }(_ || (_ = {}));
        var N, E = n(295),
            T = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.logger = m.i.withCategory("PersistentPlayerRoot"), n.trackMiniPlayerAction = function(e, t) {
                        n.videoPlayerComponent && n.videoPlayerComponent.trackMiniPlayerAction(e, t)
                    }, n.setVideoPlayerRef = function(e) {
                        return n.videoPlayerComponent = e
                    }, n.onClickExpand = function() {
                        if (n.state.options) {
                            if (n.state.overrides && n.state.overrides.onMiniPlayerExpand) return void n.state.overrides.onMiniPlayerExpand();
                            n.props.history.push(n.state.options.miniPlayerContentRoute), n.trackMiniPlayerAction(o.ExpandPlayer, _.UserMaximize)
                        }
                    }, n.onClickDismiss = function() {
                        if (n.state.options) {
                            if (n.state.overrides && n.state.overrides.onMiniPlayerDismiss) return void n.state.overrides.onMiniPlayerDismiss();
                            n.destroyPlayer(), n.trackMiniPlayerAction(o.CloseMini, _.UserMinimize)
                        }
                    }, n.onHistoryChange = function(e) {
                        var t = n.props.isLoggedIn,
                            i = Object(E.a)({
                                isLoggedIn: t,
                                location: e
                            });
                        i !== n.state.hideSideNav && n.setState({
                            hideSideNav: i
                        })
                    };
                    var i = t.isLoggedIn,
                        a = t.location;
                    return n.state = {
                        mini: !1,
                        hideSideNav: Object(E.a)({
                            isLoggedIn: i,
                            location: a
                        })
                    }, N && n.logger.warn("attempting to create a second instance of the Persistent Player Root. There should only be one in <Root>, use <PersistentPlayerContent> instead."), N = n, n
                }
                return d.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.historyUnlisten = m.n.history.listen(this.onHistoryChange)
                }, t.prototype.componentWillUnmount = function() {
                    this.historyUnlisten && this.historyUnlisten()
                }, t.prototype.render = function() {
                    return this.state.options && this.state.contentRef && this.props.mainRef ? u.createElement(y, {
                        options: this.state.options,
                        contentRef: this.state.contentRef,
                        mainRef: this.props.mainRef,
                        mini: this.state.mini,
                        hideSideNav: this.state.hideSideNav,
                        onClickExpand: this.onClickExpand,
                        onClickDismiss: this.onClickDismiss,
                        onVideoPlayerInstance: this.setVideoPlayerRef
                    }) : null
                }, t.prototype.destroyPlayer = function(e) {
                    this.setState({
                        mini: !1,
                        options: void 0,
                        overrides: void 0,
                        contentRef: void 0
                    }, e)
                }, t.prototype.requestVideoContent = function(e) {
                    var t = this,
                        n = function() {
                            t.setState({
                                contentRef: e.ref,
                                options: e.options,
                                overrides: e.overrides
                            }, e.onCompletion)
                        };
                    i(this.state.options && this.state.options.playerProps, e.options.playerProps) ? (this.trackMiniPlayerAction(o.ContentChange, ""), this.destroyPlayer(n)) : n()
                }, t.prototype.transitionToMiniPlayer = function(e) {
                    this.setState({
                        mini: !0
                    }), e && this.trackMiniPlayerAction(o.OpenMini, e)
                }, t.prototype.transitionToAnchoredPlayer = function(e) {
                    this.setState({
                        mini: !1
                    }), e && this.trackMiniPlayerAction(o.CloseMini, e)
                }, t
            }(u.Component),
            C = Object(p.f)(T),
            D = Object(l.a)(r)(C),
            w = n(33),
            I = null,
            P = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        userHasDismissedContent: !1
                    }, n.logger = m.i.withCategory("PersistentPlayer"), n.setDomRef = function(e) {
                        return n.domRef = e
                    }, n.onMiniPlayerDismiss = function() {
                        n.transitionToAnchoredPlayer(_.UserMinimize), n.setState({
                            userHasDismissedContent: !0
                        })
                    }, n.onMiniPlayerExpand = function() {
                        n.context.scrollToTop()
                    }, n.getPersistentPlayerOverrides = function() {
                        return {
                            onMiniPlayerDismiss: n.onMiniPlayerDismiss,
                            onMiniPlayerExpand: n.onMiniPlayerExpand
                        }
                    }, I && n.logger.error(new Error, "there should only ever be one <PersistentPlayer> rendered at a time. Verify that no other component above or below this in the tree has rendered one as well."), I = n, n
                }
                return d.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    N || this.logger.error(new Error, "No <PersistentPlayerRoot> found. Make sure it is mounted in the Root component"), this.unregister = this.context.registerReceiver(this), N.requestVideoContent({
                        ref: this.domRef,
                        options: this.props,
                        overrides: this.getPersistentPlayerOverrides(),
                        onCompletion: function() {
                            return e.transitionToAnchoredPlayer()
                        }
                    })
                }, t.prototype.componentWillReceiveProps = function(e) {
                    N.requestVideoContent({
                        ref: this.domRef,
                        options: e,
                        overrides: this.getPersistentPlayerOverrides()
                    })
                }, t.prototype.componentWillUnmount = function() {
                    var e = this;
                    if (this.unregister(), this.props.disablePersistenceOnUnmount || this.state.userHasDismissedContent || !this.props.persistentPlayerEnabled) return N.destroyPlayer(), void(I = null);
                    var t = this.props,
                        n = t.playerProps,
                        i = t.miniPlayerTitle,
                        a = t.miniPlayerContentRoute,
                        r = {
                            playerProps: {
                                channelLogin: n.channelLogin,
                                hostChannel: n.hostChannel,
                                collectionID: n.collectionID,
                                disableTheatreButton: n.disableTheatreButton,
                                nextVideoOffset: n.nextVideoOffset,
                                playerTypeOverride: n.playerTypeOverride,
                                vodID: n.vodID,
                                attachToWindow: n.attachToWindow
                            },
                            miniPlayerTitle: i,
                            miniPlayerContentRoute: a
                        };
                    N.requestVideoContent({
                        ref: this.domRef,
                        options: r,
                        onCompletion: function() {
                            return e.transitionToMiniPlayer(_.Minimize)
                        }
                    }), I = null
                }, t.prototype.render = function() {
                    return u.createElement(k._17, {
                        background: k.m.Alt2,
                        position: k._2.Absolute,
                        attachBottom: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        attachTop: !0,
                        refDelegate: this.setDomRef,
                        "data-target": "persistent-player-content",
                        className: Object(w.a)(this.props.theme)
                    })
                }, t.prototype.transitionToMiniPlayer = function(e) {
                    N.transitionToMiniPlayer(e)
                }, t.prototype.transitionToAnchoredPlayer = function(e) {
                    N.transitionToAnchoredPlayer(e)
                }, t.prototype.isMini = function() {
                    return N.state.mini
                }, t.prototype.checkVisible = function(e, t) {
                    var n = this.context.getScrollContent();
                    if (t && n) {
                        var i = this.domRef.getBoundingClientRect(),
                            a = n.getBoundingClientRect(),
                            r = i.top + i.height - a.top;
                        r <= 100 && this.props.persistentPlayerEnabled && !this.isMini() && !this.props.disablePersistenceOnScroll && !this.state.userHasDismissedContent && this.transitionToMiniPlayer(_.Minimize), r > 100 && (this.isMini() && this.transitionToAnchoredPlayer(_.Maximize), this.state.userHasDismissedContent && this.setState({
                            userHasDismissedContent: !1
                        }))
                    }
                }, t.contextTypes = {
                    registerReceiver: f.func,
                    getScrollContent: f.func,
                    scrollToTop: f.func
                }, t
            }(u.Component),
            O = Object(l.a)(s)(P);
        n.d(t, "b", function() {
            return D
        }), n.d(t, "a", function() {
            return O
        }), n.d(t, !1, function() {
            return _
        })
    },
    505: function(e, t, n) {
        "use strict";

        function i(e) {
            return e && "v" === e.charAt(0) ? e.substring(1) : e
        }
        t.a = i
    },
    506: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(1),
            r = n(2),
            s = n(68),
            o = n(5),
            l = n(272),
            c = n(3),
            d = function(e) {
                return !e.hostChannel || u(e.hostChannel)
            },
            u = function(e) {
                return e && r.n.dynamicSettings.get("blitz_channels", []).includes(e.toLocaleLowerCase())
            },
            p = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.logger = r.n.logger.withCategory("nfl-frame"), t.hidePlayerControlsDisplay = function(e) {
                        [document.querySelector(".player-buttons-left"), document.querySelector(".player-buttons-right > .pl-flex"), document.querySelector("#js-paused-overlay")].forEach(function(t) {
                            if (t) {
                                var n = e ? "none" : "";
                                t.style.display = n
                            }
                        })
                    }, t.setRef = function(e) {
                        t.frameRef = e, t.frameRef && (t.frameRef.setAttribute("allow", "geolocation; encrypted-media;"), t.frameRef.addEventListener("load", t.onFrameLoad))
                    }, t.onFrameLoad = function() {
                        t.hidePlayerControlsDisplay(!0)
                    }, t.onFrameError = function() {
                        t.logger.error(new Error("NFLFrameError"), "Frame failed to load. The onError callback was fired.")
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.playerType === l.b.Frontpage,
                        t = r.n.dynamicSettings.get("blitz_player_front", !0);
                    if (!this.props.channelLogin || !u(this.props.channelLogin) || !d(this.props) || e && !t) return this.hidePlayerControlsDisplay(!1), null;
                    var n = r.n.dynamicSettings.get("blitz_frame_url", "https://twitch.amazon.com/prime/video/");
                    this.hidePlayerControlsDisplay(!0);
                    var i = {
                        loggedIn: "" + this.props.isLoggedIn
                    };
                    return a.createElement(c.U, {
                        position: c._2.Absolute,
                        zIndex: c._38.Default,
                        fullHeight: !0,
                        fullWidth: !0
                    }, a.createElement(c.P, {
                        fullHeight: !0,
                        fullWidth: !0
                    }, a.createElement("iframe", {
                        "data-test-selector": "blitz-frame",
                        onError: this.onFrameError,
                        src: Object(s.a)("" + n + this.props.channelLogin, i),
                        scrolling: "no",
                        ref: this.setRef
                    })))
                }, t = i.__decorate([Object(o.c)("NFLFrame", {
                    autoReportInteractive: !0
                })], t)
            }(a.Component);
        n.d(t, !1, function() {
            return "blitz-frame"
        }), n.d(t, "a", function() {
            return "blitz_channels"
        }), n.d(t, "b", function() {
            return p
        })
    },
    507: function(e, t) {},
    508: function(e, t) {},
    510: function(e, t) {},
    511: function(e, t) {},
    512: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Core_Services_Spade_Video"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "video"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "broadcastType"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 94
            }
        };
        n.loc.source = {
            body: "query Core_Services_Spade_Video($id: ID!) {\n  video(id: $id) {\n    id\n    broadcastType\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    513: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FollowButton_FollowEvent_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isPartner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hosting"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "stream"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "game"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 282
            }
        };
        n.loc.source = {
            body: "query FollowButton_FollowEvent_User($id: ID!) {\n  user(id: $id) {\n    id\n    isPartner\n    stream {\n      id\n      game {\n        id\n        name\n      }\n    }\n    hosting {\n      id\n      stream {\n        id\n        game {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    514: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FollowButton_FollowUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "FollowUserInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "followUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "follow"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "disableNotifications"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 143
            }
        };
        n.loc.source = {
            body: "mutation FollowButton_FollowUser($input: FollowUserInput!) {\n  followUser(input: $input) {\n    follow {\n      disableNotifications\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    515: function(e, t) {},
    516: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FollowButton_UnfollowUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnfollowUserInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "unfollowUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "follow"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "disableNotifications"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 149
            }
        };
        n.loc.source = {
            body: "mutation FollowButton_UnfollowUser($input: UnfollowUserInput!) {\n  unfollowUser(input: $input) {\n    follow {\n      disableNotifications\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    517: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FollowButton_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "follower"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "disableNotifications"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 204
            }
        };
        n.loc.source = {
            body: "query FollowButton_User($login: String!) {\n  user(login: $login) {\n    id\n    displayName\n    login\n    self {\n      follower {\n        disableNotifications\n      }\n    }\n  }\n  currentUser {\n    id\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    518: function(e, t) {},
    519: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "UserCard"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bannerImageURL"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "description"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "availability"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "activity"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "Playing"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "game"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "Streaming"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "stream"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "game"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "Watching"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "user"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "displayName"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "login"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 525
            }
        };
        n.loc.source = {
            body: "query UserCard($id: ID!) {\n  user(id: $id) {\n    id\n    login\n    bannerImageURL\n    displayName\n    description\n    profileImageURL(width: 70)\n    availability\n    activity {\n      type\n      ... on Playing {\n        game {\n          id\n          name\n        }\n      }\n      ... on Streaming {\n        stream {\n          id\n          game {\n            id\n            name\n          }\n        }\n      }\n      ... on Watching {\n        user {\n          id\n          displayName\n          login\n        }\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    520: function(e, t) {},
    521: function(e, t) {},
    522: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "SideNav_FeaturedChannels"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "language"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "String"
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "featuredStreams"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "language"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "language"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "broadcaster"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "login"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "profileImageURL"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "width"
                                                    },
                                                    value: {
                                                        kind: "IntValue",
                                                        value: "70"
                                                    }
                                                }],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 280
            }
        };
        n.loc.source = {
            body: "query SideNav_FeaturedChannels($language: String) {\n  featuredStreams(language: $language) {\n   \tstream {\n      id\n      broadcaster {\n        id\n        displayName\n        login\n        profileImageURL(width: 70)\n      }\n      game {\n        id\n        name\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    523: function(e, t) {},
    524: function(e, t) {},
    525: function(e, t) {},
    526: function(e, t) {},
    527: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FollowedChannels_CurrentUser_FollowedVideos"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "videoTypes"
                        }
                    },
                    type: {
                        kind: "ListType",
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "BroadcastType"
                                }
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "followedVideos"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "100"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "types"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "videoTypes"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "title"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "viewCount"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "publishedAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "previewThumbnailURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "126"
                                                            }
                                                        }, {
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "height"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "71"
                                                            }
                                                        }],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "owner"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "displayName"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "self"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "viewingHistory"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "position"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 507
            }
        };
        n.loc.source = {
            body: "query FollowedChannels_CurrentUser_FollowedVideos($videoTypes: [BroadcastType!]) {\n  currentUser {\n    id\n    followedVideos(first: 100, types: $videoTypes) {\n      edges {\n        node {\n          id\n          title\n          viewCount\n          publishedAt\n          previewThumbnailURL(width: 126, height: 71)\n          owner {\n            id\n            displayName\n          }\n          self {\n            viewingHistory {\n              position\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    528: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FollowedChannels"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "limit"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Int"
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "cursor"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "sort"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "StreamSort"
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "follows"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "limit"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "after"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "cursor"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "displayName"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "login"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "profileImageURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "70"
                                                            }
                                                        }],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "stream"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "title"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "viewersCount"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "game"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "lastBroadcast"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "game"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "pageInfo"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "hasNextPage"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "followedLiveUsers"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "limit"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "sort"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "sort"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "nodes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "login"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "profileImageURL"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "width"
                                                    },
                                                    value: {
                                                        kind: "IntValue",
                                                        value: "70"
                                                    }
                                                }],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "stream"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "title"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "viewersCount"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "game"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "type"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "lastBroadcast"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "game"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 1052
            }
        };
        n.loc.source = {
            body: "query FollowedChannels($limit: Int, $cursor: Cursor, $sort: StreamSort) {\n  currentUser {\n    id\n    follows(first: $limit, after: $cursor) {\n      edges {\n        cursor\n        node {\n          id\n          displayName\n          login\n          profileImageURL(width: 70)\n          stream {\n            id\n            title\n            viewersCount\n            game {\n              id\n              name\n            }\n          }\n          lastBroadcast {\n            id\n            game {\n              id\n              name\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n    followedLiveUsers(first: $limit, sort: $sort) {\n      nodes {\n        id\n        displayName\n        login\n        profileImageURL(width: 70)\n        stream {\n          id\n          title\n          viewersCount\n          game {\n            id\n            name\n          }\n          type\n        }\n        lastBroadcast {\n          id\n          game {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    529: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RecommendedChannels"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "first"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Int"
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "recID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "language"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "recommendations"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "liveRecommendations"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "first"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "first"
                                                }
                                            }
                                        }, {
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "recRequestID"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "recID"
                                                }
                                            }
                                        }, {
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "language"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "language"
                                                }
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "generationID"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "responseID"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "nodes"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "broadcaster"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "displayName"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "login"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "profileImageURL"
                                                                },
                                                                arguments: [{
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "width"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "70"
                                                                    }
                                                                }],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "game"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 502
            }
        };
        n.loc.source = {
            body: "query RecommendedChannels($first: Int, $recID: String!, $language: String!) {\n  currentUser {\n    id\n    recommendations {\n      liveRecommendations (first: $first, recRequestID: $recID, language: $language) {\n        generationID\n        responseID\n        nodes {\n          id\n          broadcaster {\n            id\n            displayName\n            login\n            profileImageURL(width: 70)\n          }\n          game {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    530: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecommendedFriend_CreateFriendRequest"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CreateFriendRequestInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "createFriendRequest"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 155
            }
        };
        n.loc.source = {
            body: "mutation RecommendedFriend_CreateFriendRequest($input: CreateFriendRequestInput!) {\n  createFriendRequest(input: $input) {\n    user {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    531: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecommendedFriend_DismissFriendRecommendation"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DismissFriendRecommendationInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "dismissFriendRecommendation"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 179
            }
        };
        n.loc.source = {
            body: "mutation RecommendedFriend_DismissFriendRecommendation($input: DismissFriendRecommendationInput!) {\n  dismissFriendRecommendation(input: $input) {\n    user {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    532: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RecommendedFriends"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "recommendations"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "friends"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "user"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "displayName"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "login"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "profileImageURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "70"
                                                            }
                                                        }],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 221
            }
        };
        n.loc.source = {
            body: "query RecommendedFriends {\n  currentUser {\n    id\n    recommendations {\n      friends {\n        user {\n          id\n          displayName\n          login\n          profileImageURL(width: 70)\n        }\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    533: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecommendedFriend_CancelFriendRequest"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CancelFriendRequestInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "cancelFriendRequest"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 155
            }
        };
        n.loc.source = {
            body: "mutation RecommendedFriend_CancelFriendRequest($input: CancelFriendRequestInput!) {\n  cancelFriendRequest(input: $input) {\n    user {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    534: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "SearchFriendResult_CreateFriendRequest"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CreateFriendRequestInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "createFriendRequest"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 156
            }
        };
        n.loc.source = {
            body: "mutation SearchFriendResult_CreateFriendRequest($input: CreateFriendRequestInput!) {\n  createFriendRequest(input: $input) {\n    user {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    535: function(e, t) {},
    536: function(e, t) {},
    537: function(e, t) {},
    538: function(e, t) {},
    539: function(e, t) {},
    540: function(e, t) {},
    541: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Threads_MarkAllWhispersAsRead"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateAllWhisperThreadsInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "updateAllWhisperThreads"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "count"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 139
            }
        };
        n.loc.source = {
            body: "mutation Threads_MarkAllWhispersAsRead($input: UpdateAllWhisperThreadsInput!) {\n  updateAllWhisperThreads(input: $input) {\n    count\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    542: function(e, t) {},
    543: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Thread_ArchiveThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateWhisperThreadInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "updateWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isArchived"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 157
            }
        };
        n.loc.source = {
            body: "mutation Thread_ArchiveThread($input: UpdateWhisperThreadInput!) {\n  updateWhisperThread(input: $input) {\n    thread {\n      id\n      isArchived\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    544: function(e, t) {},
    545: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Whispers_Whispers_UserWhisperThreads"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "cursor"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "emoteSets"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "whisperThreads"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "10"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "after"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "cursor"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "participants"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "chatColor"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "displayName"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "profileImageURL"
                                                                },
                                                                arguments: [{
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "width"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "70"
                                                                    }
                                                                }],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "login"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "spamInfo"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "lastMarkedNotSpamAt"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "likelihood"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "messages"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "first"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "20"
                                                            }
                                                        }],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "edges"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "cursor"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "node"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }, {
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "sentAt"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }, {
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "editedAt"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }, {
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "deletedAt"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }, {
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "from"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        alias: null,
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "id"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: [],
                                                                                        selectionSet: null
                                                                                    }]
                                                                                }
                                                                            }, {
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "content"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        alias: null,
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "content"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: [],
                                                                                        selectionSet: null
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        alias: null,
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "emotes"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: [],
                                                                                        selectionSet: {
                                                                                            kind: "SelectionSet",
                                                                                            selections: [{
                                                                                                kind: "Field",
                                                                                                alias: null,
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "id"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: [],
                                                                                                selectionSet: null
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                alias: null,
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "emoteID"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: [],
                                                                                                selectionSet: null
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                alias: null,
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "setID"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: [],
                                                                                                selectionSet: null
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                alias: null,
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "from"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: [],
                                                                                                selectionSet: null
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                alias: null,
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "to"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: [],
                                                                                                selectionSet: null
                                                                                            }]
                                                                                        }
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "userLastMessageRead"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "sentAt"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "isMuted"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "isArchived"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "unreadMessagesCount"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 1232
            }
        };
        n.loc.source = {
            body: "query Whispers_Whispers_UserWhisperThreads($cursor: Cursor) {\n  currentUser {\n    id\n    login\n    emoteSets {\n      id\n      emotes {\n        id\n        token\n      }\n    }\n   \twhisperThreads(first: 10, after: $cursor) {\n      edges {\n        cursor\n        node {\n          id\n          participants {\n            id\n            chatColor\n            displayName\n            profileImageURL(width: 70)\n            login\n          }\n          spamInfo {\n            lastMarkedNotSpamAt\n            likelihood\n          }\n          messages(first: 20) {\n            edges {\n              cursor\n              node {\n                id\n                sentAt\n                editedAt\n                deletedAt\n                from {\n                  id\n                }\n                content {\n                  content\n                  emotes {\n                    id\n                    emoteID\n                    setID\n                    from\n                    to\n                  }\n                }\n              }\n            }\n          }\n          userLastMessageRead {\n            id\n            sentAt\n          }\n          isMuted\n          isArchived\n          unreadMessagesCount\n        }\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    55: function(e, t, n) {
        "use strict";

        function i(e, t) {
            return parseInt(t, 10) < parseInt(e, 10) ? t + "_" + e : e + "_" + t
        }

        function a(e, t) {
            return e.split("_").find(function(e) {
                return e !== t
            }) || null
        }
        t.a = i, t.b = a
    },
    57: function(e, t, n) {
        "use strict";

        function i(e, t) {
            return {
                type: d,
                data: e,
                contentWidth: t
            }
        }

        function a(e, t) {
            return {
                type: u,
                threadID: e,
                contentWidth: t
            }
        }

        function r(e, t) {
            return {
                type: p,
                threadID: e,
                contentWidth: t
            }
        }

        function s(e, t) {
            return {
                type: m,
                threadID: e,
                contentWidth: t
            }
        }

        function o(e) {
            return {
                type: g,
                contentWidth: e
            }
        }

        function l(e, t) {
            return {
                type: h,
                threadID: e,
                contentWidth: t
            }
        }

        function c(e, t) {
            return {
                type: f,
                threadID: e,
                contentWidth: t
            }
        }
        n.d(t, "f", function() {
            return d
        }), n.d(t, "b", function() {
            return u
        }), n.d(t, "c", function() {
            return p
        }), n.d(t, "d", function() {
            return m
        }), n.d(t, "e", function() {
            return h
        }), n.d(t, "g", function() {
            return f
        }), n.d(t, "a", function() {
            return g
        }), t.l = i, t.h = a, t.i = r, t.j = s, t.m = o, t.k = l, t.n = c;
        var d = "whispers.THREAD_OPENED",
            u = "whispers.THREAD_CLOSED",
            p = "whispers.THREAD_COLLAPSED",
            m = "whispers.THREAD_EXPANDED",
            h = "whispers.THREAD_FOCUSED",
            f = "whispers.THREAD_UNFOCUSED",
            g = "whispers.CONTENT_RESIZED"
    },
    64: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(1),
            r = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.setContainerRef = function(e) {
                        t.container = e
                    }, t.handleGlobalClick = function(e) {
                        var n = e.target;
                        t.isParentOf(n) || t.props.onClickOut(e)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    document.addEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.componentWillUnmount = function() {
                    document.removeEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.render = function() {
                    var e = this.props,
                        t = (e.onClickOut, i.__rest(e, ["onClickOut"]));
                    return a.createElement("div", i.__assign({}, t, {
                        ref: this.setContainerRef
                    }), this.props.children)
                }, t.prototype.isParentOf = function(e) {
                    for (var t = e; t;) {
                        if (t === this.container) return !0;
                        t = t.parentElement
                    }
                    return !1
                }, t
            }(a.Component);
        n.d(t, "a", function() {
            return r
        })
    },
    66: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e.Games = "game", e.Videos = "vod", e.VideosNewest = "vod_by_created_at", e.Users = "user", e.Channels = "live_channel", e.Communities = "community"
        }(i || (i = {}))
    },
    71: function(e, t, n) {
        "use strict";

        function i(e, t) {
            if (!e) return null;
            switch (e.type) {
                case d.a.Playing:
                    return e.game && e.game.name ? Object(c.d)("playing {game}", {
                        game: e.game.name
                    }, "PresenceActivity") : Object(c.d)("playing", "PresenceActivity");
                case d.a.Watching:
                    if (!t && e.user.hosting && e.user.hosting.displayName) return Object(c.d)("watching {user} with the {community} community", {
                        user: e.user.hosting.displayName,
                        community: e.user.displayName
                    }, "PresenceActivity");
                    if (!t && e.user.stream && e.user.stream.game && e.user.stream.game.name) return Object(c.d)("watching {user} stream {game}", {
                        user: e.user.displayName,
                        game: e.user.stream.game.name
                    }, "PresenceActivity");
                    var n = e.user.hosting && e.user.hosting.displayName ? e.user.hosting.displayName : e.user.displayName;
                    return Object(c.d)("watching {user}", {
                        user: n
                    }, "PresenceActivity");
                case d.a.Streaming:
                    return e.stream && e.stream.game && e.stream.game.name ? Object(c.d)("streaming {game}", {
                        game: e.stream.game.name
                    }, "PresenceActivity") : Object(c.d)("streaming", "PresenceActivity");
                default:
                    return null
            }
        }

        function a(e, t) {
            if (!t) return null;
            switch (t.type) {
                case d.a.Streaming:
                    return "/" + e;
                case d.a.Watching:
                    return "/" + t.user.login;
                default:
                    return null
            }
        }

        function r(e) {
            var t = Object(c.d)("Online", "PresenceAvailability");
            switch (e) {
                case u.a.Away:
                    return Object(c.d)("Away", "PresenceAvailability");
                case u.a.Busy:
                    return Object(c.d)("Busy", "PresenceAvailability");
                case u.a.Idle:
                    return Object(c.d)("Idle", "PresenceAvailability");
                case u.a.Offline:
                    return Object(c.d)("Offline", "PresenceAvailability");
                case u.a.Invisible:
                    return Object(c.d)("Invisible", "PresenceAvailability");
                case u.a.Online:
                default:
                    return t
            }
        }

        function s(e) {
            return function(t) {
                return function(n) {
                    function i(t) {
                        var i = n.call(this, t) || this;
                        return i.options = e(t), i
                    }
                    return f.__extends(i, n), i.prototype.componentDidMount = function() {
                        this.options.skip || this.subscribe(this.options)
                    }, i.prototype.componentWillReceiveProps = function(t) {
                        var n = e(t);
                        n.topic === this.options.topic || n.skip || (this.unsubscribe(), this.subscribe(n)), this.options = n
                    }, i.prototype.componentWillUnmount = function() {
                        this.unsubscribe()
                    }, i.prototype.render = function() {
                        return l.createElement(t, f.__assign({}, this.props))
                    }, i.prototype.subscribe = function(e) {
                        this.unsubscriber = Object(g.i)({
                            fragment: e.fragment,
                            id: e.id,
                            topic: e.topic,
                            type: e.type,
                            mutator: e.mutator
                        })
                    }, i.prototype.unsubscribe = function() {
                        this.unsubscriber && this.unsubscriber()
                    }, i
                }(l.Component)
            }
        }

        function o(e) {
            return function(t) {
                return s(function(t) {
                    var n = e(t);
                    return {
                        id: "User:" + n.id,
                        skip: n.skip,
                        fragment: k,
                        topic: Object(g.f)(n.currentUserID),
                        type: v.c.Presence,
                        mutator: function(e, t) {
                            if (!t) return null;
                            var i = n.id;
                            if (e.data.user_id !== +i) return t;
                            var a = "$User:" + i + ".activity";
                            return t.availability = e.data.availability.toUpperCase(), t.activity = Object(b.a)(e.data.activity, a), t
                        }
                    }
                })(t)
            }
        }
        var l = n(1),
            c = n(2),
            d = n(110),
            u = n(50),
            p = function(e) {
                return l.createElement("span", {
                    "data-a-target": "presence-text"
                }, i(e.activity, e.condensed) || r(e.availability))
            },
            m = n(3),
            h = function(e) {
                var t = m._4.Online;
                switch (e.availability) {
                    case u.a.Idle:
                    case u.a.Away:
                        t = m._4.Away;
                        break;
                    case u.a.Busy:
                        t = m._4.Busy;
                        break;
                    case u.a.Invisible:
                        t = m._4.Invisible;
                        break;
                    case u.a.Offline:
                        t = m._4.Offline;
                        break;
                    case u.a.Online:
                        t = m._4.Online;
                        break;
                    default:
                        t = m._4.Online
                }
                return l.createElement(m._3, {
                    status: t
                })
            },
            f = n(0),
            g = n(30),
            v = n(38),
            b = n(283),
            k = n(454);
        n.d(t, "b", function() {
            return p
        }), n.d(t, "a", function() {
            return h
        }), n.d(t, !1, function() {
            return o
        }), n.d(t, "c", function() {
            return i
        }), n.d(t, "d", function() {
            return a
        }), n.d(t, !1, function() {
            return r
        })
    },
    72: function(e, t, n) {
        "use strict";

        function i() {
            if (a.b) {
                return +window.getComputedStyle(a.b).getPropertyValue("width").replace("px", "")
            }
            return 0
        }
        t.a = i;
        var a = n(284)
    },
    87: function(e, t, n) {
        "use strict";

        function i(e) {
            return function(t) {
                return function(n) {
                    function i(t) {
                        var i = n.call(this, t) || this;
                        i.unsubscribers = {};
                        var a = {};
                        return e.map(function(e) {
                            e.skip && e.skip(t) || (a[i.getTopic(e.topic, t)] = {
                                isSubscribing: !0
                            })
                        }), i.state = {
                            status: a,
                            messages: {}
                        }, i
                    }
                    return a.__extends(i, n), i.prototype.componentDidMount = function() {
                        var t = this;
                        e.map(function(e) {
                            if (!e.skip || !e.skip(t.props)) {
                                var n = t.getTopic(e.topic, t.props);
                                t.unsubscribers[n] = s.j.subscribe({
                                    topic: n,
                                    success: function() {
                                        t.setState(function(e) {
                                            return {
                                                status: a.__assign({}, e.status, (t = {}, t[n] = {
                                                    isSubscribing: !1
                                                }, t))
                                            };
                                            var t
                                        })
                                    },
                                    failure: function(e) {
                                        t.setState(function(t) {
                                            return {
                                                status: a.__assign({}, t.status, (i = {}, i[n] = {
                                                    error: e,
                                                    isSubscribing: !1
                                                }, i))
                                            };
                                            var i
                                        })
                                    },
                                    onMessage: function(n) {
                                        e.mapMessageTypesToProps[n.type || ""] ? t.setState(function(t) {
                                            return {
                                                messages: a.__assign({}, t.messages, (i = {}, i[e.mapMessageTypesToProps[n.type || ""]] = n, i))
                                            };
                                            var i
                                        }) : e.mapMessageTypesToProps["*"] && t.setState(function(t) {
                                            return {
                                                messages: a.__assign({}, t.messages, (i = {}, i[e.mapMessageTypesToProps["*"]] = n, i))
                                            };
                                            var i
                                        })
                                    }
                                })
                            }
                        })
                    }, i.prototype.componentWillReceiveProps = function(t) {
                        var n = this,
                            i = {},
                            r = {};
                        e.forEach(function(e) {
                            if (!e.skip || !e.skip(t)) {
                                var o = n.getTopic(e.topic, t);
                                i[o] || (i[o] = {
                                    isSubscribing: !0
                                }), n.unsubscribers[o] ? r[o] = n.unsubscribers[o] : r[o] = s.j.subscribe({
                                    topic: o,
                                    success: function() {
                                        n.setState(function(e) {
                                            return {
                                                status: a.__assign({}, e.status, (t = {}, t[o] = {
                                                    isSubscribing: !1
                                                }, t))
                                            };
                                            var t
                                        })
                                    },
                                    failure: function(e) {
                                        n.setState(function(t) {
                                            return {
                                                status: a.__assign({}, t.status, (n = {}, n[o] = {
                                                    error: e,
                                                    isSubscribing: !1
                                                }, n))
                                            };
                                            var n
                                        })
                                    },
                                    onMessage: function(t) {
                                        e.mapMessageTypesToProps[t.type || ""] ? n.setState(function(n) {
                                            return {
                                                messages: a.__assign({}, n.messages, (i = {}, i[e.mapMessageTypesToProps[t.type || ""]] = t, i))
                                            };
                                            var i
                                        }) : e.mapMessageTypesToProps["*"] && n.setState(function(n) {
                                            return {
                                                messages: a.__assign({}, n.messages, (i = {}, i[e.mapMessageTypesToProps["*"]] = t, i))
                                            };
                                            var i
                                        })
                                    }
                                })
                            }
                        }), Object.keys(this.unsubscribers).forEach(function(e) {
                            r[e] || n.unsubscribers[e]()
                        }), this.unsubscribers = r, this.setState(function(e) {
                            return {
                                status: a.__assign({}, e.status, i)
                            }
                        })
                    }, i.prototype.componentWillUnmount = function() {
                        var e = this;
                        Object.keys(this.unsubscribers).map(function(t) {
                            return e.unsubscribers[t]()
                        })
                    }, i.prototype.render = function() {
                        var e = {
                            pubsub: {
                                messages: this.state.messages,
                                status: this.state.status
                            }
                        };
                        return r.createElement(t, a.__assign({}, this.props, e))
                    }, i.prototype.getTopic = function(e, t) {
                        return "string" == typeof e ? e : e(t)
                    }, i
                }(r.Component)
            }
        }
        var a = n(0),
            r = n(1),
            s = n(2);
        n.d(t, "a", function() {
            return i
        })
    },
    88: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return l
        }), n.d(t, "c", function() {
            return c
        }), n.d(t, "a", function() {
            return u
        }), n.d(t, "e", function() {
            return h
        }), n.d(t, "d", function() {
            return f
        });
        var i = n(0),
            a = n(269),
            r = {
                "^B-?\\)$": "B)",
                "^:-?[z|Z|\\|]$": ":|",
                "^:-?\\)$": ":)",
                "^:-?\\($": ":(",
                "^:-?(p|P)$": ":P",
                "^;-?(p|P)$": ";P",
                "^:-?[\\\\/]$": ":/",
                "^;-?\\)$": ";)",
                "^R-?\\)$": "R)",
                "^:>$": ":>",
                "^[oO](_|\\.)[oO]$": "O_o",
                "^:-?D$": ":D",
                "^:-?(o|O)$": ":O",
                "^>\\($": ">(",
                "^:-?(?:7|L)$": ":7",
                "^:-?(S|s)$": ":S",
                "^#-?[\\\\/]$": "#/",
                "^<\\]$": "<]",
                "^<3$": "<3",
                "^&lt;3$": "<3",
                "^&lt;\\]$": "<]",
                "^&gt;\\($": ">("
            },
            s = ["1.0", "2.0", "3.0"],
            o = new Set([457, 33, 42, 0]),
            l = function(e) {
                return e.map(function(e) {
                    var t = m(e.token),
                        n = r[t] || t,
                        a = s.reduce(function(t, n) {
                            var i = t.concat("https://static-cdn.jtvnw.net/emoticons/v1/" + e.id + "/" + n + " " + n + "x");
                            return "3.0" !== n && (i = i.concat(", ")), i
                        }, "");
                    return i.__assign({
                        displayName: n,
                        srcSet: a
                    }, e)
                })
            },
            c = function(e) {
                var t = m(e);
                return r[t] || t
            },
            d = function(e) {
                return e.slice().sort(function(e, t) {
                    return parseInt(e.id, 10) - parseInt(t.id, 10)
                })
            },
            u = function(e) {
                for (var t = [], n = [], i = 0, a = e; i < a.length; i++) {
                    var r = a[i];
                    o.has(parseInt(r.id, 10)) ? t.push({
                        id: r.id,
                        emotes: l(d(r.emotes))
                    }) : n.push({
                        id: r.id,
                        emotes: l(d(r.emotes))
                    })
                }
                return n.concat(t)
            },
            p = function(e) {
                return /[\|\\\^\$\*\+\?\:\#]/.test(e)
            },
            m = function(e) {
                return p(e) ? "^" + e.replace(/\\(?=[&;:])/g, "") + "$" : e
            },
            h = function(e, t) {
                var n = a.b,
                    i = [],
                    r = [],
                    s = [],
                    o = new RegExp("^" + t, "i");
                return e.forEach(function(e) {
                    n[e.token] ? s.push(e) : e.token.match(o) ? i.push(e) : r.push(e)
                }), i.sort(function(e, t) {
                    return e.token < t.token ? -1 : e.token > t.token ? 1 : 0
                }), r.sort(function(e, t) {
                    return e.token < t.token ? -1 : e.token > t.token ? 1 : 0
                }), s.sort(function(e, t) {
                    return n[t.token].count - n[e.token].count
                }), s.concat(i).concat(r)
            },
            f = function(e) {
                var t = {};
                return e.filter(function(e) {
                    return !t.hasOwnProperty(e.token) && (t[e.token] = !0)
                })
            }
    },
    89: function(e, t, n) {
        "use strict";

        function i(e) {
            return e.some(function(e) {
                return !!e.self && !!e.self.promotion
            })
        }

        function a(e) {
            return e.some(function(e) {
                return !!e.giftPromotion
            })
        }

        function r(e, t) {
            var n;
            return t ? n = e.giftPromotion : e.self && (n = e.self.promotion), n ? n.newPrice : e.price
        }

        function s(e, t) {
            var n;
            return t ? n = e.giftPromotion : e.self && (n = e.self.promotion), n ? n.discountValue : 0
        }
        t.d = i, t.c = a, t.a = r, t.b = s
    },
    90: function(e, t, n) {
        "use strict";
        var i = n(280);
        n.d(t, "a", function() {
            return i.b
        }), n.d(t, "b", function() {
            return i.c
        }), n.d(t, "c", function() {
            return i.d
        }), n.d(t, "d", function() {
            return i.e
        }), n.d(t, "e", function() {
            return i.f
        }), n.d(t, "f", function() {
            return i.g
        }), n.d(t, "g", function() {
            return i.h
        }), n.d(t, "h", function() {
            return i.i
        }), n.d(t, "i", function() {
            return i.j
        }), n.d(t, "j", function() {
            return i.k
        }), n.d(t, "k", function() {
            return i.m
        }), n.d(t, "l", function() {
            return i.p
        }), n.d(t, "m", function() {
            return i.q
        })
    }
});
//# sourceMappingURL=pages.subs-1bf7f5f3e3f0f39ab6568f1b2703a2b1.js.map