webpackJsonp([36], {
    "+3pi": function(e, t, n) {
        "use strict";
        var i, r = n("GiK3"),
            a = n("6sO2"),
            o = n("Odds");
        n("bBGx");
        ! function(e) {
            e[e.ShowMore = 0] = "ShowMore", e[e.ShowLess = 1] = "ShowLess"
        }(i || (i = {}));
        var s = function(e) {
            var t = o._7.Between;
            return e.lessDisabled && (t = o._7.End), r.createElement(o._8, {
                padding: 1,
                display: o.R.Flex,
                fullWidth: !0,
                overflow: o._11.Hidden,
                textAlign: o._45.Left,
                justifyContent: t
            }, !e.lessDisabled && r.createElement("button", {
                className: "side-nav-show-more-toggle__button",
                onClick: e.onClickLess,
                "data-a-target": "side-nav-show-less-button",
                "data-test-selector": i.ShowLess
            }, Object(a.d)("Show less", "SideNavShowMoreToggleButton")), !e.moreDisabled && r.createElement("button", {
                className: "side-nav-show-more-toggle__button",
                onClick: e.onClickMore,
                "data-a-target": "side-nav-show-more-button",
                "data-test-selector": i.ShowMore
            }, Object(a.d)("Show more", "SideNavShowMoreToggleButton")))
        };
        n.d(t, !1, function() {
            return i
        }), n.d(t, "a", function() {
            return s
        })
    },
    "+6x9": function(e, t, n) {
        "use strict";
        var i, r, a = n("TToO"),
            o = n("HW6M"),
            s = n("GiK3"),
            l = n("HM6l"),
            c = n("Odds");
        n("JhPt");
        ! function(e) {
            e.Default = "default", e.Medium = "medium", e.Large = "large"
        }(i || (i = {})),
        function(e) {
            e.Default = "default", e.Brand = "brand"
        }(r || (r = {}));
        var d = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return a.__extends(t, e), t.prototype.render = function() {
                var e = "esports-square__mask--locked-" + Object(l.a)(),
                    t = "esports-square__mask--locked-" + Object(l.a)(),
                    n = "esports-square__pattern--" + Object(l.a)(),
                    a = void 0,
                    d = void 0;
                this.props.locked ? (a = "esports-square__mask--locked", d = "url(#" + e + ")") : void 0 === this.props.hasInsiderPass || this.props.hasInsiderPass || (a = "esports-square__mask--locked", d = "url(#" + t + ")");
                var u = o({
                        "esports-square__svg--border": !this.props.noBorder
                    }, {
                        "esports-square__svg--border__brand": this.props.borderType === r.Brand
                    }, {
                        "esports-square__svg--border__none": this.props.noBorder
                    }),
                    p = o({
                        "esports-square__svg--large": this.props.size === i.Large
                    }, {
                        "esports-square__svg--medium": this.props.size === i.Medium
                    }),
                    m = 59,
                    h = 0;
                return this.props.borderType === r.Brand && (m = 57, h = 1), s.createElement(c._8, {
                    className: "esports-square",
                    textAlign: c._45.Center
                }, s.createElement("svg", {
                    className: p,
                    width: "60px",
                    height: "60px",
                    viewBox: "0 0 60 60"
                }, s.createElement("defs", null, s.createElement("pattern", {
                    id: n,
                    patternUnits: "userSpaceOnUse",
                    width: "100",
                    height: "100"
                }, s.createElement("image", {
                    xlinkHref: this.props.imageURL,
                    x: 40,
                    y: 18,
                    width: 40,
                    height: 40
                })), s.createElement("filter", {
                    id: e
                }, s.createElement("feColorMatrix", {
                    type: "matrix",
                    values: "0.3 0 0 0 0 0 0.3 0 0 0 0 0 0.3 0 0 0 0 0 0.3 0"
                })), s.createElement("filter", {
                    id: t
                }, s.createElement("feColorMatrix", {
                    type: "matrix",
                    values: "0.12 0 0 0 0 0 0.04 0 0 0 0 0 0.68 0 0 0 0 0 1 0"
                })), s.createElement("rect", {
                    id: "path-esports-square-bounding-rect",
                    x: "30",
                    y: "7",
                    width: "60",
                    height: "60",
                    rx: "5"
                })), s.createElement("g", {
                    id: "Reward-hex-med",
                    stroke: "none",
                    strokeWidth: "1",
                    fill: "none",
                    fillRule: "evenodd",
                    transform: "translate(-30.000000, -7.000000)"
                }, s.createElement("g", {
                    id: "Rectangle-14"
                }, s.createElement("use", {
                    className: "esports-square__svg--background",
                    fillRule: "evenodd",
                    xlinkHref: "#path-esports-square-bounding-rect"
                }), s.createElement("use", {
                    "data-test-selector": a,
                    filter: d,
                    xlinkHref: "#path-esports-square-bounding-rect",
                    fill: "url(#" + n + ")"
                }), s.createElement("rect", {
                    className: u,
                    strokeWidth: "1",
                    x: "" + (30.5 + h),
                    y: "" + (7.5 + h),
                    width: "" + m,
                    height: "" + m,
                    rx: "5"
                }), void 0 !== this.props.hasInsiderPass && !this.props.hasInsiderPass && s.createElement("path", {
                    className: "esports-hexagon__svg--lock",
                    transform: "translate(50, 28)",
                    fill: "white",
                    d: "M7.987 6.599C7.987 5.166 8.685 4 9.997 4c1.311 0 2.009 1.166 2.009 2.599v2.412H7.987V6.599zm7.256 2.412h-1.248V6.599C13.995 4.063 12.411 2 9.997 2S5.998 4.063 5.998 6.599v2.412H4.751c-.415 0-.751.359-.751.8v7.397c0 .442.336.8.751.8h10.492c.414 0 .751-.358.751-.8V9.811c0-.441-.337-.8-.751-.8z",
                    fillRule: "evenodd"
                })))))
            }, t
        }(s.PureComponent);
        n.d(t, !1, function() {
            return "esports-square__mask--locked"
        }), n.d(t, !1, function() {
            return "esports-square__mask--locked"
        }), n.d(t, !1, function() {
            return "esports-square__pattern"
        }), n.d(t, "c", function() {
            return i
        }), n.d(t, "b", function() {
            return r
        }), n.d(t, "a", function() {
            return d
        })
    },
    "+R+X": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RecommendedFriends"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "recommendations"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "friends"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "user"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "displayName"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "login"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "profileImageURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "70"
                                                            }
                                                        }],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 136
            }
        };
        n.loc.source = {
            body: "query RecommendedFriends {\ncurrentUser {\nid\nrecommendations {\nfriends {\nuser {\nid\ndisplayName\nlogin\nprofileImageURL(width: 70)\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "+YN9": function(e, t) {},
    "+Znq": function(e, t, n) {
        "use strict";
        var i = n("jetF");
        n.d(t, "a", function() {
            return i.a
        })
    },
    "+gWs": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "WhisperThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "whisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "userLastMessageRead"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "sentAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "unreadMessagesCount"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "messages"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "20"
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "content"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "content"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "emotes"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "emoteID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "setID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "from"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "to"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "from"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "sentAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "editedAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "deletedAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 264
            }
        };
        n.loc.source = {
            body: "query WhisperThread($id: ID!) {\nwhisperThread(id: $id) {\nid\nuserLastMessageRead {\nid\nsentAt\n}\nunreadMessagesCount\nmessages(first: 20) {\nedges {\ncursor\nnode {\nid\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n}\n}\nfrom {\nid\n}\nsentAt\neditedAt\ndeletedAt\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "+p4h": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChannelPage_SubscribeBalloon_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "price"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emoteSetID"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "promotion"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "newPrice"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "oldPrice"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "discountType"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "discountValue"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "giftPromotion"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "newPrice"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "oldPrice"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "discountType"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "discountValue"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "canPrimeSubscribe"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "subscriptionBenefit"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "purchasedWithPrime"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "tier"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "platform"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "renewsAt"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "endsAt"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "paidUpgrade"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "price"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "startsAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "gift"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isGift"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "gifter"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "displayName"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hasPrime"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "requestInfo"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "countryCode"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 554
            }
        };
        n.loc.source = {
            body: "query ChannelPage_SubscribeBalloon_User($login: String!) {\nuser(login: $login) {\nid\nlogin\ndisplayName\nsubscriptionProducts {\nid\nprice\nurl\nemoteSetID\ndisplayName\nname\nemotes {\nid\n}\nself {\npromotion {\nnewPrice\noldPrice\ndiscountType\ndiscountValue\n}\n}\ngiftPromotion {\nnewPrice\noldPrice\ndiscountType\ndiscountValue\n}\n}\nself {\ncanPrimeSubscribe\nsubscriptionBenefit {\nid\npurchasedWithPrime\ntier\nplatform\nrenewsAt\nendsAt\npaidUpgrade {\nprice\nstartsAt\n}\ngift {\nisGift\ngifter {\nid\ndisplayName\n}\n}\n}\n}\n}\ncurrentUser {\nid\nlogin\nhasPrime\n}\nrequestInfo {\ncountryCode\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "+xsx": function(e, t) {},
    "/3Cb": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "claimPrimeOffer"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ClaimPrimeOfferInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "claimPrimeOffer"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "claimData"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "hasEntitlement"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 143
            }
        };
        n.loc.source = {
            body: "mutation claimPrimeOffer($input: ClaimPrimeOfferInput!) {\nclaimPrimeOffer(input: $input) {\nself {\nclaimData\nhasEntitlement\n}\nerror {\ncode\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "/3Lr": function(e, t, n) {
        "use strict";
        n.d(t, "d", function() {
            return s
        }), n.d(t, "c", function() {
            return l
        }), n.d(t, "a", function() {
            return c
        }), n.d(t, "b", function() {
            return i
        }), n.d(t, "e", function() {
            return r
        });
        var i, r, a, o, s = {
                BitsLeaderboardEvents: "leaderboard-events-v1",
                CampaignGlobalEvents: "campaign-events",
                CampaignUserEvents: "user-campaign-events",
                ChannelBitsEvents: "channel-bits-events-v1",
                ChannelBitsPinEvents: "channel-bit-events-public",
                ChannelEventUpdates: "channel-event-updates",
                ChannelSubscribeEvents: "channel-subscribe-events-v1",
                BroadcastSettingsUpdate: "broadcast-settings-update",
                ChatRoom: "chatrooms-room-v1",
                ChatRoomsChannel: "chatrooms-channel-v1",
                ChatRoomsUser: "chatrooms-user-v1",
                Friendship: "friendship",
                ImageUpload: "user-image-update",
                ModerationActionsByUserAndChannel: "chat_moderator_actions",
                OnsiteNotifications: "onsite-notifications",
                PayoutOnboardingEvents: "payout-onboarding-events",
                Presence: "presence",
                Raid: "raid",
                StreamChange: "stream-change-v1",
                StreamChatRoom: "stream-chat-room-v1",
                UploadService: "upload",
                UserBitsUpdates: "user-bits-updates-v1",
                UserCommerceEvents: "user-commerce-events",
                UserCrateEvents: "user-crate-events-v1",
                UserSubscribeEvents: "user-subscribe-events-v1",
                VideoPlayback: "video-playback",
                VideoPlaybackById: "video-playback-by-id",
                VideoThumbnailProcessing: "video-thumbnail-processing",
                Whispers: "whispers"
            },
            l = {
                BitsPinEvent: "bits-pin-event",
                BitsLeaderboardEvent: "bits-leaderboard-event",
                ChannelStreamDown: "stream-down",
                ChannelStreamUp: "stream-up",
                BroadcastSettingsUpdate: "broadcast_settings_update",
                ChatNotification: "chat-notification",
                ChatRoomCreated: "created_room",
                ChatRoomDeleted: "deleted_room",
                ChatRoomUpdated: "updated_room",
                ChatRoomsUserModAction: "user_moderation_action",
                ChatRoomMessageCreated: "created_room_message",
                ChatRoomMessageEdited: "edited_room_message",
                ChatRoomMessageDeleted: "deleted_room_message",
                ChatRoomsRoomViewUpdated: "updated_room_view",
                ImageUploadSuccess: "imageuploadsuccess",
                LiveEvent: "live-event",
                ModerationAction: "moderation_action",
                OnsiteNotificationCreate: "create-notification",
                OnsiteNotificationDelete: "delete-notification",
                OnsiteNotificationsRead: "read-notifications",
                OnsiteNotificationSummaryUpdate: "update-summary",
                OnsiteNotificationUpdate: "update-notification",
                PayoutOnboardingEvent: "payout-onboarding-event",
                Presence: "presence",
                PresenceSettings: "settings",
                PurgeMessageRequest: "purge_messages_request",
                RaidCancel: "raid_cancel",
                RaidUpdate: "raid_update",
                StreamChatRoomChatRichEmbed: "chat_rich_embed",
                StreamDown: "stream_down",
                StreamUp: "stream_up",
                UpdatedChannelChatProperty: "updated_channel_chat_property",
                UploadService: "upload",
                UserBitsBalanceUpdate: "balance_update",
                UserBitsBadgeUpdate: "badge_update",
                UserCampaignProgressEvent: "progress",
                UserCampaignRewardEvent: "reward",
                UserCrateEvent: "crate-event",
                UserGiftEvent: "gift-event",
                UserMention: "user_mention",
                VideoThumbnailProcessingComplete: "processing_complete",
                VideoThumbnailProcessingError: "processing_error",
                ViewCount: "viewcount",
                Vodcast: "watchparty-vod",
                WhisperAllThreadsUpdate: "threads",
                WhisperDeleted: "whisper_deleted",
                WhisperEdited: "whisper_edited",
                WhisperReceived: "whisper_received",
                WhisperSent: "whisper_sent",
                WhisperThreadUpdate: "thread"
            },
            c = {
                Accepted: "accepted",
                Requested: "requested",
                Removed: "removed",
                SelfAccepted: "self_accepted",
                SelfRemoved: "self_removed",
                SelfRequested: "self_requested"
            };
        ! function(e) {
            e.AddBlockedTerm = "add_blocked_term", e.AddPermittedTerm = "add_permitted_term", e.AutoModEnabled = "automod_enabled", e.AutoModRejected = "automod_rejected", e.Ban = "ban", e.Clear = "clear", e.DeleteBlockedTerm = "delete_blocked_term", e.DeletePermittedTerm = "delete_permitted_term", e.EmoteOnly = "emoteonly", e.EmoteOnlyOff = "emoteonlyoff", e.FollowersOnly = "followers", e.FollowersOnlyOff = "followersoff", e.Host = "host", e.Mod = "mod", e.ModifiedAutoModProperties = "modified_automod_properties", e.R9kBeta = "r9kbeta", e.R9kBetaOff = "r9kbetaoff", e.Raid = "raid", e.Slow = "slow", e.SlowOff = "slowoff", e.SubsBeta = "subsbeta", e.SubscribersOnly = "subscribers", e.SubscribersOnlyOff = "subscribersoff", e.Timeout = "timeout", e.Unban = "unban", e.Unhost = "unhost", e.Unmod = "unmod", e.Unraid = "unraid", e.Untimeout = "untimeout"
        }(i || (i = {})),
        function(e) {
            e.AutoModMessageRejected = "automod_message_rejected", e.AutoModMessageApproved = "automod_message_approved", e.AutoModMessageDenied = "automod_message_denied"
        }(r || (r = {})),
        function(e) {
            e.Archive = "archive", e.Highlight = "highlight", e.Upload = "upload", e.Premiere = "premiere", e.Rerun = "rerun", e.WatchPartyPremiere = "watch_party_premiere", e.WatchPartyRerun = "watch_party_rerun"
        }(a || (a = {})),
        function(e) {
            e.Private = "private", e.Public = "public"
        }(o || (o = {}))
    },
    "/LBW": function(e, t, n) {
        "use strict";
        t.h = function(e) {
            var t = {
                action_name: e.actionName,
                action_type: "click",
                client_time: (new Date).getTime(),
                displayed_balance: e.displayedBalance,
                emote_level: e.emoteLevel,
                emote_type: e.emoteType,
                bits_location: e.location || o.ChatTooltip
            };
            i.n.track(r.SpadeEventType.BitsCardInteraction, t)
        }, n.d(t, "b", function() {
            return o
        }), n.d(t, "a", function() {
            return s
        }), t.d = function(e) {
            if (e && l[e]) return l[e];
            return i.j.error(new Error('Buy Bits card contains improperly rendered offers, or offers unknown to Science. Tracking as "buy_100"'), 'Buy Bits card contains improperly rendered offers, or offers unknown to Science. Tracking as "buy_100"'), s.Buy100
        }, t.e = function(e) {
            var t = {
                channel: e.channel,
                channel_id: e.channelID,
                available: e.available,
                host: "twitch.tv"
            };
            i.n.track(r.SpadeEventType.BitsAdsAvailability, t)
        }, t.f = function(e) {
            var t = {
                distinct_id: i.o.session.deviceID,
                host: "twitch.tv",
                request_id: e.requestID,
                campaign_id: e.campaignID,
                adblock: e.adblock
            };
            i.n.track(r.SpadeEventType.BitsAdsImpression, t)
        }, n.d(t, "c", function() {
            return a
        }), t.g = function(e) {
            var t = i.n.getLastPageview(),
                n = {
                    location: t && t.location || "",
                    ad_returned: null,
                    campaign_id: e.campaignID,
                    distinct_id: i.o.session.deviceID,
                    host: "twitch.tv",
                    request_id: e.requestID,
                    request_method: e.requestMethod
                };
            i.n.track(r.SpadeEventType.BitsAdsRequest, n)
        }, t.i = function(e) {
            var t = {
                leaderboard_size: e.leaderboardSize,
                leaderboard_mode: e.leaderboardMode,
                user_present_in_leaderboard: e.userPresentInLeaderboard,
                user_id: e.userID,
                channel_id: e.channelID
            };
            i.n.track(r.SpadeEventType.LeaderboardExpandClick, t)
        };
        var i = n("6sO2"),
            r = n("vH/s");
        var a, o = {
                ChatTooltip: "card",
                GetBitsButton: "get_bits_button",
                BitsLandingPage: "bits_landing_page"
            },
            s = {
                BuyMain: "buy_main",
                Buy100: "buy_100",
                Buy500: "buy_500",
                Buy1000: "buy_1000",
                Buy1500: "buy_1500",
                Buy5000: "buy_5000",
                Buy10000: "buy_10000",
                Buy25000: "buy_25000",
                CloseCard: "menu_close",
                OpenCard: "menu_open",
                PreviewEmote: "emote_preview",
                WatchAd: "watch_ad",
                WatchAnotherAd: "watch_another_ad",
                CheeringInRoom: "cheering_in_room"
            },
            l = {
                100: s.Buy100,
                500: s.Buy500,
                1000: s.Buy1000,
                1500: s.Buy1500,
                5000: s.Buy5000,
                10000: s.Buy10000,
                25000: s.Buy25000
            };
        ! function(e) {
            e.ShowAdButton = "show_ad_button"
        }(a || (a = {}))
    },
    "/OR/": function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "UserCard"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "userCardFragment"
                                },
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 138
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/user-card/queries/user-card-fragment.gql"\nquery UserCard($id: ID!) {\nuser(id: $id) {\nid\n...userCardFragment\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var r = {};
        i.definitions = i.definitions.concat(n("Adn1").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !r[t] && (r[t] = !0, !0)
        })), e.exports = i
    },
    "/UH7": function(e, t, n) {
        "use strict";
        var i = n("2KeS"),
            r = n("6sO2"),
            a = n("TToO"),
            o = n("LIeg"),
            s = n("uXDg"),
            l = 234,
            c = 310;

        function d(e) {
            if (0 === e.openedIDs.length) return 0;
            for (var t = 0, n = 0, i = e.openedIDs; n < i.length; n++) {
                var r = i[n],
                    a = e.byID[r];
                a.hidden || (t += a.collapsed ? l : c)
            }
            return t
        }

        function u(e) {
            var t = e.openedIDs.slice(),
                n = t.pop();
            return n && e.focusedID === n && t.length > 0 && (t.pop(), t.push(n)), o(e, function(e) {
                return e.openedIDs
            }, function() {
                return t
            })
        }

        function p(e, t) {
            var n = e.orderedIDs.filter(function(t) {
                return !e.openedIDs.includes(t)
            });
            return n.length > 0 ? m(e, n[0], t) : e
        }

        function m(e, t, n) {
            var i = n - d(e),
                r = a.__assign({}, e);
            return r.openedIDs.includes(t) || (i < c && (r = u(r)), r = o(r, function(e) {
                return e.openedIDs
            }, function(e) {
                return e.push(t), e
            })), r
        }

        function h(e, t, n) {
            if (!e.byID[t]) return e;
            var i = o(e, function(e) {
                return e.byID
            }, function(e) {
                return e[t].collapsed = !1, e
            });
            return i.focusedID = t, d(e) > n && (i = u(i)), i
        }
        var f = n("5k1t");
        t.b = function(e, t) {
            if (e.whispers) return e.whispers.display.byID[t];
            return null
        }, t.a = function(e, t) {
            return e.whispers.notifications.byThreadID[t] || v
        };
        var g = Object(i.c)({
            display: function(e, t) {
                switch (void 0 === e && (e = {
                    byID: {},
                    orderedIDs: [],
                    openedIDs: [],
                    focusedID: ""
                }), t.type) {
                    case s.f:
                        var n = (r = a.__assign({}, e)).byID[t.data.threadID],
                            i = r.openedIDs.includes(t.data.threadID);
                        return n || (r = o(r, function(e) {
                            return e.orderedIDs
                        }, function(e) {
                            return e.push(t.data.threadID), e
                        }), r = o(r, function(e) {
                            return e.byID
                        }, function(e) {
                            return e[t.data.threadID] = t.data, e
                        })), r.openedIDs.includes(t.data.threadID) && !r.byID[t.data.threadID].hidden || (r.byID[t.data.threadID].hidden = t.data.hidden), t.data.ignoreCollapseIfOpen || t.data.collapsed || (r.focusedID = t.data.threadID), r = m(r, t.data.threadID, t.contentWidth), (!i || i && !t.data.ignoreCollapseIfOpen) && (t.data.collapsed || (r = h(r, t.data.threadID, t.contentWidth))), r;
                    case s.b:
                        if (!e.byID[t.threadID]) return e;
                        var r = o(e, function(e) {
                            return e.byID
                        }, function(e) {
                            return delete e[t.threadID], e
                        });
                        return r = o(r, function(e) {
                            return e.orderedIDs
                        }, function(e) {
                            return e.filter(function(e) {
                                return e !== t.threadID
                            })
                        }), r = o(r, function(e) {
                            return e.openedIDs
                        }, function(e) {
                            return e.filter(function(e) {
                                return e !== t.threadID
                            })
                        }), e.focusedID === t.threadID && (r.focusedID = r.openedIDs[0]), p(r, t.contentWidth);
                    case s.c:
                        return e.byID[t.threadID] ? (e.focusedID === t.threadID && (e.focusedID = ""), o(e, function(e) {
                            return e.byID
                        }, function(e) {
                            return e[t.threadID].collapsed = !0, e
                        })) : e;
                    case s.d:
                        return h(e, t.threadID, t.contentWidth);
                    case s.e:
                        return o(e, function(e) {
                            return e.focusedID
                        }, function() {
                            return t.threadID
                        });
                    case s.g:
                        return o(e, function(e) {
                            return e.focusedID
                        }, function(e) {
                            return e === t.threadID ? "" : e
                        });
                    case s.a:
                        var l = d(e);
                        if (l > t.contentWidth) {
                            if (e.openedIDs.length <= 1) return e;
                            for (var f = a.__assign({}, e); l > t.contentWidth && f.openedIDs.length > 1;) l = d(f = u(f));
                            return f
                        }
                        if (t.contentWidth - l >= c) {
                            var g = Math.floor((t.contentWidth - l) / c),
                                v = Math.min(g, e.orderedIDs.length - e.openedIDs.length);
                            if (0 === v) return e;
                            f = a.__assign({}, e);
                            for (var b = 0; b < v; b++)
                                if ((f = p(f, t.contentWidth)).openedIDs.length > 1)
                                    for (var k = f.openedIDs, y = k.length, _ = 0, S = f.orderedIDs; _ < S.length; _++) {
                                        var E = S[_];
                                        if (k[y - 1] === E) {
                                            var C = k.splice(y - 2, 1);
                                            k.push(C[0]);
                                            break
                                        }
                                        if (k[y - 2] === E) break
                                    }
                                return f
                        }
                        return e;
                    default:
                        return e
                }
            },
            notifications: function(e, t) {
                switch (void 0 === e && (e = {
                    byThreadID: {}
                }), t.type) {
                    case f.a:
                        return e.byThreadID[t.threadID] ? o(e, function(e) {
                            return e.byThreadID[t.threadID]
                        }, function(e) {
                            return [{
                                threadID: t.threadID,
                                afterMessageID: t.afterMessageID,
                                content: t.content
                            }].concat(e)
                        }) : o(e, function(e) {
                            return e.byThreadID
                        }, function(e) {
                            return a.__assign(((n = {})[t.threadID] = [{
                                threadID: t.threadID,
                                afterMessageID: t.afterMessageID,
                                content: t.content
                            }], n), e);
                            var n
                        });
                    default:
                        return e
                }
            }
        });
        var v = [];
        r.o.store.registerReducer("whispers", g)
    },
    "/Urv": function(e, t) {},
    "/Vp/": function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return !e.isLoggedIn && e.location.pathname === i
        };
        var i = "/"
    },
    "0Hcb": function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FriendButton_AcceptFriendRequest"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "AcceptFriendRequestInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "acceptFriendRequest"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "friendButtonFragment"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 232
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/friend-button/queries/friend-button-fragment.gql"\nmutation FriendButton_AcceptFriendRequest($input: AcceptFriendRequestInput!) {\nacceptFriendRequest(input: $input) {\nuser {\nid\n...friendButtonFragment\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var r = {};
        i.definitions = i.definitions.concat(n("HC5L").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !r[t] && (r[t] = !0, !0)
        })), e.exports = i
    },
    "0Mfl": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = "https://www.amazon.com/twitchmerch?channel=tpn&ref_=tw_or_web_tpn_ms"
    },
    "0Yyt": function(e, t) {},
    "1EXI": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_UserCommunities"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userId"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userId"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "directories"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "nodes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "directoryType"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 140
            }
        };
        n.loc.source = {
            body: "query ReportUserModal_UserCommunities($userId: ID!) {\nuser(id: $userId) {\nid\ndirectories {\nnodes {\nid\nname\ndisplayName\ndirectoryType\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "1Krm": function(e, t) {},
    "1Mw/": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("DtWM"),
            o = n("RH2O"),
            s = n("2KeS"),
            l = n("V5M+"),
            c = n("Aj/L"),
            d = n("oSFp"),
            u = n("5k1t"),
            p = n("HW6M"),
            m = n("3zLD"),
            h = n("6sO2"),
            f = n("rCmJ"),
            g = n("yWCw"),
            v = n("7vx8"),
            b = n("RweG"),
            k = n("6BvN"),
            y = n("aMxy"),
            _ = n("Ldv2"),
            S = n("oIkB"),
            E = n("HZww"),
            C = n("HM6l"),
            N = n("ZVME"),
            T = n("c3pS"),
            w = n("ieBa"),
            O = n("CSlQ"),
            R = n("F8kA"),
            D = n("+Znq"),
            I = n("u8SD"),
            x = n("4Dne"),
            F = n("djIP"),
            P = n("vH/s"),
            U = n("2Hj/"),
            j = n("emkL"),
            A = n("Kxgf"),
            L = n("LjAQ"),
            M = n("mw/a"),
            B = n("7miU"),
            W = n("Odds"),
            V = n("yTC+"),
            H = "whispers-report-user-button",
            G = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderReportButton = function() {
                        var e = t.props.displayName || t.props.login,
                            n = Object(h.d)("Report {displayName}", {
                                displayName: e
                            }, "ThreadSettings");
                        return r.createElement(W._6, {
                            "data-test-selector": H,
                            ariaLabel: n,
                            onClick: t.reportUser
                        }, r.createElement(W._8, {
                            padding: {
                                y: .5,
                                x: 1
                            }
                        }, n))
                    }, t.onChannelRedirect = function() {
                        t.props.collapseThread && t.props.collapseThread()
                    }, t.toggleMutethread = function() {
                        var e = !t.props.isMuted,
                            n = i.__assign({}, Object(S.a)({
                                threadID: t.props.threadID,
                                isMuted: !t.props.isMuted
                            }), {
                                optimisticResponse: {
                                    updateWhisperThread: {
                                        thread: {
                                            id: t.props.threadID,
                                            isMuted: e,
                                            __typename: "WhisperThread"
                                        },
                                        __typename: "UpdateWhisperThreadPayload"
                                    }
                                }
                            });
                        t.props.setMuteThread && (e ? Object(B.j)(t.props.threadID) : Object(B.k)(t.props.threadID), t.props.setMuteThread(n))
                    }, t.reportUser = function() {
                        var e = t.props.displayName || t.props.login;
                        t.props.showReportUserModal({
                            onClose: t.onReportModalClose,
                            reportContext: {
                                contentType: M.a.Whisper,
                                targetUserID: t.props.userID,
                                contentID: t.props.threadID
                            },
                            title: Object(h.d)("Report {displayName}", {
                                displayName: e
                            }, "ReportUserModal")
                        })
                    }, t.onReportModalClose = function(e, n) {
                        e === L.b.Success && n && t.props.onBlock && t.props.onBlock(t.props.threadID)
                    }, t.blockUser = function() {
                        t.props.blockUserMutation(t.props.userID, F.b.Other, F.a.Whisper, t.props.currentUser), t.props.onBlock && t.props.onBlock(t.props.threadID)
                    }, t.unblockUser = function() {
                        t.props.unblockUserMutation(t.props.userID, t.props.currentUser), t.props.onUnblock && t.props.onUnblock(t.props.threadID)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.displayName || this.props.login,
                        t = this.props.isMuted ? Object(h.d)("Turn Notifications On", "ThreadSettings") : Object(h.d)("Turn Notifications Off", "ThreadSettings"),
                        n = Object(h.d)("Go to {displayName}'s Channel", {
                            displayName: e
                        }, "ThreadSettings");
                    return r.createElement(W._8, {
                        display: W.R.Flex,
                        flexDirection: W.T.Column,
                        margin: 1
                    }, r.createElement(W._6, {
                        ariaLabel: t,
                        onClick: this.toggleMutethread
                    }, r.createElement(W._8, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, t)), r.createElement(W._35, {
                        borderBottom: !0,
                        margin: {
                            y: 1,
                            left: .5
                        }
                    }), this.renderBlockButton(), this.renderReportButton(), r.createElement(W._6, {
                        linkTo: "/" + this.props.login,
                        onClick: this.onChannelRedirect,
                        ariaLabel: n
                    }, r.createElement(W._8, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, n)))
                }, t.prototype.renderBlockButton = function() {
                    var e, t, n = this.props.displayName || this.props.login;
                    return this.isBlocked ? (e = Object(h.d)("Unblock {displayName}...", {
                        displayName: n
                    }, "ThreadSettings"), t = this.unblockUser) : (e = Object(h.d)("Block {displayName}...", {
                        displayName: n
                    }, "ThreadSettings"), t = this.blockUser), r.createElement(W._6, {
                        "data-test-selector": "whispers-block-user-button",
                        ariaLabel: e,
                        onClick: t
                    }, r.createElement(W._8, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, e))
                }, Object.defineProperty(t.prototype, "isBlocked", {
                    get: function() {
                        var e = this;
                        return !(!this.props.currentUser.blockedUsers || !this.props.currentUser.blockedUsers.find(function(t) {
                            return !!t && t.id === e.props.userID
                        }))
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(r.Component),
            z = Object(m.compose)(Object(v.a)(V, {
                name: "setMuteThread"
            }), Object(I.a)(), Object(A.a)())(G),
            q = n("GxF8");
        var Q = n("N5sm");
        var K = n("l4QG");
        var $, Y = n("P0T5"),
            Z = (n("+xsx"), "report-as-spam-button"),
            X = "mark-not-spam-button",
            J = "dismiss-prompt-button",
            ee = "spam-prompt-pending-target",
            te = "spam-prompt-reported-target",
            ne = {
                displayName: "???",
                login: "???",
                displayBadges: [],
                id: ""
            },
            ie = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.renderPotentialSpamPrompt = function() {
                        if (n.props.spamInfo && "low" !== n.props.spamInfo.likelihood && null === n.props.spamInfo.lastMarkedNotSpamAt) {
                            if ("pending" === n.state.potentialSpamResolution) return r.createElement(W._8, {
                                "data-a-target": ee,
                                className: "thread-header__potential-spam-prompt",
                                attachRight: !0,
                                attachLeft: !0,
                                attachTop: !0
                            }, r.createElement(W._35, {
                                background: W.n.Alt2,
                                padding: .5,
                                elevation: 2
                            }, r.createElement(W._8, {
                                display: W.R.InlineBlock,
                                margin: .5
                            }, r.createElement(W.Q, {
                                type: W._49.Span,
                                fontSize: W.V.Size6,
                                color: W.K.Alt2
                            }, Object(h.d)("It looks like this conversation triggered our spam detector. If it is spam, please report it!", "ThreadHeader"))), r.createElement(W._8, {
                                display: W.R.InlineBlock,
                                margin: .5
                            }, r.createElement(W.v, {
                                "data-a-target": Z,
                                type: W.B.Alert,
                                onClick: n.reportSpam,
                                size: W.z.Small
                            }, Object(h.d)("Report spam", "ThreadHeader"))), r.createElement(W._8, {
                                display: W.R.InlineBlock,
                                margin: .5
                            }, r.createElement(W.v, {
                                "data-a-target": X,
                                onClick: n.markNotSpam,
                                size: W.z.Small
                            }, Object(h.d)("This is not spam", "ThreadHeader")))));
                            if ("reported" === n.state.potentialSpamResolution && n.interlocutor.displayName) return r.createElement(W._8, {
                                "data-a-target": te,
                                className: "thread-header__potential-spam-prompt",
                                attachRight: !0,
                                attachLeft: !0,
                                attachTop: !0
                            }, r.createElement(W._35, {
                                background: W.n.Alt2,
                                padding: .5,
                                elevation: 2
                            }, r.createElement(W._8, {
                                display: W.R.InlineBlock,
                                margin: .5
                            }, r.createElement(W.Q, {
                                type: W._49.Span,
                                fontSize: W.V.Size6,
                                color: W.K.Alt2
                            }, Object(h.d)("Thank you for helping us fight spam. We've blocked {user} from sending you further whispers. You can undo this from the Whisper Settings Menu.", {
                                user: n.interlocutor.displayName
                            }, "ThreadHeader"))), r.createElement(W._8, {
                                display: W.R.InlineBlock,
                                margin: .5
                            }, r.createElement(W.v, {
                                "data-a-target": J,
                                type: W.B.Text,
                                onClick: n.dismissSpamPrompt,
                                size: W.z.Small
                            }, Object(h.d)("Dismiss", "ThreadHeader")))))
                        }
                        return null
                    }, n.reportSpam = function() {
                        n.props.reportUserMutation(n.interlocutor.id, F.c.Spam, n.props.threadID), n.props.blockUserMutation(n.interlocutor.id, F.b.Other, F.a.Whisper, n.props.participants.currentUser), n.props.setThreadSpamStatusMutation(n.props.threadID, !0), Object(Y.l)(n.interlocutor.login, Y.a.SpamPropmt), n.setState({
                            potentialSpamResolution: "reported"
                        })
                    }, n.markNotSpam = function() {
                        n.props.setThreadSpamStatusMutation(n.props.threadID, !1), Object(Y.o)(n.props.threadID), n.setState({
                            potentialSpamResolution: "dismissed"
                        })
                    }, n.dismissSpamPrompt = function() {
                        n.props.onBlock && n.props.onBlock(n.props.threadID), Object(Y.n)(n.props.threadID), n.setState({
                            potentialSpamResolution: "dismissed"
                        })
                    }, n.onSettingsClick = function(e) {
                        e.stopPropagation()
                    }, n.onHeaderActivate = function(e) {
                        e.target === e.currentTarget && (e.charCode !== k.a.Enter && e.charCode !== k.a.Space || (n.props.onHeaderInteract(), e.stopPropagation()))
                    }, n.onPresenceClick = function(e, t) {
                        t.stopPropagation();
                        var i = n.props.participants.currentUser && n.props.participants.currentUser.friends.edges.find(function(e) {
                            return !(!e.node || e.node.id !== n.interlocutor.id)
                        });
                        n.props.participants.user && i && i.activity ? Object(x.b)({
                            context: e,
                            friendActivity: i.activity,
                            friendLogin: n.props.participants.user.login
                        }) : h.j.warn("[ThreadHeader] Attempted to track presence click without required data.")
                    };
                    var i = h.o.experiments.getAssignment("TWILIGHT_EXTENDED_PRESENCE");
                    return n.state = {
                        potentialSpamResolution: "pending",
                        hasExtendedRichPresence: "variant_a" === i
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = p({
                            "thread-header__title-bar-container": !0,
                            "thread-header__title-bar-container--highlighted": this.props.isHighlighted,
                            "thread-header__title-bar-container--focused": this.props.isFocused
                        }),
                        n = p({
                            "thread-header": !0,
                            "thread-header--collapsed": this.props.isCollapsed
                        }),
                        i = Object(h.d)("Close", "WhisperThreadHeader"),
                        a = Object(h.d)("Settings", "WhisperThreadHeader");
                    if (this.props.isLoading || !this.props.participants.currentUser || !this.props.participants.user) return r.createElement(W._8, {
                        className: t,
                        display: W.R.Flex,
                        justifyContent: W._7.Between,
                        fullWidth: !0,
                        alignItems: W.c.Center,
                        padding: {
                            y: .5,
                            x: 1
                        },
                        flexShrink: 0,
                        flexGrow: 0,
                        flexWrap: W.U.NoWrap
                    }, r.createElement(W._14, {
                        height: 20,
                        width: 80
                    }), r.createElement(W._8, {
                        display: W.R.Flex
                    }, r.createElement(W.w, {
                        ariaLabel: i,
                        icon: W._25.RemoveTag,
                        "data-a-target": "whispers-thread__close-button-" + this.props.threadID,
                        onClick: this.props.onClose
                    })));
                    var o = null,
                        s = null,
                        l = null,
                        c = null,
                        d = this.props.participants.currentUser && this.props.participants.currentUser.friends.edges.find(function(t) {
                            return !(!t.node || t.node.id !== e.interlocutor.id)
                        });
                    if (d) {
                        s = r.createElement(W._8, {
                            margin: {
                                left: 1
                            },
                            display: W.R.Flex,
                            alignItems: W.c.Center
                        }, r.createElement(W._16, {
                            status: function(e) {
                                switch (e) {
                                    case K.a.Online:
                                        return W._17.Online;
                                    case K.a.Away:
                                    case K.a.Idle:
                                        return W._17.Away;
                                    case K.a.Busy:
                                        return W._17.Busy;
                                    case K.a.Offline:
                                    case K.a.Invisible:
                                    default:
                                        return W._17.Offline
                                }
                            }(d.availability)
                        }));
                        var u = d.activity,
                            m = d.availability;
                        if (u) {
                            var f = {
                                    activity: u,
                                    availability: this.state.hasExtendedRichPresence ? m : void 0
                                },
                                g = Object(U.c)(f, !0),
                                v = null,
                                b = Object(U.d)(this.props.participants.user.login, u);
                            if (b && (v = {
                                    pathname: b,
                                    state: {
                                        content: P.PageviewContent.Presence,
                                        medium: P.PageviewMedium.Whispers
                                    }
                                }), v) {
                                var k = p({
                                    "thread-header__activity-link--highlighted": this.props.isHighlighted
                                });
                                l = r.createElement(R.a, {
                                    className: k,
                                    title: Object(U.c)(f) || "",
                                    onClick: this.onPresenceClick.bind(this, x.a.WhisperHeaderLink),
                                    to: v,
                                    "data-test-selector": "whispers-thread__presence-link"
                                }, g)
                            } else l = g;
                            this.props.isCollapsed || (c = r.createElement(W._8, {
                                padding: {
                                    right: .5
                                }
                            }, r.createElement(j.a, {
                                availability: m,
                                link: v,
                                onClick: this.onPresenceClick.bind(this, x.a.WhisperHeaderButton),
                                shouldHollowOverlay: this.props.isHighlighted
                            })))
                        }
                    }
                    this.props.isCollapsed || !this.props.participants.currentUser || this.props.interactionsDisabled || (o = r.createElement(D.a, null, r.createElement(W.w, {
                        ariaLabel: a,
                        icon: W._25.Gear,
                        overlay: this.props.isHighlighted
                    }), r.createElement(W.q, {
                        direction: W.r.BottomRight,
                        offsetX: "0.5rem"
                    }, r.createElement(z, {
                        login: this.interlocutor.login,
                        displayName: this.interlocutor.displayName,
                        currentUser: this.props.participants.currentUser,
                        userID: this.interlocutor.id,
                        isMuted: this.props.isMuted,
                        threadID: this.props.threadID,
                        collapseThread: this.props.collapse,
                        onBlock: this.props.onBlock,
                        onUnblock: this.props.onUnblock,
                        showReportUserModal: this.props.showReportUserModal
                    }))));
                    var y = this.interlocutor.displayBadges.map(function(e) {
                        return r.createElement(W._2, {
                            key: e.id,
                            flexShrink: 0,
                            margin: {
                                right: .5
                            }
                        }, r.createElement("img", {
                            alt: e.title,
                            title: e.title,
                            className: "thread-header__badge",
                            src: e.imageURL
                        }))
                    });
                    return r.createElement(W._8, {
                        className: n,
                        position: W._15.Relative,
                        fullWidth: !0
                    }, r.createElement("div", {
                        className: "thread-header__click-area",
                        onClick: this.props.onHeaderInteract,
                        onKeyPress: this.onHeaderActivate,
                        "data-a-target": "thread-header__click-area",
                        tabIndex: 0
                    }, r.createElement(W._8, {
                        className: t,
                        fullWidth: !0,
                        padding: {
                            x: 1,
                            y: .5
                        },
                        alignItems: W.c.Center,
                        flexGrow: 1,
                        display: W.R.Flex,
                        "data-a-target": "whisper-thread-title-bar-" + (this.props.participants.user && this.props.participants.user.login),
                        "data-click-out-id": "thread-expand-close",
                        flexWrap: W.U.NoWrap
                    }, r.createElement(W._8, {
                        display: W.R.Flex,
                        flexDirection: W.T.Column,
                        flexGrow: 1,
                        fullHeight: !0,
                        overflow: W._11.Hidden
                    }, r.createElement(W._8, {
                        display: W.R.Flex,
                        flexGrow: 1,
                        alignItems: W.c.Center,
                        flexWrap: W.U.NoWrap,
                        padding: {
                            right: 1
                        },
                        ellipsis: !0
                    }, y, r.createElement(W.Q, {
                        color: this.props.isHighlighted ? W.K.Overlay : W.K.Base,
                        type: W._49.Span,
                        bold: !0,
                        ellipsis: !0
                    }, this.interlocutor.displayName ? this.interlocutor.displayName : ne.displayName), s), r.createElement(W._35, {
                        className: "thread-header__activity",
                        color: this.props.isHighlighted ? W.K.Overlay : W.K.Base,
                        padding: {
                            right: 1
                        },
                        ellipsis: !0
                    }, l)), r.createElement(W._8, {
                        display: W.R.Flex,
                        flexShrink: 0,
                        flexDirection: W.T.Row,
                        alignItems: W.c.Center
                    }, c, r.createElement("div", {
                        onClick: this.onSettingsClick
                    }, o), r.createElement(W.w, {
                        ariaLabel: i,
                        icon: W._25.RemoveTag,
                        "data-a-target": "thread-close-button-" + (this.props.participants.user && this.props.participants.user.login),
                        "data-test-selector": "thread-header__close-button-" + this.props.threadID,
                        onClick: this.props.onClose,
                        overlay: this.props.isHighlighted
                    })))), this.renderPotentialSpamPrompt())
                }, Object.defineProperty(t.prototype, "interlocutor", {
                    get: function() {
                        return this.props.participants.user || ne
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(r.Component),
            re = Object(s.d)(Object(I.a)(), function() {
                var e = this;
                return Object(v.a)(q, {
                    props: function(t) {
                        return {
                            reportUserMutation: function(n, r, a) {
                                return i.__awaiter(e, void 0, void 0, function() {
                                    var e;
                                    return i.__generator(this, function(i) {
                                        switch (i.label) {
                                            case 0:
                                                if (!t.mutate) return [3, 4];
                                                i.label = 1;
                                            case 1:
                                                return i.trys.push([1, 3, , 4]), [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            targetUserID: n,
                                                            reason: r,
                                                            threadID: a
                                                        }
                                                    }
                                                })];
                                            case 2:
                                                return i.sent(), [3, 4];
                                            case 3:
                                                return e = i.sent(), h.j.error(e, "Unable to report user"), [3, 4];
                                            case 4:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }(), function() {
                var e = this;
                return Object(v.a)(Q, {
                    props: function(t) {
                        return {
                            setThreadSpamStatusMutation: function(n, r) {
                                return i.__awaiter(e, void 0, void 0, function() {
                                    var e;
                                    return i.__generator(this, function(i) {
                                        switch (i.label) {
                                            case 0:
                                                if (!t.mutate) return [3, 4];
                                                i.label = 1;
                                            case 1:
                                                return i.trys.push([1, 3, , 4]), [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            threadID: n,
                                                            isSpam: r
                                                        }
                                                    }
                                                })];
                                            case 2:
                                                return i.sent(), [3, 4];
                                            case 3:
                                                return e = i.sent(), h.j.error(e, "Unable to modify threads spam status user"), [3, 4];
                                            case 4:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }())(ie),
            ae = n("/UH7"),
            oe = n("zCIC"),
            se = n("Th9g");
        ! function(e) {
            e[e.Timestamp = 0] = "Timestamp", e[e.Whisper = 1] = "Whisper", e[e.Warning = 2] = "Warning", e[e.InactiveUserNotice = 3] = "InactiveUserNotice", e[e.NewMessages = 4] = "NewMessages", e[e.Notification = 5] = "Notification"
        }($ || ($ = {}));
        n("vRhQ");
        var le = n("hvzu"),
            ce = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.message;
                    switch (e.type) {
                        case $.Timestamp:
                            return r.createElement(W._35, {
                                className: "thread-message__timestamp",
                                color: W.K.Alt2,
                                fontSize: W.V.Size7
                            }, Object(le.e)(e));
                        case $.Warning:
                            return r.createElement(W._35, {
                                className: "thread-message__warning",
                                color: W.K.Alt2
                            }, Object(le.f)());
                        case $.InactiveUserNotice:
                            return r.createElement(W._35, {
                                className: "thread-message__inactive-user",
                                color: W.K.Alt2
                            }, Object(le.b)());
                        case $.Whisper:
                            return this.props.reportOutgoingWhisperRendered && this.props.reportOutgoingWhisperRendered(e.content), r.createElement(W._8, {
                                className: "thread-message__message",
                                "data-a-target": "whisper-message"
                            }, Object(le.g)(e));
                        case $.NewMessages:
                            return r.createElement(W._35, {
                                className: "thread-message__new-messages",
                                color: W.K.OverlayAlt,
                                fontSize: W.V.Size7
                            }, Object(le.c)());
                        case $.Notification:
                            return r.createElement(W._8, {
                                className: "thread-message__notification"
                            }, Object(le.d)(e));
                        default:
                            return null
                    }
                }, t
            }(r.Component),
            de = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        disableInfiniteTrigger: !0
                    }, t.loadMore = function() {
                        if (t.scroll && t.scroll.scrollContent) {
                            var e = t.scroll.scrollContent.scrollHeight;
                            t.setState({
                                prevScrollHeight: e
                            })
                        }
                        return t.props.loadMore()
                    }, t.renderMessages = function(e) {
                        return e.map(function(e, n) {
                            return r.createElement(ce, {
                                message: e,
                                reportOutgoingWhisperRendered: t.props.reportOutgoingWhisperRendered || void 0,
                                key: t.generateMessageKey(e, n.toString())
                            })
                        })
                    }, t.getMessages = function() {
                        var e = t.props.unreadMessagesCount,
                            n = t.props.thread.messages.edges.map(function(e) {
                                return {
                                    type: $.Whisper,
                                    content: e.node.content.content,
                                    from: e.node.from && t.props.participantsByID[+e.node.from.id],
                                    emotes: e.node.content.emotes,
                                    id: e.node.id,
                                    sentAt: new Date(e.node.sentAt),
                                    editedAt: e.node.editedAt,
                                    deletedAt: e.node.deletedAt
                                }
                            }).reduce(function(n, i, r, a) {
                                if (t.notificationsFor(i).forEach(function(e) {
                                        n.push(e)
                                    }), n.push(i), 0 == --e && n.push(t.createNewMessagesIndicator()), r < a.length - 1) {
                                    var o = a[r + 1];
                                    !i.deletedAt && t.shouldAddTimestamp(i, o) && n.push(t.createTimestampMessage(i))
                                }
                                return r === a.length - 1 && (i.deletedAt || n.push(t.createTimestampMessage(i)), n.push(t.createWarningMessage())), n
                            }, []).reverse();
                        return t.props.hasUnknownParticipant && n.push(t.createInactiveUserMessage()), n
                    }, t.shouldAddTimestamp = function(e, t) {
                        return e.sentAt.valueOf() - t.sentAt.valueOf() > 6e5
                    }, t.createTimestampMessage = function(e) {
                        return {
                            type: $.Timestamp,
                            timestamp: new Date(e.sentAt)
                        }
                    }, t.notificationsFor = function(e) {
                        return t.props.notifications.filter(function(t) {
                            return t.afterMessageID === e.id
                        }).map(t.createNotificationLine)
                    }, t.createNotificationLine = function(e) {
                        return {
                            type: $.Notification,
                            content: e.content
                        }
                    }, t.createNewMessagesIndicator = function() {
                        return {
                            type: $.NewMessages
                        }
                    }, t.createWarningMessage = function() {
                        return {
                            type: $.Warning
                        }
                    }, t.createInactiveUserMessage = function() {
                        return {
                            type: $.InactiveUserNotice
                        }
                    }, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.scrollToBottom = function() {
                        t.scroll.scrollToBottom()
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.scrollToBottom(), this.setState({
                        disableInfiniteTrigger: !1
                    })
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if ((this.props.thread.messages.edges.length > 0 || e.thread.messages.edges.length > 0) && (0 === this.props.thread.messages.edges.length && e.thread.messages.edges.length > 0 || this.props.thread.messages.edges[0].cursor !== e.thread.messages.edges[0].cursor)) {
                        if (!this.scroll || !this.scroll.scrollContent) return;
                        this.setState({
                            prevScrollHeight: this.scroll.scrollContent.scrollHeight
                        })
                    }
                }, t.prototype.componentDidUpdate = function(e) {
                    if (this.props.thread.messages.edges.length > e.thread.messages.edges.length)
                        if (this.props.thread.messages.edges[0] && e.thread.messages.edges[0] && this.props.thread.messages.edges[0].cursor === e.thread.messages.edges[0].cursor && this.props.thread.messages.edges[0].node.id === e.thread.messages.edges[0].node.id) {
                            if (this.scroll && this.scroll.scrollContent && this.state.prevScrollHeight && this.state.prevScrollHeight !== this.scroll.scrollContent.scrollHeight) {
                                var t = this.scroll.scrollContent.scrollHeight - this.state.prevScrollHeight;
                                this.scroll.scrollContent.scrollTop = t
                            }
                        } else this.scrollToBottom();
                    this.props.notifications.length > e.notifications.length && this.scrollToBottom(), e.collapsed && !this.props.collapsed && this.scrollToBottom()
                }, t.prototype.render = function() {
                    var e = this.getMessages();
                    return r.createElement(W._8, {
                        fullHeight: !0
                    }, r.createElement(oe.b, {
                        scrollRef: this.saveScrollRef,
                        suppressScrollX: !0
                    }, r.createElement(W._8, null, r.createElement(oe.a, {
                        enabled: !this.state.disableInfiniteTrigger,
                        loadMore: this.loadMore,
                        pixelThreshold: 200,
                        orientation: se.b.Down,
                        contentLength: e.length
                    }), this.renderMessages(e))))
                }, t.prototype.generateMessageKey = function(e, t) {
                    switch (e.type) {
                        case $.NewMessages:
                        case $.Warning:
                        case $.InactiveUserNotice:
                            return "" + e.type;
                        case $.Timestamp:
                            return e.type + "-" + e.timestamp.getTime();
                        case $.Whisper:
                            return e.type + "-" + e.id;
                        default:
                            return h.j.warn("[ThreadMessages] Encountered an unknown message type."), t
                    }
                }, t
            }(r.Component);
        var ue = Object(o.b)(function(e, t) {
            return {
                notifications: Object(ae.a)(e, t.thread.id)
            }
        })(de);
        var pe, me = n("DCOT"),
            he = n("qzJ+"),
            fe = n("m4HT"),
            ge = n("Lj1H"),
            ve = n("Iv9R"),
            be = (n("p8c9"), n("h4Qz")),
            ke = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.refetchTimeout = 0, n.hadError = !1, n.onEmoticonClick = function(e) {
                        var t = n.autocompleteInput.getValue();
                        t && t.length > 0 && !t.endsWith(" ") && (t += " "), t += e + " ", n.autocompleteInput.setValue(t)
                    }, n.onBlock = function(e) {
                        n.addNotification(Object(h.d)("User successfully blocked", "whispers")), n.props.onBlock && n.props.onBlock(e)
                    }, n.onUnblock = function() {
                        n.addNotification(Object(h.d)("User successfully unblocked", "whispers"))
                    }, n.loadMore = function() {
                        return i.__awaiter(n, void 0, void 0, function() {
                            return i.__generator(this, function(e) {
                                return this.props.data.loading || this.hadError ? [2] : [2, this.props.loadMore()]
                            })
                        })
                    }, n.addNewThreadSendWhisper = function(e) {
                        var t = n.state.newThreadMessages;
                        t.unshift({
                            content: e,
                            id: Object(C.b)()
                        }), n.setState({
                            newThreadMessages: t
                        })
                    }, n.addNotification = function(e) {
                        n.props.notifyWhisperThread(n.props.threadID, e, n.getLastMessageID())
                    }, n.getLastMessageID = function() {
                        if (n.props.data.whisperThread && n.props.data.whisperThread.messages.edges[0]) return n.props.data.whisperThread.messages.edges[0].node.id
                    }, n.getPlaceholderThreadFromLocalState = function() {
                        return e = n.state.newThreadMessages, t = n.props.currentUserID, {
                            messages: {
                                edges: e.map(function(e, n) {
                                    return {
                                        cursor: "" + n,
                                        node: {
                                            content: {
                                                content: e.content,
                                                emotes: []
                                            },
                                            deletedAt: null,
                                            editedAt: null,
                                            from: {
                                                id: t
                                            },
                                            id: e.id,
                                            sentAt: (new Date).toISOString()
                                        }
                                    }
                                })
                            },
                            isMuted: !1,
                            unreadMessagesCount: 0,
                            participants: [],
                            id: Object(C.b)(),
                            spamInfo: {
                                lastMarkedNotSpamAt: null,
                                likelihood: "low"
                            },
                            userLastMessageRead: {
                                sentAt: (new Date).toISOString()
                            }
                        };
                        var e, t
                    }, n.handleHeaderInteract = function() {
                        n.props.collapsed ? n.expand() : n.collapse()
                    }, n.expand = function() {
                        n.props.participants.currentUser && Object(B.h)(n.props.threadID), n.props.onExpand(n.props.threadID)
                    }, n.onClickOut = function() {
                        n.props.focused && n.props.onUnfocus(n.props.threadID)
                    }, n.handleClose = function() {
                        n.props.participants.currentUser && Object(B.c)(n.props.threadID), n.props.onClose(n.props.threadID)
                    }, n.collapse = function() {
                        n.props.participants.currentUser && Object(B.d)(n.props.threadID), n.props.onCollapse(n.props.threadID)
                    }, n.handleKeydown = function(e) {
                        if ((e.charCode || e.keyCode) === k.a.Enter) {
                            var t = n.autocompleteInput.getValue();
                            n.autocompleteInput.setValue(""), n.sendWhisper(t)
                        }
                    }, n.handleClick = function() {
                        n.props.onFocus(n.props.threadID), n.markThreadMessagesAsRead()
                    }, n.markThreadMessagesAsRead = function() {
                        if (!(n.props.data.loading || n.hadError || n.props.data.whisperThread && 0 === n.props.data.whisperThread.unreadMessagesCount)) {
                            var e = n.props.data.whisperThread && +n.props.data.whisperThread.messages.edges[0].cursor;
                            e && !isNaN(e) || (e = 0), Object(me.a)({
                                threadID: n.props.threadID,
                                lastReadMessageID: n.props.data.whisperThread && n.props.data.whisperThread.messages.edges[0].node.id || ""
                            }, e)
                        }
                    }, n.sendWhisper = function(e) {
                        if ("" !== e) {
                            n.props.latencyTracking.resetCustomEvents(N.a.Whispers), n.outgoingWhisperRenderedEvent = n.props.latencyTracking.registerCustomEvent({
                                benchmark: 150,
                                group: N.a.Whispers,
                                key: N.b.WhispersRenderSent,
                                label: N.c.RenderSent,
                                start: N.d.Registration
                            }), n.outgoingWhisperMessage = e, n.hadError && n.addNewThreadSendWhisper(e);
                            var t = Object(fe.b)(n.props.threadID, n.props.currentUserID);
                            t ? (n.props.participants.currentUser && n.props.participants.user && Object(B.m)({
                                threadID: n.props.threadID,
                                targetUserLogin: n.props.participants.user.login
                            }), Object(he.a)({
                                currentUserID: n.props.currentUserID,
                                emotes: n.props.emoteSetsData && n.props.emoteSetsData.emoteMap || {},
                                message: e,
                                recipientUserID: t
                            }).catch(function() {
                                var e = Object(h.d)("Your whisper was not delivered.", "Thread"),
                                    t = n.props.data.whisperThread && n.props.data.whisperThread.messages.edges[0].node.id;
                                n.props.notifyWhisperThread(n.props.threadID, e, t)
                            })) : h.j.warn("Unable to parse whisper recipient ID.")
                        }
                    }, n.setAutocompleteInnerComponentRef = function(e) {
                        n.textInput = e
                    }, n.setAutocompleteInputRef = function(e) {
                        return n.autocompleteInput = e
                    }, n.handleContentClick = function() {
                        document.getSelection().toString() || n.textInput.focus()
                    }, n.reportOutgoingWhisperRendered = function(e) {
                        n.outgoingWhisperRenderedEvent && e === n.outgoingWhisperMessage && n.props.latencyTracking.reportCustomEvent(n.outgoingWhisperRenderedEvent)
                    }, n.hasUnknownParticipant = function() {
                        return !(n.props.participants.user && n.props.participants.user.login)
                    }, n.shouldDisableInteractions = function() {
                        return n.hasUnknownParticipant()
                    }, n.state = {
                        newThreadMessages: []
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t = this;
                    if (e.data.error && (this.hadError = !0), e.data.error || e.data.loading || !e.data.whisperThread || this.props.reportThreadData(e.threadID, e.data.whisperThread), this.hadError) {
                        var n = !1;
                        this.props.pubsub.messages.whisperReceived !== e.pubsub.messages.whisperReceived && e.pubsub.messages.whisperReceived && e.pubsub.messages.whisperReceived.data_object.thread_id === this.props.threadID && (n = !0), this.props.pubsub.messages.whisperSent !== e.pubsub.messages.whisperSent && e.pubsub.messages.whisperSent && e.pubsub.messages.whisperSent.data_object.thread_id === this.props.threadID && (n = !0), n && (clearTimeout(this.refetchTimeout), this.refetchTimeout = setTimeout(function() {
                            t.props.data.refetch()
                        }, 200))
                    }
                }, t.prototype.componentDidUpdate = function(e) {
                    e.data.whisperThread && this.props.data.whisperThread && (this.props.data.whisperThread.messages.edges.length, e.data.whisperThread.messages.edges.length)
                }, t.prototype.render = function() {
                    var e = p({
                        "whispers-thread": !0,
                        "whispers-thread--collapsed": this.props.collapsed,
                        "whispers-thread--focused": this.props.focused
                    });
                    if (this.props.hidden) return null;
                    var t = this.props.emoteSetsData && this.props.emoteSetsData.emoteSets || [];
                    return r.createElement(f.a, {
                        onClickOut: this.onClickOut
                    }, r.createElement(W._35, {
                        className: e,
                        display: W.R.Flex,
                        flexShrink: 0,
                        flexGrow: 0,
                        position: W._15.Relative,
                        overflow: W._11.Hidden,
                        background: W.n.Base,
                        margin: {
                            left: 1
                        },
                        alignItems: W.c.Center,
                        justifyContent: W._7.Center,
                        "data-a-target": "whisper-thread-" + (this.props.participants.user && this.props.participants.user.login) + (this.props.collapsed ? "-collapsed" : ""),
                        elevation: 3
                    }, r.createElement(W._8, {
                        className: "whisper-thread__input",
                        position: W._15.Absolute,
                        fullWidth: !0,
                        padding: {
                            x: 1,
                            bottom: 1
                        },
                        attachBottom: !0,
                        attachLeft: !0
                    }, r.createElement(T.b, {
                        disabled: this.shouldDisableInteractions(),
                        componentType: T.a.Input,
                        suggestionSource: T.c.Whisper,
                        iconRight: !0,
                        onFocus: this.handleClick,
                        onClick: this.handleClick,
                        onKeyDown: this.handleKeydown,
                        componentRefDelegate: this.setAutocompleteInnerComponentRef,
                        refDelegate: this.setAutocompleteInputRef
                    }, r.createElement(T.d, {
                        emotes: t
                    })), r.createElement(w.a, {
                        attachBottom: !0,
                        attachRight: !0,
                        inputRef: this.textInput,
                        onClickEmote: this.onEmoticonClick,
                        padding: {
                            x: 1,
                            bottom: 1
                        },
                        position: W._15.Absolute,
                        shouldCloseOnClickOut: !0
                    })), r.createElement(W._2, {
                        fullWidth: !0,
                        attachLeft: !0
                    }, r.createElement("div", {
                        className: "whispers-thread__content",
                        onClick: this.handleContentClick
                    }, this.renderContent())), r.createElement(W._8, {
                        position: W._15.Absolute,
                        fullWidth: !0,
                        flexShrink: 0,
                        display: W.R.Flex,
                        alignItems: W.c.Center,
                        attachTop: !0,
                        attachLeft: !0
                    }, r.createElement(re, {
                        isHighlighted: !!(this.props.data.whisperThread && this.props.data.whisperThread.unreadMessagesCount > 0),
                        isFocused: !!this.props.focused,
                        isMuted: !!this.props.data.whisperThread && this.props.data.whisperThread.isMuted,
                        isCollapsed: this.props.collapsed,
                        isLoading: this.props.participants.loading || !this.props.participants.user || !this.props.participants.currentUser,
                        interactionsDisabled: this.shouldDisableInteractions(),
                        participants: this.props.participants,
                        spamInfo: this.props.data.whisperThread && this.props.data.whisperThread.spamInfo,
                        threadID: this.props.threadID,
                        collapse: this.collapse,
                        onHeaderInteract: this.handleHeaderInteract,
                        onBlock: this.onBlock,
                        onUnblock: this.onUnblock,
                        onClose: this.handleClose,
                        showReportUserModal: this.props.showReportUserModal
                    }))))
                }, t.prototype.renderContent = function() {
                    var e;
                    return this.hadError ? (e = r.createElement(g.a, {
                        message: Object(h.d)("Sorry, something went wrong loading this conversation.", "WhisperThread")
                    }), this.props.participants.currentUser && this.props.participants.user && (e = r.createElement(ue, {
                        thread: this.getPlaceholderThreadFromLocalState(),
                        unreadMessagesCount: 0,
                        participantsByID: this.getUsersByID([this.props.participants.currentUser, this.props.participants.user]),
                        loadMore: this.loadMore,
                        collapsed: this.props.collapsed,
                        hasUnknownParticipant: this.hasUnknownParticipant()
                    }))) : e = this.props.data.loading || this.props.participants.loading || !this.props.data.whisperThread ? r.createElement(W._8, {
                        display: W.R.Flex,
                        justifyContent: W._7.Center,
                        alignItems: W.c.Center,
                        margin: 2,
                        fullHeight: !0,
                        flexGrow: 1
                    }, r.createElement(W._10, null)) : r.createElement(ue, {
                        thread: this.props.data.whisperThread,
                        participantsByID: this.getUsersByID(this.props.data.whisperThread.participants),
                        unreadMessagesCount: this.props.data.whisperThread.unreadMessagesCount,
                        loadMore: this.loadMore,
                        reportOutgoingWhisperRendered: this.reportOutgoingWhisperRendered,
                        collapsed: this.props.collapsed,
                        hasUnknownParticipant: this.hasUnknownParticipant()
                    }), e
                }, t.prototype.getUsersByID = function(e) {
                    for (var t = {}, n = 0, i = e; n < i.length; n++) {
                        var r = i[n];
                        r && (t[r.id] = r)
                    }
                    return t
                }, t
            }(r.Component),
            ye = Object(m.compose)(Object(v.a)(ve, {
                options: function(e) {
                    return {
                        variables: {
                            targetUserID: Object(fe.b)(e.threadID, e.currentUserID) || ""
                        },
                        skip: !e.currentUserID || !e.threadID
                    }
                },
                name: "participants"
            }), Object(v.a)(be, {
                options: function(e) {
                    return {
                        variables: {
                            id: e.threadID
                        }
                    }
                },
                props: function(e) {
                    return i.__assign({}, e, {
                        loadMore: function() {
                            return e.data.fetchMore({
                                query: be,
                                variables: i.__assign({}, e.data.variables, {
                                    cursor: e.data.whisperThread && e.data.whisperThread.messages.edges[e.data.whisperThread.messages.edges.length - 1].cursor
                                }),
                                updateQuery: function(e, t) {
                                    var n = t.fetchMoreResult;
                                    if (!n.whisperThread) return {
                                        whisperThread: null
                                    };
                                    if (!e.whisperThread) return {
                                        whisperThread: n.whisperThread
                                    };
                                    var r = i.__assign({}, n.whisperThread.messages, {
                                        edges: Object(S.c)(e.whisperThread.messages.edges, n.whisperThread.messages.edges)
                                    });
                                    return {
                                        whisperThread: i.__assign({}, n.whisperThread, {
                                            messages: r
                                        })
                                    }
                                }
                            })
                        }
                    })
                }
            }), Object(b.a)([{
                topic: function(e) {
                    return Object(E.B)(e.currentUserID)
                },
                mapMessageTypesToProps: (pe = {}, pe[y.PubsubMessageType.WhisperReceived] = "whisperReceived", pe[y.PubsubMessageType.WhisperSent] = "whisperSent", pe),
                skipMessage: function(e, t) {
                    return !Object(ge.e)(e) && !Object(ge.d)(e) || e.data_object.thread_id !== t.threadID
                }
            }]), Object(_.a)(), Object(O.d)("WhispersThread", {
                autoReportInteractive: !0
            }))(ke);
        var _e, Se = Object(o.b)(function(e) {
            return {
                isLoggedIn: Object(c.d)(e)
            }
        }, function(e) {
            return Object(s.b)({
                notifyWhisperThread: u.b,
                showReportUserModal: function(e) {
                    var t = i.__rest(e, []);
                    return Object(l.d)(d.a, t)
                }
            }, e)
        })(ye);
        n("0Yyt");
        n.d(t, "b", function() {
            return _e
        }), n.d(t, "a", function() {
            return Ee
        });
        var Ee = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.resizeAnimationHandle = null, t.renderThread = function(e) {
                    return e ? r.createElement(Se, {
                        key: e.threadID,
                        currentUserID: t.props.currentUserID,
                        collapsed: e.collapsed,
                        hidden: e.hidden,
                        threadID: e.threadID,
                        onBlock: t.onBlock,
                        onCollapse: t.props.onCollapseThread,
                        onClose: t.props.onCloseThread,
                        onExpand: t.props.onExpandThread,
                        onFocus: t.props.onFocusThread,
                        onUnfocus: t.props.onUnfocusThread,
                        focused: t.props.focusedThreadID === e.threadID,
                        reportThreadData: t.props.reportThreadData
                    }) : null
                }, t.onBlock = function(e) {
                    t.props.archiveThread(e), t.props.onBlockThread(e)
                }, t.setOpenThreadsRef = function(e) {
                    return _e = e
                }, t.handleContentResize = function() {
                    t.resizeAnimationHandle || (t.resizeAnimationHandle = requestAnimationFrame(function() {
                        t.props.onResizeContent(), t.resizeAnimationHandle = null
                    }))
                }, t
            }
            return i.__extends(t, e), t.prototype.render = function() {
                var e = this,
                    t = this.props.openedThreads.map(function(t) {
                        return e.renderThread(t)
                    });
                return r.createElement(W._8, {
                    className: "whispers-open-threads",
                    display: W.R.Flex,
                    flexDirection: W.T.RowReverse,
                    alignItems: W.c.End,
                    position: W._15.Absolute,
                    attachBottom: !0,
                    attachLeft: !0,
                    refDelegate: this.setOpenThreadsRef
                }, t, r.createElement(a.a, {
                    onResize: this.handleContentResize
                }))
            }, t
        }(r.Component)
    },
    "1pvm": function(e, t) {},
    "2BvQ": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Core_Services_Spade_Video"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "video"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "broadcastType"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 81
            }
        };
        n.loc.source = {
            body: "query Core_Services_Spade_Video($id: ID!) {\nvideo(id: $id) {\nid\nbroadcastType\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "2Hj/": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("6sO2"),
            o = n("Ex+h"),
            s = n("l4QG");

        function l(e, t) {
            var n = e.activity,
                i = e.availability;
            if (!n) return null;
            switch (n.type) {
                case o.a.Playing:
                    return n.game && n.game.name ? Object(a.d)("playing {game}", {
                        game: n.game.name
                    }, "PresenceActivity") : Object(a.d)("playing", "PresenceActivity");
                case o.a.Watching:
                    var r = function(e) {
                        if (e && e.type === o.a.Watching && e.user) return e.user.hosting && e.user.hosting.displayName ? {
                            isHost: !0,
                            displayName: e.user.hosting.displayName
                        } : {
                            isHost: !1,
                            displayName: e.user.displayName
                        };
                        return null
                    }(n);
                    return r ? i && i === s.a.Offline ? !t && r.isHost ? Object(a.d)("was watching {user} with the {community} community", {
                        user: r.displayName,
                        community: n.user.displayName
                    }, "PresenceActivity") : !t && n.user.stream && n.user.stream.game && n.user.stream.game.name ? Object(a.d)("was watching {user} stream {game}", {
                        user: r.displayName,
                        game: n.user.stream.game.name
                    }, "PresenceActivity") : Object(a.d)("was watching {user}", {
                        user: r.displayName
                    }, "PresenceActivity") : !t && r.isHost ? Object(a.d)("watching {user} with the {community} community", {
                        user: r.displayName,
                        community: n.user.displayName
                    }, "PresenceActivity") : !t && n.user.stream && n.user.stream.game && n.user.stream.game.name ? Object(a.d)("watching {user} stream {game}", {
                        user: r.displayName,
                        game: n.user.stream.game.name
                    }, "PresenceActivity") : Object(a.d)("watching {user}", {
                        user: r.displayName
                    }, "PresenceActivity") : null;
                case o.a.Streaming:
                    return n.stream && n.stream.game && n.stream.game.name ? Object(a.d)("streaming {game}", {
                        game: n.stream.game.name
                    }, "PresenceActivity") : Object(a.d)("streaming", "PresenceActivity");
                default:
                    return null
            }
        }

        function c(e, t) {
            if (!t) return null;
            switch (t.type) {
                case o.a.Streaming:
                    return "/" + e;
                case o.a.Watching:
                    return "/" + t.user.login;
                default:
                    return null
            }
        }

        function d(e) {
            var t = Object(a.d)("Online", "PresenceAvailability");
            switch (e) {
                case s.a.Idle:
                case s.a.Away:
                    return Object(a.d)("Away", "PresenceAvailability");
                case s.a.Busy:
                    return Object(a.d)("Busy", "PresenceAvailability");
                case s.a.Offline:
                    return Object(a.d)("Offline", "PresenceAvailability");
                case s.a.Invisible:
                    return Object(a.d)("Invisible", "PresenceAvailability");
                case s.a.Online:
                default:
                    return t
            }
        }
        var u = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this,
                        i = a.o.experiments.getAssignment("TWILIGHT_EXTENDED_PRESENCE");
                    return n.state = {
                        hasExtendedRichPresence: "variant_a" === i
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props,
                        t = e.activity,
                        n = e.availability,
                        i = e.condensed,
                        a = this.state.hasExtendedRichPresence ? {
                            activity: t,
                            availability: n
                        } : {
                            activity: t
                        };
                    return r.createElement("span", {
                        "data-a-target": "presence-text"
                    }, l(a, i) || d(n))
                }, t
            }(r.Component),
            p = n("Odds"),
            m = function(e) {
                var t = p._17.Online;
                switch (e.availability) {
                    case s.a.Idle:
                    case s.a.Away:
                        t = p._17.Away;
                        break;
                    case s.a.Busy:
                        t = p._17.Busy;
                        break;
                    case s.a.Invisible:
                        t = p._17.Invisible;
                        break;
                    case s.a.Offline:
                        t = p._17.Offline;
                        break;
                    case s.a.Online:
                        t = p._17.Online;
                        break;
                    default:
                        t = p._17.Online
                }
                return r.createElement(p._16, {
                    status: t
                })
            },
            h = n("HZww");
        var f = n("aMxy"),
            g = n("mqvl"),
            v = n("TVUY");

        function b(e) {
            return function(t) {
                return function(e) {
                    return function(t) {
                        return function(n) {
                            function a(t) {
                                var i = n.call(this, t) || this;
                                return i.options = e(t), i
                            }
                            return i.__extends(a, n), a.prototype.componentDidMount = function() {
                                this.options.skip || this.subscribe(this.options)
                            }, a.prototype.componentWillReceiveProps = function(t) {
                                var n = e(t);
                                n.topic === this.options.topic || n.skip || (this.unsubscribe(), this.subscribe(n)), this.options = n
                            }, a.prototype.componentWillUnmount = function() {
                                this.unsubscribe()
                            }, a.prototype.render = function() {
                                return r.createElement(t, i.__assign({}, this.props))
                            }, a.prototype.subscribe = function(e) {
                                this.unsubscriber = Object(h.r)({
                                    fragment: e.fragment,
                                    id: e.id,
                                    topic: e.topic,
                                    type: e.type,
                                    mutator: e.mutator
                                })
                            }, a.prototype.unsubscribe = function() {
                                this.unsubscriber && this.unsubscriber()
                            }, a
                        }(r.Component)
                    }
                }(function(t) {
                    var n = e(t);
                    return {
                        id: "User:" + n.id,
                        skip: n.skip,
                        fragment: v,
                        topic: Object(h.n)(n.currentUserID),
                        type: f.PubsubMessageType.Presence,
                        mutator: function(e, t) {
                            if (!t) return null;
                            var i = n.id;
                            if (e.data.user_id !== +i) return t;
                            var r = "$User:" + i + ".activity";
                            return t.availability = e.data.availability.toUpperCase(), t.activity = Object(g.a)(e.data.activity, r), t
                        }
                    }
                })(t)
            }
        }
        n.d(t, "b", function() {
            return u
        }), n.d(t, "a", function() {
            return m
        }), n.d(t, !1, function() {
            return b
        }), n.d(t, "c", function() {
            return l
        }), n.d(t, "d", function() {
            return c
        }), n.d(t, !1, function() {
            return d
        })
    },
    "2Nqs": function(e, t) {},
    "2aoH": function(e, t, n) {
        "use strict";
        var i, r = n("TToO"),
            a = n("GiK3"),
            o = n("6sO2"),
            s = n("Odds"),
            l = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        content: null,
                        isError: !1
                    }, n.logger = o.j.withCategory("StickyHeaderRoot"), n.displayContent = function(e) {
                        n.setState({
                            content: e
                        })
                    }, n.hideContent = function() {
                        n.setState({
                            content: null
                        })
                    }, i && n.logger.error(new Error("StickyHeaderRoot is already mounted."), "StickyHeaderRoot is already mounted. There should only be one of these mounted at a time."), i = n, n
                }
                return r.__extends(t, e), t.prototype.componentDidCatch = function(e, t) {
                    var n = this;
                    this.setState({
                        isError: !0
                    }, function() {
                        n.logger.error(e, "A unhandled exception occurred in the component hierarchy", {
                            info: t
                        })
                    })
                }, t.prototype.componentWillUnmount = function() {
                    i = null
                }, t.prototype.render = function() {
                    return this.state.isError || !this.state.content ? null : a.createElement(s._8, null, this.state.content)
                }, t
            }(a.Component),
            c = null,
            d = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    if (c) {
                        var i = "There may only be one StickyHeader mounted at a time.";
                        o.j.error(new Error(i), i)
                    }
                    return c = n, n
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    i && i.displayContent(this.props.children)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    i && (e.children ? i.displayContent(e.children) : i.hideContent())
                }, t.prototype.componentWillUnmount = function() {
                    i && i.hideContent(), c = null
                }, t.prototype.render = function() {
                    return null
                }, t
            }(a.Component);
        n.d(t, "a", function() {
            return d
        }), n.d(t, "b", function() {
            return l
        })
    },
    "2b/B": function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            r = n("2KeS"),
            a = n("+xm8"),
            o = n("f2i/"),
            s = n("NikC"),
            l = n("Aj/L"),
            c = n("TToO"),
            d = n("HW6M"),
            u = n("GiK3"),
            p = n("6sO2"),
            m = n("rCmJ"),
            h = n("7vx8"),
            f = n("NXs7"),
            g = n("VAT8"),
            v = n("CSlQ"),
            b = n("Odds"),
            k = n("Kkxm"),
            y = (n("e6tx"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onCardClick = function() {
                        n.setState({
                            dropdownOpen: !n.state.dropdownOpen
                        })
                    }, n.onClickOut = function() {
                        n.setState({
                            dropdownOpen: !1
                        })
                    }, n.onLoginClick = function(e) {
                        e.preventDefault(), n.props.login()
                    }, n.onLogoutClick = function(e) {
                        e.preventDefault(), n.props.logout()
                    }, n.onDarkModeCheckboxClick = function() {
                        var e = n.props.theme === f.a.Dark ? f.a.Light : f.a.Dark;
                        n.props.changeTheme(e, s.a.UserMenu)
                    }, n.state = {
                        dropdownOpen: !1
                    }, n
                }
                return c.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.props.data.loading || this.props.data.error) return u.createElement(b._14, null);
                    if (this.props.isOnboarding) return u.createElement(b._8, {
                        display: b.R.Flex,
                        className: "minimal-top-nav__user",
                        fullHeight: !0
                    }, u.createElement(b._8, {
                        display: b.R.Flex,
                        flexWrap: b.U.NoWrap,
                        alignItems: b.c.Center,
                        flexGrow: 1,
                        padding: {
                            right: 1
                        },
                        fullHeight: !0
                    }, u.createElement(b._8, {
                        margin: {
                            x: 1
                        },
                        flexShrink: 0
                    }, u.createElement(b._8, null, u.createElement(b.m, {
                        size: 30,
                        src: this.props.data.currentUser.profileImageURL,
                        alt: "User avatar"
                    }))), u.createElement(b._8, {
                        flexGrow: 1,
                        flexShrink: 1,
                        flexDirection: b.T.Column,
                        ellipsis: !0
                    }, u.createElement(b._35, {
                        className: "minimal-top-nav__username"
                    }, this.props.data.currentUser.displayName))));
                    if (this.props.isLoggedIn) {
                        var e = null;
                        this.props.darkModeEnabled && (e = u.createElement(b._35, {
                            borderBottom: !0,
                            margin: {
                                y: 1
                            }
                        }, u.createElement(b._8, {
                            margin: {
                                x: 2,
                                bottom: 1
                            }
                        }, u.createElement(b.J, {
                            id: "dark-mode-toggle",
                            label: Object(p.d)("Dark Mode", "MinimalUser"),
                            "data-a-target": "dark-mode-toggle",
                            "data-test-selector": "dark-mode-toggle",
                            "data-a-value": this.props.theme,
                            checked: this.props.theme === f.a.Dark,
                            onChange: this.onDarkModeCheckboxClick
                        }))));
                        var t = d(Object(g.c)(f.a.Dark), {
                                "minimal-top-nav__dropdown-open": this.state.dropdownOpen
                            }),
                            n = d({
                                "minimal-top-nav__dropdown-open": this.state.dropdownOpen
                            }, {
                                "minimal-top-nav__dropdown": !this.state.dropdownOpen
                            });
                        return u.createElement(m.a, {
                            onClickOut: this.onClickOut,
                            className: t
                        }, u.createElement(b._8, {
                            display: b.R.Flex,
                            className: "minimal-top-nav__user",
                            fullHeight: !0
                        }, u.createElement(b._6, {
                            onClick: this.onCardClick,
                            "data-test-selector": "user-menu-toggle"
                        }, u.createElement(b._8, {
                            display: b.R.Flex,
                            flexWrap: b.U.NoWrap,
                            alignItems: b.c.Center,
                            flexGrow: 1,
                            padding: {
                                right: 1
                            },
                            fullHeight: !0
                        }, u.createElement(b._8, {
                            margin: {
                                x: 1
                            },
                            flexShrink: 0
                        }, u.createElement(b._8, null, u.createElement(b.m, {
                            size: 30,
                            src: this.props.data.currentUser.profileImageURL,
                            alt: "User avatar"
                        }))), u.createElement(b._8, {
                            flexGrow: 1,
                            flexShrink: 1,
                            flexDirection: b.T.Column,
                            ellipsis: !0
                        }, u.createElement(b._35, {
                            className: "minimal-top-nav__username"
                        }, this.props.data.currentUser.displayName)), u.createElement(b._35, {
                            display: b.R.Flex,
                            flexShrink: 0,
                            className: "minimal-top-nav__expand"
                        }, u.createElement(b._24, {
                            asset: b._25.GlyphArrDown
                        }))))), u.createElement(b._35, {
                            fullWidth: !0,
                            overflow: b._11.Hidden,
                            position: b._15.Absolute,
                            padding: {
                                y: 1
                            },
                            background: b.n.Base,
                            className: n,
                            "data-test-selector": "dropdown-down"
                        }, e, u.createElement(b._6, {
                            onClick: this.onLogoutClick
                        }, u.createElement(b._35, {
                            color: b.K.Alt,
                            display: b.R.Flex,
                            alignItems: b.c.Center,
                            padding: {
                                x: 2,
                                y: .5
                            }
                        }, u.createElement(b._8, {
                            display: b.R.Flex,
                            alignItems: b.c.Center,
                            margin: {
                                right: 1
                            }
                        }, u.createElement(b._24, {
                            asset: b._25.NavLogout,
                            height: 18,
                            width: 18
                        })), u.createElement(b.Q, null, Object(p.d)("Log Out", "MinimalUser"))))))
                    }
                    return u.createElement(b._8, {
                        margin: 1
                    }, u.createElement(b.v, {
                        onClick: this.onLoginClick
                    }, Object(p.d)("Log in", "MinimalUser")))
                }, t.prototype.reportInteractive = function() {
                    !this.props.data || this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t = c.__decorate([Object(v.d)("MinimalUser"), Object(h.a)(k)], t)
            }(u.Component));
        var _ = Object(i.b)(function(e) {
            return {
                isLoggedIn: Object(l.d)(e),
                theme: e.ui.theme
            }
        }, function(e) {
            return Object(r.b)({
                logout: o.g,
                login: function() {
                    return o.f(a.a.TopNavLoginButton)
                },
                changeTheme: s.b
            }, e)
        })(y);
        n.d(t, "a", function() {
            return _
        })
    },
    "2emZ": function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.Emote = "emote", e.Mention = "mention", e.Hashtag = "hashtag", e.None = "none"
            }(i || (i = {}))
    },
    "2o2f": function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.Live = "live", e.WatchParty = "watch_party", e.Premiere = "premiere", e.Rerun = "rerun"
            }(i || (i = {}))
    },
    "2rJy": function(e, t) {},
    3: function(e, t) {},
    "37Pp": function(e, t, n) {
        "use strict";
        var i = n("GiK3"),
            r = n("6sO2"),
            a = n("FDYX"),
            o = n("Odds"),
            s = (n("M5Tl"), function(e) {
                var t = e.subscriptionProduct;
                if (void 0 === t) return i.createElement("div", null);
                var n = Object(r.d)("{price} / Month", {
                    price: t.price
                }, "SubDiscountPriceLabel");
                if (e.isGift ? Object(a.c)([e.subscriptionProduct]) : Object(a.d)([e.subscriptionProduct])) {
                    var s = void 0;
                    return s = e.isGift ? Object(r.d)("{price} (Save {percent})", {
                        price: Object(a.a)(e.subscriptionProduct, e.isGift),
                        percent: Object(r.e)(Object(a.b)(e.subscriptionProduct, e.isGift) / 100, "percent")
                    }, "SubDiscountPriceLabel") : Object(r.d)("{price} for the first month (Save {percent})", {
                        price: Object(a.a)(e.subscriptionProduct, e.isGift),
                        percent: Object(r.e)(Object(a.b)(e.subscriptionProduct, e.isGift) / 100, "percent")
                    }, "SubDiscountPriceLabel"), i.createElement(o._8, {
                        "data-test-selector": "sub-discount-price-label__discounted"
                    }, i.createElement(o.Q, {
                        color: o.K.Alt2,
                        decoration: o._47.Strikethrough
                    }, n), i.createElement(o.Q, {
                        className: "sub-discount-price-label__discount-price",
                        type: o._49.H5,
                        bold: !0
                    }, s))
                }
                return i.createElement(o._8, {
                    "data-test-selector": "sub-discount-price-label__non-discounted"
                }, i.createElement(o.Q, null, n))
            });
        n.d(t, !1, function() {
            return "sub-discount-price-label__discounted"
        }), n.d(t, !1, function() {
            return "sub-discount-price-label__non-discounted"
        }), n.d(t, "a", function() {
            return s
        })
    },
    "3KVC": function(e, t, n) {
        "use strict";
        t.a = function(e) {
            void 0 === e && (e = "");
            return i.test(e)
        }, t.b = function(e) {
            void 0 === e && (e = "");
            var t = e.match(i);
            if (null === t) return "";
            if (t && t.length > 0 && void 0 !== t.index) {
                var n = t[1];
                return n
            }
            return ""
        };
        var i = new RegExp("(?:^|\\s)(?:https?://)?(?:(?:www|go).)?twitch.tv/videos/(\\d+)(?:$|\\s)?")
    },
    "3QSP": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Core_Services_Spade_SubEvent_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "withVideo"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "videoID"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "canPrimeSubscribe"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "subscriptionBenefit"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "tier"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "purchasedWithPrime"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "video"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "videoID"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "withVideo"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "broadcastType"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 266
            }
        };
        n.loc.source = {
            body: "query Core_Services_Spade_SubEvent_User($channelID: ID! $withVideo: Boolean! $videoID: ID) {\nuser(id: $channelID) {\nid\nself {\ncanPrimeSubscribe\nsubscriptionBenefit {\nid\ntier\npurchasedWithPrime\n}\n}\n}\nvideo(id: $videoID) @include(if: $withVideo) {\nid\nbroadcastType\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "3iBR": function(e, t, n) {
        "use strict";
        n.d(t, "m", function() {
            return a
        }), n.d(t, "c", function() {
            return o
        }), n.d(t, "b", function() {
            return s
        }), n.d(t, "a", function() {
            return l
        }), n.d(t, "i", function() {
            return c
        }), n.d(t, "k", function() {
            return d
        }), n.d(t, "j", function() {
            return u
        }), n.d(t, "l", function() {
            return p
        }), n.d(t, "g", function() {
            return m
        }), n.d(t, "h", function() {
            return h
        }), n.d(t, "d", function() {
            return f
        }), n.d(t, "e", function() {
            return g
        }), n.d(t, "f", function() {
            return v
        });
        var i, r = n("I89S"),
            a = {
                ERROR_DISPLAY_TIMEOUT: 5e3,
                GET_BALANCE_RATE_LIMIT: 5e3,
                UNDO_PROMPT_DURATION: 5e3
            },
            o = "https://d3aqoihi2n8ty8.cloudfront.net",
            s = o + "/cheer",
            l = o + "/actions",
            c = 8e5,
            d = 1e4,
            u = 500,
            p = 1e3,
            m = "cheer",
            h = r.a.Purple,
            f = "FIRST_PARTY",
            g = "THIRD_PARTY",
            v = ((i = {})[r.a.Gray] = "#979797", i[r.a.Purple] = "#9c3ee8", i[r.a.Green] = "#1db2a5", i[r.a.Blue] = "#0099fe", i[r.a.Red] = "#f43021", i[r.a.Yellow] = "#f3a71a", i)
    },
    "3yQz": function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return r
        }), n.d(t, "a", function() {
            return a
        });
        var i, r = "VIEWS",
            a = "TIME";
        ! function(e) {
            e.Popular = "VIEWS", e.Newest = "TIME"
        }(i || (i = {}))
    },
    "3ydF": function(e, t) {},
    "46tX": function(e, t, n) {
        "use strict";
        t.d = m, t.c = function(e) {
            return i.test(e)
        }, t.a = h, t.b = function(e) {
            return a.test(e)
        };
        var i = /firefox/i,
            r = /Android/i,
            a = /chrome/i,
            o = /webOS/i,
            s = /iPhone/i,
            l = /iPad/i,
            c = /iPod/i,
            d = /BlackBerry/i,
            u = /Windows Phone/i,
            p = /Mobile/i;

        function m(e) {
            return h(e) || o.test(e) || s.test(e) || l.test(e) || c.test(e) || d.test(e) || u.test(e) || p.test(e)
        }

        function h(e) {
            return r.test(e)
        }
    },
    "4Dne": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.b = function(e) {
            return a.__awaiter(this, void 0, void 0, function() {
                var t, n, i, u, p, m, h, f;
                return a.__generator(this, function(a) {
                    switch (a.label) {
                        case 0:
                            return (t = e.friendActivity) ? (n = Object(c.d)(e.friendLogin, t)) ? (i = "/" === n[0] ? n.slice(1) : n, t.type !== s.a.Streaming ? [3, 1] : (u = {
                                target_action: r.Streaming,
                                target_channel: e.friendLogin,
                                target_game: t.stream.game && t.stream.game.name || void 0,
                                target_login: e.friendLogin,
                                target_url: i,
                                ui_context: e.context
                            }, [3, 7])) : (o.j.warn("[trackPresenceClick] Attempted to track a click on an unjoinable activity."), [2]) : (o.j.warn("[trackPresenceClick] Attempted to track a click with no activity."), [2]);
                        case 1:
                            if (t.type !== s.a.Watching) return [3, 6];
                            p = void 0, m = null, a.label = 2;
                        case 2:
                            return a.trys.push([2, 4, , 5]), [4, o.o.apollo.client.query({
                                query: d,
                                variables: {
                                    login: t.user.login
                                }
                            })];
                        case 3:
                            return m = a.sent(), [3, 5];
                        case 4:
                            return h = a.sent(), o.j.error(h, "[trackPresenceClick] Failed to query watched user data.", {
                                watchedUser: t.user.login
                            }), [3, 5];
                        case 5:
                            return (f = m && m.data && m.data.user) ? p = f.hosting && f.hosting.stream ? f.hosting.stream.game && f.hosting.stream.game.name || void 0 : f.stream && f.stream.game && f.stream.game.name || void 0 : o.j.error(new Error("GraphQL empty response"), "[trackPresenceClick] Query for watched user info returned no data.", {
                                watchedUser: t.user.login
                            }), u = {
                                target_action: r.Watching,
                                target_channel: t.user.login,
                                target_game: p,
                                target_hosted_channel: t.user.hosting && t.user.hosting.login || void 0,
                                target_login: e.friendLogin,
                                target_url: i,
                                ui_context: e.context
                            }, [3, 7];
                        case 6:
                            return o.j.warn("[trackPresenceClick] Attempted to track a click on an unjoinable activity."), [2];
                        case 7:
                            return o.n.track(l.SpadeEventType.PresenceClick, u), [2]
                    }
                })
            })
        };
        var i, r, a = n("TToO"),
            o = n("6sO2"),
            s = n("Ex+h"),
            l = n("vH/s"),
            c = n("2Hj/"),
            d = n("K1Jg");
        n.n(d);
        ! function(e) {
            e.FriendsListButton = "friends", e.WhisperHeaderButton = "convo_join", e.WhisperHeaderLink = "convo_link"
        }(i || (i = {})),
        function(e) {
            e.Streaming = "streaming", e.Watching = "watching"
        }(r || (r = {}))
    },
    "4JjK": function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e[e.Ready = 0] = "Ready", e[e.Dimensions = 1] = "Dimensions", e[e.RequestAd = 2] = "RequestAd", e[e.OnStart = 3] = "OnStart", e[e.OnCredit = 4] = "OnCredit", e[e.OnFinish = 5] = "OnFinish", e[e.OnClose = 6] = "OnClose", e[e.OnError = 7] = "OnError", e[e.Adblock = 8] = "Adblock", e[e.LimitReached = 9] = "LimitReached"
            }(i || (i = {}))
    },
    "4MRZ": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChannelPage_SubscribeButton_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emoteSetID"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "canPrimeSubscribe"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "subscriptionBenefit"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "purchasedWithPrime"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "tier"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "requestInfo"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "countryCode"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 262
            }
        };
        n.loc.source = {
            body: "query ChannelPage_SubscribeButton_User($login: String!) {\nuser(login: $login) {\nid\ndisplayName\nsubscriptionProducts {\nid\nemoteSetID\n}\nself {\ncanPrimeSubscribe\nsubscriptionBenefit {\nid\npurchasedWithPrime\ntier\n}\n}\n}\ncurrentUser {\nid\n}\nrequestInfo {\ncountryCode\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "4NZK": function(e, t) {},
    "4VmI": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Prime_Current_User"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hasPrime"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 56
            }
        };
        n.loc.source = {
            body: "query Prime_Current_User {\ncurrentUser {\nid\nhasPrime\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "4bQk": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("6sO2"),
            o = n("+Znq"),
            s = n("7vx8"),
            l = n("oIkB"),
            c = n("2BvQ"),
            d = n("xrVp"),
            u = n("YugT"),
            p = {
                Channel: "channel"
            };
        var m = n("vH/s"),
            h = n("CSlQ"),
            f = n("Odds"),
            g = n("VNvG"),
            v = (n("3ydF"), n("SUA7")),
            b = n("x4k6");
        n.d(t, "b", function() {
            return k
        }), n.d(t, "a", function() {
            return y
        });
        var k;
        ! function(e) {
            e[e.IconOnly = 0] = "IconOnly", e[e.TextOnly = 1] = "TextOnly", e[e.IconAndText = 2] = "IconAndText"
        }(k || (k = {}));
        var y = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    isFollowing: !1,
                    showDropdown: !1,
                    disableNotifications: !0
                }, t.userDataLoaded = function() {
                    return t.props.data && !t.props.data.loading && !t.props.data.error && t.props.data.user
                }, t.toggleFollowing = function() {
                    var e;
                    t.state.isFollowing ? (t.unfollowUser(), e = m.SpadeEventType.Unfollow) : (t.followUser(), e = m.SpadeEventType.Follow);
                    var n = t.getFollowData();
                    n && function(e, t) {
                        i.__awaiter(this, void 0, void 0, function() {
                            var n, r, o, s, l, p, m, h, f, g;
                            return i.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        if (n = null, r = null, o = null, s = null, l = null, !t.channelID) return [3, 5];
                                        i.label = 1;
                                    case 1:
                                        return i.trys.push([1, 3, , 4]), [4, a.o.apollo.client.query({
                                            query: u,
                                            variables: {
                                                id: t.channelID
                                            }
                                        })];
                                    case 2:
                                        return s = i.sent(), [3, 4];
                                    case 3:
                                        return m = i.sent(), a.j.error(m, "Failed to make query for channel info in FollowEvent reporting.", {
                                            channelID: t.channelID
                                        }), [3, 4];
                                    case 4:
                                        (o = s && s.data && s.data.user) ? l = o.hosting.stream && o.hosting.stream.game ? o.hosting.stream.game.name : o.stream && o.stream.game && o.stream.game.name: a.j.error(new Error("GraphQL empty response"), "Query for channel info in FollowEvent reporting return no data.", {
                                            channelID: t.channelID
                                        }), i.label = 5;
                                    case 5:
                                        if (!(h = a.n.getVideoPlayerTrackingData().vodID)) return [3, 10];
                                        i.label = 6;
                                    case 6:
                                        return i.trys.push([6, 8, , 9]), [4, a.o.apollo.client.query({
                                            query: c,
                                            variables: {
                                                id: h
                                            }
                                        })];
                                    case 7:
                                        return n = i.sent(), [3, 9];
                                    case 8:
                                        return f = i.sent(), a.j.error(f, "Failed to make query for VOd info in FollowEvent reporting.", {
                                            currentVODID: h
                                        }), [3, 9];
                                    case 9:
                                        (r = n && n.data && n.data.video) ? p = Object(d.a)(r.broadcastType): (p = null, a.j.error(new Error("GraphQL empty response"), "Query for video info in FollowEvent reporting return no data.", {
                                            currentVODID: h
                                        })), i.label = 10;
                                    case 10:
                                        return g = {
                                            channel: t.channelLogin,
                                            channel_id: t.channelID,
                                            channel_game: l,
                                            cta_visible: a.n.getVideoPlayerTrackingData().followCTAVisible,
                                            host_channel: t.hostChannelLogin,
                                            host_channel_id: t.hostChannelID,
                                            game: t.game,
                                            partner: o ? o.isPartner : null,
                                            src: t.src,
                                            vod_id: h,
                                            vod_type: p
                                        }, a.n.track(e, g), [2]
                                }
                            })
                        })
                    }(e, {
                        channelLogin: n.user && n.user.login || "",
                        channelID: n.user && n.user.id || "",
                        hostChannelLogin: t.props.hostChannelLogin,
                        hostChannelID: t.props.hostChannelID,
                        src: p.Channel
                    }), t.setState(function(e) {
                        return {
                            isFollowing: !e.isFollowing,
                            disableNotifications: !1
                        }
                    })
                }, t.followUser = function() {
                    var e = t.getFollowData();
                    if (t.props.followUser && e) {
                        t.setState({
                            showDropdown: !0
                        });
                        var n = i.__assign({}, Object(l.a)({
                            disableNotifications: !1,
                            targetID: e.user && e.user.id || ""
                        }), {
                            optimisticResponse: {
                                followUser: {
                                    __typename: "FollowUserPayload",
                                    follow: {
                                        disableNotifications: !1,
                                        __typename: "Follow"
                                    }
                                }
                            }
                        });
                        t.props.followUser(n).then(function(e) {
                            Object(l.e)(b, {
                                login: t.props.channelLogin
                            }, function(t) {
                                var n = t.user;
                                return n && n.self && (n.self.follower ? n.self.follower.disableNotifications = e.data.followUser.follow.disableNotifications : n.self.follower = {
                                    __typename: "FollowerEdge",
                                    disableNotifications: e.data.followUser.follow.disableNotifications
                                }), t
                            }), t.props.onFollow && t.props.onFollow(t.props.channelLogin)
                        })
                    }
                }, t.unfollowUser = function() {
                    var e = t.getFollowData();
                    if (t.props.unfollowUser && e) {
                        var n = i.__assign({}, Object(l.a)({
                            targetID: e.user && e.user.id || ""
                        }), {
                            optimisticResponse: {
                                unfollowUser: {
                                    __typename: "UnfollowUserPayload",
                                    follow: {
                                        disableNotifications: null,
                                        __typename: "Follow"
                                    }
                                }
                            }
                        });
                        t.props.unfollowUser(n).then(function() {
                            Object(l.e)(b, {
                                login: t.props.channelLogin
                            }, function(e) {
                                var t = e.user;
                                return t && t.self && (t.self.follower ? t.self.follower.disableNotifications = null : t.self.follower = {
                                    __typename: "FollowerEdge",
                                    disableNotifications: null
                                }), e
                            }), t.props.onUnfollow && t.props.onUnfollow(t.props.channelLogin)
                        })
                    }
                }, t.toggleNotificationsEnabled = function() {
                    var e = t.getFollowData();
                    if (t.props.followUser && e) {
                        var n = i.__assign({}, Object(l.a)({
                            disableNotifications: !t.state.disableNotifications,
                            targetID: e.user && e.user.id || ""
                        }), {
                            optimisticResponse: {
                                followUser: {
                                    __typename: "FollowUserPayload",
                                    follow: {
                                        disableNotifications: !t.state.disableNotifications,
                                        __typename: "Follow"
                                    }
                                }
                            }
                        });
                        t.props.followUser(n).then(function(e) {
                            Object(l.e)(b, {
                                login: t.props.channelLogin
                            }, function(t) {
                                var n = t.user;
                                return n && n.self && (n.self.follower ? n.self.follower.disableNotifications = e.data.followUser.follow.disableNotifications : n.self.follower = {
                                    __typename: "FollowerEdge",
                                    disableNotifications: e.data.followUser.follow.disableNotifications
                                }), t
                            })
                        }), t.setState(function(e) {
                            return {
                                disableNotifications: !e.disableNotifications
                            }
                        })
                    }
                }, t.getFollowData = function() {
                    return t.props.followData ? t.props.followData : t.props.data
                }, t
            }
            return i.__extends(t, e), t.prototype.componentDidMount = function() {
                this.reportInteractive()
            }, t.prototype.componentDidUpdate = function() {
                this.props.channelLogin && !this.userDataLoaded() || !this.props.updateContainerWidth || this.props.updateContainerWidth(), this.reportInteractive()
            }, t.prototype.componentWillMount = function() {
                var e = this.props.followData;
                if (e) {
                    var t = e.user;
                    this.setState({
                        isFollowing: t && t.self && t.self.follower && null !== t.self.follower.disableNotifications || !1,
                        disableNotifications: t && t.self && t.self.follower && t.self.follower.disableNotifications
                    })
                }
            }, t.prototype.componentWillReceiveProps = function(e) {
                if (e.data && !e.data.loading && !e.data.error) {
                    var t = e.data.user;
                    this.setState({
                        isFollowing: t && t.self && t.self.follower && null !== t.self.follower.disableNotifications || !1,
                        disableNotifications: !(t && t.self && t.self.follower && null !== t.self.follower.disableNotifications) || t.self.follower.disableNotifications
                    })
                }
            }, t.prototype.render = function() {
                return this.props.isLoggedIn ? !this.props.showLoadingPlaceholder || this.props.data && !this.props.data.loading ? this.props.currentUserLogin !== this.props.channelLogin && this.props.followUser && this.props.unfollowUser && (this.props.followData || this.props.data && !this.props.data.loading && !this.props.data.error && this.props.data.user) ? this.state.isFollowing ? this.props.hideWhenFollowing ? null : this.props.hideDropdownWhenFollowing ? this.renderUnfollowButton() : this.renderUnfollowButtonWithDropdown() : this.renderFollowButton(this.toggleFollowing) : null : this.renderPlaceholder() : this.renderFollowButton(this.props.login)
            }, t.prototype.renderPlaceholder = function() {
                switch (this.props.size) {
                    case f.z.Large:
                        return r.createElement(f._14, {
                            width: 93,
                            height: 36
                        });
                    case f.z.Small:
                        return r.createElement(f._14, {
                            width: 66,
                            height: 24
                        });
                    default:
                        return r.createElement(f._14, {
                            width: 70,
                            height: 30
                        })
                }
            }, t.prototype.renderFollowButton = function(e) {
                var t = this.props.isHostedFollow && this.props.channelName ? Object(a.d)("Follow {username}", {
                    username: this.props.channelName
                }, "FollowButton") : Object(a.d)("Follow", "FollowButton");
                return r.createElement(f.v, i.__assign({
                    ariaLabel: t,
                    blurAfterClick: this.props.blurAfterClick,
                    "data-a-target": "follow-button",
                    "data-test-selector": "follow-button",
                    icon: this.props.followUIType === k.TextOnly ? void 0 : f._25.Heart,
                    onClick: e,
                    size: this.props.size,
                    tabIndex: this.props.tabIndex
                }, Object(f._63)(this.props)), this.props.followUIType === k.IconOnly ? null : t)
            }, t.prototype.renderUnfollowButton = function() {
                var e = Object(a.d)("Unfollow", "FollowButton");
                return r.createElement(f.v, i.__assign({
                    ariaLabel: e,
                    blurAfterClick: this.props.blurAfterClick,
                    "data-a-target": "unfollow-button",
                    "data-test-selector": "unfollow-button",
                    icon: this.props.unfollowUIType === k.TextOnly ? void 0 : f._25.Heart,
                    statusAlertIcon: this.props.unfollowUIType === k.TextOnly ? void 0 : f._25.Unheart,
                    statusAlertText: this.props.unfollowUIType === k.IconOnly ? "" : e,
                    tabIndex: this.props.tabIndex,
                    size: this.props.size,
                    onClick: this.toggleFollowing
                }, Object(f._63)(this.props)), this.props.unfollowUIType === k.IconOnly ? null : Object(a.d)("Followed", "FollowButton"))
            }, t.prototype.renderUnfollowButtonWithDropdown = function() {
                var e = this.props.balloonDirection ? this.props.balloonDirection : f.r.BottomRight,
                    t = this.getFollowData(),
                    n = t && t.user && t.user.displayName || "",
                    i = this.state.disableNotifications ? Object(a.d)("Opt in to notifications to receive updates on this channel's activity, including when they go live.", "FollowButton") : Object(a.d)("You will be notified on this channel's activity, including when they go live.", "FollowButton");
                return r.createElement(f._8, {
                    display: f.R.Flex,
                    className: "follow-btn",
                    "data-test-selector": "unfollow-button__dropdown"
                }, r.createElement(f._8, null, this.renderUnfollowButton()), r.createElement(o.a, {
                    display: f.R.InlineFlex,
                    openByDefault: this.state.showDropdown
                }, r.createElement("button", {
                    tabIndex: this.props.tabIndex,
                    "aria-label": Object(a.d)("Dropdown", "FollowButton"),
                    className: "follow-btn__dropdown-toggle",
                    "data-a-target": "follow-dropdown-toggle"
                }, r.createElement(f._8, {
                    justifyContent: f._7.Center,
                    display: f.R.Flex,
                    alignItems: f.c.Stretch,
                    fullHeight: !0
                }, r.createElement(f._24, {
                    asset: f._25.GlyphArrDown
                }))), r.createElement(f.q, {
                    size: f.s.Small,
                    direction: e,
                    "data-a-target": "follow-notifications-balloon"
                }, r.createElement(f._35, {
                    color: f.K.Base,
                    display: f.R.Flex,
                    flexWrap: f.U.Wrap,
                    padding: 1
                }, r.createElement(f._8, {
                    display: f.R.Flex,
                    margin: {
                        bottom: 1
                    }
                }, r.createElement(f.Q, {
                    type: f._49.H6
                }, Object(a.d)("You are following {followingName}", {
                    followingName: n
                }, "FollowButton"))), r.createElement(f._8, {
                    display: f.R.Flex,
                    flexWrap: f.U.NoWrap,
                    padding: {
                        bottom: 1
                    }
                }, r.createElement(f._8, {
                    display: f.R.Flex,
                    padding: {
                        right: 2
                    }
                }, r.createElement("span", null, r.createElement(f.Q, {
                    type: f._49.H6
                }, Object(a.d)("Notifications", "FollowButton")))), r.createElement(f._8, {
                    display: f.R.Flex,
                    flexShrink: 0
                }, r.createElement(f._51, {
                    onChange: this.toggleNotificationsEnabled,
                    checked: !this.state.disableNotifications,
                    "data-a-target": "notifications-toggle"
                }))), r.createElement(f._8, {
                    display: f.R.InlineFlex,
                    padding: {
                        bottom: 1
                    }
                }, r.createElement(f.Q, {
                    type: f._49.Span,
                    color: f.K.Alt2
                }, i))))))
            }, t.prototype.reportInteractive = function() {
                _(this.props) ? this.props.latencyTracking.reportInteractive() : this.props.data && !this.props.data.loading && this.props.latencyTracking.reportInteractive()
            }, t = i.__decorate([Object(s.a)(b, {
                options: function(e) {
                    return {
                        variables: {
                            login: e.channelLogin
                        }
                    }
                },
                skip: function(e) {
                    return _(e)
                }
            }), Object(s.a)(g, {
                name: "followUser"
            }), Object(s.a)(v, {
                name: "unfollowUser"
            }), Object(h.d)("FollowButton")], t)
        }(r.Component);

        function _(e) {
            return !e.isLoggedIn || (!e.channelLogin || (!!e.followData || e.channelLogin === e.currentUserLogin))
        }
    },
    "4ik2": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecommendedFriend_CancelFriendRequest"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CancelFriendRequestInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "cancelFriendRequest"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 136
            }
        };
        n.loc.source = {
            body: "mutation RecommendedFriend_CancelFriendRequest($input: CancelFriendRequestInput!) {\ncancelFriendRequest(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "4t/L": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("HW6M"),
            a = n("GiK3"),
            o = n("F8kA"),
            s = n("CSlQ"),
            l = n("GfPd"),
            c = n("Odds"),
            d = (n("WnwY"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.setContainerRef = function(e) {
                        return t.containerRef = e
                    }, t.onMouseEnter = function() {
                        t.containerRef && (t.props.tooltipLabel ? t.props.tooltipLayer.show({
                            label: t.props.tooltipLabel,
                            from: t.containerRef,
                            align: c._53.Center,
                            direction: c._54.Right
                        }) : t.props.tooltipContent && t.props.tooltipLayer.showRich({
                            from: t.containerRef,
                            richContent: t.props.tooltipContent,
                            allowHover: t.props.offline,
                            delayOpenMS: 1e3,
                            forceDarkTheme: !0,
                            balloonDirection: t.props.offline ? c.r.Right : c.r.RightCenter
                        }))
                    }, t.onMouseLeave = function() {
                        t.props.tooltipLayer.hide()
                    }, t.onMouseClick = function() {
                        t.props.tooltipLayer.hide()
                    }, t.addEventListeners = function() {
                        t.containerRef && (t.containerRef.addEventListener("mouseenter", t.onMouseEnter), t.containerRef.addEventListener("mouseleave", t.onMouseLeave), t.containerRef.addEventListener("click", t.onMouseClick))
                    }, t.removeEventListeners = function() {
                        t.containerRef && (t.containerRef.removeEventListener("mouseenter", t.onMouseEnter), t.containerRef.removeEventListener("mouseleave", t.onMouseLeave), t.containerRef.removeEventListener("click", t.onMouseClick))
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive(), this.addEventListeners()
                }, t.prototype.componentWillUnmount = function() {
                    this.removeEventListeners()
                }, t.prototype.render = function() {
                    return this.props.collapsed ? a.createElement("div", {
                        ref: this.setContainerRef,
                        "data-test-selector": "side-nav-card-collapsed"
                    }, a.createElement(c._2, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        display: c.R.Flex,
                        alignItems: c.c.Center,
                        flexWrap: c.U.NoWrap
                    }, a.createElement(o.a, {
                        to: this.props.linkTo,
                        className: "side-nav-card",
                        onClick: this.props.onClick
                    }, a.createElement(c._8, {
                        className: r("side-nav-card__avatar", {
                            "side-nav-card__avatar--offline": this.props.offline
                        }),
                        flexShrink: 0
                    }, a.createElement(c.m, {
                        src: this.props.avatarSrc,
                        alt: this.props.avatarAlt,
                        size: 30,
                        presenceIndicator: this.props.avatarPresence,
                        presenceStatus: this.props.presenceStatus
                    }))))) : a.createElement("div", {
                        ref: this.setContainerRef
                    }, a.createElement(c._8, {
                        className: "side-nav-card",
                        position: c._15.Relative,
                        display: c.R.Flex,
                        alignItems: c.c.Center
                    }, a.createElement(c._2, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        display: c.R.Flex,
                        alignItems: c.c.Center,
                        flexWrap: c.U.NoWrap,
                        fullWidth: !0
                    }, a.createElement(o.a, i.__assign({
                        to: this.props.linkTo,
                        className: "side-nav-card__link",
                        onClick: this.props.onClick
                    }, Object(c._63)(this.props)), a.createElement(c._8, {
                        className: r("side-nav-card__avatar", {
                            "side-nav-card__avatar--offline": this.props.offline
                        }),
                        flexShrink: 0,
                        alignItems: c.c.Center
                    }, a.createElement(c.m, {
                        src: this.props.avatarSrc,
                        alt: this.props.avatarAlt,
                        size: 30,
                        presenceIndicator: this.props.avatarPresence,
                        presenceStatus: this.props.presenceStatus
                    })), a.createElement(c._8, {
                        ellipsis: !0,
                        flexDirection: c.T.Column,
                        flexGrow: 1,
                        margin: {
                            left: 1
                        },
                        display: c.R.Flex,
                        "data-a-target": "side-nav-card-metadata"
                    }, a.createElement("div", {
                        className: "side-nav-card__title",
                        title: this.props.title,
                        "data-a-target": "side-nav-title"
                    }, a.createElement(c.Q, {
                        ellipsis: !0,
                        fontSize: c.V.Size5
                    }, this.props.titleElement || this.props.title)), a.createElement(c._35, {
                        className: "side-nav-card__metadata",
                        fontSize: c.V.Size6,
                        display: c.R.Flex,
                        justifyContent: c._7.Between,
                        flexWrap: c.U.NoWrap,
                        ellipsis: !0
                    }, a.createElement(c._2, {
                        flexGrow: 1,
                        "data-a-target": "side-nav-game-title"
                    }, a.createElement(c.Q, {
                        type: c._49.Span,
                        ellipsis: !0
                    }, this.props.metadataLeft)), a.createElement(c._8, {
                        flexShrink: 0,
                        margin: {
                            left: .5
                        },
                        "data-a-target": "side-nav-live-status"
                    }, this.props.metadataRight))))), this.getCardSlideInContent()))
                }, t.prototype.getCardSlideInContent = function() {
                    return this.props.slideInContent ? a.createElement(c._8, {
                        className: "side-nav-card__hover-content",
                        position: c._15.Absolute,
                        display: c.R.Flex,
                        alignItems: c.c.Center,
                        attachRight: !0,
                        padding: {
                            right: 1
                        },
                        "data-a-target": "side-nav-card-hover"
                    }, this.props.slideInContent) : null
                }, t = i.__decorate([Object(s.d)("SideNavCard"), Object(l.c)()], t)
            }(a.Component));
        n.d(t, "a", function() {
            return d
        })
    },
    "576g": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "cheer"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "cheer"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "emotes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "prefix"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "tiers"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "bits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "color"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "canCheer"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "images"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "theme"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isAnimated"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "dpiScale"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 142
            }
        };
        n.loc.source = {
            body: "fragment cheer on User {\ncheer {\nid\nemotes {\nid\nprefix\ntype\ntiers {\nid\nbits\ncolor\ncanCheer\nimages {\nid\nurl\ntheme\nisAnimated\ndpiScale\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "5LoI": function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.Games = "game", e.Videos = "vod", e.VideosNewest = "vod_by_created_at", e.Users = "user", e.Channels = "live_channel", e.Communities = "community"
            }(i || (i = {}))
    },
    "5MsU": function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.PlayerInit = "init", e.ContentShowing = "contentShowing", e.PlaybackStatistics = "playbackStatistics", e.ChansubRequired = "chansubRequired", e.VideoFailure = "videoFailure", e.Formats = "videoFormats", e.ABSStreamFormatChange = "abs_stream_format_change", e.FormatChanged = "videoFormatChanged", e.TimeChange = "timeChange", e.BufferChange = "bufferChange", e.SegmentChange = "segmentchange", e.UsherFailError = "usherFail", e.CaptionUpdate = "captions", e.SeekFailed = "seekfailed", e.VariantSwitchRequest = "variantSwitchRequested", e.ViewersChange = "viewerschange", e.StreamLoaded = "streamLoaded", e.VideoLoaded = "videoLoaded", e.VideoPaused = "videoPaused", e.QualityChange = "qualitychange", e.Online = "online", e.Offline = "offline", e.Restricted = "restricted", e.CastingChange = "castingchange", e.TheatreChange = "theatrechange", e.MidrollRequested = "midrollrequested", e.ManifestExtraInfo = "manifestExtraInfo", e.TransitionToCollectionVOD = "transitionToCollectionVod", e.TransitionToRecommendedVOD = "transitionToRecommendedVod", e.StitchedAdStart = "stitchedadstart", e.StichedAdEnd = "stitchedadend", e.PersistenPlayerToggle = "persistentPlayerEnableToggle", e.StatsUpdate = "statsupdate", e.PromptLoginModal = "prompt login modal", e.OpenStream = "openStream", e.PlayerReady = "ready", e.FullscreenChange = "fullscreenchange", e.ExternalFullscreenChange = "externalfullscreenchange"
            }(i || (i = {}))
    },
    "5k1t": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.b = function(e, t, n) {
            return {
                type: i,
                threadID: e,
                afterMessageID: n,
                content: t
            }
        };
        var i = "whisperNotifications.WHISPER_THREAD_NOTIFIED"
    },
    "5s0/": function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            r = n("2KeS"),
            a = n("+xm8"),
            o = n("f2i/"),
            s = n("uXDg"),
            l = n("QPF3"),
            c = n("TToO"),
            d = n("GiK3"),
            u = n("6sO2"),
            p = n("CSlQ"),
            m = n("Odds"),
            h = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleClick = function() {
                        t.props.threadID ? (t.props.onClick && t.props.onClick(), t.props.openThread(t.props.threadID)) : t.props.login()
                    }, t
                }
                return c.__extends(t, e), t.prototype.render = function() {
                    var e = !this.props.isPopout,
                        t = Object(u.d)("Whisper", "WhisperButton"),
                        n = d.createElement(m.v, {
                            disabled: !e,
                            onClick: this.handleClick,
                            "data-a-target": "usercard-whisper-button",
                            "data-test-selector": "whisper-button"
                        }, t);
                    return e ? n : d.createElement(m._52, {
                        align: m._53.Left,
                        direction: m._54.Top,
                        label: Object(u.d)("Whispers are disabled in popout chat", "WhispersDisabledText")
                    }, n)
                }, t = c.__decorate([Object(p.d)("WhisperButton", {
                    autoReportInteractive: !0
                })], t)
            }(d.Component);
        var f = Object(i.b)(null, function(e) {
            return Object(r.b)({
                login: function() {
                    return Object(o.f)(a.a.WhisperButton)
                },
                openThread: function(e) {
                    return Object(s.l)({
                        collapsed: !1,
                        threadID: e,
                        ignoreCollapseIfOpen: !0
                    }, Object(l.a)())
                }
            }, e)
        })(h);
        n.d(t, "a", function() {
            return f
        })
    },
    "67ft": function(e, t) {},
    "6O9f": function(e, t) {},
    "6QFv": function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.Individual = "INDIVIDUAL", e.Team = "TEAM", e.Global = "GLOBAL", e.Insider = "INSIDER"
            }(i || (i = {}))
    },
    "6Rwu": function(e, t) {},
    "6Vb7": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("OAwv"),
            a = n("GiK3"),
            o = n("6sO2"),
            s = n("Ejve"),
            l = "legacy_routes_enabled",
            c = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.isEnabled = !1, n.onHistoryChange = function(e, t) {
                        n.isEnabled ? "REPLACE" !== t ? e && e.pathname ? (n.logger.debug("Location changed", {
                            path: e.pathname
                        }), n.legacyRoutes.forEach(function(t) {
                            try {
                                if (e.pathname.match(t)) {
                                    n.logger.debug("Found legacy route. Reloading...");
                                    var i = "" !== e.search ? r.parse(e.search) : {};
                                    i["from-redirect"] = "true";
                                    var a = r.stringify(i),
                                        l = o.a.buildType === s.a.Dev ? window.location.host : window.location.hostname,
                                        c = window.location.protocol + "//" + l + e.pathname + "?" + a;
                                    return n.logger.debug("Redirecting to legacy route", {
                                        newUrl: c
                                    }), void window.location.replace(c)
                                }
                            } catch (e) {
                                o.j.withCategory("legacy").error(e, "Unable to determine legacy reload match", {
                                    regex: t
                                })
                            }
                        })) : n.logger.debug("Unable to process history change. Path is null or empty.") : n.logger.debug("Skipping legacy route processing, due to history replace.") : n.logger.debug("Legacy routing not enabled.")
                    }, n.processRedirectParam = function(e) {
                        if (e && e.pathname && e.search) {
                            var t = "" !== e.search ? r.parse(e.search) : {};
                            if (t["from-redirect"]) {
                                delete t["from-redirect"];
                                var i = r.stringify(t),
                                    a = "";
                                i.length > 0 && (a = "?" + i), n.props.history.replace({
                                    pathname: e.pathname,
                                    hash: e.hash,
                                    search: a
                                })
                            }
                        }
                    }, n.isEnabled = o.b.get(l, !1), n.logger = o.j.withCategory("legacy-routes"), n.legacyRoutes = n.buildRoutes(), n.props.history.listen(n.onHistoryChange), n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return null
                }, t.prototype.componentDidMount = function() {
                    this.processRedirectParam(this.props.history.location)
                }, t.prototype.buildRoutes = function() {
                    if (!this.isEnabled) return [];
                    this.logger.debug("Building legacy routes...");
                    var e = o.b.get("legacy_routes", []),
                        t = [];
                    if (!e || 0 === e.length) return this.logger.debug("No legacy routes found in settings."), t;
                    for (var n = 0, i = e; n < i.length; n++) {
                        var r = i[n];
                        try {
                            var a = new RegExp(r, "i");
                            t.push(a)
                        } catch (e) {
                            this.logger.debug("Failed to parse route!", {
                                val: r,
                                err: e
                            })
                        }
                    }
                    return this.logger.debug("Done building legacy routes!", {
                        count: t.length
                    }), t
                }, t
            }(a.Component);
        n.d(t, "a", function() {
            return l
        }), n.d(t, !1, function() {
            return "legacy_routes"
        }), n.d(t, "b", function() {
            return c
        })
    },
    "6WAQ": function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.Archive = "ARCHIVE", e.Highlight = "HIGHLIGHT", e.Upload = "UPLOAD", e.WatchParty = "WATCH_PARTY", e.PastPremiere = "PAST_PREMIERE", e.PremiereUpload = "PREMIERE_UPLOAD"
            }(i || (i = {}))
    },
    "6uxC": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Algolia_RequestInfo"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "requestInfo"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "countryCode"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 57
            }
        };
        n.loc.source = {
            body: "query Algolia_RequestInfo {\nrequestInfo {\ncountryCode\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "70dR": function(e, t, n) {
        "use strict";
        var i, r = n("TToO"),
            a = n("GiK3"),
            o = n("RH2O"),
            s = n("Aj/L"),
            l = n("CSlQ"),
            c = n("6sO2"),
            d = n("+Znq"),
            u = n("7vx8"),
            p = n("RweG"),
            m = n("vBst"),
            h = n("TeXj"),
            f = n("S1vB"),
            g = n("HZww"),
            v = n("oIkB"),
            b = n("HM6l"),
            k = n("c84M"),
            y = n("3iBR"),
            _ = n("Odds"),
            S = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(_._8, {
                        className: "esports-top-page-details"
                    }, a.createElement(_._8, {
                        margin: {
                            bottom: 1
                        },
                        padding: {
                            x: 2,
                            y: 1
                        },
                        display: _.R.Flex,
                        justifyContent: _._7.Center,
                        className: "insider-pass-pre-purchase__header"
                    }, a.createElement("img", {
                        src: y.c + "/owl-2017/all-access-logo.svg",
                        alt: Object(c.d)("Overwatch League All-Access Pass on Twitch", "EsportsTopPageDetails"),
                        height: "80px",
                        "data-test-selector": "balloon-detail-logo"
                    })), a.createElement(_._2, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(_.Q, {
                        type: _._49.H4,
                        bold: !0,
                        "data-test-selector": "balloon-detail-subheader"
                    }, Object(c.d)("Your VIP pass to the best of the Overwatch League", "EsportsTopPageDetails"))), a.createElement(_._8, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(_.Q, {
                        type: _._49.H6,
                        bold: !0,
                        "data-test-selector": "balloon-detail-igc-subheader"
                    }, Object(c.d)("Overwatch In-Game Content (requires Blizzard account link)", "EsportsTopPageDetails")), a.createElement(_.Q, {
                        "data-test-selector": "balloon-detail-igc-copy"
                    }, Object(c.d)("3 Hero Skins • Overwatch League Player Icon • Overwatch League Spray •", "EsportsTopPageDetails"), " ", a.createElement(_.Q, {
                        type: _._49.Span,
                        italic: !0
                    }, Object(c.d)("Plus more content coming soon", "EsportsTopPageDetails")))), a.createElement(_._8, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(_.Q, {
                        type: _._49.H6,
                        bold: !0,
                        "data-test-selector": "balloon-detail-experience-subheader"
                    }, Object(c.d)("The Overwatch League All-Access Experience", "EsportsTopPageDetails")), a.createElement(_.Q, {
                        "data-test-selector": "balloon-detail-experience-copy"
                    }, Object(c.d)("Exclusive Command Center stream • Match analysis videos by players • Ask questions in post-match Q&A with players • Passholder-only chat • 23 Twitch emotes • Overwatch League chat badges • Ad-free viewing on Overwatch League", "EsportsTopPageDetails"))))
                }, t
            }(a.PureComponent),
            E = n("YEG/"),
            C = n("FDYX"),
            N = (n("VOrx"), function(e) {
                var t = Object(C.d)(e.subscriptionProducts),
                    n = t ? Object(C.a)(e.subscriptionProducts[0]) : e.subscriptionProducts[0].price,
                    i = Object(c.d)("Offer available for a limited time. Terms and conditions apply", "EsportsNonSubbedTopPage"),
                    r = null;
                if (e.isEsportGiftingApproved) {
                    var o = Object(c.d)("Gift All-Access Pass", "EsportsNonSubbedTopPage");
                    r = a.createElement(_.v, {
                        ariaLabel: o,
                        onClick: e.showRecipientSelect,
                        type: _.B.Hollow,
                        "data-test-selector": "subscribe-button__gift"
                    }, o)
                }
                return a.createElement(_._8, {
                    padding: 2
                }, a.createElement(S, null), a.createElement(_.Q, {
                    type: _._49.H6,
                    bold: !0
                }, Object(c.d)("One-Time Purchase for the 2018 Season", "EsportsNonSubbedTopPage")), a.createElement(_.Q, null, Object(c.d)("All-Access benefits last up to the start of the 2019 Overwatch League Season. Twitch emotes, badges, and in-game content are yours to keep forever.", "EsportsNonSubbedTopPage")), a.createElement(_._8, {
                    margin: {
                        top: 1
                    }
                }, a.createElement(_._8, {
                    margin: {
                        right: .5
                    },
                    display: _.R.Inline
                }, a.createElement(E.a, {
                    isSubbedToTier: !1,
                    tierPrice: n,
                    "data-a-target": "tier1-subscribe-button",
                    reportSubAction: e.handleTopPageSubButtonClick,
                    url: e.subscriptionProducts[0].url,
                    isEsportChannel: !0
                })), r), e.userHasPrime && t && a.createElement(_._8, {
                    display: _.R.Flex,
                    margin: {
                        top: 1
                    },
                    flexDirection: _.T.Column
                }, a.createElement(_._8, {
                    display: _.R.Flex
                }, a.createElement(_._8, {
                    margin: {
                        right: .5
                    }
                }, a.createElement(_._24, {
                    asset: _._25.Crown,
                    type: _._26.Prime
                })), a.createElement(_.Q, null, Object(c.d)("You’re saving $10 off the $29.99 price with Twitch Prime", "EsportsNonSubbedTopPage"))), a.createElement(_._8, null, a.createElement(_.Q, {
                    fontSize: _.V.Size7
                }, a.createElement(_.O, {
                    to: k.b
                }, i)))), !e.userHasPrime && a.createElement(_._8, {
                    display: _.R.Flex,
                    margin: {
                        top: 1
                    },
                    flexDirection: _.T.Column
                }, a.createElement(_._8, {
                    display: _.R.Flex
                }, a.createElement(_._8, {
                    margin: {
                        right: .5
                    }
                }, a.createElement(_._24, {
                    asset: _._25.Crown,
                    type: _._26.Prime
                })), a.createElement(_.Q, null, Object(c.d)("Get $10 off with Twitch Prime <x:link>Sign up now</x:link>", {
                    "x:link": function(e) {
                        return a.createElement(_.O, {
                            key: "insider-prime-link",
                            to: "https://twitch.amazon.com/prime/",
                            type: _.P.Overlay,
                            targetBlank: !0
                        }, e)
                    }
                }, "EsportsNonSubbedTopPage"))), a.createElement(_._8, null, a.createElement(_.Q, {
                    fontSize: _.V.Size7
                }, a.createElement(_.O, {
                    to: k.b
                }, i)))))
            }),
            T = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    var e = null;
                    if (this.props.isEsportGiftingApproved) {
                        var t = Object(c.d)("Gift All-Access Pass", "EsportsSubbedTopPage");
                        e = a.createElement(_._8, {
                            margin: {
                                top: 1
                            }
                        }, a.createElement(_.v, {
                            ariaLabel: t,
                            onClick: this.props.showRecipientSelect,
                            type: _.B.Hollow,
                            "data-test-selector": "subscribe-button__gift"
                        }, t))
                    }
                    return a.createElement(_._8, {
                        padding: 2
                    }, a.createElement(S, null), a.createElement(_.Q, {
                        "test-selector": "subbed-subheader",
                        type: _._49.H4,
                        bold: !0
                    }, Object(c.d)("You have the All-Access Pass", "EsportsSubbedTopPage")), a.createElement(_.Q, {
                        "test-selector": "subbed-copy"
                    }, Object(c.d)("All-Access benefits last up to the start of the 2019 Overwatch League Season. Twitch emotes, badges, and in-game content are yours to keep.", "EsportsSubbedTopPage")), e)
                }, t
            }(a.PureComponent),
            w = n("6BvN"),
            O = n("5LoI"),
            R = n("MAZT"),
            D = n("uTyw"),
            I = n("zCIC"),
            x = n("SZoP"),
            F = n("2KeS"),
            P = n("lK86"),
            U = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    if (!this.props.data || this.props.data.loading || !this.props.recipientLogin || this.props.data.user.self.canGift) return null;
                    var e = this.props.isEsportChannel ? Object(c.d)("Sorry, an All-Access Pass to this channel is not available for this user", "GiftRecipientIneligibleMessage") : Object(c.d)("Sorry, a gift subscription to this channel is not available for this user.", "GiftRecipientIneligibleMessage"),
                        t = this.props.isEsportChannel ? "esports-gift-eligibility-message-selector" : "gift-eligibility-message-selector";
                    return a.createElement(_._8, {
                        margin: {
                            top: 1
                        }
                    }, a.createElement(_.Q, {
                        italic: !0,
                        color: _.K.Alt2,
                        "data-test-selector": t
                    }, e))
                }, t
            }(a.Component),
            j = Object(F.d)(Object(l.d)("GiftRecipientIneligibleMessage"), Object(u.a)(P, {
                options: function(e) {
                    return {
                        variables: {
                            recipientLogin: e.recipientLogin,
                            subProductId: e.subProductId
                        }
                    }
                },
                skip: function(e) {
                    return !e.recipientLogin || !e.subProductId
                }
            }))(U),
            A = n("daN3"),
            L = n("CwIZ"),
            M = (n("+YN9"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        selectedUser: null
                    }, t.reportGiftCheckoutAction = function() {
                        t.props.reportSubMenuAction({
                            action: L.a.BuyGiftSub,
                            checkoutButtonTier: t.props.selectedProductPrice,
                            giftRecipient: t.state.selectedUser ? t.state.selectedUser.login : null
                        })
                    }, t.onUserClick = function(e) {
                        for (var n = e.target; n.parentElement && !n.dataset.user_id;) n = n.parentElement;
                        n.dataset.user_id && n.dataset.user_login && n.dataset.user_name ? t.setState({
                            selectedUser: {
                                id: n.dataset.userId || "",
                                login: n.dataset.user_login || "",
                                name: n.dataset.user_name || ""
                            }
                        }) : t.setState({
                            selectedUser: null
                        })
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    (e.isWaiting || e.isErrored || !e.hasInput) && this.setState({
                        selectedUser: null
                    })
                }, t.prototype.render = function() {
                    var e;
                    return e = this.props.isWaiting ? a.createElement(_._8, {
                        fullHeight: !0
                    }, a.createElement(_._10, {
                        fillContent: !0
                    })) : this.props.hasInput ? this.props.isErrored ? this.getErrorMessage() : this.props.userResults && this.props.userResults.totalHits > 0 ? this.getUserResultContent() : this.getNoResultsMessage() : a.createElement(_._8, {
                        margin: 1
                    }, a.createElement(_.Q, {
                        color: _.K.Alt2
                    }, Object(c.d)("Start typing to see a list of suggestions here.", "GiftRecipientSearchResult"))), a.createElement("div", {
                        onKeyDown: this.props.onKeyDown
                    }, a.createElement(_._35, {
                        className: "gift-recipient-search-result-view",
                        background: _.n.Alt,
                        position: _._15.Relative,
                        overflow: _._11.Hidden,
                        display: _.R.Block,
                        margin: {
                            bottom: 2
                        },
                        borderLeft: !0,
                        borderBottom: !0,
                        borderRight: !0
                    }, a.createElement(_._2, {
                        overflow: _._11.Hidden,
                        position: _._15.Relative
                    }, a.createElement(I.b, {
                        suppressScrollX: !0
                    }, a.createElement(_._8, null, e, a.createElement(I.a, {
                        enabled: !this.props.isWaiting && this.props.hasInput,
                        loadMore: this.props.loadMore
                    }))))), a.createElement(_._8, null, a.createElement(_._8, {
                        display: _.R.Flex,
                        alignItems: _.c.Center,
                        fullWidth: !0
                    }, this.getBuyGiftButton(), a.createElement(_._2, {
                        margin: {
                            x: 1
                        }
                    }, a.createElement(_.Q, {
                        "data-test-selector": "gift-recipient-display-name-selector"
                    }, Object(c.d)("for {displayName}", {
                        displayName: a.createElement(_.Q, {
                            bold: !0,
                            type: _._49.Span
                        }, this.getFormattedDisplayName())
                    }, "GiftRecipientCheckoutButton")))), a.createElement(j, {
                        subProductId: this.props.selectedProductId,
                        recipientLogin: this.state.selectedUser ? this.state.selectedUser.login : null,
                        isEsportChannel: this.props.isEsportChannel
                    })))
                }, t.prototype.getBuyGiftButton = function() {
                    return a.createElement(A.a, {
                        subProductId: this.props.selectedProductId,
                        giftRecipient: this.state.selectedUser ? this.state.selectedUser.login : null,
                        checkoutURL: this.props.selectedProductURL,
                        onClick: this.reportGiftCheckoutAction,
                        isEsportChannel: this.props.isEsportChannel
                    })
                }, t.prototype.getFormattedDisplayName = function() {
                    return this.state.selectedUser ? Object(x.a)(this.state.selectedUser.login, this.state.selectedUser.name) : ""
                }, t.prototype.getErrorMessage = function() {
                    return a.createElement(_._8, {
                        fullWidth: !0,
                        textAlign: _._45.Center,
                        justifyContent: _._7.Center
                    }, a.createElement(_.Q, null, Object(c.d)("Something went wrong", "GiftRecipientSearchResult")))
                }, t.prototype.getUserResultContent = function() {
                    var e = this;
                    return this.props.userResults ? this.props.userResults.results.map(function(t) {
                        var n = Object(x.a)(t.login || "", t.name || "");
                        return a.createElement(_._6, {
                            tabIndex: -1,
                            "data-ts_selectable": !0,
                            "data-tt_content": !0,
                            key: "git-recipient-result__" + t.id,
                            "data-user_id": t.id,
                            "data-user_login": t.login,
                            "data-user_name": t.name,
                            onClick: e.onUserClick,
                            "data-test-selector": "subscribe-button__gift_search_result"
                        }, a.createElement(_._8, {
                            padding: .5
                        }, a.createElement(_.C, {
                            row: !0
                        }, a.createElement(_.E, {
                            alt: t.thumbnailAltText,
                            src: t.thumbnail ? t.thumbnail : "",
                            size: _.F.Size4,
                            aspect: _.l.Aspect1x1
                        }), a.createElement(_.D, {
                            overflow: _._11.Hidden
                        }, a.createElement(_._2, {
                            padding: {
                                x: 1
                            }
                        }, a.createElement(_.Q, {
                            type: _._49.H5,
                            ellipsis: !0
                        }, n))))))
                    }) : a.createElement(_._14, null)
                }, t.prototype.getNoResultsMessage = function() {
                    return a.createElement(_._8, {
                        margin: 1
                    }, a.createElement(_.Q, {
                        color: _.K.Alt2
                    }, Object(c.d)("No Results", "GiftRecipientSearchResult")))
                }, t = r.__decorate([Object(l.d)("GiftRecipientSearchResultPanel")], t)
            }(a.Component)),
            B = (n("m0Vj"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleChange = function(e) {
                        t.props.onChange(e.target.value)
                    }, t
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    if (this.props.selectedSubProduct) {
                        var e = null;
                        if (this.props.selectedSubProduct && this.props.selectedSubProduct.giftPromotion) {
                            var t = this.props.selectedSubProduct && this.props.selectedSubProduct.giftPromotion ? this.props.selectedSubProduct.giftPromotion : null;
                            e = a.createElement(_.Q, {
                                bold: !0,
                                className: "subscription-gift-recipient-search__discount-message"
                            }, Object(c.d)("{price} (Save {percent})", {
                                price: t ? t.newPrice : "",
                                percent: Object(c.e)(t ? t.discountValue / 100 : 0, "percent")
                            }, "GiftRecipientSearch"))
                        }
                        var n = "gift-recipient-search-subheading-selector",
                            i = Object(c.d)("{subDisplayName}: {giftPrice} Gift Subscription (Single Month)", {
                                subDisplayName: this.props.selectedSubProduct ? this.props.selectedSubProduct.displayName : "",
                                giftPrice: this.props.selectedSubProduct ? this.props.selectedSubProduct.price : ""
                            }, "GiftRecipientSearch");
                        return this.props.isEsportChannel && (n = "gift-recipient-search-esports-subheading-selector", i = Object(c.d)("Overwatch League: {giftPrice} All-Access Pass for current season", {
                            giftPrice: this.props.selectedSubProduct ? this.props.selectedSubProduct.price : ""
                        }, "GiftRecipientSearch")), a.createElement(_._8, {
                            padding: 2,
                            className: "subscription-gift-recipient-search"
                        }, a.createElement(_._8, null, a.createElement(_._8, {
                            display: _.R.Flex,
                            justifyContent: _._7.Between,
                            alignItems: _.c.Center,
                            margin: {
                                bottom: 1
                            }
                        }, a.createElement(_.Q, {
                            type: _._49.H4,
                            bold: !0
                        }, Object(c.d)("Choose a Gift Recipient", "GiftRecipientSearch")), a.createElement(_.v, {
                            type: _.B.Text,
                            "data-a-target": "subscribe-back-button",
                            icon: _._25.AngleLeft,
                            onClick: this.props.onBack,
                            "data-test-selector": "gift-recipient-search-back-button"
                        }, a.createElement(_._8, {
                            alignItems: _.c.Center,
                            display: _.R.InlineFlex
                        }, a.createElement(_.Q, null, Object(c.d)("Back", "GiftRecipientSearch"))))), a.createElement(_._8, null, a.createElement(_.Q, {
                            "data-test-selector": n
                        }, i), e, a.createElement(_._8, {
                            display: _.R.Flex,
                            justifyContent: _._7.Center,
                            padding: {
                                top: 1
                            },
                            fullWidth: !0
                        }, a.createElement(_._2, {
                            fullWidth: !0
                        }, a.createElement("div", null, a.createElement(_._27, {
                            onChange: this.handleChange,
                            onKeyDown: this.props.onKeyDown,
                            id: "gift-recipient-search",
                            placeholder: Object(c.d)("Search for a Twitch ID", "GiftRecipientSearch"),
                            "data-test-selector": "gift-recipient-search-input-selector"
                        }), a.createElement(M, {
                            hasInput: this.props.hasInput,
                            userResults: this.props.userResults,
                            isErrored: this.props.isErrored,
                            isWaiting: this.props.isWaiting,
                            loadMore: this.props.loadMore,
                            onKeyDown: this.props.onKeyDown,
                            selectedProductId: this.props.selectedSubProduct.id,
                            selectedProductURL: this.props.selectedSubProduct.url,
                            selectedProductPrice: this.props.selectedSubProduct.price,
                            reportSubMenuAction: this.props.reportSubMenuAction,
                            isEsportChannel: this.props.isEsportChannel
                        })))))))
                    }
                    return a.createElement(_._14, null)
                }, t
            }(a.Component)),
            W = 50,
            V = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onChange = function(e) {
                        n.inputTimer && (clearTimeout(n.inputTimer), n.inputTimer = 0), e ? (n.setState({
                            isWaiting: !0
                        }), n.inputTimer = setTimeout(function() {
                            return n.doSearch(e)
                        }, W)) : n.setState(n.getEmptyState())
                    }, n.loadMore = function() {
                        return r.__awaiter(n, void 0, void 0, function() {
                            var e, t, n;
                            return r.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        if (this.state.queryID || !0 === this.state.exhaustedHits) return [2];
                                        e = this.state.currentPage + 1, i.label = 1;
                                    case 1:
                                        return i.trys.push([1, 3, , 4]), [4, this.searchClient.queryForType(O.a.Users, this.state.term, "", {
                                            page: e
                                        })];
                                    case 2:
                                        return t = i.sent(), [3, 4];
                                    case 3:
                                        return i.sent(), this.setState(r.__assign({}, this.getEmptyState(), {
                                            isErrored: !0,
                                            hasInput: !0
                                        })), [2];
                                    case 4:
                                        return t ? (n = Object(D.b)({
                                            searchResults: t,
                                            append: e > 0,
                                            currentUserResults: this.state.currentUserResults
                                        }), this.setState({
                                            currentUserResults: n.currentUserResults,
                                            term: this.state.term,
                                            hasInput: !0,
                                            isWaiting: !1,
                                            currentPage: e,
                                            exhaustedHits: n.exhaustedHits
                                        }), [2]) : (this.setState(r.__assign({}, this.getEmptyState(), {
                                            isErrored: !0,
                                            hasInput: !0
                                        })), [2])
                                }
                            })
                        })
                    }, n.onKeyDown = function(e) {
                        n.state.term && (e.keyCode === w.a.Esc ? n.setState({
                            hasInput: !1
                        }) : e.keyCode === w.a.Up ? n.focusNext(-1) : e.keyCode === w.a.Down && n.focusNext(1))
                    }, n.state = n.getEmptyState(), n.searchClient = new R.a({
                        appId: c.a.algoliaApplicationID,
                        apiKey: c.a.algoliaAPIKey,
                        apolloClient: c.o.apollo.client,
                        logger: c.j,
                        config: c.a
                    }), n
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(B, {
                        onChange: this.onChange,
                        loadMore: this.loadMore,
                        onKeyDown: this.onKeyDown,
                        userResults: this.state.currentUserResults,
                        hasInput: this.state.hasInput,
                        isErrored: this.state.isErrored,
                        isWaiting: this.state.isWaiting,
                        onBack: this.props.onBack,
                        selectedSubProduct: this.props.selectedSubProduct,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        isEsportChannel: this.props.isEsportChannel
                    })
                }, t.prototype.getEmptyState = function() {
                    return {
                        currentUserResults: {
                            totalHits: 0,
                            results: []
                        },
                        term: "",
                        hasInput: !1,
                        isErrored: !1,
                        queryID: "",
                        isWaiting: !1,
                        currentPage: -1,
                        focusSelectable: !1,
                        exhaustedHits: !1
                    }
                }, t.prototype.doSearch = function(e) {
                    return r.__awaiter(this, void 0, void 0, function() {
                        var t, n, i, a, o;
                        return r.__generator(this, function(s) {
                            switch (s.label) {
                                case 0:
                                    this.inputTimer = 0, t = -1, n = b.a(), i = "INPUT" === document.activeElement.tagName, this.setState({
                                        queryID: n,
                                        focusSelectable: !i && !!this.state.currentFocus
                                    }), s.label = 1;
                                case 1:
                                    return s.trys.push([1, 3, , 4]), t = 0, [4, this.searchClient.queryForType(O.a.Users, e, n)];
                                case 2:
                                    return a = s.sent(), [3, 4];
                                case 3:
                                    return s.sent(), this.setState(r.__assign({}, this.getEmptyState(), {
                                        isErrored: !0,
                                        hasInput: !0,
                                        term: e
                                    })), [2];
                                case 4:
                                    return a ? this.state.queryID !== a.id ? [2] : (o = Object(D.b)({
                                        searchResults: a,
                                        append: !1
                                    }), this.setState(function(n) {
                                        return r.__assign({}, n, o, {
                                            queryID: "",
                                            term: e,
                                            hasInput: !0,
                                            isWaiting: !1,
                                            currentPage: t
                                        })
                                    }), [2]) : (this.setState(r.__assign({}, this.getEmptyState(), {
                                        isErrored: !0,
                                        hasInput: !0,
                                        term: e
                                    })), [2])
                            }
                        })
                    })
                }, t.prototype.focusNext = function(e) {
                    var t, n = document.querySelectorAll("[data-ts_selectable=true]"),
                        i = document.activeElement,
                        r = Array.prototype.indexOf.call(n, i);
                    if ((t = r < 0 ? e > 0 ? 0 : n.length - 1 : r + e) < 0 && (t = 0), !(t >= n.length)) {
                        var a = n.item(t);
                        a.focus(), a.tabIndex = 0, this.state.currentFocus && (this.state.currentFocus.tabIndex = -1), this.setState({
                            currentFocus: a
                        })
                    }
                }, t = r.__decorate([Object(l.d)("GiftRecipientSearch")], t)
            }(a.Component);
        ! function(e) {
            e[e.Top = 0] = "Top", e[e.SubOptions = 1] = "SubOptions", e[e.GiftOptions = 2] = "GiftOptions", e[e.RecipientSelect = 3] = "RecipientSelect"
        }(i || (i = {}));
        var H = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.goToPreviousPage = function() {
                        t.props.reportSubMenuAction({
                            action: L.a.ClickBack,
                            modalLevel: t.props.currentPage === i.SubOptions || t.props.currentPage === i.GiftOptions ? "top_page" : "second_page"
                        }), t.props.currentPage !== i.RecipientSelect || t.props.showTop()
                    }, t
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    return this.props.currentPage === i.RecipientSelect ? this.getGiftRecipientSearchPage() : this.props.isSubscribed ? this.getSubbedTopPage() : this.getUnsubbedTopPage()
                }, t.prototype.getSubbedTopPage = function() {
                    return a.createElement(T, {
                        showRecipientSelect: this.props.showRecipientSelect,
                        isEsportGiftingApproved: this.props.isEsportGiftingApproved
                    })
                }, t.prototype.getUnsubbedTopPage = function() {
                    return a.createElement(N, {
                        channelLogin: this.props.channelLogin,
                        handleTopPageSubButtonClick: this.props.handleTopPageSubButtonClick,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        subscriptionProducts: this.props.subscriptionProducts ? this.props.subscriptionProducts : [],
                        userHasPrime: this.props.userHasPrime,
                        showRecipientSelect: this.props.showRecipientSelect,
                        isEsportGiftingApproved: this.props.isEsportGiftingApproved
                    })
                }, t.prototype.getGiftRecipientSearchPage = function() {
                    return this.props.subscriptionProducts ? a.createElement(V, {
                        key: "gift-recipient-search-page",
                        onBack: this.goToPreviousPage,
                        selectedSubProduct: this.props.subscriptionProducts[0],
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        isEsportChannel: this.props.isEsportGiftingApproved
                    }) : null
                }, t
            }(a.Component),
            G = n("37Pp"),
            z = n("odx1"),
            q = function(e) {
                var t = null,
                    n = null,
                    i = null,
                    r = e.subscriptionProducts[0].price;
                if (Object(C.d)(e.subscriptionProducts) && (r = Object(C.a)(e.subscriptionProducts[0])), e.channelLogin && (e.inPrimeRegion || e.userHasPrime)) {
                    var o = e.userHasPrime ? Object(c.d)("Use your free channel subscription to directly support your favorite streamer. {upsellTextLink}", {
                        upsellTextLink: a.createElement("a", {
                            href: "https://help.twitch.tv/customer/en/portal/articles/2572060-twitch-prime-guide",
                            target: "_blank"
                        }, Object(c.d)("Learn more about your free sub", "NonSubbedTopPage"))
                    }, "NonSubbedTopPage") : Object(c.d)("{upsellTextBold}, plus get free game loot every month, ad-free viewing, and loads more with Twitch Prime.", {
                        upsellTextBold: a.createElement("strong", null, Object(c.d)("Support your favorite streamer", "NonSubbedTopPage"))
                    }, "NonSubbedTopPage");
                    i = a.createElement(_._8, {
                        margin: {
                            bottom: 2
                        }
                    }, a.createElement(_._8, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(_.Q, {
                        type: _._49.H4,
                        bold: !0
                    }, Object(c.d)("Free Channel Sub with Twitch Prime", "NonSubbedTopPage"))), a.createElement(_._8, null, a.createElement(_._8, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(_.Q, null, o)), a.createElement(z.a, {
                        authToken: e.authToken,
                        "data-a-target": "subscribe-with-prime-button",
                        isSubscribed: !1,
                        isSubscribedWithPrime: !1,
                        onSubscribedWithPrime: e.onSubscribedWithPrime,
                        reportSubMenuAction: e.reportSubMenuAction,
                        subLogin: e.channelLogin,
                        userHasPrime: e.userHasPrime,
                        canPrimeSubscribe: e.canPrimeSubscribe,
                        channelLogin: e.channelLogin
                    })))
                }
                if (!e.isNonStandardSub) {
                    var s = Object(c.d)("More Paid Subscription Options", "NonSubbedTopPage");
                    t = a.createElement(_._8, {
                        margin: {
                            right: 1
                        },
                        display: _.R.Inline
                    }, a.createElement(_.v, {
                        ariaLabel: s,
                        onClick: e.showSubOptions,
                        type: _.B.Hollow,
                        "data-test-selector": "subscribe-button__more-sub-options-button",
                        "data-a-target": "see-more-sub-options-button"
                    }, s));
                    var l = Object(c.d)("Gift a Subscription", "NonSubbedTopPage");
                    n = a.createElement(_._8, {
                        display: _.R.Inline
                    }, a.createElement(_.v, {
                        ariaLabel: l,
                        onClick: e.showGiftOptions,
                        type: _.B.Hollow,
                        "data-test-selector": "subscribe-button__gift"
                    }, l))
                }
                return a.createElement(_._8, {
                    padding: 2
                }, i, a.createElement(_._8, null, a.createElement(_.Q, {
                    type: _._49.H4,
                    bold: !0
                }, Object(c.d)("Paid Subscription", "NonSubbedTopPage")), a.createElement(G.a, {
                    subscriptionProduct: e.subscriptionProducts[0]
                }), a.createElement(_._8, {
                    display: _.R.Flex
                }, a.createElement(_._8, {
                    margin: {
                        right: 1,
                        top: 1
                    }
                }, a.createElement(E.a, {
                    isSubbedToTier: !1,
                    tierPrice: r,
                    "data-a-target": "tier1-subscribe-button",
                    reportSubAction: e.handleTopPageSubButtonClick,
                    url: e.subscriptionProducts[0].url
                })))), a.createElement(_._8, {
                    margin: {
                        right: 1,
                        top: 2
                    }
                }, t, n))
            },
            Q = n("YH6m"),
            K = function(e) {
                return a.createElement(_._8, {
                    padding: 2
                }, a.createElement(_._8, null, a.createElement(_._8, {
                    display: _.R.Flex,
                    justifyContent: _._7.Between,
                    alignItems: _.c.Center,
                    fullWidth: !0
                }, a.createElement(_.Q, {
                    type: _._49.H4,
                    bold: !0
                }, e.header), a.createElement(_.v, {
                    type: _.B.Text,
                    "data-a-target": "subscribe-back-button",
                    "data-test-selector": "subscribe-button__back-button",
                    icon: _._25.AngleLeft,
                    onClick: e.onBack
                }, a.createElement(_._8, {
                    alignItems: _.c.Center,
                    display: _.R.InlineFlex
                }, a.createElement(_.Q, null, Object(c.d)("Back", "PaidSubOptions"))))), a.createElement(Q.a, {
                    canPrimeSubscribe: !1,
                    channelDisplayName: e.channelDisplayName,
                    isSubscribed: e.isSubscribed,
                    onSelectTierTab: e.onSelectTierTab,
                    isGift: e.isGift,
                    onGiftSelect: e.onGiftSelect,
                    giftRecipient: e.giftRecipient,
                    reportSubMenuAction: e.reportSubMenuAction,
                    subscriptionProducts: e.subscriptionProducts,
                    userHasPrime: !1
                })))
            },
            $ = n("pQNb"),
            Y = (n("DquS"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    var e = "IOS" === this.props.subbedPlatform || "ANDROID" === this.props.subbedPlatform,
                        t = e || this.props.isGift ? null : this.getTopPageUpgradeSection(),
                        n = e ? this.getMobileSubbedSection() : null,
                        i = this.getGiftSection();
                    return a.createElement(_._8, {
                        className: "channel-header__subscription-modal-main",
                        padding: 2
                    }, i, n, t)
                }, t.prototype.getTopPageUpgradeSection = function() {
                    var e = this.props.subbedTier !== m.a.Tier3 ? Object(c.d)("Change Your Subscription", "SubbedTopPage") : this.getSubbedHeader();
                    return a.createElement(_._8, null, a.createElement(_.Q, {
                        type: _._49.H4,
                        bold: !0
                    }, e), a.createElement(Q.a, {
                        authToken: this.props.authToken,
                        onSubscribedWithPrime: this.props.onSubscribedWithPrime,
                        subLogin: this.props.channelLogin,
                        userHasPrime: this.props.userHasPrime,
                        canPrimeSubscribe: this.props.canPrimeSubscribe,
                        channelDisplayName: this.props.channelDisplayName,
                        onSelectTierTab: this.props.onSelectTierTab,
                        subbedTier: this.props.subbedTier,
                        subscriptionProducts: this.props.subscriptionProducts,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        onGiftSelect: this.props.showRecipientSelect,
                        isSubscribed: !0
                    }))
                }, t.prototype.getMobileSubbedSection = function() {
                    var e = this.getFormattedRenewalDate(),
                        t = this.getFormattedGiftEndDate(),
                        n = 0 === e.length ? Object(c.d)("Tier 1 Subscription, benefits end on {date}", {
                            date: t
                        }, "SubbedTopPage") : Object(c.d)("Tier 1 Subscription, benefits renew on {date}", {
                            date: e
                        }, "SubbedTopPage"),
                        i = Object(c.d)("Subscribed via {platform} Subscriptions", {
                            platform: "IOS" === this.props.subbedPlatform ? "Apple" : "Google"
                        }, "SubbedTopPage"),
                        r = "IOS" === this.props.subbedPlatform ? "https://help.twitch.tv/customer/portal/articles/2921095#ManageiOS" : "https://help.twitch.tv/customer/portal/articles/2921095#ManageGoogle";
                    return a.createElement(_._8, {
                        "data-test-selector": "subscribed-view-mobile"
                    }, a.createElement(_._8, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(_.Q, {
                        type: _._49.H4,
                        bold: !0
                    }, this.getSubbedHeader())), a.createElement(_._8, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(_._8, null, n), a.createElement(_._8, null, i), a.createElement(_._8, null, a.createElement(_.O, {
                        to: r
                    }, Object(c.d)("How do I manage this subscription?", "SubbedTopPage")))))
                }, t.prototype.getGiftSection = function() {
                    return this.props.giftSender ? this.props.giftSender && !this.props.giftPaidUpgrade ? a.createElement(_._8, null, a.createElement(_._8, {
                        margin: {
                            bottom: 2
                        }
                    }, this.getGiftInfoSection()), this.getGiftExtendSection()) : a.createElement(_._8, null, a.createElement(_._8, {
                        margin: {
                            bottom: 2
                        }
                    }, this.getGiftInfoSection()), this.getTopPageGiftSection()) : a.createElement(_._8, {
                        margin: {
                            bottom: 2
                        }
                    }, this.getTopPageGiftSection())
                }, t.prototype.getGiftInfoSection = function() {
                    var e, t, n = null;
                    return this.props.giftPaidUpgrade ? (e = this.getSubbedHeader(), t = Object(c.d)("{giftPrice} Gift Subscription from {giftSender}", {
                        giftPrice: this.getCurrentSubPrice(),
                        giftSender: a.createElement(_.Q, {
                            bold: !0,
                            type: _._49.Span
                        }, this.props.giftSender || "")
                    }, "SubbedTopPage"), n = Object(c.d)("Your new {upgradePrice} Paid Subscription will begin on {subStartDate}", {
                        upgradePrice: this.props.giftPaidUpgrade ? this.props.giftPaidUpgrade.price : "",
                        subStartDate: this.getFormattedGiftUpgradeStartDate()
                    }, "SubbedTopPage")) : (e = Object(c.d)("Your Gift Subscription", "SubbedTopPage"), t = Object(c.d)("{giftPrice} Subscription from {giftSender} - Benefits expire on {giftEndDate}", {
                        giftPrice: this.getCurrentSubPrice(),
                        giftSender: a.createElement(_.Q, {
                            bold: !0,
                            type: _._49.Span
                        }, this.props.giftSender || ""),
                        giftEndDate: this.getFormattedGiftEndDate()
                    }, "SubbedTopPage")), a.createElement(_._8, null, a.createElement(_.Q, {
                        bold: !0,
                        type: _._49.H4
                    }, e), a.createElement(_._2, {
                        margin: {
                            y: 1
                        }
                    }, a.createElement(_.Q, null, t)), a.createElement(_.Q, {
                        className: "balloon-subscribed-user__gift-upgrade-info",
                        bold: !0
                    }, n))
                }, t.prototype.getGiftExtendSection = function() {
                    var e, t = null;
                    if (!this.props.isNonStandardSub) {
                        var n = Object(c.d)("More Paid Subscription Options", "SubbedTopPage");
                        t = a.createElement(_._8, {
                            margin: {
                                right: 1
                            },
                            display: _.R.Inline
                        }, a.createElement(_.v, {
                            ariaLabel: n,
                            onClick: this.props.showSubOptions,
                            type: _.B.Hollow,
                            "data-a-target": "see-more-sub-options-button"
                        }, n))
                    }
                    var i = this.getGiftMessage();
                    return e = a.createElement(_._8, {
                        display: _.R.Inline
                    }, a.createElement(_.v, {
                        "data-test-selector": "subscribe-button__gift",
                        ariaLabel: i,
                        onClick: this.props.showGiftOptions,
                        type: _.B.Hollow
                    }, i)), a.createElement(_._8, null, a.createElement(_._8, {
                        margin: {
                            top: 1
                        }
                    }, a.createElement(_.Q, {
                        type: _._49.H4,
                        bold: !0
                    }, Object(c.d)("Extend Your Subscription", "SubbedTopPage")), a.createElement(_._2, {
                        margin: {
                            top: 1
                        }
                    }, a.createElement(_.Q, null, Object(c.d)("{price} / Month", {
                        price: this.props.subscriptionProducts[0].price
                    }, "SubbedTopPage"))), a.createElement(_._8, {
                        margin: {
                            right: 1,
                            top: 1
                        }
                    }, a.createElement(_.v, {
                        ariaLabel: this.props.subscriptionProducts[0].price,
                        "data-a-target": "tier1-subscribe-button",
                        linkTo: this.props.subscriptionProducts[0].url,
                        onClick: this.props.handleTopPageSubButtonClick,
                        purchase: this.props.subscriptionProducts[0].price,
                        targetBlank: !0
                    }, Object(c.d)("Subscribe Now", "SubbedTopPage")))), a.createElement(_._8, {
                        margin: {
                            right: 1,
                            top: 2
                        }
                    }, t, e))
                }, t.prototype.getTopPageGiftSection = function() {
                    var e = this.props.subscriptionProducts[0].price;
                    Object(C.c)(this.props.subscriptionProducts) && (e = Object(C.a)(this.props.subscriptionProducts[0], !0));
                    var t = this.getGiftMessage(),
                        n = Object(c.d)("More Gift Options", "SubbedTopPage");
                    return a.createElement(_._8, null, a.createElement(_.Q, {
                        type: _._49.H4,
                        bold: !0
                    }, Object(c.d)("Help Grow {streamer}'s Community", {
                        streamer: this.props.channelDisplayName
                    }, "SubbedTopPage")), a.createElement(_._8, {
                        margin: {
                            top: 1,
                            bottom: 1
                        },
                        display: _.R.Flex
                    }, a.createElement(_.v, {
                        ariaLabel: t + " " + e,
                        onClick: this.props.onGiftSelect,
                        purchase: e
                    }, t), a.createElement(_._8, {
                        margin: {
                            left: 1
                        }
                    }, a.createElement(_.v, {
                        ariaLabel: n,
                        onClick: this.props.showGiftOptions,
                        type: _.B.Hollow
                    }, n))))
                }, t.prototype.getFormattedGiftUpgradeStartDate = function() {
                    var e = "";
                    if (this.props.giftPaidUpgrade && this.props.giftPaidUpgrade.startsAt) try {
                        e = Object(c.c)(new Date(this.props.giftPaidUpgrade.startsAt), {
                            month: "long",
                            day: "numeric"
                        })
                    } catch (t) {
                        c.j.debug(t, "There was an error formatting gift upgrade start date."), e = ""
                    }
                    return e
                }, t.prototype.getFormattedGiftEndDate = function() {
                    var e = "";
                    if (this.props.subEndDate) try {
                        e = Object(c.c)(new Date(this.props.subEndDate), {
                            month: "long",
                            day: "numeric"
                        })
                    } catch (t) {
                        c.j.debug(t, "There was an error formatting gift end date."), e = ""
                    }
                    return e
                }, t.prototype.getFormattedRenewalDate = function() {
                    var e = "";
                    if (this.props.renewsAt) try {
                        e = Object(c.c)(new Date(this.props.renewsAt), {
                            month: "long",
                            day: "numeric"
                        })
                    } catch (t) {
                        c.j.debug(t, "There was an error formatting sub renewal date."), e = ""
                    }
                    return e
                }, t.prototype.getCurrentSubPrice = function() {
                    switch (this.props.subbedTier) {
                        case m.a.Tier1:
                            return this.props.subscriptionProducts[0].price;
                        case m.a.Tier2:
                            return this.props.subscriptionProducts[1].price;
                        case m.a.Tier3:
                            return this.props.subscriptionProducts[2].price;
                        default:
                            return this.props.subscriptionProducts[0].price
                    }
                }, t.prototype.getSubbedHeader = function() {
                    return Object(c.d)("Your Subscription", "SubbedTopPage")
                }, t.prototype.getGiftMessage = function() {
                    return Object(c.d)("Gift A Subscription", "SubbedTopPage")
                }, t
            }(a.Component));
        n("UKw0");
        var Z = n("+p4h"),
            X = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        currentPage: i.Top,
                        selectedSubProductIndex: 0,
                        giftShortcut: !1
                    }, t.showTop = function() {
                        t.setState(function() {
                            return {
                                currentPage: i.Top
                            }
                        })
                    }, t.showRecipientSelect = function() {
                        t.setState(function() {
                            return {
                                currentPage: i.RecipientSelect
                            }
                        })
                    }, t.showGiftOptions = function() {
                        t.props.reportSubMenuAction({
                            action: L.a.ClickGiftSubOptions,
                            modalLevel: "second_page"
                        }), t.setState(function() {
                            return {
                                currentPage: i.GiftOptions
                            }
                        })
                    }, t.showSubOptions = function() {
                        t.props.reportSubMenuAction({
                            action: L.a.ClickMoreSubOptions,
                            modalLevel: "second_page"
                        }), t.setState(function() {
                            return {
                                currentPage: i.SubOptions
                            }
                        })
                    }, t.goToPreviousPage = function() {
                        if (t.props.reportSubMenuAction({
                                action: L.a.ClickBack,
                                modalLevel: t.state.currentPage === i.SubOptions || t.state.currentPage === i.GiftOptions ? "top_page" : "second_page"
                            }), t.state.currentPage === i.GiftOptions || t.state.currentPage === i.SubOptions || t.state.giftShortcut) return t.showTop(), void t.setState({
                            giftShortcut: !1
                        });
                        t.state.currentPage !== i.RecipientSelect || t.showGiftOptions()
                    }, t.onGiftSelect = function() {
                        if (!t.props.data.user || !t.props.data.user.subscriptionProducts) return null;
                        t.state.currentPage === i.Top ? t.setState({
                            giftShortcut: !0,
                            selectedSubProductIndex: 0
                        }) : t.setState({
                            giftShortcut: !1
                        }), t.props.reportSubMenuAction({
                            action: L.a.GiftASub,
                            checkoutButtonTier: t.props.data.user.subscriptionProducts[t.state.selectedSubProductIndex].price
                        }), t.showRecipientSelect()
                    }, t.onSelectTierTab = function(e) {
                        if (!t.props.data.user || !t.props.data.user.subscriptionProducts) return null;
                        var n, i;
                        t.tabToSubProduct || (t.tabToSubProduct = (n = t.props.data.user.subscriptionProducts, (i = new Map).set(Q.b.Prime, null), n.forEach(function(e, t) {
                            i.set(t + 1, e)
                        }), i));
                        var r = t.tabToSubProduct.get(e);
                        if (r) {
                            var a = t.props.data.user.subscriptionProducts.findIndex(function(e) {
                                return e.price === r.price
                            });
                            a !== t.state.selectedSubProductIndex && t.setState({
                                selectedSubProductIndex: a
                            }), t.props.onSelectTierTab(r.price)
                        } else t.props.onSelectTierTab(m.a.Prime)
                    }, t.handleTopPageSubButtonClick = function() {
                        if (!t.props.data.user || !t.props.data.user.subscriptionProducts) return null;
                        t.props.reportSubMenuAction({
                            action: L.a.ClickCheckout,
                            checkoutButtonTier: t.props.data.user.subscriptionProducts[0].price
                        })
                    }, t.onSubscribedWithPrime = function() {
                        t.props.onSubscribedWithPrime(), Object(v.e)(Z, {
                            login: t.props.channelLogin
                        }, function(e) {
                            return e.user && e.user.self && (e.user.self.canPrimeSubscribe = !1, e.user.self.subscriptionBenefit = {
                                id: Object(b.a)(),
                                platform: "WEB",
                                purchasedWithPrime: !0,
                                tier: m.a.Prime,
                                endsAt: null,
                                renewsAt: null,
                                paidUpgrade: null,
                                gift: {
                                    isGift: !1,
                                    gifter: null,
                                    __typename: "SubscriptionGift"
                                },
                                __typename: "SubscriptionBenefit"
                            }), e
                        })
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    e.channelLogin !== this.props.channelLogin && this.setState({
                        currentPage: i.Top,
                        selectedSubProductIndex: 0,
                        giftShortcut: !1
                    })
                }, t.prototype.render = function() {
                    if (this.props.data.loading) return c.j.debug("NOT rendering sub balloon; sub data not yet ready", {
                        state: this.state
                    }), a.createElement(_._8, {
                        display: _.R.Flex,
                        alignItems: _.c.Center,
                        justifyContent: _._7.Center,
                        className: "channel-header__subscription-modal"
                    }, a.createElement(_._10, {
                        fillContent: !0
                    }));
                    if (!this.props.data.user || !this.props.data.user.subscriptionProducts) return c.j.debug("NOT rendering sub balloon; sub data not yet ready", {
                        state: this.state
                    }), null;
                    c.j.debug("rendering balloon", {
                        state: this.state
                    });
                    var e, t = a.createElement(_._14, null),
                        n = !1,
                        r = this.props.data.user.subscriptionProducts,
                        o = !0;
                    if (this.props.isEsportChannel) return this.getEsportPage();
                    switch (this.state.currentPage) {
                        case i.Top:
                            if (!this.props.isSubscribed) {
                                e = this.getUnsubbedTopPage();
                                break
                            }
                            e = this.getSubbedTopPage(), n = !0;
                            break;
                        case i.SubOptions:
                            if (this.props.isSubscribed) {
                                e = this.getPaidOptionsPage(!0), o = !1;
                                break
                            }
                            e = this.getPaidOptionsPage(!1);
                            break;
                        case i.GiftOptions:
                            e = this.getGiftOptionsPage(), n = !0;
                            break;
                        case i.RecipientSelect:
                            e = this.getGiftRecipientSearchPage(), r = [r[this.state.selectedSubProductIndex]], n = !0;
                            break;
                        default:
                            if (!this.props.isSubscribed) {
                                e = this.getUnsubbedTopPage();
                                break
                            }
                            e = this.getSubbedTopPage(), n = !0
                    }
                    return o && (t = a.createElement($.a, {
                        subscriptionProducts: r,
                        isGift: n
                    })), a.createElement(_._8, {
                        key: "subscribe-balloon"
                    }, t, e)
                }, t.prototype.getGiftRecipientSearchPage = function() {
                    return this.props.data.user && this.props.data.user.subscriptionProducts ? a.createElement(V, {
                        key: "gift-recipient-search-page",
                        onBack: this.goToPreviousPage,
                        selectedSubProduct: this.props.data.user.subscriptionProducts[this.state.selectedSubProductIndex],
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        isEsportChannel: this.props.isEsportChannel
                    }) : null
                }, t.prototype.getGiftOptionsPage = function() {
                    return this.props.data.user && this.props.data.user.subscriptionProducts ? a.createElement(K, {
                        onBack: this.goToPreviousPage,
                        channelDisplayName: this.props.data.user.displayName,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        subscriptionProducts: this.props.data.user.subscriptionProducts,
                        isGift: !0,
                        onGiftSelect: this.onGiftSelect,
                        isSubscribed: !1,
                        header: Object(c.d)("Choose A Gift Subscription", "SubscribeBalloon"),
                        channelLogin: this.props.channelLogin
                    }) : null
                }, t.prototype.getPaidOptionsPage = function(e) {
                    return this.props.data.user && this.props.data.user.subscriptionProducts ? a.createElement(K, {
                        onBack: this.goToPreviousPage,
                        channelDisplayName: this.props.data.user.displayName,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        subscriptionProducts: this.props.data.user.subscriptionProducts,
                        isSubscribed: e,
                        header: Object(c.d)("All Paid Subscriptions", "SubscribeBalloon"),
                        channelLogin: this.props.channelLogin
                    }) : null
                }, t.prototype.getSubbedTopPage = function() {
                    if (!this.props.data.user || !this.props.data.user.self || !this.props.data.user.self.subscriptionBenefit) return null;
                    var e = this.props.data.user.self.subscriptionBenefit.gift,
                        t = e && e.isGift ? e.gifter.displayName : null,
                        n = !(!e || !e.isGift);
                    return a.createElement(Y, {
                        authToken: this.props.authToken,
                        channelLogin: this.props.channelLogin,
                        channelDisplayName: this.props.data.user.displayName,
                        canPrimeSubscribe: !!this.props.data.user.self && this.props.data.user.self.canPrimeSubscribe,
                        isGift: n,
                        handleTopPageSubButtonClick: this.handleTopPageSubButtonClick,
                        isNonStandardSub: this.props.isNonStandardSub,
                        subEndDate: this.props.data.user.self.subscriptionBenefit.endsAt,
                        giftPaidUpgrade: this.props.data.user.self.subscriptionBenefit.paidUpgrade,
                        onGiftSelect: this.onGiftSelect,
                        onSelectTierTab: this.onSelectTierTab,
                        onSubscribedWithPrime: this.onSubscribedWithPrime,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        showGiftOptions: this.showGiftOptions,
                        showSubOptions: this.showSubOptions,
                        subbedPlatform: this.props.data.user.self.subscriptionBenefit.platform,
                        renewsAt: this.props.data.user.self.subscriptionBenefit.renewsAt,
                        showRecipientSelect: this.showRecipientSelect,
                        subbedTier: this.props.subbedTier,
                        giftSender: t,
                        subscriptionProducts: this.props.data.user ? this.props.data.user.subscriptionProducts : [],
                        userHasPrime: !!this.props.data.currentUser && this.props.data.currentUser.hasPrime
                    })
                }, t.prototype.getUnsubbedTopPage = function() {
                    return this.props.data.user ? a.createElement(q, {
                        authToken: this.props.authToken,
                        channelLogin: this.props.channelLogin,
                        canPrimeSubscribe: !!this.props.data.user.self && this.props.data.user.self.canPrimeSubscribe,
                        handleTopPageSubButtonClick: this.handleTopPageSubButtonClick,
                        inPrimeRegion: this.props.inPrimeRegion,
                        isNonStandardSub: this.props.isNonStandardSub,
                        onSubscribedWithPrime: this.onSubscribedWithPrime,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        showGiftOptions: this.showGiftOptions,
                        showSubOptions: this.showSubOptions,
                        subscriptionProducts: this.props.data.user ? this.props.data.user.subscriptionProducts : [],
                        userHasPrime: !!this.props.data.currentUser && this.props.data.currentUser.hasPrime
                    }) : null
                }, t.prototype.getEsportPage = function() {
                    return this.props.data.user ? a.createElement(_._8, {
                        key: "subscribe-balloon"
                    }, a.createElement(H, {
                        channelLogin: this.props.channelLogin,
                        handleTopPageSubButtonClick: this.handleTopPageSubButtonClick,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        subscriptionProducts: this.props.data.user ? this.props.data.user.subscriptionProducts : [],
                        isSubscribed: this.props.isSubscribed,
                        userHasPrime: !!this.props.data.currentUser && this.props.data.currentUser.hasPrime,
                        currentPage: this.state.currentPage,
                        showTop: this.showTop,
                        showRecipientSelect: this.showRecipientSelect,
                        isEsportGiftingApproved: this.props.isEsportGiftingApproved
                    })) : null
                }, t = r.__decorate([Object(u.a)(Z, {
                    options: function(e) {
                        return {
                            fetchPolicy: "network-only",
                            variables: {
                                login: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(l.d)("SubscribeBalloon")], t)
            }(a.Component),
            J = n("4MRZ"),
            ee = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        activeTierPrice: null,
                        inPrimeRegion: !1
                    }, t.modalLevel = "top_page", t.reportSubMenuAction = function(e) {
                        var n = !!(t.props.data.user && t.props.data.user.self && t.props.data.user.self.subscriptionBenefit),
                            i = t.props.data.requestInfo && Object(f.a)(t.props.data.requestInfo.countryCode);
                        Object(L.b)({
                            action: e.action || "",
                            channelLogin: t.props.channelLogin || "",
                            channelID: t.props.data && t.props.data.user.id,
                            checkoutButtonTier: e.checkoutButtonTier || (t.state.activeTierPrice || m.a.Prime).slice(),
                            hasSubCredit: !!t.props.data.user.self && t.props.data.user.self.canPrimeSubscribe,
                            hostChannelID: t.props.hostChannelID,
                            hostChannelLogin: t.props.hostChannelLogin,
                            isMenuOpen: !(e.action === L.a.OpenSubMenu),
                            sub_location: "channel_page",
                            modal: !n,
                            modalLevel: n ? "" : t.modalLevel.slice(),
                            showPrimeContent: i,
                            giftRecipient: e.giftRecipient || null
                        }), !e.modalLevel || e.action !== L.a.ClickMoreSubOptions && e.action !== L.a.ClickBack || (t.modalLevel = e.modalLevel, t.setState({
                            activeTierPrice: m.a.Prime
                        }))
                    }, t.handleMenuToggle = function(e) {
                        t.reportSubMenuAction({
                            action: e ? L.a.CloseSubMenu : L.a.OpenSubMenu
                        })
                    }, t.onSelectTierTab = function(e) {
                        t.state.activeTierPrice !== e && t.setState({
                            activeTierPrice: e
                        })
                    }, t.onSubscribedWithPrime = function() {
                        t.reportSubMenuAction({
                            action: L.a.SubWithPrime
                        }), t.modalLevel = ""
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentWillUnmount = function() {
                    this.props.reportInteractive()
                }, t.prototype.componentDidMount = function() {
                    this.props.reportInteractive && this.isUserDataReady(this.props) && this.props.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.props.channelLogin && !this.isUserDataReady(this.props) || !this.props.updateContainerWidth || this.props.updateContainerWidth(), this.props.reportInteractive && this.props.data && !this.props.data.loading && this.props.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.isUserDataReady(e) && e.pubsub.messages.subscriptionInfo !== this.props.pubsub.messages.subscriptionInfo && this.props.data.refetch()
                }, t.prototype.render = function() {
                    if (!this.isUserDataReady(this.props) || !this.hasSubscriptionProducts(this.props)) return null;
                    if (this.props.hideEsportsSubscription && Object(h.a)(this.props.data.user.id, this.props.sessionUser)) return null;
                    var e = this.props.data.requestInfo && Object(f.a)(this.props.data.requestInfo.countryCode),
                        t = !!(this.props.data.user && this.props.data.user.self && this.props.data.user.self.subscriptionBenefit),
                        n = Object(h.a)(this.props.data.user.id, this.props.sessionUser),
                        i = Object(h.b)(this.props.data.user.id, this.props.sessionUser),
                        r = 1 === this.props.data.user.subscriptionProducts.length,
                        o = null;
                    this.props.data.user.self && this.props.data.user.self.subscriptionBenefit && (o = this.props.data.user.self.subscriptionBenefit.purchasedWithPrime ? m.a.Prime : this.props.data.user.self.subscriptionBenefit.tier, this.modalLevel = ""), this.props.data.user.subscriptionProducts.some(this.isSubscriptionProductInvalid) && (r = !0);
                    var s, l = t ? Object(c.d)("All-Access Pass", "SubscribeButton") : Object(c.d)("Get the All-Access Pass", "SubscribeButton");
                    if (t) {
                        var u = r ? Object(c.d)("Subscribed", "SubscribeButton") : Object(c.d)("Gift A Sub", "SubscribeButton");
                        if (s = this.props.hostChannelID ? Object(c.d)("Subscribed to {username}", {
                                username: this.props.data.user.displayName
                            }, "SubscribeButton") : u, r && !n) return a.createElement(_.v, {
                            disabled: !0,
                            ariaLabel: s,
                            icon: _._25.Star
                        }, s);
                        n && (s = l)
                    } else s = n ? l : this.props.hostChannelID ? Object(c.d)("Subscribe to {username}", {
                        username: this.props.data.user.displayName
                    }, "SubscribeButton") : Object(c.d)("Subscribe", "SubscribeButton");
                    var p = o === m.a.Prime ? _._25.Crown : _._25.Star,
                        g = t ? "subscribed-button" : "subscribe-button",
                        v = a.createElement(_.v, {
                            "data-a-target": g,
                            "data-test-selector": "subscribe-button__dropdown",
                            ariaLabel: s,
                            type: t ? _.B.Success : _.B.Default,
                            dropdown: !0,
                            icon: t ? p : void 0
                        }, s),
                        b = this.props.hostChannelID ? _.r.TopLeft : _.r.BottomRight;
                    return a.createElement(d.a, {
                        onToggle: this.handleMenuToggle
                    }, v, a.createElement(_.q, {
                        size: _.s.Large,
                        direction: b,
                        "data-a-target": "sub-balloon"
                    }, a.createElement(X, {
                        authToken: this.props.authToken,
                        channelLogin: this.props.channelLogin || "",
                        inPrimeRegion: e,
                        isNonStandardSub: r,
                        onSelectTierTab: this.onSelectTierTab,
                        onSubscribedWithPrime: this.onSubscribedWithPrime,
                        reportSubMenuAction: this.reportSubMenuAction,
                        subbedTier: o || m.a.Prime,
                        userHasPrime: !1,
                        isSubscribed: t,
                        isEsportChannel: n,
                        isEsportGiftingApproved: i
                    })))
                }, t.prototype.hasSubscriptionProducts = function(e) {
                    return e.data.user.subscriptionProducts && e.data.user.subscriptionProducts.length > 0
                }, t.prototype.isUserDataReady = function(e) {
                    return e.data && e.data.user && !e.data.loading && !e.data.error
                }, t.prototype.isSubscriptionProductInvalid = function(e) {
                    return !e.emoteSetID
                }, t = r.__decorate([Object(u.a)(J, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(p.a)([{
                    topic: function(e) {
                        return Object(g.y)(e.data.currentUser && e.data.currentUser.id || "")
                    },
                    mapMessageTypesToProps: {
                        "*": "subscriptionInfo"
                    },
                    skip: function(e) {
                        return !(e.data && !e.data.loading && !e.data.error && e.data.currentUser)
                    }
                }])], t)
            }(a.Component),
            te = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.reportInteractive = function() {
                        t.props.latencyTracking.reportInteractive()
                    }, t
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(ee, {
                        authToken: this.props.authToken,
                        sessionUser: this.props.sessionUser,
                        hostChannelID: this.props.hostChannelID,
                        hostChannelLogin: this.props.hostChannelLogin,
                        channelLogin: this.props.channelLogin,
                        updateContainerWidth: this.props.updateContainerWidth,
                        hideEsportsSubscription: this.props.hideEsportsSubscription,
                        reportInteractive: this.reportInteractive
                    })
                }, t = r.__decorate([Object(l.d)("SubscribeButton")], t)
            }(a.Component);
        var ne = Object(o.b)(function(e) {
            return {
                authToken: Object(s.a)(e),
                sessionUser: Object(s.c)(e)
            }
        })(te);
        n.d(t, !1, function() {
            return te
        }), n.d(t, "a", function() {
            return ne
        }), n.d(t, !1, function() {
            return "subscribe-button__dropdown"
        }), n.d(t, !1, function() {
            return ee
        })
    },
    "73jS": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ChannelPage_SetSessionStatus"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SetSessionStatusInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "setSessionStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "setAgainInSeconds"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 127
            }
        };
        n.loc.source = {
            body: "mutation ChannelPage_SetSessionStatus($input: SetSessionStatusInput!) {\nsetSessionStatus(input: $input) {\nsetAgainInSeconds\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "7B9K": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "UserEmotes"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "emoteSets"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 76
            }
        };
        n.loc.source = {
            body: "query UserEmotes {\ncurrentUser {\nid\nemoteSets {\nid\nemotes {\nid\ntoken\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "7L7x": function(e, t) {},
    "7LBo": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "TopNav_User_UpdateVisibility"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateVisibilityInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateVisibility"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "availability"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 134
            }
        };
        n.loc.source = {
            body: "mutation TopNav_User_UpdateVisibility($input: UpdateVisibilityInput!) {\nupdateVisibility(input: $input) {\nuser {\nid\navailability\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "7LIQ": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("HW6M"),
            a = n("GiK3"),
            o = n("6sO2"),
            s = n("CSlQ"),
            l = n("Odds"),
            c = (n("VkpB"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = r("emote-picker__emote-link", {
                            "emote-picker__emote-link--locked": this.props.locked
                        }),
                        n = a.createElement(l._35, {
                            alignItems: l.c.Center,
                            background: l.n.Overlay,
                            borderRadius: l.t.Small,
                            className: "emote-picker__emote-lock",
                            color: l.K.Overlay,
                            display: l.R.InlineFlex,
                            justifyContent: l._7.Center,
                            position: l._15.Absolute,
                            zIndex: l._62.Above
                        }, a.createElement(l._24, {
                            asset: l._25.Lock,
                            height: 10,
                            width: 10
                        })),
                        i = this.props.emoteSet.emotes.map(function(i, r) {
                            if (!i.srcSet) return null;
                            var c = a.createElement("img", {
                                className: "emote-picker__emote-image",
                                srcSet: i.srcSet,
                                alt: i.displayName
                            });
                            if (0 === r) {
                                var d = i.srcSet.split(" ")[0];
                                c = a.createElement(s.b, {
                                    className: "emote-picker__emote-image",
                                    src: d,
                                    srcSet: i.srcSet,
                                    alt: i.displayName
                                })
                            }
                            return a.createElement("div", {
                                key: i.id,
                                className: "emote-picker__emote"
                            }, a.createElement(l._52, {
                                label: i.displayName || Object(o.d)("Emote", "EmoteGrid"),
                                direction: l._54.Bottom
                            }, a.createElement(l._2, {
                                display: l.R.Flex,
                                alignItems: l.c.Center,
                                justifyContent: l._7.Center
                            }, a.createElement("button", {
                                className: t,
                                "aria-label": i.displayName,
                                name: i.displayName,
                                onClick: e.props.locked ? void 0 : e.handleClickEmote.bind(e, i.id),
                                "data-a-target": i.displayName
                            }, a.createElement("figure", {
                                className: "emote-picker__emote-figure"
                            }, e.props.locked ? n : null, c)))))
                        });
                    return a.createElement(l._8, {
                        display: l.R.Flex,
                        flexWrap: l.U.Wrap,
                        justifyContent: l._7.Center
                    }, i)
                }, t.prototype.handleClickEmote = function(e, t) {
                    this.props.onClickEmote && this.props.onClickEmote(t.currentTarget.name, e)
                }, t
            }(a.Component));
        n.d(t, "a", function() {
            return c
        })
    },
    "7Nlu": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("6sO2"),
            o = n("7vx8"),
            s = n("5kgt"),
            l = n("Odds"),
            c = n("rZAm"),
            d = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(l._6, i.__assign({
                        onClick: this.props.onClick,
                        linkTo: this.props.linkTo,
                        hover: this.props.hover,
                        tabIndex: -1,
                        key: this.props.id
                    }, Object(s.a)(this.props)), r.createElement(l._8, {
                        className: "search-game-result-card",
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, r.createElement(l.C, {
                        row: !0
                    }, r.createElement(l.E, {
                        alt: this.props.imageAlt,
                        src: this.props.data && !this.props.data.loading && this.props.data.game ? this.props.data.game.boxArtURL : a.a.defaultBoxArtURL,
                        size: l.F.Size4,
                        aspect: l.l.BoxArt
                    }), r.createElement(l.D, {
                        overflow: l._11.Hidden
                    }, r.createElement(l._2, {
                        padding: {
                            x: 1
                        }
                    }, r.createElement(l.Q, {
                        type: l._49.H5,
                        ellipsis: !0
                    }, this.props.title))))))
                }, t = i.__decorate([Object(o.a)(c, {
                    options: function(e) {
                        return {
                            variables: {
                                name: e.title
                            }
                        }
                    }
                })], t)
            }(r.Component);
        n.d(t, "a", function() {
            return d
        })
    },
    "7iNp": function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FriendButton"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "friendButtonFragment"
                                },
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 154
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/friend-button/queries/friend-button-fragment.gql"\nquery FriendButton($id: ID!) {\nuser(id: $id) {\nid\n...friendButtonFragment\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var r = {};
        i.definitions = i.definitions.concat(n("HC5L").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !r[t] && (r[t] = !0, !0)
        })), e.exports = i
    },
    "7miU": function(e, t, n) {
        "use strict";
        var i = n("P0T5");
        n.d(t, "a", function() {
            return i.b
        }), n.d(t, "b", function() {
            return i.c
        }), n.d(t, "c", function() {
            return i.d
        }), n.d(t, "d", function() {
            return i.e
        }), n.d(t, "e", function() {
            return i.f
        }), n.d(t, "f", function() {
            return i.g
        }), n.d(t, "g", function() {
            return i.h
        }), n.d(t, "h", function() {
            return i.i
        }), n.d(t, "i", function() {
            return i.j
        }), n.d(t, "j", function() {
            return i.k
        }), n.d(t, "k", function() {
            return i.m
        }), n.d(t, "l", function() {
            return i.p
        }), n.d(t, "m", function() {
            return i.q
        })
    },
    "8OKC": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "updatePrimeOfferStatus"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdatePrimeOfferStatusInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updatePrimeOfferStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "hasEntitlement"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "claimData"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "status"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 171
            }
        };
        n.loc.source = {
            body: "mutation updatePrimeOfferStatus($input: UpdatePrimeOfferStatusInput!) {\nupdatePrimeOfferStatus(input: $input) {\nself {\nhasEntitlement\nclaimData\nstatus\n}\nerror {\ncode\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "8PKe": function(e, t, n) {
        "use strict";
        var i, r = n("RH2O"),
            a = n("TToO"),
            o = n("OAwv"),
            s = n("GiK3"),
            l = n("3zLD"),
            c = n("6sO2"),
            d = n("+Znq"),
            u = n("7vx8"),
            p = n("S1vB"),
            m = n("oIkB"),
            h = n("ZVME"),
            f = n("CSlQ"),
            g = n("AGQo"),
            v = n("Odds"),
            b = (n("f8UT"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return s.createElement(v._8, null, s.createElement(v._35, {
                        className: "prime-offer-header",
                        borderBottom: !0,
                        background: v.n.Alt2,
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, s.createElement(v.Q, {
                        bold: !0,
                        type: v._49.H6
                    }, Object(c.d)("Free with Prime", "PrimeOfferHeader"))), this.getNumOfUnseenOffersDisplay())
                }, t.prototype.getNumOfUnseenOffersDisplay = function() {
                    var e = this.props.numOfUnseenOffers;
                    if (e) return s.createElement(v._35, {
                        className: "prime-offer__new-offer-header",
                        borderBottom: !0,
                        background: v.n.Alt2,
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, s.createElement(v._8, {
                        fullWidth: !0,
                        display: v.R.Flex,
                        alignItems: v.c.Center
                    }, s.createElement(v._8, {
                        flexGrow: 1
                    }, s.createElement(v.Q, {
                        bold: !0,
                        type: v._49.H6
                    }, Object(c.d)("New Prime Loot", "PrimeOfferHeader"))), s.createElement(v._8, {
                        className: "prime-offer__new-offer-header-count",
                        textAlign: v._45.Center
                    }, s.createElement(v._35, {
                        className: "prime-offer__new-offer-header-count__text",
                        background: v.n.Base,
                        color: v.K.Base,
                        display: v.R.Flex,
                        alignItems: v.c.Center,
                        justifyContent: v._7.Center
                    }, s.createElement(v.Q, null, e.toString())))))
                }, t
            }(s.Component)),
            k = Object(f.d)("PrimeOfferHeader", {
                autoReportInteractive: !0
            })(b),
            y = n("Lpko"),
            _ = n("Tr7p"),
            S = n("Kckk");
        ! function(e) {
            e.OFFERS_FAILED_TO_UPDATE = "OFFERS_FAILED_TO_UPDATE", e.UNKNOWN = "UNKNOWN"
        }(i || (i = {}));
        var E = n("8OKC"),
            C = n("tTbW"),
            N = (n("9856"), n("wjhu")),
            T = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        numOfUnseenOffers: 0,
                        updated: !1,
                        status: void 0,
                        error: void 0
                    }, t.showOffersByDefault = function() {
                        var e = location.search,
                            n = o.parse(e);
                        return n && !!n.expandoffers || t.props.openByDefault
                    }, t.onToggleMenu = function(e) {
                        t.offersLoadedEvent = t.registerOffersLoadedEvent();
                        var n = t.props.offersData;
                        !n || n.loading || n.error || t.props.latencyTracking.reportCustomEvent(t.offersLoadedEvent), t.seeOffers(), e && t.setState({
                            numOfUnseenOffers: 0
                        }), Object(_.c)(!e, {
                            hasPrime: t.hasPrime()
                        })
                    }, t.onHover = function() {
                        Object(_.b)({
                            hasPrime: t.hasPrime()
                        })
                    }, t.hasPrime = function() {
                        return !(!t.props.userData.currentUser || !t.props.userData.currentUser.hasPrime)
                    }, t.registerOffersLoadedEvent = function() {
                        return t.props.latencyTracking.registerCustomEvent({
                            benchmark: 1e3,
                            group: h.a.TwitchPrime,
                            key: h.b.PrimeOfferLoaded,
                            label: h.c.Loaded,
                            start: h.d.Registration
                        })
                    }, t.getUnseenOffers = function(e) {
                        var n = e.offersData;
                        if (n && !n.loading && !n.error) {
                            var i = n.primeOffers || [],
                                r = Object(S.h)();
                            t.setState({
                                numOfUnseenOffers: i.filter(function(e) {
                                    return !(r.includes(e.id) || t.offerIsSeen(e))
                                }).length
                            })
                        }
                    }, t.seeOffers = function() {
                        var e = t.props.offersData;
                        if (e && !e.loading && !e.error) {
                            var n = (e.primeOffers || []).map(function(e) {
                                return "" + e.id
                            });
                            Object(_.k)({
                                hasPrime: t.hasPrime(),
                                numberOfOffers: n.length
                            }), t.updateOfferStatus(), Object(S.l)(n)
                        }
                    }, t.updateOfferStatus = function() {
                        return a.__awaiter(t, void 0, void 0, function() {
                            var e, t, n, r, o, s, l, c;
                            return a.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        if (e = this.props.userData, !(t = e.currentUser && e.currentUser.id)) return [2];
                                        n = this.props.offersData.primeOffers || [], r = n.map(function(e) {
                                            return {
                                                offerID: e.id,
                                                status: S.a.Seen
                                            }
                                        }), o = Object(m.a)({
                                            userID: t,
                                            statusChanges: r
                                        }), a.label = 1;
                                    case 1:
                                        return a.trys.push([1, 3, , 4]), [4, this.props.updatePrimeOfferStatus(o)];
                                    case 2:
                                        return s = a.sent(), (l = s.updatePrimeOfferStatus && s.updatePrimeOfferStatus.error) && l.code ? (c = i[l.code], this.setState({
                                            updated: !1,
                                            error: c || i.UNKNOWN
                                        }), [2]) : s.updatePrimeOfferStatus && s.updatePrimeOfferStatus.self ? (this.setState({
                                            updated: !0,
                                            error: void 0
                                        }), [3, 4]) : (this.setState({
                                            updated: !1,
                                            error: i.UNKNOWN
                                        }), [2]);
                                    case 3:
                                        return a.sent(), this.setState({
                                            updated: !1,
                                            error: i.UNKNOWN
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.renderOfferList = function() {
                        var e = t.props.offersData,
                            n = t.showOffersByDefault() || !1,
                            i = e && !e.loading && !e.error;
                        return t.offersLoadedEvent && i && t.props.latencyTracking.reportCustomEvent(t.offersLoadedEvent), i || n ? s.createElement(v._8, {
                            "data-a-target": "offers-list",
                            className: "prime-offers__list"
                        }, s.createElement(k, {
                            numOfUnseenOffers: t.state.numOfUnseenOffers
                        }), s.createElement(y.a, null)) : null
                    }, t.shouldReportInteractive = function() {
                        return (!t.isUserDataLoading || t.isUserDataError) && (!t.isOffersDataLoading || t.isOffersDataError)
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.shouldReportInteractive() && this.props.latencyTracking.reportInteractive(), this.getUnseenOffers(this.props)
                }, t.prototype.componentDidUpdate = function() {
                    this.shouldReportInteractive() && this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.getUnseenOffers(e)
                }, t.prototype.render = function() {
                    var e = this.props.userData && this.props.userData.requestInfo && Object(p.a)(this.props.userData.requestInfo.countryCode),
                        t = this.props.userData && this.props.userData.currentUser && this.props.userData.currentUser.hasPrime;
                    if (!e && !t) return null;
                    var n = {
                        align: v._53.Center,
                        direction: v._54.Bottom,
                        label: ""
                    };
                    return this.state.numOfUnseenOffers > 0 ? n.label = Object(c.d)("New Prime Loot", "PrimeOffers") : n.label = Object(c.d)("Prime Loot", "PrimeOffers"), s.createElement(v._8, {
                        className: "prime-offers",
                        position: v._15.Relative
                    }, s.createElement(d.a, {
                        onToggle: this.onToggleMenu,
                        openByDefault: this.showOffersByDefault(),
                        tooltipProps: n
                    }, s.createElement(g.a, {
                        onHover: this.onHover
                    }, s.createElement(v.w, {
                        ariaLabel: Object(c.d)("Prime offers", "PrimeOffers"),
                        overlay: !0,
                        size: v.x.Large,
                        icon: v._25.Crown,
                        "data-a-target": "prime-offers-icon",
                        "data-target": "prime-offers-icon"
                    })), s.createElement(v.q, {
                        direction: v.r.BottomRight,
                        size: v.s.Large,
                        offsetX: "9px"
                    }, this.renderOfferList())), this.renderUnseenOffersDisplay())
                }, t.prototype.offerIsSeen = function(e) {
                    return e.self && e.self.status === S.a.Seen
                }, t.prototype.renderUnseenOffersDisplay = function() {
                    var e = this.state.numOfUnseenOffers;
                    if (e && !this.state.error) return s.createElement(v._8, {
                        className: "prime-offers__pill",
                        position: v._15.Absolute
                    }, s.createElement(v.e, {
                        type: v.j.BounceIn,
                        duration: v.g.Medium,
                        timing: v.i.EaseIn,
                        enabled: e > 0
                    }, s.createElement(v._12, {
                        label: e.toString(),
                        type: v._13.Notification
                    })))
                }, Object.defineProperty(t.prototype, "isUserDataLoading", {
                    get: function() {
                        var e = this.props.userData;
                        return e && e.loading
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "isUserDataError", {
                    get: function() {
                        var e = this.props.userData;
                        return e && e.error
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "isOffersDataLoading", {
                    get: function() {
                        var e = this.props.offersData;
                        return e && e.loading
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "isOffersDataError", {
                    get: function() {
                        var e = this.props.offersData;
                        return e && e.error
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(s.Component),
            w = Object(l.compose)(Object(u.a)(C, {
                name: "offersData",
                skip: function(e) {
                    return !e.firstPageLoaded
                },
                options: function() {
                    return {
                        variables: {
                            dateOverride: Object(S.e)()
                        }
                    }
                }
            }), Object(u.a)(N, {
                name: "userData"
            }), Object(u.a)(E, {
                name: "updatePrimeOfferStatus"
            }), Object(f.d)("PrimeOffers"))(T);
        var O = Object(r.b)(function(e) {
                return {
                    firstPageLoaded: !!e.session.firstPageLoaded
                }
            })(w),
            R = n("lfvs"),
            D = n("Hs3O"),
            I = (n("ukY1"), n("F1v6")),
            x = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this.props.data.currentUser && this.props.data.currentUser.hasPrime,
                        t = this.props.data.requestInfo && this.props.data.requestInfo.countryCode;
                    if (!Object(S.m)(e, t)) return null;
                    if (this.props.data.loading) return null;
                    var n = Object(D.d)(D.a, ""),
                        i = Object(c.d)("Twitch Prime", "BlueBar"),
                        r = s.createElement("span", null, Object(c.d)("Free loot every month, plus exclusives and surprises, ad-free viewing, and loads more.", "BlueBar")),
                        a = Object(D.d)(D.a, ""),
                        o = Object(c.d)("Start Your Free Trial", "BlueBar");
                    if (!this.props.data.loading && !this.props.data.error) {
                        var l = this.props.data;
                        l && l.primePromotions && l.primePromotions.forEach(function(e) {
                            switch (e.id) {
                                case "twitch.prime.bluebar.left1":
                                    n = e.externalURL, i = e.text;
                                    break;
                                case "twitch.prime.bluebar.center1":
                                    r = s.createElement(R, {
                                        source: e.text,
                                        renderers: {
                                            Link: function(e) {
                                                return s.createElement("a", {
                                                    href: e.href,
                                                    target: "_blank",
                                                    rel: "noopener noreferrer"
                                                }, e.children)
                                            }
                                        }
                                    });
                                    break;
                                case "twitch.prime.bluebar.right1":
                                    a = e.externalURL, o = e.text
                            }
                        })
                    }
                    return s.createElement(v._35, {
                        color: v.K.Base,
                        className: "blue-bar",
                        "data-a-target": "blue-bar",
                        position: v._15.Relative,
                        fullWidth: !0,
                        zIndex: v._62.Above
                    }, s.createElement(v._8, {
                        className: "blue-bar__bar",
                        display: v.R.Flex,
                        alignItems: v.c.Center,
                        justifyContent: v._7.Between,
                        flexWrap: v.U.NoWrap,
                        margin: "auto",
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, s.createElement(v._8, {
                        display: v.R.InlineFlex,
                        alignItems: v.c.Center,
                        padding: {
                            right: .5
                        }
                    }, s.createElement(v._8, {
                        className: "blue-bar__logo",
                        display: v.R.InlineFlex,
                        margin: {
                            right: .5
                        },
                        flexShrink: 0
                    }, s.createElement(v._24, {
                        asset: v._25.Crown,
                        width: 20,
                        height: 13
                    })), s.createElement(v.Q, {
                        bold: !0,
                        type: v._49.Span,
                        noWrap: !0,
                        fontSize: v.V.Size6
                    }, s.createElement(v._2, {
                        padding: {
                            x: 1
                        }
                    }, s.createElement("a", {
                        className: "blue-bar__link",
                        "data-a-target": "blue-bar__link",
                        href: n,
                        target: "_blank",
                        rel: "noopener noreferrer"
                    }, i))), s.createElement(v.Q, {
                        className: "blue-bar__headline",
                        type: v._49.Span,
                        fontSize: v.V.Size6
                    }, r)), s.createElement(v._8, {
                        display: v.R.InlineFlex,
                        flexShrink: 0
                    }, s.createElement(v.Q, {
                        bold: !0,
                        type: v._49.Span,
                        noWrap: !0,
                        fontSize: v.V.Size6,
                        color: v.K.Base
                    }, s.createElement("a", {
                        className: "blue-bar__link",
                        href: a,
                        target: "_blank",
                        rel: "noopener noreferrer"
                    }, o)))))
                }, t
            }(s.Component),
            F = Object(l.compose)(Object(u.a)(I, {
                options: function() {
                    return {
                        variables: {
                            stringIds: ["twitch.prime.bluebar.left1", "twitch.prime.bluebar.center1", "twitch.prime.bluebar.right1"],
                            dateOverride: Object(S.e)()
                        }
                    }
                }
            }), Object(f.d)("BlueBarComponent"))(x),
            P = n("dnng");
        n.d(t, "c", function() {
            return O
        }), n.d(t, "a", function() {
            return F
        }), n.d(t, "b", function() {
            return P.a
        }), n.d(t, "d", function() {
            return S.e
        }), n.d(t, !1, function() {
            return S.c
        })
    },
    "8RKZ": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("HW6M"),
            a = n("GiK3"),
            o = n("qe65"),
            s = n("Odds"),
            l = (n("2rJy"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onImageLoad = function() {
                        n.setState({
                            imageLoaded: !0
                        })
                    }, n.onMouseOver = function() {
                        n.setState({
                            isHovering: !0
                        })
                    }, n.onMouseOut = function() {
                        n.setState({
                            isHovering: !1
                        })
                    }, n.renderImage = function() {
                        var e = null,
                            t = r("chat-image", {
                                "chat-image__animated": !!n.props.cheerText && n.state.imageLoaded
                            }, n.props.className);
                        if (n.props.srcSet.themed) e = a.createElement(s._2, {
                            display: n.state.imageLoaded ? s.R.InlineBlock : s.R.Hide
                        }, a.createElement(o.a, {
                            alt: n.props.alt,
                            className: t,
                            defaultRes: n.props.srcKey,
                            onLoad: n.onImageLoad,
                            onMouseOver: n.onMouseOver,
                            onMouseOut: n.onMouseOut,
                            sources: n.props.srcSet
                        }));
                        else {
                            for (var i = [], l = 0, c = Object.keys(n.props.srcSet.sources); l < c.length; l++) {
                                var d = c[l];
                                i.push(n.props.srcSet.sources[d] + " " + d)
                            }
                            e = a.createElement(s._2, {
                                display: n.state.imageLoaded ? s.R.InlineBlock : s.R.Hide
                            }, a.createElement("img", {
                                className: t,
                                onLoad: n.onImageLoad,
                                onMouseOver: n.onMouseOver,
                                onMouseOut: n.onMouseOut,
                                src: n.props.srcSet.sources[n.props.srcKey],
                                srcSet: i.join(","),
                                alt: n.props.alt
                            }))
                        }
                        return e
                    }, n.renderPlaceholder = function() {
                        return n.state.imageLoaded ? null : a.createElement(s._2, {
                            display: s.R.InlineBlock
                        }, a.createElement(s.Q, {
                            type: s._49.Span,
                            className: "chat-image__placeholder",
                            align: s._59.Top
                        }, a.createElement(s._14, {
                            height: 28,
                            width: 28
                        })))
                    }, n.state = {
                        imageLoaded: !1,
                        isHovering: !1
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e;
                    return e = this.state.isHovering && this.state.imageLoaded ? a.createElement(s._52, {
                        direction: this.props.tooltipDirection || s._54.Top,
                        label: this.props.alt,
                        display: s.R.Inline,
                        offsetY: "0.9rem",
                        "data-a-target": "emote-name"
                    }, this.renderPlaceholder(), this.renderImage(), this.props.cheerText) : a.createElement("span", {
                        "data-a-target": "emote-name"
                    }, this.renderPlaceholder(), this.renderImage(), this.props.cheerText), this.props.cheerText ? a.createElement(s.Q, {
                        type: s._49.Span,
                        noWrap: !0
                    }, e) : e
                }, t
            }(a.Component));
        n.d(t, "a", function() {
            return l
        })
    },
    "8p/O": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Whispers_Whispers_UserWhisperThreads"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "cursor"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "emoteSets"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "whisperThreads"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "10"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "after"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "cursor"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "participants"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "chatColor"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "displayName"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "profileImageURL"
                                                                },
                                                                arguments: [{
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "width"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "70"
                                                                    }
                                                                }],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "login"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "spamInfo"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "lastMarkedNotSpamAt"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "likelihood"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "messages"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "first"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "20"
                                                            }
                                                        }],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "edges"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "cursor"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "node"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "sentAt"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "editedAt"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "deletedAt"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "from"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "id"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "content"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "content"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "emotes"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: [],
                                                                                        selectionSet: {
                                                                                            kind: "SelectionSet",
                                                                                            selections: [{
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "id"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "emoteID"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "setID"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "from"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "to"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }]
                                                                                        }
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "userLastMessageRead"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "sentAt"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isMuted"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isArchived"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "unreadMessagesCount"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 538
            }
        };
        n.loc.source = {
            body: "query Whispers_Whispers_UserWhisperThreads($cursor: Cursor) {\ncurrentUser {\nid\nlogin\nemoteSets {\nid\nemotes {\nid\ntoken\n}\n}\nwhisperThreads(first: 10 after: $cursor) {\nedges {\ncursor\nnode {\nid\nparticipants {\nid\nchatColor\ndisplayName\nprofileImageURL(width: 70)\nlogin\n}\nspamInfo {\nlastMarkedNotSpamAt\nlikelihood\n}\nmessages(first: 20) {\nedges {\ncursor\nnode {\nid\nsentAt\neditedAt\ndeletedAt\nfrom {\nid\n}\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n}\n}\n}\n}\n}\nuserLastMessageRead {\nid\nsentAt\n}\nisMuted\nisArchived\nunreadMessagesCount\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "94wQ": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "TopNav_User_UpdateIsSharingActivity"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateIsSharingActivityInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateIsSharingActivity"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isSharingActivity"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 173
            }
        };
        n.loc.source = {
            body: "mutation TopNav_User_UpdateIsSharingActivity($input: UpdateIsSharingActivityInput!) {\nupdateIsSharingActivity(input: $input) {\nuser {\nid\nsettings {\nisSharingActivity\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    9856: function(e, t) {},
    "9RMu": function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                id: "" + e.id,
                start: e.start,
                end: e.end
            }
        }

        function r(e) {
            return {
                from: e.start,
                to: e.end,
                emoteID: e.id,
                id: e.id + ";" + e.start + ";" + e.end,
                setID: "0",
                __typename: "EmbeddedEmote"
            }
        }
        t.c = function(e) {
            return {
                __typename: "WhisperMessageEdge",
                cursor: "" + e.data_object.id,
                node: {
                    __typename: "WhisperMessage",
                    id: e.data_object.message_id,
                    sentAt: new Date(1e3 * e.data_object.sent_ts).toISOString(),
                    editedAt: null,
                    deletedAt: null,
                    content: {
                        __typename: "MessageBody",
                        content: e.data_object.body,
                        emotes: e.data_object.tags.emotes.map(function(e) {
                            var t = i(e);
                            return r(t)
                        })
                    },
                    from: {
                        __typename: "User",
                        id: "" + e.data_object.from_id
                    }
                }
            }
        }, t.b = function(e) {
            return e.map(function(e) {
                return r(i(e))
            })
        }, t.a = r
    },
    "9q8M": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "TopNav_User_CurrentUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "availability"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "settings"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isSharingActivity"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "visibility"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "activity"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "Watching"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "user"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "displayName"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "stream"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "game"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "hosting"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "displayName"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "stream"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "game"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "name"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "Streaming"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "stream"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "game"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "Playing"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "game"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 358
            }
        };
        n.loc.source = {
            body: "query TopNav_User_CurrentUser {\ncurrentUser {\nid\ndisplayName\nprofileImageURL(width: 70)\navailability\nsettings {\nisSharingActivity\nvisibility\n}\nactivity {\ntype\n... on Watching {\nuser {\ndisplayName\nstream {\ngame {\nname\n}\n}\nhosting {\ndisplayName\nstream {\ngame {\nname\n}\n}\n}\n}\n}\n... on Streaming {\nstream {\ngame {\nname\n}\n}\n}\n... on Playing {\ngame {\nname\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "9uSE": function(e, t) {},
    A5Hr: function(e, t, n) {
        "use strict";
        var i, r = n("TToO"),
            a = n("GiK3"),
            o = n("RH2O"),
            s = n("2KeS"),
            l = n("6sO2"),
            c = n("7vx8"),
            d = n("u8SD"),
            u = n("Kxgf"),
            p = n("oIkB"),
            m = n("HM6l"),
            h = n("vH/s"),
            f = n("CSlQ"),
            g = n("Odds"),
            v = (n("Vr0l"), "report-wizard-block"),
            b = "report-wizard-unblock",
            k = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        userBlocked: t.props.userBlocked || !1
                    }, t.renderBlock = function() {
                        return a.createElement(g.O, {
                            hoverUnderlineNone: !0,
                            onClick: t.handleBlock,
                            "data-test-selector": v
                        }, a.createElement(g._8, {
                            display: g.R.Flex,
                            alignItems: g.c.Center
                        }, a.createElement(g._24, {
                            type: g._26.Brand,
                            asset: g._25.Ban
                        }), a.createElement(g._8, {
                            margin: {
                                left: .5
                            }
                        }, Object(l.d)("Block {user}", {
                            user: t.props.targetUser.displayName
                        }, "ReportWizardBlockActions"))))
                    }, t.renderUnblock = function() {
                        return a.createElement(g._8, {
                            className: "reporting-wizard__block-actions",
                            display: g.R.Flex,
                            alignItems: g.c.Center
                        }, a.createElement(g._24, {
                            type: g._26.Success,
                            asset: g._25.FollowCheck
                        }), a.createElement(g._8, {
                            margin: {
                                right: 1
                            }
                        }, a.createElement(g.Q, {
                            className: "block-user__success",
                            type: g._49.Span
                        }, Object(l.d)("{user} blocked", {
                            user: t.props.targetUser.displayName
                        }, "ReportWizardBlockActions"))), a.createElement(g.O, {
                            hoverUnderlineNone: !0,
                            onClick: t.handleUnblock,
                            "data-test-selector": b
                        }, a.createElement(g._8, {
                            margin: {
                                left: .5
                            }
                        }, Object(l.d)("Unblock", "ReportWizardBlockActions"))))
                    }, t.handleBlock = function() {
                        return r.__awaiter(t, void 0, void 0, function() {
                            return r.__generator(this, function(e) {
                                return this.props.onBlock(), this.setState({
                                    userBlocked: !0
                                }), [2]
                            })
                        })
                    }, t.handleUnblock = function() {
                        t.props.onUnblock(), t.setState({
                            userBlocked: !1
                        })
                    }, t
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    var e = this.state.userBlocked ? this.renderUnblock() : this.renderBlock();
                    return a.createElement(g._35, {
                        borderTop: !0,
                        padding: {
                            y: 1
                        },
                        margin: {
                            top: 1
                        }
                    }, a.createElement(g._8, null, Object(l.d)("Would you like to block {user}?", {
                        user: this.props.targetUser.displayName
                    }, "ReportWizardBlockActions")), a.createElement(g._8, {
                        margin: {
                            y: 1
                        }
                    }, Object(l.d)("By blocking them, you will no longer see their messages, and they will not be able to host you or add you as a friend.", "ReportWizardBlockActions")), a.createElement(g._8, {
                        margin: {
                            top: 1
                        }
                    }, e))
                }, t
            }(a.Component),
            y = n("mw/a");
        ! function(e) {
            e.Link = "link", e.MultipleChoice = "multiple choice", e.Text = "text", e.Textarea = "textarea"
        }(i || (i = {}));
        var _, S = {
                generalFilter: function() {
                    return Object(l.d)("I don't think their content or behavior is allowed on Twitch", "ReportModalWizard")
                },
                me: function() {
                    return Object(l.d)("Me", "ReportModalWizard")
                },
                someoneElse: function() {
                    return Object(l.d)("Someone else", "ReportModalWizard")
                },
                sexuallyCoercive: function() {
                    return Object(l.d)("acting in a sexually coercive or inappropriate way", "ReportModalWizard")
                },
                abusiveViolence: function() {
                    return Object(l.d)("They're threatening violence or physical harm", "ReportModalWizard")
                },
                commitingViolence: function() {
                    return Object(l.d)("They're committing acts of violence or physical harm", "ReportModalWizard")
                },
                threatening: function() {
                    return Object(l.d)("threatening, harming, or endangering someone", "ReportModalWizard")
                },
                abusive: function() {
                    return Object(l.d)("being hateful, harassing, or abusive", "ReportModalWizard")
                }
            },
            E = {
                input_description: {
                    getTitle: function() {
                        return Object(l.d)("Could you provide more detail about this issue? You may include links to videos, clips, and content outside Twitch.", "ReportModalWizard")
                    },
                    value: "description",
                    type: i.Textarea,
                    required: !0
                },
                input_link: {
                    getTitle: function() {
                        return Object(l.d)("If possible, please provide a link to show us where the issue occurred. Links that do not lead to the original source of the content may not be usable as evidence.", "ReportModalWizard")
                    },
                    rows: 2,
                    value: "external links",
                    type: i.Textarea
                },
                input_usernames: {
                    getTitle: function() {
                        return Object(l.d)("If you know the usernames of any other Twitch accounts that may be owned by this person, please list them in this space.", "ReportModalWizard")
                    },
                    value: "other usernames",
                    rows: 2,
                    type: i.Textarea
                },
                input_connection: {
                    getTitle: function() {
                        return Object(l.d)("Please describe how you connected the offsite content to this Twitch account.", "ReportModalWizard")
                    },
                    value: "offsite content connection",
                    type: i.Textarea
                },
                input_comments: {
                    getTitle: function() {
                        return Object(l.d)("If you have any other comments you would like to add, please do so here.", "ReportModalWizard")
                    },
                    value: "comments",
                    type: i.Textarea
                },
                input_identifyOwner: {
                    getTitle: function() {
                        return Object(l.d)("Please describe how you identified this person as the owner of this Twitch account.", "ReportModalWizard")
                    },
                    rows: 2,
                    value: "connect account owner",
                    type: i.Textarea
                },
                endBlurb_socialmedia: {
                    getTitle: function() {
                        return Object(l.d)("Please submit a report to the site or service where the incident occurred as well if you have not already done so.", "ReportModalWizard")
                    },
                    type: i.Text
                },
                endBlurb_threat: {
                    getTitle: function() {
                        return Object(l.d)("If you feel you are in immediate danger, please contact your local law enforcement.", "ReportModalWizard")
                    },
                    type: i.Text
                },
                endLink_selfharm: {
                    getTitle: function() {
                        return Object(l.d)("Learn more about mental health support", "ReportModalWizard")
                    },
                    value: "https://help.twitch.tv/customer/en/portal/articles/2904486-twitch-cares-mental-health-support-information",
                    type: i.Link
                },
                endLink_DMCA: {
                    getTitle: function() {
                        return Object(l.d)("View our DMCA Notification Guidelines", "ReportModalWizard")
                    },
                    value: "https://www.twitch.tv/p/legal/dmca-guidelines/",
                    type: i.Link
                },
                endLink_trademark: {
                    getTitle: function() {
                        return Object(l.d)("View our Trademark Policy", "ReportModalWizard")
                    },
                    value: "https://www.twitch.tv/p/legal/trademark-policy/",
                    type: i.Link
                },
                endLink_devAgreement: {
                    getTitle: function() {
                        return Object(l.d)("View our Developer Agreement", "ReportModalWizard")
                    },
                    value: "https://www.twitch.tv/p/legal/developer-agreement/",
                    type: i.Link
                },
                endLink_eventCoC: {
                    getTitle: function() {
                        return Object(l.d)("View our Events Code of Conduct", "ReportModalWizard")
                    },
                    value: "https://www.twitch.tv/p/legal/events-code-of-conduct",
                    type: i.Link
                },
                messaging_general: {
                    getTitle: S.generalFilter,
                    value: "general_messaging",
                    omitFromDescription: !0
                },
                profile_general: {
                    getTitle: S.generalFilter,
                    value: "general_profile",
                    omitFromDescription: !0
                },
                maliciousRaid: {
                    getTitle: function() {
                        return Object(l.d)("They're participating in a malicious raid", "ReportModalWizard")
                    },
                    value: "malicious raid",
                    reportReason: y.b.Harassment
                },
                violence: {
                    getTitle: function() {
                        return Object(l.d)("It contains threats, harm, or endangerment of someone", "ReportModalWizard")
                    },
                    value: "violence/threats",
                    reportReason: y.b.Harm
                },
                report_username: {
                    getTitle: function() {
                        return Object(l.d)("They're using an inappropriate or offensive username", "ReportModalWizard")
                    },
                    value: "inappropriate username",
                    reportReason: y.b.OffensiveUsername
                },
                report_emotes: {
                    getTitle: function() {
                        return Object(l.d)("The emotes are inappropriate or offensive", "ReportModalWizard")
                    },
                    value: "inappropriate emotes",
                    reportReason: y.b.Other
                },
                abusive: {
                    getTitle: function() {
                        return Object(l.d)("It's hateful, harassing, or abusive", "ReportModalWizard")
                    },
                    value: "abusive"
                },
                scam: {
                    getTitle: function() {
                        return Object(l.d)("It contains attempts to scam other community members", "ReportModalWizard")
                    },
                    value: "scam",
                    reportReason: y.b.Spam
                },
                emptyStream: {
                    getTitle: function() {
                        return Object(l.d)("There's nobody on the stream", "ReportModalWizard")
                    },
                    value: "empty stream"
                },
                impersonation: {
                    getTitle: function() {
                        return Object(l.d)("They're impersonating someone", "ReportModalWizard")
                    },
                    value: "impersonation",
                    reportReason: y.b.Impersonation
                },
                underage: {
                    getTitle: function() {
                        return Object(l.d)("They're underage (12 or younger)", "ReportModalWizard")
                    },
                    value: "underage",
                    reportReason: y.b.Underaged
                },
                report_ip: {
                    getTitle: function() {
                        return Object(l.d)("I think they're using copyrighted content, trademarks, or other intellectual property that's not theirs", "ReportModalWizard")
                    },
                    value: "intellectual property"
                },
                inappropriateContent: {
                    getTitle: function() {
                        return Object(l.d)("It's inappropriate or obscene", "ReportModalWizard")
                    },
                    value: "inappropriate content"
                },
                violateDevAgreement: {
                    getTitle: function() {
                        return Object(l.d)("I think they're violating Twitch's Developer Agreement", "ReportModalWizard")
                    },
                    value: "violating developer agreement"
                },
                revealPersonalInfo: {
                    getTitle: function() {
                        return Object(l.d)("They might have revealed someone's personal information", "ReportModalWizard")
                    },
                    value: "revealing personal info",
                    reportReason: y.b.Other
                },
                inappropriateBadge: {
                    getTitle: function() {
                        return Object(l.d)("Their emote or subscriber badge violates Twitch's Guidelines", "ReportModalWizard")
                    },
                    value: "emote/subscriber badge",
                    reportReason: y.b.Other
                },
                noModeration: {
                    getTitle: function() {
                        return Object(l.d)("They're not moderating their chat appropriately", "ReportModalWizard")
                    },
                    value: "not moderating chat",
                    reportReason: y.b.Other
                },
                inappropriateExtension: {
                    getTitle: function() {
                        return Object(l.d)("Their extension contains malicious or inappropriate content", "ReportModalWizard")
                    },
                    value: "inappropriate extension",
                    reportReason: y.b.Other
                },
                cheating: {
                    getTitle: function() {
                        return Object(l.d)("They're cheating in an online game", "ReportModalWizard")
                    },
                    value: "cheating",
                    reportReason: y.b.Cheating
                },
                bitsViolation: {
                    getTitle: function() {
                        return Object(l.d)("Their use of Bits goes against Twitch's Policy", "ReportModalWizard")
                    },
                    value: "bits violation",
                    reportReason: y.b.BitsViolation
                },
                video_labeling: {
                    getTitle: function() {
                        return Object(l.d)("Their content is labeled incorrectly", "ReportModalWizard")
                    },
                    value: "incorrect label",
                    reportReason: y.b.Miscategorized
                },
                video_inactive: {
                    getTitle: function() {
                        return Object(l.d)("The stream is inactive (sleeping/AFK)", "ReportModalWizard")
                    },
                    value: "inactive stream",
                    reportReason: y.b.Miscategorized
                },
                video_general: {
                    getTitle: S.generalFilter,
                    value: "general_video",
                    omitFromDescription: !0
                },
                hateSpeech: {
                    getTitle: function() {
                        return Object(l.d)("They're using hate speech, hateful symbols, or hateful media", "ReportModalWizard")
                    },
                    value: "hate speech",
                    reportReason: y.b.HatefulConduct
                },
                harassment: {
                    getTitle: function() {
                        return Object(l.d)("They're harassing or bullying someone", "ReportModalWizard")
                    },
                    value: "harassment",
                    reportReason: y.b.Harassment
                },
                abusiveViolence: {
                    getTitle: S.abusiveViolence,
                    value: "threatening violence",
                    reportReason: y.b.Harm
                },
                commitingViolence: {
                    getTitle: S.commitingViolence,
                    value: "committing violence",
                    reportReason: y.b.Harm
                },
                swatting: {
                    getTitle: function() {
                        return Object(l.d)("They're inciting or committing swatting or a DDOS attack", "ReportModalWizard")
                    },
                    value: "swatting/ddosing",
                    reportReason: y.b.Harassment
                },
                personalInfo: {
                    getTitle: function() {
                        return Object(l.d)("They're purposely revealing personal information", "ReportModalWizard")
                    },
                    value: "revealing personal info",
                    reportReason: y.b.Harassment
                },
                threat_me: {
                    getTitle: function() {
                        return Object(l.d)("At me", "ReportModalWizard")
                    },
                    value: "against me",
                    reportReason: y.b.Harm
                },
                threat_person: {
                    getTitle: function() {
                        return Object(l.d)("At someone else", "ReportModalWizard")
                    },
                    value: "against another person",
                    reportReason: y.b.Harm
                },
                threat_group: {
                    getTitle: function() {
                        return Object(l.d)("At a group of people", "ReportModalWizard")
                    },
                    value: "against group of people",
                    reportReason: y.b.Harm
                },
                threat_selfharm: {
                    getTitle: function() {
                        return Object(l.d)("They're threatening self-harm", "ReportModalWizard")
                    },
                    value: "selfharm"
                },
                inappropriate_game: {
                    getTitle: function() {
                        return Object(l.d)("The game isn't allowed on Twitch", "ReportModalWizard")
                    },
                    value: "prohibited game",
                    reportReason: y.b.Prohibited
                },
                sexuallyViolent: {
                    getTitle: function() {
                        return Object(l.d)("Violent sexual conduct", "ReportModalWizard")
                    },
                    value: "sexually violent",
                    reportReason: y.b.SexualViolence
                },
                childAnimal: {
                    getTitle: function() {
                        return Object(l.d)("Sexual conduct involving a child or animal", "ReportModalWizard")
                    },
                    value: "sexual conduct; child or animal",
                    reportReason: y.b.SexualViolence
                },
                pornographic: {
                    getTitle: function() {
                        return Object(l.d)("Sexually explicit or pornographic content", "ReportModalWizard")
                    },
                    value: "pornographic",
                    reportReason: y.b.SexualContent
                },
                gory: {
                    getTitle: function() {
                        return Object(l.d)("Extreme violence or gore", "ReportModalWizard")
                    },
                    value: "gory",
                    reportReason: y.b.Gore
                },
                suggestive: {
                    getTitle: function() {
                        return Object(l.d)("Sexually suggestive content", "ReportModalWizard")
                    },
                    value: "sexually suggestive",
                    reportReason: y.b.SexualContent
                },
                nudity: {
                    getTitle: function() {
                        return Object(l.d)("Full or partial nudity", "ReportModalWizard")
                    },
                    value: "nudity",
                    reportReason: y.b.SexualContent
                },
                other: {
                    getTitle: function() {
                        return Object(l.d)("There's something else wrong with it...", "ReportModalWizard")
                    },
                    value: "other",
                    reportReason: y.b.Other
                },
                evasion: {
                    getTitle: function() {
                        return Object(l.d)("They were banned or suspended and are trying to get around it (ban evasion)", "ReportModalWizard")
                    },
                    value: "ban evasion"
                },
                evasion_sitewide: {
                    getTitle: function() {
                        return Object(l.d)("A sitewide ban from Twitch", "ReportModalWizard")
                    },
                    value: "sitewide ban",
                    reportReason: y.b.TosBanEvasion
                },
                evasion_chat: {
                    getTitle: function() {
                        return Object(l.d)("A chat ban from one or more channels", "ReportModalWizard")
                    },
                    value: "chat ban",
                    reportReason: y.b.ChatBanEvasion
                },
                evasion_messaging: {
                    getTitle: function() {
                        return Object(l.d)("A block from messaging me", "ReportModalWizard")
                    },
                    value: "messaging block",
                    reportReason: y.b.ChatBanEvasion
                },
                impersonation_me: {
                    getTitle: S.me,
                    value: "impersonating me",
                    reportReason: y.b.Impersonation
                },
                impersonation_brand: {
                    getTitle: function() {
                        return Object(l.d)("Someone I represent, or a brand/company I work for", "ReportModalWizard")
                    },
                    value: "impersonating brand",
                    reportReason: y.b.Impersonation
                },
                impersonation_other: {
                    getTitle: S.someoneElse,
                    value: "impersonating someone else",
                    reportReason: y.b.Impersonation
                },
                selfharm: {
                    getTitle: function() {
                        return Object(l.d)("I'm concerned for their wellbeing", "ReportModalWizard")
                    },
                    value: "selfharm",
                    reportReason: y.b.SelfHarm
                },
                chat: {
                    getTitle: function() {
                        return Object(l.d)("In a stream chat message", "ReportModalWizard")
                    },
                    value: "chat"
                },
                profile: {
                    getTitle: function() {
                        return Object(l.d)("In the profile content, extensions, or emotes", "ReportModalWizard")
                    },
                    value: "profile"
                },
                video: {
                    getTitle: function() {
                        return Object(l.d)("In a live stream, video, or clip", "ReportModalWizard")
                    },
                    value: "video"
                },
                room: {
                    getTitle: function(e) {
                        return Object(l.d)("In one of {username}'s rooms", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    value: "room"
                },
                whisper: {
                    getTitle: function() {
                        return Object(l.d)("In a whisper (private message)", "ReportModalWizard")
                    },
                    value: "whisper",
                    reportContext: y.a.Whisper
                },
                username: {
                    getTitle: function() {
                        return Object(l.d)("In the username", "ReportModalWizard")
                    },
                    value: "username",
                    reportReason: y.b.OffensiveUsername
                },
                report_other: {
                    getTitle: function() {
                        return Object(l.d)("Somewhere else...", "ReportModalWizard")
                    },
                    value: "somewhere else",
                    omitFromDescription: !0
                },
                video_streamer: {
                    getTitle: function() {
                        return Object(l.d)("The streamer or channel owner", "ReportModalWizard")
                    },
                    value: "streamer"
                },
                video_someoneElse: {
                    getTitle: function() {
                        return Object(l.d)("Someone else in the video", "ReportModalWizard")
                    },
                    value: "someone else in video"
                },
                video_chatSomeone: {
                    getTitle: function() {
                        return Object(l.d)("Someone in chat", "ReportModalWizard")
                    },
                    value: "someone in chat",
                    differentTarget: !0
                },
                report_channelOwner: {
                    getTitle: function() {
                        return Object(l.d)("The channel owner", "ReportModalWizard")
                    },
                    value: "channel owner"
                },
                report_member: {
                    getTitle: function() {
                        return Object(l.d)("Another community member", "ReportModalWizard")
                    },
                    value: "community member",
                    differentTarget: !0
                },
                location_onTwitch: {
                    getTitle: function() {
                        return Object(l.d)("On Twitch", "ReportModalWizard")
                    },
                    value: "on twitch"
                },
                location_anotherSite: {
                    getTitle: function() {
                        return Object(l.d)("On another site or service", "RpoertModalWizard")
                    },
                    value: "another site"
                },
                location_TwitchEvent: {
                    getTitle: function() {
                        return Object(l.d)("In person, at a Twitch event", "ReportModalWizard")
                    },
                    value: "twitch event"
                },
                external_incitingRaids: {
                    getTitle: function() {
                        return Object(l.d)("inciting brigading or malicious raids", "ReportModalWizard")
                    },
                    reportReason: y.b.Harassment,
                    value: "brigading/raids"
                },
                external_threatening: {
                    getTitle: S.threatening,
                    value: "threatening"
                },
                external_harassment: {
                    getTitle: S.abusive,
                    value: "hateful/harassing"
                },
                external_abusiveViolence: {
                    getTitle: S.abusiveViolence,
                    value: "external site; threatening violence",
                    reportReason: y.b.Harm
                },
                external_commitingViolence: {
                    getTitle: S.commitingViolence,
                    value: "external site; committing violence",
                    reportReason: y.b.Harm
                },
                conduct_impersonation: {
                    getTitle: function() {
                        return Object(l.d)("impersonating someone", "ReportModalWizard")
                    },
                    value: "impersonation",
                    reportReason: y.b.Impersonation
                },
                spam: {
                    getTitle: function() {
                        return Object(l.d)("They're spamming or spreading malicious links", "ReportModalWizard")
                    },
                    value: "spam",
                    reportReason: y.b.Spam
                },
                spam_bot: {
                    getTitle: function() {
                        return Object(l.d)("I think this is a bot account", "ReportModalWizard")
                    },
                    value: "bot"
                },
                spam_scam: {
                    getTitle: function() {
                        return Object(l.d)("They're trying to scam other community members or sending malicious links", "ReportModalWizard")
                    },
                    value: "scam or malicious links"
                },
                spam_repeated: {
                    getTitle: function() {
                        return Object(l.d)("They're sending repeated messages (spam)", "ReportModalWizard")
                    },
                    value: "repeat messages"
                }
            },
            C = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onChange = function(e) {
                        var n = e.target,
                            i = n.name,
                            r = n.value;
                        t.props.onChangeText(i, r)
                    }, t.onSelect = function(e) {
                        if (t.props.currentCard.items && e.currentTarget.parentElement) {
                            var n = Number(e.currentTarget.parentElement.getAttribute("data-a-index")),
                                i = t.props.currentCard.items[n];
                            t.props.onChangeRadio(i)
                        }
                    }, t
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.currentCard.getDescription ? a.createElement(g._8, {
                        padding: {
                            bottom: 1
                        }
                    }, this.props.currentCard.getDescription()) : null;
                    return a.createElement(g._8, {
                        className: "reporting-wizard-card"
                    }, e, a.createElement(g.W, {
                        label: this.props.currentCard.getLabel ? this.props.currentCard.getLabel() : ""
                    }, this.renderCardItems()))
                }, t.prototype.renderCardItems = function() {
                    var e = this,
                        t = this.props.currentCard,
                        n = [];
                    return t.items && t.type && (n = t.items.filter(function(e) {
                        return !!e
                    }).map(function(t, n) {
                        switch (t.type) {
                            case i.Text:
                                return a.createElement(g._8, {
                                    key: n,
                                    padding: {
                                        bottom: 1
                                    }
                                }, t.getTitle());
                            case i.Link:
                                return a.createElement(g._8, {
                                    key: n,
                                    padding: {
                                        bottom: 1
                                    }
                                }, a.createElement(g.O, {
                                    to: t.value,
                                    targetBlank: !0
                                }, a.createElement(g._8, {
                                    display: g.R.Flex
                                }, a.createElement(g._8, {
                                    display: g.R.Inline,
                                    padding: {
                                        right: .5
                                    }
                                }, a.createElement(g._24, {
                                    asset: g._25.Document
                                })), t.getTitle())));
                            case i.Textarea:
                                var r = t.value ? e.props.userTextInputs[t.value] : void 0,
                                    o = t.required && (!r || !!r && 0 === r.trim().length);
                                return a.createElement(g._8, {
                                    key: n,
                                    padding: {
                                        bottom: 1
                                    }
                                }, a.createElement(g.W, {
                                    label: t.getTitle(),
                                    labelOptional: t.required ? "" : Object(l.d)("Optional", "ReportModalWizardCard")
                                }, a.createElement(g._46, {
                                    onChange: e.onChange,
                                    rows: t.rows || 3,
                                    name: t.value,
                                    error: e.props.error && o,
                                    value: r,
                                    "data-test-selector": "report-wizard-textarea"
                                })));
                            case i.MultipleChoice:
                            default:
                                return a.createElement(g._8, {
                                    key: n,
                                    padding: {
                                        y: .5
                                    }
                                }, a.createElement(g._21, {
                                    checked: !!e.props.currentSelection && e.props.currentSelection.value === t.value,
                                    onChange: e.onSelect,
                                    label: t.getTitle(e.props.targetUser.displayName),
                                    "data-a-index": n,
                                    name: "card",
                                    value: t.value
                                }))
                        }
                    })), n
                }, t
            }(a.Component),
            N = n("LjAQ");
        ! function(e) {
            e.Confirm = "Confirm", e.MultipleChoice = "MultipleChoice", e.Info = "End Card"
        }(_ || (_ = {}));
        var T, w, O, R = {
                contentGeneral: function() {
                    return Object(l.d)("What would you like to report?", "ReportModalWizard")
                },
                content: function() {
                    return Object(l.d)("What's wrong with this content?", "ReportModalWizard")
                },
                identifyUser: function() {
                    return Object(l.d)("Who do you want to report?", "ReportModalWizard")
                },
                thisPersonIs: function() {
                    return Object(l.d)("This person is...", "ReportModalWizard")
                },
                relevantStatements: function() {
                    return Object(l.d)("What would you like to report? (Please choose the most relevant statement that applies.)", "ReportModalWizard")
                }
            },
            D = {
                report: function(e) {
                    return Object(l.d)("Report {username}", {
                        username: e
                    }, "ReportModalWizard")
                },
                reportVideo: function(e) {
                    return Object(l.d)("Report {username}'s Video", {
                        username: e
                    }, "ReportModalWizard")
                },
                reportMessage: function(e) {
                    return Object(l.d)("Report {username}'s Message", {
                        username: e
                    }, "ReportModalWizard")
                },
                reportProfile: function(e) {
                    return Object(l.d)("Report {username}'s Profile Or Other Content", {
                        username: e
                    }, "ReportModalWizard")
                },
                reportAbusive: function(e) {
                    return Object(l.d)("Report {username} for Abusive Conduct", {
                        username: e
                    }, "ReportModalWizard")
                },
                tellUsMore: function() {
                    return Object(l.d)("Tell Us More", "ReportModalWizard")
                },
                thanks: function() {
                    return Object(l.d)("Thanks for letting us know", "ReportModalWizard")
                },
                thanksConcern: function() {
                    return Object(l.d)("Thank you for your concern", "ReportModalWizard")
                }
            },
            I = {
                getDescription: function() {
                    return Object(l.d)("Reports are reviewed by Twitch Staff 24 hours a day. We will issue penalties, such as account suspension and/or content removal, once we verify that a violation of our policies has occurred.", "ReportModalWizard")
                },
                blockPrompt: !0,
                getTitle: D.thanks,
                type: _.Info,
                value: "end card"
            },
            x = {
                socialMedia: r.__assign({}, I, {
                    items: [E.endBlurb_socialmedia]
                }),
                violence: r.__assign({}, I, {
                    items: [E.endBlurb_threat]
                }),
                legal: {
                    getTitle: D.thanksConcern,
                    getDescription: function() {
                        return Object(l.d)("To submit a claim or report a violation of this type, you will need to follow the steps listed on the relevant page below.", "ReportModalWizard")
                    },
                    items: [E.endLink_DMCA, E.endLink_trademark, E.endLink_devAgreement],
                    type: _.Info,
                    value: "ip end"
                },
                selfharm: {
                    getTitle: D.thanksConcern,
                    getDescription: function() {
                        return Object(l.d)("If you know the user personally, and you believe them to be in danger, please contact their local authorities immediately. The link below contains some general information that may be of use.", "ReportModalWizard")
                    },
                    items: [E.endLink_selfharm],
                    type: _.Info,
                    value: "selfharm end"
                },
                twitchEvent: {
                    getTitle: D.thanksConcern,
                    getDescription: function() {
                        return Object(l.d)("Please bring this concern to the attention of staff or security at the event if you have not already done so. More information is available at the link below.", "ReportModalWizard")
                    },
                    items: [E.endLink_eventCoC],
                    value: "twitch event end",
                    type: _.Info
                }
            },
            F = {
                getTitle: D.report,
                getLabel: function() {
                    return Object(l.d)("Where is the problem?", "ReportModalWizard")
                },
                items: [E.video, E.whisper, E.chat, E.room, E.profile, E.username, E.report_other],
                type: _.MultipleChoice,
                value: "content type"
            },
            P = {
                identifyUser: {
                    getTitle: D.reportVideo,
                    getLabel: R.identifyUser,
                    items: [E.video_streamer, E.video_someoneElse, E.video_chatSomeone],
                    type: _.MultipleChoice,
                    value: "video identify user"
                },
                content: {
                    getTitle: D.reportVideo,
                    getLabel: R.contentGeneral,
                    items: [E.revealPersonalInfo, E.video_labeling, E.video_inactive, E.video_general, E.report_ip, E.violateDevAgreement, E.selfharm],
                    type: _.MultipleChoice,
                    value: "video report reason"
                },
                general: {
                    getTitle: D.reportVideo,
                    getLabel: R.content,
                    items: [E.report_username, E.violence, E.abusive, E.cheating, E.scam, E.inappropriateContent, E.evasion, E.impersonation, E.underage, E.bitsViolation],
                    type: _.MultipleChoice,
                    value: "video general report reason"
                }
            },
            U = {
                content: {
                    getTitle: D.reportMessage,
                    getLabel: R.contentGeneral,
                    items: [E.revealPersonalInfo, E.evasion, E.spam, E.maliciousRaid, E.report_username, E.messaging_general, E.selfharm],
                    type: _.MultipleChoice,
                    value: "message report reason"
                },
                general: {
                    getTitle: D.reportMessage,
                    getLabel: R.content,
                    items: [E.report_emotes, E.violence, E.abusive, E.inappropriateContent, E.impersonation, E.underage, E.bitsViolation],
                    type: _.MultipleChoice,
                    value: "message general report reason"
                }
            },
            j = r.__assign({}, U.content, {
                getDescription: function() {
                    return Object(l.d)("Please note that we may review additional messages in this conversation to determine the context of your report.", "ReportModalWizard")
                }
            }),
            A = {
                content: {
                    getTitle: D.reportProfile,
                    getLabel: R.contentGeneral,
                    items: [E.revealPersonalInfo, E.inappropriateBadge, E.inappropriateExtension, E.noModeration, E.profile_general, E.report_ip, E.violateDevAgreement, E.selfharm],
                    type: _.MultipleChoice,
                    value: "profile report reason"
                },
                general: {
                    getTitle: D.reportProfile,
                    getLabel: R.content,
                    items: [E.report_username, E.violence, E.abusive, E.scam, E.inappropriateContent, E.evasion, E.impersonation, E.underage, E.bitsViolation],
                    type: _.MultipleChoice,
                    value: "profile general report reason"
                }
            },
            L = {
                getTitle: function(e) {
                    return Object(l.d)("Report {username}'s Room", {
                        username: e
                    }, "ReportModalWizard")
                },
                getLabel: R.identifyUser,
                items: [E.report_channelOwner, E.report_member],
                value: "room report user",
                type: _.MultipleChoice
            },
            M = {
                getTitle: D.tellUsMore,
                items: [E.input_description],
                type: _.Confirm,
                value: "tell us more"
            },
            B = {
                banEvasion: r.__assign({}, M, {
                    items: [E.input_usernames, E.input_description],
                    value: "ban evasion tell us more"
                }),
                socialMedia: r.__assign({}, M, {
                    items: [E.input_link, E.input_connection, E.input_description],
                    nextCard: x.socialMedia,
                    value: "social media tell us more"
                })
            },
            W = {
                content: {
                    getTitle: D.reportAbusive,
                    getLabel: R.relevantStatements,
                    items: [E.hateSpeech, E.harassment, E.abusiveViolence, E.commitingViolence, E.swatting, E.personalInfo],
                    type: _.MultipleChoice,
                    value: "abuse type"
                },
                violence: {
                    getTitle: function(e) {
                        return Object(l.d)("Report {username} for Violence or Threats", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    getLabel: function() {
                        return Object(l.d)("Are the threats or actions directed at you or someone else?", "ReportModalWizard")
                    },
                    items: [E.threat_me, E.threat_person, E.threat_group, E.threat_selfharm],
                    type: _.MultipleChoice,
                    value: "violence type"
                }
            },
            V = {
                identifyLocation: {
                    getTitle: function(e) {
                        return Object(l.d)("Report {username} for something else...", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    getLabel: function() {
                        return Object(l.d)("Where did the problem happen?", "ReportModalWizard")
                    },
                    items: [E.location_onTwitch, E.location_anotherSite, E.location_TwitchEvent],
                    type: _.MultipleChoice,
                    value: "off-site conduct location"
                },
                externalSite: {
                    getTitle: function(e) {
                        return Object(l.d)("Report {username}'s Conduct on Another Site or Service", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    getLabel: R.thisPersonIs,
                    getDescription: function() {
                        return Object(l.d)("Please note that incidents reported through this form must involve Twitch community members. If possible, please submit a report to the site or service where the incident occurred as well.", "ReportModalWizard")
                    },
                    items: [E.external_incitingRaids, E.external_threatening, E.external_harassment],
                    type: _.MultipleChoice,
                    nextCard: B.socialMedia,
                    value: "external site conduct"
                },
                external_violence: r.__assign({}, W.violence, {
                    items: [E.threat_me, E.threat_person, E.threat_group],
                    nextCard: B.socialMedia
                }),
                external_abusive: r.__assign({}, W.content, {
                    items: [E.hateSpeech, E.harassment, E.external_abusiveViolence, E.external_commitingViolence, E.swatting, E.personalInfo],
                    nextCard: B.socialMedia
                })
            },
            H = {
                getTitle: function(e) {
                    return Object(l.d)("Report {username}'s Spam or Malicious Links", {
                        username: e
                    }, "ReportModalWizard")
                },
                getLabel: R.contentGeneral,
                items: [E.spam_bot, E.spam_scam, E.spam_repeated],
                type: _.MultipleChoice,
                value: "spam type"
            },
            G = {
                getTitle: function(e) {
                    return Object(l.d)("Report {username} for Inappropriate Content", {
                        username: e
                    }, "ReportModalWizard")
                },
                getLabel: R.relevantStatements,
                items: [E.inappropriate_game, E.gory, E.sexuallyViolent, E.childAnimal, E.pornographic, E.suggestive, E.nudity, E.other],
                type: _.MultipleChoice,
                value: "inappropriate content type"
            },
            z = {
                getTitle: function(e) {
                    return Object(l.d)("Report {username} for Evading a Ban", {
                        username: e
                    }, "ReportModalWizard")
                },
                getLabel: function() {
                    return Object(l.d)("What kind of ban are they evading?", "ReportModalWizard")
                },
                value: "ban type",
                items: [E.evasion_chat, E.evasion_sitewide, E.evasion_messaging],
                type: _.MultipleChoice,
                nextCard: B.banEvasion
            },
            q = {
                getTitle: function(e) {
                    return Object(l.d)("Report {username} for Impersonation", {
                        username: e
                    }, "ReportModalWizard")
                },
                getLabel: function() {
                    return Object(l.d)("Who is being impersonated?", "ReportModalWizard")
                },
                getDescription: function() {
                    return Object(l.d)("Parody, cosplay, and other portrayals without the intent to deceive or defraud are allowed under Twitch's Community Guidelines. If you would still like to submit a report, please continue.", "ReportModalWizard")
                },
                items: [E.impersonation_me, E.impersonation_brand, E.impersonation_other],
                type: _.MultipleChoice,
                value: "impersonation type"
            },
            Q = F,
            K = M,
            $ = I,
            Y = {
                video: P.identifyUser,
                whisper: j,
                chat: U.content,
                profile: A.content,
                room: L,
                "somewhere else": V.identifyLocation,
                streamer: P.content,
                "someone else in video": P.content,
                "someone in chat": U.content,
                general_video: P.general,
                general_messaging: U.general,
                general_profile: A.general,
                "channel owner": A.content,
                "community member": U.content,
                "on twitch": A.content,
                "another site": V.externalSite,
                "twitch event": x.twitchEvent,
                "brigading/raids": B.socialMedia,
                threatening: V.external_violence,
                "hateful/harassing": V.external_abusive,
                "external site; threatening violence": V.external_violence,
                "external site; committing violence": V.external_violence,
                "external site; scam": B.socialMedia,
                "ban evasion": z,
                spam: H,
                hateful: W.content,
                impersonation: q,
                "violence/threats": W.violence,
                "threatening violence": W.violence,
                "committing violence": W.violence,
                abusive: W.content,
                "inappropriate content": G,
                "intellectual property": x.legal,
                "violating developer agreement": x.legal
            },
            Z = {
                selfharm: x.selfharm,
                harm: x.violence,
                other: $
            },
            X = {
                CHANNEL_FEED_POST_REPORT: A.content,
                COMMUNITY_REPORT: A.content,
                CHAT_REPORT: U.content,
                CLIP_REPORT: P.content,
                EVENT_REPORT: A.content,
                EXTENSION_REPORT: A.content,
                LIVE_UP_REPORT: A.content,
                ROOM_REPORT: L,
                WHISPER_REPORT: j,
                VOD_COMMENT_REPORT: U.content
            },
            J = "report-wizard-back",
            ee = "report-wizard-close",
            te = "report-wizard-next",
            ne = "report-wizard-submit",
            ie = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        currentCard: t.props.currentCard || X[t.props.reportContentType] || Q,
                        prevCards: [],
                        currentSelection: null,
                        prevSelections: [],
                        displacedSelections: [],
                        userTextInput: {},
                        error: "",
                        reportReason: t.props.reportReason || "",
                        modalCloseTracked: !1,
                        targetUnknown: !1,
                        reportContext: t.props.reportContentType
                    }, t.renderPrimer = function() {
                        return a.createElement(g._8, {
                            margin: {
                                top: 1
                            }
                        }, a.createElement(g.Q, null, Object(l.d)("We are going to ask you a few questions to help us investigate your report quickly and accurately.", "ReportModalWizard")))
                    }, t.renderButtons = function() {
                        var e = Object(l.d)("Close", "ReportModalWizard"),
                            n = t.handleClose,
                            i = ee,
                            r = !1,
                            o = t.state.prevCards.length ? t.renderBack() : null;
                        switch (t.state.currentCard.type) {
                            case _.MultipleChoice:
                                e = Object(l.d)("Next", "ReportModalWizard"), n = t.handleNext, i = te, r = !t.state.currentSelection;
                                break;
                            case _.Confirm:
                                e = Object(l.d)("Submit Report", "ReportModalWizard"), n = t.handleSubmit, r = !t.state.userTextInput, i = ne
                        }
                        return a.createElement(g._8, null, o, a.createElement(g.v, {
                            onClick: n,
                            disabled: r,
                            "data-test-selector": i
                        }, a.createElement(g._8, {
                            padding: {
                                x: 1
                            }
                        }, e)))
                    }, t.renderBack = function() {
                        return a.createElement(g._8, {
                            margin: {
                                right: 1
                            },
                            display: g.R.InlineBlock
                        }, a.createElement(g.v, {
                            type: g.B.Hollow,
                            onClick: t.handleBack,
                            "data-test-selector": J
                        }, a.createElement(g._8, {
                            padding: {
                                x: 1
                            }
                        }, Object(l.d)("Back", "ReportModalWizard"))))
                    }, t.getTitle = function() {
                        return t.state.currentCard.getTitle && t.props.targetUser.displayName && t.props.targetUserID ? t.state.targetUnknown ? t.state.currentCard.getTitle(Object(l.d)("Another User", "ReportModalWizard")) : t.state.currentCard.getTitle(t.props.targetUser.displayName) : t.state.targetUnknown ? Object(l.d)("Report User", "ReportModalWizard") : t.props.title
                    }, t.handleClose = function() {
                        t.setState({
                            modalCloseTracked: !0
                        }, function() {
                            return t.props.trackClose(O.Finish, t.state.currentCard.value)
                        }), t.props.onClose()
                    }, t.handleNext = function() {
                        if (t.state.currentSelection && t.state.currentSelection.value) {
                            var e = t.state.currentCard,
                                n = t.state.prevCards.concat(e),
                                i = t.state.prevSelections.concat(t.state.currentSelection),
                                r = t.state.displacedSelections[t.state.displacedSelections.length - 1],
                                a = t.state.currentSelection.differentTarget || t.state.targetUnknown,
                                o = t.state.currentSelection.reportContext || t.state.reportContext,
                                s = e.nextCard || K;
                            Y[t.state.currentSelection.value] && (s = Y[t.state.currentSelection.value]);
                            var l = t.state.currentSelection.reportReason || t.state.reportReason,
                                c = s.type === _.Info;
                            t.setState({
                                currentCard: s,
                                reportReason: l,
                                prevCards: c ? [] : n,
                                prevSelections: i,
                                targetUnknown: a,
                                currentSelection: r || null,
                                displacedSelections: t.state.displacedSelections.slice(0, -1),
                                reportContext: o
                            }, function() {
                                return t.trackNavigation(w.Next, e.value)
                            })
                        }
                    }, t.createReportDescription = function() {
                        return "" + (t.state.reportContext !== t.props.reportContentType ? "report context: " + t.props.reportContentType + "\n\n" : "") + t.state.prevSelections.map(function(e) {
                            if (!e.omitFromDescription) return e.value
                        }).filter(function(e) {
                            return !!e
                        }).join(" > ") + "\n\n" + Object.keys(t.state.userTextInput).map(function(e) {
                            return e + ": " + t.state.userTextInput[e]
                        }).join("\n")
                    }, t.requiredInputsNonEmpty = function() {
                        if (t.state.currentCard.items) return 0 === t.state.currentCard.items.filter(function(e) {
                            if (e.type !== i.Textarea || !e.required) return !1;
                            var n = t.state.userTextInput[e.value],
                                r = n && 0 === n.trim().length;
                            return !n || r
                        }).length
                    }, t.handleSubmit = function() {
                        return r.__awaiter(t, void 0, void 0, function() {
                            var e, t, n, i, a = this;
                            return r.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        return e = Object(l.d)("Additional information is required.", "ReportModalWizard"), this.requiredInputsNonEmpty() ? (t = this.state.reportReason || "other", n = this.createReportDescription(), [4, this.props.onSubmit(t, n, null, null, this.state.reportContext)]) : [3, 2];
                                    case 1:
                                        switch (r.sent(), this.props.submitStatus) {
                                            case N.b.FormError:
                                                this.setState({
                                                    error: e
                                                });
                                                break;
                                            case N.b.Success:
                                                i = $, Z[t] && (i = Z[t]), this.state.currentCard.nextCard && (i = this.state.currentCard.nextCard), this.setState({
                                                    currentCard: i,
                                                    prevCards: [],
                                                    prevSelections: [],
                                                    currentSelection: null,
                                                    displacedSelections: [],
                                                    userTextInput: {},
                                                    error: ""
                                                }, function() {
                                                    return a.trackNavigation(w.Submit)
                                                });
                                                break;
                                            case N.b.UserError:
                                                this.setState({
                                                    error: Object(l.d)("This account could not be reported. It may have already been suspended, or the owner may have deleted it.", "ReportModalWizard")
                                                });
                                                break;
                                            case N.b.MutationError:
                                            default:
                                                this.setState({
                                                    error: Object(l.d)("Sorry, a network error occurred when submitting your report. Please try again later.", "ReportModalWizard")
                                                })
                                        }
                                        return [3, 3];
                                    case 2:
                                        this.props.onError(N.b.FormError), this.setState({
                                            error: e
                                        }), r.label = 3;
                                    case 3:
                                        return [2]
                                }
                            })
                        })
                    }, t.handleBack = function() {
                        return r.__awaiter(t, void 0, void 0, function() {
                            var e, t, n, i, a, o = this;
                            return r.__generator(this, function(r) {
                                return e = this.state.currentCard, t = this.state.prevCards[this.state.prevCards.length - 1], n = this.state.prevSelections[this.state.prevSelections.length - 1], i = !n.differentTarget && this.state.targetUnknown, a = this.state.displacedSelections, this.state.currentSelection && (a = a.concat(this.state.currentSelection)), t && n && this.setState({
                                    currentCard: t,
                                    currentSelection: n,
                                    displacedSelections: a,
                                    prevCards: this.state.prevCards.slice(0, -1),
                                    prevSelections: this.state.prevSelections.slice(0, -1),
                                    error: "",
                                    targetUnknown: i
                                }, function() {
                                    return o.trackNavigation(w.Back, e.value)
                                }), [2]
                            })
                        })
                    }, t.handleTextInput = function(e, n) {
                        var i = t.state.userTextInput;
                        i[e] = n, t.setState({
                            userTextInput: i
                        })
                    }, t.handleSelection = function(e) {
                        if (t.state.currentCard.items && e !== t.state.currentSelection) {
                            var n = t.state.targetUnknown;
                            if (n) n = 0 === t.state.displacedSelections.filter(function(e) {
                                return e.differentTarget
                            }).length;
                            var i = t.state.reportContext;
                            (t.state.displacedSelections.filter(function(e) {
                                return e.reportContext
                            }).length || t.state.currentSelection && t.state.currentSelection.reportContext) && (i = t.props.reportContentType), t.setState({
                                currentSelection: e,
                                displacedSelections: [],
                                userTextInput: {},
                                targetUnknown: n,
                                reportContext: i
                            })
                        }
                    }, t.trackNavigation = function(e, n) {
                        t.props.trackAction(e, n, t.state.currentCard.value)
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentWillUnmount = function() {
                    this.state.modalCloseTracked || this.props.trackClose(O.Close, this.state.currentCard.value)
                }, t.prototype.render = function() {
                    var e = this.state.currentCard.type === _.Info && this.state.currentCard.blockPrompt ? a.createElement(k, {
                            targetUser: this.props.targetUser,
                            onBlock: this.props.onBlock,
                            onUnblock: this.props.onUnblock,
                            userBlocked: this.props.userBlocked
                        }) : null,
                        t = this.state.error ? a.createElement(g._35, {
                            fullWidth: !0,
                            margin: {
                                bottom: 1
                            },
                            padding: 1,
                            className: "reporting__error-container"
                        }, this.state.error) : null,
                        n = this.state.prevCards.length || this.state.currentCard.type === _.Info ? null : this.renderPrimer();
                    return a.createElement(g._35, {
                        className: "reporting-wizard",
                        display: g.R.Flex,
                        margin: {
                            x: 1
                        },
                        flexDirection: g.T.Column,
                        fullHeight: !0,
                        "data-test-card-value": this.state.currentCard.value
                    }, t, a.createElement(g.Q, {
                        bold: !0,
                        fontSize: g.V.Size4
                    }, this.getTitle()), n, a.createElement(g._8, {
                        margin: {
                            y: 1
                        }
                    }, a.createElement(C, {
                        currentCard: this.state.currentCard,
                        currentSelection: this.state.currentSelection,
                        targetUser: this.props.targetUser,
                        targetUserID: this.props.targetUserID,
                        onChangeRadio: this.handleSelection,
                        onChangeText: this.handleTextInput,
                        userTextInputs: this.state.userTextInput,
                        error: this.props.submitStatus === N.b.FormError && !!this.state.error
                    }), e), this.renderButtons())
                }, t
            }(a.Component),
            re = n("xwpJ"),
            ae = n("mmQh"),
            oe = n("mRH2"),
            se = n("IRHd");
        n.d(t, "c", function() {
                return w
            }), n.d(t, "a", function() {
                return O
            }), n.d(t, "b", function() {
                return ce
            }),
            function(e) {
                e.Close = "close", e.Open = "open", e.Submit = "submit_report", e.ToggleSettings = "modal_settings"
            }(T || (T = {})),
            function(e) {
                e.Back = "back", e.Close = "close", e.Open = "open", e.Next = "next", e.Submit = "submit_report", e.ToggleSettings = "modal_settings"
            }(w || (w = {})),
            function(e) {
                e.Close = "close", e.Finish = "finish"
            }(O || (O = {}));
        var le = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                n.handleSubmit = function(e, t, i, a, o) {
                    return r.__awaiter(n, void 0, void 0, function() {
                        var n, s, c, d, u = this;
                        return r.__generator(this, function(r) {
                            switch (r.label) {
                                case 0:
                                    if (e !== N.a) return [3, 5];
                                    c = {
                                        userID: this.props.reportContext.targetUserID,
                                        communityID: i || "",
                                        reason: t
                                    }, r.label = 1;
                                case 1:
                                    return r.trys.push([1, 3, , 4]), [4, this.props.reportUserInCommunity(Object(p.a)(c))];
                                case 2:
                                    return r.sent(), l.o.tracking.track(h.SpadeEventType.CommunityModeration, {
                                        community_id: i,
                                        name: a,
                                        is_official: !1,
                                        user_id: this.props.sessionUser && this.props.sessionUser.id,
                                        target_id: this.props.reportContext.targetUserID,
                                        action: "report",
                                        reason: e
                                    }), this.setState({
                                        submitStatus: N.b.Success
                                    }, function() {
                                        u.state.showWizard || u.trackAction(T.Submit)
                                    }), [3, 4];
                                case 3:
                                    return n = r.sent(), l.j.error(n, "ReportUserInCommunity Mutation failed."), this.setState({
                                        submitStatus: N.b.MutationError
                                    }), [3, 4];
                                case 4:
                                    return [3, 9];
                                case 5:
                                    if (s = o === y.a.Whisper ? o : this.props.reportContext.contentType, c = {
                                            description: t,
                                            reason: e,
                                            content: s,
                                            contentID: this.props.reportContext.contentID,
                                            extra: this.props.reportContext.extra,
                                            targetID: this.props.reportContext.targetUserID
                                        }, this.props.reportContext.contentType === y.a.Community && this.props.reportContext.extra && (c.description = Object(re.a)(this.props.reportContext.extra, t)), null === c.targetID) return this.setState({
                                        submitStatus: N.b.UserError
                                    }), [2];
                                    r.label = 6;
                                case 6:
                                    return r.trys.push([6, 8, , 9]), [4, this.props.reportUser(Object(p.a)(c))];
                                case 7:
                                    return r.sent(), this.props.reportContext.contentType === y.a.Community && l.o.tracking.track(h.SpadeEventType.CommunityReport, {
                                        community_id: this.props.reportContext.contentID,
                                        name: this.props.reportContext.extra,
                                        is_official: !1,
                                        user_id: this.props.sessionUser && this.props.sessionUser.id,
                                        reason: e
                                    }), this.setState({
                                        submitStatus: N.b.Success
                                    }, function() {
                                        u.state.showWizard || u.trackAction(T.Submit)
                                    }), [3, 9];
                                case 8:
                                    return d = r.sent(), l.j.error(d, "ReportUser Mutation failed."), this.setState({
                                        submitStatus: N.b.MutationError
                                    }), [3, 9];
                                case 9:
                                    return [2]
                            }
                        })
                    })
                }, n.handleChildError = function(e) {
                    return n.setState({
                        submitStatus: e
                    })
                }, n.handleClose = function() {
                    n.props.onClose && n.props.onClose(n.state.submitStatus, n.state.userBlocked)
                }, n.onBlock = function() {
                    n.props.blockUserMutation(n.props.reportContext.targetUserID, void 0, void 0, r.__assign({}, n.props.sessionUser, {
                        __typename: "User"
                    })), n.setState({
                        userBlocked: !0
                    })
                }, n.onUnblock = function() {
                    n.props.unblockUserMutation(n.props.reportContext.targetUserID, r.__assign({}, n.props.sessionUser, {
                        __typename: "User"
                    })), n.setState({
                        userBlocked: !1
                    })
                }, n.trackOpen = function(e) {
                    n.state.openEventSent || (n.state.showWizard ? n.trackWizardAction(w.Open, void 0, e) : n.trackAction(T.Open), n.setState({
                        openEventSent: !0
                    }))
                }, n.trackClose = function(e, t) {
                    n.state.closeEventSent || (n.state.showWizard ? n.trackWizardAction(w.Close, t, void 0, e) : n.trackAction(T.Close), n.setState({
                        closeEventSent: !0
                    }))
                }, n.trackWizardAction = function(e, t, i, r) {
                    l.o.tracking.track(h.SpadeEventType.ReportWizardFlowAction, {
                        ui_context: n.props.reportContext.contentType,
                        target_user_id: n.props.reportContext.targetUserID,
                        report_sent: n.state.submitStatus === N.b.Success,
                        modal_type: "wizard_v1",
                        extra_user_id: n.props.reportContext.additionalTrackingID,
                        action: e,
                        close_type: r,
                        report_session_id: n.reportID,
                        current_step: t,
                        navigated_to: i
                    })
                }, n.trackAction = function(e) {
                    l.o.tracking.track(h.SpadeEventType.ReportFlowAction, {
                        ui_context: n.props.reportContext.contentType,
                        target_user_id: n.props.reportContext.targetUserID,
                        report_sent: n.state.submitStatus === N.b.Success,
                        extra_user_id: n.props.reportContext.additionalTrackingID,
                        action: e,
                        report_session_id: n.reportID
                    })
                }, n.reportID = Object(m.a)();
                var i = l.o.experiments.getAssignment("TWILIGHT_NEW_REPORTING_WIZARD");
                return n.state = {
                    submitStatus: N.b.Unsubmitted,
                    showWizard: "yes" === i,
                    openEventSent: !1,
                    closeEventSent: !1,
                    userBlocked: !1
                }, n
            }
            return r.__extends(t, e), t.prototype.componentDidMount = function() {
                this.trackOpen()
            }, t.prototype.componentWillUnmount = function() {
                this.handleClose(), this.state.showWizard || this.trackClose()
            }, t.prototype.render = function() {
                var e = {
                    onClose: this.handleClose,
                    onError: this.handleChildError,
                    onSubmit: this.handleSubmit,
                    reportContentType: this.props.reportContext.contentType,
                    submitStatus: this.state.submitStatus,
                    targetUserID: this.props.reportContext.targetUserID,
                    title: this.props.title,
                    defaultDescription: this.props.defaultDescription
                };
                return this.state.showWizard ? this.props.data.loading ? a.createElement(g._10, null) : a.createElement(ie, r.__assign({}, e, {
                    user: this.props.sessionUser,
                    targetUser: this.props.data.user,
                    onBlock: this.onBlock,
                    onUnblock: this.onUnblock,
                    trackAction: this.trackWizardAction,
                    trackClose: this.trackClose,
                    userBlocked: this.userBlocked
                })) : a.createElement(N.c, r.__assign({}, e))
            }, Object.defineProperty(t.prototype, "userBlocked", {
                get: function() {
                    var e = this;
                    return !(!this.props.data.currentUser.blockedUsers || !this.props.data.currentUser.blockedUsers.find(function(t) {
                        return !!t && t.id === e.props.reportContext.targetUserID
                    }))
                },
                enumerable: !0,
                configurable: !0
            }), t
        }(a.Component);
        var ce = Object(s.d)(Object(c.a)(ae, {
            name: "reportUserInCommunity"
        }), Object(c.a)(oe, {
            name: "reportUser"
        }), Object(c.a)(se, {
            options: function(e) {
                return {
                    variables: {
                        userId: e.reportContext.targetUserID
                    }
                }
            }
        }), Object(f.d)("ReportUser", {
            autoReportInteractive: !0
        }), Object(d.a)(), Object(u.a)(), Object(o.b)(function(e) {
            return {
                sessionUser: e.session.user
            }
        }, null))(le)
    },
    AGQo: function(e, t, n) {
        "use strict";
        var i, r = n("TToO"),
            a = n("GiK3");
        ! function(e) {
            e.PrimeTrackingButtonWrapper = "test_selector_prime_tracking_button_wrapper"
        }(i || (i = {}));
        var o = 200,
            s = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.hoverTimer = 0, t.onMouseEnter = function(e) {
                        t.clearTimeout(), t.hoverTimer = setTimeout(function() {
                            t.props.onHover && t.props.onHover(e)
                        }, o)
                    }, t.onMouseLeave = function() {
                        t.clearTimeout()
                    }, t.onClick = function(e) {
                        t.props.onClick && t.props.onClick(e), t.clearTimeout()
                    }, t.clearTimeout = function() {
                        t.hoverTimer && (clearTimeout(t.hoverTimer), t.hoverTimer = 0)
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentWillUnmount = function() {
                    this.clearTimeout()
                }, t.prototype.render = function() {
                    return a.createElement("div", {
                        "data-test-selector": i.PrimeTrackingButtonWrapper,
                        onMouseEnter: this.onMouseEnter,
                        onMouseLeave: this.onMouseLeave,
                        onClick: this.onClick
                    }, this.props.children)
                }, t
            }(a.Component);
        n.d(t, !1, function() {
            return i
        }), n.d(t, "a", function() {
            return s
        })
    },
    AckU: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            r = n("2KeS"),
            a = n("7enT"),
            o = n("cuT/");
        var s = Object(i.b)(function(e) {
            return {
                isExpanded: e.ui.rightColumnExpanded,
                fullscreenTheatreModeEnabled: e.ui.fullscreenTheatreModeEnabled,
                theatreModeEnabled: e.ui.theatreModeEnabled,
                sideNavExpanded: e.ui.sideNavExpanded
            }
        }, function(e) {
            return Object(r.b)({
                collapseRightColumn: a.q,
                expandRightColumn: a.x,
                collapseFullscreenRightColumn: a.p,
                expandFullscreenRightColumn: a.w
            }, e)
        })(o.b);
        n.d(t, "b", function() {
            return s
        }), n.d(t, "a", function() {
            return o.a
        })
    },
    Adn1: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "userCardFragment"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "bannerImageURL"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "description"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "displayName"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "login"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "profileImageURL"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "width"
                            },
                            value: {
                                kind: "IntValue",
                                value: "70"
                            }
                        }],
                        directives: []
                    }, {
                        kind: "FragmentSpread",
                        name: {
                            kind: "Name",
                            value: "followButtonFragment"
                        },
                        directives: []
                    }, {
                        kind: "FragmentSpread",
                        name: {
                            kind: "Name",
                            value: "friendButtonFragment"
                        },
                        directives: []
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 543
            }
        };
        i.loc.source = {
            body: '#import "twilight/common/queries/follow-button-fragment.gql"\n#import "twilight/features/friend-button/queries/friend-button-fragment.gql"\n# Queries the fields necessary to render a UserCard component.\n# NOTE(mikeche): We removed activity and availability from this query as they currently are not\n# implemented on the User type (they always return null). Blocked on FNP-467 in Jira.\nfragment userCardFragment on User {\nid\nbannerImageURL\ndescription\ndisplayName\nlogin\nprofileImageURL(width: 70)\n...followButtonFragment\n...friendButtonFragment\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var r = {};

        function a(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !r[t] && (r[t] = !0, !0)
            })
        }
        i.definitions = i.definitions.concat(a(n("onRC").definitions)), i.definitions = i.definitions.concat(a(n("HC5L").definitions)), e.exports = i
    },
    BC6Q: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            r = n("2KeS"),
            a = n("7enT"),
            o = n("Aj/L"),
            s = n("TToO"),
            l = n("GiK3"),
            c = n("F8kA"),
            d = n("6sO2"),
            u = n("HW6M"),
            p = n("AckU"),
            m = n("LiYP"),
            h = n("fc0G"),
            f = n("Tjmd"),
            g = n("Odds"),
            v = (n("KfGW"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        sideNavCollapsedByCSSBreakpoint: window.innerWidth < m.b
                    }, t.resizeAnimationFrame = 0, t.renderMiniTitle = function() {
                        return l.createElement(g._8, {
                            padding: {
                                y: .5,
                                right: .5
                            },
                            flexDirection: g.T.Row,
                            display: g.R.Flex,
                            alignItems: g.c.Center,
                            justifyContent: g._7.Between,
                            flexWrap: g.U.NoWrap,
                            className: "persistent-player__title",
                            zIndex: g._62.Above,
                            "data-test-selector": "persistent-player-mini-title"
                        }, l.createElement(g._8, {
                            ellipsis: !0,
                            margin: {
                                x: 1
                            }
                        }, l.createElement(g.Q, {
                            fontSize: g.V.Size5,
                            type: g._49.Span
                        }, t.props.options.miniPlayerTitle)), l.createElement(g._8, {
                            flexShrink: 0
                        }, l.createElement(g.w, {
                            ariaLabel: Object(d.d)("Dismiss Mini Player", "PersistentPlayerMini"),
                            icon: g._25.Close,
                            overlay: !0,
                            onClick: t.props.onClickDismiss,
                            "data-test-selector": "persistent-player-mini-dismiss"
                        })))
                    }, t.renderMiniHoverControls = function() {
                        var e = t.state.isPaused ? Object(d.d)("Play", "PersistentPlayerMini") : Object(d.d)("Pause", "PersistentPlayerMini");
                        return l.createElement(g._8, {
                            className: "persistent-player__hover-controls",
                            justifyContent: g._7.Center,
                            alignItems: g.c.Center,
                            display: g.R.Flex,
                            flexDirection: g.T.Row,
                            attachTop: !0,
                            attachBottom: !0,
                            attachLeft: !0,
                            attachRight: !0,
                            margin: {
                                top: 4
                            },
                            position: g._15.Absolute,
                            zIndex: g._62.Above,
                            "data-test-selector": "persistent-player-mini-hover"
                        }, t.renderMiniControl(g._25.MiniPlayerExpand, Object(d.d)("Expand Player", "PersistentPlayerMini"), "persistent-player-mini-expand", t.props.onClickExpand), l.createElement(g._8, {
                            margin: {
                                left: 2
                            }
                        }, t.renderMiniControl(t.state.isPaused ? g._25.MiniPlayerPlay : g._25.MiniPlayerPause, e, "persistent-player-mini-pause-play", t.togglePause)))
                    }, t.renderMiniControl = function(e, t, n, i) {
                        return l.createElement("button", {
                            className: "persistent-player__control",
                            onClick: i,
                            "aria-label": t,
                            "data-test-selector": n
                        }, l.createElement(g._24, {
                            asset: e,
                            width: 30,
                            height: 30
                        }))
                    }, t.renderMiniInterceptPointerView = function() {
                        return l.createElement(g._8, {
                            className: "persistent-player__intercept-view",
                            position: g._15.Absolute,
                            attachBottom: !0,
                            attachLeft: !0,
                            attachRight: !0,
                            zIndex: g._62.Above,
                            "data-test-selector": "persistent-player-mini-cover"
                        })
                    }, t.togglePause = function() {
                        t.setState(function(e) {
                            return {
                                shouldPause: !e.isPaused
                            }
                        })
                    }, t.onPauseToggled = function(e) {
                        t.setState({
                            isPaused: e,
                            shouldPause: e
                        })
                    }, t.collapseOnBreakpoint = function() {
                        var e = window.innerWidth;
                        e < m.b && !t.state.sideNavCollapsedByCSSBreakpoint ? t.setState({
                            sideNavCollapsedByCSSBreakpoint: !0
                        }) : e >= m.b && t.state.sideNavCollapsedByCSSBreakpoint && t.setState({
                            sideNavCollapsedByCSSBreakpoint: !1
                        }), t.resizeAnimationFrame = 0
                    }, t.handleWindowResize = function() {
                        t.resizeAnimationFrame || (t.resizeAnimationFrame = requestAnimationFrame(t.collapseOnBreakpoint))
                    }, t.handleLocationChange = function() {
                        t.props.theatreModeEnabled && t.props.disableTheatreMode()
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.props.location.pathname !== e.location.pathname && this.handleLocationChange(), Object(f.b)(this.props.options.playerProps, e.options.playerProps) && this.setState({
                        shouldPause: !1
                    })
                }, t.prototype.componentDidMount = function() {
                    window.addEventListener("resize", this.handleWindowResize)
                }, t.prototype.componentWillUnmount = function() {
                    this.handleLocationChange(), window.removeEventListener("resize", this.handleWindowResize), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame)
                }, t.prototype.render = function() {
                    var e, t = this.props.theatreModeEnabled && !this.props.mini,
                        n = u({
                            "persistent-player--theatre": t
                        }),
                        i = this.props.mainRef.getBoundingClientRect();
                    if (t) e = {
                        position: "fixed",
                        left: 0,
                        top: 0,
                        maxHeight: "100vh",
                        height: "100%",
                        width: window.innerWidth < 820 || this.props.rightNavCollapsed ? "100%" : "calc(100% - " + p.a + ")",
                        zIndex: 3e3
                    };
                    else if (this.props.mini) e = {
                        position: "fixed",
                        width: "26rem",
                        height: "18.6rem",
                        left: i.left,
                        bottom: 0,
                        margin: "1rem",
                        zIndex: 1e3
                    };
                    else {
                        var r = this.props.contentRef.getBoundingClientRect(),
                            a = r.left - i.left,
                            o = i.right - r.right;
                        e = {
                            top: r.top - i.top,
                            left: a,
                            position: "absolute",
                            width: "100%",
                            maxWidth: "calc(100% - " + (a + o) + "px)",
                            maxHeight: "calc(100vh - 16rem)",
                            overflow: "hidden",
                            height: "auto"
                        }
                    }
                    return l.createElement("div", {
                        className: u("persistent-player", n),
                        style: e
                    }, this.props.mini && this.renderMiniTitle(), l.createElement(g.k, null, l.createElement(h.c, s.__assign({}, this.props.options.playerProps, {
                        instanceRef: this.props.onVideoPlayerInstance,
                        miniModeEnabled: this.props.mini,
                        paused: this.state.shouldPause,
                        onPauseToggled: this.onPauseToggled
                    }))), this.props.mini && this.renderMiniInterceptPointerView(), this.props.mini && this.renderMiniHoverControls())
                }, t
            }(l.Component)),
            b = Object(c.f)(v);
        var k, y, _ = Object(i.b)(function(e) {
            return {
                sideNavCollapsed: !e.ui.sideNavExpanded,
                rightNavCollapsed: !e.ui.rightColumnExpanded,
                theatreModeEnabled: e.ui.theatreModeEnabled
            }
        }, function(e) {
            return Object(r.b)({
                disableTheatreMode: a.t
            }, e)
        })(b);
        ! function(e) {
            e.CloseMini = "close", e.OpenMini = "open", e.ExpandPlayer = "expand", e.ContentChange = "content_change"
        }(k || (k = {})),
        function(e) {
            e.Minimize = "minimize", e.Maximize = "maximize", e.UserMinimize = "user_minimize", e.UserMaximize = "user_maximize"
        }(y || (y = {}));
        var S, E = n("/Vp/"),
            C = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.logger = d.j.withCategory("PersistentPlayerRoot"), n.trackMiniPlayerAction = function(e, t) {
                        n.videoPlayerComponent && n.videoPlayerComponent.trackMiniPlayerAction(e, t)
                    }, n.setVideoPlayerRef = function(e) {
                        return n.videoPlayerComponent = e
                    }, n.onClickExpand = function() {
                        n.state.options && (n.state.overrides && n.state.overrides.onMiniPlayerExpand ? n.state.overrides.onMiniPlayerExpand() : (n.props.history.push(n.state.options.miniPlayerContentRoute), n.trackMiniPlayerAction(k.ExpandPlayer, y.UserMaximize)))
                    }, n.onClickDismiss = function() {
                        n.state.options && (n.state.overrides && n.state.overrides.onMiniPlayerDismiss ? n.state.overrides.onMiniPlayerDismiss() : (n.destroyPlayer(), n.trackMiniPlayerAction(k.CloseMini, y.UserMinimize)))
                    }, n.onHistoryChange = function(e) {
                        var t = n.props.isLoggedIn,
                            i = Object(E.a)({
                                isLoggedIn: t,
                                location: e
                            });
                        i !== n.state.hideSideNav && n.setState({
                            hideSideNav: i
                        })
                    };
                    var i = t.isLoggedIn,
                        r = t.location;
                    return n.state = {
                        isError: !1,
                        mini: !1,
                        hideSideNav: Object(E.a)({
                            isLoggedIn: i,
                            location: r
                        })
                    }, S && n.logger.warn("attempting to create a second instance of the Persistent Player Root. There should only be one in <Root>, use <PersistentPlayerContent> instead."), S = n, n
                }
                return s.__extends(t, e), t.prototype.componentDidCatch = function(e, t) {
                    var n = this;
                    this.setState({
                        isError: !0
                    }, function() {
                        n.logger.error(e, "A unhandled exception occurred in the component hierarchy", {
                            info: t
                        })
                    })
                }, t.prototype.componentDidMount = function() {
                    this.historyUnlisten = d.o.history.listen(this.onHistoryChange)
                }, t.prototype.componentWillUnmount = function() {
                    this.historyUnlisten && this.historyUnlisten()
                }, t.prototype.render = function() {
                    return !this.state.isError && this.state.options && this.state.contentRef && this.props.mainRef ? l.createElement(_, {
                        options: this.state.options,
                        contentRef: this.state.contentRef,
                        mainRef: this.props.mainRef,
                        mini: this.state.mini,
                        hideSideNav: this.state.hideSideNav,
                        forceRender: this.state.forcePresentationRender,
                        onClickExpand: this.onClickExpand,
                        onClickDismiss: this.onClickDismiss,
                        onVideoPlayerInstance: this.setVideoPlayerRef
                    }) : null
                }, t.prototype.destroyPlayer = function(e) {
                    var t = this;
                    this.setState({
                        mini: !1,
                        options: void 0,
                        overrides: void 0,
                        contentRef: void 0
                    }, function() {
                        t.props.stopPersistingPlayer(), e && e()
                    })
                }, t.prototype.requestVideoContent = function(e) {
                    var t = this.state.options && this.state.options.playerProps;
                    Object(f.b)(t, e.options.playerProps) && this.trackMiniPlayerAction(k.ContentChange, ""), this.setState({
                        contentRef: e.ref,
                        options: e.options,
                        overrides: e.overrides
                    }, e.onCompletion)
                }, t.prototype.transitionToMiniPlayer = function(e) {
                    this.setState({
                        mini: !0
                    }), this.props.beginPersistingPlayer(), e && this.trackMiniPlayerAction(k.OpenMini, e)
                }, t.prototype.transitionToAnchoredPlayer = function(e) {
                    this.setState({
                        mini: !1
                    }), this.props.stopPersistingPlayer(), e && this.trackMiniPlayerAction(k.CloseMini, e)
                }, t.prototype.reposition = function() {
                    var e = this.state.forcePresentationRender;
                    this.setState({
                        forcePresentationRender: e ? e + 1 : 1
                    })
                }, t
            }(l.Component),
            N = Object(c.f)(C);
        var T = Object(i.b)(function(e) {
                return {
                    isLoggedIn: Object(o.d)(e)
                }
            }, function(e) {
                return Object(r.b)({
                    beginPersistingPlayer: a.o,
                    stopPersistingPlayer: a.z
                }, e)
            })(N),
            w = n("KSGD"),
            O = n("VAT8"),
            R = null,
            D = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        userHasDismissedContent: !1
                    }, n.logger = d.j.withCategory("PersistentPlayer"), n.setDomRef = function(e) {
                        return n.domRef = e
                    }, n.onMiniPlayerDismiss = function() {
                        n.transitionToAnchoredPlayer(y.UserMinimize), n.setState({
                            userHasDismissedContent: !0
                        })
                    }, n.onMiniPlayerExpand = function() {
                        n.context.scrollToTop()
                    }, n.getPersistentPlayerOverrides = function() {
                        return {
                            onMiniPlayerDismiss: n.onMiniPlayerDismiss,
                            onMiniPlayerExpand: n.onMiniPlayerExpand
                        }
                    }, R && n.logger.error(new Error, "there should only ever be one <PersistentPlayer> rendered at a time. Verify that no other component above or below this in the tree has rendered one as well."), R = n, n
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    S || this.logger.error(new Error, "No <PersistentPlayerRoot> found. Make sure it is mounted in the Root component"), this.unregister = this.context.registerReceiver(this), S.requestVideoContent({
                        ref: this.domRef,
                        options: this.props,
                        overrides: this.getPersistentPlayerOverrides(),
                        onCompletion: function() {
                            return e.transitionToAnchoredPlayer()
                        }
                    }), this.props.repositionPlayerRef && this.props.repositionPlayerRef(this.reposition)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    S.requestVideoContent({
                        ref: this.domRef,
                        options: e,
                        overrides: this.getPersistentPlayerOverrides()
                    }), e.repositionPlayerRef && e.repositionPlayerRef !== this.props.repositionPlayerRef && e.repositionPlayerRef(this.reposition)
                }, t.prototype.componentWillUnmount = function() {
                    var e = this;
                    if (this.unregister(), this.props.repositionPlayerRef && this.props.repositionPlayerRef(null), this.props.disablePersistenceOnUnmount || this.state.userHasDismissedContent || !this.props.persistentPlayerEnabled) return S.destroyPlayer(), void(R = null);
                    var t = this.props,
                        n = t.playerProps,
                        i = t.miniPlayerTitle,
                        r = t.miniPlayerContentRoute,
                        a = {
                            playerProps: {
                                channelLogin: n.channelLogin,
                                hostChannel: n.hostChannel,
                                collectionID: n.collectionID,
                                disableTheatreButton: n.disableTheatreButton,
                                nextVideoOffset: n.nextVideoOffset,
                                playerTypeOverride: n.playerTypeOverride,
                                vodID: n.vodID,
                                attachToWindow: n.attachToWindow
                            },
                            miniPlayerTitle: i,
                            miniPlayerContentRoute: r
                        };
                    S.requestVideoContent({
                        ref: this.domRef,
                        options: a,
                        onCompletion: function() {
                            return e.transitionToMiniPlayer(y.Minimize)
                        }
                    }), R = null
                }, t.prototype.render = function() {
                    return l.createElement(g._35, {
                        background: g.n.Alt2,
                        position: g._15.Absolute,
                        attachBottom: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        attachTop: !0,
                        refDelegate: this.setDomRef,
                        "data-target": "persistent-player-content",
                        className: Object(O.a)(this.props.theme)
                    })
                }, t.prototype.transitionToMiniPlayer = function(e) {
                    S.transitionToMiniPlayer(e)
                }, t.prototype.transitionToAnchoredPlayer = function(e) {
                    S.transitionToAnchoredPlayer(e)
                }, t.prototype.isMini = function() {
                    return S.state.mini
                }, t.prototype.checkVisible = function(e, t) {
                    var n = this.context.getScrollContent();
                    if (t && n) {
                        var i = this.domRef.getBoundingClientRect(),
                            r = n.getBoundingClientRect(),
                            a = i.top + i.height - r.top;
                        a <= 100 && this.props.persistentPlayerEnabled && !this.isMini() && !this.props.disablePersistenceOnScroll && !this.state.userHasDismissedContent && this.transitionToMiniPlayer(y.Minimize), a > 100 && (this.isMini() && this.transitionToAnchoredPlayer(y.Maximize), this.state.userHasDismissedContent && this.setState({
                            userHasDismissedContent: !1
                        }))
                    }
                }, t.prototype.reposition = function() {
                    S.reposition()
                }, t.contextTypes = {
                    registerReceiver: w.func,
                    getScrollContent: w.func,
                    scrollToTop: w.func
                }, t
            }(l.Component);
        var I = Object(i.b)(function(e) {
            return {
                theme: e.ui.theme,
                persistentPlayerEnabled: e.ui.persistentPlayerEnabled
            }
        })(D);
        n.d(t, "b", function() {
            return T
        }), n.d(t, "a", function() {
            return I
        }), n.d(t, !1, function() {
            return y
        })
    },
    BVQ1: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "SendWhisper"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SendWhisperInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "sendWhisper"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "content"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "content"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "emotes"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "emoteID"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "setID"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "from"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "to"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "from"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "sentAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "editedAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "deletedAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 191
            }
        };
        n.loc.source = {
            body: "mutation SendWhisper($input: SendWhisperInput!) {\nsendWhisper(input: $input) {\nmessage {\nid\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n}\n}\nfrom {\nid\n}\nsentAt\neditedAt\ndeletedAt\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Bir6: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")
        }
    },
    CF9R: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FollowedChannels"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "limit"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Int"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "cursor"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "sort"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "StreamSort"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "follows"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "limit"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "after"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "cursor"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "displayName"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "login"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "profileImageURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "70"
                                                            }
                                                        }],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "stream"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "title"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "viewersCount"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "game"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "lastBroadcast"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "game"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "pageInfo"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "hasNextPage"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "followedLiveUsers"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "limit"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "sort"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "sort"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "nodes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "login"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "profileImageURL"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "width"
                                                    },
                                                    value: {
                                                        kind: "IntValue",
                                                        value: "70"
                                                    }
                                                }],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "stream"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "title"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "viewersCount"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "game"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "type"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "lastBroadcast"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "game"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 521
            }
        };
        n.loc.source = {
            body: "query FollowedChannels($limit: Int $cursor: Cursor $sort: StreamSort) {\ncurrentUser {\nid\nfollows(first: $limit after: $cursor) {\nedges {\ncursor\nnode {\nid\ndisplayName\nlogin\nprofileImageURL(width: 70)\nstream {\nid\ntitle\nviewersCount\ngame {\nid\nname\n}\n}\nlastBroadcast {\nid\ngame {\nid\nname\n}\n}\n}\n}\npageInfo {\nhasNextPage\n}\n}\nfollowedLiveUsers(first: $limit sort: $sort) {\nnodes {\nid\ndisplayName\nlogin\nprofileImageURL(width: 70)\nstream {\nid\ntitle\nviewersCount\ngame {\nid\nname\n}\ntype\n}\nlastBroadcast {\nid\ngame {\nid\nname\n}\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    CFVp: function(e, t, n) {
        "use strict";
        t.a = function() {
            if (!l) {
                var e = [],
                    t = {};
                Object.keys(a).forEach(function(n) {
                    var i = d(n, a[n]);
                    e.push(i), t[n.toLowerCase()] = i
                }), l = {
                    orderedActions: e,
                    indexedActions: t
                }
            }
            return l
        }, t.b = function() {
            c || (c = function(e) {
                if (l) return l.indexedActions[e.toLowerCase()];
                return d(e, a[e])
            }("Cheer"));
            return c
        };
        var i = n("I89S"),
            r = n("3iBR"),
            a = {
                Cheer: r.d,
                Kreygasm: r.d,
                Kappa: r.d,
                Muxy: r.e,
                Streamlabs: r.e,
                SwiftRage: r.d,
                VoHiYo: r.d
            },
            o = ["LIGHT", "DARK"],
            s = [1, 1.5, 2, 3, 4],
            l = null;
        var c = null;

        function d(e, t) {
            var n = [i.a.Red, i.a.Blue, i.a.Green, i.a.Purple, i.a.Gray],
                r = new Map,
                a = [];
            if ("Cheer" === e) {
                var o = u(e, i.a.Yellow);
                r.set(i.a.Yellow, o), a.push(o)
            }
            return a.push.apply(a, n.map(function(t) {
                var n = u(e, t);
                return r.set(t, n), n
            })), {
                prefix: e,
                type: t,
                tiers: a,
                orderedTiers: a,
                indexedTiers: r
            }
        }

        function u(e, t) {
            for (var n = [], i = {}, a = 0, l = o; a < l.length; a++)
                for (var c = l[a], d = 0, u = s; d < u.length; d++) {
                    var m = u[d];
                    i[c] || (i[c] = {
                        animated: new Map,
                        static: new Map
                    });
                    var h = p(e, c, !0, t, m);
                    n.push(h), i[c].animated.set(m, h.url);
                    var f = p(e, c, !1, t, m);
                    n.push(f), i[c].static.set(m, f.url)
                }
            return {
                id: e + ";" + t,
                canCheer: t <= r.k,
                bits: t,
                color: r.f[t],
                images: n,
                indexedImages: i
            }
        }

        function p(e, t, n, i, r) {
            var a = n ? "gif" : "png";
            return {
                theme: t,
                isAnimated: n,
                dpiScale: r,
                url: "https://d3aqoihi2n8ty8.cloudfront.net/actions/" + e.toLowerCase() + "/" + t.toLowerCase() + "/" + (n ? "animated" : "static") + "/" + i + "/" + r + "." + a
            }
        }
    },
    CWW0: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("6sO2"),
            o = n("7vx8"),
            s = n("3iBR"),
            l = n("D0Fd"),
            c = n("+6x9"),
            d = n("Odds"),
            u = (n("vbMw"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(d._8, {
                        className: "insider-pass-full-skin-reward",
                        padding: {
                            x: 1
                        },
                        display: d.R.Flex,
                        flexDirection: d.T.Column
                    }, r.createElement("img", {
                        className: "insider-pass-full-skin-reward__image",
                        src: this.props.imageURL
                    }), r.createElement(d._8, {
                        textAlign: d._45.Center
                    }, r.createElement(d.Q, {
                        fontSize: d.V.Size4,
                        bold: !0
                    }, this.props.name)), r.createElement(d._8, {
                        textAlign: d._45.Center
                    }, r.createElement(d.Q, {
                        color: d.K.Alt2
                    }, this.props.subText)))
                }, t
            }(r.PureComponent)),
            p = n("E1ro"),
            m = n("n7Mz"),
            h = n("MTHJ"),
            f = (n("cyj3"), {
                McCree: s.c + "/owl-2017/global-rewards/full-skin/mccree.png",
                Moira: s.c + "/owl-2017/global-rewards/full-skin/moira.png",
                "Soldier: 76": s.c + "/owl-2017/global-rewards/full-skin/soldier-76.png"
            }),
            g = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this;
                    if (!this.props.data || this.props.data.loading) return r.createElement(d._10, null);
                    if (this.props.data && this.props.data.error) return null;
                    var t = [];
                    t = this.props.insiderPurchaseState === p.a.PrePurchase ? this.props.data.user.tournament.rewards.insider.heroSkins.map(function(e) {
                        return r.createElement("li", {
                            key: e.name
                        }, r.createElement(u, {
                            name: e.name,
                            subText: "OWL Skin",
                            imageURL: f[e.name]
                        }))
                    }) : this.props.data.user.tournament.rewards.insider.heroSkins.map(function(e) {
                        return r.createElement(d._2, {
                            padding: {
                                x: 3
                            },
                            key: e.name
                        }, r.createElement("li", null, r.createElement(d._8, {
                            className: "insider-pass-rewards__item",
                            margin: "auto"
                        }, r.createElement(l.a, {
                            imageURL: e.imageURL,
                            size: l.b.Large
                        }), r.createElement(d._8, {
                            display: d.R.Flex,
                            flexDirection: d.T.Column,
                            alignItems: d.c.Center,
                            padding: {
                                top: 1
                            }
                        }, r.createElement(d.Q, {
                            fontSize: d.V.Size4,
                            noWrap: !0,
                            bold: !0
                        }, e.name), r.createElement(d.Q, {
                            noWrap: !0,
                            color: d.K.Alt2
                        }, e.description)))))
                    });
                    var n = this.props.data.user.tournament.rewards.insider.inGameContent.map(function(t) {
                            return r.createElement(d._2, {
                                "data-test-selector": "in-game-content-selector",
                                padding: {
                                    x: 3
                                },
                                key: t.name
                            }, r.createElement("li", null, r.createElement(d._8, {
                                className: "insider-pass-rewards__item",
                                textAlign: d._45.Center
                            }, r.createElement(c.a, {
                                imageURL: t.imageURL,
                                size: c.c.Large,
                                borderType: e.props.insiderPurchaseState === p.a.PostPurchase ? c.b.Brand : c.b.Default,
                                noBorder: e.props.insiderPurchaseState === p.a.PrePurchase
                            }), r.createElement(d._8, {
                                display: d.R.Flex,
                                flexDirection: d.T.Column,
                                alignItems: d.c.Center,
                                padding: {
                                    top: 1
                                }
                            }, r.createElement(d.Q, {
                                fontSize: d.V.Size4,
                                noWrap: !0,
                                bold: !0
                            }, t.name)))))
                        }),
                        i = this.props.insiderPurchaseState === p.a.PostPurchase && this.props.blizzardRewardsAvailable,
                        o = this.props.data.user.tournament.rewards.insider,
                        h = o.heroSkins.concat(o.inGameContent).some(function(e) {
                            return e.canBeFulfilled
                        });
                    return r.createElement(d._8, {
                        className: "insider-pass-rewards",
                        display: d.R.Flex,
                        flexDirection: d.T.Column,
                        padding: {
                            y: 3
                        },
                        textAlign: d._45.Center
                    }, r.createElement(d.Q, {
                        fontSize: d.V.Size3,
                        bold: !0
                    }, Object(a.d)("Overwatch Content with the All-Access Pass", "EsportsInsiderRewards")), i && !h && r.createElement(d.Q, {
                        fontSize: d.V.Size4
                    }, Object(a.d)("All in-game rewards have been claimed to your Blizzard account", "EsportsInsiderRewards")), i && h && r.createElement(d._8, {
                        display: d.R.Flex,
                        flexDirection: d.T.Row,
                        flexWrap: d.U.Wrap,
                        justifyContent: d._7.Center,
                        padding: {
                            y: 1
                        }
                    }, r.createElement(m.a, {
                        tournamentID: this.props.data.user.tournament.id,
                        enabled: !0,
                        inGame: !0
                    })), !i && r.createElement(d.Q, {
                        fontSize: d.V.Size4
                    }, Object(a.d)("A Blizzard account link is required to redeem in-game rewards", "EsportsInsiderRewards")), r.createElement(d._2, {
                        display: d.R.Flex,
                        flexDirection: d.T.Row,
                        flexWrap: d.U.Wrap,
                        justifyContent: d._7.Center,
                        padding: {
                            bottom: 2
                        }
                    }, r.createElement("ul", null, t)), r.createElement(d._2, {
                        display: d.R.Flex,
                        flexDirection: d.T.Row,
                        flexWrap: d.U.Wrap,
                        justifyContent: d._7.Center,
                        padding: {
                            bottom: 2
                        }
                    }, r.createElement("ul", null, n)), this.props.insiderPurchaseState === p.a.PrePurchase && r.createElement(d._8, {
                        "data-test-selector": "many-more-selector",
                        padding: {
                            y: 3
                        }
                    }, r.createElement(d.Q, {
                        fontSize: d.V.Size4,
                        italic: !0,
                        color: d.K.Alt2
                    }, Object(a.d)("More game content coming with All-Access,", "EsportsInsiderRewards")), r.createElement(d.Q, {
                        fontSize: d.V.Size4,
                        italic: !0,
                        color: d.K.Alt2
                    }, Object(a.d)("tune in on 4/14 to learn more!", "EsportsInsiderRewards"))), r.createElement(d._8, {
                        display: d.R.Flex,
                        justifyContent: d._7.Center
                    }, r.createElement(d._35, {
                        className: "insider-pass-rewards__players-pack",
                        textAlign: d._45.Center,
                        margin: {
                            top: 3,
                            bottom: 5
                        },
                        padding: {
                            y: .5
                        },
                        breakpointLarge: {
                            padding: {
                                y: 1
                            }
                        },
                        breakpointExtraExtraLarge: {
                            padding: {
                                y: 2
                            }
                        },
                        background: d.n.Accent,
                        color: d.K.Overlay,
                        fullWidth: !0
                    }, r.createElement(d.N, {
                        className: "insider-pass-rewards__players-pack__logo",
                        src: s.c + "/owl-2017/all-access-logo.svg",
                        alt: Object(a.d)("Overwatch League All-Access Pass on Twitch", "EsportsInsiderRewards")
                    }), r.createElement(d._2, {
                        margin: {
                            top: .5
                        },
                        breakpointLarge: {
                            margin: {
                                top: 1
                            }
                        }
                    }, r.createElement(d.Q, {
                        className: "insider-pass-rewards__players-pack__title",
                        bold: !0,
                        transform: d._48.Uppercase
                    }, Object(a.d)("The Players Pack", "EsportsInsiderRewards"))), r.createElement(d.Q, {
                        fontSize: d.V.Size8,
                        breakpointLarge: {
                            fontSize: d.V.Size7
                        },
                        breakpointExtraLarge: {
                            fontSize: d.V.Size5
                        },
                        breakpointExtraExtraLarge: {
                            fontSize: d.V.Size4
                        },
                        bold: !0
                    }, Object(a.d)("12 Exclusive Overwatch League Away Skins", "EsportsInsiderRewards")), r.createElement(d.N, {
                        className: "insider-pass-rewards__players-pack__image",
                        src: s.c + "/owl-2017/players-pack.jpg",
                        alt: "The Players Pack Skins"
                    }), r.createElement(d.Q, {
                        fontSize: d.V.Size6,
                        breakpointLarge: {
                            fontSize: d.V.Size5
                        },
                        breakpointExtraLarge: {
                            fontSize: d.V.Size4
                        },
                        breakpointExtraExtraLarge: {
                            fontSize: d.V.Size3
                        },
                        bold: !0,
                        italic: !0
                    }, Object(a.d)("Coming this May, free with the All-Access Pass", "EsportsInsiderRewards")))))
                }, t = i.__decorate([Object(o.a)(h, {
                    options: function(e) {
                        return {
                            variables: {
                                channelID: e.channelID
                            }
                        }
                    }
                })], t)
            }(r.PureComponent);
        n.d(t, !1, function() {
            return "in-game-content-selector"
        }), n.d(t, !1, function() {
            return "many-more-selector"
        }), n.d(t, "a", function() {
            return g
        })
    },
    CwIZ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return l
        }), t.b = function(e) {
            return i.__awaiter(this, void 0, void 0, function() {
                var t, n, l, c, d, u, p, m, h, f, g, v, b;
                return i.__generator(this, function(i) {
                    switch (i.label) {
                        case 0:
                            t = r.n.getVideoPlayerTrackingData().vodID, n = !!t, l = {
                                channelID: e.channelID,
                                withVideo: !1
                            }, n && (l.withVideo = !0, l.videoID = t), c = null, i.label = 1;
                        case 1:
                            return i.trys.push([1, 3, , 4]), [4, r.o.apollo.client.query({
                                query: s,
                                variables: l
                            })];
                        case 2:
                            return c = i.sent(), [3, 4];
                        case 3:
                            return d = i.sent(), r.j.error(d, "Failed to make query for channel info in FollowEvent reporting.", {
                                channelID: e.channelID
                            }), [3, 4];
                        case 4:
                            return u = c && c.data && c.data.user || null, c && !u && r.j.error(new Error("GraphQL empty response"), "Query for channel info in SubEvent reporting returned no data.", {
                                channelID: e.channelID
                            }), p = null, c && n && ((m = c && c.data && c.data.video) ? p = Object(o.a)(m.broadcastType) : r.j.error(new Error("GraphQL empty response"), "Query for video info in SubEvent reporting returned no data.", {
                                currentVideoID: t
                            })), h = u && u.self, f = h ? !!h.subscriptionBenefit : null, g = h && h.subscriptionBenefit && h.subscriptionBenefit.purchasedWithPrime || !1, v = h ? h.canPrimeSubscribe : null, b = {
                                action: e.action,
                                can_subscribe: v,
                                channel: e.channelLogin,
                                channel_id: e.channelID,
                                checkout_button_tier: e.checkoutButtonTier,
                                has_sub_credit: e.hasSubCredit,
                                host_channel: e.hostChannelLogin,
                                host_channel_id: e.hostChannelID,
                                is_menu_open: e.isMenuOpen,
                                is_subscribed: f,
                                is_subscribed_current_tier: h && h.subscriptionBenefit && h.subscriptionBenefit.tier,
                                sub_location: e.sub_location,
                                sub_recipient: e.giftRecipient,
                                modal: e.modal,
                                modal_level: e.modalLevel || "",
                                show_prime_content: e.showPrimeContent,
                                show_resub: u ? v && g : null,
                                vod_id: t,
                                vod_type: p,
                                viewport_height: window.innerHeight,
                                viewport_width: window.innerWidth
                            }, r.n.track(a.SpadeEventType.Subscription, b), [2]
                    }
                })
            })
        };
        var i = n("TToO"),
            r = n("6sO2"),
            a = n("vH/s"),
            o = n("xrVp"),
            s = n("3QSP"),
            l = (n.n(s), {
                BuyGiftSub: "buy_gift_sub",
                ClickCheckout: "click_checkout_button",
                ClickMoreSubOptions: "more_options_click",
                ClickGiftSubOptions: "gift_options_click",
                ClickPrimeFAQ: "click_prime_faq",
                ClickSignupForPrime: "click_signup_for_prime",
                ClickBack: "back_top_level",
                CloseSubMenu: "close_subscribe_menu",
                GiftASub: "gift_a_sub",
                OpenSubMenu: "open_subscribe_menu",
                SubWithPrime: "samus_spend_credit"
            })
    },
    D0Fd: function(e, t, n) {
        "use strict";
        var i, r = n("TToO"),
            a = n("HW6M"),
            o = n("GiK3"),
            s = n("HM6l"),
            l = n("46tX"),
            c = n("Odds");
        n("w0LG");
        ! function(e) {
            e[e.Default = 0] = "Default", e[e.Small = 1] = "Small", e[e.Medium = 2] = "Medium", e[e.Large = 3] = "Large"
        }(i || (i = {}));
        var d = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return r.__extends(t, e), t.prototype.shouldComponentUpdate = function(e) {
                return this.props.isUnavailable !== e.isUnavailable || this.props.needsToCheerMore !== e.needsToCheerMore || this.props.comingSoon !== e.comingSoon || this.props.size !== e.size
            }, t.prototype.render = function() {
                var e, t, n = "esports-hexagon__mask--unavailable-" + Object(s.a)(),
                    r = "esports-hexagon__mask--cheer-more-" + Object(s.a)(),
                    d = "esports-hexagon__pattern--" + Object(s.a)();
                this.props.isUnavailable ? (e = "url(#" + n, t = "esports-hexagon__mask--unavailable") : this.props.needsToCheerMore && (e = "url(#" + r, t = "esports-hexagon__mask--cheer-more");
                var u = /Edge/.test(window.navigator.userAgent) ? 5 : Object(l.b)(window.navigator.userAgent) ? -25 : 0,
                    p = /Edge/.test(window.navigator.userAgent) ? -5 : Object(l.b)(window.navigator.userAgent) ? 8 : 5,
                    m = /Edge/.test(window.navigator.userAgent) ? 155 : 131,
                    h = /Edge/.test(window.navigator.userAgent) ? 90 : Object(l.b)(window.navigator.userAgent) ? 150 : 100,
                    f = Object(l.b)(window.navigator.userAgent) ? 150 : 131,
                    g = Object(l.b)(window.navigator.userAgent) ? 0 : 10,
                    v = a("esports-hexagon__svg", {
                        "esports-hexagon__svg--large": this.props.size === i.Large
                    }, {
                        "esports-hexagon__svg--small": this.props.size === i.Small
                    }, {
                        "esports-hexagon__svg--medium": this.props.size === i.Medium
                    }, {
                        "esports-hexagon__svg--small-blizzard": !this.props.comingSoon && this.props.size === i.Small
                    }),
                    b = a("esports-hexagon__svg--background", {
                        "esports-hexagon__svg--background-coming-soon": this.props.comingSoon
                    }),
                    k = a("esports-hexagon__svg--fill", {
                        "esports-hexagon__svg--fill-coming-soon": this.props.comingSoon
                    });
                return o.createElement(c._8, {
                    className: "esports-hexagon",
                    display: c.R.Flex,
                    flexDirection: c.T.Column
                }, o.createElement("svg", {
                    className: v,
                    viewBox: "5 0 90 131"
                }, o.createElement("defs", null, o.createElement("pattern", {
                    id: d,
                    patternUnits: "userSpaceOnUse",
                    width: "100",
                    height: f
                }, o.createElement("image", {
                    className: "esports-hexagon__image",
                    xlinkHref: this.props.imageURL,
                    x: u,
                    y: p,
                    width: h,
                    height: m
                })), o.createElement("filter", {
                    id: n
                }, o.createElement("feColorMatrix", {
                    type: "matrix",
                    values: "0.04 0 0 0 0 0 0.04 0 0 0 0 0 0.04 0 0 0 0 0 1 0"
                })), o.createElement("filter", {
                    id: r
                }, o.createElement("feColorMatrix", {
                    type: "matrix",
                    values: "0.12 0 0 0 0 0 0.04 0 0 0 0 0 0.68 0 0 0 0 0 1 0"
                }))), o.createElement("polygon", {
                    className: b,
                    points: "50,2 8.042394,26.558603 8,75 50,98 92,75 92,25",
                    stroke: "none",
                    strokeWidth: "1px",
                    transform: "translate(0, 31)"
                }), o.createElement("path", {
                    transform: "translate(0, 31)",
                    className: k,
                    d: "M49.9,99.1c-2.1,0-4.2-0.5-5.8-1.4L11.6,79c-3.3-2-5.9-6.4-5.9-10.2V31.3c0-3.8,2.6-8.3,5.9-10.2L44.2,2.4C45.8,1.5,47.8,1,50,1c2.2,0,4.3,0.5,5.8,1.4l32.5,18.7c3.3,1.9,5.9,6.5,5.7,10.3l0,37.4c0,3.8-2.6,8.3-5.9,10.2L55.8,97.7C54.1,98.6,52,99.1,49.9,99.1z M50,4c-1.7,0-3.2,0.4-4.4,1L13.1,23.7c-2.4,1.3-4.3,4.8-4.3,7.6v37.5c0,2.7,2,6.2,4.4,7.6l32.4,18.7c2.3,1.3,6.4,1.3,8.7,0l32.4-18.7c2.4-1.3,4.3-4.8,4.3-7.6V31.3c0.2-2.7-1.8-6.2-4.1-7.6l0,0L54.4,5C53.3,4.4,51.6,4,50,4z"
                }), !this.props.comingSoon && o.createElement("polygon", {
                    className: "esports-hexagon__svg--filtered-image",
                    "data-test-selector": t,
                    filter: e,
                    points: 0 + g + ",0 " + (100 - g) + ",0 " + (100 - g) + ",131 " + (0 + g) + ",131",
                    stroke: "none",
                    strokeWidth: "1px",
                    fill: "url(#" + d + ")"
                }), this.props.comingSoon && o.createElement("text", {
                    className: "esports-hexagon__svg--question-mark",
                    x: "38",
                    y: "97",
                    fontSize: "44",
                    fontWeight: "600"
                }, "?"), !this.props.comingSoon && (this.props.isUnavailable || this.props.needsToCheerMore) && o.createElement("path", {
                    className: "esports-hexagon__svg--lock",
                    transform: "translate(40, 70)",
                    fill: "white",
                    d: "M7.987 6.599C7.987 5.166 8.685 4 9.997 4c1.311 0 2.009 1.166 2.009 2.599v2.412H7.987V6.599zm7.256 2.412h-1.248V6.599C13.995 4.063 12.411 2 9.997 2S5.998 4.063 5.998 6.599v2.412H4.751c-.415 0-.751.359-.751.8v7.397c0 .442.336.8.751.8h10.492c.414 0 .751-.358.751-.8V9.811c0-.441-.337-.8-.751-.8z",
                    fillRule: "evenodd"
                })))
            }, t
        }(o.Component);
        n.d(t, !1, function() {
            return "esports-hexagon__mask--unavailable"
        }), n.d(t, !1, function() {
            return "esports-hexagon__mask--cheer-more"
        }), n.d(t, !1, function() {
            return "esports-hexagon__pattern"
        }), n.d(t, "b", function() {
            return i
        }), n.d(t, "a", function() {
            return d
        })
    },
    D3yV: function(e, t) {},
    DBTH: function(e, t, n) {
        "use strict";
        n.d(t, "f", function() {
            return s
        }), n.d(t, "e", function() {
            return l
        }), n.d(t, "g", function() {
            return c
        }), n.d(t, "i", function() {
            return d
        }), n.d(t, "j", function() {
            return u
        }), n.d(t, "h", function() {
            return p
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, "a", function() {
            return o
        }), n.d(t, "d", function() {
            return m
        }), n.d(t, "c", function() {
            return h
        }), n.d(t, "n", function() {
            return v
        }), n.d(t, "l", function() {
            return b
        }), n.d(t, "m", function() {
            return k
        }), n.d(t, "k", function() {
            return y
        }), n.d(t, "o", function() {
            return _
        });
        var i, r, a, o, s = "TWILIGHT_WEB_ONBOARDING_CATEGORIES",
            l = "TWILIGHT_WEB_ONBOARDING_CATEGORIES_ANON_FRONT_PAGE",
            c = "TWILIGHT_WEB_ONBOARDING_CHANNEL_RANKING",
            d = "TWILIGHT_WEB_ONBOARDING",
            u = "TWILIGHT_WEB_ONBOARDING_FOLLOW_CATEGORIES",
            p = "TWILIGHT_WEB_ONBOARDING_CHANNEL_SURFING";
        ! function(e) {
            e.NoSkip = "no_skip"
        }(i || (i = {})),
        function(e) {
            e.Yes = "yes"
        }(r || (r = {})),
        function(e) {
            e.Yes = "yes"
        }(a || (a = {})),
        function(e) {
            e.Games = "games", e.Streams = "streams"
        }(o || (o = {}));
        var m, h, f = new Set([o.Games.toString(), o.Streams.toString()]);
        ! function(e) {
            e.ENABLED = "enabled"
        }(m || (m = {})),
        function(e) {
            e.Chat = "chat", e.NoChat = "no_chat"
        }(h || (h = {}));
        var g = new Set([h.Chat.toString(), h.NoChat.toString()]),
            v = function(e) {
                return e === i.NoSkip
            },
            b = function(e, t) {
                return v(e) && t === r.Yes
            },
            k = function(e, t) {
                return v(e) && !!t && g.has(t)
            },
            y = function(e) {
                return !!e && f.has(e)
            },
            _ = function(e) {
                return e.getTime() >= S().getTime()
            },
            S = function() {
                return new Date((new Date).getTime() - 12096e5)
            }
    },
    DCOT: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            var n = s[e.threadID];
            if (n) {
                if (n.lastReadCursorID >= t) return;
                clearTimeout(n.timeoutHandle)
            }
            var l = setTimeout(function() {
                var t = i.__assign({
                    mutation: o
                }, Object(a.a)({
                    threadID: e.threadID,
                    lastReadMessageID: e.lastReadMessageID
                }), {
                    optimisticResponse: {
                        updateWhisperThread: {
                            thread: {
                                __typename: "WhisperThread",
                                id: e.threadID,
                                unreadMessagesCount: 0
                            },
                            __typename: "UpdateWhisperThreadPayload"
                        }
                    }
                });
                r.o.apollo.client.mutate(t), delete s[e.threadID]
            }, 250);
            s[e.threadID] = {
                timeoutHandle: l,
                lastReadCursorID: t
            }
        };
        var i = n("TToO"),
            r = n("6sO2"),
            a = n("oIkB"),
            o = n("EBeM"),
            s = (n.n(o), {})
    },
    "DMR/": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RecommendedChannels"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "first"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Int"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "recID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "language"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "recommendations"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "liveRecommendations"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "first"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "first"
                                                }
                                            }
                                        }, {
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "recRequestID"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "recID"
                                                }
                                            }
                                        }, {
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "language"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "language"
                                                }
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "generationID"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "responseID"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nodes"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "broadcaster"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "displayName"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "login"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "profileImageURL"
                                                                },
                                                                arguments: [{
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "width"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "70"
                                                                    }
                                                                }],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "game"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 315
            }
        };
        n.loc.source = {
            body: "query RecommendedChannels($first: Int $recID: String! $language: String!) {\ncurrentUser {\nid\nrecommendations {\nliveRecommendations (first: $first recRequestID: $recID language: $language) {\ngenerationID\nresponseID\nnodes {\nid\nbroadcaster {\nid\ndisplayName\nlogin\nprofileImageURL(width: 70)\n}\ngame {\nid\nname\n}\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Dbus: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ClaimAllRewards"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ClaimAllRewardsInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "claimAllRewards"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "domain"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "rewards"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "description"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isEntitled"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "canBeFulfilled"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 164
            }
        };
        n.loc.source = {
            body: "mutation ClaimAllRewards($input: ClaimAllRewardsInput!) {\nclaimAllRewards(input: $input) {\ndomain\nrewards {\nid\nname\ndescription\ntype\nisEntitled\ncanBeFulfilled\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "DgR+": function(e, t) {},
    Di3n: function(e, t) {},
    DquS: function(e, t) {},
    DtWM: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("6sO2"),
            o = (n("SX5d"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.logger = a.o.logger.withCategory("resize-detector"), t.onScroll = function() {
                        var e = t.container,
                            n = e.offsetWidth,
                            i = e.offsetHeight,
                            r = e.offsetLeft,
                            a = e.offsetTop;
                        t.logger.debug("Resize Detector -- onScroll"), n === t.width && i === t.height && a === t.top && r === t.left || (t.width = n, t.height = i, t.props.onResize(n, i, a, r)), t.reset()
                    }, t.setGrowDivRef = function(e) {
                        return t.growDiv = e
                    }, t.setGrowChildDivRef = function(e) {
                        return t.growChildDiv = e
                    }, t.setShrinkDivRef = function(e) {
                        return t.shrinkDiv = e
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement("div", {
                        className: "resize-detector"
                    }, r.createElement("div", {
                        className: "resize-detector",
                        ref: this.setGrowDivRef
                    }, r.createElement("div", {
                        className: "resize-detector__grow",
                        ref: this.setGrowChildDivRef
                    })), r.createElement("div", {
                        className: "resize-detector",
                        ref: this.setShrinkDivRef
                    }, r.createElement("div", {
                        className: "resize-detector__shrink"
                    })))
                }, t.prototype.componentDidMount = function() {
                    if (this.growDiv) {
                        this.growDiv.parentElement || this.logger.warn("growDiv.parentElement is undefined!"), this.container = this.growDiv.parentElement.parentElement;
                        var e = this.container.style.position;
                        "relative" !== e && "absolute" !== e && "fixed" !== e && "static" === window.getComputedStyle(this.container).getPropertyValue("position") && (this.container.style.position = "relative"), this.onScroll(), this.growDiv.addEventListener("scroll", this.onScroll), this.shrinkDiv.addEventListener("scroll", this.onScroll)
                    } else this.logger.warn("growDiv is undefined!")
                }, t.prototype.componentWillUnmount = function() {
                    this.growDiv.removeEventListener("scroll", this.onScroll), this.shrinkDiv.removeEventListener("scroll", this.onScroll)
                }, t.prototype.reset = function() {
                    var e = this.growDiv,
                        t = this.shrinkDiv,
                        n = this.growChildDiv.style;
                    n.width = "100000px", n.height = "100000px", e.scrollLeft = 1e5, e.scrollTop = 1e5, t.scrollLeft = 1e5, t.scrollTop = 1e5
                }, t
            }(r.Component));
        n.d(t, "a", function() {
            return o
        })
    },
    E1ro: function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.PostPurchase = "post-purchase", e.PrePurchase = "pre-purchase"
            }(i || (i = {}))
    },
    E9Qg: function(e, t, n) {
        e.exports = n.p + "assets/bg_glitch_pattern-34ca2e369aad1ed33b57f3d2d59c70eb.png"
    },
    EBeM: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Whispers_MarkThreadMessageRead"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateWhisperThreadInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "unreadMessagesCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 151
            }
        };
        n.loc.source = {
            body: "mutation Whispers_MarkThreadMessageRead($input: UpdateWhisperThreadInput!) {\nupdateWhisperThread(input: $input) {\nthread {\nid\nunreadMessagesCount\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "Ex+h": function(e, t, n) {
        "use strict";
        var i, r;
        n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return r
            }),
            function(e) {
                e.Playing = "PLAYING", e.Streaming = "BROADCASTING", e.Watching = "WATCHING"
            }(i || (i = {})),
            function(e) {
                e.Playing = "playing", e.Streaming = "broadcasting", e.Watching = "watching"
            }(r || (r = {}))
    },
    F1v6: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Prime_BlueBar_CurrentUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "stringIds"
                        }
                    },
                    type: {
                        kind: "ListType",
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "dateOverride"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Time"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hasPrime"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "primePromotions"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "ids"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "stringIds"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "dateOverride"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "dateOverride"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "text"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "externalURL"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isExternalLink"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "requestInfo"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "countryCode"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 231
            }
        };
        n.loc.source = {
            body: "query Prime_BlueBar_CurrentUser($stringIds: [ID!] $dateOverride: Time) {\ncurrentUser {\nid\nhasPrime\n}\nprimePromotions (ids: $stringIds dateOverride: $dateOverride) {\nid\ntext\nexternalURL\nisExternalLink\n}\nrequestInfo {\ncountryCode\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    FDYX: function(e, t, n) {
        "use strict";
        t.d = function(e) {
            return e.some(function(e) {
                return !!e.self && !!e.self.promotion
            })
        }, t.c = function(e) {
            return e.some(function(e) {
                return !!e.giftPromotion
            })
        }, t.a = function(e, t) {
            var n;
            t ? n = e.giftPromotion : e.self && (n = e.self.promotion);
            if (n) return n.newPrice;
            return e.price
        }, t.b = function(e, t) {
            var n;
            t ? n = e.giftPromotion : e.self && (n = e.self.promotion);
            if (n) return n.discountValue;
            return 0
        }
    },
    FLwB: function(e, t, n) {
        "use strict";
        t.f = function(e) {
            return u.debug("Updating activity", e), m = i.__assign({}, m, {
                activity: e
            }), f()
        }, t.e = function(e) {
            u.debug("Updating visibility", e),
                function(e) {
                    if (!Object(o.d)(r.o.store.getState())) return;
                    u.debug("Setting visibility on server", {
                        visibility: e
                    }), r.o.apollo.client.mutate({
                        mutation: l,
                        variables: {
                            input: {
                                visibility: e
                            }
                        }
                    }).then(function(e) {
                        u.debug("Visibility set", {
                            visibility: e.data.updateVisibility.user.availability
                        })
                    }, function(e) {
                        u.warn("Failed to update visibility.", e)
                    })
                }(e)
        }, t.c = h, t.b = function() {
            h(a.a.Online)
        }, t.d = function() {
            h(a.a.Idle)
        }, t.a = function() {
            u.debug("Clearing activity"), m = i.__assign({}, m, {
                activity: null
            }), f()
        }, t.g = function() {
            return i.__awaiter(this, void 0, void 0, function() {
                return i.__generator(this, function(e) {
                    switch (e.label) {
                        case 0:
                            u.debug("Clearing previous session"), m = {
                                sessionID: r.l.get(c, ""),
                                availability: a.a.Online,
                                activity: null
                            }, e.label = 1;
                        case 1:
                            return e.trys.push([1, 4, , 5]), [4, f()];
                        case 2:
                            return e.sent(), u.debug("Setting new session"), m = i.__assign({}, m, {
                                sessionID: r.o.session.tabID
                            }), t = r.o.session.tabID, r.l.set(c, t), [4, f()];
                        case 3:
                            return [2, e.sent()];
                        case 4:
                            return [2, e.sent()];
                        case 5:
                            return [2]
                    }
                    var t
                })
            })
        };
        var i = n("TToO"),
            r = n("6sO2"),
            a = n("l4QG"),
            o = n("Aj/L"),
            s = n("73jS"),
            l = (n.n(s), n("7LBo")),
            c = (n.n(l), "twilight.sessionID"),
            d = 0,
            u = r.j.withCategory("Session Status"),
            p = {
                sessionID: r.o.session.tabID,
                availability: "",
                activity: null
            },
            m = p;

        function h(e) {
            u.debug("Saving current availability", e), m = i.__assign({}, m, {
                availability: e
            })
        }

        function f() {
            return i.__awaiter(this, void 0, void 0, function() {
                return i.__generator(this, function(e) {
                    return Object(o.d)(r.o.store.getState()) ? (u.debug("Setting status on server", {
                        state: m
                    }), d && clearTimeout(d), [2, r.o.apollo.client.mutate({
                        mutation: s,
                        variables: {
                            input: m
                        }
                    }).then(function(e) {
                        u.debug("Status scheduled to be set again", {
                            seconds: e.data.setSessionStatus.setAgainInSeconds
                        }), d = setTimeout(f, 1e3 * e.data.setSessionStatus.setAgainInSeconds)
                    }, function(e) {
                        u.warn("Failed to update status. Trying again in 60 seconds.", e), d = setTimeout(f, 6e4)
                    })]) : [2]
                })
            })
        }
    },
    FVEF: function(e, t) {},
    FZFL: function(e, t) {},
    FroJ: function(e, t) {},
    GHQc: function(e, t) {},
    GfPd: function(e, t, n) {
        "use strict";
        var i, r = n("TToO"),
            a = n("HW6M"),
            o = n("GiK3"),
            s = n("NXs7"),
            l = n("VAT8"),
            c = n("Odds"),
            d = (n("Z+Fq"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    var e, t = ((e = {})[Object(l.c)(s.a.Dark)] = this.props.forceDarkTheme, e);
                    return o.createElement(c._8, {
                        className: a("rich-content-tooltip", t)
                    }, this.props.children, o.createElement(c.q, {
                        show: this.props.show,
                        direction: this.props.balloonDirection || c.r.Right,
                        tailOffset: this.props.balloonDirection !== c.r.RightCenter ? 16 : 0
                    }, o.createElement("div", {
                        ref: this.props.refCallback,
                        className: "rich-content-tooltip__pointer-target"
                    }, o.createElement(c._8, {
                        padding: .5
                    }, this.props.content))))
                }, t
            }(o.Component)),
            u = n("6sO2"),
            p = (n("1Krm"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        isError: !1,
                        options: null,
                        richOptions: null,
                        hovering: !1
                    }, n.logger = u.o.logger.withCategory("tooltip-layer"), n.clearTimeoutAndRun = function(e, t) {
                        void 0 === t && (t = 0), n.displayTimeout && (clearTimeout(n.displayTimeout), n.displayTimeout = 0), n.displayTimeout = setTimeout(function() {
                            e(), n.displayTimeout = 0
                        }, t)
                    }, n.setRef = function(e) {
                        n.removeEventListeners(), n.addEventListeners(e), n.ref = e
                    }, n.addEventListeners = function(e) {
                        e && (e.addEventListener("mouseenter", n.handleMouseEnter), e.addEventListener("mouseleave", n.handleMouseLeave), e.addEventListener("click", n.handleMouseClick))
                    }, n.removeEventListeners = function() {
                        n.ref && (n.ref.removeEventListener("mouseenter", n.handleMouseEnter), n.ref.removeEventListener("mouseleave", n.handleMouseLeave), n.ref.removeEventListener("click", n.handleMouseClick))
                    }, n.handleMouseEnter = function() {
                        n.setState({
                            hovering: !0
                        })
                    }, n.handleMouseLeave = function() {
                        n.setState({
                            hovering: !1
                        }, function() {
                            n.displayTimeout || n.hideTooltip()
                        })
                    }, n.handleMouseClick = function() {
                        n.setState({
                            hovering: !1
                        }, function() {
                            n.hideTooltip(!0)
                        })
                    }, i = n, n
                }
                return r.__extends(t, e), t.prototype.componentDidCatch = function(e, t) {
                    var n = this;
                    this.setState({
                        isError: !0
                    }, function() {
                        n.logger.error(e, "A unhandled exception occurred in the component hierarchy", {
                            info: t
                        })
                    })
                }, t.prototype.render = function() {
                    if (this.state.isError) return null;
                    var e = this.state.options && this.state.options.from || this.state.richOptions && this.state.richOptions.from;
                    if (!e) return null;
                    var t = this.state.richOptions ? 2 : 0,
                        n = e.getBoundingClientRect(),
                        i = {
                            left: n.left,
                            top: n.top,
                            width: n.width + t,
                            height: n.height
                        },
                        r = o.createElement("div", {
                            style: {
                                width: i.width,
                                height: i.height
                            }
                        }),
                        a = null;
                    return this.state.options ? a = o.createElement(c._52, {
                        direction: this.state.options.direction,
                        align: this.state.options.align,
                        label: this.state.options.label,
                        show: !0
                    }, r) : this.state.richOptions && (a = o.createElement(d, {
                        content: this.state.richOptions.richContent,
                        refCallback: this.state.richOptions.allowHover && this.setRef || void 0,
                        forceDarkTheme: this.state.richOptions.forceDarkTheme,
                        balloonDirection: this.state.richOptions.balloonDirection,
                        show: !0
                    }, r)), o.createElement("div", {
                        className: "tooltip-layer",
                        style: i
                    }, a)
                }, t.prototype.showTooltip = function(e) {
                    var t = this;
                    this.clearTimeoutAndRun(function() {
                        t.setState({
                            options: e,
                            richOptions: null
                        })
                    }), this.hoverTimeout && (clearTimeout(this.hoverTimeout), this.hoverTimeout = 0)
                }, t.prototype.showRichTooltip = function(e) {
                    var t = this;
                    this.clearTimeoutAndRun(function() {
                        t.setState({
                            richOptions: e,
                            options: null
                        })
                    }, e && e.delayOpenMS && !this.hoverTimeout ? e.delayOpenMS : 0), this.hoverTimeout && (clearTimeout(this.hoverTimeout), this.hoverTimeout = 0)
                }, t.prototype.hideTooltip = function(e) {
                    var t = this;
                    e || this.state.hovering || this.displayTimeout || (this.hoverTimeout = setTimeout(function() {
                        clearTimeout(t.hoverTimeout), t.hoverTimeout = 0
                    }, 1e3)), this.clearTimeoutAndRun(function() {
                        t.state.hovering || t.setState({
                            options: null,
                            richOptions: null
                        })
                    }, !e && this.state.richOptions && this.state.richOptions.allowHover ? 400 : 0)
                }, t
            }(o.Component));

        function m() {
            return function(e) {
                return function(t) {
                    function n() {
                        var e = null !== t && t.apply(this, arguments) || this;
                        return e.logger = u.j.withCategory("TooltipLayer"), e.show = function(t) {
                            i ? i.showTooltip(t) : e.logger.error(new Error, "Attempted to show a tooltip in the global layer, but the global layer was not mounted.")
                        }, e.showRich = function(t) {
                            i ? i.showRichTooltip(t) : e.logger.error(new Error, "Attempted to show a tooltip in the global layer, but the global layer was not mounted.")
                        }, e.hide = function() {
                            i ? i.hideTooltip() : e.logger.error(new Error, "Attempted to show a tooltip in the global layer, but the global layer was not mounted.")
                        }, e
                    }
                    return r.__extends(n, t), n.prototype.render = function() {
                        var t = {
                            tooltipLayer: {
                                show: this.show,
                                showRich: this.showRich,
                                hide: this.hide
                            }
                        };
                        return o.createElement(e, r.__assign({}, this.props, t))
                    }, n
                }(o.Component)
            }
        }
        n.d(t, "a", function() {
            return d
        }), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "c", function() {
            return m
        }), n.d(t, "b", function() {
            return p
        }), n.d(t, !1, function() {})
    },
    GtMZ: function(e, t) {},
    GxF8: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "WhisperThread_ReportUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportWhisperThreadInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "reportWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 125
            }
        };
        n.loc.source = {
            body: "mutation WhisperThread_ReportUser($input: ReportWhisperThreadInput!) {\nreportWhisperThread(input: $input) {\nthread {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "H+d0": function(e, t, n) {
        "use strict";
        var i, r = n("TToO"),
            a = n("GiK3"),
            o = n("6sO2"),
            s = n("iOr9"),
            l = n("bZTi");
        ! function(e) {
            e.ENABLED = "enabled", e.CONTROL = "control"
        }(i || (i = {}));
        var c = function() {
            var e, t = {
                name: "TWILIGHT_GROWTH_EMAIL_VERIFY_BAR",
                assignments: (e = {
                    fallback: function() {
                        return null
                    }
                }, e[i.ENABLED] = function() {
                    return l.a.wrap(function() {
                        return n.e(75).then(n.bind(null, "CNsG"))
                    }, "VerifyEmailBar", {
                        failSilently: !0,
                        placeholder: null
                    })({})
                }, e),
                loader: function() {
                    return null
                }
            };
            return "en" === o.o.intl.getLanguageCode() ? a.createElement(s.a, r.__assign({}, t)) : a.createElement("span", null)
        };
        n.d(t, !1, function() {
            return "TWILIGHT_GROWTH_EMAIL_VERIFY_BAR"
        }), n.d(t, "a", function() {
            return c
        })
    },
    H9qc: function(e, t) {},
    HC5L: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "friendButtonFragment"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "self"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "friendship"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "__typename"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 148
            }
        };
        n.loc.source = {
            body: "# Queries the fields necessary to render the FriendButton component.\nfragment friendButtonFragment on User {\nid\nself {\nfriendship {\n__typename\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "HTB+": function(e, t) {},
    HZww: function(e, t, n) {
        "use strict";
        t.c = function(e) {
            return r.PubsubTopic.BroadcastSettingsUpdate + "." + e
        }, t.e = function(e) {
            return r.PubsubTopic.ChatRoom + "." + e
        }, t.f = function(e) {
            return r.PubsubTopic.ChatRoomsChannel + "." + e
        }, t.g = function(e) {
            return r.PubsubTopic.ChatRoomsUser + "." + e
        }, t.A = function(e) {
            return r.PubsubTopic.VideoThumbnailProcessing + "." + e
        }, t.j = function(e) {
            return r.PubsubTopic.ImageUpload + "." + e
        }, t.t = function(e) {
            return r.PubsubTopic.UploadService + "." + e
        }, t.z = function(e) {
            return r.PubsubTopic.VideoPlaybackById + "." + e
        }, t.m = function(e) {
            return r.PubsubTopic.PayoutOnboardingEvents + "." + e
        }, t.n = function(e) {
            return r.PubsubTopic.Presence + "." + e
        }, t.k = function(e, t) {
            return r.PubsubTopic.ModerationActionsByUserAndChannel + "." + e + "." + t
        }, t.o = function(e) {
            return r.PubsubTopic.Raid + "." + e
        }, t.p = function(e) {
            return r.PubsubTopic.StreamChange + "." + e
        }, t.h = function(e) {
            return r.PubsubTopic.Friendship + "." + e
        }, t.b = function(e) {
            return r.PubsubTopic.ChannelBitsPinEvents + "." + e
        }, t.a = function(e) {
            return r.PubsubTopic.BitsLeaderboardEvents + "." + e.id
        }, t.u = function(e) {
            return r.PubsubTopic.UserBitsUpdates + "." + e
        }, t.y = function(e) {
            return r.PubsubTopic.UserSubscribeEvents + "." + e
        }, t.x = function(e) {
            return r.PubsubTopic.UserCrateEvents + "." + e
        }, t.i = function(e) {
            return r.PubsubTopic.CampaignGlobalEvents + "." + e
        }, t.v = function(e) {
            return r.PubsubTopic.CampaignUserEvents + "." + e
        }, t.w = function(e) {
            return r.PubsubTopic.UserCommerceEvents + "." + e
        }, t.B = function(e) {
            return r.PubsubTopic.Whispers + "." + e
        }, t.l = function(e) {
            return r.PubsubTopic.OnsiteNotifications + "." + e
        }, t.q = function(e) {
            return r.PubsubTopic.StreamChatRoom + "." + e
        }, t.d = function(e) {
            return r.PubsubTopic.ChannelEventUpdates + "." + e
        }, t.s = function(e) {
            return i.k.subscribe({
                topic: e.topic,
                onMessage: function(t) {
                    t.type && !e.type && !e.types || t.type && e.type && t.type !== e.type || t.type && e.types && !e.types.includes(t.type) || Object(a.e)(e.query, e.variables, function(n) {
                        return e.mutator(t, n)
                    }, function(n) {
                        return !!e.skipMessage && e.skipMessage(t, n)
                    })
                }
            })
        }, t.r = function(e) {
            return i.k.subscribe({
                topic: e.topic,
                onMessage: function(t) {
                    t.type && t.type !== e.type || Object(a.d)({
                        fragment: e.fragment,
                        id: e.id,
                        mutator: function(n) {
                            return e.mutator(t, n)
                        }
                    })
                }
            })
        };
        var i = n("6sO2"),
            r = n("aMxy"),
            a = n("oIkB")
    },
    Hcc4: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FollowedChannels_CurrentUser_FollowedVideos"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "videoTypes"
                        }
                    },
                    type: {
                        kind: "ListType",
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "BroadcastType"
                                }
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "followedVideos"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "100"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "types"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "videoTypes"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "title"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "viewCount"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "publishedAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "previewThumbnailURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "126"
                                                            }
                                                        }, {
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "height"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "71"
                                                            }
                                                        }],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "owner"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "displayName"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "self"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "viewingHistory"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "position"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 308
            }
        };
        n.loc.source = {
            body: "query FollowedChannels_CurrentUser_FollowedVideos($videoTypes: [BroadcastType!]) {\ncurrentUser {\nid\nfollowedVideos(first: 100 types: $videoTypes) {\nedges {\nnode {\nid\ntitle\nviewCount\npublishedAt\npreviewThumbnailURL(width: 126 height: 71)\nowner {\nid\ndisplayName\n}\nself {\nviewingHistory {\nposition\n}\n}\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Hjbq: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.b = function(e) {
            return {
                type: i,
                playerRefID: e
            }
        };
        var i = "video-player.VIDEO_PLAYER_INSTANCE_STARTED"
    },
    Hs3O: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return r
        }), n.d(t, "a", function() {
            return a
        }), n.d(t, "c", function() {
            return o
        }), t.d = function(e, t) {
            var n = i.b.get(s, "https://twitch.amazon.com/prime"),
                r = "";
            try {
                r = btoa(t)
            } catch (e) {
                l.error(e, "Could not decode location pathname substring for redirect")
            }
            return r ? n + "?ref_=" + e + "&redirectRoute=" + r : n + "?ref_=" + e
        };
        var i = n("6sO2"),
            r = "sm_tw_tup_ntp_t_all",
            a = "sm_tw_thp_blue_t_all",
            o = "sm_w_tup_ntp_t_c",
            s = "prime_landing_page_base_url",
            l = i.j.withCategory("PrimeUtilsLogger")
    },
    I4TS: function(e, t) {},
    I89S: function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e[e.Gray = 1] = "Gray", e[e.Purple = 100] = "Purple", e[e.Green = 1e3] = "Green", e[e.Blue = 5e3] = "Blue", e[e.Red = 1e4] = "Red", e[e.Yellow = 1e5] = "Yellow"
            }(i || (i = {}))
    },
    IRHd: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_TargetReportUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userId"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userId"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "blockedUsers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 132
            }
        };
        n.loc.source = {
            body: "query ReportUserModal_TargetReportUser($userId: ID!) {\nuser(id: $userId) {\nid\ndisplayName\n}\ncurrentUser {\nid\nblockedUsers {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    IfJQ: function(e, t) {},
    Iv9R: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Whispers_Thread_Participants"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetUserID"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "blockedUsers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "chatColor"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "friends"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "availability"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "activity"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "type"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Playing"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "game"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Streaming"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "stream"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "game"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "name"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Watching"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "user"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "displayName"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "login"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "hosting"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "displayName"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetUserID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "title"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "imageURL"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "chatColor"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 503
            }
        };
        n.loc.source = {
            body: "query Whispers_Thread_Participants($targetUserID: ID) {\ncurrentUser {\nid\nblockedUsers {\nid\n}\nchatColor\ndisplayName\nprofileImageURL(width: 70)\nlogin\nfriends {\nedges {\nnode {\nid\n}\navailability\nactivity {\ntype\n... on Playing {\ngame {\nid\nname\n}\n}\n... on Streaming {\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n... on Watching {\nuser {\nid\ndisplayName\nlogin\nhosting {\nid\ndisplayName\n}\n}\n}\n}\n}\n}\n}\nuser(id: $targetUserID) {\nid\ndisplayBadges {\nid\ntitle\nimageURL\n}\nchatColor\ndisplayName\nprofileImageURL(width: 70)\nlogin\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    JhPt: function(e, t) {},
    JpYe: function(e, t, n) {
        "use strict";
        t.e = function(e, t, n, r) {
            var o = r || l(t),
                d = "";
            o && (d = "?sort=" + function(e) {
                switch (e) {
                    case s.b:
                        return i.Popular;
                    case s.a:
                        return i.Newest;
                    default:
                        var t = e;
                        return t
                }
            }(o));
            var u = n ? n.toLowerCase() : function(e) {
                var t = c(e);
                return t ? t.toLowerCase() : "all"
            }(t);
            a.o.history.push(e + "/" + u + d)
        }, t.d = l, t.c = c, t.a = function(e) {
            var t = r.parse(e.location.search);
            return e.match.params.collectionID || t.collection || ""
        }, t.f = d, t.b = function(e) {
            if ("" === e) return "";
            if (e.startsWith("v")) return e;
            return "v" + e
        };
        var i, r = n("OAwv"),
            a = (n.n(r), n("6sO2")),
            o = n("6WAQ"),
            s = n("3yQz");

        function l(e) {
            return d(r.parse(e.location.search).sort || "")
        }

        function c(e) {
            switch (e.match.params.filter) {
                case o.a.Archive.toLowerCase():
                    return o.a.Archive;
                case o.a.Highlight.toLowerCase():
                    return o.a.Highlight;
                case o.a.Upload.toLowerCase():
                    return o.a.Upload;
                case o.a.PastPremiere.toLowerCase():
                    return o.a.PastPremiere;
                default:
                    return
            }
        }

        function d(e) {
            switch (e.toUpperCase()) {
                case s.b:
                    return s.b;
                case s.a:
                    return s.a;
                default:
                    return null
            }
        }! function(e) {
            e.Popular = "views", e.Newest = "time"
        }(i || (i = {}))
    },
    K1Jg: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Presence_WatchingClick_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hosting"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "stream"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "game"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 158
            }
        };
        n.loc.source = {
            body: "query Presence_WatchingClick_User($login: String!) {\nuser(login: $login) {\nid\nstream {\nid\ngame {\nid\nname\n}\n}\nhosting {\nid\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    KJtg: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "UnblockUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnblockUserInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "unblockUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "targetUser"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 100
            }
        };
        n.loc.source = {
            body: "mutation UnblockUser($input: UnblockUserInput!) {\nunblockUser(input: $input) {\ntargetUser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Kckk: function(e, t, n) {
        "use strict";
        n.d(t, "d", function() {
            return d
        }), n.d(t, "c", function() {
            return i
        }), n.d(t, "b", function() {
            return p
        }), n.d(t, "f", function() {
            return m
        }), n.d(t, "a", function() {
            return u
        }), n.d(t, "i", function() {
            return h
        }), n.d(t, "g", function() {
            return f
        }), n.d(t, "h", function() {
            return g
        }), n.d(t, "l", function() {
            return v
        }), n.d(t, "n", function() {
            return b
        }), n.d(t, "m", function() {
            return y
        }), n.d(t, "e", function() {
            return _
        }), n.d(t, "k", function() {
            return S
        }), n.d(t, "j", function() {
            return E
        });
        var i, r = n("HW6M"),
            a = (n.n(r), n("OAwv")),
            o = (n.n(a), n("GiK3")),
            s = (n.n(o), n("F8kA")),
            l = n("6sO2"),
            c = n("S1vB"),
            d = {
                DIRECT_ENTITLEMENT: "DIRECT_ENTITLEMENT",
                CLAIM_CODE: "CLAIM_CODE",
                EXTERNAL_OFFER: "EXTERNAL_OFFER"
            };
        ! function(e) {
            e.Vertical = "Vertical", e.Horizontal = "Horizontal", e.Default = "Vertical"
        }(i || (i = {}));
        var u, p = {
                UNKNOWN_ERROR: "UNKNOWN_ERROR",
                OFFER_ALREADY_CLAIMED: "OFFER_ALREADY_CLAIMED",
                UNABLE_TO_SPEND: "UNABLE_TO_SPEND",
                TOO_MANY_RECENT_SPENDS: "TOO_MANY_RECENT_SPENDS"
            },
            m = function(e) {
                switch (e || p.UNKNOWN_ERROR) {
                    case p.OFFER_ALREADY_CLAIMED:
                        return Object(l.d)("Oh no! Unable to claim. Another linked Twitch account may have already claimed this content. Click {learnMoreLink}.", {
                            learnMoreLink: o.createElement(s.a, {
                                to: "https://help.twitch.tv/customer/portal/articles/2572060-twitch-prime-guide#MultipleAccounts",
                                target: "_blank",
                                className: "prime-error__link",
                                "data-a-target": "prime-error_link"
                            }, "here to learn more")
                        }, "PrimeError");
                    case p.UNABLE_TO_SPEND:
                    case p.TOO_MANY_RECENT_SPENDS:
                    default:
                        return Object(l.d)("Something has gone wrong. Please try again later.", "PrimeError")
                }
            };
        ! function(e) {
            e.Seen = "SEEN", e.Unseen = "UNSEEN", e.Claimed = "CLAIMED"
        }(u || (u = {}));
        var h = function(e) {
                return e === i.Vertical
            },
            f = function(e, t) {
                var n = t === i.Horizontal ? "horizontal" : "vertical";
                return r(e, e + "--" + n)
            },
            g = function() {
                return k("seenOffers")
            },
            v = function(e) {
                l.l.set("seenOffers", e)
            },
            b = function(e, t) {
                return (e && (e.priority || 0 === e.priority) ? e.priority : 99999) - (t && (t.priority || 0 === t.priority) ? t.priority : 99999)
            },
            k = function(e) {
                return l.l.get(e, [])
            },
            y = function(e, t) {
                return void 0 !== e && void 0 !== t && (!e && Object(c.a)(t))
            },
            _ = function() {
                var e = location.search,
                    t = a.parse(e);
                return t && t.dateOverride || void 0
            },
            S = function(e) {
                return e && !e.loading && !e.error && null !== e.currentUser && e.currentUser.hasPrime
            },
            E = function(e) {
                return e && e.loading
            }
    },
    KfGW: function(e, t) {},
    Kkxm: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "MinimalTopNav_MinimalUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 93
            }
        };
        n.loc.source = {
            body: "query MinimalTopNav_MinimalUser {\ncurrentUser {\nid\ndisplayName\nprofileImageURL(width: 70)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Kxgf: function(e, t, n) {
        "use strict";
        t.a = function() {
            var e = this;
            return Object(r.a)(s, {
                props: function(t) {
                    return {
                        unblockUserMutation: function(n, r) {
                            return i.__awaiter(e, void 0, void 0, function() {
                                return i.__generator(this, function(e) {
                                    switch (e.label) {
                                        case 0:
                                            return t.mutate ? [4, t.mutate({
                                                variables: {
                                                    input: {
                                                        targetUserID: n
                                                    }
                                                },
                                                optimisticResponse: {
                                                    unblockUser: {
                                                        __typename: "UnblockUserPayload",
                                                        targetUser: {
                                                            __typename: "User",
                                                            id: n
                                                        }
                                                    }
                                                },
                                                update: function(e) {
                                                    var t = e.readFragment({
                                                        id: Object(o.a)(r),
                                                        fragment: a
                                                    });
                                                    t && (t.blockedUsers = t.blockedUsers.filter(function(e) {
                                                        return null !== e && e.id !== n
                                                    }), e.writeFragment({
                                                        id: Object(o.a)(r),
                                                        fragment: a,
                                                        data: t
                                                    }))
                                                }
                                            })] : [3, 2];
                                        case 1:
                                            return e.sent(), [3, 3];
                                        case 2:
                                            throw new Error("unblockUserMutation is not ready");
                                        case 3:
                                            return [2]
                                    }
                                })
                            })
                        }
                    }
                }
            })
        };
        var i = n("TToO"),
            r = n("7vx8"),
            a = n("nmYW"),
            o = (n.n(a), n("yADj")),
            s = n("KJtg");
        n.n(s)
    },
    L3z0: function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.LoadStart = "loadstart", e.Error = "error", e.LoadedMetadata = "loadedmetadata", e.CanPlay = "canplay", e.Playing = "playing", e.Waiting = "waiting", e.Seeking = "seeking", e.Seeked = "seeked", e.Ended = "ended", e.DurationChange = "durationchange", e.TimeUpdate = "timeupdate", e.Play = "play", e.Pause = "pause", e.VolumeChange = "volumechange", e.RateChange = "ratechange"
            }(i || (i = {}))
    },
    L6HU: function(e, t) {},
    LXDe: function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.Game = "Game", e.InGameLoot = "InGameLoot", e.All = "All"
            }(i || (i = {}))
    },
    LYwx: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "EmotePicker_EmotePicker_UserSubscriptionProducts"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelOwnerID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelOwnerID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "price"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emoteSetID"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "promotion"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "newPrice"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "oldPrice"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "subscriptionBenefit"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "platform"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 286
            }
        };
        n.loc.source = {
            body: "query EmotePicker_EmotePicker_UserSubscriptionProducts($channelOwnerID: ID!) {\nuser(id: $channelOwnerID) {\nid\nlogin\ndisplayName\nsubscriptionProducts {\nid\nurl\nprice\nemotes {\nid\ntoken\n}\nemoteSetID\nself {\npromotion {\nnewPrice\noldPrice\n}\n}\n}\nself {\nsubscriptionBenefit {\nid\nplatform\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Ldv2: function(e, t, n) {
        "use strict";
        t.a = function() {
            return Object(r.a)(o, {
                props: function(e) {
                    if (e.data) {
                        var t = e.data.currentUser && e.data.currentUser.emoteSets,
                            n = t && Object(a.a)(t);
                        return {
                            emoteSetsData: i.__assign({}, e.data, {
                                emoteMap: n,
                                emoteSets: t
                            })
                        }
                    }
                    return {}
                },
                skip: function(e) {
                    return !e.isLoggedIn
                }
            })
        };
        var i = n("TToO"),
            r = n("7vx8"),
            a = n("YhVV"),
            o = n("7B9K");
        n.n(o)
    },
    LiYP: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("HW6M"),
            a = n("GiK3"),
            o = n("F8kA"),
            s = n("6sO2"),
            l = n("zCIC"),
            c = n("7vx8"),
            d = n("NXs7"),
            u = n("VAT8"),
            p = n("rK5D"),
            m = n("zNzU"),
            h = n("CSlQ"),
            f = n("RH2O"),
            g = n("hdYS"),
            v = n("5kgt"),
            b = n("SZoP"),
            k = n("4t/L"),
            y = n("Odds"),
            _ = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.renderGame = function() {
                        return n.props.gameName ? a.createElement(y._2, {
                            flexGrow: 1,
                            display: y.R.Flex,
                            flexDirection: y.T.Row
                        }, a.createElement("div", {
                            className: "recommended-channel__game",
                            title: n.props.gameName,
                            "data-a-target": "featured-channel-game-title"
                        }, a.createElement(y._8, {
                            ellipsis: !0,
                            flexGrow: 1
                        }, n.props.gameName))) : null
                    }, n.getSlideInContent = function() {
                        if (n.props.firstPageLoaded) return a.createElement(g.a, {
                            tabIndex: -1,
                            "data-a-target": "featured-channel-follow-button",
                            blurAfterClick: !0,
                            size: y.z.Small,
                            channelLogin: n.props.channelLogin,
                            followUIType: g.b.TextOnly,
                            unfollowUIType: g.b.IconOnly,
                            hideWhenFollowing: !0
                        })
                    }, n.state = {
                        hovered: !1
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return a.createElement(k.a, i.__assign({
                        collapsed: this.props.collapsed,
                        title: this.props.displayName,
                        titleElement: Object(b.a)(this.props.channelLogin, this.props.displayName),
                        avatarAlt: this.props.displayName,
                        avatarSrc: this.props.profileImageURL,
                        linkTo: {
                            pathname: "/" + this.props.channelLogin,
                            state: {
                                content: "featured_channels",
                                medium: "twitch_socialcolumn"
                            }
                        },
                        metadataLeft: this.renderGame(),
                        slideInContent: this.getSlideInContent()
                    }, Object(v.a)(this.props)))
                }, t = i.__decorate([Object(h.d)("Featured Channel")], t)
            }(a.Component);
        var S, E = Object(f.b)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded
                }
            })(_),
            C = n("abYt"),
            N = n("vKN/"),
            T = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getFeaturedChannels = function() {
                        return !t.props.data.loading && !t.props.data.error && t.props.data.featuredStreams && t.props.data.featuredStreams.length - 1 ? t.props.data.featuredStreams.filter(function(e) {
                            return e.stream && e.stream.broadcaster && e.stream.broadcaster.displayName
                        }).slice(0, 5).map(function(e, n) {
                            return e.stream && e.stream.broadcaster && e.stream.broadcaster.displayName && e.stream.broadcaster.id ? a.createElement(E, {
                                key: "featured-channels-" + e.stream.id,
                                id: e.stream.id,
                                displayName: e.stream.broadcaster.displayName,
                                gameName: e.stream.game ? e.stream.game.name : "",
                                profileImageURL: e.stream.broadcaster.profileImageURL,
                                collapsed: t.props.collapsed,
                                channelLogin: e.stream.broadcaster.login,
                                "data-a-id": "featured-channel-" + n,
                                "data-a-target": "featured-channel"
                            }) : null
                        }) : []
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data.loading || this.props.data.error || !this.props.data.featuredStreams || this.props.latencyTracking.reportInteractive(Math.min(this.props.data.featuredStreams.length, 4))
                }, t.prototype.render = function() {
                    var e = Object(s.d)("Featured Channels", "FeaturedChannels");
                    return this.props.collapsed ? a.createElement(y._8, {
                        margin: {
                            bottom: 2
                        }
                    }, a.createElement(C.a, {
                        title: e,
                        collapsed: this.props.collapsed,
                        collapsedIcon: y._25.NavChannels
                    }), this.getFeaturedChannels()) : a.createElement(y._8, {
                        margin: {
                            bottom: 2
                        }
                    }, a.createElement(C.a, {
                        title: e
                    }), a.createElement(y._2, {
                        fullWidth: !0
                    }, a.createElement("figure", null, a.createElement("svg", {
                        width: "240",
                        height: "100",
                        viewBox: "0 0 240 108"
                    }, a.createElement("g", {
                        fill: "none",
                        fillRule: "evenodd"
                    }, a.createElement("path", {
                        fill: "#D7CCEB",
                        d: "M123 56v8h-20V44h20v8l8-8h4v20h-4"
                    }), a.createElement("path", {
                        fill: "#4B367C",
                        d: "M158 30v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zm-86 0v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zm0 46v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zm86 0v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zm17-23v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zM57 53v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zm37 27l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8v-4zm0-57v-4l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8zm34 0v-4l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8zm0 61v-4l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8zm19-31v-4l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8zm-72 0v-4l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8z"
                    }))))), a.createElement(y._8, {
                        padding: {
                            x: 1
                        },
                        margin: {
                            bottom: 2
                        },
                        textAlign: y._45.Center
                    }, a.createElement(y.Q, {
                        color: y.K.Alt2,
                        fontSize: y.V.Size6
                    }, Object(s.d)("Follow channels and easily access your favorites here. Here are a few you might like!", "FeaturedChannels"))), this.getFeaturedChannels())
                }, t = i.__decorate([Object(c.a)(N, {
                    options: function() {
                        return {
                            variables: {
                                language: s.o.intl.getLanguageCode()
                            }
                        }
                    }
                }), Object(h.d)("Featured Channels")], t)
            }(a.Component),
            w = Object(h.d)("No Online Friends", {
                autoReportInteractive: !0
            })(function(e) {
                var t = Object(s.d)("Online Friends", "NoOnlineFriends"),
                    n = Object(s.d)("Twitch is better together. Add some Friends to see who's online and chat!", "NoOnlineFriends"),
                    i = Object(s.d)("None of your Friends are online. Get out there and add more!", "NoOnlineFriends"),
                    r = e.hasOfflineFriends ? "online-friends-no-friends-online" : "online-friends-no-friends";
                return a.createElement(y._8, {
                    margin: {
                        bottom: 2
                    }
                }, a.createElement(C.a, {
                    title: t
                }), a.createElement(y._2, {
                    margin: {
                        y: 1
                    },
                    fullWidth: !0
                }, a.createElement("figure", null, a.createElement("svg", {
                    width: "240",
                    height: "100",
                    viewBox: "0 0 240 108"
                }, a.createElement("defs", null, a.createElement("linearGradient", {
                    x1: "100%",
                    x2: "0%",
                    y1: "50%",
                    y2: "50%"
                }, a.createElement("stop", {
                    stopColor: "#4B367C",
                    stopOpacity: "0",
                    offset: "0%"
                }), a.createElement("stop", {
                    stopColor: "#4B367C",
                    stopOpacity: "0",
                    offset: "3.947%"
                }), a.createElement("stop", {
                    stopColor: "#4B367C",
                    offset: "12.281%"
                }), a.createElement("stop", {
                    stopColor: "#4B367C",
                    offset: "87.719%"
                }), a.createElement("stop", {
                    stopColor: "#4B367C",
                    stopOpacity: "0",
                    offset: "96.053%"
                }), a.createElement("stop", {
                    stopColor: "#4B367C",
                    stopOpacity: "0",
                    offset: "100%"
                }))), a.createElement("g", {
                    fill: "none",
                    fillRule: "evenodd"
                }, a.createElement("path", {
                    fill: "#4B367C",
                    d: "M174.606 56h-13.21l-11.154 26.932c-.212.51-.806 1.1-1.31 1.31L127 93.326V87l-4-4h-6l-4 4v6.326L99.9 87.9 97 85v-7l-4-4h-6l-.666.666L78.604 56h-13.21L57.75 74.452c-.21.507-.787 1.087-1.298 1.3L44 80.908V78l-4-4h-6l-4 4v3.737L15.548 75.75c-.507-.21-1.087-.787-1.3-1.298L6.16 54.918c-.21-.507-.21-1.326 0-1.836l8.09-19.534c.21-.507.79-1.087 1.3-1.3l19.534-8.09c.507-.21 1.326-.21 1.836 0L48 28.748V41h12.838l4.556 11h13.21l7.454-18H100v-6l-3-3v-3.7l22.074-9.142c.51-.212 1.348-.21 1.852 0L143 21.3V25l-3 3v6h13.942l7.455 18h13.21l7.642-18.452c.21-.507.784-1.087 1.295-1.3l10.59-4.385L194 34h20v-6l10.452 4.25c.507.21 1.087.787 1.3 1.298l8.09 19.534c.21.507.21 1.326 0 1.836l-8.09 19.534c-.21.507-.79 1.087-1.3 1.3l-19.534 8.09c-.507.21-1.326.21-1.836 0L193 79.666V67h-13.838l-4.556-11zM119.08 28.16l-16.702 6.917c-.498.206-1.09.793-1.3 1.3l-6.92 16.704c-.205.5-.21 1.335 0 1.84l6.92 16.705c.205.498.792 1.09 1.3 1.3l16.703 6.92c.5.205 1.335.21 1.84 0l16.705-6.92c.498-.205 1.09-.792 1.3-1.3l6.92-16.703c.205-.497.21-1.33 0-1.84l-6.92-16.7c-.205-.5-.792-1.09-1.3-1.3l-16.703-6.92c-.497-.206-1.33-.21-1.84 0zm-83.12 10l-9.53 3.948c-.528.22-1.106.804-1.32 1.32l-3.948 9.53c-.218.528-.213 1.352 0 1.867l3.948 9.532c.22.526.804 1.105 1.32 1.318l9.53 3.948c.528.22 1.352.214 1.867 0l9.532-3.948c.523-.218 1.102-.804 1.315-1.32l3.948-9.53c.22-.528.214-1.35 0-1.867l-3.948-9.53c-.218-.528-.804-1.106-1.32-1.32l-9.53-3.948c-.528-.218-1.35-.213-1.867 0zm167.107.106l-9.532 3.948c-.527.218-1.106.804-1.32 1.32l-3.947 9.53c-.22.528-.214 1.352 0 1.867l3.948 9.535c.218.527.804 1.106 1.32 1.32l9.53 3.947c.528.22 1.352.215 1.867 0l9.532-3.947c.527-.218 1.106-.804 1.32-1.32l3.947-9.53c.22-.528.214-1.352 0-1.867l-3.948-9.532c-.218-.527-.804-1.106-1.32-1.32l-9.53-3.947c-.528-.22-1.352-.215-1.867 0z"
                }), a.createElement("path", {
                    fill: "#D7CCEB",
                    d: "M92 17l2 2v5l-3 2v1h4l2 2v2H83v-2l2-2h4v-1l-3-2v-5l2-2h4zm0 60l2 2v5l-3 2v1h4l2 2v2H83v-2l2-2h4v-1l-3-2v-5l2-2h4zm30 9l2 2v5l-3 2v1h4l2 2v2h-14v-2l2-2h4v-1l-3-2v-5l2-2h4zm30-69l2 2v5l-3 2v1h4l2 2v2h-14v-2l2-2h4v-1l-3-2v-5l2-2h4zm54 0l2 2v5l-3 2v1h4l2 2v2h-14v-2l2-2h4v-1l-3-2v-5l2-2h4zM39 77l2 2v5l-3 2v1h4l2 2v2H30v-2l2-2h4v-1l-3-2v-5l2-2h4zm137-7h14v10h-14V70zm5 2v6l5-3-5-3zM51 28h14v10H51V28zm5 2v6l5-3-5-3zm154 29l-4-4v4h-10V49h10v4l4-4h2v10h-2zM29 55l3-6h2l3 1 3-1h2l3 6v2l-2 2h-2l-2-2h-4l-2 2h-2l-2-2v-2zm10-2v1h1v-1h-1zm1 1v1h1v-1h-1zm1-1v1h1v-1h-1zm-1-1v1h1v-1h-1zm-7 1h-1v1h1v1h1v-1h1v-1h-1v-1h-1v1zm91-14l4 4v10l-6 4v2h8l4 4v4h-28v-4l4-4h8v-2l-6-4V43l4-4h8z"
                }))))), a.createElement(y._8, {
                    padding: {
                        x: 1
                    },
                    textAlign: y._45.Center
                }, a.createElement(y.Q, {
                    color: y.K.Alt2,
                    fontSize: y.V.Size6,
                    "data-a-target": r
                }, e.hasOfflineFriends ? i : n)))
            }),
            O = Object(h.d)("Anon Side Nav", {
                autoReportInteractive: !0
            })(function(e) {
                return e.collapsed ? a.createElement(y._8, {
                    className: "anon-side-nav",
                    fullWidth: !0
                }, a.createElement(T, {
                    collapsed: e.collapsed
                })) : a.createElement(y._8, {
                    className: "anon-side-nav",
                    fullWidth: !0
                }, a.createElement(T, {
                    collapsed: e.collapsed
                }), !e.collapsed && a.createElement(w, null))
            }),
            R = n("WIs4"),
            D = n("aMxy");
        ! function(e) {
            e.ViewerCount = "VIEWER_COUNT", e.Relevance = "RELEVANCE"
        }(S || (S = {}));
        var I = n("6WAQ"),
            x = n("HZww"),
            F = n("2o2f"),
            P = n("vH/s"),
            U = (n("fS5P"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = [];
                    if (this.props.videos)
                        for (var t = 0; t < 3 && t < this.props.videos.length; t++) e.push(this.getVideoSummary(this.props.videos[t]));
                    return a.createElement(y._8, null, e, this.getAllRecentVideosLabel())
                }, t.prototype.getAllRecentVideosLabel = function() {
                    return a.createElement(y._6, {
                        linkTo: "/" + this.props.creatorLogin + "/videos/all",
                        key: "recentVideoLabel",
                        alpha: !0,
                        blurAfterClick: !0
                    }, a.createElement(y._8, {
                        textAlign: y._45.Center,
                        padding: .5
                    }, a.createElement(y.Q, {
                        transform: y._48.Capitalize,
                        color: y.K.Base
                    }, Object(s.d)("See all recent videos", "OfflineFollowedChannelTooltip"))))
                }, t.prototype.getVideoSummary = function(e) {
                    return a.createElement(y._6, {
                        linkTo: "/videos/" + e.id,
                        key: "videoSumm-" + e.id,
                        alpha: !0,
                        blurAfterClick: !0
                    }, a.createElement(y._8, {
                        padding: {
                            top: .5,
                            bottom: .5
                        }
                    }, a.createElement(y.C, {
                        row: !0
                    }, a.createElement(y.E, {
                        src: e.previewThumbnailURL,
                        alt: e.title,
                        size: y.F.Size8,
                        aspect: y.l.Aspect16x9
                    }), a.createElement(y.D, null, a.createElement(y._8, {
                        padding: {
                            left: 1,
                            right: 1
                        },
                        className: "offline-followed-channel-tooltip__video-body"
                    }, a.createElement(y.Q, {
                        color: y.K.Base,
                        title: e.title,
                        lines: 2
                    }, e.title), a.createElement(y.Q, {
                        color: y.K.Alt2,
                        "data-test-selector": "offline-followed-channel-tooltip-text"
                    }, Object(s.d)("{views, plural, one {{formattedViews} view} other {{formattedViews} views}}", {
                        views: e.viewCount,
                        formattedViews: Object(s.e)(e.viewCount)
                    }, "OnlineFollowedChannelTooltip")))))))
                }, t
            }(a.Component)),
            j = (n("ozx1"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = null,
                        t = null;
                    switch (this.props.streamType) {
                        case F.a.Premiere:
                            e = a.createElement(y._24, {
                                asset: y._25.VideoPremiere,
                                type: y._26.Live,
                                width: 12,
                                height: 12
                            }), t = Object(s.d)("Video Premiere", "OnlineFollowedChannelTooltip");
                            break;
                        case F.a.WatchParty:
                        case F.a.Rerun:
                            e = a.createElement(y._24, {
                                asset: y._25.VideoRerun,
                                type: y._26.Alt2,
                                width: 12,
                                height: 12
                            }), t = Object(s.d)("Rerun", "OnlineFollowedChannelTooltip");
                            break;
                        default:
                            if (!this.props.collapsed) break;
                            e = a.createElement(y.G, {
                                status: y.I.Live,
                                size: y.H.Small
                            }), t = Object(s.d)("Live", "OnlineFollowedChannelTooltip")
                    }
                    return a.createElement(y._8, {
                        className: "online-followed-channel-tooltip__body"
                    }, this.props.collapsed && a.createElement(y.Q, {
                        color: y.K.Link,
                        ellipsis: !0
                    }, this.props.gameName ? this.props.channelDisplayName + " · " + this.props.gameName : this.props.channelDisplayName), a.createElement(y.Q, {
                        color: y.K.Base,
                        lines: 2
                    }, this.props.streamTitle), e && a.createElement(y._8, {
                        display: y.R.Flex,
                        alignItems: y.c.Center
                    }, e, a.createElement(y._2, {
                        padding: {
                            left: .5
                        }
                    }, a.createElement(y.Q, {
                        color: y.K.Alt2,
                        type: y._49.Span
                    }, t, this.props.collapsed && this.props.viewership ? " | " + Object(s.d)("{viewers} viewers", {
                        viewers: Object(s.e)(this.props.viewership)
                    }, "OnlineFollowedChannelTooltip") : null))))
                }, t
            }(a.Component)),
            A = (n("TWH+"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e, t = this.getMetadataLeft(),
                        n = this.getTooltipContent(),
                        r = this.isChannelOffline(),
                        o = Object(b.a)(this.props.user.login, this.props.user.displayName, !0);
                    return !n && this.props.collapsed && (e = t.length > 0 && !r ? o + " - " + t : o), a.createElement(k.a, i.__assign({
                        avatarAlt: o,
                        avatarSrc: this.props.user.profileImageURL,
                        collapsed: this.props.collapsed,
                        linkTo: {
                            pathname: this.getChannelLink(),
                            state: {
                                content: P.PageviewContent.FollowedChannels,
                                medium: P.PageviewMedium.SideNav
                            }
                        },
                        metadataLeft: t,
                        metadataRight: this.getMetadataRight(),
                        onClick: this.props.onChannelClick,
                        offline: this.isChannelOffline(),
                        title: o,
                        titleElement: Object(b.a)(this.props.user.login, this.props.user.displayName),
                        tooltipLabel: this.props.collapsed && !this.props.premieresEnabled ? e : void 0,
                        tooltipContent: this.getTooltipContent()
                    }, Object(y._63)(this.props)))
                }, t.prototype.getMetadataLeft = function() {
                    return this.props.user.stream && this.props.user.stream.game ? this.props.user.stream.game.name : this.props.user.stream && this.props.user.stream.id && this.props.user.lastBroadcast && this.props.user.lastBroadcast.game && this.props.user.lastBroadcast.game.name ? this.props.user.lastBroadcast.game.name : this.props.recentChannelVideos && this.props.recentChannelVideos.length > 0 ? Object(s.d)("{numVideos, plural, one {{numVideos} new video} other {{numVideos} new videos}}", {
                        numVideos: this.props.recentChannelVideos.length
                    }, "FollowedChannel") : ""
                }, t.prototype.getMetadataRight = function() {
                    return this.props.user.stream && this.props.user.stream.id ? a.createElement(y._8, {
                        display: y.R.Flex,
                        alignItems: y.c.Center
                    }, this.getChannelStatusIndicator(), a.createElement(y._8, {
                        margin: {
                            left: .5
                        }
                    }, Object(s.e)(this.props.user.stream.viewersCount || 0))) : a.createElement(y.Q, {
                        type: y._49.Span
                    }, Object(s.d)("Offline", "FollowedChannel"))
                }, t.prototype.getChannelStatusIndicator = function() {
                    if (!this.props.user.stream || !this.props.user.stream.id) return null;
                    switch (this.props.user.stream.type) {
                        case F.a.Premiere:
                            return this.props.premieresEnabled ? a.createElement(y._24, {
                                asset: y._25.VideoPremiere,
                                type: y._26.Live,
                                width: 12,
                                height: 12
                            }) : a.createElement(y.G, {
                                status: y.I.Live,
                                size: y.H.Small
                            });
                        case F.a.WatchParty:
                        case F.a.Rerun:
                            return this.props.premieresEnabled ? a.createElement(y._24, {
                                asset: y._25.VideoRerun,
                                type: y._26.Alt2,
                                width: 12,
                                height: 12
                            }) : a.createElement("span", {
                                className: "followed-channel__vodcast-live-indicator"
                            }, a.createElement(y.G, {
                                status: y.I.Live,
                                size: y.H.Small
                            }));
                        default:
                            return a.createElement(y.G, {
                                status: y.I.Live,
                                size: y.H.Small
                            })
                    }
                }, t.prototype.getTooltipContent = function() {
                    if (this.isChannelOffline()) {
                        if (!this.props.user.login) return;
                        return a.createElement(U, {
                            creatorLogin: this.props.user.login,
                            videos: this.props.recentChannelVideos
                        })
                    }
                    if (this.props.premieresEnabled) return a.createElement(j, {
                        streamType: this.props.user.stream && this.props.user.stream.type || F.a.Live,
                        streamTitle: this.props.user.stream && this.props.user.stream.title || "",
                        collapsed: this.props.collapsed,
                        channelDisplayName: this.props.user.displayName || "",
                        gameName: this.props.user.stream && this.props.user.stream.game && this.props.user.stream.game.name || void 0,
                        viewership: this.props.user.stream && this.props.user.stream.viewersCount || 0
                    })
                }, t.prototype.isChannelOffline = function() {
                    return !(this.props.user.stream && this.props.user.stream.id.length > 0)
                }, t.prototype.getChannelLink = function() {
                    return this.isChannelOffline() ? this.props.recentChannelVideos && this.props.recentChannelVideos.length > 0 ? "/videos/" + this.props.recentChannelVideos[0].id : "/" + this.props.user.login + "/videos/all" : "/" + this.props.user.login
                }, t = i.__decorate([Object(h.d)("FollowedChannel")], t)
            }(a.Component)),
            L = n("+3pi"),
            M = function(e, t) {
                void 0 === t && (t = 12), t = e.length < t ? e.length : t;
                for (var n = 0, i = 0; i < t && (n++, !e[i] || !e[i].stream || e[i].stream.type) && (!e[i] || e[i].stream); i++);
                return n
            },
            B = n("Ex+h"),
            W = n("l4QG");

        function V(e) {
            return e ? e.slice().filter(function(e) {
                switch (e.availability) {
                    case W.a.Online:
                    case W.a.Idle:
                    case W.a.Busy:
                    case W.a.Away:
                        return !0;
                    case W.a.Offline:
                        return e.activity && e.activity.type === B.a.Watching;
                    default:
                        return !1
                }
            }).sort(function(e, t) {
                if (!e.activity && !t.activity) return H(e, t);
                if (e.activity && !t.activity) return -1;
                if (!e.activity && t.activity) return 1;
                if (e.activity && t.activity) {
                    if (e.activity.type === B.a.Watching && t.activity.type !== B.a.Watching) return -1;
                    if (e.activity.type !== B.a.Watching && t.activity.type === B.a.Watching) return 1;
                    if (e.activity.type === B.a.Watching && t.activity.type === B.a.Watching) return H(e, t);
                    if (e.activity.type === B.a.Streaming && t.activity.type !== B.a.Streaming) return -1;
                    if (e.activity.type !== B.a.Streaming && t.activity.type === B.a.Streaming) return 1;
                    if (e.activity.type === B.a.Streaming && t.activity.type === B.a.Streaming) return H(e, t);
                    if (e.activity.type === B.a.Playing && t.activity.type !== B.a.Playing) return -1;
                    if (e.activity.type !== B.a.Playing && t.activity.type === B.a.Playing) return 1;
                    if (e.activity.type === B.a.Playing && t.activity.type === B.a.Playing) return H(e, t)
                }
                return z(e, t)
            }) : []
        }

        function H(e, t) {
            return e.availability || t.availability ? e.availability && !t.availability ? -1 : !e.availability && t.availability ? 1 : e.availability === W.a.Online && t.availability !== W.a.Online ? -1 : e.availability !== W.a.Online && t.availability === W.a.Online ? 1 : e.availability === W.a.Online && t.availability === W.a.Online ? z(e, t) : e.availability === W.a.Idle && t.availability !== W.a.Idle ? -1 : e.availability !== W.a.Idle && t.availability === W.a.Idle ? 1 : e.availability === W.a.Idle && t.availability === W.a.Idle ? z(e, t) : e.availability === W.a.Busy && t.availability !== W.a.Busy ? -1 : e.availability !== W.a.Busy && t.availability === W.a.Busy ? 1 : (e.availability === W.a.Busy && (t.availability, W.a.Busy), z(e, t)) : -1
        }

        function G(e, t, n, i) {
            var r = e.slice(),
                a = new Set,
                o = r.filter(function(e) {
                    return e.stream && e.stream.id
                });
            o.forEach(function(e) {
                a.add(e.id)
            });
            var s = function(e) {
                    var t = [],
                        n = [],
                        i = [];
                    return e.forEach(function(e) {
                        switch (e.stream && e.stream.type || F.a.Live) {
                            case F.a.Premiere:
                                n.push(e);
                                break;
                            case F.a.WatchParty:
                            case F.a.Rerun:
                                i.push(e);
                                break;
                            default:
                                t.push(e)
                        }
                    }), t.concat(n, i)
                }(i ? o : function(e) {
                    return e.sort(function(e, t) {
                        return e.stream && t.stream ? null !== e.stream.viewersCount && null === t.stream.viewersCount ? -1 : null !== t.stream.viewersCount && null === e.stream.viewersCount ? 1 : null === e.stream.viewersCount || null === t.stream.viewersCount ? 0 : e.stream.viewersCount > t.stream.viewersCount ? -1 : e.stream.viewersCount < t.stream.viewersCount ? 1 : function(e, t) {
                            var n = e.displayName || e.login || "",
                                i = t.displayName || t.login || "";
                            return n.localeCompare(i)
                        }(e, t) : 0
                    })
                }(o)),
                l = t.filter(function(e) {
                    return !a.has(e.id)
                });
            l.reverse();
            var c = function(e, t) {
                if (!t) return e;
                var n = e.filter(function(e) {
                        return null !== e.id && !!t[e.id]
                    }),
                    i = e.filter(function(e) {
                        return null !== e.id && !t[e.id]
                    });
                return n.sort(function(e, n) {
                    var i = null !== e.id && t[e.id],
                        r = null !== n.id && t[n.id],
                        a = i && i.length || 0;
                    return (r && r.length || 0) - a
                }), n.concat(i)
            }(l, n);
            return s.concat(c)
        }

        function z(e, t) {
            if (!e.node && !t.node) return 0;
            if (e.node && !t.node) return -1;
            if (t.node && !e.node) return 1;
            var n = e.node.displayName || e.node.login || "",
                i = t.node.displayName || t.node.login || "";
            return n.localeCompare(i)
        }
        var q = n("yDaU"),
            Q = n("Hcc4"),
            K = n("CF9R"),
            $ = 5,
            Y = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        sortedFollows: [],
                        displayAmount: $
                    }, t.hasRequestedTracking = !1, t.followedVideoDict = {}, t.initialDisplayAmount = -1, t.sortFollowedChannels = function(e) {
                        if (e.data.loading || e.data.error || !e.data.currentUser || !e.data.currentUser.followedLiveUsers || !e.data.currentUser.follows) return [];
                        var n = e.data.currentUser.followedLiveUsers.nodes.slice(),
                            i = (e.data.currentUser.follows.edges || []).map(function(e) {
                                return e.node
                            }).filter(function(e) {
                                return !!e
                            }),
                            r = (e.videoData && e.videoData.currentUser && e.videoData.currentUser.followedVideos && e.videoData.currentUser.followedVideos.edges || []).map(function(e) {
                                return e.node
                            });
                        t.followedVideoDict = function(e) {
                            var t = {},
                                n = {};
                            if (!e.length) return t;
                            var i = Date.now() - 6048e5;
                            return e.forEach(function(e) {
                                var r = e.owner && e.owner.id;
                                if (r && !n[e.owner && e.owner.id || ""])
                                    if (e.self && e.self.viewingHistory && e.self.viewingHistory.position) n[e.owner && e.owner.id || ""] = !0;
                                    else {
                                        var a = new Date(e.publishedAt).getTime();
                                        if (a && !(a < i)) {
                                            var o = t[r] || [];
                                            o.push(e), t[r] = o
                                        }
                                    }
                            }), t
                        }(r);
                        var a = G(n, i, t.followedVideoDict, e.sortByRelevance);
                        if (t.setState({
                                sortedFollows: a
                            }), t.props.showExtraChannels && -1 === t.initialDisplayAmount) {
                            var o = M(a, 12);
                            t.setState({
                                displayAmount: o
                            }), t.initialDisplayAmount = o
                        }
                    }, t.getFollowedChannels = function() {
                        return t.props.data.loading || t.props.data.error && 0 === t.state.sortedFollows.length ? [] : t.state.sortedFollows.slice(0, t.state.displayAmount).map(function(e, n) {
                            if (!e.id) return null;
                            var i = t.onChannelClick.bind(t, n, e);
                            return a.createElement(A, {
                                key: "followed-channels-" + e.id,
                                user: e,
                                recentChannelVideos: t.followedVideoDict[e.id],
                                collapsed: t.props.collapsed,
                                "data-a-id": "followed-channel-" + n,
                                "data-a-target": "followed-channel",
                                onChannelClick: i,
                                premieresEnabled: t.props.premieresEnabled
                            })
                        })
                    }, t.getShowMore = function() {
                        return t.props.collapsed || !t.state.sortedFollows || t.state.sortedFollows.length <= t.initialDisplayAmount ? null : a.createElement(L.a, {
                            onClickMore: t.onClickShowMore,
                            onClickLess: t.onClickShowLess,
                            lessDisabled: t.state.displayAmount <= t.initialDisplayAmount,
                            moreDisabled: t.state.displayAmount >= t.state.sortedFollows.length
                        })
                    }, t.onClickShowMore = function() {
                        var e = Math.min(t.state.displayAmount + 10, t.state.sortedFollows.length);
                        t.setState({
                            displayAmount: e
                        }), Object(q.c)(e)
                    }, t.onClickShowLess = function() {
                        var e = t.props.showExtraChannels ? Math.max(t.state.displayAmount - 10, t.initialDisplayAmount) : 10 * (Math.floor((t.state.displayAmount + 4) / 10) - 1) + 5;
                        t.setState({
                            displayAmount: e
                        })
                    }, t.onChannelClick = function(e, t) {
                        var n = null;
                        t.stream && (n = t.stream.type), Object(q.b)(e, n)
                    }, t.isRenderReady = function() {
                        return !(t.props.data.loading || t.props.data.error || !t.props.data.currentUser) && (!t.props.data.currentUser.follows || !t.props.data.currentUser.follows.edges || 0 === t.props.data.currentUser.follows.edges.length || t.props.data.currentUser.follows.edges.length > 0 && t.state.sortedFollows.length > 0)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.showExtraChannels || (this.initialDisplayAmount = $)
                }, t.prototype.componentDidUpdate = function() {
                    this.isRenderReady() && this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.sortFollowedChannels(e)
                }, t.prototype.render = function() {
                    var e = !this.props.data.loading && !this.props.data.error && this.props.data.currentUser && this.props.data.currentUser.follows && (!this.props.data.currentUser.follows.edges || 0 === this.props.data.currentUser.follows.edges.length);
                    return this.props.data.loading || this.props.data.error || !this.props.data.currentUser || this.hasRequestedTracking || (this.hasRequestedTracking = !0, Object(q.a)(this.props.data.currentUser, e || !1, this.props.collapsed)), e ? a.createElement(T, {
                        collapsed: this.props.collapsed
                    }) : a.createElement(y._8, {
                        className: "followed-channels"
                    }, a.createElement(C.a, {
                        title: Object(s.d)("Followed Channels", "FollowedChannels"),
                        collapsed: this.props.collapsed,
                        collapsedIcon: y._25.Heart
                    }), this.getFollowedChannels(), this.getShowMore())
                }, t = i.__decorate([Object(c.a)(K, {
                    options: function(e) {
                        return {
                            pollInterval: 6e5,
                            variables: {
                                limit: 100,
                                cursor: "",
                                sort: e.sortByRelevance ? S.Relevance : S.ViewerCount
                            }
                        }
                    }
                }), Object(c.a)(Q, {
                    options: function() {
                        return {
                            variables: {
                                videoTypes: [I.a.Archive, I.a.Highlight, I.a.Upload, I.a.PastPremiere]
                            }
                        }
                    },
                    name: "videoData",
                    skip: function(e) {
                        return !e.showVideoDetails
                    }
                }), Object(R.a)(function(e) {
                    return {
                        query: K,
                        variables: i.__assign({}, e.data.variables),
                        topic: e.data.currentUser && e.data.currentUser.id ? Object(x.p)(e.data.currentUser.id) : "",
                        type: D.PubsubMessageType.StreamDown,
                        skip: !e.data.currentUser || !e.data.currentUser.id,
                        mutator: function(e, t) {
                            return t.currentUser && t.currentUser.followedLiveUsers && (t.currentUser.followedLiveUsers.nodes = t.currentUser.followedLiveUsers.nodes.filter(function(t) {
                                return t.id !== e.channel_id
                            })), t
                        }
                    }
                }), Object(h.d)("Followed Channels")], t)
            }(a.Component),
            Z = n("mqvl"),
            X = n("2KeS"),
            J = n("uXDg"),
            ee = n("QPF3"),
            te = n("4Dne"),
            ne = n("iPhu"),
            ie = n("2Hj/"),
            re = n("emkL"),
            ae = n("m4HT"),
            oe = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderJoinButton = function() {
                        var e = null,
                            n = Object(ie.d)(t.props.user.login, t.props.activity);
                        return n && (e = {
                            pathname: n,
                            state: {
                                content: P.PageviewContent.Presence,
                                medium: P.PageviewMedium.SideNav
                            }
                        }), a.createElement(re.a, {
                            availability: t.props.availability,
                            link: e,
                            onClick: t.handleJoinClick,
                            "data-a-target": "friend-join-button"
                        })
                    }, t.handleClick = function(e) {
                        e.preventDefault();
                        var n = Object(ae.a)(t.props.user.id, t.props.currentUserID);
                        t.props.openThread(n), Object(ne.c)({
                            force: !0,
                            timeout: 0
                        })
                    }, t.handleJoinClick = function() {
                        Object(te.b)({
                            context: te.a.FriendsListButton,
                            friendActivity: t.props.activity,
                            friendLogin: t.props.user.login
                        })
                    }, t.getPresenceStatus = function() {
                        switch (t.props.availability) {
                            case W.a.Online:
                                return y._17.Online;
                            case W.a.Idle:
                            case W.a.Away:
                                return y._17.Away;
                            case W.a.Busy:
                                return y._17.Busy;
                            default:
                                return
                        }
                    }, t.onMouseEnter = function() {
                        Object(ne.d)({
                            id: t.props.user.id,
                            direction: y.r.Right,
                            ref: t.ref
                        })
                    }, t.onMouseLeave = function() {
                        return Object(ne.c)()
                    }, t.setRefDelegate = function(e) {
                        t.ref = e
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return a.createElement("div", {
                        ref: this.setRefDelegate,
                        onMouseEnter: this.onMouseEnter,
                        onMouseLeave: this.onMouseLeave
                    }, a.createElement(k.a, i.__assign({
                        title: this.props.user.displayName,
                        titleElement: Object(b.a)(this.props.user.login, this.props.user.displayName),
                        avatarAlt: this.props.user.displayName,
                        avatarSrc: this.props.user.profileImageURL,
                        avatarPresence: !0,
                        presenceStatus: this.getPresenceStatus(),
                        onClick: this.handleClick,
                        linkTo: "#",
                        metadataLeft: a.createElement(ie.b, {
                            availability: this.props.availability,
                            activity: this.props.activity,
                            condensed: !0
                        }),
                        slideInContent: this.renderJoinButton(),
                        collapsed: this.props.collapsed
                    }, Object(y._63)(this.props))))
                }, t = i.__decorate([Object(h.d)("OnlineFriend")], t)
            }(a.Component);
        var se = Object(f.b)(function(e) {
                return {
                    currentUserID: e.session.user && "" + e.session.user.id || ""
                }
            }, function(e) {
                return Object(X.b)({
                    openThread: function(e) {
                        return Object(J.l)({
                            collapsed: !1,
                            threadID: e,
                            ignoreCollapseIfOpen: !0
                        }, Object(ee.a)())
                    }
                }, e)
            })(oe),
            le = n("TMvI"),
            ce = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.defaultInitialRenderCount = 15, n.sortTimeout = 0, n.onMouseEnter = function() {
                        n.state.hasInteracted || n.setState({
                            hasInteracted: !0
                        })
                    }, n.renderOnlineFriends = function() {
                        return n.state.sortedFriends.length ? (n.state.hasInteracted ? n.state.sortedFriends : n.state.sortedFriends.slice(0, n.getDisplayCount())).map(function(e, t) {
                            return e.node && e.node.id ? a.createElement(se, {
                                activity: e.activity,
                                availability: e.availability,
                                key: "online-friends-" + e.node.id,
                                collapsed: n.props.collapsed,
                                user: e.node,
                                "data-a-id": "online-friend-" + t,
                                "data-a-target": "online-friend",
                                "data-a-name": "online-friend-" + e.node.login
                            }) : null
                        }) : []
                    }, n.getDisplayCount = function() {
                        return n.state.hasInteracted ? n.state.sortedFriends.length : Math.min(n.defaultInitialRenderCount, n.state.sortedFriends.length)
                    }, n.state = {
                        sortedFriends: [],
                        hasSorted: !1,
                        initialRenderCount: n.defaultInitialRenderCount,
                        hasInteracted: !1
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t = this;
                    this.sortTimeout && (clearTimeout(this.sortTimeout), this.sortTimeout = 0), this.sortTimeout = setTimeout(function() {
                        var n = !!e.friends && e.friends.length > 0;
                        t.setState({
                            sortedFriends: V(e.friends),
                            hasSorted: n
                        }), t.props.latencyTracking.reportInteractive(t.getDisplayCount())
                    }, 100)
                }, t.prototype.componentDidMount = function() {
                    this.props.loading || this.props.errored || !this.props.friends || this.setState({
                        sortedFriends: V(this.props.friends),
                        hasSorted: !0
                    })
                }, t.prototype.render = function() {
                    return this.props.friends && 0 !== this.props.friends.length || this.props.errored || this.props.loading || this.props.collapsed ? !this.props.errored && !this.props.loading && this.props.friends && this.state.hasSorted && this.props.friends.length > 0 && 0 === this.state.sortedFriends.length && !this.props.collapsed ? a.createElement(w, {
                        hasOfflineFriends: !0
                    }) : a.createElement("div", {
                        className: "online-friends",
                        onMouseEnter: this.onMouseEnter,
                        "data-a-target": "online-friends-list"
                    }, a.createElement(C.a, {
                        title: Object(s.d)("Online Friends", "OnlineFriends"),
                        collapsed: this.props.collapsed,
                        collapsedIcon: y._25.FriendsSC
                    }), this.renderOnlineFriends()) : a.createElement(w, null)
                }, t = i.__decorate([Object(R.a)(function(e) {
                    return {
                        query: le,
                        skip: !e.friends || 0 === e.friends.length,
                        topic: Object(x.n)(e.selfID || ""),
                        type: D.PubsubMessageType.Presence,
                        mutator: function(t, n) {
                            if (!n.currentUser || !n.currentUser.friends) return n;
                            for (var i = -1, r = 0; r < n.currentUser.friends.edges.length; r++) {
                                var a = n.currentUser.friends.edges[r];
                                if (a.node && +a.node.id === t.data.user_id) {
                                    i = r;
                                    break
                                }
                            }
                            if (i >= 0) {
                                var o = n.currentUser.friends.edges[i];
                                o.availability = t.data.availability.toUpperCase();
                                var s = "$User:" + e.selfID + ".friends.edges." + i + ".activity";
                                o.activity = Object(Z.a)(t.data.activity, s)
                            }
                            return n
                        }
                    }
                }), Object(R.a)(function(e) {
                    return {
                        query: le,
                        skip: !e.friends || 0 === e.friends.length,
                        topic: Object(x.h)(e.selfID || ""),
                        mutator: function(t, n) {
                            if (!n.currentUser || !n.currentUser.friends) return n;
                            var i = t.change === D.FrienshipChangeType.Removed || t.change === D.FrienshipChangeType.SelfRemoved;
                            if ((t.change === D.FrienshipChangeType.Accepted || t.change === D.FrienshipChangeType.SelfAccepted) && setTimeout(function() {
                                    e && e.refetch && e.refetch()
                                }), !i) return n;
                            for (var r = -1, a = t.change === D.FrienshipChangeType.SelfRemoved, o = 0; o < n.currentUser.friends.edges.length; o++) {
                                var s = n.currentUser.friends.edges[o];
                                if (s.node && s.node.id === (a ? t.target_user_id : t.user_id)) {
                                    r = o;
                                    break
                                }
                            }
                            return r >= 0 && n.currentUser.friends.edges.splice(r, 1), n
                        }
                    }
                }), Object(h.d)("OnlineFriends")], t)
            }(a.Component),
            de = n("HM6l"),
            ue = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getSlideInContent = function() {
                        if (t.props.firstPageLoaded) return a.createElement(g.a, {
                            tabIndex: -1,
                            "data-a-target": "recommended-channel-follow-button",
                            size: y.z.Small,
                            channelLogin: t.props.login,
                            followUIType: g.b.TextOnly,
                            unfollowUIType: g.b.IconOnly,
                            hideWhenFollowing: !0
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = Object(b.a)(this.props.login, this.props.displayName, !0),
                        t = this.props.gameName.length > 0 ? e + " - " + this.props.gameName : e;
                    return a.createElement(k.a, i.__assign({
                        title: e,
                        titleElement: Object(b.a)(this.props.login, this.props.displayName),
                        avatarAlt: e,
                        avatarSrc: this.props.profileImageURL,
                        linkTo: {
                            pathname: "/" + this.props.login,
                            state: {
                                content: P.PageviewContent.RecommendedChannels,
                                medium: P.PageviewMedium.SideNav,
                                content_index: this.props.contentIndex
                            }
                        },
                        metadataLeft: this.props.gameName,
                        slideInContent: this.getSlideInContent(),
                        collapsed: this.props.collapsed,
                        tooltipLabel: t
                    }, Object(y._63)(this.props)))
                }, t = i.__decorate([Object(h.d)("RecommendedChannel")], t)
            }(a.Component);
        var pe = Object(f.b)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded
                }
            })(ue),
            me = n("DMR/"),
            he = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasLoadedMore: !1
                    }, t.getRecommendedChannels = function() {
                        var e = t.dataToDisplay();
                        return e ? e.slice(0, t.getNodesToDisplayCount()).map(function(e, n) {
                            return e.broadcaster && e.broadcaster.id && e.broadcaster.login ? a.createElement(pe, {
                                id: e.broadcaster.id,
                                key: "recommended-channels-" + e.id,
                                collapsed: t.props.collapsed,
                                "data-a-id": "recommended-channel-" + n,
                                "data-a-target": "recommended-channel",
                                displayName: e.broadcaster.displayName,
                                contentIndex: n,
                                gameName: e.game && e.game.name || "",
                                login: e.broadcaster.login,
                                profileImageURL: e.broadcaster.profileImageURL
                            }) : null
                        }) : []
                    }, t.onClickShowMore = function() {
                        t.setState({
                            hasLoadedMore: !0
                        })
                    }, t.onClickShowLess = function() {
                        t.setState({
                            hasLoadedMore: !1
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data.loading || this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this.dataToDisplay();
                    if (!e) return null;
                    var t = null;
                    return !this.props.collapsed && e.length > 3 && (t = a.createElement(L.a, {
                        onClickMore: this.onClickShowMore,
                        onClickLess: this.onClickShowLess,
                        lessDisabled: !this.state.hasLoadedMore,
                        moreDisabled: this.state.hasLoadedMore
                    })), a.createElement("div", {
                        className: "recommended-channels"
                    }, a.createElement(C.a, {
                        title: Object(s.d)("Recommended Channels", "RecommendedChannels"),
                        collapsed: this.props.collapsed,
                        collapsedIcon: y._25.NavChannels
                    }), this.getRecommendedChannels(), t)
                }, t.prototype.dataToDisplay = function() {
                    return !this.props.data.loading && !this.props.data.error && this.props.data.currentUser && this.props.data.currentUser.recommendations && this.props.data.currentUser.recommendations.liveRecommendations && 0 !== this.props.data.currentUser.recommendations.liveRecommendations.nodes.length ? this.props.data.currentUser.recommendations.liveRecommendations.nodes : null
                }, t.prototype.getNodesToDisplayCount = function() {
                    var e = this.dataToDisplay();
                    return e ? this.state.hasLoadedMore ? e.length : Math.min(e.length, 3) : 0
                }, t = i.__decorate([Object(c.a)(me, {
                    options: function() {
                        return {
                            variables: {
                                first: 10,
                                recID: Object(de.a)(),
                                language: ""
                            }
                        }
                    }
                }), Object(h.d)("RecommendedChannels")], t)
            }(a.Component),
            fe = n("oIkB"),
            ge = n("Vprp"),
            ve = n("UhzT"),
            be = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.getSlideInContent = function() {
                        if (!n.state.working) {
                            var e = Object(s.d)("Add Friend", "RecommendedFriend");
                            return a.createElement(y.w, {
                                tabIndex: -1,
                                ariaLabel: e,
                                type: y.y.Primary,
                                icon: y._25.AddFriend,
                                size: y.x.Small,
                                onClick: n.onClickAddFriend,
                                "data-a-target": "recommended-friend-add-button"
                            })
                        }
                    }, n.handleClick = function(e) {
                        e.preventDefault();
                        var t = Object(ae.a)(n.props.user.id, n.props.currentUserID);
                        n.props.openThread(t), Object(ne.c)({
                            force: !0,
                            timeout: 0
                        })
                    }, n.onClickAddFriend = function() {
                        n.setState({
                            working: !0
                        }, function() {
                            var e = Object(fe.a)({
                                targetID: n.props.user.id
                            });
                            n.props.createFriendRequest(e).then(n.props.onRecommendationChanged).catch(function() {
                                return n.setState({
                                    working: !1
                                })
                            })
                        })
                    }, n.onMouseEnter = function() {
                        Object(ne.d)({
                            id: n.props.user.id,
                            direction: y.r.Right,
                            ref: n.ref
                        })
                    }, n.onMouseLeave = function() {
                        return Object(ne.c)()
                    }, n.setRefDelegate = function(e) {
                        n.ref = e
                    }, n.state = {
                        working: !1
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return a.createElement("div", {
                        ref: this.setRefDelegate,
                        onMouseEnter: this.onMouseEnter,
                        onMouseLeave: this.onMouseLeave
                    }, a.createElement(k.a, i.__assign({
                        title: this.props.user.displayName,
                        titleElement: Object(b.a)(this.props.user.login, this.props.user.displayName),
                        avatarAlt: this.props.user.displayName,
                        avatarSrc: this.props.user.profileImageURL,
                        onClick: this.handleClick,
                        linkTo: "#",
                        metadataLeft: "",
                        collapsed: this.props.collapsed,
                        slideInContent: this.getSlideInContent()
                    }, Object(y._63)(this.props))))
                }, t = i.__decorate([Object(c.a)(ge, {
                    name: "createFriendRequest"
                }), Object(c.a)(ve, {
                    name: "dismissFriendRecommendation"
                }), Object(h.d)("RecommendedFriend")], t)
            }(a.Component);
        var ke = Object(f.b)(function(e) {
                return {
                    currentUserID: e.session.user && "" + e.session.user.id || ""
                }
            }, function(e) {
                return Object(X.b)({
                    openThread: function(e) {
                        return Object(J.l)({
                            collapsed: !1,
                            threadID: e,
                            ignoreCollapseIfOpen: !0
                        }, Object(ee.a)())
                    }
                }, e)
            })(be),
            ye = n("+R+X"),
            _e = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onRecommendationDataChanged = function() {
                        t.props.data.refetch()
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data.loading || this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this,
                        t = this.getDisplayData();
                    return t ? a.createElement("div", {
                        className: "recommended-friends"
                    }, a.createElement(C.a, {
                        title: Object(s.d)("Recommended Friends", "RecommendedFriends")
                    }), t.map(function(t, n) {
                        return a.createElement(ke, {
                            key: "recommended-friends-" + t.id,
                            user: t,
                            collapsed: e.props.collapsed,
                            onRecommendationChanged: e.onRecommendationDataChanged,
                            "data-a-id": "recommended-friend-" + n,
                            "data-a-target": "recommended-friend"
                        })
                    })) : null
                }, t.prototype.getDisplayData = function() {
                    if (this.props.collapsed || this.props.data.loading || this.props.data.error || !this.props.data.currentUser || !this.props.data.currentUser.recommendations) return null;
                    var e = Math.min(5, this.props.data.currentUser.recommendations.friends.length),
                        t = [];
                    return this.props.data.currentUser.recommendations.friends.forEach(function(e) {
                        e.user && e.user.id && t.push(e.user)
                    }), 0 === t.length ? null : t.slice(0, e)
                }, t = i.__decorate([Object(c.a)(ye), Object(h.d)("RecommendedFriends")], t)
            }(a.Component),
            Se = n("puy8"),
            Ee = n("5LoI"),
            Ce = n("MAZT"),
            Ne = n("4ik2"),
            Te = n("iXJ1"),
            we = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.handleClick = function(e) {
                        if (e.preventDefault(), n.props.id !== n.props.currentUserID) {
                            var t = Object(ae.a)(n.props.id, n.props.currentUserID);
                            n.props.openThread(t)
                        }
                    }, n.getSlideInContent = function() {
                        if (!n.state.working) {
                            if (n.state.requested) {
                                var e = Object(s.d)("Cancel Request", "SearchFriendResult");
                                return a.createElement(y.w, {
                                    ariaLabel: e,
                                    type: y.y.Primary,
                                    icon: y._25.Close,
                                    size: y.x.Small,
                                    onClick: n.onClickCancelRequest,
                                    "data-a-target": "search-result-cancel-button"
                                })
                            }
                            var t = Object(s.d)("Add Friend", "SearchFriendResult");
                            return a.createElement(y.w, {
                                ariaLabel: t,
                                type: y.y.Primary,
                                icon: y._25.AddFriend,
                                size: y.x.Small,
                                onClick: n.onClickAddFriend,
                                "data-a-target": "search-result-add-button"
                            })
                        }
                    }, n.onClickAddFriend = function() {
                        n.setState({
                            working: !0
                        }, function() {
                            n.props.createFriendRequest(Object(fe.a)({
                                targetID: n.props.id
                            })).then(function() {
                                n.setState({
                                    working: !1,
                                    requested: !0
                                })
                            }).catch(function() {
                                n.setState({
                                    working: !1
                                })
                            })
                        })
                    }, n.onClickCancelRequest = function() {
                        n.setState({
                            working: !0
                        }, function() {
                            n.props.cancelFriendRequest(Object(fe.a)({
                                targetID: n.props.id
                            })).then(function() {
                                n.setState({
                                    working: !1,
                                    requested: !1
                                })
                            }).catch(function() {
                                n.setState({
                                    working: !1
                                })
                            })
                        })
                    }, n.state = {
                        working: !1,
                        requested: !1
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(k.a, i.__assign({
                        title: this.props.displayName,
                        titleElement: Object(b.a)(this.props.login, this.props.displayName),
                        avatarAlt: this.props.displayName,
                        avatarSrc: this.props.profileImageURL,
                        linkTo: "#",
                        onClick: this.handleClick,
                        slideInContent: this.getSlideInContent(),
                        collapsed: this.props.collapsed
                    }, Object(v.a)(this.props)))
                }, t = i.__decorate([Object(c.a)(Te, {
                    name: "createFriendRequest"
                }), Object(c.a)(Ne, {
                    name: "cancelFriendRequest"
                }), Object(h.d)("Search Friend Result")], t)
            }(a.Component);
        var Oe, Re = Object(f.b)(function(e) {
                return {
                    currentUserID: e.session.user && "" + e.session.user.id || ""
                }
            }, function(e) {
                return Object(X.b)({
                    openThread: function(e) {
                        return Object(J.l)({
                            collapsed: !1,
                            threadID: e,
                            ignoreCollapseIfOpen: !0
                        }, Object(ee.a)())
                    }
                }, e)
            })(we),
            De = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.inputTimeout = 0, n.renderFilteredFriends = function() {
                        return n.state.filteredFriends && 0 !== n.state.filteredFriends.length ? n.state.filteredFriends.filter(function(e) {
                            return e.node && null !== e.node.id
                        }).map(function(e, t) {
                            return a.createElement(se, {
                                activity: e.activity,
                                availability: e.availability,
                                key: "friend-search-results-" + e.node.id,
                                collapsed: n.props.collapsed,
                                user: e.node,
                                "data-a-id": "friend-search-result-" + t,
                                "data-a-target": "friend-search-result"
                            })
                        }) : []
                    }, n.renderSearchResults = function() {
                        var e = n.state.searchResults;
                        return e && e.users && 0 !== e.users.totalHits ? e.users.hits.map(function(e, t) {
                            var i = e.profile_image || Object(Se.c)(e.objectID, 30);
                            return a.createElement(Re, {
                                id: e.objectID,
                                displayName: e.name,
                                login: e.login,
                                profileImageURL: i,
                                key: "search-results-" + e.objectID,
                                collapsed: n.props.collapsed,
                                "data-a-id": "search-result-" + t,
                                "data-a-target": "search-result"
                            })
                        }) : []
                    }, n.renderNoResults = function() {
                        return a.createElement(y._8, {
                            padding: {
                                x: 1,
                                y: .5
                            }
                        }, a.createElement(y.Q, {
                            color: y.K.Alt2
                        }, Object(s.d)('Sorry, we couldn\'t find anyone named "{user}"', {
                            user: n.props.searchInput
                        }, "SearchFriendResult")))
                    }, n.trySearchAndFilter = function(e) {
                        if (e.searchInput && 0 === e.searchInput.length) return clearTimeout(n.inputTimeout), void(n.inputTimeout = 0);
                        clearTimeout(n.inputTimeout), n.inputTimeout = setTimeout(function() {
                            if (n.search(e.searchInput), e.friends && e.searchInput) {
                                var t = e.searchInput || "",
                                    i = {},
                                    r = e.friends.filter(function(e) {
                                        var n = e.node;
                                        if (!n) return !1;
                                        var r = (n.displayName || n.login || "").toLowerCase().includes(t.toLowerCase());
                                        return r && (i[n.login] = !0), r
                                    });
                                n.setState({
                                    filteredFriends: r,
                                    filterFriendsByLogin: i
                                })
                            }
                        }, 200)
                    }, n.state = {
                        searching: !0
                    }, n.searchClient = new Ce.a({
                        appId: s.a.algoliaApplicationID,
                        apiKey: s.a.algoliaAPIKey,
                        apolloClient: s.o.apollo.client,
                        logger: s.j,
                        config: s.a
                    }), n
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.props.searchInput !== e.searchInput && this.trySearchAndFilter(e)
                }, t.prototype.componentDidMount = function() {
                    this.trySearchAndFilter(this.props)
                }, t.prototype.componentWillUnmount = function() {
                    clearTimeout(this.inputTimeout), this.inputTimeout = 0
                }, t.prototype.render = function() {
                    var e = null,
                        t = !this.state.filteredFriends || 0 === this.state.filteredFriends.length,
                        n = !this.state.searchResults || !this.state.searchResults.users || 0 === this.state.searchResults.users.hits.length;
                    return e = !this.state.searching && t && n ? this.renderNoResults() : [this.renderFilteredFriends(), this.renderSearchResults()], a.createElement("div", {
                        className: "recommended-friends"
                    }, a.createElement(C.a, {
                        title: Object(s.d)("Results", "SearchFriendResults")
                    }), e)
                }, t.prototype.search = function(e) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var t, n = this;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return e ? (this.setState({
                                        searching: !0
                                    }), [4, this.searchClient.queryForType(Ee.a.Users, e, Object(de.a)(), {
                                        hitsPerPage: 10
                                    })]) : [2];
                                case 1:
                                    return t = i.sent(), this.inputTimeout && e === this.props.searchInput && (t && t.users && (t.users.hits = t.users.hits.filter(function(e) {
                                        return n.state.filterFriendsByLogin && !n.state.filterFriendsByLogin[e.login]
                                    })), this.setState({
                                        searchResults: t,
                                        searching: !1
                                    })), [2]
                            }
                        })
                    })
                }, t = i.__decorate([Object(h.d)("Search Friend Results")], t)
            }(a.Component),
            Ie = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleInputChange = function(e) {
                        t.props.onInputChange(e.target.value)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return this.props.collapsed ? null : a.createElement(y._35, {
                        borderTop: !0,
                        padding: 1
                    }, a.createElement(y._27, {
                        id: "side-nav.find-friends",
                        placeholder: Object(s.d)("Search to Add Friends", "SearchFriendsInput"),
                        onChange: this.handleInputChange,
                        "data-a-target": "side-nav-search-input"
                    }))
                }, t
            }(a.Component),
            xe = n("iOr9"),
            Fe = n("bZTi"),
            Pe = "TWILIGHT_SUBSCRIBED_CHANNELS_SIDENAV";
        ! function(e) {
            e.VARIANT_A = "variant_a", e.VARIANT_B = "variant_b", e.CONTROL = "control"
        }(Oe || (Oe = {}));
        var Ue = function(e) {
                var t, r = {
                    name: Pe,
                    assignments: (t = {
                        fallback: function() {
                            return null
                        }
                    }, t[Oe.VARIANT_A] = function() {
                        return Fe.a.wrap(function() {
                            return n.e(82).then(n.bind(null, "Rxng"))
                        }, "SubscribedChannels", {
                            placeholder: null,
                            failSilently: !0
                        })({
                            collapsed: e.collapsed
                        })
                    }, t),
                    loader: function() {
                        return null
                    }
                };
                return a.createElement(xe.a, i.__assign({}, r))
            },
            je = n("/Vp/");
        n("vQuK");
        n.d(t, "b", function() {
            return Ae
        }), n.d(t, "a", function() {
            return He
        });
        var Ae = 1200,
            Le = "treatment",
            Me = "control",
            Be = "yes",
            We = "left_nav_order_exp",
            Ve = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.logger = s.o.logger.withCategory("side-nav"), n.handleToggleVisibility = function() {
                        var e = n.getLayoutCache();
                        n.props.collapsed ? (n.props.expandSideNav(), e.resource.isSocialColumnClosedByUserAction = !1) : (n.props.collapseSideNav(), e.resource.isSocialColumnClosedByUserAction = !0), s.l.set(s.o.config.layoutCacheKey, e), Object(p.c)({
                            element: p.a.SocialColumn,
                            action: n.props.collapsed ? p.b.Open : p.b.Close
                        })
                    }, n.collapseOnBreakpoint = function() {
                        var e = window.innerWidth;
                        e < Ae && !n.state.forceCollapsed ? n.setState({
                            forceCollapsed: !0
                        }) : e >= Ae && n.state.forceCollapsed && n.setState({
                            forceCollapsed: !1
                        }), n.resetAnimationState()
                    }, n.handleWindowResize = function() {
                        n.resizeAnimationFrame || (n.resizeAnimationFrame = requestAnimationFrame(n.collapseOnBreakpoint))
                    }, n.resetAnimationState = function() {
                        n.resizeAnimationFrame = null
                    }, n.onHistoryChange = function(e) {
                        var t = n.props.isLoggedIn,
                            i = Object(je.a)({
                                isLoggedIn: t,
                                location: e
                            });
                        i !== n.state.hideSideNav && n.setState({
                            hideSideNav: i
                        })
                    }, n.onSearchInputChange = function(e) {
                        n.setState({
                            searchInput: e
                        })
                    }, n.reportInteractive = function() {
                        n.props.isLoggedIn && (n.props.data.loading || n.props.data.error) || n.props.latencyTracking.reportInteractive()
                    }, n.getRelevanceSortingAssignment = function(e) {
                        switch (e) {
                            case Le:
                                return !0;
                            case Me:
                            default:
                                return !1
                        }
                    };
                    var i = t.isLoggedIn,
                        r = t.location,
                        a = s.o.experiments.getAssignment("TWILIGHT_PREMIERE_UPLOAD_FLOW"),
                        o = s.o.experiments.getAssignment("TWILIGHT_AML_RANKING_FOLLOWS"),
                        l = s.o.experiments.getAssignment(Pe);
                    return n.state = {
                        isError: !1,
                        isLeftNavOrderExperiment: l === We,
                        hideSideNav: Object(je.a)({
                            isLoggedIn: i,
                            location: r
                        }),
                        forceCollapsed: !1,
                        premieresEnabled: a === Be,
                        sortByRelevance: n.getRelevanceSortingAssignment(o)
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentDidCatch = function(e, t) {
                    var n = this;
                    this.setState({
                        isError: !0
                    }, function() {
                        n.logger.error(e, "A unhandled exception occurred in the component hierarchy", {
                            info: t
                        })
                    })
                }, t.prototype.componentDidMount = function() {
                    this.reportInteractive(), this.historyUnlisten = s.o.history.listen(this.onHistoryChange), window.addEventListener("resize", this.handleWindowResize), this.collapseOnBreakpoint()
                }, t.prototype.componentDidUpdate = function() {
                    this.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    !this.props.collapsed && e.collapsed && this.state.searchInput && this.state.searchInput.length > 0 && this.setState({
                        searchInput: ""
                    })
                }, t.prototype.componentWillUnmount = function() {
                    this.historyUnlisten(), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame), window.removeEventListener("resize", this.handleWindowResize)
                }, t.prototype.render = function() {
                    if (this.state.isError) return null;
                    var e = this.props.collapsed || this.state.forceCollapsed,
                        t = r("side-nav", {
                            "side-nav--collapsed": e
                        }),
                        n = e ? "side-nav-bar-collapsed" : "side-nav-bar",
                        i = {
                            "side-nav__toggle-visibility": !0,
                            "side-nav__toggle-visibility--open": e
                        },
                        o = a.createElement(y._2, {
                            position: y._15.Absolute,
                            flexGrow: 0,
                            flexShrink: 0,
                            display: this.state.forceCollapsed ? y.R.Hide : y.R.Block,
                            className: r(i),
                            "data-a-target": "side-nav-arrow"
                        }, a.createElement("button", {
                            onClick: this.handleToggleVisibility
                        }, a.createElement(y._2, {
                            className: "side-nav__toggle-visibility-icon",
                            position: y._15.Absolute
                        }, a.createElement(y.Q, {
                            type: y._49.Span
                        }, a.createElement(y._24, {
                            asset: y._25.GlyphArrDown
                        })))));
                    if (!this.props.isLoggedIn) return this.state.hideSideNav ? null : a.createElement(y._8, {
                        className: t,
                        flexShrink: 0,
                        flexGrow: 0,
                        fullHeight: !0,
                        position: y._15.Relative,
                        "data-a-target": n
                    }, a.createElement(y._8, {
                        className: Object(u.c)(d.a.Dark),
                        flexShrink: 0,
                        fullWidth: !0,
                        fullHeight: !0
                    }, a.createElement(y._35, {
                        borderRight: !0,
                        className: "side-nav__theme-wrapper",
                        flexShrink: 0,
                        flexGrow: 1,
                        flexDirection: y.T.Column,
                        flexWrap: y.U.NoWrap,
                        fullWidth: !0,
                        fullHeight: !0,
                        display: y.R.Flex,
                        position: y._15.Relative
                    }, a.createElement(y._8, {
                        flexWrap: y.U.NoWrap,
                        fullHeight: !0,
                        display: y.R.Flex,
                        position: y._15.Relative,
                        fullWidth: !0
                    }, a.createElement(y._2, {
                        flexGrow: 1,
                        fullWidth: !0
                    }, a.createElement(l.b, {
                        suppressScrollX: !0
                    }, a.createElement(O, {
                        collapsed: e
                    })))))), o);
                    var s = this.state.searchInput && this.state.searchInput.length > 0 && !e,
                        c = null,
                        p = this.props.data && !this.props.data.error && !this.props.data.loading && this.props.data.currentUser,
                        m = p && p.friends ? p.friends.edges : [];
                    s && (c = a.createElement(y._2, {
                        position: y._15.Absolute,
                        attachLeft: !0,
                        attachRight: !0,
                        attachTop: !0
                    }, a.createElement(l.b, {
                        className: "side-nav__overlay-wrapper",
                        suppressScrollX: !0
                    }, a.createElement(De, {
                        searchInput: this.state.searchInput,
                        friends: m,
                        key: "search-friend-results",
                        collapsed: e
                    }))));
                    var h = p ? p.id : "",
                        f = this.state.isLeftNavOrderExperiment ? a.createElement(y._8, {
                            flexGrow: 1,
                            fullWidth: !0
                        }, a.createElement(Y, {
                            collapsed: e,
                            premieresEnabled: this.state.premieresEnabled,
                            showVideoDetails: this.props.firstPageLoaded,
                            sortByRelevance: this.state.sortByRelevance,
                            showExtraChannels: this.state.isLeftNavOrderExperiment
                        }), a.createElement(he, {
                            collapsed: e
                        }), this.props.firstPageLoaded && a.createElement(ce, {
                            collapsed: e,
                            friends: m,
                            selfID: h,
                            loading: this.props.data.loading,
                            errored: !!this.props.data.error,
                            refetch: this.props.data.refetch
                        }), this.props.firstPageLoaded && a.createElement(_e, {
                            collapsed: e
                        })) : a.createElement(y._8, {
                            flexGrow: 1,
                            fullWidth: !0
                        }, a.createElement(Ue, {
                            collapsed: e
                        }), a.createElement(Y, {
                            collapsed: e,
                            premieresEnabled: this.state.premieresEnabled,
                            showVideoDetails: this.props.firstPageLoaded,
                            sortByRelevance: this.state.sortByRelevance
                        }), a.createElement(ce, {
                            collapsed: e,
                            friends: m,
                            selfID: h,
                            loading: this.props.data.loading,
                            errored: !!this.props.data.error,
                            refetch: this.props.data.refetch
                        }), this.props.firstPageLoaded && a.createElement(he, {
                            collapsed: e
                        }), this.props.firstPageLoaded && a.createElement(_e, {
                            collapsed: e
                        }));
                    return a.createElement(y._8, {
                        className: t,
                        flexShrink: 0,
                        fullHeight: !0,
                        position: y._15.Relative
                    }, a.createElement(y._8, {
                        className: Object(u.c)(d.a.Dark),
                        flexShrink: 0,
                        fullWidth: !0,
                        fullHeight: !0
                    }, a.createElement(y._35, {
                        className: "side-nav__theme-wrapper",
                        borderRight: !0,
                        flexShrink: 0,
                        flexGrow: 1,
                        flexDirection: y.T.Column,
                        flexWrap: y.U.NoWrap,
                        fullWidth: !0,
                        fullHeight: !0,
                        display: y.R.Flex,
                        position: y._15.Relative
                    }, a.createElement(y._8, {
                        className: "side-nav__overlay-wrapper",
                        flexWrap: y.U.NoWrap,
                        fullHeight: !0,
                        display: y.R.Flex,
                        position: y._15.Relative,
                        overflow: y._11.Hidden,
                        fullWidth: !0
                    }, a.createElement(y._2, {
                        flexGrow: 1,
                        fullWidth: !0,
                        overflow: y._11.Hidden
                    }, a.createElement(l.b, {
                        suppressScrollX: !0
                    }, f)), c), a.createElement(Ie, {
                        collapsed: e,
                        onInputChange: this.onSearchInputChange
                    }))), o)
                }, t.prototype.getLayoutCache = function() {
                    return s.l.get(s.o.config.layoutCacheKey, m.a)
                }, t = i.__decorate([Object(h.d)("SideNav"), Object(c.a)(le, {
                    skip: function(e) {
                        return !e.isLoggedIn
                    }
                })], t)
            }(a.Component),
            He = Object(o.f)(Ve)
    },
    Lj1H: function(e, t, n) {
        "use strict";
        t.e = function(e) {
            return e.type === i.PubsubMessageType.WhisperSent
        }, t.d = function(e) {
            return e.type === i.PubsubMessageType.WhisperReceived
        }, t.b = function(e) {
            return e.type === i.PubsubMessageType.WhisperDeleted
        }, t.c = function(e) {
            return e.type === i.PubsubMessageType.WhisperEdited
        }, t.f = function(e) {
            return e.type === i.PubsubMessageType.WhisperThreadUpdate
        }, t.a = function(e) {
            return e.type === i.PubsubMessageType.WhisperAllThreadsUpdate
        };
        var i = n("aMxy")
    },
    LjAQ: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("HW6M"),
            a = n("GiK3"),
            o = n("2KeS"),
            s = n("6sO2"),
            l = n("7vx8"),
            c = n("CSlQ"),
            d = n("xwpJ"),
            u = n("Odds"),
            p = n("x6ny"),
            m = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleChange = function(e) {
                        t.props.onChange(e.target.value)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = null,
                        t = Object(s.d)("Select One...", "ReportUserModal");
                    this.props.data.loading ? e = [a.createElement("option", {
                        key: "Loading"
                    }, Object(s.d)("Loading...", "ReportReasonsSelect"))] : e = (this.props.data.reportReasons || Object(d.b)()).map(function(e) {
                        return a.createElement("option", {
                            key: e.id,
                            value: e.id
                        }, e.text)
                    });
                    return a.createElement(u._8, {
                        margin: {
                            bottom: 2
                        }
                    }, a.createElement(u.W, {
                        id: "reporting-modal__select",
                        label: Object(s.d)("Select Reason (required)", "ReportUserModal")
                    }, a.createElement(u._30, {
                        id: "reporting-modal__select",
                        "data-test-selector": "reporting-modal.select",
                        disabled: this.props.data.loading || !!this.props.data.error,
                        onChange: this.handleChange,
                        defaultValue: t
                    }, a.createElement("option", {
                        disabled: !0,
                        key: "default"
                    }, t), e)))
                }, t = i.__decorate([Object(c.d)("ReportReasonSelect")], t)
            }(a.Component),
            h = Object(l.a)(p, {
                options: function(e) {
                    return {
                        variables: {
                            content: e.reportContentType
                        }
                    }
                }
            })(m),
            f = (n("I4TS"), n("1EXI"));
        n.d(t, "a", function() {
            return v
        }), n.d(t, "b", function() {
            return g
        }), n.d(t, "c", function() {
            return k
        });
        var g, v = "community_rules_violation";
        ! function(e) {
            e[e.Unsubmitted = 0] = "Unsubmitted", e[e.Success = 1] = "Success", e[e.FormError = 2] = "FormError", e[e.MutationError = 3] = "MutationError", e[e.UserError = 4] = "UserError", e[e.CommunityError = 5] = "CommunityError"
        }(g || (g = {}));
        var b = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        community: null,
                        description: "",
                        reason: null,
                        isCommunityReason: !1,
                        selectedCommunityID: null,
                        selectedCommunityName: null
                    }, t.headerMessage = Object(s.d)("Tell us your concern about this content so that we can review it to determine whether there has been a violation of the {tosLink}. {br} (Abuse of this feature is a violation of the terms of service)", {
                        br: a.createElement("br", null),
                        tosLink: a.createElement("a", {
                            href: "https://www.twitch.tv/p/terms-of-service",
                            target: "_blank"
                        }, Object(s.d)("terms of service", "ReportUser"))
                    }, "ReportUser"), t.selectCommunity = function(e) {
                        t.setState({
                            selectedCommunityID: e.target.value,
                            selectedCommunityName: e.target.getAttribute("data-community-name")
                        })
                    }, t.handleSubmit = function(e) {
                        if (e.preventDefault(), t.state.reason && t.state.description.length > 0) {
                            if (t.state.reason === v && !t.state.selectedCommunityID) {
                                if (t.props.data.user && !t.props.data.user.directories.nodes.length) return void t.props.onError(g.CommunityError);
                                t.props.onError(g.FormError)
                            }
                            t.props.onSubmit(t.state.reason || "", t.state.description, t.state.selectedCommunityID, t.state.selectedCommunityName)
                        } else t.props.onError(g.FormError)
                    }, t.handleTextAreaChange = function(e) {
                        t.setState({
                            description: e.target.value
                        })
                    }, t.handleReasonChange = function(e) {
                        if (!t.props.data || t.props.data.loading || t.props.data.error || !t.props.data.user) return null;
                        var n = t.props.data.user.directories ? t.props.data.user.directories.nodes.filter(function(e) {
                            return "COMMUNITY" === e.directoryType
                        }) : [];
                        n.length && e === v ? t.setState({
                            reason: e,
                            selectedCommunityID: n[0].id,
                            selectedCommunityName: n[0].name,
                            isCommunityReason: !0
                        }) : t.setState({
                            reason: e,
                            isCommunityReason: !1
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(u._8, {
                        display: u.R.Flex,
                        flexDirection: u.T.Column,
                        alignItems: u.c.Center,
                        justifyContent: u._7.Center
                    }, this.renderStatusMessage(), this.renderBody())
                }, t.prototype.renderBody = function() {
                    return this.props.submitStatus === g.Success ? a.createElement("div", null, a.createElement(u.v, {
                        onClick: this.props.onClose
                    }, a.createElement(u._8, {
                        padding: {
                            x: 2
                        }
                    }, Object(s.d)("Close", "ReportUser")))) : a.createElement("div", null, a.createElement(u._8, {
                        "data-test-selector": "reporting.title",
                        margin: {
                            bottom: 1
                        },
                        "data-a-target": "reporting-channel-name"
                    }, a.createElement(u.Q, {
                        type: u._49.H4
                    }, this.props.title), a.createElement(u._35, {
                        color: u.K.Alt2,
                        margin: {
                            top: 1
                        }
                    }, this.headerMessage)), a.createElement("form", null, a.createElement(u._35, {
                        borderTop: !0,
                        borderBottom: !0,
                        margin: {
                            y: 2
                        },
                        padding: {
                            y: 2
                        }
                    }, a.createElement(h, {
                        reportContentType: this.props.reportContentType,
                        onChange: this.handleReasonChange
                    }), this.renderCommunitiesSelector(), a.createElement(u.W, {
                        id: "reporting__text-area",
                        label: Object(s.d)("Description (required)", "ReportUser")
                    }, a.createElement(u._46, {
                        defaultValue: this.props.defaultDescription,
                        onChange: this.handleTextAreaChange
                    }))), a.createElement(u._35, {
                        display: u.R.Flex,
                        justifyContent: u._7.Center
                    }, a.createElement(u.v, {
                        onClick: this.handleSubmit
                    }, a.createElement(u._8, {
                        padding: {
                            x: 2
                        }
                    }, Object(s.d)("Send", "ReportUser"))))))
                }, t.prototype.renderCommunitiesSelector = function() {
                    if (!this.props.data || this.props.data.loading || this.props.data.error || !this.props.data.user) return null;
                    if (this.state.isCommunityReason) {
                        var e = this.props.data.user.directories.nodes.filter(function(e) {
                            return "COMMUNITY" === e.directoryType
                        }).map(function(e) {
                            return a.createElement("option", {
                                key: e.id,
                                value: e.id,
                                "data-community-name": e.name
                            }, e.displayName)
                        });
                        return a.createElement(u._8, {
                            margin: {
                                bottom: 2
                            }
                        }, a.createElement(u.W, {
                            id: "reporting__select-community",
                            label: Object(s.d)("Community", "ReportUser")
                        }, a.createElement(u._30, {
                            id: "reporting__select-community",
                            "data-test-selector": "reporting.select-community",
                            disabled: this.props.data.loading || !!this.props.data.error,
                            onChange: this.selectCommunity
                        }, e)))
                    }
                }, t.prototype.renderStatusMessage = function() {
                    var e = null;
                    switch (this.props.submitStatus) {
                        case g.FormError:
                            e = Object(s.d)("Reason and Description are required.", "ReportUser");
                            break;
                        case g.MutationError:
                            e = Object(s.d)("Sorry, a network error occurred when submitting your report. Please try again later.", "ReportUser");
                            break;
                        case g.Success:
                            e = Object(s.d)("Thank you for your report.", "ReportUser");
                            break;
                        case g.UserError:
                            e = Object(s.d)("This account could not be reported. It may have already been suspended, or the owner may have deleted it.", "ReportUser");
                            break;
                        case g.CommunityError:
                            e = Object(s.d)("A report of this type could not be sent because this user has not selected a Community.", "ReportUser");
                            break;
                        default:
                            return null
                    }
                    var t = r({
                        "reporting__error-container": this.props.submitStatus !== g.Success,
                        "reporting__success-container": this.props.submitStatus === g.Success
                    });
                    return a.createElement(u._35, {
                        className: t,
                        fullWidth: this.props.submitStatus !== g.Success,
                        "data-test-selector": "reporting.error",
                        margin: {
                            bottom: 2
                        },
                        padding: 1
                    }, e)
                }, t
            }(a.Component),
            k = Object(o.d)(Object(l.a)(f, {
                options: function(e) {
                    return {
                        fetchPolicy: "network-only",
                        variables: {
                            userId: e.targetUserID
                        }
                    }
                }
            }))(b)
    },
    Lpko: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            r = n("TToO"),
            a = n("GiK3"),
            o = n("3zLD"),
            s = n("6sO2"),
            l = n("zCIC"),
            c = n("7vx8"),
            d = n("CSlQ"),
            u = n("Odds"),
            p = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    var e = Object(s.d)("You'll get characters, vehicles, skins, and boosts for games like {hearthstone} and {smite}, plus surprises like a rotating selection of indie games.", {
                        hearthstone: a.createElement(u.Q, {
                            italic: !0,
                            type: u._49.Span
                        }, Object(s.d)("Hearthstone", "PrimeEmpty")),
                        smite: a.createElement(u.Q, {
                            italic: !0,
                            type: u._49.Span
                        }, Object(s.d)("Smite", "PrimeEmpty"))
                    }, "PrimeEmpty");
                    return a.createElement(u._8, {
                        className: "prime-empty",
                        margin: 2
                    }, a.createElement(u._8, {
                        textAlign: u._45.Center,
                        margin: 2
                    }, a.createElement("img", {
                        className: "prime-empty__image",
                        src: "https://m.media-amazon.com/images/G/01/sm/landing/Trunk_w_Star_transparent._V530838660_.png",
                        alt: Object(s.d)("Prime Treasure Chest", "PrimeEmpty")
                    })), a.createElement(u.Q, {
                        type: u._49.P,
                        bold: !0
                    }, Object(s.d)("Free in-game loot every month, plus surprises", "PrimeEmpty")), a.createElement("div", null, e))
                }, t
            }(a.Component),
            m = Object(d.d)("PrimeEmpty", {
                autoReportInteractive: !0
            })(p),
            h = n("lfvs"),
            f = n("oIkB"),
            g = n("AGQo"),
            v = n("Tr7p"),
            b = n("Kckk"),
            k = (n("w/8h"), n("sq7i")),
            y = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onClick = function(e) {
                        Object(v.d)({
                            offerID: t.props.offerID,
                            externalURL: t.props.externalURL,
                            hasPrime: !0,
                            index: t.props.index
                        }, t.props.offerType), t.props.claimCallback && t.props.offerType !== b.d.EXTERNAL_OFFER && !t.props.externalURL && t.props.claimCallback(e)
                    }, t.onHover = function() {
                        Object(v.e)({
                            offerID: t.props.offerID,
                            externalURL: t.props.externalURL,
                            hasPrime: !0,
                            index: t.props.index
                        }, t.props.offerType)
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this.props.orientation || b.c.Default,
                        t = b.i(e),
                        n = b.g("prime-claim-button", e);
                    return a.createElement(u._8, {
                        fullWidth: !0,
                        className: n,
                        display: t ? u.R.Block : u.R.InlineBlock
                    }, this.getClaimButton())
                }, t.prototype.getClaimButton = function() {
                    var e = this.props,
                        t = e.externalURL,
                        n = e.claiming,
                        i = e.offerType,
                        r = this.getButtonText();
                    if (t || i === b.d.EXTERNAL_OFFER) return a.createElement(g.a, {
                        onHover: this.onHover
                    }, a.createElement(u.v, {
                        fullWidth: !0,
                        linkTo: t,
                        targetBlank: !0,
                        onClick: this.onClick
                    }, r));
                    var o = a.createElement(g.a, {
                        onHover: this.onHover
                    }, a.createElement(u.v, {
                        fullWidth: !0,
                        state: n ? u.A.Loading : u.A.Default,
                        disabled: n,
                        linkTo: t,
                        onClick: this.onClick,
                        "data-a-target": "prime-claim-button"
                    }, r));
                    return a.createElement(u._8, {
                        position: u._15.Relative
                    }, o)
                }, t.prototype.getButtonText = function() {
                    var e = Object(s.d)("Learn More", "PrimeClaimButton");
                    if (this.props.externalURL) return e;
                    switch (this.props.offerType) {
                        case b.d.CLAIM_CODE:
                            return Object(s.d)("Get Code", "PrimeClaimButton");
                        case b.d.EXTERNAL_OFFER:
                            return e;
                        case b.d.DIRECT_ENTITLEMENT:
                        default:
                            return Object(s.d)("Claim Offer", "PrimeClaimButton")
                    }
                }, t
            }(a.Component),
            _ = Object(o.compose)(Object(c.a)(k), Object(d.d)("PrimeClaimButton"))(y),
            S = (n("zAvr"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.toggleShowDescription = function() {
                        var e = !n.state.showDescription;
                        Object(v.g)(e, {
                            offerID: n.props.offerID,
                            externalURL: n.props.externalURL,
                            hasPrime: n.props.hasPrime,
                            index: n.props.index
                        }), n.setState({
                            showDescription: e
                        })
                    }, n.onHover = function() {
                        n.state.showDescription ? Object(v.f)({
                            offerID: n.props.offerID,
                            externalURL: n.props.externalURL,
                            hasPrime: n.props.hasPrime,
                            index: n.props.index
                        }) : Object(v.h)({
                            offerID: n.props.offerID,
                            externalURL: n.props.externalURL,
                            hasPrime: n.props.hasPrime,
                            index: n.props.index
                        })
                    }, n.state = {
                        showDescription: !1
                    }, n
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this.props.orientation || b.c.Default,
                        t = Object(b.g)("prime-claim-description", e);
                    return a.createElement(u._8, {
                        fullWidth: !0,
                        className: t,
                        margin: {
                            top: 1
                        }
                    }, a.createElement(g.a, {
                        onHover: this.onHover
                    }, a.createElement(u.v, {
                        "data-a-target": "prime-claim-description-button",
                        fullWidth: !0,
                        type: u.B.Hollow,
                        onClick: this.toggleShowDescription
                    }, this.getDescriptionButtonText())), this.getDescriptionBlock(e))
                }, t.prototype.getDescriptionButtonText = function() {
                    return this.state.showDescription ? Object(s.d)("Close Info", "PrimeClaimDescription") : Object(s.d)("More Info", "PrimeClaimDescription")
                }, t.prototype.getDescriptionBlock = function(e) {
                    var t = null,
                        n = Object(b.i)(e);
                    return this.state.showDescription && (t = a.createElement(u._35, {
                        className: "prime-claim-description__body",
                        background: n ? u.n.Alt2 : u.n.Base,
                        border: !0,
                        position: n ? u._15.Relative : u._15.Absolute
                    }, a.createElement(u._8, {
                        "data-a-target": "prime-claim-description-body",
                        margin: {
                            bottom: 2
                        },
                        padding: 1
                    }, a.createElement(h, {
                        source: this.props.description || ""
                    })))), t
                }, t
            }(a.Component)),
            E = Object(d.d)("PrimeClaimDescription", {
                autoReportInteractive: !0
            })(S),
            C = n("Hs3O"),
            N = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onClick = function() {
                        Object(v.l)({
                            offerID: t.props.offerID,
                            externalURL: t.getLink(),
                            hasPrime: !1,
                            index: t.props.index
                        })
                    }, t.onHover = function() {
                        Object(v.m)({
                            offerID: t.props.offerID,
                            externalURL: t.getLink(),
                            hasPrime: !1,
                            index: t.props.index
                        })
                    }, t
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(u._8, {
                        className: "prime-upsell-button",
                        margin: {
                            top: 2,
                            bottom: 1
                        }
                    }, a.createElement(g.a, {
                        onHover: this.onHover
                    }, a.createElement(u.v, {
                        fullWidth: !0,
                        linkTo: this.getLink(),
                        targetBlank: !0,
                        onClick: this.onClick
                    }, Object(s.d)("Start Your Free Trial", "PrimeUpsellButton"))))
                }, t.prototype.getLink = function() {
                    if (this.props.externalURL) return this.props.externalURL;
                    var e = this.props.externalReftag || C.c;
                    return Object(C.d)(e, window.location.pathname.substring(1))
                }, t
            }(a.Component),
            T = Object(d.d)("PrimeUpsellButton", {
                autoReportInteractive: !0
            })(N),
            w = n("4VmI"),
            O = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this.props.orientation || b.c.Default,
                        t = Object(b.g)("prime-claim", e);
                    return a.createElement(u._8, {
                        className: t,
                        margin: {
                            bottom: 1
                        }
                    }, this.getCallToAction(), this.getClaimDescriptionSection())
                }, t.prototype.getCallToAction = function() {
                    var e = this.props.data;
                    return Object(b.k)(e) ? a.createElement(_, {
                        offerType: this.props.offerType,
                        offerID: this.props.offerID,
                        claimCallback: this.props.claimCallback,
                        claiming: this.props.claiming,
                        orientation: this.props.orientation,
                        externalURL: this.props.externalURL,
                        index: this.props.index
                    }) : a.createElement(T, {
                        externalReftag: this.props.externalReftag,
                        externalURL: this.props.externalURL,
                        offerID: this.props.offerID,
                        index: this.props.index
                    })
                }, t.prototype.getClaimDescriptionSection = function() {
                    if (this.props.offerType === b.d.EXTERNAL_OFFER || this.props.externalURL) return null;
                    var e = this.props.data;
                    return a.createElement(E, {
                        description: this.props.offerDescription,
                        offerID: this.props.offerID,
                        externalURL: this.props.externalURL,
                        index: this.props.index,
                        orientation: this.props.orientation,
                        hasPrime: Object(b.k)(e)
                    })
                }, t
            }(a.Component),
            R = Object(o.compose)(Object(c.a)(w), Object(d.d)("PrimeInstructions"))(O),
            D = n("dnng"),
            I = (n("nFc2"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.setRef = function(e) {
                        n.setState({
                            clipboardInput: e
                        })
                    }, n.copy = function() {
                        var e;
                        try {
                            n.state.clipboardInput && n.state.clipboardInput.select(), e = document.execCommand("copy")
                        } catch (t) {
                            e = !1
                        }
                        return n.setState({
                            copied: e
                        }), e
                    }, n.state = {
                        copied: !1,
                        clipboardInput: null
                    }, n
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this.state.copied ? Object(s.d)("copied", "CopyButton") : Object(s.d)("copy", "CopyButton");
                    return a.createElement(u._8, {
                        className: "copy-button copy-btn",
                        display: u.R.Flex,
                        "data-test-target": "copy-button"
                    }, a.createElement(u._2, {
                        className: "copy-button__btn"
                    }, a.createElement(u.v, {
                        onClick: this.copy,
                        type: this.state.copied ? u.B.Success : u.B.Default
                    }, e)), a.createElement("input", {
                        className: "copy-button__copy-input",
                        ref: this.setRef,
                        value: this.props.clipboardText,
                        readOnly: !0
                    }))
                }, t = r.__decorate([Object(d.d)("CopyButton")], t)
            }(a.Component)),
            x = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onChange = function(e) {
                        t.setState({
                            value: e.currentTarget.value,
                            copied: !1
                        })
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillMount = function() {
                    this.props.initialText && this.setState({
                        value: this.props.initialText,
                        copied: !1
                    })
                }, t.prototype.render = function() {
                    return this.state && this.state.value ? a.createElement(u._8, {
                        className: "copyable-item",
                        display: u.R.Flex,
                        flexGrow: 1
                    }, a.createElement(u._8, {
                        flexGrow: 1
                    }, a.createElement(u._4, {
                        type: u._5.Text,
                        onChange: this.onChange,
                        value: this.state.value,
                        disabled: this.props.disabled,
                        readOnly: this.props.readOnly
                    })), a.createElement(u._8, null, a.createElement(I, {
                        clipboardText: this.state.value
                    }))) : null
                }, t = r.__decorate([Object(d.d)("CopyableItem")], t)
            }(a.Component),
            F = (n("yqdF"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.getClaimInstructions = function() {
                        return a.createElement(u._58, null, a.createElement(h, {
                            source: n.props.claimInstructions || "",
                            escapeHtml: !0,
                            renderers: {
                                Link: function(e) {
                                    return a.createElement("a", {
                                        href: e.href,
                                        target: "_blank",
                                        rel: "nofollow noopener noreferrer"
                                    }, e.children)
                                }
                            }
                        }))
                    }, n.renderVerticalLayout = function() {
                        return a.createElement(u._35, {
                            className: "prime-claim-instructions prime-claim-instructions--vertical",
                            background: u.n.Alt2,
                            border: !0,
                            padding: 1,
                            fontSize: u.V.Size6
                        }, n.getClaimInstructions())
                    }, n.renderHorizontalLayout = function() {
                        return a.createElement(u._35, {
                            fullWidth: !0,
                            className: "prime-claim-instructions prime-claim-instructions--horizontal",
                            margin: {
                                top: 1
                            }
                        }, a.createElement(u.v, {
                            fullWidth: !0,
                            type: u.B.Text,
                            onClick: n.toggleShowDescription
                        }, n.getDescriptionButtonText()), n.state.showDescription && a.createElement(u._35, {
                            className: "prime-claim-instructions__body",
                            border: !0,
                            position: u._15.Absolute,
                            padding: 1,
                            background: u.n.Alt,
                            overflow: u._11.Scroll
                        }, n.getClaimInstructions()))
                    }, n.toggleShowDescription = function() {
                        n.setState({
                            showDescription: !n.state.showDescription
                        })
                    }, n.getDescriptionButtonText = function() {
                        return n.state.showDescription ? Object(s.d)("Close Info", "PrimeClaimInstruction") : Object(s.d)("Click here for Claim Instructions", "PrimeClaimInsctuction")
                    }, n.state = {
                        showDescription: !1
                    }, n
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.orientation || b.c.Default;
                    return Object(b.i)(e) ? this.renderVerticalLayout() : this.renderHorizontalLayout()
                }, t
            }(a.Component)),
            P = Object(d.d)("PrimeClaimInstructions", {
                autoReportInteractive: !0
            })(F),
            U = (n("S5wX"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getPrimeClaimInstructions = function() {
                        if (t.props.claimInstructions) return a.createElement(P, {
                            claimInstructions: t.props.claimInstructions || "",
                            orientation: t.props.orientation
                        })
                    }, t
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.orientation || b.c.Default,
                        t = Object(b.g)("prime-redeem", e);
                    return a.createElement(u._8, {
                        className: t
                    }, this.getCodeOrConfirmation(e), this.getPrimeClaimInstructions())
                }, t.prototype.getCodeOrConfirmation = function(e) {
                    var t = Object(b.i)(e);
                    if (this.props.code && this.props.deliveryMethod === b.d.CLAIM_CODE) return a.createElement(u._8, null, a.createElement(x, {
                        initialText: this.props.code,
                        readOnly: !0,
                        textCenter: !0
                    }));
                    var n = t ? 1 : 0;
                    return a.createElement(u._35, {
                        display: u.R.Flex,
                        justifyContent: u._7.Center,
                        margin: {
                            bottom: n
                        },
                        padding: {
                            y: n
                        },
                        className: "prime-redeem__confirmation"
                    }, a.createElement(u.Q, {
                        type: t ? u._49.H4 : u._49.H6,
                        align: u._59.Middle,
                        color: u.K.Overlay
                    }, a.createElement(u._8, {
                        display: u.R.InlineFlex,
                        flexGrow: 1,
                        flexWrap: u.U.NoWrap,
                        alignItems: u.c.Center,
                        "data-test-target": "prime-redeem-check",
                        "data-a-target": "prime-redeem-check",
                        padding: {
                            left: n
                        }
                    }, a.createElement(u._8, {
                        margin: {
                            right: 1
                        },
                        display: u.R.InlineFlex,
                        flexGrow: 1,
                        flexWrap: u.U.NoWrap,
                        padding: {
                            y: .5
                        },
                        alignItems: u.c.Center
                    }, a.createElement(u._24, {
                        asset: u._25.Check,
                        width: 20,
                        height: 20
                    })), Object(s.d)("Added To Your Twitch Account", "PrimeRedeem"))))
                }, t
            }(a.Component)),
            j = Object(d.d)("PrimeRedeem", {
                autoReportInteractive: !0
            })(U),
            A = n("/3Cb"),
            L = (n("v+rJ"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        claimed: !1,
                        claiming: !1,
                        error: void 0,
                        claimData: void 0,
                        status: void 0
                    }, t.renderVerticalLayout = function(e) {
                        var n = t.props.isLast || !1,
                            i = e.content || {},
                            r = i.game || {},
                            o = i.categories || [];
                        return a.createElement(u._35, {
                            "data-a-target": "prime-offer",
                            className: "prime-offer prime-offer--vertical",
                            alignItems: u.c.Center,
                            display: u.R.Block,
                            borderBottom: !n,
                            textAlign: u._45.Left,
                            position: u._15.Relative,
                            padding: {
                                x: 2,
                                y: 1
                            }
                        }, a.createElement(u._8, {
                            "data-a-target": e.id,
                            className: "prime-offer__title",
                            padding: {
                                y: .5
                            },
                            alignItems: u.c.Start
                        }, a.createElement(h, {
                            className: "prime-offer__title__markdown",
                            containerTagName: "h4",
                            source: e.title || ""
                        })), a.createElement("img", {
                            src: e.imageURL
                        }), a.createElement(u._35, {
                            margin: {
                                bottom: 2
                            }
                        }, a.createElement(u._8, {
                            className: "prime-offer__description",
                            padding: {
                                top: .5
                            }
                        }, a.createElement(u.Q, {
                            type: u._49.P
                        }, r.name, " ", o[0])), a.createElement(u._8, {
                            className: "prime-offer__publisher"
                        }, a.createElement(u.Q, {
                            type: u._49.P,
                            color: u.K.Alt2,
                            fontSize: u.V.Size7
                        }, i.publisher))), t.renderRedeemUpsellOrClaimSection(e))
                    }, t.renderHorizontalLayout = function(e) {
                        var n = e.content || {},
                            i = n.game || {},
                            r = n.categories || [];
                        return a.createElement(u._35, {
                            "data-a-target": "prime-offer",
                            className: "prime-offer prime-offer--horizontal",
                            alignItems: u.c.Center,
                            display: u.R.InlineBlock,
                            textAlign: u._45.Left,
                            position: u._15.Relative,
                            padding: {
                                right: 1,
                                y: .5
                            }
                        }, a.createElement(u._35, {
                            className: "prime-offer__content"
                        }, a.createElement(u._35, {
                            className: "prime-offer__content__text",
                            background: u.n.Base
                        }, a.createElement(u._8, {
                            className: "prime-offer__publisher"
                        }, a.createElement(u.Q, {
                            type: u._49.P,
                            color: u.K.Alt2,
                            fontSize: u.V.Size7
                        }, n.publisher)), a.createElement(u._8, {
                            className: "prime-offer__title",
                            alignItems: u.c.Start
                        }, a.createElement(h, {
                            className: "prime-offer__title__markdown",
                            containerTagName: "h4",
                            source: e.title || ""
                        })), a.createElement(u._8, {
                            className: "prime-offer__description"
                        }, a.createElement(u.Q, {
                            type: u._49.P,
                            color: u.K.Alt2
                        }, i.name, " ", r[0]))), a.createElement("img", {
                            src: e.imageURL
                        })), t.renderRedeemUpsellOrClaimSection(e))
                    }, t.renderRedeemUpsellOrClaimSection = function(e) {
                        var n = e.content || {},
                            i = e.self || {
                                claimData: ""
                            },
                            r = t.props.data || {};
                        if (t.state.error) {
                            var o = t.getErrorType();
                            return a.createElement(D.a, {
                                fontSize: u.V.Size6,
                                testTarget: "prime-offer-error",
                                errorType: o
                            })
                        }
                        if (!n.externalURL && (t.isCurrentOfferClaimed(e) || t.state.claimed) && Object(b.k)(r)) {
                            var s = t.state.claimData || i.claimData;
                            return a.createElement(j, {
                                claimInstructions: e.claimInstructions,
                                code: s,
                                deliveryMethod: e.deliveryMethod,
                                orientation: t.props.orientation
                            })
                        }
                        return a.createElement(R, {
                            offerID: e.id,
                            offerDescription: e.description,
                            offerType: e.deliveryMethod,
                            externalReftag: t.props.externalReftag,
                            externalURL: n.externalURL,
                            claimCallback: t.claimOffer,
                            claiming: t.state.claiming,
                            index: t.props.index,
                            orientation: t.props.orientation
                        })
                    }, t.getErrorType = function() {
                        return t.state.error || b.b.UNKNOWN_ERROR
                    }, t.claimOffer = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.setState({
                            claiming: !0
                        });
                        var n = t.props.data;
                        if (!n.loading && !n.error && n.currentUser && n.currentUser.id) {
                            var i = t.props.offer,
                                r = Object(f.a)({
                                    offerID: i.id
                                });
                            t.props.claimPrimeOffer(r).then(function(e) {
                                var n = (e.data || {}).claimPrimeOffer || {},
                                    r = n.self || {},
                                    a = n.error || {};
                                if (r && r.hasEntitlement && i && t.setState({
                                        claimData: r.claimData,
                                        claiming: !1,
                                        claimed: !0,
                                        error: void 0
                                    }), a && a.code) {
                                    var o = b.b[a.code];
                                    t.setState({
                                        claiming: !1,
                                        claimed: !1,
                                        error: o || b.b.UNKNOWN_ERROR
                                    })
                                }
                            }).catch(function() {
                                t.setState({
                                    claiming: !1,
                                    claimed: !1,
                                    error: b.b.UNKNOWN_ERROR
                                })
                            })
                        }
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this.props.offer;
                    if (e) {
                        var t = this.props.orientation || b.c.Default;
                        return b.i(t) ? this.renderVerticalLayout(e) : this.renderHorizontalLayout(e)
                    }
                    return null
                }, t.prototype.isCurrentOfferClaimed = function(e) {
                    return (e.self || {
                        hasEntitlement: !1
                    }).hasEntitlement
                }, t
            }(a.Component)),
            M = Object(o.compose)(Object(c.a)(w, {
                name: "data"
            }), Object(c.a)(A, {
                name: "claimPrimeOffer"
            }), Object(d.d)("PrimeOffer"))(L),
            B = (n("WC9X"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this.props.orientation || b.c.Default,
                        t = Object(b.i)(e);
                    return a.createElement(u._35, {
                        className: "prime-offer-placeholder",
                        alignItems: u.c.Center,
                        borderBottom: t,
                        padding: {
                            x: 2,
                            y: 1
                        },
                        display: t ? u.R.Block : u.R.InlineBlock,
                        fullWidth: !0
                    }, a.createElement(u._8, {
                        className: "prime-offer-placeholder__title",
                        padding: {
                            y: .5
                        }
                    }, a.createElement(u._14, {
                        height: 20
                    })), a.createElement(u._14, {
                        height: 160
                    }), a.createElement(u._8, {
                        className: "prime-offer-placeholder__description",
                        padding: {
                            y: .5
                        }
                    }, a.createElement(u._14, {
                        height: 20,
                        width: 160
                    })), a.createElement(u._8, {
                        className: "prime-offer-placeholder__publisher"
                    }, a.createElement(u._14, {
                        height: 20,
                        width: 80
                    })), a.createElement(u._8, {
                        className: "prime-offer-placeholder__claim",
                        margin: {
                            top: 2,
                            bottom: 1
                        }
                    }, a.createElement(u._14, {
                        height: 40
                    })))
                }, t
            }(a.Component)),
            W = Object(d.d)("PrimeOfferPlaceholder", {
                autoReportInteractive: !0
            })(B),
            V = (n("7L7x"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(u._35, {
                        "data-test-target": "prime-offers-upsell",
                        "data-a-target": "prime-offers-upsell",
                        className: "prime-offers-upsell",
                        alignItems: u.c.Center,
                        padding: {
                            x: 2,
                            y: 1
                        },
                        borderBottom: !0
                    }, a.createElement(u.Q, {
                        type: u._49.H4
                    }, Object(s.d)("Claim With Twitch Prime", "PrimeUpsell")), a.createElement(u._8, {
                        className: "prime-upsell__logo-container",
                        fullWidth: !0,
                        margin: {
                            y: 2
                        },
                        textAlign: u._45.Center
                    }, a.createElement(u._24, {
                        asset: u._25.LogoTwitchPrime,
                        width: 330,
                        height: 150,
                        type: u._26.Brand
                    })), a.createElement(u.Q, {
                        type: u._49.P
                    }, Object(s.d)("Get free game loot like this every month plus surprises, ad-free viewing, and loads more with Twitch Prime.", "PrimeUpsell")), a.createElement(T, null))
                }, t
            }(a.Component)),
            H = Object(d.d)("PrimeUpsell", {
                autoReportInteractive: !0
            })(V),
            G = n("LXDe"),
            z = n("eY4D"),
            q = (n("DgR+"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderDesktopOffers = function(e) {
                        return a.createElement(u._8, {
                            className: "prime-offer-list__content--desktop"
                        }, t.renderSectionTitle(), a.createElement(u._55, {
                            childWidth: u._56.Large,
                            gutterSize: u._57.Small,
                            center: !0,
                            placeholderItems: 20
                        }, e))
                    }, t.renderSectionTitle = function() {
                        return t.props.sectionTitle && a.createElement(u._8, {
                            padding: {
                                top: 1
                            },
                            className: "prime-offers__title"
                        }, a.createElement(u.Q, {
                            type: u._49.H3,
                            color: u.K.Base,
                            bold: !0
                        }, t.props.sectionTitle))
                    }, t.renderMobileOffers = function(e) {
                        return a.createElement(u._8, {
                            className: "prime-offer-list__content--mobile"
                        }, t.renderSectionTitle(), e)
                    }, t.getOfferListOrientation = function() {
                        return t.props.listDirection || b.c.Default
                    }, t.shouldShowPlaceholders = function() {
                        if (!t.props.offersData) return !0;
                        var e = t.props.offersData,
                            n = e.primeOffers,
                            i = void 0 === n || null === n;
                        return e.loading || !e.error && i
                    }, t.renderOfferPlaceholders = function() {
                        for (var e = [], n = 0; n < 3; ++n) {
                            var i = a.createElement(W, {
                                key: n,
                                orientation: t.getOfferListOrientation()
                            });
                            e.push(i)
                        }
                        return e
                    }, t.shouldReportInteractive = function() {
                        return (!t.isUserDataLoading || t.isUserDataError) && (!t.isOffersDataLoading || t.isOffersDataError)
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.shouldReportInteractive() && this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.shouldReportInteractive() && this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this.getOfferListOrientation(),
                        t = e.toLowerCase(),
                        n = Object(b.g)("prime-offer-list", e),
                        i = "prime-offer-list__content prime-offer-list__content--" + t,
                        r = this.props.listDirection === b.c.Horizontal,
                        o = this.props.listDirection === b.c.Vertical,
                        s = this.renderOfferExperience();
                    return a.createElement(l.b, {
                        className: n,
                        suppressScrollX: o,
                        suppressScrollY: r
                    }, a.createElement(u._8, {
                        className: i,
                        alignItems: u.c.Center,
                        padding: {
                            top: 1,
                            bottom: 2,
                            x: 1
                        }
                    }, this.renderUpsell(), this.props.listDirection === b.c.Horizontal && this.renderDesktopOffers(s), this.renderMobileOffers(s)))
                }, t.prototype.renderUpsell = function() {
                    var e = this.props.userData;
                    if (!Object(b.j)(e) && !Object(b.k)(e) && !this.props.hideUpsell) return a.createElement(H, null)
                }, t.prototype.renderOfferExperience = function() {
                    var e = this,
                        t = this.props.offersData;
                    if (this.shouldShowPlaceholders()) return this.renderOfferPlaceholders();
                    if (!t.error && t.primeOffers && t.primeOffers.length) {
                        var n = this.getSortedOffers(),
                            i = n[n.length - 1];
                        return n.map(function(t, n) {
                            return a.createElement(M, {
                                externalReftag: e.props.externalReftag,
                                key: t.id,
                                offer: t,
                                isLast: i.id === t.id,
                                index: n,
                                orientation: e.getOfferListOrientation()
                            })
                        })
                    }
                    return a.createElement(m, null)
                }, t.prototype.getFreeGamesWithPrimeOfferIds = function() {
                    return s.b.get("prime_free_game_offerids", [])
                }, t.prototype.getSortedOffers = function() {
                    var e = this,
                        t = this.getUserId();
                    if (!this.props.offersData || !this.props.offersData.primeOffers) return [];
                    var n = this.props.offersData.primeOffers;
                    if (t) {
                        var i = n.filter(function(t) {
                                return !e.offerHasExternalURL(t) && t.self && t.self.hasEntitlement
                            }).sort(b.n),
                            r = this.filterOffersByOfferType(i),
                            a = n.filter(function(t) {
                                return e.offerHasExternalURL(t) || !t.self || !t.self.hasEntitlement
                            }).sort(b.n);
                        return this.filterOffersByOfferType(a).concat(r)
                    }
                    return this.filterOffersByOfferType(n).slice().sort(b.n)
                }, t.prototype.offerHasExternalURL = function(e) {
                    var t = e && e.content;
                    return t && t.externalURL
                }, t.prototype.filterOffersByOfferType = function(e) {
                    var t = this.getFreeGamesWithPrimeOfferIds();
                    return this.props.offerFilterType === G.a.Game ? e.filter(function(e) {
                        return t.includes(e.id)
                    }).sort(b.n) : this.props.offerFilterType === G.a.InGameLoot ? e.filter(function(e) {
                        return !t.includes(e.id)
                    }).sort(b.n) : e
                }, t.prototype.getUserId = function() {
                    var e = this.props.userData;
                    return e && !e.loading && !e.error && e.currentUser && e.currentUser.id ? e.currentUser.id : ""
                }, Object.defineProperty(t.prototype, "isUserDataLoading", {
                    get: function() {
                        var e = this.props.userData;
                        return e && e.loading
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "isUserDataError", {
                    get: function() {
                        var e = this.props.userData;
                        return e && e.error
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "isOffersDataLoading", {
                    get: function() {
                        var e = this.props.offersData;
                        return e && e.loading
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "isOffersDataError", {
                    get: function() {
                        var e = this.props.offersData;
                        return e && e.error
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(a.Component)),
            Q = Object(o.compose)(Object(c.a)(z, {
                name: "offersData",
                options: function() {
                    return {
                        variables: {
                            dateOverride: Object(b.e)()
                        }
                    }
                },
                skip: function(e) {
                    return !e.firstPageLoaded && !e.ignoreFirstPageLoad
                }
            }), Object(c.a)(w, {
                name: "userData",
                skip: function(e) {
                    return !e.firstPageLoaded && !e.ignoreFirstPageLoad
                }
            }), Object(d.d)("PrimeOfferList"))(q);
        var K = Object(i.b)(function(e) {
            return {
                firstPageLoaded: e.session.firstPageLoaded
            }
        })(Q);
        n.d(t, "a", function() {
            return K
        })
    },
    M5Tl: function(e, t) {},
    MAZT: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return u
        });
        var i = n("TToO"),
            r = n("6gPI"),
            a = (n.n(r), n("+UWA")),
            o = (n.n(a), n("Ejve")),
            s = n("5LoI"),
            l = n("PHcJ"),
            c = n("6uxC"),
            d = (n.n(c), {
                games: {
                    indexName: s.a.Games,
                    hitsPerPage: 2,
                    topNumericFilters: ["popularity>1"],
                    singleTypeNumericFilters: [],
                    optionalFacetFilters: ""
                },
                videos: {
                    indexName: s.a.Videos,
                    hitsPerPage: 6,
                    get topNumericFilters() {
                        return ["created_at>" + function(e) {
                            if (e <= 100) return e;
                            return 100 * Math.round(e / 100)
                        }((e = new Date, e.setMonth(e.getMonth() - 1), Math.floor(e.getTime() / 1e3)))];
                        var e
                    },
                    singleTypeNumericFilters: [],
                    optionalFacetFilters: ""
                },
                users: {
                    indexName: s.a.Users,
                    hitsPerPage: 2,
                    topNumericFilters: ["followers>50"],
                    singleTypeNumericFilters: [],
                    optionalFacetFilters: ""
                },
                channels: {
                    indexName: s.a.Channels,
                    hitsPerPage: 6,
                    get topNumericFilters() {
                        return ["channel_count>10", "updated_on>" + p()]
                    },
                    get singleTypeNumericFilters() {
                        return ["updated_on>" + p()]
                    },
                    optionalFacetFilters: ""
                },
                communities: {
                    indexName: s.a.Communities,
                    hitsPerPage: 2,
                    topNumericFilters: [],
                    singleTypeNumericFilters: [],
                    optionalFacetFilters: ""
                }
            }),
            u = function() {
                function e(e) {
                    this.client = r(e.appId, e.apiKey), this.stats = a.Stats.getInstance(e.config.buildType === o.a.Production ? "production" : "development", "twilight.features.algolia"), this.logger = e.logger.withCategory("search-client"), this.getCountryCode(e.apolloClient)
                }
                return e.prototype.queryTopResults = function(e, t) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var n, r, a, o;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return r = [], (n = []).push(this.getTopResult(d.games, e)), n.push(this.getTopResult(d.videos, e)), n.push(this.getTopResult(d.users, e)), n.push(this.getTopResult(d.channels, e)), n.push(this.getTopResult(d.communities, e)), r.push(this.getTotalResult(d.games, e)), r.push(this.getTotalResult(d.videos, e)), r.push(this.getTotalResult(d.users, e)), r.push(this.getTotalResult(d.channels, e)), [4, this.query(n.concat(r))];
                                case 1:
                                    return (a = i.sent()) ? (o = a.results, [2, {
                                        id: t,
                                        games: {
                                            totalHits: o[5].nbHits,
                                            hits: o[0].hits
                                        },
                                        videos: {
                                            totalHits: o[6].nbHits,
                                            hits: o[1].hits
                                        },
                                        users: {
                                            totalHits: o[7].nbHits,
                                            hits: o[2].hits
                                        },
                                        channels: {
                                            totalHits: o[8].nbHits,
                                            hits: o[3].hits
                                        },
                                        communities: {
                                            totalHits: o[4].nbHits,
                                            hits: o[4].hits
                                        }
                                    }]) : [2, function(e) {
                                        return {
                                            id: e,
                                            games: {
                                                totalHits: 0,
                                                hits: []
                                            },
                                            videos: {
                                                totalHits: 0,
                                                hits: []
                                            },
                                            users: {
                                                totalHits: 0,
                                                hits: []
                                            },
                                            channels: {
                                                totalHits: 0,
                                                hits: []
                                            },
                                            communities: {
                                                totalHits: 0,
                                                hits: []
                                            }
                                        }
                                    }(t)]
                            }
                        })
                    })
                }, e.prototype.queryForType = function(e, t, n, r) {
                    var a = void 0 === r ? {} : r,
                        o = a.page,
                        l = void 0 === o ? 0 : o,
                        c = a.hitsPerPage,
                        u = void 0 === c ? 50 : c,
                        p = a.facetFilters,
                        m = void 0 === p ? "" : p,
                        h = a.numericFilters;
                    return i.__awaiter(this, void 0, void 0, function() {
                        var r, a, o, c, p, f, g, v = this;
                        return i.__generator(this, function(b) {
                            switch (b.label) {
                                case 0:
                                    switch (r = {
                                        id: n,
                                        currentPage: l
                                    }, a = function(e) {
                                        return i.__awaiter(v, void 0, void 0, function() {
                                            var n, a;
                                            return i.__generator(this, function(i) {
                                                switch (i.label) {
                                                    case 0:
                                                        return n = {
                                                            indexName: e.indexName,
                                                            query: t,
                                                            params: {
                                                                page: l,
                                                                hitsPerPage: u,
                                                                numericFilters: h || e.singleTypeNumericFilters,
                                                                facets: "*",
                                                                facetFilters: m
                                                            }
                                                        }, [4, this.query([n])];
                                                    case 1:
                                                        return (a = i.sent()) ? (r.exhaustedHits = !a.results[0].nbHits || a.results[0].hits.length < u, [2, {
                                                            totalHits: a.results[0].nbHits,
                                                            hits: a.results[0].hits
                                                        }]) : (r.exhaustedHits = !0, [2, {
                                                            totalHits: 0,
                                                            hits: []
                                                        }])
                                                }
                                            })
                                        })
                                    }, e) {
                                        case s.a.Games:
                                            return [3, 1];
                                        case s.a.Users:
                                            return [3, 3];
                                        case s.a.Channels:
                                            return [3, 5];
                                        case s.a.Videos:
                                            return [3, 7];
                                        case s.a.Communities:
                                            return [3, 9]
                                    }
                                    return [3, 11];
                                case 1:
                                    return o = r, [4, a(d.games)];
                                case 2:
                                    return o.games = b.sent(), [3, 12];
                                case 3:
                                    return c = r, [4, a(d.users)];
                                case 4:
                                    return c.users = b.sent(), [3, 12];
                                case 5:
                                    return p = r, [4, a(d.channels)];
                                case 6:
                                    return p.channels = b.sent(), [3, 12];
                                case 7:
                                    return f = r, [4, a(d.videos)];
                                case 8:
                                    return f.videos = b.sent(), [3, 12];
                                case 9:
                                    return g = r, [4, a(d.communities)];
                                case 10:
                                    return g.communities = b.sent(), [3, 12];
                                case 11:
                                    return [2, null];
                                case 12:
                                    return [2, r]
                            }
                        })
                    })
                }, e.prototype.queryVideos = function(e, t, n) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var r, a, o, c;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    switch (n.sort) {
                                        case l.b.Newest:
                                            r = s.a.VideosNewest;
                                            break;
                                        case l.b.Popular:
                                        default:
                                            r = s.a.Videos
                                    }
                                    switch (a = [], n.length) {
                                        case l.a.Short:
                                            a.push("length<=900");
                                            break;
                                        case l.a.Long:
                                            a.push("length>900")
                                    }
                                    switch (o = {
                                        indexName: r,
                                        query: e,
                                        params: {
                                            page: 0,
                                            hitsPerPage: 50,
                                            numericFilters: a,
                                            facets: "*",
                                            facetFilters: ""
                                        }
                                    }, n.type) {
                                        case l.c.PastBroadcasts:
                                            o.params.facetFilters = "broadcast_type:archive";
                                            break;
                                        case l.c.Uploads:
                                            o.params.facetFilters = "broadcast_type:upload";
                                            break;
                                        case l.c.Highlights:
                                            o.params.facetFilters = "broadcast_type:highlight"
                                    }
                                    return [4, this.query([o])];
                                case 1:
                                    return (c = i.sent()) ? [2, {
                                        id: t,
                                        totalHits: c.results[0].nbHits,
                                        hits: c.results[0].hits
                                    }] : [2, {
                                        id: t,
                                        totalHits: 0,
                                        hits: []
                                    }]
                            }
                        })
                    })
                }, e.prototype.getCountryCode = function(e) {
                    var t = this;
                    e.query({
                        query: c
                    }).then(function(e) {
                        t.countryCode = e.data.requestInfo.countryCode
                    }).catch(function(e) {
                        t.logger.error(e, "Failed to get country code")
                    })
                }, e.prototype.getTopResult = function(e, t) {
                    return {
                        indexName: e.indexName,
                        query: t,
                        params: {
                            page: 0,
                            hitsPerPage: e.hitsPerPage,
                            numericFilters: e.topNumericFilters
                        }
                    }
                }, e.prototype.getTotalResult = function(e, t) {
                    return {
                        indexName: e.indexName,
                        query: t,
                        params: {
                            hitsPerPage: 0,
                            numericFilters: e.singleTypeNumericFilters
                        }
                    }
                }, e.prototype.query = function(e) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var t, n, r, a;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    n = Date.now(), a = !1, i.label = 1;
                                case 1:
                                    return i.trys.push([1, 3, , 4]), [4, this.client.search(e)];
                                case 2:
                                    return t = i.sent(), [3, 4];
                                case 3:
                                    return i.sent(), a = !0, t = null, [3, 4];
                                case 4:
                                    r = Date.now();
                                    try {
                                        this.countryCode && (a ? (this.stats.logCounter("error." + this.countryCode, 1), this.stats.logTimer("error_duration." + this.countryCode, r - n)) : (this.stats.logCounter("success." + this.countryCode, 1), this.stats.logTimer("success_duration." + this.countryCode, r - n)))
                                    } catch (t) {
                                        this.logger.error(t, "Failed to send search stats", e)
                                    }
                                    return [2, t]
                            }
                        })
                    })
                }, e
            }();

        function p() {
            return Math.floor(((new Date).getTime() - 6e5) / 1e3)
        }
    },
    MTHJ: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "InsiderPassTabRewards"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "tournament"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "rewards"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "insider"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "heroSkins"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "type"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "imageURL"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "description"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "canBeFulfilled"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "isEntitled"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "isPrimeOnly"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "quantity"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "inGameContent"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "type"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "imageURL"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "description"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "canBeFulfilled"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "isEntitled"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "isPrimeOnly"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "quantity"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 312
            }
        };
        n.loc.source = {
            body: "query InsiderPassTabRewards($channelID: ID!) {\nuser(id: $channelID) {\nid\ntournament {\nid\nrewards {\ninsider {\nheroSkins {\nid\nname\ntype\nimageURL\ndescription\ncanBeFulfilled\nisEntitled\nisPrimeOnly\nquantity\n}\ninGameContent {\nid\nname\ntype\nimageURL\ndescription\ncanBeFulfilled\nisEntitled\nisPrimeOnly\nquantity\n}\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    MnLQ: function(e, t) {},
    MsZa: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("3zLD"),
            o = n("RH2O"),
            s = n("7vx8"),
            l = n("WIs4"),
            c = n("aMxy"),
            d = n("HZww"),
            u = n("Aj/L"),
            p = n("Odds"),
            m = n("6sO2"),
            h = n("+Znq"),
            f = n("N221"),
            g = n("jF7o"),
            v = n("iMOk"),
            b = n("WVx7"),
            k = n("jUhM"),
            y = n("ZJYd"),
            _ = n("/LBW"),
            S = (n("QAz8"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handlePromoBuy = function(e) {
                        var n = Object(y.b)({
                            trackBitsCardInteraction: t.props.trackBitsCardInteraction,
                            channelID: t.props.channelID,
                            purchaseUrl: e.currentTarget.dataset.purchaseUrl,
                            bitsAmount: e.currentTarget.dataset.bitsAmount,
                            location: _.b.GetBitsButton
                        });
                        n && t.props.onPromoBuyClose(n)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = r.createElement(p._8, {
                        "data-test-selector": "first-time-user-intro"
                    }, r.createElement(p._8, {
                        padding: {
                            x: 5,
                            y: 2
                        },
                        textAlign: p._45.Center
                    }, r.createElement(p.Q, {
                        type: p._49.H4,
                        bold: !0
                    }, Object(m.d)("Cheer Bits for your Favorite Streamer!", "Bits--FirstTimeUserPrompt"))), r.createElement(p._8, {
                        padding: {
                            x: 2,
                            bottom: 1
                        }
                    }, r.createElement(p.Q, {
                        type: p._49.Span,
                        color: p.K.Alt
                    }, Object(m.d)("Bits are fun, animated emotes. Cheering Bits celebrates moments you love with the community right in chat and similar to subscribing, helps support Partners and Affiliates.", "Bits--FirstTimeUserPrompt"), r.createElement(p._2, {
                        margin: {
                            left: .5
                        }
                    }, r.createElement("a", {
                        onClick: this.props.toggleShowTutorial
                    }, Object(m.d)("How do I cheer?", "Bits--FirstTimeUserPrompt"))))), r.createElement(p._8, {
                        padding: {
                            bottom: 2
                        },
                        textAlign: p._45.Center
                    }, r.createElement(p._2, {
                        margin: {
                            bottom: 1
                        }
                    }, r.createElement(p.Q, {
                        type: p._49.H6,
                        bold: !0,
                        className: "bits-first-time-user-prompt__promo-header"
                    }, Object(m.d)("First Time Purchaser Discount Pack!", "Bits--FirstTimeUserPrompt"))), r.createElement(p.v, {
                        onClick: this.handlePromoBuy,
                        "data-purchase-url": this.props.promo.url,
                        "data-bits-amount": this.props.promo.bits,
                        "data-a-target": "bits-purchase-button-" + this.props.promo.bits
                    }, Object(m.d)("{price} For {amount} Bits", {
                        price: this.props.promo.price,
                        amount: this.props.promo.bits
                    }, "Bits--FirstTimeUserPrompt"))));
                    return this.props.isShowingTutorial ? r.createElement(p._8, {
                        className: "bits-first-time-user-prompt",
                        fullWidth: !0
                    }, r.createElement(p._8, {
                        className: "bits-first-time-user-prompt__tutorial-back-button"
                    }, r.createElement(p.v, {
                        onClick: this.props.toggleShowTutorial,
                        type: p.B.Text
                    }, r.createElement(p._24, {
                        asset: p._25.Play,
                        height: 8
                    }), " ", Object(m.d)("Back", "Bits--FirstTimeUserPrompt"))), r.createElement(p._8, {
                        textAlign: p._45.Center,
                        padding: {
                            x: 2,
                            bottom: 2,
                            top: 5
                        },
                        fullHeight: !0
                    }, r.createElement(p.e, {
                        type: p.j.SlideInLeft,
                        duration: p.g.Long,
                        enabled: !0
                    }, r.createElement(k.a, null)))) : this.props.animateFirstTimeUserIntro ? r.createElement(p._2, {
                        className: "bits-first-time-user-prompt"
                    }, r.createElement(p.e, {
                        type: p.j.SlideInRight,
                        duration: p.g.Long,
                        enabled: this.props.animateFirstTimeUserIntro
                    }, e)) : r.createElement(p._8, {
                        className: "bits-first-time-user-prompt"
                    }, e)
                }, t
            }(r.Component)),
            E = n("jxGs"),
            C = n("bkpq"),
            N = n("CSlQ"),
            T = n("m5Kq"),
            w = (n("a2ud"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hideFirstTimeUserIntro: !1
                    }, t.trackBitsCardInteraction = function(e, n) {
                        var i = {
                            actionName: e,
                            emoteType: n && n.emoteType,
                            emoteLevel: n && n.emoteLevel,
                            location: _.b.GetBitsButton,
                            displayedBalance: t.props.bitsBalance || 0
                        };
                        Object(_.h)(i)
                    }, t.onClose = function() {}, t.onPromoBuyClose = function(e) {
                        Object(g.a)(e, function() {
                            t.props.data && t.props.data.refetch()
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.props.loading) return r.createElement(p._35, {
                        "data-a-target": "get-bits-button-content-loading",
                        display: p.R.Flex,
                        flexDirection: p.T.Column,
                        alignItems: p.c.Center,
                        justifyContent: p._7.Center,
                        textAlign: p._45.Center,
                        padding: {
                            y: 5
                        }
                    }, r.createElement(p._10, {
                        delay: 0
                    }), r.createElement(p._8, {
                        padding: {
                            top: 2
                        }
                    }, r.createElement(p.Q, {
                        italic: !0
                    }, Object(m.d)("Fetching bits", "Bits--GetBitsButtonContent"))));
                    var e = null;
                    if (this.props.bitsOffers) {
                        var t = this.props.bitsOffers.find(function(e) {
                            return Object(y.c)(e)
                        });
                        t && t.type === E.b && !this.state.hideFirstTimeUserIntro && (e = r.createElement(S, {
                            promo: t,
                            animateFirstTimeUserIntro: this.props.animateFirstTimeUserIntro,
                            isShowingTutorial: this.props.isShowingTutorial,
                            toggleShowTutorial: this.props.toggleShowTutorial,
                            trackBitsCardInteraction: this.trackBitsCardInteraction,
                            channelID: this.props.channelID || "",
                            onPromoBuyClose: this.onPromoBuyClose
                        }))
                    }
                    var n = null;
                    void 0 !== this.props.bitsBalance ? n = r.createElement(p._35, {
                        borderBottom: !0,
                        textAlign: p._45.Center,
                        fullWidth: !0,
                        padding: {
                            y: .5
                        }
                    }, r.createElement(p.Q, {
                        type: p._49.Span
                    }, Object(m.d)("You have {bitsBalance}", {
                        bitsBalance: r.createElement(v.a, {
                            withImage: !0,
                            withText: !0,
                            count: this.props.bitsBalance,
                            bitsConfig: this.props.bitsConfig
                        })
                    }, "Bits--GetBitsButton"))) : void 0 === this.props.bitsBalance && (n = r.createElement(p._35, {
                        borderBottom: !0,
                        textAlign: p._45.Center,
                        fullWidth: !0,
                        padding: {
                            y: .5
                        }
                    }, r.createElement(p.Q, {
                        type: p._49.Span
                    }, Object(m.d)("{bitsGem} Log in to see your Bits balance", {
                        bitsGem: r.createElement(v.a, {
                            count: 100,
                            withImage: !0,
                            bitsConfig: this.props.bitsConfig
                        })
                    }, "Bits--GetBitsButton"))));
                    var i = null;
                    return (this.props.channelLogin || this.props.isInTopNav) && (i = r.createElement(b.a, {
                        bitsConfig: this.props.bitsConfig,
                        channelLogin: this.props.channelLogin || "",
                        closeAllBits: this.onClose,
                        onClose: this.onClose,
                        trackBitsCardInteraction: this.trackBitsCardInteraction,
                        location: _.b.GetBitsButton,
                        hidePromos: !0,
                        hideWateb: !0,
                        fullsize: !0
                    })), r.createElement(f.b, {
                        className: "get-bits-button-content"
                    }, r.createElement(p._8, null, n, e, i))
                }, t
            }(r.Component)),
            O = Object(a.compose)(Object(N.d)("GetBitsButtonContent"), Object(s.a)(T, {
                name: "data",
                props: function(e) {
                    var t, n, i, r;
                    return e.data && e.data.user && e.data.user.cheer && (t = Object(C.a)(e.data.user.cheer.emotes), n = e.data.user.id), e.data && e.data.currentUser ? (r = e.data.currentUser.bitsBalance, i = e.data.currentUser.bitsOffers) : e.data && e.data.bitsOffers && (i = e.data.bitsOffers), {
                        loading: e.data && e.data.loading,
                        bitsOffers: i,
                        bitsBalance: r,
                        bitsConfig: t,
                        channelID: n
                    }
                },
                skip: function(e) {
                    return !e.channelLogin && !e.isInTopNav
                },
                options: function(e) {
                    return {
                        variables: {
                            login: e.channelLogin,
                            withChannel: !!e.channelLogin,
                            isLoggedIn: e.isLoggedIn
                        }
                    }
                }
            }))(w),
            R = (n("FVEF"), "get-bits-button__top-nav-button"),
            D = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isShowingTutorial: !1,
                        animateFirstTimeUserIntro: !1
                    }, t.renderButton = function() {
                        var e = Object(m.d)("Get Bits", "Bits--GetBitsButton");
                        if (t.props.isInTopNav) {
                            var n = void 0;
                            return n = t.props.bitsBalance && t.props.bitsBalance > 0 ? r.createElement(p.Q, null, t.props.bitsBalance) : r.createElement(p.Q, null, e), r.createElement("button", {
                                className: "get-bits-button",
                                "data-test-selector": R
                            }, t.renderBitsGem(), r.createElement(p._8, {
                                margin: {
                                    x: .5
                                }
                            }, n))
                        }
                        return r.createElement(p.v, {
                            dropdown: !0
                        }, e)
                    }, t.renderBitsGem = function() {
                        return r.createElement("svg", {
                            width: "20px",
                            height: "20px",
                            viewBox: "0 0 20 20",
                            version: "1.1",
                            xmlns: "http://www.w3.org/2000/svg"
                        }, r.createElement("g", {
                            id: "Page-1",
                            stroke: "none",
                            strokeWidth: "1",
                            fill: "none",
                            fillRule: "evenodd"
                        }, r.createElement("g", {
                            id: "icons/Bits",
                            fill: "#000000"
                        }, r.createElement("g", {
                            id: "Bits",
                            transform: "translate(3.000000, 2.000000)"
                        }, r.createElement("path", {
                            className: "get-bits-button__bits-gem",
                            d: "M6.5917,7.0811 C6.8507,6.9741 7.1497,6.9741 7.4077,7.0811 L13.9997,9.8021 L7.8777,0.4661 C7.6877,0.1761 7.3567,0.0001 6.9997,0.0001 C6.6437,0.0001 6.3127,0.1761 6.1217,0.4661 L-0.0003,9.8021 L6.5917,7.0811 Z",
                            id: "Fill-1"
                        }), r.createElement("path", {
                            className: "get-bits-button__bits-gem",
                            d: "M6.9999,9 L0.9999,11.638 L6.4069,15.798 C6.5829,15.933 6.7919,16 6.9999,16 C7.2079,16 7.4169,15.933 7.5929,15.798 L12.9999,11.638 L6.9999,9 Z",
                            id: "Fill-4"
                        })))))
                    }, t.toggleBalloon = function(e) {
                        t.setState({
                            animateFirstTimeUserIntro: !1
                        }), e || Object(_.h)({
                            actionName: _.a.BuyMain,
                            location: _.b.GetBitsButton,
                            displayedBalance: 0
                        })
                    }, t.toggleShowTutorial = function() {
                        t.setState({
                            isShowingTutorial: !t.state.isShowingTutorial,
                            animateFirstTimeUserIntro: !0
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = null;
                    return (this.props.channelLogin || this.props.isInTopNav) && (e = r.createElement(O, {
                        isLoggedIn: this.props.isLoggedIn,
                        channelLogin: this.props.channelLogin,
                        toggleShowTutorial: this.toggleShowTutorial,
                        isShowingTutorial: this.state.isShowingTutorial,
                        animateFirstTimeUserIntro: this.state.animateFirstTimeUserIntro,
                        isInTopNav: this.props.isInTopNav
                    })), r.createElement(h.a, {
                        onToggle: this.toggleBalloon
                    }, this.renderButton(), r.createElement(p.q, {
                        direction: p.r.BottomRight,
                        size: p.s.Large
                    }, e))
                }, t
            }(r.Component),
            I = Object(a.compose)(Object(N.d)("GetBitsButton"))(D),
            x = n("R5UN"),
            F = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.data && this.props.data.loading && !this.props.data.error;
                    if (this.props.isInTopNav && (!this.props.firstPageLoaded || e)) return r.createElement(p._14, {
                        width: 100,
                        height: 32,
                        overlay: !0
                    });
                    var t = this.props.data && this.props.data.currentUser ? this.props.data.currentUser.bitsBalance : null;
                    return r.createElement(I, {
                        isLoggedIn: this.props.isLoggedIn,
                        channelLogin: this.props.channelLogin,
                        isInTopNav: this.props.isInTopNav,
                        bitsBalance: t
                    })
                }, t
            }(r.Component),
            P = Object(a.compose)(Object(s.a)(x, {
                skip: function(e) {
                    return !e.isLoggedIn || !e.isInTopNav || !e.firstPageLoaded
                }
            }), Object(l.a)(function(e) {
                return {
                    query: x,
                    topic: e.data && e.data.currentUser ? Object(d.u)(e.data.currentUser.id) : "",
                    skip: !(e.data && !e.data.loading && !e.data.error && e.data.currentUser && e.isLoggedIn && e.isInTopNav && e.firstPageLoaded),
                    type: c.PubsubMessageType.UserBitsBalanceUpdate,
                    mutator: function(e, t) {
                        return t.currentUser && (t.currentUser.bitsBalance = e.data.balance), t
                    }
                }
            }))(F);
        var U = Object(o.b)(function(e) {
            return {
                firstPageLoaded: e.session.firstPageLoaded,
                isLoggedIn: Object(u.d)(e)
            }
        })(P);
        n.d(t, !1, function() {
            return F
        }), n.d(t, !1, function() {
            return P
        }), n.d(t, "a", function() {
            return U
        })
    },
    N5sm: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "WhisperThread_SetThreadSpamStatus"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateWhisperThreadInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "spamInfo"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "lastMarkedNotSpamAt"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "likelihood"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 178
            }
        };
        n.loc.source = {
            body: "mutation WhisperThread_SetThreadSpamStatus($input: UpdateWhisperThreadInput!) {\nupdateWhisperThread(input: $input) {\nthread {\nid\nspamInfo {\nlastMarkedNotSpamAt\nlikelihood\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    NY9D: function(e, t, n) {
        "use strict";
        t.c = function(e) {
            return "/directory/game/" + encodeURIComponent(e)
        }, t.a = function(e) {
            return "/communities/" + encodeURIComponent(e)
        }, t.b = function(e) {
            return "/events/" + encodeURIComponent(e)
        }, t.d = function(e) {
            return "/" + encodeURIComponent(e) + "/manager"
        }
    },
    NikC: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.b = function(e, t, n) {
            void 0 === n && (n = !0);
            return function(i) {
                i(Object(a.A)(e)), n && Object(r.d)(e), t && Object(o.b)(e, t)
            }
        };
        var i, r = n("VAT8"),
            a = n("7enT"),
            o = n("xrVp");
        ! function(e) {
            e[e.UserMenu = 1] = "UserMenu", e[e.TypedCommand = 2] = "TypedCommand"
        }(i || (i = {}))
    },
    OcEY: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "bitsOffersFragment"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "BitsOffer"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "type"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "bits"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "InlineFragment",
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BitsBundleOffer"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "price"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "discount"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPromo"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "url"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "includesVAT"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "promotion"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 145
            }
        };
        n.loc.source = {
            body: "fragment bitsOffersFragment on BitsOffer {\nid\ntype\nbits\n... on BitsBundleOffer {\nprice\ndiscount\nisPromo\nurl\nincludesVAT\npromotion {\nid\ntype\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Ouuk: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            e || (e = navigator.userAgent);
            return !!i.exec(e)
        };
        var i = /\scurse\/\d/
    },
    "P+j/": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("3zLD"),
            o = n("RH2O"),
            s = n("7vx8"),
            l = n("RweG"),
            c = n("Ldv2"),
            d = n("TeXj"),
            u = n("Aj/L"),
            p = n("Tzcg"),
            m = n("6sO2"),
            h = n("nEoF"),
            f = n("FDYX"),
            g = n("CSlQ"),
            v = n("CwIZ"),
            b = n("HW6M"),
            k = n("zCIC"),
            y = n("6BvN");

        function _(e) {
            return e.charCode === y.a.Enter || e.charCode === y.a.Space
        }
        var S = n("7LIQ"),
            E = n("J4ib"),
            C = n("Odds"),
            N = (n("9uSE"), function(e) {
                var t = {
                        "emote-picker__tab": !0
                    },
                    n = null,
                    a = null;
                if (e.channelTabVisible) {
                    var o = b(i.__assign({}, t, {
                        "emote-picker__tab--active": e.channelTabEnabled && e.channelTabSelected,
                        "emote-picker__tab--disabled": !e.channelTabEnabled
                    }));
                    n = r.createElement(C._2, {
                        padding: {
                            x: 1
                        }
                    }, r.createElement("div", {
                        key: "ChannelTabLink",
                        id: "emote-picker__channel",
                        className: o,
                        onClick: e.channelTabEnabled ? e.selectChannelTab : void 0,
                        onKeyPress: e.channelTabEnabled ? e.selectChannelTabKeypress : void 0,
                        "data-a-target": "emote-channel-tab",
                        tabIndex: 0
                    }, r.createElement("span", null, Object(E.d)("Channel", "EmotePicker"))))
                }
                if (e.allTabVisible) {
                    var s = b(i.__assign({}, t, {
                        "emote-picker__tab--active": !(e.channelTabSelected && e.channelTabEnabled)
                    }));
                    a = r.createElement(C._2, {
                        padding: {
                            x: 1
                        }
                    }, r.createElement("div", {
                        key: "allTabLink",
                        id: "emote-picker__all",
                        className: s,
                        onClick: e.selectAllTab,
                        onKeyPress: e.selectAllTabKeypress,
                        "data-a-target": "emote-all-tab",
                        tabIndex: 0
                    }, r.createElement("span", null, Object(E.d)("All", "EmotePicker"))))
                }
                return r.createElement(C._35, {
                    background: C.n.Base,
                    borderTop: !0,
                    className: "emote-picker__tabs-container"
                }, n, a)
            }),
            T = n("YEG/"),
            w = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = [];
                    if (this.props.subscribeTexts)
                        for (var t = 0; t <= this.props.plan.level; t++) {
                            var n = this.props.subscribeTexts[t];
                            n && (t < this.props.plan.level ? (e.push(r.createElement("span", {
                                key: "upsell-predicate:" + t
                            }, n)), e.push(r.createElement("span", {
                                key: "upsell-plus:" + t
                            }, " + "))) : this.props.plan.level > 0 ? e.push(r.createElement("strong", {
                                key: "upsell-strong-end:" + this.props.plan.level
                            }, n)) : e.push(r.createElement("span", {
                                key: "upsell-end:" + t
                            }, n)))
                        }
                    if (!this.props.plan.emoteSetID) return null;
                    var i = {
                            id: this.props.plan.emoteSetID,
                            emotes: this.props.plan.emotes || []
                        },
                        a = {};
                    return this.props.plan.price && (a.purchase = this.props.plan.price), r.createElement(C._8, {
                        className: "emote-picker-plan-upsell",
                        display: C.R.Flex,
                        flexDirection: C.T.Column,
                        alignItems: C.c.Center,
                        margin: {
                            bottom: 1
                        }
                    }, r.createElement(S.a, {
                        emoteSet: i,
                        locked: !0
                    }), r.createElement(C._8, {
                        margin: 1,
                        alignItems: C.c.Center
                    }, e), r.createElement(T.a, {
                        isSubbedToTier: !1,
                        tierPrice: a.purchase || "",
                        reportSubAction: this.props.reportSubAction,
                        url: this.props.plan.url,
                        isEsportChannel: this.props.isEsportChannel
                    }))
                }, t
            }(r.Component),
            O = (n("Xo53"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.channelTabSelectionKeypress = function(e) {
                        _(e) && n.selectChannelTab(e)
                    }, n.allTabSelectionKeypress = function(e) {
                        _(e) && n.selectAllTab(e)
                    }, n.closeOnEsc = function(e) {
                        e.keyCode === y.a.Esc && n.props.toggleVisibility()
                    }, n.handleFilterChange = function(e) {
                        var t = e.target.value,
                            i = t.toLowerCase(),
                            r = n.filterAvailableUpsells(n.props.availableUpsells, i),
                            a = n.filterEmoteSets(n.props.ownedChannelEmoteSets, i);
                        n.setState({
                            filter: i,
                            filteredAllEmoteSets: n.filterEmoteSets(n.props.allEmoteSets, i),
                            filteredAvailableUpsells: r,
                            filteredOwnedChannelEmoteSets: a,
                            inputValue: t,
                            channelTabEnabled: a.length > 0 || r.length > 0
                        })
                    }, n.state = {
                        filter: "",
                        filteredOwnedChannelEmoteSets: t.ownedChannelEmoteSets,
                        filteredAvailableUpsells: t.availableUpsells,
                        filteredAllEmoteSets: t.allEmoteSets,
                        inputValue: "",
                        channelTabSelected: !0,
                        channelTabEnabled: t.ownedChannelEmoteSets.length > 0 || t.availableUpsells.length > 0
                    }, n.selectAllTab = function() {
                        return n.setChannelTabSelected(!1)
                    }, n.selectChannelTab = function() {
                        return n.setChannelTabSelected(!0)
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    if (!e.gqlError)
                        if (this.state.filter.length > 0) {
                            var t = this.filterAvailableUpsells(this.props.availableUpsells, this.state.filter),
                                n = this.filterEmoteSets(this.props.ownedChannelEmoteSets, this.state.filter);
                            this.setState({
                                filteredAllEmoteSets: this.filterEmoteSets(this.props.allEmoteSets, this.state.filter),
                                filteredAvailableUpsells: t,
                                filteredOwnedChannelEmoteSets: n,
                                channelTabEnabled: n.length > 0 || t.length > 0
                            })
                        } else this.setState({
                            filteredOwnedChannelEmoteSets: e.ownedChannelEmoteSets,
                            filteredAvailableUpsells: e.availableUpsells,
                            filteredAllEmoteSets: e.allEmoteSets,
                            channelTabEnabled: e.ownedChannelEmoteSets.length > 0 || e.availableUpsells.length > 0
                        })
                }, t.prototype.render = function() {
                    return r.createElement(C.q, {
                        "data-a-target": "emote-picker",
                        direction: this.props.direction ? this.props.direction : C.r.TopRight,
                        size: this.props.size ? this.props.size : C.s.Medium,
                        noTail: !0,
                        show: !0
                    }, r.createElement(C._8, {
                        className: b("emote-picker")
                    }, this.renderTabContent(), r.createElement(C._8, {
                        className: "emote-picker__controls-container",
                        position: C._15.Relative
                    }, r.createElement(C._35, {
                        padding: 1,
                        borderTop: !0
                    }, r.createElement(C._4, {
                        autoFocus: !0,
                        onChange: this.handleFilterChange,
                        onKeyDown: this.closeOnEsc,
                        placeholder: Object(m.d)("Search for Emotes", "EmotePicker"),
                        type: C._5.Text,
                        value: this.state.inputValue
                    })), r.createElement(N, {
                        allTabVisible: this.props.allEmoteSets.length > 0,
                        channelTabEnabled: this.state.channelTabEnabled,
                        channelTabSelected: this.state.channelTabSelected,
                        channelTabVisible: !!this.props.channelTabVisible,
                        selectAllTab: this.selectAllTab,
                        selectAllTabKeypress: this.allTabSelectionKeypress,
                        selectChannelTab: this.selectChannelTab,
                        selectChannelTabKeypress: this.channelTabSelectionKeypress
                    }))))
                }, t.prototype.renderTabContent = function() {
                    var e = this,
                        t = [];
                    return this.props.gqlError ? t.push(r.createElement(C._8, {
                        key: "emotePicker-error"
                    }, r.createElement(C.Q, {
                        color: C.K.Error
                    }, Object(m.d)("Unable to load available emotes.", "EmotePicker")))) : this.props.loading ? t.push(r.createElement(C._8, {
                        alignItems: C.c.Center,
                        display: C.R.Flex,
                        key: "loading",
                        fullHeight: !0,
                        fullWidth: !0,
                        justifyContent: C._7.Center
                    }, r.createElement(C._10, {
                        key: "LoadingSpinner"
                    }))) : this.state.channelTabEnabled && this.state.channelTabSelected ? (this.state.filteredOwnedChannelEmoteSets.length > 0 && t.push(r.createElement(C._8, {
                        className: "emote-picker__content-block",
                        key: "ownedChannelEmoteSets",
                        padding: 1,
                        position: C._15.Relative
                    }, r.createElement(S.a, {
                        emoteSet: this.state.filteredOwnedChannelEmoteSets[0],
                        onClickEmote: this.props.onClickEmote,
                        locked: !1
                    }))), t = t.concat(this.state.filteredAvailableUpsells.map(function(t) {
                        return r.createElement(C._8, {
                            className: "emote-picker__content-block",
                            key: "planUpsell:" + t.level,
                            padding: 1,
                            position: C._15.Relative
                        }, r.createElement(w, {
                            plan: t,
                            isEsportChannel: e.props.isEsportChannel,
                            subscribeTexts: e.props.subscribeTexts,
                            reportSubAction: e.props.reportSubAction
                        }))
                    }))) : t = this.state.filteredAllEmoteSets.map(function(t) {
                        return r.createElement(C._8, {
                            key: "emoteGrid" + t.id,
                            position: C._15.Relative,
                            padding: {
                                top: 1,
                                bottom: 2
                            },
                            className: "emote-picker__content-block"
                        }, r.createElement(S.a, {
                            emoteSet: t,
                            onClickEmote: e.props.onClickEmote,
                            locked: !1
                        }))
                    }), t.length > 0 ? r.createElement(k.b, {
                        className: "emote-picker__tab-content"
                    }, r.createElement(C._8, {
                        padding: 1
                    }, t)) : null
                }, t.prototype.filterEmoteSet = function(e, t) {
                    return e.filter(function(e) {
                        return e.token.toLowerCase().includes(t)
                    })
                }, t.prototype.setChannelTabSelected = function(e) {
                    this.setState({
                        channelTabSelected: e
                    })
                }, t.prototype.filterEmoteSets = function(e, t) {
                    for (var n = [], i = 0, r = e; i < r.length; i++) {
                        var a = r[i],
                            o = this.filterEmoteSet(a.emotes, t);
                        o.length > 0 && n.push({
                            id: a.id,
                            emotes: o
                        })
                    }
                    return n
                }, t.prototype.filterAvailableUpsells = function(e, t) {
                    for (var n = [], r = 0, a = e; r < a.length; r++) {
                        var o = a[r];
                        if (o.emotes) {
                            var s = this.filterEmoteSet(o.emotes, t);
                            s.length > 0 && n.push(i.__assign({}, o, {
                                emotes: s
                            }))
                        }
                    }
                    return n
                }, t = i.__decorate([Object(g.d)("EmotePickerMenu", {
                    autoReportInteractive: !0
                })], t)
            }(r.Component)),
            R = n("LYwx"),
            D = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.trackSubEvent = function(e) {
                        Object(v.b)(i.__assign({}, e, {
                            action: v.a.ClickCheckout,
                            channelID: n.props.channelData && n.props.channelData.user && n.props.channelData.user.id || "",
                            channelLogin: n.props.channelData && n.props.channelData.user && n.props.channelData.user.displayName || "",
                            isMenuOpen: null,
                            hasSubCredit: null,
                            sub_location: "emote_picker",
                            modal: !1,
                            showPrimeContent: !0,
                            giftRecipient: null
                        }))
                    };
                    var r = {
                        allEmoteSets: [],
                        availableUpsells: [],
                        channelTabVisible: !1,
                        gqlError: t.emoteSetsData && !!t.emoteSetsData.error || t.channelData && !!t.channelData.error || !1,
                        gqlLoading: t.emoteSetsData && !!t.emoteSetsData.loading || t.channelData && !!t.channelData.loading || !1,
                        subscribeTexts: [],
                        ownedChannelEmoteSets: [],
                        ownedSetIDs: new Set([])
                    };
                    return r = n.applyDataPropsToState(t, r), n.state = i.__assign({}, r), n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.checkDataLoaded(this.props) && (this.props.onLoad && this.props.onLoad(this.checkForContent(this.props)), this.props.latencyTracking.reportInteractive())
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (e.emoteSetsData && e.emoteSetsData.error || e.channelData && e.channelData.error) this.setState({
                        gqlError: !0
                    });
                    else {
                        var t = this.applyDataPropsToState(e, this.state);
                        this.props.pubsub.messages.subscriptionInfo !== e.pubsub.messages.subscriptionInfo && (this.props.channelData && this.props.channelData.refetch(), this.props.emoteSetsData && this.props.emoteSetsData.refetch()), this.checkDataLoaded(e) && (e.latencyTracking.reportInteractive(), e.onLoad && e.onLoad(this.checkForContent(e)), t.gqlLoading = !1), this.setState(i.__assign({}, t, {
                            gqlError: !1
                        }))
                    }
                }, t.prototype.render = function() {
                    var e = this.props.channelData && this.props.channelData.user && this.props.channelData.user.id || "",
                        t = Object(d.c)(e, this.props.sessionUser);
                    return this.props.visible ? r.createElement(O, {
                        allEmoteSets: this.state.allEmoteSets,
                        availableUpsells: this.state.availableUpsells,
                        channelTabVisible: this.state.channelTabVisible,
                        gqlError: this.state.gqlError,
                        isEsportChannel: t,
                        loading: this.state.gqlLoading,
                        onClickEmote: this.props.onClickEmote,
                        ownedChannelEmoteSets: this.state.ownedChannelEmoteSets,
                        toggleVisibility: this.props.toggleVisibility,
                        subscribeTexts: this.state.subscribeTexts,
                        reportSubAction: this.trackSubEvent,
                        direction: this.props.direction,
                        size: this.props.size
                    }) : null
                }, t.prototype.checkDataLoaded = function(e) {
                    var t = !e.channelOwnerID || e.channelData && !e.channelData.loading,
                        n = !e.isLoggedIn || e.emoteSetsData && !e.emoteSetsData.loading;
                    return t && n
                }, t.prototype.checkForContent = function(e) {
                    var t = e.emoteSetsData && e.emoteSetsData.emoteSets && e.emoteSetsData.emoteSets.length > 0 || !1,
                        n = e.channelData && e.channelData.user && e.channelData.user.subscriptionProducts.filter(this.subscriptionProductHasEmotes).length > 0 || !1;
                    return t || n
                }, t.prototype.applyDataPropsToState = function(e, t) {
                    var n, r, a, o, s = i.__assign({}, t);
                    if (e.emoteSetsData && e.emoteSetsData.emoteSets && (s.ownedSetIDs = new Set(e.emoteSetsData.emoteSets.map(function(e) {
                            return parseInt(e.id, 10)
                        })), s.allEmoteSets = Object(p.a)(e.emoteSetsData.emoteSets)), e.channelData && e.channelData.user) {
                        var l = void 0;
                        e.channelData.user.self && e.channelData.user.self.subscriptionBenefit && (l = e.channelData.user.self.subscriptionBenefit.platform), s.availableUpsells = (n = s.ownedSetIDs, r = e.channelData.user.subscriptionProducts, o = [], !(a = l) || a !== h.a.IOS && a !== h.a.Android ? (r.forEach(function(e, t) {
                            var a = e.price;
                            0 === t && Object(f.d)(r) && (a = Object(f.a)(r[0])), e.emotes && e.emotes.length && e.emoteSetID && !n.has(parseInt(e.emoteSetID, 10)) && o.push(i.__assign({}, e, {
                                emotes: Object(p.b)(e.emotes),
                                level: t,
                                price: a
                            }))
                        }), o) : o), s.subscribeTexts = function(e) {
                            for (var t = [], n = 0; n < e.length; n++) {
                                var i = e[n];
                                0 === n && i.emotes && i.emotes.length > 1 ? t[n] = Object(m.d)("Unlock {numEmotes, number} Sub Emotes", {
                                    numEmotes: i.emotes.length
                                }, "assembleSubscribeTexts") : 0 === n ? t[n] = Object(m.d)("Unlock 1 Sub Emote", "assembleSubscribeTexts") : i.emotes && i.emotes.length > 1 ? t[n] = Object(m.d)("{numEmotes, number} Extra {price} Sub Emotes", {
                                    numEmotes: i.emotes.length,
                                    price: i.price
                                }, "assembleSubscribeTexts") : i.emotes && i.emotes.length && (t[n] = Object(m.d)("1 Extra {price} Sub Emote", {
                                    price: i.price
                                }, "assembleSubscribeTexts"))
                            }
                            return t
                        }(e.channelData.user.subscriptionProducts), s.ownedChannelEmoteSets = function(e, t) {
                            for (var n = [{
                                    id: "0",
                                    emotes: []
                                }], i = 0, r = t; i < r.length; i++) {
                                var a = r[i];
                                a.emotes && a.emoteSetID && e.has(parseInt(a.emoteSetID, 10)) && (n[0].emotes = n[0].emotes.concat(Object(p.b)(a.emotes)))
                            }
                            return n[0].emotes.length ? n : []
                        }(s.ownedSetIDs, e.channelData.user.subscriptionProducts)
                    }
                    return s.channelTabVisible = e.channelData && e.channelData.user && e.channelData.user.subscriptionProducts.filter(this.subscriptionProductHasEmotes).length > 0 || !1, s
                }, t.prototype.subscriptionProductHasEmotes = function(e) {
                    return void 0 !== e.emoteSetID && !!e.emotes && e.emotes.length > 0
                }, t
            }(r.Component);
        var I = Object(a.compose)(Object(o.b)(function(e) {
            return {
                currentUserID: e.session.user && e.session.user.id,
                sessionUser: e.session.user,
                isLoggedIn: Object(u.d)(e)
            }
        }), Object(s.a)(R, {
            name: "channelData",
            skip: function(e) {
                return !e.channelOwnerID
            },
            options: function(e) {
                return {
                    variables: {
                        channelOwnerID: e.channelOwnerID
                    }
                }
            }
        }), Object(l.a)([{
            topic: function(e) {
                return "user-subscribe-events-v1." + e.currentUserID
            },
            mapMessageTypesToProps: {
                "*": "subscriptionInfo"
            },
            skip: function(e) {
                return !e.currentUserID
            }
        }]), Object(g.d)("EmotePicker"), Object(c.a)())(D);
        n.d(t, "a", function() {
            return I
        })
    },
    P0T5: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        }), t.j = function() {
            f(r.MarkAllRead)
        }, t.h = function() {
            f(r.EnableDoNotDisturb)
        }, t.g = function() {
            f(r.DisableDoNotDisturb)
        }, t.l = function(e, t) {
            m({
                context: t,
                targetUserLogin: e,
                reason: i.Spam,
                source: "conversations_button"
            })
        }, t.o = function(e) {
            h(e, s.MarkNotSpam)
        }, t.n = function(e) {
            h(e, s.Archive)
        }, t.k = function(e) {
            p({
                threadID: e,
                action: a.Mute
            })
        }, t.m = function(e) {
            p({
                threadID: e,
                action: a.Unmute
            })
        }, t.i = function(e) {
            p({
                threadID: e,
                action: a.Expand
            })
        }, t.e = function(e) {
            p({
                threadID: e,
                action: a.Collapse
            })
        }, t.d = function(e) {
            p({
                threadID: e,
                action: a.Close
            })
        }, t.b = function(e) {
            p({
                threadID: e,
                action: a.Archive
            })
        }, t.f = function(e) {
            c.o.tracking.track(d.SpadeEventType.WhisperThreadCreate, {
                conversation_id: e.threadID,
                target_login: e.targetUserlogin,
                source: "search_target_result",
                search_result_rank: e.searchResultRank
            })
        }, t.c = function(e) {
            c.o.tracking.track(d.SpadeEventType.WhisperSearchClick, {
                query: e.searchQuery,
                source: "conversation_list",
                rank: e.searchResultRank,
                is_conversation: e.isConversation
            })
        }, t.q = function(e) {
            return l.__awaiter(this, void 0, void 0, function() {
                var t;
                return l.__generator(this, function(n) {
                    switch (n.label) {
                        case 0:
                            return [4, g()];
                        case 1:
                            return t = n.sent(), c.o.tracking.track(d.SpadeEventType.WhisperSent, {
                                to: e.targetUserLogin,
                                from: t && t.login,
                                player: "web",
                                is_turbo: t && t.hasTurbo,
                                conversation_id: e.threadID,
                                availability: t && t.availability
                            }), [2]
                    }
                })
            })
        }, t.p = function(e) {
            return l.__awaiter(this, void 0, void 0, function() {
                var t;
                return l.__generator(this, function(n) {
                    switch (n.label) {
                        case 0:
                            return [4, g()];
                        case 1:
                            return t = n.sent(), c.o.tracking.track(d.SpadeEventType.WhisperReceived, {
                                to: t && t.login,
                                from: e.targetUserLogin,
                                player: "web",
                                is_turbo: t && t.hasTurbo,
                                conversation_id: e.threadID
                            }), [2]
                    }
                })
            })
        };
        var i, r, a, o, s, l = n("TToO"),
            c = n("6sO2"),
            d = n("vH/s"),
            u = n("yDSg");
        n.n(u);

        function p(e) {
            c.o.tracking.track(d.SpadeEventType.WhisperThreadMod, {
                conversation_id: e.threadID,
                action: e.action
            })
        }

        function m(e) {
            return l.__awaiter(this, void 0, void 0, function() {
                var t;
                return l.__generator(this, function(n) {
                    switch (n.label) {
                        case 0:
                            return [4, g()];
                        case 1:
                            return t = n.sent(), c.o.tracking.track(d.SpadeEventType.WhisperIgnoreUser, {
                                ui_context: e.context,
                                from_login: t && t.login,
                                ignored_login: e.targetUserLogin,
                                reason: e.reason || i.Other,
                                source: e.source
                            }), [2]
                    }
                })
            })
        }

        function h(e, t) {
            return l.__awaiter(this, void 0, void 0, function() {
                var n;
                return l.__generator(this, function(i) {
                    switch (i.label) {
                        case 0:
                            return [4, g()];
                        case 1:
                            return n = i.sent(), c.o.tracking.track(d.SpadeEventType.WhisperThreadMod, {
                                conversation_id: e,
                                action: t,
                                login: n && n.login
                            }), [2]
                    }
                })
            })
        }

        function f(e) {
            c.o.tracking.track(d.SpadeEventType.WhisperAllThreadsMod, {
                action: e
            })
        }

        function g() {
            var e = this;
            return new Promise(function(t) {
                setTimeout(function() {
                    return l.__awaiter(e, void 0, void 0, function() {
                        var e, n, i;
                        return l.__generator(this, function(r) {
                            switch (r.label) {
                                case 0:
                                    e = null, r.label = 1;
                                case 1:
                                    return r.trys.push([1, 3, , 4]), [4, c.o.apollo.client.query({
                                        query: u
                                    })];
                                case 2:
                                    return e = r.sent(), [3, 4];
                                case 3:
                                    return n = r.sent(), c.j.error(n, "Failed to make query for current user info in WhisperSent reporting"), [3, 4];
                                case 4:
                                    return i = e && e.data && e.data.currentUser, t(i), [2]
                            }
                        })
                    })
                })
            })
        }! function(e) {
            e.Harassment = "Harassment", e.Spam = "Spam", e.Other = "Other"
        }(i || (i = {})),
        function(e) {
            e.MarkAllRead = "mark_all_read", e.EnableDoNotDisturb = "do_not_disturb_on", e.DisableDoNotDisturb = "do_not_disturb_off"
        }(r || (r = {})),
        function(e) {
            e.Mute = "mute", e.Unmute = "unmute", e.Expand = "maximize", e.Collapse = "minimize", e.Close = "close", e.Archive = "archive", e.Open = "open"
        }(a || (a = {})),
        function(e) {
            e.Dock = "dock", e.SpamPropmt = "dock_spam_cta"
        }(o || (o = {})),
        function(e) {
            e.Archive = "archive", e.MarkNotSpam = "mark_not_spam"
        }(s || (s = {}))
    },
    PHcJ: function(e, t, n) {
        "use strict";
        var i, r, a;
        n.d(t, "c", function() {
                return i
            }), n.d(t, "a", function() {
                return r
            }), n.d(t, "b", function() {
                return a
            }),
            function(e) {
                e[e.AllVideos = 0] = "AllVideos", e[e.PastBroadcasts = 1] = "PastBroadcasts", e[e.Uploads = 2] = "Uploads", e[e.Highlights = 3] = "Highlights"
            }(i || (i = {})),
            function(e) {
                e[e.AnyLength = 0] = "AnyLength", e[e.Short = 1] = "Short", e[e.Long = 2] = "Long"
            }(r || (r = {})),
            function(e) {
                e[e.Popular = 0] = "Popular", e[e.Newest = 1] = "Newest"
            }(a || (a = {}))
    },
    PPK2: function(e, t) {},
    Q8Dy: function(e, t) {},
    QAz8: function(e, t) {},
    QPF3: function(e, t, n) {
        "use strict";
        t.a = function() {
            if (i.b) {
                var e = window.getComputedStyle(i.b);
                return +e.getPropertyValue("width").replace("px", "")
            }
            return 0
        };
        var i = n("1Mw/")
    },
    QRuM: function(e, t, n) {
        "use strict";
        var i, r = n("TToO"),
            a = n("GiK3"),
            o = n("6sO2");
        ! function(e) {
            e.On = "on", e.Off = "off", e.StaffOnly = "staff"
        }(i || (i = {}));
        var s = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    var e = o.b.get(this.props.name, i.Off);
                    return e === i.On || e === i.StaffOnly && this.props.isStaff ? this.props.children : null
                }, t
            }(a.Component),
            l = s;
        n.d(t, "a", function() {
            return i
        }), n.d(t, "c", function() {
            return s
        }), n.d(t, "b", function() {
            return l
        })
    },
    "QU+n": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "badge"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "Badge"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "setID"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "version"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "title"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "image1x"
                        },
                        name: {
                            kind: "Name",
                            value: "imageURL"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "size"
                            },
                            value: {
                                kind: "EnumValue",
                                value: "NORMAL"
                            }
                        }],
                        directives: []
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "image2x"
                        },
                        name: {
                            kind: "Name",
                            value: "imageURL"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "size"
                            },
                            value: {
                                kind: "EnumValue",
                                value: "DOUBLE"
                            }
                        }],
                        directives: []
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "image4x"
                        },
                        name: {
                            kind: "Name",
                            value: "imageURL"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "size"
                            },
                            value: {
                                kind: "EnumValue",
                                value: "QUADRUPLE"
                            }
                        }],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "clickAction"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "clickURL"
                        },
                        arguments: [],
                        directives: []
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 170
            }
        };
        n.loc.source = {
            body: "fragment badge on Badge {\nid\nsetID\nversion\ntitle\nimage1x: imageURL(size: NORMAL)\nimage2x: imageURL(size: DOUBLE)\nimage4x: imageURL(size: QUADRUPLE)\nclickAction\nclickURL\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Qk3C: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            r = n("2KeS"),
            a = n("TToO"),
            o = n("FuaS"),
            s = n("U9pL");

        function l(e, t) {
            var n = this;
            return function() {
                return a.__awaiter(n, void 0, void 0, function() {
                    return a.__generator(this, function(n) {
                        switch (n.label) {
                            case 0:
                                return t ? [4, Object(s.c)({
                                    userID: t,
                                    preferredLanguageTag: Object(s.b)(e)
                                })] : [3, 2];
                            case 1:
                                n.sent(), n.label = 2;
                            case 2:
                                return Object(o.c)(e), window.location.reload(!0), [2]
                        }
                    })
                })
            }
        }
        var c = n("GiK3"),
            d = n("6sO2"),
            u = n("Odds"),
            p = (n("2Nqs"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderLink = function(e) {
                        return c.createElement(u._6, {
                            key: e.languageCode,
                            onClick: t.handleLanguageClick,
                            "data-target": "language-selector-link",
                            "data-language": e.languageCode
                        }, c.createElement(u._8, {
                            padding: {
                                y: .5,
                                x: 1
                            },
                            "data-a-target": "language-" + e.languageCode
                        }, e.name))
                    }, t.handleLanguageClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-language");
                        n && t.props.changeLanguage(n, t.props.currentUserID)
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = Math.floor(d.a.locales.length / 2);
                    return c.createElement(u._8, {
                        className: "language-selector",
                        display: u.R.Flex,
                        padding: {
                            y: 1
                        }
                    }, c.createElement("div", {
                        className: "language-selector__list language-selector__list--border-right"
                    }, d.a.locales.slice(0, e).map(this.renderLink)), c.createElement("div", {
                        className: "language-selector__list"
                    }, d.a.locales.slice(e).map(this.renderLink)))
                }, t
            }(c.Component));
        var m = Object(i.b)(function(e) {
            return {
                currentUserID: e.session.user && e.session.user.id || null
            }
        }, function(e) {
            return Object(r.b)({
                changeLanguage: l
            }, e)
        })(p);
        n.d(t, "a", function() {
            return m
        })
    },
    QkQX: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FriendButton_RejectFriendRequest"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "RejectFriendRequestInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "rejectFriendRequest"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "friendButtonFragment"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 232
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/friend-button/queries/friend-button-fragment.gql"\nmutation FriendButton_RejectFriendRequest($input: RejectFriendRequestInput!) {\nrejectFriendRequest(input: $input) {\nuser {\nid\n...friendButtonFragment\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var r = {};
        i.definitions = i.definitions.concat(n("HC5L").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !r[t] && (r[t] = !0, !0)
        })), e.exports = i
    },
    R5UN: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "GetBitsButton_CurrentUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 66
            }
        };
        n.loc.source = {
            body: "query GetBitsButton_CurrentUser {\ncurrentUser {\nid\nbitsBalance\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "RY+8": function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var i = n("RH2O"),
            r = n("F8kA"),
            a = n("Aj/L"),
            o = n("TToO"),
            s = n("GiK3"),
            l = n("bZTi"),
            c = n("CSlQ"),
            d = n("tnNl"),
            u = n("T8ns"),
            p = n("Odds"),
            m = (n("w+Qa"), l.a.wrap(function() {
                return n.e(115).then(n.bind(null, "kd/b"))
            }, "SubsLandingPage")),
            h = l.a.wrap(function() {
                return n.e(116).then(n.bind(null, "uy5s"))
            }, "SubsBroadcasterPage"),
            f = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return o.__extends(t, e), t.prototype.render = function() {
                    return s.createElement(p._8, {
                        className: "twilight-root",
                        position: p._15.Absolute,
                        overflow: p._11.Hidden,
                        attachRight: !0,
                        attachBottom: !0,
                        attachLeft: !0
                    }, s.createElement(d.a, null), s.createElement(p._8, {
                        display: p.R.Flex,
                        flexWrap: p.U.NoWrap,
                        fullHeight: !0,
                        position: p._15.Relative
                    }, s.createElement(p._2, {
                        position: p._15.Relative,
                        flexGrow: 1,
                        fullHeight: !0,
                        fullWidth: !0
                    }, s.createElement("main", {
                        className: u.b
                    }, s.createElement(r.e, null, s.createElement(r.d, {
                        path: "/subs/:channelName",
                        component: h
                    }), s.createElement(r.d, {
                        path: "/subs",
                        component: m
                    }))))))
                }, t = o.__decorate([Object(c.d)("SubsRoot", {
                    autoReportInteractive: !0
                })], t)
            }(s.Component);
        var g = Object(i.b)(function(e) {
                return {
                    firstPageLoaded: !!e.session.firstPageLoaded,
                    isLoggedIn: Object(a.d)(e),
                    theme: e.ui.theme
                }
            })(f),
            v = Object(r.f)(g);
        n.d(t, "SubsRoot", function() {
            return v
        })
    },
    RZjb: function(e, t, n) {
        "use strict";
        var i, r = n("TToO"),
            a = n("HW6M"),
            o = n("GiK3"),
            s = n("Odds");
        n("oLZt");
        ! function(e) {
            e.Major = "major", e.Minor = "minor"
        }(i || (i = {}));
        var l = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return r.__extends(t, e), t.prototype.render = function() {
                var e = a({
                        "insider-pass-marketing-item__major": this.props.type === i.Major
                    }, {
                        "insider-pass-marketing-item__minor": this.props.type === i.Minor
                    }),
                    t = {
                        padding: {}
                    };
                this.props.type === i.Minor && (t.padding = {
                    left: 2
                });
                var n = this.props.type === i.Major ? "auto" : void 0,
                    l = this.props.type === i.Major ? "auto" : void 0,
                    c = this.props.type === i.Major ? s.T.Column : s.T.Row;
                return o.createElement(s._8, {
                    className: "insider-pass-marketing-item",
                    display: s.R.Flex,
                    flexDirection: s.T.Column,
                    breakpointExtraSmall: {
                        flexDirection: c
                    }
                }, o.createElement(s._8, {
                    "data-test-selector": "insider-marketing-item-image",
                    margin: n
                }, o.createElement("img", {
                    className: e,
                    src: this.props.imageURL
                })), o.createElement(s._8, r.__assign({
                    "data-test-selector": "insider-marketing-item-content",
                    className: this.props.type === i.Major ? e : void 0,
                    display: s.R.Flex,
                    flexDirection: s.T.Column,
                    margin: l
                }, t), o.createElement(s._8, {
                    padding: {
                        top: 1
                    }
                }, o.createElement(s.Q, {
                    fontSize: s.V.Size4,
                    bold: !0
                }, this.props.title)), o.createElement(s._8, {
                    padding: {
                        top: 1
                    }
                }, o.createElement(s.Q, {
                    "data-test-selector": "insider-marketing-item-content-text",
                    fontSize: this.props.type === i.Major ? s.V.Size5 : s.V.Size6
                }, this.props.body))))
            }, t
        }(o.PureComponent);
        n.d(t, !1, function() {
            return "insider-marketing-item-image"
        }), n.d(t, !1, function() {
            return "insider-marketing-item-content"
        }), n.d(t, !1, function() {
            return "insider-marketing-item-content-text"
        }), n.d(t, "b", function() {
            return i
        }), n.d(t, "a", function() {
            return l
        })
    },
    RweG: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("6sO2");

        function o(e) {
            return function(t) {
                return function(n) {
                    function o(t) {
                        var i = n.call(this, t) || this;
                        i.unsubscribers = {};
                        var r = {};
                        return e.map(function(e) {
                            e.skip && e.skip(t) || (r[i.getTopic(e.topic, t)] = {
                                isSubscribing: !0
                            })
                        }), i.state = {
                            status: r,
                            messages: {}
                        }, i
                    }
                    return i.__extends(o, n), o.prototype.componentDidMount = function() {
                        var t = this;
                        e.forEach(function(e) {
                            if (!e.skip || !e.skip(t.props)) {
                                var n = t.getTopic(e.topic, t.props);
                                t.unsubscribers[n] = t.subscribe(e, n)
                            }
                        })
                    }, o.prototype.componentWillReceiveProps = function(t) {
                        var n = this,
                            r = {},
                            a = {};
                        e.forEach(function(e) {
                            if (!e.skip || !e.skip(t)) {
                                var i = n.getTopic(e.topic, t);
                                r[i] || (r[i] = {
                                    isSubscribing: !0
                                }), n.unsubscribers[i] ? a[i] = n.unsubscribers[i] : a[i] = n.subscribe(e, i)
                            }
                        }), Object.keys(this.unsubscribers).forEach(function(e) {
                            a[e] || n.unsubscribers[e]()
                        }), this.unsubscribers = a, this.setState(function(e) {
                            return {
                                status: i.__assign({}, e.status, r)
                            }
                        })
                    }, o.prototype.componentWillUnmount = function() {
                        var e = this;
                        Object.keys(this.unsubscribers).map(function(t) {
                            return e.unsubscribers[t]()
                        })
                    }, o.prototype.render = function() {
                        var e = {
                            pubsub: {
                                messages: this.state.messages,
                                status: this.state.status
                            }
                        };
                        return r.createElement(t, i.__assign({}, this.props, e))
                    }, o.prototype.getTopic = function(e, t) {
                        return "string" == typeof e ? e : e(t)
                    }, o.prototype.subscribe = function(e, t) {
                        var n = this;
                        return a.k.subscribe({
                            topic: t,
                            success: function() {
                                n.setState(function(e) {
                                    return {
                                        status: i.__assign({}, e.status, (n = {}, n[t] = {
                                            isSubscribing: !1
                                        }, n))
                                    };
                                    var n
                                })
                            },
                            failure: function(e) {
                                n.setState(function(n) {
                                    return {
                                        status: i.__assign({}, n.status, (r = {}, r[t] = {
                                            error: e,
                                            isSubscribing: !1
                                        }, r))
                                    };
                                    var r
                                })
                            },
                            onMessage: function(t) {
                                var r = e.mapMessageTypesToProps[t.type || ""] || e.mapMessageTypesToProps["*"];
                                r && (e.skipMessage && e.skipMessage(t, n.props) || n.setState(function(e) {
                                    return {
                                        messages: i.__assign({}, e.messages, (n = {}, n[r] = t, n))
                                    };
                                    var n
                                }))
                            }
                        })
                    }, o
                }(r.Component)
            }
        }
        n.d(t, "a", function() {
            return o
        })
    },
    RxMT: function(e, t, n) {
        "use strict";
        var i = n("AckU"),
            r = n("TToO"),
            a = n("GiK3"),
            o = n("6sO2"),
            s = n("HM6l"),
            l = n("cuT/"),
            c = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.renderPortal = function(e) {
                        l.c ? l.c.provideContent(e, n.contentID) : o.j.warn("RightColumn must be defined on the Root to manipulate its content.")
                    }, n.removePortal = function() {
                        l.c ? l.c.removeContent() : o.j.warn("RightColumn must be defined on the Root to manipulate its content.")
                    }, n.contentID = Object(s.a)(), n
                }
                return r.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    e.children ? this.renderPortal(e.children) : this.removePortal()
                }, t.prototype.componentDidMount = function() {
                    l.c || o.j.warn("RightColumn must be defined on the Root to manipulate its content."), this.props.children && this.renderPortal(this.props.children)
                }, t.prototype.componentWillUnmount = function() {
                    this.removePortal()
                }, t.prototype.render = function() {
                    return null
                }, t
            }(a.Component);
        n.d(t, "a", function() {
            return i.b
        }), n.d(t, "b", function() {
            return c
        })
    },
    Ryxq: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            var t = Math.floor(e / 3600),
                n = Math.floor((e - 3600 * t) / 60),
                i = e - 3600 * t - 60 * n;
            t < 10 && (t = "0" + t);
            n < 10 && (n = "0" + n);
            i < 10 && (i = "0" + i);
            return t + "h" + n + "m" + i + "s"
        }
    },
    S1vB: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            var t = i.b.get("prime_blocked_regions", []);
            if (!e) return !1;
            return !t.includes(e.toUpperCase())
        };
        var i = n("6sO2")
    },
    S5wX: function(e, t) {},
    SUA7: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FollowButton_UnfollowUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnfollowUserInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "unfollowUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "follow"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "disableNotifications"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 130
            }
        };
        n.loc.source = {
            body: "mutation FollowButton_UnfollowUser($input: UnfollowUserInput!) {\nunfollowUser(input: $input) {\nfollow {\ndisableNotifications\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    SX5d: function(e, t) {},
    SZoP: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        }), t.b = o;
        var i = n("GiK3"),
            r = (n.n(i), /^[\x00-\x7F]*$/),
            a = function(e, t, n) {
                return void 0 === n && (n = !1), t && e && !o(t) ? n ? t + " (" + e + ")" : i.createElement("span", null, t, " ", i.createElement("span", {
                    className: "intl-login"
                }, "(" + e + ")")) : t || (e || "")
            };

        function o(e) {
            return r.test(e)
        }
    },
    T8ns: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("BC6Q"),
            o = n("RxMT"),
            s = n("eXld"),
            l = n("LiYP"),
            c = n("RH2O"),
            d = n("2KeS"),
            u = n("7enT"),
            p = n("Aj/L");
        var m, h = Object(c.b)(function(e) {
                return {
                    collapsed: !e.ui.sideNavExpanded,
                    isLoggedIn: Object(p.d)(e),
                    firstPageLoaded: e.session.firstPageLoaded
                }
            }, function(e) {
                return Object(d.b)({
                    collapseSideNav: u.r,
                    expandSideNav: u.y
                }, e)
            })(l.a),
            f = n("6sO2"),
            g = n("Odds"),
            v = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        content: null,
                        isError: !1
                    }, n.logger = f.j.withCategory("StickyFooterRoot"), n.displayContent = function(e) {
                        n.setState({
                            content: e
                        })
                    }, n.hideContent = function() {
                        n.setState({
                            content: null
                        })
                    }, m && n.logger.error(new Error("StickyFooterRoot is already mounted."), "StickyFooterRoot is already mounted. There should only be one of these mounted at a time."), m = n, n
                }
                return i.__extends(t, e), t.prototype.componentDidCatch = function(e, t) {
                    var n = this;
                    this.setState({
                        isError: !0
                    }, function() {
                        n.logger.error(e, "A unhandled exception occurred in the component hierarchy", {
                            info: t
                        })
                    })
                }, t.prototype.componentWillUnmount = function() {
                    m = null
                }, t.prototype.render = function() {
                    return this.state.isError || !this.state.content ? null : r.createElement(g._8, null, this.state.content)
                }, t
            }(r.Component),
            b = null,
            k = (function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    if (b) {
                        var i = "There may only be one StickyFooter mounted at a time.";
                        f.j.error(new Error(i), i)
                    }
                    return b = n, n
                }
                i.__extends(t, e), t.prototype.componentDidMount = function() {
                    m && m.displayContent(this.props.children)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    m && (e.children ? m.displayContent(e.children) : m.hideContent())
                }, t.prototype.componentWillUnmount = function() {
                    m && m.hideContent(), b = null
                }, t.prototype.render = function() {
                    return null
                }
            }(r.Component), n("2aoH")),
            y = n("TP6L"),
            _ = n("H+d0"),
            S = n("/UH7"),
            E = n("0nzt"),
            C = n("uXDg"),
            N = n("QPF3"),
            T = n("HW6M"),
            w = n("7vx8"),
            O = n("WIs4"),
            R = n("aMxy"),
            D = n("oIkB"),
            I = n("HZww"),
            x = n("rCmJ"),
            F = n("zCIC"),
            P = n("+Znq"),
            U = n("puy8"),
            j = n("HM6l"),
            A = n("ZVME"),
            L = n("CSlQ"),
            M = n("5LoI"),
            B = n("MAZT"),
            W = n("hvzu"),
            V = (n("zC6J"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleThreadClick = function() {
                        t.props.selectThread(t.props.threadID)
                    }, t.handleArchiveClick = function(e) {
                        e.stopPropagation(), t.props.archiveThread(t.props.threadID)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e, t, n, i = this.props.user,
                        a = this.props.lastMessage ? Object(W.a)(this.props.lastMessage.content.content, this.props.lastMessage.content.emotes, this.props.lastMessage.editedAt) : null,
                        o = this.props.unreadMessageCount,
                        s = Object(f.d)("Unknown", "ThreadListItem");
                    return i ? ((e = i.displayName || i.login) || (e = s), t = i.login, n = i.profileImageURL) : (e = s, t = s, n = null), r.createElement("div", {
                        onClick: this.handleThreadClick,
                        role: "listitem"
                    }, r.createElement(g._35, {
                        className: "whispers-list-item",
                        borderBottom: !0,
                        padding: 1,
                        display: g.R.Flex,
                        flexDirection: g.T.Row,
                        flexWrap: g.U.NoWrap,
                        fullWidth: !0,
                        alignItems: g.c.Center,
                        "data-a-target": "whisper-with-" + t
                    }, r.createElement(g._8, {
                        className: "whispers-list-item__avatar",
                        margin: {
                            right: .5
                        },
                        flexShrink: 0
                    }, r.createElement(g.m, {
                        size: 30,
                        alt: Object(f.d)("{interlocutorName}'s Avatar", {
                            interlocutorName: e
                        }, "WhisperThreadListItem"),
                        src: n,
                        onLoad: this.props.avatarOnLoadCallback
                    })), r.createElement(g._8, {
                        fullWidth: !0,
                        display: g.R.Inline
                    }, r.createElement(g.Q, {
                        fontSize: g.V.Size5,
                        bold: !0,
                        italic: e === s
                    }, e), r.createElement(g._8, {
                        className: "whispers-list-item__last-message",
                        ellipsis: !0
                    }, a)), r.createElement(g._8, {
                        className: "whispers-list-item__unread-count",
                        margin: {
                            right: 1
                        },
                        textAlign: g._45.Right
                    }, r.createElement(g.Q, {
                        bold: !0
                    }, o > 0 && !this.props.muted ? o : null), this.props.muted && r.createElement(g._8, {
                        display: g.R.Flex,
                        alignItems: g.c.Center,
                        justifyContent: g._7.Center
                    }, r.createElement(g._24, {
                        type: g._26.Alt2,
                        asset: g._25.WhisperMuted
                    }))), r.createElement("div", {
                        className: "whispers-list-item__archive"
                    }, r.createElement(g.w, {
                        ariaLabel: Object(f.d)("Archive Thread", "WhisperThreadListItem"),
                        tabIndex: -1,
                        icon: g._25.Close,
                        "data-a-target": "whispers-list-item__archive-button",
                        onClick: this.handleArchiveClick,
                        "data-click-out-id": "whispers-list-item__archive-button"
                    }))))
                }, t
            }(r.Component)),
            H = n("7miU"),
            G = n("n9f8"),
            z = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.markAllWhispersAsRead = function() {
                        var e = Object(D.a)({
                            markAllAsRead: !0
                        });
                        n.props.markAllWhispersAsRead && (Object(H.i)(), n.props.markAllWhispersAsRead(e)), n.props.onMarkAllMessagesRead && n.props.onMarkAllMessagesRead()
                    }, n.toggleDoNotDisturb = function() {
                        n.state.doNotDisturb ? (f.m.set("whisperDoNotDisturb", !1), Object(H.f)(), n.setState({
                            doNotDisturb: !1
                        })) : (f.m.set("whisperDoNotDisturb", !0), Object(H.g)(), n.setState({
                            doNotDisturb: !0
                        }))
                    }, n.state = {
                        doNotDisturb: f.m.get("whisperDoNotDisturb", !1)
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.state.doNotDisturb ? Object(f.d)("Disable Do Not Disturb", "ThreadsBoxSettings") : Object(f.d)("Enable Do Not Disturb", "ThreadsBoxSettings"),
                        t = Object(f.d)("Mark All Whispers as Read", "ThreadsBoxSettings");
                    return r.createElement(g._8, {
                        className: "threads-box-settings",
                        display: g.R.Flex,
                        flexDirection: g.T.Column,
                        margin: 1
                    }, r.createElement(g._6, {
                        ariaLabel: e,
                        onClick: this.toggleDoNotDisturb
                    }, r.createElement(g._8, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, e)), r.createElement(g._6, {
                        ariaLabel: t,
                        onClick: this.markAllWhispersAsRead
                    }, r.createElement(g._8, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, t)))
                }, t = i.__decorate([Object(w.a)(G, {
                    name: "markAllWhispersAsRead"
                })], t)
            }(r.Component),
            q = n("m4HT"),
            Q = (n("U8pM"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onMarkAllMessagesRead = function() {
                        n.settingsMenu.toggleBalloon(!1)
                    }, n.renderUserSearchResult = function(e, t) {
                        var i = Object(f.d)("{username}'s avatar", {
                                username: e.name
                            }, "ThreadsBox"),
                            a = e.profile_image || Object(U.c)(e.objectID, 30);
                        return r.createElement("div", {
                            key: "searchResult:" + e.objectID,
                            onClick: n.handleUserSearchResultClick(e, t)
                        }, r.createElement(g._35, {
                            className: "whispers-list-item",
                            borderBottom: !0,
                            padding: 1,
                            "data-a-target": "whisper-search-result-" + e.login,
                            display: g.R.Flex,
                            flexDirection: g.T.Row,
                            flexWrap: g.U.NoWrap,
                            fullWidth: !0,
                            alignItems: g.c.Center
                        }, r.createElement(g._8, {
                            margin: {
                                right: .5
                            },
                            flexShrink: 0
                        }, r.createElement(g.m, {
                            size: 30,
                            src: a,
                            alt: i
                        })), r.createElement(g._8, {
                            fullWidth: !0,
                            display: g.R.Flex,
                            flexDirection: g.T.Column
                        }, r.createElement(g.Q, {
                            fontSize: g.V.Size5,
                            bold: !0
                        }, e.login), r.createElement(g._8, null, " "))))
                    }, n.saveSettingsMenuRef = function(e) {
                        return n.settingsMenu = e
                    }, n.handleConversationsClick = function() {
                        n.state.open || (n.props.latencyTracking.resetCustomEvents(A.a.Whispers), n.whispersHistoryLatencyEvent = n.props.latencyTracking.registerCustomEvent({
                            benchmark: 200,
                            group: A.a.Whispers,
                            key: A.b.WhispersHistory,
                            label: A.c.History,
                            start: A.d.Registration
                        })), n.setState(function(e) {
                            return {
                                open: !e.open
                            }
                        })
                    }, n.selectThread = function(e) {
                        n.handleClose(), n.clearSearchText(), n.props.selectThread(e)
                    }, n.handleClose = function() {
                        n.setState({
                            open: !1
                        })
                    }, n.clearSearchText = function() {
                        n.setState({
                            searchText: "",
                            searching: !1
                        })
                    }, n.onSearchInputChange = function(e) {
                        return i.__awaiter(n, void 0, void 0, function() {
                            var t, n = this;
                            return i.__generator(this, function(i) {
                                return t = e.currentTarget.value, clearTimeout(this.inputTimeout), t && 0 !== t.length ? (this.setState({
                                    searchText: t,
                                    searching: !0
                                }), this.inputTimeout = setTimeout(function() {
                                    n.search(n.state.searchText)
                                }, 200), [2]) : (this.inputTimeout = 0, this.clearSearchText(), [2])
                            })
                        })
                    }, n.handleUserSearchResultClick = function(e, t) {
                        return function() {
                            var i = e.objectID;
                            if (null !== n.props.currentUserID && i !== n.props.currentUserID) {
                                n.handleClose(), n.clearSearchText();
                                var r = Object(q.a)(n.props.currentUserID, i);
                                Object(H.e)({
                                    threadID: r,
                                    targetUserlogin: e.login,
                                    searchResultRank: t
                                }), Object(H.b)({
                                    searchResultRank: t,
                                    searchQuery: n.state.searchText,
                                    isConversation: !1
                                }), n.props.selectThread(r)
                            }
                        }
                    }, n.filterExistingThreads = function(e) {
                        var t = e.toLowerCase();
                        return n.props.orderedThreadIDs.filter(function(e) {
                            var i = n.props.threadsByID[e].participants.find(function(e) {
                                return !!e && e.id !== n.props.currentUserID
                            });
                            return !(!i || !i.displayName) && i.displayName.toLowerCase().indexOf(t) >= 0
                        })
                    }, n.searchClient = new B.a({
                        appId: f.a.algoliaApplicationID,
                        apiKey: f.a.algoliaAPIKey,
                        apolloClient: f.o.apollo.client,
                        logger: f.j,
                        config: f.a
                    }), n.state = {
                        open: !1,
                        searchText: "",
                        searching: !1
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(x.a, {
                        onClickOut: this.handleClose
                    }, r.createElement(g._3, {
                        className: "whispers-threads-box__container " + (this.state.open ? "whispers-threads-box__container--open" : ""),
                        display: g.R.Flex,
                        flexDirection: g.T.Column,
                        flexWrap: g.U.NoWrap,
                        border: !0,
                        background: g.n.Base,
                        position: g._15.Absolute,
                        attachBottom: !0,
                        attachRight: !0,
                        "data-click-out-id": "threads-box",
                        "data-a-target": "threads-box-" + (this.state.open ? "open" : "closed")
                    }, r.createElement("div", {
                        "aria-labelledby": "whispers-box-header"
                    }, this.renderHeader(), this.renderList(), this.renderFooter())))
                }, t.prototype.renderOpenCloseButton = function() {
                    var e = null;
                    if (this.props.unreadCount > 0) {
                        var t = this.props.unreadCount > 99 ? "99+" : this.props.unreadCount.toString();
                        e = r.createElement(g._8, {
                            className: "whispers-threads-box__unread",
                            margin: {
                                y: .5
                            }
                        }, r.createElement("span", {
                            className: "whispers-threads-box__unread--count",
                            "data-a-target": "whisper-unreads"
                        }, t))
                    }
                    return r.createElement(g._35, {
                        className: "whispers-threads-box__open-close",
                        position: g._15.Relative,
                        background: g.n.Alt2,
                        display: g.R.Flex,
                        alignItems: g.c.Center,
                        justifyContent: g._7.Center
                    }, e, r.createElement(g.w, {
                        ariaLabel: Object(f.d)("Close Threads", "WhisperThreadsBox"),
                        icon: g._25.Conversations,
                        onClick: this.handleConversationsClick,
                        "data-a-target": "whisper-box-button"
                    }))
                }, t.prototype.renderList = function() {
                    var e, t = this;
                    if (!this.state.open) return null;
                    var n = null;
                    "" !== this.state.searchText && (n = r.createElement(g._35, {
                        key: "otherPeopleDivider",
                        borderBottom: !0,
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, Object(f.d)("Other People", "WhispersThreadBox")));
                    var i = null;
                    if (this.state.searching ? i = r.createElement(g._8, {
                            display: g.R.Flex,
                            flexDirection: g.T.Column,
                            margin: {
                                top: 4
                            },
                            alignItems: g.c.Center
                        }, r.createElement(g._10, {
                            delay: 0
                        })) : this.state.searchResults && this.state.searchResults.users && "" !== this.state.searchText && (i = this.state.searchResults.users.hits.filter(function(e) {
                            return !t.props.threadsByID[e.objectID]
                        }).map(this.renderUserSearchResult)), this.props.error) e = r.createElement(g._8, {
                        margin: {
                            x: "auto"
                        },
                        display: g.R.Flex,
                        justifyContent: g._7.Center,
                        alignItems: g.c.Center,
                        fullHeight: !0
                    }, r.createElement(g.Q, {
                        color: g.K.Error
                    }, Object(f.d)("There was a problem loading whispers.", "WhisperThreadsBox")));
                    else if (this.props.loading) e = r.createElement(g._10, null);
                    else {
                        var a = this.props.orderedThreadIDs;
                        "" !== this.state.searchText && (a = this.filterExistingThreads(this.state.searchText)), e = a.filter(function(e) {
                            return t.props.threadsByID[e] && !t.props.threadsByID[e].archived
                        }).map(function(e, n) {
                            var i = 0 === n ? function() {
                                    t.props.latencyTracking.reportCustomEvent(t.whispersHistoryLatencyEvent)
                                } : void 0,
                                a = t.props.threadsByID[e],
                                o = a.participants.find(function(e) {
                                    return !!e && e.id !== t.props.currentUserID
                                });
                            return o ? r.createElement(V, {
                                key: "whisperThread:" + a.id,
                                user: o,
                                threadID: a.id,
                                lastMessage: a.lastMessage,
                                archiveThread: t.props.archiveThread,
                                selectThread: t.selectThread,
                                unreadMessageCount: a.unreadMessagesCount,
                                muted: a.muted,
                                avatarOnLoadCallback: i
                            }) : null
                        })
                    }
                    return r.createElement(F.b, {
                        suppressScrollX: !0
                    }, r.createElement("div", {
                        role: "list"
                    }, e, n, i, r.createElement(F.a, {
                        enabled: this.state.open,
                        loadMore: this.props.loadMore,
                        pixelThreshold: 200
                    })))
                }, t.prototype.renderHeader = function() {
                    return this.state.open ? r.createElement(g._35, {
                        className: "whispers-threads-box__header",
                        "data-a-target": "whispers-threads-box__header",
                        alignItems: g.c.Center,
                        background: g.n.Alt,
                        borderBottom: !0,
                        color: g.K.Base,
                        display: g.R.Flex,
                        flexDirection: g.T.Row,
                        flexGrow: 0,
                        flexShrink: 0,
                        padding: {
                            y: .5,
                            x: 1
                        },
                        "data-click-hide-id": "threads-box-header"
                    }, r.createElement(g._2, {
                        flexGrow: 1,
                        display: g.R.Flex
                    }, r.createElement("div", {
                        id: "whispers-box-header"
                    }, r.createElement(g.Q, {
                        type: g._49.Span,
                        bold: !0
                    }, Object(f.d)("Whispers", "WhisperThreadsBox")))), r.createElement(P.a, {
                        ref: this.saveSettingsMenuRef
                    }, r.createElement(g.w, {
                        ariaLabel: Object(f.d)("Settings", "WhisperThreadsBox"),
                        icon: g._25.Gear,
                        "data-a-target": "whisper-settings-button"
                    }), r.createElement(g.q, {
                        size: g.s.Small,
                        direction: g.r.BottomRight,
                        offsetX: "0.5rem"
                    }, r.createElement(z, {
                        onMarkAllMessagesRead: this.onMarkAllMessagesRead
                    }))), r.createElement(g.w, {
                        ariaLabel: Object(f.d)("Minimize", "WhisperThreadsBox"),
                        icon: g._25.Minimize,
                        onClick: this.handleClose,
                        "data-a-target": "whisper-close-button"
                    })) : null
                }, t.prototype.renderFooter = function() {
                    return this.state.open ? r.createElement(g._35, {
                        display: g.R.Flex,
                        flexGrow: 0,
                        flexShrink: 0,
                        alignItems: g.c.Center,
                        borderTop: !0,
                        background: g.n.Alt
                    }, r.createElement(g._8, {
                        flexGrow: 1,
                        padding: {
                            top: .5,
                            bottom: .5,
                            left: 1
                        }
                    }, r.createElement(g._27, {
                        onChange: this.onSearchInputChange,
                        value: this.state.searchText,
                        placeholder: Object(f.d)("Search for People", "WhisperThreadsBox"),
                        id: "threads-box-filter",
                        autoFocus: !0,
                        "data-a-target": "whisper-search-input"
                    })), this.renderOpenCloseButton()) : this.renderOpenCloseButton()
                }, t.prototype.search = function(e) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var t;
                        return i.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return e ? [4, this.searchClient.queryForType(M.a.Users, e, j.a())] : [2];
                                case 1:
                                    return t = n.sent(), this.setState({
                                        searchResults: t,
                                        searching: !1
                                    }), [2]
                            }
                        })
                    })
                }, t = i.__decorate([Object(L.d)("WhisperCenter", {
                    autoReportInteractive: !0
                })], t)
            }(r.Component)),
            K = n("1Mw/");
        var $ = Object(c.b)(function(e) {
            return {
                openedThreads: e.whispers.display.openedIDs.map(function(t) {
                    return Object(S.b)(e, t)
                }),
                focusedThreadID: e.whispers.display.focusedID
            }
        }, function(e) {
            return {
                onBlockThread: function(t) {
                    return e(C.h(t, Object(N.a)()))
                },
                onCloseThread: function(t) {
                    return e(C.h(t, Object(N.a)()))
                },
                onCollapseThread: function(t) {
                    return e(C.i(t, Object(N.a)()))
                },
                onExpandThread: function(t) {
                    return e(C.j(t, Object(N.a)()))
                },
                onFocusThread: function(t) {
                    return e(C.k(t, Object(N.a)()))
                },
                onUnfocusThread: function(t) {
                    return e(C.n(t, Object(N.a)()))
                },
                onResizeContent: function() {
                    return e(C.m(Object(N.a)()))
                }
            }
        })(K.a);

        function Y(e) {
            return Object.keys(e).reduce(function(t, n) {
                var i = e[n];
                return i.muted || i.archived ? t : t + i.unreadMessagesCount
            }, 0)
        }
        var Z = function(e) {
                for (var t = {}, n = 0, r = e; n < r.length; n++) {
                    var a = r[n];
                    t[a.id] = i.__assign({}, X(a))
                }
                return t
            },
            X = function(e) {
                return {
                    id: e.id,
                    messageHistory: e.messages.edges.map(function(e) {
                        return e.node
                    }).slice(0, -1),
                    lastMessage: e.messages.edges.map(function(e) {
                        return e.node
                    }).find(function(e) {
                        return !e.deletedAt
                    }) || null,
                    spamInfo: e.spamInfo,
                    participants: e.participants,
                    muted: e.isMuted,
                    archived: e.isArchived,
                    unreadMessagesCount: e.unreadMessagesCount
                }
            },
            J = n("9RMu"),
            ee = n("DCOT"),
            te = n("Lj1H");
        var ne = n("qpaC"),
            ie = n("8p/O"),
            re = (n("n7G4"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.erroredLoadingMore = !1, n.logger = f.j.withCategory("whispers"), n.archiveThread = function(e) {
                        if (n.state.threadsByID[e]) {
                            var t = i.__assign({}, Object(D.a)({
                                threadID: e,
                                isArchived: !0
                            }), {
                                optimisticResponse: {
                                    updateWhisperThread: {
                                        thread: {
                                            __typename: "WhisperThread",
                                            id: e,
                                            isArchived: !0
                                        },
                                        __typename: "UpdateWhisperThreadPayload"
                                    }
                                }
                            });
                            n.props.archiveThread && (n.props.closeThread(e), n.props.data.currentUser && Object(H.a)(e), n.props.archiveThread(t))
                        }
                    }, n.selectThread = function(e) {
                        n.props.openThread({
                            threadID: e,
                            collapsed: !1
                        })
                    }, n.loadMore = function() {
                        return i.__awaiter(n, void 0, void 0, function() {
                            var e;
                            return i.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        if (this.props.data.loading || this.props.data.error || this.erroredLoadingMore) return [3, 4];
                                        t.label = 1;
                                    case 1:
                                        return t.trys.push([1, 3, , 4]), [4, this.props.loadMore()];
                                    case 2:
                                        return t.sent(), [3, 4];
                                    case 3:
                                        return e = t.sent(), this.logger.warn("Load more whisper threads failed", {
                                            error: e
                                        }), this.erroredLoadingMore = !0, [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, n.handleThreadDataReport = function(e, t) {
                        n.state.threadsByID[e] || Object(D.e)(ie, {
                            cursor: null
                        }, function(e) {
                            return e.currentUser && e.currentUser.whisperThreads && e.currentUser.whisperThreads.edges.unshift({
                                cursor: "0",
                                node: i.__assign({}, t, {
                                    isArchived: !1
                                }),
                                __typename: "WhisperThreadEdge"
                            }), e
                        });
                        var r = i.__assign({}, n.state.threadsByID[e]);
                        t.messages && (r.messageHistory = t.messages.edges.map(function(e) {
                            return e.node
                        }).slice(0, -1)), !1 !== t.isMuted && !0 !== t.isMuted || (r.muted = t.isMuted);
                        var a, o = i.__assign({}, n.state.threadsByID, ((a = {})[e] = r, a));
                        n.setState({
                            threadsByID: o,
                            unreadCount: Y(o)
                        })
                    };
                    var r = n.props.data.currentUser && n.props.data.currentUser.whisperThreads && Z(n.props.data.currentUser.whisperThreads.edges.map(function(e) {
                        return e.node
                    })) || {};
                    return n.state = {
                        error: !!n.props.data.error,
                        orderedThreadIDs: n.props.data.currentUser && n.props.data.currentUser.whisperThreads && n.props.data.currentUser.whisperThreads.edges.map(function(e) {
                            return e.node.id
                        }) || [],
                        renderError: !1,
                        threadsByID: r,
                        unreadCount: Y(r)
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentDidCatch = function(e, t) {
                    var n = this;
                    this.setState({
                        renderError: !0
                    }, function() {
                        n.logger.error(e, "A unhandled exception occurred in the component hierarchy", {
                            info: t
                        })
                    })
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (e.data.error) this.setState({
                        error: !!e.data.error
                    });
                    else if (!e.data.loading && e.data.currentUser && e.data.currentUser.whisperThreads) {
                        var t = Z(e.data.currentUser.whisperThreads.edges.map(function(e) {
                            return e.node
                        }));
                        this.setState({
                            threadsByID: t,
                            orderedThreadIDs: e.data.currentUser.whisperThreads.edges.map(function(e) {
                                return e.node.id
                            }),
                            unreadCount: Y(t)
                        })
                    }
                }, t.prototype.render = function() {
                    if (!this.props.data.currentUser || this.state.renderError || !this.props.isVisible) return null;
                    var e = T({
                        whispers: !0,
                        "whispers--theatre-mode": this.props.theatreModeEnabled,
                        "whispers--right-column-expanded": this.props.rightColumnExpanded
                    });
                    return r.createElement(g._8, {
                        className: e,
                        position: g._15.Absolute,
                        attachBottom: !0,
                        attachLeft: !0,
                        margin: {
                            right: 1
                        }
                    }, r.createElement($, {
                        currentUserID: this.props.data.currentUser.id,
                        reportThreadData: this.handleThreadDataReport,
                        archiveThread: this.archiveThread
                    }), r.createElement(Q, {
                        currentUserID: this.props.data.currentUser.id,
                        error: this.state.error,
                        loading: this.props.data.loading,
                        unreadCount: this.state.unreadCount,
                        orderedThreadIDs: this.state.orderedThreadIDs,
                        threadsByID: this.state.threadsByID,
                        selectThread: this.selectThread,
                        archiveThread: this.archiveThread,
                        loadMore: this.loadMore
                    }))
                }, t = i.__decorate([Object(w.a)(ie, {
                    props: function(e) {
                        return i.__assign({}, e, {
                            loadMore: function() {
                                return e.data.fetchMore({
                                    query: ie,
                                    variables: i.__assign({}, e.data.variables, {
                                        cursor: e.data.currentUser && e.data.currentUser.whisperThreads && e.data.currentUser.whisperThreads.edges.length > 0 ? e.data.currentUser.whisperThreads.edges[e.data.currentUser.whisperThreads.edges.length - 1].cursor : null
                                    }),
                                    updateQuery: function(e, t) {
                                        var n = t.fetchMoreResult;
                                        return n.currentUser ? e.currentUser && e.currentUser.whisperThreads ? n.currentUser.whisperThreads ? {
                                            currentUser: i.__assign({}, n.currentUser, {
                                                whisperThreads: i.__assign({}, n.currentUser.whisperThreads, {
                                                    edges: Object(D.c)(e.currentUser.whisperThreads.edges, n.currentUser.whisperThreads.edges)
                                                })
                                            })
                                        } : {
                                            currentUser: i.__assign({}, n.currentUser, {
                                                whisperThreads: e.currentUser.whisperThreads
                                            })
                                        } : {
                                            currentUser: n.currentUser
                                        } : {
                                            currentUser: null
                                        }
                                    }
                                })
                            }
                        })
                    }
                }), Object(w.a)(ne, {
                    name: "archiveThread"
                }), Object(O.a)(function(e) {
                    return {
                        query: ie,
                        types: [R.PubsubMessageType.WhisperDeleted, R.PubsubMessageType.WhisperEdited, R.PubsubMessageType.WhisperSent, R.PubsubMessageType.WhisperAllThreadsUpdate, R.PubsubMessageType.WhisperReceived, R.PubsubMessageType.WhisperThreadUpdate],
                        variables: i.__assign({}, e.data.variables),
                        skip: !e.data.currentUser || void 0 === e.data.currentUser.id,
                        topic: Object(I.B)(e.data.currentUser && e.data.currentUser.id || ""),
                        mutator: function(t, n) {
                            if (!n.currentUser || !n.currentUser.whisperThreads) return n;
                            if (Object(te.e)(t) || Object(te.d)(t)) {
                                if (Object(te.d)(t)) {
                                    var i = n.currentUser.whisperThreads.edges.find(function(e) {
                                        return e.node.id === t.data_object.thread_id
                                    });
                                    if (i) {
                                        var r = i.node.participants.find(function(e) {
                                            return !!e && e.id === "" + t.data_object.from_id
                                        });
                                        r && Object(H.l)({
                                            targetUserLogin: r.login,
                                            threadID: t.data_object.thread_id
                                        })
                                    }
                                }
                                return function(e, t, n, i) {
                                    if (!t.currentUser || !t.currentUser.whisperThreads) return t;
                                    var r = f.m.get("whisperDoNotDisturb", !1),
                                        a = t.currentUser.whisperThreads.edges.find(function(t) {
                                            return t.node.id === e.data_object.thread_id
                                        });
                                    if (a) {
                                        var o = Object(J.c)(e);
                                        a.node.messages.edges.unshift(o), Object(te.d)(e) && (e.data_object.thread_id !== n ? a.node.unreadMessagesCount += 1 : Object(ee.a)({
                                            threadID: e.data_object.thread_id,
                                            lastReadMessageID: e.data_object.message_id
                                        }, e.data_object.id), i({
                                            threadID: e.data_object.thread_id,
                                            collapsed: !0,
                                            hidden: r
                                        })), a.node.isArchived = !1;
                                        var s = t.currentUser.whisperThreads.edges.filter(function(t) {
                                            return t.node.id !== e.data_object.thread_id
                                        });
                                        s.unshift(a), t.currentUser.whisperThreads.edges = s
                                    } else i({
                                        threadID: e.data_object.thread_id,
                                        collapsed: !0,
                                        hidden: r
                                    });
                                    return t
                                }(t, n, e.focusedThreadID, e.openThread)
                            }
                            return Object(te.b)(t) ? function(e, t) {
                                if (!t.currentUser || !t.currentUser.whisperThreads) return t;
                                var n = t.currentUser.whisperThreads.edges.find(function(t) {
                                    return t.node.id === e.data_object.thread_id
                                });
                                if (n) {
                                    var i = n.node.messages.edges.find(function(t) {
                                        return t.node.id === e.data_object.message_id
                                    });
                                    i && (i.node.deletedAt = new Date(1e3 * e.data_object.deleted_at).toISOString(), i.node.content.content = e.data_object.body, i.node.content.emotes = Object(J.b)(e.data_object.tags.emotes))
                                }
                                return t
                            }(t, n) : Object(te.c)(t) ? function(e, t) {
                                if (!t.currentUser || !t.currentUser.whisperThreads) return t;
                                var n = t.currentUser.whisperThreads.edges.find(function(t) {
                                    return t.node.id === e.data_object.thread_id
                                });
                                if (n) {
                                    var i = n.node.messages.edges.find(function(t) {
                                        return t.node.id === e.data_object.message_id
                                    });
                                    i && (i.node.editedAt = new Date(1e3 * e.data_object.edited_at).toISOString(), i.node.content.content = e.data_object.body, i.node.content.emotes = Object(J.b)(e.data_object.tags.emotes))
                                }
                                return t
                            }(t, n) : Object(te.f)(t) ? function(e, t, n) {
                                if (!t.currentUser || !t.currentUser.whisperThreads) return t;
                                var i = t.currentUser.whisperThreads.edges.findIndex(function(t) {
                                    return t.node.id === e.data_object.id
                                });
                                if (i >= 0) {
                                    var r = t.currentUser.whisperThreads.edges[i],
                                        a = r.node.messages.edges[0].cursor,
                                        o = parseInt(a, 10) - e.data_object.last_read;
                                    r.node.unreadMessagesCount = o >= 0 ? o : 0, r.node.isMuted = e.data_object.muted, !r.node.isArchived && e.data_object.archived && n(e.data_object.id), r.node.isArchived = e.data_object.archived
                                }
                                return t
                            }(t, n, e.closeThread) : Object(te.a)(t) ? function(e, t) {
                                return t.currentUser && t.currentUser.whisperThreads ? (e.data_object.mark_all_read && t.currentUser.whisperThreads.edges.forEach(function(e) {
                                    e.node.unreadMessagesCount = 0
                                }), t) : t
                            }(t, n) : n
                        },
                        skipMessage: function(e, t) {
                            if (Object(te.e)(e)) {
                                if (!t.currentUser || !t.currentUser.whisperThreads) return !1;
                                var n = t.currentUser.whisperThreads.edges.find(function(t) {
                                    return t.node.id === e.data_object.thread_id
                                });
                                if (n && n.node.messages.edges.findIndex(function(t) {
                                        return t.node.id === e.data_object.nonce
                                    }) >= 0) return !0
                            }
                            return !1
                        }
                    }
                })], t)
            }(r.Component));
        var ae = Object(c.b)(function(e) {
                return {
                    isVisible: Object(E.b)(e),
                    rightColumnExpanded: e.ui.rightColumnExpanded,
                    theatreModeEnabled: e.ui.theatreModeEnabled,
                    focusedThreadID: e.whispers.display.focusedID
                }
            }, function(e) {
                return {
                    openThread: function(t) {
                        return e(C.l(t, Object(N.a)()))
                    },
                    closeThread: function(t) {
                        return e(C.h(t, Object(N.a)()))
                    }
                }
            })(re),
            oe = n("F8kA"),
            se = n("bZTi"),
            le = n("yWCw"),
            ce = n("68hr"),
            de = n("Ejve"),
            ue = n("eBiB"),
            pe = n("0Mfl"),
            me = se.a.wrap(function() {
                return n.e(55).then(n.bind(null, "8U1+"))
            }, "AnonFrontPage"),
            he = se.a.wrap(function() {
                return n.e(64).then(n.bind(null, "41t4"))
            }, "BroadcastPage"),
            fe = se.a.wrap(function() {
                return n.e(54).then(n.bind(null, "Dd84"))
            }, "BrowseRootPage"),
            ge = se.a.wrap(function() {
                return n.e(40).then(n.bind(null, "gZGZ"))
            }, "ChannelClipsPage"),
            ve = se.a.wrap(function() {
                return n.e(56).then(n.bind(null, "zfLI"))
            }, "ChannelCollectionsPage"),
            be = se.a.wrap(function() {
                return n.e(42).then(n.bind(null, "lW0T"))
            }, "ChannelEventsPage"),
            ke = se.a.wrap(function() {
                return n.e(44).then(n.bind(null, "35Zp"))
            }, "ChannelFollowersPage"),
            ye = se.a.wrap(function() {
                return n.e(43).then(n.bind(null, "ztSx"))
            }, "ChannelFollowingPage"),
            _e = se.a.wrap(function() {
                return n.e(31).then(n.bind(null, "oFVJ"))
            }, "ChannelPage"),
            Se = se.a.wrap(function() {
                return n.e(32).then(n.bind(null, "g8mI"))
            }, "ChannelVideosPage"),
            Ee = se.a.wrap(function() {
                return n.e(60).then(n.bind(null, "rujk"))
            }, "CommunityModerationRoot"),
            Ce = se.a.wrap(function() {
                return n.e(69).then(n.bind(null, "BAkg"))
            }, "CreateCommunityPage"),
            Ne = se.a.wrap(function() {
                return n.e(76).then(n.bind(null, "yMnN"))
            }, "DevOnlyRoot"),
            Te = se.a.wrap(function() {
                return n.e(47).then(n.bind(null, "7yeK"))
            }, "DirectoryRootPage"),
            we = se.a.wrap(function() {
                return n.e(72).then(n.bind(null, "IzAE"))
            }, "DevOnlyTestingCarouselPage"),
            Oe = se.a.wrap(function() {
                return n.e(77).then(n.bind(null, "mqYJ"))
            }, "EmailUnsubscribePage"),
            Re = se.a.wrap(function() {
                return n.e(78).then(n.bind(null, "Tj44"))
            }, "EmailVerificationPage"),
            De = se.a.wrap(function() {
                return n.e(50).then(n.bind(null, "NTi8"))
            }, "EventLandingPage"),
            Ie = se.a.wrap(function() {
                return n.e(61).then(n.bind(null, "0QnV"))
            }, "ExtensionPage"),
            xe = se.a.wrap(function() {
                return n.e(49).then(n.bind(null, "IpE8"))
            }, "FollowingRootPage"),
            Fe = se.a.wrap(function() {
                return n.e(53).then(n.bind(null, "IOEW"))
            }, "FrontPage"),
            Pe = se.a.wrap(function() {
                return n.e(71).then(n.bind(null, "H+V/"))
            }, "FriendRequestsPage"),
            Ue = se.a.wrap(function() {
                return n.e(70).then(n.bind(null, "mlfa"))
            }, "FriendsPage"),
            je = se.a.wrap(function() {
                return n.e(68).then(n.bind(null, "DZCb"))
            }, "InventoryPage"),
            Ae = se.a.wrap(function() {
                return n.e(83).then(n.bind(null, "o8EG"))
            }, "ManagerRedirectPage"),
            Le = se.a.wrap(function() {
                return n.e(74).then(n.bind(null, "jWoj"))
            }, "MessagesPage"),
            Me = se.a.wrap(function() {
                return n.e(39).then(n.bind(null, "gZLf"))
            }, "PaymentsLandingPage"),
            Be = se.a.wrap(function() {
                return n.e(81).then(n.bind(null, "DkuH"))
            }, "ReportUserPage"),
            We = se.a.wrap(function() {
                return n.e(41).then(n.bind(null, "K4jf"))
            }, "SettingsRoot"),
            Ve = se.a.wrap(function() {
                return n.e(38).then(n.bind(null, "uiPj"))
            }, "VideoWatchPage"),
            He = se.a.wrap(function() {
                return n.e(65).then(n.bind(null, "6Vx1"))
            }, "DevOnlyTestingAmazonOffersPage"),
            Ge = se.a.wrap(function() {
                return n.e(63).then(n.bind(null, "jQFB"))
            }, "SubscriptionsManagementPage"),
            ze = se.a.wrap(function() {
                return n.e(45).then(n.bind(null, "GUP0"))
            }, "UnsubscribePage"),
            qe = function() {
                return window.location.assign(window.location.href), null
            },
            Qe = function(e) {
                var t = Object(ue.a)(e.match.params.videoID);
                return r.createElement(oe.c, {
                    to: "/videos/" + t
                })
            },
            Ke = function() {
                return r.createElement(oe.c, {
                    path: "/",
                    to: "/directory/following"
                })
            },
            $e = function(e) {
                return r.createElement(oe.c, {
                    to: "/popout/" + e.match.params.channelLogin + "/chat"
                })
            },
            Ye = function(e) {
                return r.createElement(oe.c, {
                    to: "/" + e.match.params.channelLogin + "/videos/all"
                })
            },
            Ze = function(e) {
                return r.createElement(oe.c, {
                    to: "/" + e.match.params.channelLogin + "/videos/archive"
                })
            },
            Xe = function(e) {
                return r.createElement(oe.c, {
                    to: "/teams/" + e.match.params.teamName + "/dashboard"
                })
            },
            Je = function(e) {
                return r.createElement(oe.c, {
                    to: "/directory/game/" + e.match.params.encodedCommunityName + "/videos/all"
                })
            },
            et = function() {
                return r.createElement(oe.c, {
                    to: "/directory/all/xbox"
                })
            },
            tt = function() {
                return window.location.replace(pe.a), null
            },
            nt = function(e) {
                return window.location.replace(f.a.playerBaseURL + "/?channel=" + e.match.params.channelName), null
            },
            it = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isError: !1
                    }, t.logger = f.o.logger.withCategory("default-root-router"), t
                }
                return i.__extends(t, e), t.prototype.componentDidCatch = function(e, t) {
                    var n = this;
                    this.setState({
                        isError: !0
                    }, function() {
                        n.logger.error(e, "A unhandled exception occurred in the component hierarchy", {
                            info: t
                        })
                    })
                }, t.prototype.render = function() {
                    return this.state.isError ? r.createElement(le.a, {
                        message: Object(f.d)("An error occurred on this page", "DefaultRootRouter")
                    }) : r.createElement(oe.e, null, f.a.buildType !== de.a.Production && r.createElement(oe.d, {
                        path: "/_dev/testing/carousel",
                        component: we
                    }), f.a.buildType !== de.a.Production && r.createElement(oe.d, {
                        path: "/_dev/testing/amazon-offers/:channelName",
                        component: He
                    }), f.a.buildType !== de.a.Production && r.createElement(oe.d, {
                        path: "/_dev",
                        component: Ne
                    }), r.createElement(oe.d, {
                        exact: !0,
                        path: "/",
                        component: this.props.isLoggedIn ? Fe : me
                    }), r.createElement(oe.d, {
                        path: "/activate",
                        render: qe
                    }), r.createElement(oe.d, {
                        path: "/bits",
                        render: qe
                    }), r.createElement(oe.d, {
                        path: "/bits-checkout",
                        render: qe
                    }), r.createElement(oe.d, {
                        path: "/checkout",
                        render: qe
                    }), r.createElement(oe.d, {
                        path: "/embed",
                        render: qe
                    }), r.createElement(oe.d, {
                        path: "/popout",
                        render: qe
                    }), r.createElement(oe.d, {
                        path: "/prime",
                        render: qe
                    }), r.createElement(oe.d, {
                        path: "/subs",
                        render: qe
                    }), r.createElement(oe.d, {
                        path: "/broadcast",
                        component: he
                    }), r.createElement(oe.d, {
                        path: "/collections/:collectionID",
                        component: Ve
                    }), r.createElement(oe.d, {
                        path: "/communities/create",
                        component: Ce
                    }), r.createElement(oe.d, {
                        path: "/communities/:encodedCommunityName/details",
                        component: Te
                    }), r.createElement(oe.d, {
                        path: "/communities/:encodedCommunityName/moderation/:page?",
                        component: Ee
                    }), r.createElement(oe.d, {
                        path: "/communities/:encodedCommunityName/:encodedLanguage",
                        component: Te
                    }), r.createElement(oe.d, {
                        path: "/communities/:encodedCommunityName",
                        component: Te
                    }), r.createElement(oe.d, {
                        path: "/directory/communities",
                        component: fe
                    }), r.createElement(oe.d, {
                        path: "/directory/creative",
                        component: fe
                    }), r.createElement(oe.d, {
                        path: "/directory/following/:category?",
                        component: xe
                    }), r.createElement(oe.d, {
                        path: "/directory/game/:encodedCommunityName/clips",
                        component: Te
                    }), r.createElement(oe.d, {
                        path: "/directory/game/:encodedCommunityName/details",
                        component: Te
                    }), r.createElement(oe.d, {
                        path: "/directory/game/:encodedCommunityName/videos/:filter",
                        component: Te
                    }), r.createElement(oe.d, {
                        path: "/directory/game/:encodedCommunityName/videos",
                        render: Je
                    }), r.createElement(oe.d, {
                        path: "/directory/game/:encodedCommunityName/:encodedLanguage",
                        component: Te
                    }), r.createElement(oe.d, {
                        path: "/directory/game/:encodedCommunityName",
                        component: Te
                    }), r.createElement(oe.d, {
                        path: "/directory/all/ps4",
                        component: fe
                    }), r.createElement(oe.d, {
                        path: "/directory/all/xb1",
                        component: et
                    }), r.createElement(oe.d, {
                        path: "/directory/all/xbox",
                        component: fe
                    }), r.createElement(oe.d, {
                        path: "/directory/all/:encodedLanguage",
                        component: fe
                    }), r.createElement(oe.d, {
                        path: "/directory/all",
                        component: fe
                    }), r.createElement(oe.d, {
                        path: "/directory/:category?",
                        component: fe
                    }), r.createElement(oe.d, {
                        path: "/events/:eventName",
                        component: De
                    }), r.createElement(oe.d, {
                        path: "/email-unsubscribe",
                        component: Oe
                    }), r.createElement(oe.d, {
                        path: "/email-verification/:emailOpaqueId",
                        component: Re
                    }), r.createElement(oe.d, {
                        path: "/ext/:extensionID",
                        component: Ie
                    }), r.createElement(oe.d, {
                        path: "/friends/requests",
                        component: Pe
                    }), r.createElement(oe.d, {
                        path: "/friends",
                        component: Ue
                    }), r.createElement(oe.d, {
                        path: "/payments",
                        component: Me
                    }), r.createElement(oe.d, {
                        path: "/following",
                        component: Ke
                    }), r.createElement(oe.d, {
                        path: "/inbox",
                        component: Le
                    }), r.createElement(oe.d, {
                        path: "/inventory",
                        component: je
                    }), r.createElement(oe.d, {
                        path: "/outbox",
                        component: Le
                    }), r.createElement(oe.d, {
                        path: "/videos/v:videoID",
                        render: Qe
                    }), r.createElement(oe.d, {
                        path: "/videos/:videoID",
                        component: Ve
                    }), r.createElement(oe.d, {
                        path: "/store",
                        render: tt
                    }), r.createElement(oe.d, {
                        path: "/store/merch",
                        render: tt
                    }), r.createElement(oe.d, {
                        path: "/subscriptions",
                        component: Ge
                    }), r.createElement(oe.d, {
                        path: "/products/:productName/ticket/edit",
                        component: ze
                    }), r.createElement(oe.d, {
                        path: "/settings/:tab?",
                        component: We
                    }), r.createElement(oe.d, {
                        path: "/team/:teamName/edit",
                        render: Xe
                    }), r.createElement(oe.d, {
                        path: "/manager/:pageName?",
                        component: Ae
                    }), r.createElement(oe.d, {
                        path: "/messages/:pageName?",
                        component: Le
                    }), r.createElement(oe.d, {
                        path: "/:channelName",
                        component: _e,
                        exact: !0
                    }), r.createElement(oe.d, {
                        path: "/:channelName/report",
                        component: Be
                    }), r.createElement(oe.d, {
                        path: "/:channelLogin/profile",
                        render: Ye
                    }), r.createElement(oe.d, {
                        path: "/:channelLogin/videos/(past_broadcasts?)",
                        render: Ze
                    }), r.createElement(oe.d, {
                        path: "/:channelLogin/videos/:filter(all|archive|upload|highlight|past_premiere)",
                        component: Se
                    }), r.createElement(oe.d, {
                        path: "/:channelLogin/videos/:unknownFilter?",
                        render: Ye
                    }), r.createElement(oe.d, {
                        path: "/:channelName/clips",
                        component: ge
                    }), r.createElement(oe.d, {
                        path: "/:channelLogin/chat",
                        render: $e
                    }), r.createElement(oe.d, {
                        path: "/:channelLogin/collections",
                        component: ve
                    }), r.createElement(oe.d, {
                        path: "/:channelLogin/events",
                        component: be
                    }), r.createElement(oe.d, {
                        path: "/:channelLogin/followers",
                        component: ke
                    }), r.createElement(oe.d, {
                        path: "/:channelLogin/following",
                        component: ye
                    }), r.createElement(oe.d, {
                        path: "/:channelLogin/inbox",
                        component: Le
                    }), r.createElement(oe.d, {
                        path: "/:channelLogin/outbox",
                        component: Le
                    }), r.createElement(oe.d, {
                        path: "/:channelName/p/:entityID",
                        component: _e
                    }), r.createElement(oe.d, {
                        path: "/:channelName/rooms/:roomName",
                        component: _e
                    }), r.createElement(oe.d, {
                        path: "/:channelName/embed",
                        render: nt
                    }), r.createElement(oe.d, {
                        path: "/:channelName/popout",
                        render: nt
                    }), r.createElement(oe.d, {
                        path: "*",
                        component: ce.a
                    }))
                }, t
            }(r.Component),
            rt = Object(L.d)("DefaultRootRouter", {
                autoReportInteractive: !0
            })(it);
        n.d(t, "b", function() {
            return at
        }), n.d(t, "a", function() {
            return ot
        });
        var at = "twilight-main",
            ot = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.setRootScrollableContentRef = function(e) {
                        t.setState({
                            rootScrollableContentRef: e
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(g._8, {
                        display: g.R.Flex,
                        flexDirection: g.T.Column,
                        flexWrap: g.U.NoWrap,
                        fullHeight: !0
                    }, r.createElement(y.a, null), this.props.firstPageLoaded && this.props.isLoggedIn && r.createElement(_.a, null), r.createElement(g._8, {
                        display: g.R.Flex,
                        flexWrap: g.U.NoWrap,
                        position: g._15.Relative,
                        overflow: g._11.Hidden,
                        fullHeight: !0
                    }, r.createElement(h, null), r.createElement(g._2, {
                        overflow: g._11.Hidden,
                        position: g._15.Relative,
                        flexGrow: 1,
                        fullHeight: !0,
                        fullWidth: !0,
                        display: g.R.Flex,
                        flexDirection: g.T.Column,
                        zIndex: this.props.theatreModeEnabled ? void 0 : g._62.Default
                    }, r.createElement("main", {
                        className: at
                    }, r.createElement(k.b, null), r.createElement(s.a, {
                        contentRefDelegate: this.setRootScrollableContentRef
                    }, r.createElement(rt, {
                        isLoggedIn: this.props.isLoggedIn
                    }), r.createElement(a.b, {
                        mainRef: this.state.rootScrollableContentRef
                    })), r.createElement(v, null), this.props.firstPageLoaded && r.createElement(ae, null))), r.createElement(o.a, null)))
                }, t
            }(r.Component)
    },
    TMvI: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "OnlineFriends"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "friends"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "activity"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "type"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Playing"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "game"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Streaming"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "stream"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "game"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "name"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Watching"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "user"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "displayName"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "login"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "hosting"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "displayName"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "login"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "availability"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "displayName"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "login"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "profileImageURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "70"
                                                            }
                                                        }],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "hosting"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 338
            }
        };
        n.loc.source = {
            body: "query OnlineFriends {\ncurrentUser {\nid\nfriends {\nedges {\nactivity {\ntype\n... on Playing {\ngame {\nid\nname\n}\n}\n... on Streaming {\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n... on Watching {\nuser {\nid\ndisplayName\nlogin\nhosting {\nid\ndisplayName\nlogin\n}\n}\n}\n}\navailability\nnode {\nid\ndisplayName\nlogin\nprofileImageURL(width: 70)\nhosting {\nid\n}\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    TP6L: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            r = n("F8kA"),
            a = n("2KeS"),
            o = n("+xm8"),
            s = n("f2i/"),
            l = n("Aj/L"),
            c = n("TToO"),
            d = n("GiK3"),
            u = n("6sO2"),
            p = n("Qk3C"),
            m = n("+Znq"),
            h = n("7vx8"),
            f = n("vH/s"),
            g = n("MsZa"),
            v = n("0Mfl"),
            b = n("CSlQ"),
            k = n("DBTH"),
            y = n("U3i2");
        var _ = Object(i.b)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded,
                    languageCode: e.session.languageCode,
                    currentUser: Object(l.c)(e)
                }
            })(y.b),
            S = n("CIox"),
            E = n("6BvN"),
            C = n("HM6l"),
            N = n("ZVME"),
            T = n("MAZT"),
            w = n("uTyw"),
            O = n("5LoI"),
            R = "search_tracking_enabled";

        function D() {
            var e = Math.round(Date.now() / 1e3);
            return {
                client_time: e,
                distinct_id: u.o.session.deviceID,
                time: e
            }
        }

        function I() {
            return u.o.dynamicSettings.get(R, !1)
        }

        function x(e, t) {
            I() && u.o.tracking.track(f.SpadeEventType.SearchQuery, c.__assign({}, D(), {
                query: e,
                count: t
            }))
        }
        var F = n("rCmJ"),
            P = n("HW6M"),
            U = n("zCIC"),
            j = n("czpb"),
            A = n("SZoP"),
            L = n("mi6k"),
            M = n("7Nlu"),
            B = n("5kgt"),
            W = n("Odds"),
            V = (n("afun"), n("y+bN")),
            H = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return c.__extends(t, e), t.prototype.render = function() {
                    var e, t = {
                        "search-live-result-card": !0,
                        "search-live-result-card--hover": this.props.borderHover
                    };
                    return this.props.data && !this.props.data.loading && this.props.data.user && this.props.data.user.stream && (e = this.props.data.user.stream.previewImageURL), d.createElement(W._8, {
                        className: P(t),
                        key: this.props.id,
                        fullWidth: !0
                    }, d.createElement(W._6, c.__assign({
                        linkTo: this.props.linkTo,
                        hover: this.props.borderHover,
                        tabIndex: -1,
                        "data-a-target": "search-live-result-card-link",
                        onClick: this.props.onClick
                    }, Object(B.a)(this.props)), d.createElement(W.C, null, d.createElement(W._8, {
                        className: "search-live-result-card__wrapper",
                        position: W._15.Relative,
                        overflow: W._11.Hidden,
                        fullWidth: !0
                    }, d.createElement(W.E, {
                        src: e || u.a.defaultStreamPreviewURL,
                        alt: this.props.imageAlt,
                        aspect: W.l.Aspect16x9
                    }), d.createElement(W._35, {
                        className: "search-live-result-card__overlay",
                        position: W._15.Absolute,
                        attachLeft: !0,
                        attachTop: !0,
                        attachRight: !0,
                        attachBottom: !0,
                        display: W.R.Flex,
                        flexDirection: W.T.Column,
                        justifyContent: W._7.End,
                        overflow: W._11.Hidden,
                        color: W.K.Overlay
                    }, d.createElement(W.D, null, d.createElement(W._8, {
                        className: "search-live-result-card__body",
                        padding: .5
                    }, d.createElement(W.Q, {
                        type: W._49.H5,
                        ellipsis: !0,
                        className: "search-live-result-card__title"
                    }, this.props.channelName), d.createElement(W._8, {
                        className: "search-live-result-card__viewer-count-container",
                        display: W.R.Flex,
                        alignItems: W.c.Center
                    }, d.createElement(W._8, {
                        margin: {
                            right: .5
                        },
                        display: W.R.Flex,
                        alignItems: W.c.Center,
                        flexShrink: 0
                    }, d.createElement(W._24, {
                        asset: W._25.GlyphLive,
                        type: W._26.Live,
                        width: 14,
                        height: 14
                    })), d.createElement(W.Q, {
                        className: "search-live-result-card__viewer-count",
                        ellipsis: !0
                    }, Object(u.e)(this.props.viewerCount))), d.createElement(W.Q, {
                        className: "search-live-result-card__info",
                        ellipsis: !0
                    }, this.props.title))))))))
                }, t = c.__decorate([Object(h.a)(V, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.login
                            }
                        }
                    }
                })], t)
            }(d.Component),
            G = (n("H9qc"), function(e) {
                var t, n, i, r;
                return e.title && (e.hitsCount && e.hitsCount > 0 ? t = Object(u.d)("more", "SearchResultSection") : e.totalHitsCount && e.totalHitsCount > 0 && (t = Object(u.d)("Show", "SearchResultSection")), void 0 !== e.totalHitsCount && (i = d.createElement(W._12, {
                    type: W._13.Brand,
                    label: e.totalHitsCount < 100 ? Object(u.e)(e.totalHitsCount) : "99+"
                })), n = d.createElement(W._8, {
                    className: "search-result-section__titlesep"
                }, d.createElement(W._6, c.__assign({
                    onClick: e.onHeaderClick,
                    tabIndex: -1,
                    alpha: !0
                }, Object(W._63)(e), {
                    "data-ts_selectable": !0
                }), d.createElement(W._8, {
                    display: W.R.Flex,
                    padding: {
                        left: 1,
                        right: 2,
                        y: .5
                    }
                }, d.createElement(W._8, {
                    display: W.R.Inline,
                    margin: {
                        right: 1
                    }
                }, d.createElement(W.Q, {
                    type: W._49.Span,
                    color: W.K.Link,
                    fontSize: W.V.Size7,
                    transform: W._48.Uppercase
                }, e.title)), d.createElement("div", null, i), d.createElement(W._8, {
                    textAlign: W._45.Right,
                    flexGrow: 1
                }, d.createElement(W.Q, {
                    fontSize: W.V.Size7,
                    transform: W._48.Uppercase
                }, t)))))), (Array.isArray(e.children) && e.children.length > 0 || e.children && !Array.isArray(e.children)) && (r = d.createElement(W._8, {
                    className: "search-result-section__listing-wrapper",
                    margin: {
                        top: .5,
                        bottom: .5
                    }
                }, e.children)), d.createElement("div", {
                    className: "search-result-section__block"
                }, n, r)
            }),
            z = (n("oI0V"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return c.__extends(t, e), t.prototype.render = function() {
                    return d.createElement(W._35, {
                        className: "search-title-bar " + (this.props.showBack ? "search-title-bar--show" : ""),
                        background: W.n.Alt2,
                        display: W.R.Flex,
                        alignItems: W.c.Center,
                        position: W._15.Relative,
                        zIndex: W._62.Above,
                        borderBottom: !0,
                        "data-a-target": "nav-search-title-bar"
                    }, d.createElement(W._8, {
                        className: "search-title-bar__back-container",
                        display: W.R.Flex,
                        alignContent: W.b.Stretch
                    }, d.createElement(W.w, {
                        icon: W._25.AngleLeft,
                        type: W.y.Secondary,
                        size: W.x.Large,
                        onClick: this.props.onBackClick,
                        ariaLabel: Object(u.d)("Back button", "SearchTitleBar"),
                        "data-ts_selectable": this.props.showBack,
                        "data-a-target": "nav-search-back"
                    })), d.createElement(W._8, {
                        className: "search-title-bar__title",
                        position: W._15.Relative,
                        padding: {
                            left: 1
                        }
                    }, d.createElement(W.Q, {
                        fontSize: W.V.Size5
                    }, this.props.title)))
                }, t
            }(d.Component)),
            q = n("PHcJ"),
            Q = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleOptionChange = function(e) {
                        var n = e.currentTarget.elements;
                        t.props.onOptionsChange({
                            type: +n.type.value,
                            length: +n.video_length.value,
                            sort: +n.sort.value
                        })
                    }, t
                }
                return c.__extends(t, e), t.prototype.render = function() {
                    return d.createElement(W._35, {
                        className: "search__video-filters",
                        background: W.n.Alt,
                        padding: {
                            top: .5,
                            x: 1
                        }
                    }, d.createElement(W._2, {
                        display: W.R.Flex,
                        justifyContent: W._7.Between,
                        flexWrap: W.U.Wrap
                    }, d.createElement("form", {
                        onInput: this.handleOptionChange
                    }, d.createElement(W._8, {
                        display: W.R.Flex
                    }, d.createElement(W._8, {
                        display: W.R.InlineFlex,
                        margin: {
                            right: 1,
                            bottom: .5
                        },
                        flexShrink: 0
                    }, d.createElement(W._30, {
                        name: "type"
                    }, d.createElement("option", {
                        value: q.c.AllVideos
                    }, Object(u.d)("All Videos", "search__video-filters")), d.createElement("option", {
                        value: q.c.PastBroadcasts
                    }, Object(u.d)("Past Broadcasts", "search__video-filters")), d.createElement("option", {
                        value: q.c.Uploads
                    }, Object(u.d)("Uploads", "search__video-filters")), d.createElement("option", {
                        value: q.c.Highlights
                    }, Object(u.d)("Highlights", "search__video-filters")))), d.createElement(W._8, {
                        display: W.R.InlineFlex,
                        margin: {
                            right: 1,
                            bottom: .5
                        }
                    }, d.createElement(W._30, {
                        name: "video_length"
                    }, d.createElement("option", {
                        value: q.a.AnyLength
                    }, Object(u.d)("Any Length", "search__video-filters")), d.createElement("option", {
                        value: q.a.Short
                    }, Object(u.d)("Short", "search__video-filters")), d.createElement("option", {
                        value: q.a.Long
                    }, Object(u.d)("Long", "search__video-filters"))))), d.createElement(W._8, {
                        margin: {
                            bottom: .5
                        },
                        display: W.R.InlineFlex,
                        flexShrink: 0
                    }, d.createElement(W._30, {
                        name: "sort"
                    }, d.createElement("option", {
                        value: q.b.Popular
                    }, Object(u.d)("Popular", "search__video-filters")), d.createElement("option", {
                        value: q.b.Newest
                    }, Object(u.d)("Newest", "search__video-filters")))))))
                }, t
            }(d.Component),
            K = (n("FroJ"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onBackClick = function() {
                        return t.headerSelect(null)
                    }, t.gameHeaderSelect = function() {
                        return t.headerSelect(O.a.Games)
                    }, t.liveHeaderSelect = function() {
                        return t.headerSelect(O.a.Channels)
                    }, t.userHeaderSelect = function() {
                        return t.headerSelect(O.a.Users)
                    }, t.videoHeaderSelect = function() {
                        return t.headerSelect(O.a.Videos)
                    }, t.communityHeaderSelect = function() {
                        return t.headerSelect(O.a.Communities)
                    }, t.headerSelect = function(e) {
                        t.props.onCategorySelected(e)
                    }, t.onClick = function(e) {
                        if (e.nativeEvent.stopImmediatePropagation(), e.target !== e.currentTarget) {
                            var n = e.target,
                                i = n.querySelector("a"),
                                r = i ? i.querySelector("[data-tt_content]") : null;
                            r || (i = n.closest("a")), (r = i && i.dataset.tt_content ? i : null) && t.props.onResultSelected()
                        }
                    }, t.setScrollRef = function(e) {
                        return t.scroll = e
                    }, t
                }
                return c.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.previousCategory !== this.props.currentCategory && (this.previousCategory = this.props.currentCategory, this.scroll.scrollToTop())
                }, t.prototype.render = function() {
                    var e, t, n, i = {
                        "search-results-panel": !0,
                        "search-results-panel--active": !0,
                        "search-results-panel--closed": !this.props.isOpen,
                        "search-results-panel--filtered": this.props.currentCategory === O.a.Videos
                    };
                    return e = this.props.currentCategory && null !== this.props.currentCategory ? d.createElement(z, {
                        title: this.getCategoryTitle(this.props.currentCategory),
                        showBack: !0,
                        onBackClick: this.onBackClick
                    }) : d.createElement(z, {
                        title: Object(u.d)("Top Results", "SearchResultPanel__titlebar"),
                        showBack: !1
                    }), t = this.props.isWaiting ? d.createElement(W._10, {
                        fillContent: !0
                    }) : this.props.isErrored ? this.getErrorMessage() : this.props.currentCategory && null !== this.props.currentCategory ? this.getCategoryDrillDown(this.props.currentCategory) : this.props.gameResults && this.props.gameResults.totalHits > 0 || this.props.userResults && this.props.userResults.totalHits > 0 || this.props.communityResults && this.props.communityResults.totalHits > 0 || this.props.videoResults && this.props.videoResults.totalHits > 0 || this.props.liveResults && this.props.liveResults.totalHits > 0 ? this.getResultSections() : this.getNoResultsMessage(), this.props.currentCategory === O.a.Videos && (n = d.createElement(Q, {
                        key: "video-filters",
                        onOptionsChange: this.props.onVideoOptionsChange
                    })), d.createElement("div", {
                        tabIndex: 0,
                        onKeyDown: this.props.onKeyDown
                    }, d.createElement(W._35, {
                        className: P(i),
                        background: W.n.Base,
                        overflow: W._11.Hidden,
                        elevation: 5,
                        display: W.R.Flex,
                        flexDirection: W.T.Column,
                        flexWrap: W.U.NoWrap
                    }, e, n, d.createElement(U.b, {
                        className: "search-results-panel__wrapper",
                        contentClassName: "search-results-panel__content",
                        onClick: this.onClick,
                        scrollRef: this.setScrollRef,
                        suppressScrollX: !0,
                        "data-a-target": "search-scroller"
                    }, d.createElement(W._8, {
                        fullWidth: !0
                    }, t, d.createElement(U.a, {
                        key: this.props.currentCategory || "none",
                        enabled: !this.props.isWaiting && this.props.isOpen,
                        loadMore: this.props.loadMore
                    })))))
                }, t.prototype.getResultSections = function() {
                    var e, t = [],
                        n = [],
                        i = this.getGameCards(),
                        r = this.getUserCards(),
                        a = this.getCommunityCards(),
                        o = this.getVideoCards(),
                        s = this.getLiveCards();
                    return s.length > 0 && (e = d.createElement(W._8, {
                        className: "search-results-panel__live",
                        margin: {
                            y: 1,
                            x: 1
                        }
                    }, d.createElement(W.Y, null, s))), this.getResultSection("games-section", O.a.Games, this.gameHeaderSelect, this.props.gameResults, i.length, i, n, t), this.getResultSection("live-section", O.a.Channels, this.liveHeaderSelect, this.props.liveResults, s.length, e, n, t), this.getResultSection("channels-section", O.a.Users, this.userHeaderSelect, this.props.userResults, r.length, r, n, t), this.getResultSection("videos-section", O.a.Videos, this.videoHeaderSelect, this.props.videoResults, o.length, o, n, t), this.getResultSection("communities-section", O.a.Communities, this.communityHeaderSelect, this.props.communityResults, a.length, a, n, t), t.concat(n)
                }, t.prototype.getResultSection = function(e, t, n, i, r, a, o, s) {
                    var l = d.createElement(G, {
                        key: e,
                        totalHitsCount: i ? i.totalHits : 0,
                        hitsCount: r,
                        title: this.getCategoryTitle(t),
                        onHeaderClick: n,
                        "data-a-target": e
                    }, a);
                    0 === r ? o.push(l) : s.push(l)
                }, t.prototype.getGameCards = function() {
                    var e = this;
                    return this.props.gameResults ? this.props.gameResults.results.map(function(t) {
                        return d.createElement(M.a, {
                            onClick: e.onClick,
                            id: "game_" + t.id,
                            key: "game_" + t.id,
                            imageAlt: t.thumbnailAltText,
                            linkTo: t.linkTo,
                            title: t.title,
                            "data-ts_selectable": !0,
                            "data-tt_content": !0
                        })
                    }) : []
                }, t.prototype.getLiveCards = function() {
                    var e = this;
                    return this.props.liveResults ? this.props.liveResults.results.map(function(t) {
                        var n = Object(A.a)(t.login || "", t.name || "");
                        return d.createElement(W.L, {
                            key: "live_" + t.id,
                            cols: 6
                        }, d.createElement(W._8, {
                            margin: {
                                bottom: 1
                            }
                        }, d.createElement(H, {
                            onClick: e.onClick,
                            id: "live_" + t.id,
                            imageAlt: t.thumbnailAltText,
                            linkTo: t.linkTo,
                            title: t.status || "",
                            login: t.login ? t.login : "",
                            channelName: n,
                            viewerCount: t.viewerCount || 0,
                            "data-ts_selectable": !0,
                            "data-tt_content": !0
                        })))
                    }) : []
                }, t.prototype.getUserCards = function() {
                    var e = this;
                    return this.props.userResults ? this.props.userResults.results.map(function(t) {
                        var n = Object(A.a)(t.login || "", t.name || "");
                        return d.createElement(W._6, {
                            linkTo: t.linkTo,
                            onClick: e.onClick,
                            tabIndex: -1,
                            "data-ts_selectable": !0,
                            "data-tt_content": !0,
                            key: t.id
                        }, d.createElement(W._8, {
                            padding: {
                                y: .5,
                                x: 1
                            }
                        }, d.createElement(W.C, {
                            row: !0
                        }, d.createElement(W.E, {
                            alt: t.thumbnailAltText,
                            src: t.thumbnail || "",
                            size: W.F.Size4,
                            aspect: W.l.Aspect1x1
                        }), d.createElement(W.D, {
                            overflow: W._11.Hidden
                        }, d.createElement(W._2, {
                            padding: {
                                x: 1
                            }
                        }, d.createElement(W.Q, {
                            type: W._49.H5,
                            ellipsis: !0
                        }, n))))))
                    }) : []
                }, t.prototype.getVideoCards = function() {
                    var e = this;
                    return this.props.videoResults ? this.props.videoResults.results.map(function(t) {
                        var n = Object(A.a)(t.login || "", t.name || ""),
                            i = Object(L.b)(t.length || 0);
                        return d.createElement(W._6, {
                            key: "video_" + t.id,
                            linkTo: t.linkTo,
                            onClick: e.onClick,
                            tabIndex: -1,
                            "data-ts_selectable": !0,
                            "data-tt_content": !0
                        }, d.createElement(W._8, {
                            className: "search-results-panel__card",
                            fullWidth: !0,
                            padding: {
                                y: .5,
                                x: 1
                            }
                        }, d.createElement(W.C, {
                            row: !0
                        }, d.createElement(W.E, {
                            src: t.thumbnail ? t.thumbnail : "",
                            alt: t.thumbnailAltText,
                            size: W.F.Size8,
                            aspect: W.l.Aspect16x9
                        }), d.createElement(W.D, {
                            overflow: W._11.Hidden
                        }, d.createElement(W._2, {
                            margin: {
                                left: 1
                            }
                        }, d.createElement(W.Q, {
                            type: W._49.H5,
                            ellipsis: !0
                        }, t.title)), d.createElement(W._2, {
                            margin: {
                                left: 1
                            }
                        }, d.createElement(W.Q, {
                            className: "search-results-panel__link",
                            ellipsis: !0
                        }, t.createdAt ? Object(u.c)(new Date(1e3 * t.createdAt), "medium") : "", " · ", i || "", " · ", d.createElement(W.Q, {
                            className: "search-results-panel__highlight-link",
                            type: W._49.Span
                        }, n)))))))
                    }) : []
                }, t.prototype.getCommunityCards = function() {
                    var e = this;
                    return this.props.communityResults ? this.props.communityResults.results.map(function(t) {
                        return d.createElement(W._6, {
                            key: "community_" + t.id,
                            targetBlank: Object(j.b)(),
                            linkTo: Object(j.a)(t.linkTo),
                            onClick: e.onClick,
                            tabIndex: -1,
                            "data-ts_selectable": !0,
                            "data-tt_content": !0
                        }, d.createElement(W._8, {
                            className: "search-results-panel__card",
                            fullWidth: !0,
                            padding: {
                                y: .5,
                                x: 1
                            }
                        }, d.createElement(W.C, {
                            row: !0
                        }, d.createElement(W.E, {
                            src: t.thumbnail ? t.thumbnail : "",
                            alt: t.thumbnailAltText,
                            size: W.F.Size4,
                            aspect: W.l.BoxArt
                        }), d.createElement(W.D, {
                            overflow: W._11.Hidden
                        }, d.createElement(W._2, {
                            margin: {
                                left: 1
                            }
                        }, d.createElement(W.Q, {
                            type: W._49.H5,
                            ellipsis: !0
                        }, t.name)), d.createElement(W._2, {
                            margin: {
                                left: 1
                            }
                        }, d.createElement(W.Q, {
                            className: "search-results-panel__link",
                            ellipsis: !0
                        }, Object(u.d)("{viewerCount,number} Viewers", {
                            viewerCount: t.viewerCount || 0
                        }, "SearchResultPanel")))))))
                    }) : []
                }, t.prototype.getCategoryDrillDown = function(e) {
                    var t;
                    switch (e) {
                        case O.a.Games:
                            if (!this.props.gameResults || 0 === this.props.gameResults.totalHits) return this.getNoResultsMessage();
                            t = this.getGameCards();
                            break;
                        case O.a.Users:
                            if (!this.props.userResults || 0 === this.props.userResults.totalHits) return this.getNoResultsMessage();
                            t = this.getUserCards();
                            break;
                        case O.a.Communities:
                            if (!this.props.communityResults || 0 === this.props.communityResults.totalHits) return this.getNoResultsMessage();
                            t = this.getCommunityCards();
                            break;
                        case O.a.Videos:
                            if (!this.props.videoResults || 0 === this.props.videoResults.totalHits) return this.getNoResultsMessage();
                            t = this.getVideoCards();
                            break;
                        case O.a.Channels:
                            if (!this.props.liveResults || 0 === this.props.liveResults.totalHits) return this.getNoResultsMessage();
                            t = [d.createElement(W._8, {
                                className: "search-results-panel__live",
                                margin: {
                                    x: 1
                                },
                                key: "live_drill-down-container"
                            }, d.createElement(W.Y, null, this.getLiveCards()))];
                            break;
                        default:
                            return this.getNoResultsMessage()
                    }
                    return d.createElement(G, null, t)
                }, t.prototype.getCategoryTitle = function(e) {
                    switch (e) {
                        case O.a.Games:
                            return Object(u.d)("Games", "SearchResultPanel");
                        case O.a.Users:
                            return Object(u.d)("Channels", "SearchResultPanel");
                        case O.a.Communities:
                            return Object(u.d)("Communities", "SearchResultPanel");
                        case O.a.Videos:
                            return Object(u.d)("Videos", "SearchResultPanel");
                        case O.a.Channels:
                            return Object(u.d)("Live", "SearchResultPanel");
                        default:
                            return Object(u.d)("Top Results", "SearchResultPanel")
                    }
                }, t.prototype.getNoResultsMessage = function() {
                    return d.createElement(W._8, {
                        display: W.R.Flex,
                        flexDirection: W.T.Column,
                        justifyContent: W._7.Center,
                        alignItems: W.c.Center,
                        flexGrow: 1,
                        fullHeight: !0,
                        zIndex: W._62.Above,
                        className: "search-results-panel__notice-wrap"
                    }, d.createElement(W._35, {
                        color: W.K.Alt2,
                        textAlign: W._45.Center,
                        flexShrink: 1
                    }, d.createElement(W._24, {
                        asset: W._25.SearchNoResults,
                        width: 46,
                        height: 48
                    })), d.createElement(W._2, {
                        margin: {
                            top: 1
                        },
                        textAlign: W._45.Center
                    }, d.createElement(W.Q, {
                        type: W._49.H4,
                        "data-test-selector": "panel-body-no-results"
                    }, Object(u.d)("No results found", "SearchResultPanel"))), d.createElement(W.Q, {
                        type: W._49.P
                    }, Object(u.d)("They're probably in another castle", "SearchResultPanel")))
                }, t.prototype.getErrorMessage = function() {
                    return d.createElement(W._8, {
                        display: W.R.Flex,
                        flexDirection: W.T.Column,
                        justifyContent: W._7.Center,
                        alignItems: W.c.Center,
                        flexGrow: 1,
                        fullHeight: !0,
                        zIndex: W._62.Above,
                        className: "search-results-panel__notice-wrap"
                    }, d.createElement(W._35, {
                        color: W.K.Alt2,
                        textAlign: W._45.Center,
                        flexShrink: 1
                    }, d.createElement(W._24, {
                        asset: W._25.DeadGlitch,
                        width: 46,
                        height: 48
                    })), d.createElement(W._2, {
                        margin: {
                            top: 1
                        },
                        textAlign: W._45.Center
                    }, d.createElement(W.Q, {
                        type: W._49.H4,
                        "data-test-selector": "search-error-message"
                    }, Object(u.d)("Search is not available at this time", "SearchResultPanel"))), d.createElement(W.Q, {
                        type: W._49.P
                    }, Object(u.d)("Please try again later", "SearchResultPanel")))
                }, t
            }(d.Component)),
            $ = (n("GtMZ"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        isAnimating: !1,
                        currentCategory: t.currentCategory
                    }, n
                }
                return c.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t = this;
                    e.currentCategory && e.currentCategory !== this.props.currentCategory && this.setState({
                        currentCategory: e.currentCategory
                    }), this.props.isVisible !== e.isVisible && (this.animationTimeout && window.clearTimeout(this.animationTimeout), this.setState({
                        isAnimating: !0
                    }), this.animationTimeout = window.setTimeout(function() {
                        t.setState({
                            isAnimating: !1
                        })
                    }, 300))
                }, t.prototype.componentWillUnmount = function() {
                    this.animationTimeout && window.clearTimeout(this.animationTimeout)
                }, t.prototype.render = function() {
                    if (!this.state.currentCategory) return null;
                    var e = this.getAssetName(this.state.currentCategory);
                    return this.props.isVisible || this.state.isAnimating ? d.createElement(W._8, {
                        className: "search-tag",
                        display: W.R.Flex,
                        position: W._15.Absolute,
                        attachTop: !0,
                        attachBottom: !0,
                        alignItems: W.c.Center
                    }, d.createElement(W.e, {
                        enabled: !0,
                        type: this.props.isVisible ? W.j.BounceIn : W.j.BounceOut
                    }, d.createElement(W._44, {
                        label: this.state.currentCategory,
                        icon: e,
                        onClose: this.props.onClick,
                        "data-test-selector": "filter-icon",
                        "data-a-target": "nav-search-clear"
                    }))) : null
                }, t.prototype.getAssetName = function(e) {
                    switch (e) {
                        case O.a.Games:
                            return W._25.NavGames;
                        case O.a.Users:
                            return W._25.NavProfile;
                        case O.a.Communities:
                            return W._25.Communities;
                        case O.a.Videos:
                            return W._25.NavVideos;
                        case O.a.Channels:
                        default:
                            return W._25.NavChannels
                    }
                }, t
            }(d.Component)),
            Y = (n("p6Rc"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleKeydown = function(e) {
                        e.keyCode === E.a.F && e.altKey && (e.preventDefault(), t.NavSearchInputRef.focus())
                    }, t.setNavSearchInputRef = function(e) {
                        return t.NavSearchInputRef = e
                    }, t.handleChange = function(e) {
                        t.props.onChange(e.target.value)
                    }, t.categoryTagClicked = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.props.onCategorySelected(null)
                    }, t
                }
                return c.__extends(t, e), t.prototype.componentWillMount = function() {
                    window.addEventListener("keydown", this.handleKeydown)
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("keydown", this.handleKeydown)
                }, t.prototype.render = function() {
                    return d.createElement("div", null, d.createElement("div", {
                        className: "top-nav__search-container",
                        "data-click-out-id": "nav-search-balloon"
                    }, d.createElement(F.a, {
                        onClickOut: this.props.onClickOut
                    }, d.createElement(W._27, {
                        onChange: this.handleChange,
                        onFocus: this.props.onFocus,
                        onKeyDown: this.props.onKeyDown,
                        placeholder: Object(u.d)("Search", "NavSearch"),
                        id: "nav-search-input",
                        "data-a-target": "nav-search-input",
                        spellCheck: !1,
                        refDelegate: this.setNavSearchInputRef
                    }), d.createElement(W.q, {
                        direction: W.r.Bottom,
                        noTail: !0,
                        size: W.s.Large,
                        show: this.props.isOpen,
                        offsetY: "5px",
                        "data-a-target": "nav-search-balloon"
                    }, d.createElement(K, {
                        isOpen: this.props.isOpen,
                        gameResults: this.props.gameResults,
                        userResults: this.props.userResults,
                        communityResults: this.props.communityResults,
                        videoResults: this.props.videoResults,
                        liveResults: this.props.liveResults,
                        isErrored: this.props.isErrored,
                        isWaiting: this.props.isWaiting,
                        onResultSelected: this.props.onResultSelected,
                        onCategorySelected: this.props.onCategorySelected,
                        currentCategory: this.props.currentCategory,
                        onVideoOptionsChange: this.props.onVideoOptionsChange,
                        loadMore: this.props.loadMore,
                        onKeyDown: this.props.onKeyDown
                    })), d.createElement($, {
                        isVisible: this.props.isOpen && !!this.props.currentCategory,
                        currentCategory: this.props.currentCategory,
                        onClick: this.categoryTagClicked
                    }))))
                }, t
            }(d.Component)),
            Z = 175,
            X = 1e3,
            J = 1e3,
            ee = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.didSelectCategory = !1, n.didSelectResult = !1, n.searchResultsFirstPage = null, n.onCategorySelected = function(e) {
                        n.setState(function(t) {
                            return c.__assign({}, n.getEmptyState(), {
                                term: t.term,
                                currentCategory: e,
                                isOpen: !0,
                                isWaiting: !0
                            })
                        }, function() {
                            n.didSelectCategory = !0, n.doSearch(n.state.term)
                        })
                    }, n.onChange = function(e) {
                        n.inputTimer && (clearTimeout(n.inputTimer), n.inputTimer = 0), n.props.latencyTracking.resetCustomEvents(N.a.Search), e ? (n.searchResultsFirstPage = n.props.latencyTracking.registerCustomEvent({
                            benchmark: X,
                            group: N.a.Search,
                            key: N.b.SearchResultsFirstPage,
                            label: N.c.FirstPageLoaded,
                            start: N.d.Registration
                        }), n.inputTimer = setTimeout(function() {
                            n.setState({
                                topGameResults: null,
                                topUserResults: null,
                                topLiveResults: null,
                                topVideoResults: null,
                                topCommunityResults: null,
                                isWaiting: !0,
                                term: e
                            }, function() {
                                n.state.videoOptions ? n.doVideosSearch(e, n.state.videoOptions) : n.doSearch(e)
                            })
                        }, Z)) : n.setState(n.getEmptyState())
                    }, n.onHistoryChange = function() {
                        n.state.isOpen && n.setState({
                            isOpen: !1
                        })
                    }, n.onClickOut = function() {
                        n.state.isOpen && n.setState({
                            isOpen: !1
                        })
                    }, n.onFocus = function() {
                        n.state.term && !n.state.isOpen && n.setState({
                            isOpen: !0
                        })
                    }, n.onKeyDown = function(e) {
                        if (n.state.term) {
                            var t = function() {
                                e.preventDefault(), e.stopPropagation()
                            };
                            e.keyCode === E.a.Esc ? n.setState({
                                isOpen: !1
                            }) : e.keyCode === E.a.Up ? (t(), n.focusNext(-1)) : e.keyCode === E.a.Down && (t(), n.focusNext(1))
                        }
                    }, n.onResultSelected = function() {
                        n.didSelectResult = !0, n.setState({
                            isOpen: !1
                        })
                    }, n.loadMore = function() {
                        return c.__awaiter(n, void 0, void 0, function() {
                            var e, t, n, i, r, a = this;
                            return c.__generator(this, function(o) {
                                switch (o.label) {
                                    case 0:
                                        if (this.state.queryID || null === this.state.currentCategory || !0 === this.state.exhaustedHits || this.state.videoOptions) return [2];
                                        e = this.state.currentPage + 1, this.props.latencyTracking.resetCustomEvents(N.a.Search), n = this.props.latencyTracking.registerCustomEvent({
                                            benchmark: J,
                                            group: N.a.Search,
                                            key: N.b.SearchResultsLaterPage,
                                            label: N.c.LaterPageLoaded,
                                            start: N.d.Registration
                                        }), o.label = 1;
                                    case 1:
                                        return o.trys.push([1, 3, , 4]), [4, this.searchClient.queryForType(this.state.currentCategory, this.state.term, "", {
                                            page: e
                                        })];
                                    case 2:
                                        return t = o.sent(), [3, 4];
                                    case 3:
                                        return i = o.sent(), u.j.error(i, "Algolia page search failed"), this.setState(c.__assign({}, this.getEmptyState(), {
                                            isErrored: !0,
                                            isOpen: !0
                                        })), [2];
                                    case 4:
                                        return t ? (r = Object(w.b)({
                                            searchResults: t,
                                            append: e > 0,
                                            currentGameResults: this.state.currentGameResults,
                                            currentUserResults: this.state.currentUserResults,
                                            currentCommunityResults: this.state.currentCommunityResults,
                                            currentVideoResults: this.state.currentVideoResults,
                                            currentLiveResults: this.state.currentLiveResults
                                        }), this.setState(c.__assign({}, r, {
                                            isOpen: !0,
                                            isWaiting: !1,
                                            currentPage: e,
                                            exhaustedHits: r.exhaustedHits
                                        }), function() {
                                            a.props.latencyTracking.reportCustomEvent(n)
                                        }), [2]) : (this.setState(c.__assign({}, this.getEmptyState(), {
                                            isErrored: !0,
                                            isOpen: !0
                                        })), [2])
                                }
                            })
                        })
                    }, n.doVideosSearch = function(e, t) {
                        return c.__awaiter(n, void 0, void 0, function() {
                            var n, i, r, a = this;
                            return c.__generator(this, function(o) {
                                switch (o.label) {
                                    case 0:
                                        n = C.a(), o.label = 1;
                                    case 1:
                                        return o.trys.push([1, 3, , 4]), [4, this.searchClient.queryVideos(e, n, t)];
                                    case 2:
                                        return i = o.sent(), x(e, i.totalHits), i.hits && this.setState({
                                            topGameResults: null,
                                            topUserResults: null,
                                            topLiveResults: null,
                                            topVideoResults: null,
                                            topCommunityResults: null,
                                            currentVideoResults: {
                                                totalHits: i.totalHits,
                                                results: i.hits.map(w.a)
                                            },
                                            queryID: "",
                                            isWaiting: !1
                                        }, function() {
                                            a.searchResultsFirstPage && (a.props.latencyTracking.reportCustomEvent(a.searchResultsFirstPage), a.searchResultsFirstPage = null)
                                        }), [3, 4];
                                    case 3:
                                        return r = o.sent(), u.j.error(r, "Algolia video search failed"), this.setState({
                                            isErrored: !0,
                                            isWaiting: !1
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, n.changeVideoOptions = function(e) {
                        n.setState({
                            videoOptions: e
                        }, function() {
                            n.doVideosSearch(n.state.term, e)
                        })
                    }, n.searchClient = new T.a({
                        appId: u.a.algoliaApplicationID,
                        apiKey: u.a.algoliaAPIKey,
                        apolloClient: u.o.apollo.client,
                        logger: u.j,
                        config: u.a
                    }), n.state = n.getEmptyState(), n
                }
                return c.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive(), this.props.history.listen(this.onHistoryChange)
                }, t.prototype.componentDidUpdate = function(e, t) {
                    var n, i;
                    !this.state.focusSelectable || this.state.queryID || this.inputTimer || (this.focusNext(1), this.setState({
                        focusSelectable: !1
                    })), t.isOpen && !this.state.isOpen ? (this.didSelectCategory || this.didSelectResult ? (n = this.state.term, i = this.state.currentCategory ? function(e) {
                        switch (e) {
                            case O.a.Channels:
                                return "channels";
                            case O.a.Communities:
                                return "communities";
                            case O.a.Games:
                                return "games";
                            case O.a.Users:
                                return "users";
                            case O.a.Videos:
                            case O.a.VideosNewest:
                                return "videos";
                            default:
                                return ""
                        }
                    }(this.state.currentCategory) : "", I() && u.o.tracking.track(f.SpadeEventType.CompletedSearch, c.__assign({}, D(), {
                        query: n,
                        filter: i
                    }))) : function(e) {
                        I() && u.o.tracking.track(f.SpadeEventType.AbandonedSearch, c.__assign({}, D(), {
                            query: e
                        }))
                    }(this.state.term), this.didSelectCategory = !1, this.didSelectResult = !1) : !t.isOpen && this.state.isOpen && function(e) {
                        I() && u.o.tracking.track(f.SpadeEventType.BeganSearch, c.__assign({}, D(), {
                            query: e
                        }))
                    }(this.state.term)
                }, t.prototype.render = function() {
                    return d.createElement(Y, {
                        onChange: this.onChange,
                        onClickOut: this.onClickOut,
                        onFocus: this.onFocus,
                        onKeyDown: this.onKeyDown,
                        onResultSelected: this.onResultSelected,
                        gameResults: this.state.currentGameResults,
                        userResults: this.state.currentUserResults,
                        communityResults: this.state.currentCommunityResults,
                        videoResults: this.state.currentVideoResults,
                        liveResults: this.state.currentLiveResults,
                        isOpen: this.state.isOpen,
                        isErrored: this.state.isErrored,
                        isWaiting: this.state.isWaiting,
                        onCategorySelected: this.onCategorySelected,
                        currentCategory: this.state.currentCategory,
                        onVideoOptionsChange: this.changeVideoOptions,
                        loadMore: this.loadMore
                    })
                }, t.prototype.focusNext = function(e) {
                    var t, n = document.querySelectorAll("[data-ts_selectable=true]"),
                        i = document.activeElement,
                        r = Array.prototype.indexOf.call(n, i);
                    if ((t = r < 0 ? e > 0 ? 0 : n.length - 1 : r + e) < 0 && (t = 0), !(t >= n.length)) {
                        var a = n.item(t);
                        a.focus(), a.tabIndex = 0, this.state.currentFocus && (this.state.currentFocus.tabIndex = -1), this.setState({
                            currentFocus: a
                        })
                    }
                }, t.prototype.doSearch = function(e) {
                    return c.__awaiter(this, void 0, void 0, function() {
                        var t, n, i, r, a, o, s = this;
                        return c.__generator(this, function(l) {
                            switch (l.label) {
                                case 0:
                                    this.inputTimer = 0, t = -1, n = C.a(), i = document.activeElement && "INPUT" === document.activeElement.tagName.toUpperCase(), this.setState({
                                        queryID: n,
                                        focusSelectable: !i && !!this.state.currentFocus
                                    }), l.label = 1;
                                case 1:
                                    return l.trys.push([1, 6, , 7]), this.state.currentCategory && null !== this.state.currentCategory ? (t = 0, [4, this.searchClient.queryForType(this.state.currentCategory, e, n)]) : [3, 3];
                                case 2:
                                    return r = l.sent(), [3, 5];
                                case 3:
                                    return this.state.topGameResults && this.state.topUserResults && this.state.topLiveResults && this.state.topVideoResults && this.state.topCommunityResults ? (this.setState({
                                        currentGameResults: this.state.topGameResults,
                                        currentUserResults: this.state.topUserResults,
                                        currentLiveResults: this.state.topLiveResults,
                                        currentVideoResults: this.state.topVideoResults,
                                        currentCommunityResults: this.state.topCommunityResults,
                                        queryID: "",
                                        term: e,
                                        isOpen: !0,
                                        isWaiting: !1,
                                        currentPage: t
                                    }), [2]) : [4, this.searchClient.queryTopResults(e, n)];
                                case 4:
                                    r = l.sent(), l.label = 5;
                                case 5:
                                    return [3, 7];
                                case 6:
                                    return a = l.sent(), u.j.error(a, "Algolia top results search failed"), this.setState(c.__assign({}, this.getEmptyState(), {
                                        isErrored: !0,
                                        isOpen: !0,
                                        term: e
                                    })), [2];
                                case 7:
                                    return r ? (x(e, (r.channels ? r.channels.totalHits : 0) + (r.communities ? r.communities.totalHits : 0) + (r.games ? r.games.totalHits : 0) + (r.users ? r.users.totalHits : 0) + (r.videos ? r.videos.totalHits : 0)), this.state.queryID !== r.id ? [2] : (o = Object(w.b)({
                                        searchResults: r,
                                        append: !1,
                                        currentGameResults: this.state.currentGameResults,
                                        currentUserResults: this.state.currentUserResults,
                                        currentCommunityResults: this.state.currentCommunityResults,
                                        currentVideoResults: this.state.currentVideoResults,
                                        currentLiveResults: this.state.currentLiveResults
                                    }), this.setState(c.__assign({}, o, {
                                        queryID: "",
                                        term: e,
                                        isOpen: !0,
                                        isWaiting: !1,
                                        currentPage: t
                                    }), function() {
                                        s.searchResultsFirstPage && (s.props.latencyTracking.reportCustomEvent(s.searchResultsFirstPage), s.searchResultsFirstPage = null)
                                    }), this.state.currentCategory && null === this.state.currentCategory && this.setState({
                                        topGameResults: o.currentGameResults,
                                        topUserResults: o.currentUserResults,
                                        topLiveResults: o.currentLiveResults,
                                        topVideoResults: o.currentVideoResults,
                                        topCommunityResults: o.currentCommunityResults,
                                        exhaustedHits: o.exhaustedHits
                                    }), [2])) : (this.setState(c.__assign({}, this.getEmptyState(), {
                                        isErrored: !0,
                                        isOpen: !0,
                                        term: e
                                    })), [2])
                            }
                        })
                    })
                }, t.prototype.getEmptyState = function() {
                    return {
                        term: "",
                        currentGameResults: {
                            totalHits: 0,
                            results: []
                        },
                        currentUserResults: {
                            totalHits: 0,
                            results: []
                        },
                        currentLiveResults: {
                            totalHits: 0,
                            results: []
                        },
                        currentCommunityResults: {
                            totalHits: 0,
                            results: []
                        },
                        currentVideoResults: {
                            totalHits: 0,
                            results: []
                        },
                        isOpen: !1,
                        isErrored: !1,
                        queryID: "",
                        isWaiting: !1,
                        currentCategory: null,
                        currentPage: -1,
                        focusSelectable: !1,
                        exhaustedHits: !1,
                        videoOptions: void 0
                    }
                }, t = c.__decorate([Object(b.d)("NavSearch")], t)
            }(d.Component),
            te = Object(S.f)(ee),
            ne = n("Uhaz"),
            ie = n("ekcc"),
            re = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return c.__extends(t, e), t.prototype.render = function() {
                    var e = !1;
                    if (this.props.data) {
                        if (this.props.data.loading || this.props.data.error) return null;
                        e = !!this.props.data.currentUser && this.props.data.currentUser.hasPrime
                    }
                    return !this.props.isLoggedIn || e ? d.createElement("a", {
                        href: v.a,
                        target: "_blank",
                        className: "top-nav__nav-link",
                        "data-a-target": "store-link"
                    }, Object(u.d)("Store", "TopNavStore")) : null
                }, t = c.__decorate([Object(h.a)(ie, {
                    skip: function(e) {
                        return !e.isLoggedIn
                    }
                }), Object(b.d)("TopNavStoreComponent", {
                    autoReportInteractive: !0
                })], t)
            }(d.Component);
        var ae, oe = Object(i.b)(function(e) {
                return {
                    isLoggedIn: Object(l.d)(e)
                }
            })(re),
            se = n("S1vB"),
            le = n("Hs3O"),
            ce = n("iGr2"),
            de = Object(j.a)("/products/turbo?ref=top_nav"),
            ue = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return c.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.props.data.loading || this.props.data.error) return null;
                    var e = this.props.data.requestInfo && !Object(se.a)(this.props.data.requestInfo.countryCode),
                        t = !this.props.data.currentUser || !this.props.data.currentUser.hasTurbo;
                    if (e && t) return d.createElement("a", {
                        href: de,
                        target: "_blank",
                        className: "top-nav__nav-link",
                        "data-a-target": "try-prime-link"
                    }, Object(u.d)("Go Turbo", "TopNavUpsell"));
                    if (!this.props.data.currentUser || !this.props.data.currentUser.hasPrime) {
                        var n = Object(le.d)(le.b, window.location.pathname.substring(1));
                        return d.createElement("a", {
                            href: n,
                            target: "_blank",
                            className: "top-nav__nav-link",
                            "data-a-target": "try-prime-link"
                        }, Object(u.d)("Try Prime", "TopNavUpsell"))
                    }
                    return null
                }, t = c.__decorate([Object(h.a)(ce), Object(b.d)("TopNavUpsellComponent")], t)
            }(d.Component),
            pe = n("RweG"),
            me = n("WIs4"),
            he = n("l4QG"),
            fe = n("aMxy"),
            ge = n("NXs7"),
            ve = n("HZww"),
            be = n("FLwB"),
            ke = n("VAT8"),
            ye = n("ZaD5"),
            _e = n("NikC"),
            Se = n("0nzt"),
            Ee = n("oIkB");
        ! function(e) {
            e.Disable = "disable", e.Enable = "enable"
        }(ae || (ae = {}));
        var Ce = n("Tfve"),
            Ne = (n("/Urv"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onLogoutClick = function(e) {
                        e.preventDefault(), t.props.logout()
                    }, t.onShareCheckboxClick = function() {
                        t.props.data && !t.props.data.error && t.props.data.currentUser && t.props.toggleShareActivity()
                    }, t.onDarkModeCheckboxClick = function() {
                        var e = t.props.theme === ge.a.Dark ? ge.a.Light : ge.a.Dark;
                        t.props.changeTheme(e, _e.a.UserMenu)
                    }, t.onOnlineClick = function(e) {
                        t.props.data && !t.props.data.error && t.props.data.currentUser && (e && e.stopPropagation(), t.props.toggleVisibility(he.a.Online))
                    }, t.onInvisibleClick = function(e) {
                        t.props.data && !t.props.data.error && t.props.data.currentUser && (e && e.stopPropagation(), t.props.toggleVisibility(he.a.Offline))
                    }, t
                }
                return c.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = P("top-nav-user-menu-dropdown", {
                            "top-nav-user-menu-dropdown--toggled": this.props.dropdownOpen
                        }),
                        t = this.props.dropdownOpen ? "dropdown-down" : "dropdown-up",
                        n = this.props.dropdownOpen ? "dropdown-down" : "dropdown-up",
                        i = !1,
                        r = W.K.Alt2,
                        a = W.K.Alt2,
                        o = !1,
                        s = !0,
                        l = !1,
                        c = !1,
                        p = void 0,
                        m = void 0,
                        h = void 0;
                    return this.props.data && !this.props.data.error && this.props.data.currentUser && (i = !0, r = this.props.data.currentUser.availability === he.a.Offline ? W.K.Base : W.K.Alt2, a = this.props.data.currentUser.availability === he.a.Online ? W.K.Base : W.K.Alt2, o = !!this.props.data.currentUser.settings && this.props.data.currentUser.settings.isSharingActivity, s = this.props.data.currentUser.availability === he.a.Offline, l = this.props.data.currentUser.availability === he.a.Online, c = this.props.data.currentUser.availability === he.a.Offline, p = {
                        pathname: "/" + this.props.data.currentUser.login,
                        state: {
                            content: f.PageviewContent.SelfChannel,
                            medium: f.PageviewMedium.TopNav
                        }
                    }, m = Object(j.a)("/" + this.props.data.currentUser.login + "/manager"), h = "/" + this.props.data.currentUser.login + "/dashboard" + (Object(Ce.a)(this.props.data.currentUser.roles.isStaff) ? "/live" : "")), d.createElement(W._35, {
                        overflow: W._11.Hidden,
                        position: W._15.Absolute,
                        className: e,
                        background: W.n.Base,
                        color: W.K.Base,
                        "data-a-target": t,
                        "data-test-selector": n,
                        attachRight: !0,
                        zIndex: W._62.Below
                    }, d.createElement(U.b, {
                        className: "top-nav-user-menu-dropdown__scrollable",
                        suppressScrollX: !0
                    }, d.createElement(W._8, null, d.createElement(W._35, {
                        padding: {
                            y: 1
                        },
                        background: W.n.Alt
                    }, d.createElement(W._6, {
                        disabled: !i,
                        onClick: this.onOnlineClick,
                        "data-a-target": "online-dropdown-button",
                        "data-test-selector": "online-dropdown-button"
                    }, d.createElement(W._35, {
                        color: W.K.Alt2,
                        display: W.R.Flex,
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, d.createElement(W._8, {
                        alignItems: W.c.Center,
                        display: W.R.InlineFlex,
                        margin: {
                            right: 1
                        }
                    }, d.createElement(W._16, {
                        status: W._17.Online
                    })), d.createElement(W.Q, {
                        bold: l,
                        color: a
                    }, Object(u.d)("Online", "UserMenuDropdown")))), d.createElement(W._6, {
                        disabled: !i,
                        onClick: this.onInvisibleClick,
                        "data-a-target": "invisible-dropdown-button",
                        "data-test-selector": "invisible-dropdown-button"
                    }, d.createElement(W._35, {
                        color: W.K.Base,
                        display: W.R.Flex,
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, d.createElement(W._8, {
                        alignItems: W.c.Center,
                        display: W.R.InlineFlex,
                        margin: {
                            right: 1
                        }
                    }, d.createElement(W._16, {
                        status: W._17.Invisible
                    })), d.createElement(W.Q, {
                        bold: c,
                        color: r
                    }, Object(u.d)("Invisible", "UserMenuDropdown")))), d.createElement(W._8, {
                        margin: {
                            x: 2,
                            bottom: 1,
                            top: .5
                        }
                    }, d.createElement(W.J, {
                        id: "share-activity-toggle",
                        label: Object(u.d)("Share my activity", "UserMenuDropdown"),
                        "data-a-target": "share-activity-toggle",
                        "data-test-selector": "share-activity-toggle",
                        "data-a-value": o,
                        checked: o,
                        onChange: this.onShareCheckboxClick,
                        disabled: s
                    }), d.createElement(W.Q, {
                        type: W._49.Span,
                        color: W.K.Alt
                    }, Object(u.d)("Share what you're watching, playing, or streaming with your friends.", "UserMenuDropdown"))), d.createElement(W._35, {
                        borderBottom: !0,
                        margin: {
                            x: 2,
                            y: 1
                        }
                    }), d.createElement(W._8, {
                        margin: {
                            x: 2,
                            bottom: 1
                        }
                    }, d.createElement(W.J, {
                        id: "dark-mode-toggle",
                        label: Object(u.d)("Dark Mode", "UserMenuDropdown"),
                        "data-a-target": "dark-mode-toggle",
                        "data-test-selector": "dark-mode-toggle",
                        "data-a-value": this.props.theme,
                        checked: this.props.theme === ge.a.Dark,
                        onChange: this.onDarkModeCheckboxClick
                    }))), d.createElement(W._8, {
                        margin: {
                            y: 1
                        }
                    }, d.createElement(W._6, {
                        disabled: !i,
                        linkTo: p,
                        "data-a-target": "channel-dropdown-link"
                    }, d.createElement(W._35, {
                        color: W.K.Alt,
                        display: W.R.Flex,
                        alignItems: W.c.Center,
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, d.createElement(W._8, {
                        display: W.R.Flex,
                        alignItems: W.c.Center,
                        margin: {
                            right: 1
                        }
                    }, d.createElement(W._24, {
                        asset: W._25.NavMyChannel,
                        height: 18,
                        width: 18
                    })), d.createElement(W.Q, null, Object(u.d)("Channel", "UserMenuDropdown")))), d.createElement(W._6, {
                        disabled: !i,
                        linkTo: m,
                        "data-a-target": "video-manager-dropdown-link"
                    }, d.createElement(W._35, {
                        color: W.K.Alt,
                        display: W.R.Flex,
                        alignItems: W.c.Center,
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, d.createElement(W._8, {
                        display: W.R.Flex,
                        alignItems: W.c.Center,
                        margin: {
                            right: 1
                        }
                    }, d.createElement(W._24, {
                        asset: W._25.NavManager,
                        height: 18,
                        width: 18
                    })), d.createElement(W.Q, null, Object(u.d)("Video Producer", "UserMenuDropdown")))), d.createElement(W._6, {
                        disabled: !i,
                        linkTo: h,
                        "data-a-target": "dashboard-dropdown-link"
                    }, d.createElement(W._35, {
                        color: W.K.Alt,
                        display: W.R.Flex,
                        alignItems: W.c.Center,
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, d.createElement(W._8, {
                        display: W.R.Flex,
                        alignItems: W.c.Center,
                        margin: {
                            right: 1
                        }
                    }, d.createElement(W._24, {
                        asset: W._25.NavDashboard,
                        height: 18,
                        width: 18
                    })), d.createElement(W.Q, null, Object(u.d)("Dashboard", "UserMenuDropdown")))), d.createElement(W._35, {
                        borderBottom: !0,
                        margin: {
                            x: 2,
                            y: 1
                        }
                    }), d.createElement(W._6, {
                        linkTo: "/friends",
                        "data-a-target": "friends-dropdown-link"
                    }, d.createElement(W._35, {
                        color: W.K.Alt,
                        display: W.R.Flex,
                        alignItems: W.c.Center,
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, d.createElement(W._8, {
                        display: W.R.Flex,
                        alignItems: W.c.Center,
                        margin: {
                            right: 1
                        }
                    }, d.createElement(W._24, {
                        asset: W._25.Friends,
                        height: 18,
                        width: 18
                    })), d.createElement(W.Q, null, Object(u.d)("Friends", "UserMenuDropdown")))), d.createElement(W._6, {
                        linkTo: "/messages/inbox",
                        "data-a-target": "inbox-dropdown-link"
                    }, d.createElement(W._35, {
                        color: W.K.Alt,
                        display: W.R.Flex,
                        alignItems: W.c.Center,
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, d.createElement(W._8, {
                        display: W.R.Flex,
                        alignItems: W.c.Center,
                        margin: {
                            right: 1
                        }
                    }, d.createElement(W._24, {
                        asset: W._25.NavMessages,
                        height: 18,
                        width: 18
                    })), d.createElement(W.Q, null, Object(u.d)("Messages", "UserMenuDropdown")))), d.createElement(W._6, {
                        targetBlank: Object(j.b)(),
                        linkTo: Object(j.a)("/subscriptions"),
                        "data-a-target": "subscriptions-dropdown-link"
                    }, d.createElement(W._35, {
                        color: W.K.Alt,
                        display: W.R.Flex,
                        alignItems: W.c.Center,
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, d.createElement(W._8, {
                        display: W.R.Flex,
                        alignItems: W.c.Center,
                        margin: {
                            right: 1
                        }
                    }, d.createElement(W._24, {
                        asset: W._25.Star,
                        height: 18,
                        width: 18
                    })), d.createElement(W.Q, null, Object(u.d)("Subscriptions", "UserMenuDropdown")))), d.createElement(W._6, {
                        linkTo: "/inventory",
                        "data-a-target": "inventory-dropdown-link"
                    }, d.createElement(W._35, {
                        color: W.K.Alt,
                        display: W.R.Flex,
                        alignItems: W.c.Center,
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, d.createElement(W._8, {
                        display: W.R.Flex,
                        alignItems: W.c.Center,
                        margin: {
                            right: 1
                        }
                    }, d.createElement(W._24, {
                        asset: W._25.Crate,
                        height: 18,
                        width: 18
                    })), d.createElement(W.Q, null, Object(u.d)("Inventory", "UserMenuDropdown")))), d.createElement(W._6, {
                        linkTo: "/payments",
                        "data-a-target": "payments-dropdown-link"
                    }, d.createElement(W._35, {
                        color: W.K.Alt,
                        display: W.R.Flex,
                        alignItems: W.c.Center,
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, d.createElement(W._8, {
                        display: W.R.Flex,
                        alignItems: W.c.Center,
                        margin: {
                            right: 1
                        }
                    }, d.createElement(W._24, {
                        asset: W._25.NavBackpack,
                        height: 18,
                        width: 18
                    })), d.createElement(W.Q, null, Object(u.d)("Payments", "UserMenuDropdown")))), d.createElement(W._35, {
                        borderBottom: !0,
                        margin: {
                            x: 2,
                            y: 1
                        }
                    }), d.createElement(W._6, {
                        targetBlank: Object(j.b)(),
                        linkTo: Object(j.a)("/settings/profile"),
                        "data-a-target": "settings-dropdown-link"
                    }, d.createElement(W._35, {
                        color: W.K.Alt,
                        display: W.R.Flex,
                        alignItems: W.c.Center,
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, d.createElement(W._8, {
                        display: W.R.Flex,
                        alignItems: W.c.Center,
                        margin: {
                            right: 1
                        }
                    }, d.createElement(W._24, {
                        asset: W._25.NavSettings,
                        height: 18,
                        width: 18
                    })), d.createElement(W.Q, null, Object(u.d)("Settings", "UserMenuDropdown")))), d.createElement(W._6, {
                        "data-a-target": "dropdown-logout",
                        onClick: this.onLogoutClick
                    }, d.createElement(W._35, {
                        color: W.K.Alt,
                        display: W.R.Flex,
                        alignItems: W.c.Center,
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, d.createElement(W._8, {
                        display: W.R.Flex,
                        alignItems: W.c.Center,
                        margin: {
                            right: 1
                        }
                    }, d.createElement(W._24, {
                        asset: W._25.NavLogout,
                        height: 18,
                        width: 18
                    })), d.createElement(W.Q, null, Object(u.d)("Log Out", "UserMenuDropdown"))))))))
                }, t = c.__decorate([Object(b.d)("UserMenuDropdown")], t)
            }(d.Component)),
            Te = n("jAYy"),
            we = n("94wQ"),
            Oe = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.toggleShareActivity = function() {
                        if (t.props.data && !t.props.data.error && t.props.data.currentUser) {
                            var e, n, i = !!t.props.data.currentUser.settings && !t.props.data.currentUser.settings.isSharingActivity,
                                r = c.__assign({}, Object(Ee.a)({
                                    isSharingActivity: i
                                }), {
                                    optimisticResponse: {
                                        updateIsSharingActivity: {
                                            __typename: "UpdateIsSharingActivityPayload",
                                            user: {
                                                __typename: "User",
                                                id: t.props.data.currentUser.id,
                                                settings: {
                                                    isSharingActivity: i,
                                                    __typename: "UserSettings"
                                                }
                                            }
                                        }
                                    }
                                });
                            t.props.updateIsSharingActivity(r), e = {
                                login: t.props.data.currentUser.login,
                                isSharingEnabled: i
                            }, n = {
                                login: e.login,
                                action: e.isSharingEnabled ? ae.Enable : ae.Disable
                            }, u.n.track(f.SpadeEventType.PresenceToggle, n)
                        }
                    }, t.toggleVisibility = function(e) {
                        t.props.data && !t.props.data.error && t.props.data.currentUser && Object(be.e)(e)
                    }, t
                }
                return c.__extends(t, e), t.prototype.render = function() {
                    return d.createElement(Ne, {
                        data: this.props.data,
                        dropdownOpen: this.props.dropdownOpen,
                        toggleShareActivity: this.toggleShareActivity,
                        toggleVisibility: this.toggleVisibility,
                        changeTheme: this.props.changeTheme,
                        logout: this.props.logout,
                        theme: this.props.theme
                    })
                }, t = c.__decorate([Object(h.a)(Te, {
                    skip: function(e) {
                        return !e.firstPageLoaded
                    }
                }), Object(h.a)(we, {
                    name: "updateIsSharingActivity"
                }), Object(me.a)(function(e) {
                    return {
                        query: Te,
                        topic: e.data && e.data.currentUser ? Object(ve.n)(e.data.currentUser.id) : "",
                        skip: !(e.data && !e.data.loading && !e.data.error && e.data.currentUser),
                        type: fe.PubsubMessageType.PresenceSettings,
                        mutator: function(e, t) {
                            return t.currentUser && t.currentUser.settings && (t.currentUser.settings.visibility = e.data.availability_override.toUpperCase(), t.currentUser.settings.isSharingActivity = e.data.share_activity), t
                        }
                    }
                })], t)
            }(d.Component);
        var Re = Object(i.b)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded,
                    theme: Object(Se.a)(e)
                }
            }, function(e) {
                return Object(a.b)({
                    changeTheme: _e.b,
                    logout: s.g
                }, e)
            })(Oe),
            De = (n("Q8Dy"), function(e) {
                return d.createElement(W._8, {
                    position: W._15.Relative,
                    display: W.R.Flex,
                    flexGrow: 1,
                    alignItems: W.c.Stretch,
                    fullHeight: !0,
                    className: Object(ke.c)(ge.a.Dark)
                }, d.createElement(W._8, {
                    display: W.R.Flex,
                    flexGrow: 1,
                    alignItems: W.c.Stretch,
                    fullHeight: !0
                }, d.createElement(W._6, {
                    onClick: e.onMenuCardClick,
                    "data-a-target": "user-menu-toggle",
                    "data-test-selector": "user-menu-toggle"
                }, d.createElement(W._8, {
                    display: W.R.Flex,
                    flexGrow: 1,
                    alignItems: W.c.Center,
                    fullHeight: !0,
                    className: "top-nav-user-menu-placeholder",
                    "data-a-target": "user-card"
                }, d.createElement(W._8, {
                    display: W.R.Flex,
                    flexWrap: W.U.NoWrap,
                    alignItems: W.c.Center,
                    flexGrow: 1,
                    padding: {
                        right: 1
                    },
                    fullHeight: !0
                }, d.createElement(W._8, {
                    margin: {
                        x: 1
                    }
                }, d.createElement(W._14, {
                    width: 30,
                    height: 30,
                    overlay: !0
                })), d.createElement(W._8, {
                    flexGrow: 1,
                    display: W.R.Flex,
                    flexDirection: W.T.Column,
                    justifyContent: W._7.Center
                }, d.createElement(W._35, {
                    margin: {
                        y: .5
                    }
                }, d.createElement(W._14, {
                    width: 80,
                    height: 4,
                    overlay: !0
                })), d.createElement(W._8, null, d.createElement(W._8, {
                    ellipsis: !0,
                    display: W.R.Flex,
                    alignItems: W.c.Center
                }, d.createElement(W._8, {
                    display: W.R.InlineFlex,
                    margin: {
                        right: .5
                    }
                }, d.createElement(W._14, {
                    width: 6,
                    height: 6,
                    overlay: !0
                })), d.createElement(W._35, {
                    display: W.R.InlineFlex,
                    margin: {
                        y: .5
                    }
                }, d.createElement(W._14, {
                    width: 40,
                    height: 4,
                    overlay: !0
                }))))), d.createElement(W._35, {
                    display: W.R.Flex,
                    flexShrink: 0,
                    color: W.K.Base,
                    className: "top-nav-user-menu__dropdown-arrow",
                    "data-a-target": "top-nav-dropdown-arrow"
                }, d.createElement(W._24, {
                    asset: W._25.GlyphArrDown
                })))))))
            }),
            Ie = n("2Hj/"),
            xe = (n("nist"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onCardClick = function() {
                        t.props.onMenuCardClick()
                    }, t
                }
                return c.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.data.currentUser,
                        t = e && e.profileImageURL || u.a.defaultAvatarURL,
                        n = e && e.displayName || "",
                        i = he.a.Offline;
                    return e && (e.availability ? i = e.availability : e.settings && e.settings.visibility && (i = e.settings.visibility)), d.createElement(W._8, {
                        position: W._15.Relative,
                        display: W.R.Flex,
                        flexGrow: 1,
                        alignItems: W.c.Stretch,
                        fullHeight: !0
                    }, d.createElement(W._8, {
                        display: W.R.Flex,
                        flexGrow: 1,
                        alignItems: W.c.Stretch,
                        fullHeight: !0
                    }, d.createElement(W._6, {
                        onClick: this.onCardClick,
                        "data-a-target": "user-menu-toggle",
                        "data-test-selector": "user-menu-toggle"
                    }, d.createElement(W._8, {
                        display: W.R.Flex,
                        flexWrap: W.U.NoWrap,
                        alignItems: W.c.Center,
                        flexGrow: 1,
                        padding: {
                            right: 1
                        },
                        fullHeight: !0,
                        className: "top-nav-user-menu"
                    }, d.createElement(W._8, {
                        margin: {
                            x: 1
                        },
                        flexShrink: 0
                    }, d.createElement(W._8, {
                        className: "top-nav-user-menu__avatar-container"
                    }, d.createElement(b.a, {
                        size: 30,
                        src: t,
                        alt: Object(u.d)("User avatar", "UserMenuToggle"),
                        "data-a-target": "top-nav-avatar"
                    }))), d.createElement(W._8, {
                        overflow: W._11.Hidden,
                        flexGrow: 1,
                        flexShrink: 1,
                        flexDirection: W.T.Column
                    }, d.createElement(W._35, {
                        color: W.K.Base,
                        fontSize: W.V.Size5,
                        className: "top-nav-user-menu__username",
                        "data-a-target": "user-display-name"
                    }, d.createElement(W.Q, {
                        lineHeight: W._9.Heading
                    }, n)), d.createElement(W._35, {
                        className: "top-nav-user-menu__status-wrapper",
                        ellipsis: !0,
                        fullWidth: !0,
                        fontSize: W.V.Size7,
                        alignItems: W.c.Center,
                        display: W.R.Flex,
                        flexWrap: W.U.NoWrap
                    }, d.createElement(W._8, {
                        display: W.R.Flex,
                        flexShrink: 0,
                        margin: {
                            right: .5
                        }
                    }, d.createElement(Ie.a, {
                        availability: i
                    })), d.createElement(W._35, {
                        ellipsis: !0,
                        color: W.K.Alt
                    }, d.createElement(W.Q, {
                        type: W._49.Span,
                        noWrap: !0,
                        "data-a-target": "online-status",
                        lineHeight: W._9.Heading
                    }, this.props.data.currentUser && d.createElement(Ie.b, {
                        activity: this.props.data.currentUser.activity,
                        availability: i === he.a.Offline ? he.a.Invisible : i
                    }))))), d.createElement(W._35, {
                        display: W.R.Flex,
                        flexShrink: 0,
                        color: W.K.Base,
                        className: "top-nav-user-menu__dropdown-arrow",
                        "data-a-target": "top-nav-dropdown-arrow"
                    }, d.createElement(W._24, {
                        asset: W._25.GlyphArrDown
                    }))))))
                }, t
            }(d.Component)),
            Fe = n("9q8M"),
            Pe = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.isSettingNewSession = !1, n.onMenuCardClick = function() {
                        n.props.data.loading && !n.props.data.currentUser || n.setState({
                            dropdownOpen: !n.state.dropdownOpen
                        })
                    }, n.onClickOut = function() {
                        n.setState({
                            dropdownOpen: !1
                        })
                    }, n.dataIsReady = function(e) {
                        return e.data && !e.data.loading && !e.data.error && e.data.currentUser
                    }, n.setUserToOffline = function() {
                        Object(be.c)(he.a.Offline), Object(be.a)()
                    }, n.setNewSession = function() {
                        return c.__awaiter(n, void 0, void 0, function() {
                            var e;
                            return c.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        if (this.isSettingNewSession) return [2];
                                        this.isSettingNewSession = !0, t.label = 1;
                                    case 1:
                                        return t.trys.push([1, 3, 4, 5]), [4, Object(be.g)()];
                                    case 2:
                                        return t.sent(), this.props.initialUserAvailabilitySet(), [3, 5];
                                    case 3:
                                        return e = t.sent(), u.j.warn("Failed to set new user availability session.", e), [3, 5];
                                    case 4:
                                        return this.isSettingNewSession = !1, [7];
                                    case 5:
                                        return [2]
                                }
                            })
                        })
                    }, n.maybeRefetchData = function(e) {
                        var t = e.pubsub.messages.presence;
                        t && e.data.currentUser && e.data.currentUser.id && t.data.user_id === +e.data.currentUser.id && n.props.pubsub.messages.presence !== t && e.data.refetch()
                    }, n.unsubscribeFromHistory = n.props.history.listen(function() {
                        n.setState({
                            dropdownOpen: !1
                        })
                    }), n.state = {
                        dropdownOpen: !1
                    }, n
                }
                return c.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.maybeRefetchData(this.props), this.props.firstPageLoaded && this.dataIsReady(this.props) && !this.props.initialUserAvailabilityIsSet && this.setNewSession(), this.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.maybeRefetchData(e), e.firstPageLoaded && this.dataIsReady(e) && !e.initialUserAvailabilityIsSet && this.setNewSession()
                }, t.prototype.componentDidUpdate = function() {
                    this.reportInteractive()
                }, t.prototype.componentWillUnmount = function() {
                    this.unsubscribeFromHistory(), this.setUserToOffline()
                }, t.prototype.render = function() {
                    var e = P(Object(ke.c)(ge.a.Dark), {
                            "top-nav-user-menu--dropdown-open": this.state.dropdownOpen
                        }),
                        t = null;
                    return t = this.props.data.loading && !this.props.data.currentUser || this.props.data.error ? d.createElement(De, {
                        onMenuCardClick: this.onMenuCardClick
                    }) : d.createElement(xe, {
                        data: this.props.data,
                        onMenuCardClick: this.onMenuCardClick,
                        theme: this.props.theme
                    }), d.createElement(W._8, {
                        position: W._15.Relative,
                        display: W.R.Flex,
                        flexGrow: 1,
                        alignItems: W.c.Stretch,
                        fullHeight: !0
                    }, d.createElement(F.a, {
                        onClickOut: this.onClickOut,
                        className: e
                    }, t, d.createElement(Re, {
                        dropdownOpen: this.state.dropdownOpen
                    })))
                }, t.prototype.reportInteractive = function() {
                    this.props.data.loading || this.props.latencyTracking.reportInteractive()
                }, t = c.__decorate([Object(h.a)(Fe), Object(me.a)(function(e) {
                    return {
                        query: Fe,
                        topic: e.data.currentUser ? Object(ve.n)(e.data.currentUser.id) : "",
                        skip: !(e.data && !e.data.loading && !e.data.error && e.data.currentUser),
                        type: fe.PubsubMessageType.PresenceSettings,
                        mutator: function(e, t) {
                            return t.currentUser && t.currentUser.settings && (t.currentUser.settings.visibility = e.data.availability_override.toUpperCase(), t.currentUser.settings.isSharingActivity = e.data.share_activity), t
                        }
                    }
                }), Object(pe.a)([{
                    topic: function(e) {
                        return e.data.currentUser ? Object(ve.n)(e.data.currentUser.id) : ""
                    },
                    mapMessageTypesToProps: (Ue = {}, Ue[fe.PubsubMessageType.Presence] = "presence", Ue),
                    skip: function(e) {
                        return !(e.data && !e.data.loading && !e.data.error && e.data.currentUser)
                    }
                }]), Object(b.d)("User")], t)
            }(d.Component);
        var Ue, je = Object(i.b)(function(e) {
                return {
                    theme: Object(Se.a)(e),
                    firstPageLoaded: e.session.firstPageLoaded,
                    initialUserAvailabilityIsSet: e.session.initialUserAvailabilityIsSet
                }
            }, function(e) {
                return Object(a.b)({
                    changeTheme: _e.b,
                    initialUserAvailabilitySet: ye.g
                }, e)
            })(Object(r.f)(Pe)),
            Ae = n("8PKe"),
            Le = n("p+06"),
            Me = (n("HTB+"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.state = {
                        isError: !1,
                        isGetBitsButtonExperimentEnabled: !1
                    }, n.logger = u.o.logger.withCategory("top-nav"), n.renderBitsButton = function() {
                        return d.createElement(W._8, {
                            flexGrow: 0,
                            alignSelf: W.d.Center,
                            flexWrap: W.U.NoWrap,
                            flexShrink: 0,
                            margin: {
                                x: 1
                            }
                        }, d.createElement(g.a, {
                            isInTopNav: !0,
                            channelLogin: null
                        }))
                    }, n.renderOnsiteNotifications = function() {
                        return n.props.isLoggedIn ? d.createElement(W._8, {
                            flexGrow: 0,
                            alignSelf: W.d.Center,
                            flexWrap: W.U.NoWrap,
                            padding: {
                                left: .5,
                                right: 1
                            },
                            flexShrink: 0
                        }, d.createElement(_, null)) : null
                    }, n.renderTwitchPrimeCrown = function(e) {
                        return d.createElement(W._8, {
                            className: "top-nav__prime",
                            flexGrow: 0,
                            flexShrink: 0,
                            padding: {
                                x: .5
                            },
                            alignSelf: W.d.Center,
                            flexWrap: W.U.NoWrap
                        }, !e && d.createElement(Ae.c, null))
                    }, n.renderStoreLink = function() {
                        var e = !1;
                        if (n.props.data) {
                            if (n.props.data.loading || n.props.data.error) return null;
                            e = !!n.props.data.currentUser && n.props.data.currentUser.hasPrime
                        }
                        return !n.props.isLoggedIn || e ? null : d.createElement(W._6, {
                            targetBlank: !0,
                            linkTo: v.a,
                            "data-a-target": "store-link-dropdown",
                            "data-test-selector": "store-link-dropdown"
                        }, d.createElement(W._8, {
                            padding: {
                                y: .5,
                                x: 1
                            }
                        }, Object(u.d)("Store", "TopNav")))
                    }, n.saveEllipsisRef = function(e) {
                        return n.ellipsisMenu = e
                    }, n.onNavigationClicked = function() {
                        n.ellipsisMenu.toggleBalloon(!1)
                    }, n.renderBrowseLink = function(e) {
                        var t = e.match,
                            n = t && "following" !== t.params.subpage,
                            i = Object(u.d)("Browse", "TopNav");
                        return d.createElement(r.a, {
                            className: "top-nav__nav-link" + (n ? " active" : ""),
                            "data-a-target": "browse-link",
                            title: i,
                            to: {
                                pathname: "/directory",
                                state: {
                                    medium: f.PageviewMedium.TopNav,
                                    content: f.PageviewContent.Games
                                }
                            }
                        }, i)
                    };
                    var i = u.o.experiments.getAssignment(k.i),
                        a = u.o.experiments.getAssignment("TWILIGHT_GET_BITS_TOP_NAV");
                    return n.state = {
                        inOnboarding: Object(k.n)(i),
                        isError: !1,
                        isGetBitsButtonExperimentEnabled: "treatment" === a
                    }, n
                }
                return c.__extends(t, e), t.prototype.componentDidCatch = function(e, t) {
                    var n = this;
                    this.setState({
                        isError: !0
                    }, function() {
                        n.logger.error(e, "A unhandled exception occurred in the component hierarchy", {
                            info: t
                        })
                    })
                }, t.prototype.render = function() {
                    var e = null;
                    if (this.props.isLoggedIn) {
                        var t = Object(u.d)("Following", "TopNav"),
                            n = this.props.data && this.props.data.currentUser && Object(k.o)(new Date(this.props.data.currentUser.createdAt)),
                            i = this.state.inOnboarding && n ? "/directory/following/foryou" : "/directory/following";
                        e = d.createElement(r.b, {
                            activeClassName: "active",
                            to: {
                                pathname: i,
                                state: {
                                    medium: f.PageviewMedium.TopNav,
                                    content: f.PageviewContent.Following
                                }
                            },
                            className: "top-nav__nav-link",
                            "data-a-target": "following-link",
                            title: t
                        }, t)
                    }
                    return d.createElement(W._2, {
                        position: W._15.Relative
                    }, d.createElement("nav", {
                        className: "top-nav",
                        "data-a-target": "top-nav-container",
                        style: {
                            height: "5rem"
                        }
                    }, d.createElement(W._8, {
                        className: "top-nav__menu",
                        display: W.R.Flex,
                        alignItems: W.c.Stretch,
                        flexWrap: W.U.NoWrap,
                        fullHeight: !0
                    }, d.createElement(W._2, {
                        display: W.R.InlineFlex,
                        alignItems: W.c.Center,
                        flexShrink: 0
                    }, d.createElement(r.a, {
                        to: {
                            pathname: "/",
                            state: {
                                medium: f.PageviewMedium.TopNav,
                                content: f.PageviewContent.Logo
                            }
                        },
                        className: "top-nav__home-link",
                        "data-a-target": "home-link"
                    }, d.createElement(W._24, {
                        asset: W._25.LogoTwitch,
                        width: 94,
                        height: 32
                    }))), d.createElement(W._8, {
                        className: "top-nav__nav-items-container",
                        display: W.R.Flex,
                        alignItems: W.c.Stretch,
                        flexGrow: 1,
                        flexWrap: W.U.NoWrap,
                        flexShrink: 0
                    }, e, d.createElement(r.d, {
                        path: "/directory/:subpage?",
                        children: this.renderBrowseLink
                    }), d.createElement("a", {
                        href: "https://app.twitch.tv/download",
                        "data-a-target": "get-desktop-link",
                        className: "top-nav__nav-link"
                    }, Object(u.d)("Get Desktop", "TopNav")), d.createElement(ue, null), d.createElement(oe, null), d.createElement(W._8, {
                        className: "top-nav__ellipsis-button",
                        display: W.R.Flex,
                        alignItems: W.c.Center
                    }, d.createElement(m.a, {
                        ref: this.saveEllipsisRef
                    }, d.createElement(W.w, {
                        icon: W._25.NavMore,
                        overlay: !0,
                        ariaLabel: Object(u.d)("More nav items", "TopNav"),
                        "data-a-target": "ellipsis-button"
                    }), d.createElement(W.q, {
                        direction: W.r.Bottom,
                        tailOffset: 7,
                        size: W.s.Small,
                        "data-a-target": "overflow-menu"
                    }, d.createElement(W._8, {
                        padding: 1
                    }, d.createElement(W._6, {
                        targetBlank: !0,
                        linkTo: "https://www.twitch.tv/p/about",
                        "data-a-target": "about-link"
                    }, d.createElement(W._8, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("About", "TopNav"))), d.createElement(W._6, {
                        targetBlank: !0,
                        linkTo: "http://twitchadvertising.tv/",
                        "data-a-target": "advertisers-link"
                    }, d.createElement(W._8, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Advertisers", "TopNav"))), d.createElement(W._6, {
                        targetBlank: !0,
                        linkTo: "https://blog.twitch.tv/",
                        "data-a-target": "blog-link"
                    }, d.createElement(W._8, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Blog", "TopNav"))), d.createElement(W._6, {
                        targetBlank: !0,
                        linkTo: "https://www.twitch.tv/p/legal/community-guidelines",
                        "data-a-target": "community-guidelines-link"
                    }, d.createElement(W._8, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Community Guidelines", "TopNav"))), d.createElement(W._6, {
                        targetBlank: !0,
                        linkTo: "https://www.twitch.tv/p/cookie-policy",
                        "data-a-target": "cookie-policy-link"
                    }, d.createElement(W._8, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Cookie Policy", "TopNav"))), d.createElement(W._6, {
                        onClick: this.onNavigationClicked,
                        linkTo: "/directory/game/Creative",
                        "data-a-target": "creative-link"
                    }, d.createElement(W._8, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Creative", "TopNav"))), d.createElement(W._6, {
                        targetBlank: !0,
                        linkTo: "https://dev.twitch.tv/",
                        "data-a-target": "developers-link"
                    }, d.createElement(W._8, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Developers", "TopNav"))), d.createElement(W._6, {
                        targetBlank: !0,
                        linkTo: "https://help.twitch.tv/",
                        "data-a-target": "help-link"
                    }, d.createElement(W._8, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Help", "TopNav"))), d.createElement(W._6, {
                        targetBlank: !0,
                        linkTo: "https://www.twitch.tv/jobs",
                        "data-a-target": "jobs-link"
                    }, d.createElement(W._8, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Jobs", "TopNav"))), d.createElement(m.a, {
                        display: W.R.Block
                    }, d.createElement(W._6, {
                        "data-target": "language-selector-click",
                        "data-a-target": "language-selector"
                    }, d.createElement(W._8, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Language", "TopNav"))), d.createElement(W.q, {
                        size: W.s.Small,
                        direction: W.r.Right,
                        tailOffset: 270,
                        offsetY: "-263px",
                        offsetX: "20px",
                        "data-target": "language-selector",
                        "data-a-target": "language-selector-menu"
                    }, d.createElement(p.a, null))), d.createElement(W._6, {
                        targetBlank: !0,
                        linkTo: "https://music.twitch.tv/",
                        "data-a-target": "music-link"
                    }, d.createElement(W._8, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Music", "TopNav"))), this.renderStoreLink(), d.createElement(W._6, {
                        targetBlank: !0,
                        linkTo: "https://www.twitch.tv/p/partners",
                        "data-a-target": "partners-link"
                    }, d.createElement(W._8, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Partners", "TopNav"))), d.createElement(W._6, {
                        targetBlank: !0,
                        linkTo: "https://www.twitch.tv/p/press",
                        "data-a-target": "press-link"
                    }, d.createElement(W._8, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Press", "TopNav"))), d.createElement(W._6, {
                        targetBlank: !0,
                        linkTo: "https://twitch.tv/p/security",
                        "data-a-target": "security-link"
                    }, d.createElement(W._8, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Security", "TopNav"))), d.createElement(W._6, {
                        targetBlank: !0,
                        linkTo: "https://www.twitch.tv/p/terms-of-service",
                        "data-a-target": "terms-link"
                    }, d.createElement(W._8, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Terms", "TopNav"))))))), d.createElement(W._8, {
                        className: "top-nav__search",
                        flexGrow: 1,
                        alignSelf: W.d.Center
                    }, !this.state.isError && d.createElement(te, null))), !this.state.isError && this.renderTwitchPrimeCrown(), !this.state.isError && this.renderOnsiteNotifications(), this.props.isLoggedIn && this.state.isGetBitsButtonExperimentEnabled && this.renderBitsButton(), !this.state.isError && d.createElement(W._8, {
                        className: "top-nav__nav-items-container",
                        display: W.R.Flex,
                        alignItems: W.c.Center,
                        flexWrap: W.U.NoWrap,
                        flexGrow: 0,
                        flexShrink: 0
                    }, this.props.isLoggedIn ? d.createElement(je, null) : d.createElement(ne.a, {
                        login: this.props.login,
                        signup: this.props.signup
                    })))))
                }, t = c.__decorate([Object(h.a)(Le, {
                    skip: function(e) {
                        return !e.isLoggedIn
                    }
                }), Object(b.d)("TopNav", {
                    autoReportInteractive: !0
                })], t)
            }(d.Component));
        var Be = Object(r.f)(Object(i.b)(function(e) {
            return {
                isLoggedIn: Object(l.d)(e)
            }
        }, function(e) {
            return Object(a.b)({
                login: function() {
                    return Object(s.f)(o.a.TopNavSignupButton)
                },
                logout: s.g,
                signup: function() {
                    return Object(s.h)(o.a.TopNavSignupButton)
                }
            }, e)
        })(Me));
        n.d(t, !1, function() {
            return "5rem"
        }), n.d(t, !1, function() {
            return "9.5rem"
        }), n.d(t, "a", function() {
            return Be
        })
    },
    TVUY: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "currentUser"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "login"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "displayName"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "availability"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "activity"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "type"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "InlineFragment",
                                typeCondition: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Watching"
                                    }
                                },
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "user"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "InlineFragment",
                                typeCondition: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Streaming"
                                    }
                                },
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "stream"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "game"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "InlineFragment",
                                typeCondition: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Playing"
                                    }
                                },
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 204
            }
        };
        n.loc.source = {
            body: "fragment currentUser on User {\nid\nlogin\ndisplayName\navailability\nactivity {\ntype\n... on Watching {\nuser {\ndisplayName\n}\n}\n... on Streaming {\nstream {\ngame {\nname\n}\n}\n}\n... on Playing {\ngame {\nname\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "TWH+": function(e, t) {},
    TeXj: function(e, t, n) {
        "use strict";
        t.c = function(e, t, n) {
            void 0 === n && (n = !1);
            return c(a, e, t, n)
        }, t.a = l, t.b = function(e, t, n) {
            void 0 === n && (n = !1);
            var a = i.b.get(s, r.a.Off),
                o = t && t.roles && t.roles.isStaff || !1;
            return l(e, t, n) && (a === r.a.On || a === r.a.StaffOnly && o)
        };
        var i = n("6sO2"),
            r = n("QRuM"),
            a = "esport_channel_page_whitelist",
            o = "esport_insider_pass_whitelist",
            s = "esport_insider_pass_gifting_launch";

        function l(e, t, n) {
            return void 0 === n && (n = !1), c(o, e, t, n)
        }

        function c(e, t, n, r) {
            void 0 === r && (r = !1);
            var a = i.b.get(e, []),
                o = n && n.roles && n.roles.isStaff || r;
            return a.includes(t) || a.includes(t + "-staff") && o
        }
    },
    Tfve: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        }), n.d(t, "c", function() {
            return a
        }), n.d(t, "b", function() {
            return o
        });
        var i = n("6sO2"),
            r = function(e) {
                void 0 === e && (e = !1);
                var t = i.o.experiments.getAssignment("TWILIGHT_DASHBOARD_LIVE"),
                    n = "twilight" === t;
                return ("ember" === t || n) && (e || n)
            },
            a = function(e) {
                void 0 === e && (e = !1);
                var t = i.o.experiments.getAssignment("TWILIGHT_DASHBOARD_LIVE");
                return e && ("ember" === t || "twilight" === t)
            },
            o = function(e, t, n) {
                return void 0 === e && (e = !1), e || t && n && t === n
            }
    },
    Tjmd: function(e, t, n) {
        "use strict";
        t.b = function(e, t) {
            if (!e && !t) return !1;
            if (!t || !e) return !0;
            return t.channelLogin !== e.channelLogin || t.vodID !== e.vodID || t.collectionID !== e.collectionID
        }, t.a = function(e, t) {
            if (!e && !t) return !1;
            if (!t || !e) return !0;
            return e.vodID && !t.vodID || e.collectionID && !t.collectionID
        }
    },
    Tr7p: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        }), t.b = function(e) {
            s.n.track(l.SpadeEventType.CrownInteraction, {
                has_prime: e.hasPrime,
                client_time: Date.now(),
                action: i.Hover,
                user_agent: navigator.userAgent
            })
        }, t.c = function(e, t) {
            s.n.track(l.SpadeEventType.CrownInteraction, {
                has_prime: t.hasPrime,
                client_time: Date.now(),
                action: e ? i.Open : i.Close,
                user_agent: navigator.userAgent
            })
        }, t.k = function(e) {
            s.n.track(l.SpadeEventType.CrownInteraction, {
                has_prime: e.hasPrime,
                client_time: Date.now(),
                number_of_offers: e.numberOfOffers,
                action: i.SeeOffers,
                user_agent: navigator.userAgent
            })
        }, t.l = function(e) {
            u(e, r.Click, a.StartYourFreeTrial)
        }, t.m = function(e) {
            u(e, r.Hover, a.StartYourFreeTrial)
        }, t.g = function(e, t) {
            u(t, r.Click, e ? a.MoreInfo : a.CloseInfo)
        }, t.d = function(e, t) {
            d(e, r.Click, t)
        }, t.h = function(e) {
            u(e, r.Hover, a.MoreInfo)
        }, t.f = function(e) {
            u(e, r.Hover, a.CloseInfo)
        }, t.e = function(e, t) {
            d(e, r.Hover, t)
        }, t.i = function(e) {
            s.n.track(l.SpadeEventType.PrimeLootPagePageview, {
                client_time: Date.now(),
                reftag: e.reftag,
                user_agent: navigator.userAgent
            })
        }, t.j = function(e) {
            s.n.track(l.SpadeEventType.PrimeLootPageTryPrimeClick, {
                client_time: Date.now(),
                button_position: e.buttonPosition,
                user_agent: navigator.userAgent
            })
        };
        var i, r, a, o, s = n("6sO2"),
            l = n("vH/s"),
            c = n("Kckk");

        function d(e, t, n) {
            var i;
            switch (n) {
                case c.d.CLAIM_CODE:
                    i = a.GetCode;
                    break;
                case c.d.EXTERNAL_OFFER:
                    i = a.LearnMore;
                    break;
                case c.d.DIRECT_ENTITLEMENT:
                    i = a.ClaimOffer
            }
            i && u(e, t, i)
        }

        function u(e, t, n) {
            s.n.track(l.SpadeEventType.PrimeOfferInteraction, {
                client_time: Date.now(),
                offer_id: e.offerID,
                external_url: e.externalURL,
                index: e.index,
                element: n,
                action: t,
                user_agent: navigator.userAgent,
                has_prime: e.hasPrime
            })
        }! function(e) {
            e.Open = "click_open", e.Close = "click_close", e.Hover = "hover", e.SeeOffers = "see_offers"
        }(i || (i = {})),
        function(e) {
            e.Hover = "hover", e.Click = "click"
        }(r || (r = {})),
        function(e) {
            e.StartYourFreeTrial = "start_your_free_trial", e.MoreInfo = "more_info", e.CloseInfo = "close_info", e.ClaimOffer = "claim_offer", e.LearnMore = "learn_more", e.GetCode = "get_code"
        }(a || (a = {})),
        function(e) {
            e.TopNav = "top-nav", e.CenterBanner = "center-banner", e.CenterFooter = "center-footer"
        }(o || (o = {}))
    },
    Tzcg: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return c
        }), n.d(t, "c", function() {
            return d
        }), n.d(t, "a", function() {
            return p
        }), n.d(t, "e", function() {
            return h
        }), n.d(t, "d", function() {
            return f
        });
        var i = n("TToO"),
            r = n("Bir6"),
            a = n("nEoF"),
            o = {
                "^B-?\\)$": "B)",
                "^:-?[z|Z|\\|]$": ":|",
                "^:-?\\)$": ":)",
                "^:-?\\($": ":(",
                "^:-?(p|P)$": ":P",
                "^;-?(p|P)$": ";P",
                "^:-?[\\\\/]$": ":/",
                "^;-?\\)$": ";)",
                "^R-?\\)$": "R)",
                "^:>$": ":>",
                "^[oO](_|\\.)[oO]$": "O_o",
                "^:-?D$": ":D",
                "^:-?(o|O)$": ":O",
                "^>\\($": ">(",
                "^:-?(?:7|L)$": ":7",
                "^:-?(S|s)$": ":S",
                "^#-?[\\\\/]$": "#/",
                "^<\\]$": "<]",
                "^<3$": "<3",
                "^&lt;3$": "<3",
                "^&lt;\\]$": "<]",
                "^&gt;\\($": ">("
            },
            s = ["1.0", "2.0", "3.0"],
            l = new Set([457, 33, 42, 0]),
            c = function(e) {
                return e.map(function(e) {
                    var t = m(e.token),
                        n = o[t] || t,
                        r = s.reduce(function(t, n) {
                            var i = t.concat("https://static-cdn.jtvnw.net/emoticons/v1/" + e.id + "/" + n + " " + n + "x");
                            return "3.0" !== n && (i = i.concat(", ")), i
                        }, "");
                    return i.__assign({
                        displayName: n,
                        srcSet: r
                    }, e)
                })
            },
            d = function(e) {
                var t = m(e);
                return o[t] || t
            },
            u = function(e) {
                return e.slice().sort(function(e, t) {
                    return parseInt(e.id, 10) - parseInt(t.id, 10)
                })
            },
            p = function(e) {
                for (var t = [], n = [], i = 0, r = e; i < r.length; i++) {
                    var a = r[i];
                    l.has(parseInt(a.id, 10)) ? t.push({
                        id: a.id,
                        emotes: c(u(a.emotes))
                    }) : n.push({
                        id: a.id,
                        emotes: c(u(a.emotes))
                    })
                }
                return n.concat(t)
            },
            m = function(e) {
                return function(e) {
                    return /[\|\\\^\$\*\+\?\:\#]/.test(e)
                }(e) ? "^" + e.replace(/\\(?=[&;:])/g, "") + "$" : e
            },
            h = function(e, t) {
                var n = a.c,
                    i = [],
                    o = [],
                    s = [],
                    l = new RegExp("^" + Object(r.a)(t), "i");
                return e.forEach(function(e) {
                    n[e.token] ? s.push(e) : e.token.match(l) ? i.push(e) : o.push(e)
                }), i.sort(function(e, t) {
                    return e.token < t.token ? -1 : e.token > t.token ? 1 : 0
                }), o.sort(function(e, t) {
                    return e.token < t.token ? -1 : e.token > t.token ? 1 : 0
                }), s.sort(function(e, t) {
                    return n[t.token].count - n[e.token].count
                }), s.concat(i).concat(o)
            },
            f = function(e) {
                var t = {};
                return e.filter(function(e) {
                    return !t.hasOwnProperty(e.token) && (t[e.token] = !0)
                })
            }
    },
    U3i2: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("OAwv"),
            a = n("GiK3"),
            o = n("6sO2"),
            s = n("+Znq"),
            l = n("7vx8"),
            c = n("WIs4"),
            d = n("Ejve"),
            u = n("aMxy"),
            p = n("oIkB"),
            m = n("HZww"),
            h = n("ZVME"),
            f = n("CSlQ"),
            g = n("zCIC"),
            v = n("3zLD"),
            b = n("gIPD"),
            k = n.n(b),
            y = n("aBcb"),
            _ = n("KSGD"),
            S = n("lfvs"),
            E = n("vH/s"),
            C = new Set(["affiliateinvite", "chatroommention", "feedcomment", "partneragreementupdate", "partnerinvite"]);

        function N(e, t) {
            var n, i = {},
                a = function(e) {
                    var t = e.actions.filter(function(e) {
                        return "click" === e.type
                    });
                    return t.length > 0 ? t[0].url : ""
                }(e);
            if (!a) return i;
            try {
                n = new URL(a)
            } catch (t) {
                return o.j.error(t.toString(), a + " was malformed from notification id:[" + e.id + "]"), i
            }
            return ! function(e, t) {
                if (C.has(e)) return !1;
                return "https://www.twitch.tv" === t.origin
            }(e.type, n) ? (i.linkTo = function(e, t, n) {
                var i = e.split("?");
                if (1 === i.length) return e + "?tt_content=" + t + "&tt_medium=" + n;
                var a = r.parse(i[1]);
                return a.tt_content = a.tt_content ? a.tt_content : t, a.tt_medium = a.tt_medium ? a.tt_medium : n, [i[0], r.stringify(a, {
                    encode: !1
                })].join("?")
            }(n.toString(), e.type, t), i.targetBlank = !0) : i.linkTo = {
                pathname: n.pathname,
                search: n.search,
                state: {
                    content: e.type,
                    medium: t
                }
            }, i
        }
        var T = {};
        var w = {
                Center: "center",
                Toast: "toast",
                Browser: "browser"
            },
            O = {
                Open: "open",
                Close: "close",
                MarkAllRead: "mark_all_read"
            },
            R = {
                PrimaryCta: "primary_cta",
                Dismiss: "dismiss"
            },
            D = function(e) {
                var t = {
                    notification_id: e.notification.id,
                    notification_type: e.notification.type,
                    ui_context: e.uiContext
                };
                o.n.track(E.SpadeEventType.NotificationImpression, t)
            },
            I = function(e) {
                var t = {
                    unseen_view_count: e.unseenCount,
                    action: e.action
                };
                o.n.track(E.SpadeEventType.NotificationCenterInteraction, t)
            },
            x = function(e) {
                var t = {
                    notification_id: e.notification.id,
                    notification_type: e.notification.type,
                    ui_context: e.uiContext,
                    action: e.action
                };
                o.n.track(E.SpadeEventType.NotificationInteraction, t)
            },
            F = n("Odds"),
            P = (n("UW/+"), "persistent-notification__delete"),
            U = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.impressionEventFired = !1, t.isVisible = function(e) {
                        if (null !== t.element) {
                            var n = t.element.getBoundingClientRect();
                            return n.top < e.bottom && n.bottom > e.top
                        }
                        return !1
                    }, t.setRef = function(e) {
                        return t.element = e
                    }, t.deleteNotification = function() {
                        x({
                            uiContext: w.Center,
                            notification: t.props.data,
                            action: R.Dismiss
                        }), t.props.onDeleteNotification(t.props.data.id)
                    }, t.clickNotification = function() {
                        x({
                            uiContext: w.Center,
                            notification: t.props.data,
                            action: R.PrimaryCta
                        }), t.props.onViewNotification(t.props.data.id)
                    }, t.renderDeleteNotification = function() {
                        return a.createElement(F._8, {
                            className: "persistent-notification__delete",
                            padding: {
                                top: 1,
                                left: 1,
                                right: .5
                            },
                            position: F._15.Absolute
                        }, a.createElement(F._8, {
                            display: F.R.Flex,
                            flexWrap: F.U.NoWrap,
                            alignItems: F.c.Start
                        }, a.createElement(F.w, {
                            ariaLabel: "delete-notification",
                            "data-test-selector": P,
                            icon: F._25.Close,
                            size: F.x.Small,
                            onClick: t.deleteNotification
                        })))
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive();
                    var e = this.context.registerReceiver;
                    e ? this.unregister = e(this) : o.j.warn("<PersistentNotification /> initialized missing a <ScrollableArea /> provider")
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister && this.unregister()
                }, t.prototype.render = function() {
                    return a.createElement(F._8, {
                        className: "persistent-notification",
                        position: F._15.Relative,
                        refDelegate: this.setRef,
                        "data-test-selector": "persistent-notification"
                    }, a.createElement(F._35, {
                        display: F.R.Flex,
                        className: this.props.data.isRead ? "persistent-notification__read" : "persistent-notification__unread",
                        borderBottom: !0,
                        flexWrap: F.U.NoWrap
                    }, a.createElement(F._6, i.__assign({
                        "data-test-selector": "persistent-notification__click",
                        onClick: this.clickNotification
                    }, N(this.props.data, E.PageviewMedium.NotificationCenter), {
                        alpha: !0
                    }), a.createElement(F._8, {
                        className: "persistent-notification__area",
                        display: F.R.Flex,
                        flexWrap: F.U.NoWrap,
                        padding: {
                            top: 1,
                            bottom: 1,
                            left: 1,
                            right: 3
                        }
                    }, a.createElement(F.E, {
                        aspect: F.l.Aspect1x1,
                        src: this.props.data.thumbnailURL,
                        alt: Object(o.d)("Notification center item thumbnail", "OnsiteNotifications"),
                        size: F.F.Size4
                    }), a.createElement(F._8, {
                        display: F.R.Flex,
                        flexDirection: F.T.Column,
                        flexWrap: F.U.NoWrap,
                        margin: {
                            x: 1
                        }
                    }, a.createElement(F._8, {
                        className: "persistent-notification__body",
                        overflow: F._11.Hidden,
                        "data-test-selector": "persistent-notification__body"
                    }, a.createElement(F.Q, {
                        type: F._49.Span,
                        color: F.K.Alt
                    }, a.createElement(S, {
                        source: this.props.data.body || ""
                    }))), a.createElement(F._8, {
                        display: F.R.Flex,
                        alignItems: F.c.Center,
                        flexShrink: 0,
                        margin: {
                            top: .5
                        }
                    }, a.createElement(F._24, {
                        asset: (e = this.props.data.type, t = F._25.MessagesSC, e in T ? T[e] : t),
                        height: 12,
                        width: 12,
                        type: F._26.Alt2
                    }), a.createElement(F._8, {
                        margin: {
                            left: .5
                        }
                    }, a.createElement(F.Q, {
                        type: F._49.Span,
                        color: F.K.Alt2
                    }, Object(o.g)(new Date(this.props.data.updatedAt)))))))), this.renderDeleteNotification()));
                    var e, t
                }, t.prototype.checkVisible = function(e) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(t) {
                            return !this.impressionEventFired && this.isVisible(e) && (D({
                                uiContext: w.Center,
                                notification: this.props.data
                            }), this.impressionEventFired = !0), [2]
                        })
                    })
                }, t.contextTypes = {
                    registerReceiver: _.func
                }, t = i.__decorate([Object(f.d)("PersistentNotification")], t)
            }(a.Component),
            j = n("UUPo"),
            A = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isRead: !1
                    }, t.createNotificationData = function() {
                        return {
                            id: "friendrequests",
                            type: "friendrequests",
                            body: Object(o.d)("{count, plural, one {You have # new friend request} other {You have # new friend requests}}", {
                                count: t.props.count
                            }, "FriendRequestsNotification"),
                            createdAt: t.props.date,
                            updatedAt: t.props.date,
                            isRead: t.props.isOldNotification || t.state.isRead,
                            thumbnailURL: k.a,
                            actions: [{
                                body: "View",
                                type: "click",
                                url: "https://www.twitch.tv/friends/requests"
                            }]
                        }
                    }, t.clearUnseenCount = function() {
                        Object(p.e)(j, {}, function(e) {
                            return e.currentUser.incomingFriendRequests.totalUnreadCount = 0, e
                        }), t.props.clearUnreadFriendRequests().then(function() {}).catch(function(e) {
                            return o.j.error(e, "[FriendRequestsNotification] Failed to clear unread requests.")
                        })
                    }, t.viewFriendRequests = function() {
                        t.setState({
                            isRead: !0
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(U, {
                        key: "friendRequestsNotification",
                        data: this.createNotificationData(),
                        onDeleteNotification: this.clearUnseenCount,
                        onViewNotification: this.viewFriendRequests
                    })
                }, t
            }(a.Component),
            L = Object(v.compose)(Object(l.a)(y, {
                name: "clearUnreadFriendRequests"
            }))(A),
            M = (n("cLQP"), "center-window__empty"),
            B = "center-window__content-footer",
            W = "center-window__footer__text",
            V = "center-window__read-all",
            H = o.j.withCategory("onsite-notifications-center-window"),
            G = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isLoadingMore: !1
                    }, t.renderContent = function() {
                        return !t.props.hasInitiallyLoaded || t.props.data.length || t.props.friendRequestsData ? [t.mapPersistentNotificationElements(), t.renderContentFooter()] : t.renderEmptyCenterWindowElement()
                    }, t.renderContentFooter = function() {
                        var e = !t.props.hasInitiallyLoaded || t.state.isLoadingMore ? a.createElement(F._10, {
                            delay: 0,
                            fillContent: !0
                        }) : a.createElement(F._24, {
                            asset: F._25.LogoGlitch,
                            width: 24,
                            height: 24,
                            type: F._26.Alt2
                        });
                        return a.createElement(F._8, {
                            className: "center-window__content-footer",
                            key: "center-window__content-footer",
                            "data-test-selector": B,
                            display: F.R.Flex,
                            flexDirection: F.T.Column,
                            justifyContent: F._7.Center,
                            alignItems: F.c.Center,
                            textAlign: F._45.Center,
                            padding: 1,
                            flexGrow: 1
                        }, e)
                    }, t.mapPersistentNotificationElements = function() {
                        var e = t.props.data.map(function(e) {
                            return a.createElement(U, {
                                key: "onsite-notification-" + e.node.id,
                                data: e.node,
                                onDeleteNotification: t.props.onDeleteNotification,
                                onViewNotification: t.props.onViewNotification
                            })
                        });
                        return t.props.friendRequestsData && e.unshift(a.createElement(L, i.__assign({
                            key: "friend-requests"
                        }, t.props.friendRequestsData))), e
                    }, t.renderEmptyCenterWindowElement = function() {
                        return a.createElement(F._35, {
                            "data-test-selector": M,
                            className: "center-window__empty-state",
                            background: F.n.Alt,
                            display: F.R.Flex,
                            justifyContent: F._7.Center,
                            alignItems: F.c.Center,
                            textAlign: F._45.Center,
                            flexDirection: F.T.Column,
                            padding: 2,
                            fullWidth: !0
                        }, a.createElement(F._24, {
                            asset: F._25.LogoGlitch,
                            width: 100,
                            height: 100,
                            type: F._26.Placeholder
                        }), a.createElement(F._8, {
                            margin: {
                                top: 1
                            }
                        }, a.createElement(F.Q, {
                            type: F._49.H5,
                            color: F.K.Alt2
                        }, Object(o.d)("Hooray! You're in the clear!", "OnsiteNotifications"))))
                    }, t.renderMarkAsRead = function() {
                        return 0 !== t.props.data.length || t.props.friendRequestsData ? a.createElement(F.v, {
                            "data-test-selector": V,
                            type: F.B.Text,
                            size: F.z.Small,
                            disabled: 0 === t.props.data.length && !t.props.friendRequestsData,
                            onClick: t.props.onReadAllNotifications
                        }, Object(o.d)("Mark All as Read", "OnsiteNotifications")) : null
                    }, t.renderNotificationsHeaderElement = function() {
                        return a.createElement(F._35, {
                            className: "center-window__header",
                            background: F.n.Alt,
                            padding: {
                                x: 1,
                                y: .5
                            },
                            display: F.R.Flex,
                            alignItems: F.c.Center,
                            justifyContent: F._7.Between,
                            borderBottom: !0
                        }, a.createElement(F.Q, {
                            type: F._49.H6,
                            color: F.K.Alt2,
                            bold: !0
                        }, Object(o.d)("Notifications", "OnsiteNotifications")), t.renderMarkAsRead())
                    }, t.renderUnreadNotificationsFooterElement = function() {
                        var e = 0 === t.props.newNotificationsCount ? null : a.createElement(F.Q, {
                            "data-test-selector": W,
                            type: F._49.H6,
                            color: F.K.Alt2
                        }, Object(o.d)("{num, plural, one {1 New Notification} other {{num, number} New Notifications} }", {
                            num: t.props.newNotificationsCount
                        }, "OnsiteNotifications"));
                        return a.createElement(F._35, {
                            className: "center-window__footer",
                            background: F.n.Alt,
                            padding: .5,
                            alignItems: F.c.Center,
                            textAlign: F._45.Center,
                            borderTop: !0
                        }, e)
                    }, t.loadMore = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e;
                            return i.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        if (this.state.isLoadingMore) return [3, 5];
                                        this.setState({
                                            isLoadingMore: !0
                                        }), t.label = 1;
                                    case 1:
                                        return t.trys.push([1, 3, , 4]), [4, this.props.onLoadMore()];
                                    case 2:
                                        return t.sent(), [3, 4];
                                    case 3:
                                        return e = t.sent(), H.error(e, "unexpected loadMore failure"), [3, 4];
                                    case 4:
                                        this.setState({
                                            isLoadingMore: !1
                                        }), t.label = 5;
                                    case 5:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return a.createElement(F._35, {
                        className: "center-window",
                        "data-test-selector": "center-window",
                        background: F.n.Alt
                    }, this.renderNotificationsHeaderElement(), a.createElement(g.b, {
                        className: "center-window__scroll",
                        contentClassName: "center-window__scroll-container",
                        suppressScrollX: !0
                    }, a.createElement(F._8, {
                        display: F.R.Flex,
                        alignItems: F.c.Center,
                        flexDirection: F.T.Column,
                        flexGrow: 1,
                        flexWrap: F.U.NoWrap
                    }, this.renderContent(), a.createElement(g.a, {
                        enabled: this.props.data.length > 0 && !!this.props.data[this.props.data.length - 1].cursor,
                        contentLength: this.props.data.length,
                        loadMore: this.loadMore,
                        pixelThreshold: 200
                    }))), this.renderUnreadNotificationsFooterElement())
                }, t = i.__decorate([Object(f.d)("OnsiteNotificationsCenterWindow")], t)
            }(a.Component),
            z = n("RH2O"),
            q = n("Aj/L"),
            Q = n("RweG"),
            K = (n("MnLQ"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.closeTimeout = 0, t.close = function() {
                        x({
                            uiContext: w.Toast,
                            notification: t.props.item,
                            action: R.Dismiss
                        }), t.props.close(t.props.index)
                    }, t.onMouseEnter = function() {
                        t.cancelCloseTimer()
                    }, t.onMouseLeave = function() {
                        t.scheduleCloseTimer()
                    }, t.view = function() {
                        x({
                            uiContext: w.Toast,
                            notification: t.props.item,
                            action: R.PrimaryCta
                        }), t.props.view(t.props.index)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.scheduleCloseTimer()
                }, t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive(), D({
                        uiContext: w.Toast,
                        notification: this.props.item
                    })
                }, t.prototype.componentWillUnmount = function() {
                    this.cancelCloseTimer()
                }, t.prototype.render = function() {
                    return a.createElement(F.e, {
                        type: F.j.BounceIn,
                        duration: F.g.Medium,
                        enabled: !0
                    }, a.createElement("div", {
                        onMouseEnter: this.onMouseEnter,
                        onMouseLeave: this.onMouseLeave,
                        "data-test-selector": "onsite-notification-toast__mouse-enter-detector"
                    }, a.createElement(F._35, {
                        className: "onsite-notification-toast",
                        background: F.n.Base,
                        display: F.R.Flex,
                        flexWrap: F.U.NoWrap,
                        margin: {
                            bottom: 1
                        },
                        border: !0
                    }, a.createElement(F._6, i.__assign({
                        onClick: this.view,
                        alpha: !0
                    }, N(this.props.item, E.PageviewMedium.NotificationToast)), a.createElement(F._8, {
                        className: "onsite-notification-toast__container",
                        display: F.R.Flex,
                        flexWrap: F.U.NoWrap
                    }, a.createElement(F._8, {
                        padding: {
                            y: 1,
                            left: 1
                        },
                        display: F.R.Flex,
                        flexShrink: 0
                    }, a.createElement(F.E, {
                        aspect: F.l.Aspect1x1,
                        src: this.props.item.thumbnailURL,
                        alt: Object(o.d)("Notification toast thumbnail", "OnsiteNotifications"),
                        size: F.F.Size4
                    })), a.createElement(F._8, {
                        display: F.R.Flex,
                        flexDirection: F.T.Column,
                        flexWrap: F.U.NoWrap,
                        flexGrow: 1,
                        padding: 1
                    }, a.createElement(F._8, {
                        className: "onsite-notification-toast__body",
                        overflow: F._11.Hidden
                    }, a.createElement(F._35, {
                        color: F.K.Alt
                    }, a.createElement(S, {
                        source: this.props.item.body
                    }))), a.createElement(F._8, {
                        margin: {
                            top: .5
                        },
                        flexShrink: 0
                    }, a.createElement(F._35, {
                        color: F.K.Alt2
                    }, Object(o.g)(new Date(this.props.item.updatedAt))))))), this.renderActions())))
                }, t.prototype.renderActions = function() {
                    return a.createElement(F._35, {
                        className: "onsite-notification-toast__action-wrapper",
                        display: F.R.Flex,
                        alignContent: F.b.Stretch,
                        flexGrow: 0,
                        flexShrink: 0,
                        flexDirection: F.T.Column,
                        borderLeft: !0
                    }, a.createElement(F._35, {
                        className: "onsite-notification-toast__action",
                        display: F.R.Flex,
                        alignContent: F.b.Stretch,
                        flexGrow: 1,
                        borderBottom: !0
                    }, a.createElement(F._6, i.__assign({
                        onClick: this.view,
                        "data-test-selector": "onsite-notification-toast__view",
                        alpha: !0
                    }, N(this.props.item, E.PageviewMedium.NotificationToast)), a.createElement(F._35, {
                        display: F.R.Flex,
                        alignItems: F.c.Center,
                        justifyContent: F._7.Center,
                        fullHeight: !0,
                        flexGrow: 1,
                        padding: .5
                    }, a.createElement(F.Q, {
                        color: F.K.Link
                    }, this.primaryCTAText())))), a.createElement(F._35, {
                        className: "onsite-notification-toast__action",
                        display: F.R.Flex,
                        alignContent: F.b.Stretch,
                        flexGrow: 1
                    }, a.createElement(F._6, {
                        onClick: this.close,
                        "data-test-selector": "onsite-notification-toast__close",
                        alpha: !0
                    }, a.createElement(F._35, {
                        display: F.R.Flex,
                        alignItems: F.c.Center,
                        justifyContent: F._7.Center,
                        fullHeight: !0,
                        flexGrow: 1,
                        padding: .5
                    }, a.createElement(F.Q, {
                        color: F.K.Alt2
                    }, Object(o.d)("Close", "OnsiteNotifications"))))))
                }, t.prototype.primaryCTAText = function() {
                    var e = this.props.item.actions.find(function(e) {
                        return "click" === e.type
                    });
                    return e ? e.body : Object(o.d)("View", "OnsiteNotifications")
                }, t.prototype.scheduleCloseTimer = function() {
                    var e = this;
                    this.cancelCloseTimer(), this.closeTimeout = setTimeout(function() {
                        e.props.close(e.props.index), e.closeTimeout = 0
                    }, 1e4)
                }, t.prototype.cancelCloseTimer = function() {
                    this.closeTimeout && (clearTimeout(this.closeTimeout), this.closeTimeout = 0)
                }, t
            }(a.Component)),
            $ = Object(f.d)("OnsiteNotificationToast")(K);

        function Y(e, t) {
            return {
                id: e.id,
                body: e.body_md,
                type: e.type,
                thumbnailURL: e.thumbnail_url,
                createdAt: e.created_at,
                updatedAt: e.updated_at,
                isRead: e.read,
                actions: e.actions.map(function(e) {
                    return {
                        body: e.body,
                        type: e.type,
                        url: e.url,
                        __typename: "OnsiteNotificationAction"
                    }
                }),
                isTransient: !t,
                __typename: "OnsiteNotification"
            }
        }
        n("L6HU");
        var Z, X = o.j.withCategory("toast-manager"),
            J = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        notifications: []
                    }, t.view = function(e) {
                        var n = t.state.notifications[e];
                        t.props.onViewNotification(n.id, !n.isTransient), t.close(e)
                    }, t.close = function(e) {
                        var n = t.state.notifications.slice();
                        n.splice(e, 1), t.setState({
                            notifications: n
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive(), this.conditionallyInsertTestData()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this.props.pubsub.messages.info,
                        n = e.pubsub.messages.info;
                    if (n && n.data.toast && (!t || n.data.notification.id !== t.data.notification.id || n.data.notification.updated_at !== t.data.notification.updated_at)) {
                        X.debug("Received pubsub update", e.pubsub.messages.info);
                        var i = Y(n.data.notification, n.data.persistent);
                        this.onNewNotification(i)
                    }
                }, t.prototype.render = function() {
                    return a.createElement(F._8, {
                        className: "onsite-notifications-toast-manager",
                        position: F._15.Absolute,
                        margin: {
                            top: 5
                        },
                        "data-test-selector": "onsite-notifications-toast-manager"
                    }, this.renderToasts())
                }, t.prototype.conditionallyInsertTestData = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e, t;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return o.a.buildType !== d.a.Production && r.parse(window.location.search).onsite_test_data ? [4, n.e(30).then(n.bind(null, "SFZn"))] : [3, 2];
                                case 1:
                                    e = i.sent().MockOnsiteNotifications, t = e.getMockOnsiteNotificationModels(3), this.setState({
                                        notifications: t
                                    }), i.label = 2;
                                case 2:
                                    return [2]
                            }
                        })
                    })
                }, t.prototype.renderToasts = function() {
                    var e = this,
                        t = this.state.notifications.map(function(t, n) {
                            return a.createElement($, {
                                key: t.id,
                                item: t,
                                index: n,
                                view: e.view,
                                close: e.close
                            })
                        });
                    return 0 === t.length ? null : t
                }, t.prototype.onNewNotification = function(e) {
                    var t = this.state.notifications.slice(),
                        n = t.findIndex(function(t) {
                            return t.id === e.id
                        });
                    n > -1 && t.splice(n, 1), t.unshift(e), t.length > 3 && t.pop(), this.setState({
                        notifications: t
                    })
                }, t = i.__decorate([Object(f.d)("OnsiteNotificationToastManager"), Object(Q.a)([{
                    topic: function(e) {
                        return Object(m.l)("" + (e.currentUser && e.currentUser.id))
                    },
                    mapMessageTypesToProps: (Z = {}, Z[u.PubsubMessageType.OnsiteNotificationCreate] = "info", Z[u.PubsubMessageType.OnsiteNotificationUpdate] = "info", Z),
                    skip: function(e) {
                        return !e.currentUser
                    }
                }])], t)
            }(a.Component);
        var ee = Object(z.b)(function(e) {
            return {
                currentUser: Object(q.c)(e)
            }
        })(J);
        var te = o.j.withCategory("onsite-pubsub-mutators");

        function ne(e, t) {
            return te.debug("Received pubsub summary update", e), t && t.currentUser && t.currentUser.notifications && t.currentUser.notifications.summary && e.data.summary ? (t.currentUser.notifications.summary.lastSeenAt = e.data.summary.last_seen_at, t.currentUser.notifications.summary.unseenCount = e.data.summary.unseen_view_count, t) : t
        }

        function ie(e, t) {
            if (te.debug("Received pubsub notification update", e), !(t && t.currentUser && t.currentUser.notifications && t.currentUser.notifications.edges && t.currentUser.notifications.edges)) return t;
            if (function(e) {
                    return e.type === u.PubsubMessageType.OnsiteNotificationsRead
                }(e)) {
                var n = new Set(e.data.notification_ids),
                    r = t.currentUser.notifications.edges.map(function(e) {
                        return n.has(e.node.id) ? i.__assign({}, e, {
                            node: i.__assign({}, e.node, {
                                isRead: !0
                            })
                        }) : e
                    });
                t.currentUser.notifications.edges = r
            } else if (function(e) {
                    return e.type === u.PubsubMessageType.OnsiteNotificationCreate || e.type === u.PubsubMessageType.OnsiteNotificationUpdate
                }(e)) {
                if (e.data.persistent) {
                    var a = Y(e.data.notification, !0);
                    (r = re(t.currentUser.notifications.edges, a.id)).unshift({
                        cursor: null,
                        node: a,
                        __typename: "OnsiteNotificationEdge"
                    }), t.currentUser.notifications.edges = r
                }
            } else(function(e) {
                return e.type === u.PubsubMessageType.OnsiteNotificationDelete
            })(e) && (t.currentUser.notifications.edges = re(t.currentUser.notifications.edges, e.data.notification_id));
            return t
        }

        function re(e, t) {
            return e.filter(function(e) {
                return e.node.id !== t
            })
        }
        var ae = n("XF1M"),
            oe = n("UhWx"),
            se = n("WfBs"),
            le = n("c8sn"),
            ce = n("wHbv");
        n("adox");
        n.d(t, "a", function() {
            return he
        }), n.d(t, "b", function() {
            return be
        });
        var de = o.j.withCategory("onsite-notifications"),
            ue = "onsite-notifications__badge",
            pe = "99+",
            me = 5e3,
            he = 10,
            fe = 100,
            ge = {
                align: F._53.Center,
                direction: F._54.Bottom,
                label: ""
            },
            ve = {
                limit: he,
                cursor: ""
            },
            be = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        newNotificationsCount: 0,
                        newFriendRequestsBadgeCount: 0,
                        isFriendRequestsNotificationUnread: !1
                    }, t.newNotificationsCountTimer = 0, t.hasInsertedSummaryData = !1, t.hasInsertedListNotificationsData = !1, t.hasReportedListNotificationsLoaded = !1, t.viewNotification = function(e, n) {
                        void 0 === n && (n = !0), t.centerWindowToggleBalloon.toggleBalloon(!1), n && t.readNotification(e)
                    }, t.conditionallyInsertSummaryTestData = function() {
                        t.summaryDataLoaded(t.props) && !t.hasInsertedSummaryData && o.a.buildType !== d.a.Production && r.parse(window.location.search).onsite_test_data && (t.hasInsertedSummaryData = !0, Object(p.e)(le, i.__assign({}, t.props.summaryData.variables), function(e) {
                            return e.currentUser.notifications.summary.unseenCount = r.parse(window.location.search).onsite_test_data, e
                        }))
                    }, t.conditionallyInsertListNotificationsTestData = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e;
                            return i.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return this.listDataLoaded() && !this.hasInsertedListNotificationsData && o.a.buildType !== d.a.Production && r.parse(window.location.search).onsite_test_data ? (this.hasInsertedListNotificationsData = !0, [4, n.e(30).then(n.bind(null, "SFZn"))]) : [3, 2];
                                    case 1:
                                        e = t.sent().MockOnsiteNotifications, Object(p.e)(oe, i.__assign({}, this.props.listData.variables), function(t) {
                                            return t.currentUser.notifications.edges = e.getMockOnsiteNotificationEdges(r.parse(window.location.search).onsite_test_data), t
                                        }), t.label = 2;
                                    case 2:
                                        return [2]
                                }
                            })
                        })
                    }, t.summaryDataLoaded = function(e) {
                        return e.summaryData && !e.summaryData.loading && !e.summaryData.error && e.summaryData.currentUser && e.summaryData.currentUser.notifications && e.summaryData.currentUser.notifications.summary && e.summaryData.currentUser.incomingFriendRequests
                    }, t.listDataLoaded = function() {
                        return t.props.listData && t.props.listData.currentUser && t.props.listData.currentUser.notifications && void 0 !== t.props.listData.currentUser.notifications.edges
                    }, t.hasNewFriendRequests = function(e) {
                        var t = e.summaryData.currentUser;
                        if (t.incomingFriendRequests && t.incomingFriendRequests.newestEdge && t.incomingFriendRequests.newestEdge.createdAt) {
                            var n = new Date(t.incomingFriendRequests.newestEdge.createdAt),
                                i = new Date(t.notifications.summary.lastSeenAt);
                            return t.incomingFriendRequests.totalUnreadCount > 0 && n > i
                        }
                        return !1
                    }, t.getFriendRequestsData = function() {
                        if (t.summaryDataLoaded(t.props)) {
                            var e = t.props.summaryData.currentUser;
                            if (e.incomingFriendRequests && e.incomingFriendRequests.newestEdge) {
                                var n = e.incomingFriendRequests.totalUnreadCount,
                                    i = e.incomingFriendRequests.newestEdge.createdAt;
                                return n && i ? {
                                    count: n,
                                    date: i,
                                    isOldNotification: !t.state.isFriendRequestsNotificationUnread
                                } : void 0
                            }
                        }
                    }, t.toggleCenter = function(e) {
                        e || (t.props.stopDeferring(), t.getUnseenNotificationsAndApplyTimer(), t.viewNotifications()), I({
                            unseenCount: t.getUnseenNotificationsCount(t.props),
                            action: e ? O.Close : O.Open
                        })
                    }, t.getUnseenNotificationsAndApplyTimer = function() {
                        var e = t.state.newNotificationsCount;
                        t.summaryDataLoaded(t.props) && (e = t.getUnseenNotificationsCount(t.props), t.setState({
                            newNotificationsCount: e
                        })), t.clearTimeout(), e > 0 && (t.newNotificationsCountTimer = setTimeout(function() {
                            t.setState({
                                newNotificationsCount: 0
                            }), t.clearTimeout()
                        }, me))
                    }, t.viewNotifications = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return i.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        if (!this.summaryDataLoaded(this.props)) return [2];
                                        this.setState({
                                            newFriendRequestsBadgeCount: 0
                                        }), e = i.__assign({}, Object(p.a)({}), {
                                            optimisticResponse: {
                                                viewedNotifications: {
                                                    user: {
                                                        notifications: {
                                                            summary: {
                                                                unseenCount: 0,
                                                                lastSeenAt: new Date,
                                                                __typename: "OnsiteNotificationsSummary"
                                                            },
                                                            __typename: "OnsiteNotificationConnection"
                                                        },
                                                        __typename: "User"
                                                    },
                                                    __typename: "ViewedNotificationsPayload"
                                                }
                                            }
                                        }), Object(p.e)(le, i.__assign({}, this.props.summaryData.variables), function(e) {
                                            return e.currentUser.notifications.summary.unseenCount = 0, e
                                        }), n.label = 1;
                                    case 1:
                                        return n.trys.push([1, 3, , 4]), [4, this.props.viewNotifications(e)];
                                    case 2:
                                        return n.sent(), [3, 4];
                                    case 3:
                                        return t = n.sent(), de.error(t, "failure to read message..."), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.getUnseenNotificationsCount = function(e) {
                        return t.summaryDataLoaded(e) ? e.summaryData.currentUser.notifications.summary.unseenCount + t.state.newFriendRequestsBadgeCount : 0
                    }, t.renderUnseenNotificationsBadge = function() {
                        var e = t.getUnseenNotificationsCount(t.props);
                        if (e > 0) {
                            var n = e >= 100 ? pe : e.toString();
                            return a.createElement(F._8, {
                                className: "onsite-notifications__badge",
                                "data-test-selector": ue,
                                position: F._15.Absolute
                            }, a.createElement(F._12, {
                                label: n,
                                type: F._13.Notification
                            }))
                        }
                    }, t.deleteNotification = function(e) {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var t, n;
                            return i.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        t = i.__assign({}, Object(p.a)({
                                            id: e
                                        }), {
                                            optimisticResponse: {
                                                deleteNotification: {
                                                    __typename: "DeleteNotificationPayload",
                                                    notification: {
                                                        __typename: "OnsiteNotification",
                                                        id: e
                                                    }
                                                }
                                            }
                                        }), this.listDataLoaded() && Object(p.e)(oe, i.__assign({}, this.props.listData.variables), function(t) {
                                            return t.currentUser.notifications.edges = t.currentUser.notifications.edges.filter(function(t) {
                                                return t.node.id !== e
                                            }), t
                                        }), r.label = 1;
                                    case 1:
                                        return r.trys.push([1, 3, , 4]), [4, this.props.deleteOnsiteNotification(t)];
                                    case 2:
                                        return r.sent(), [3, 4];
                                    case 3:
                                        return n = r.sent(), de.error(n, "Unable to delete notification " + e), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.readAllNotifications = function() {
                        if (t.setState({
                                isFriendRequestsNotificationUnread: !1
                            }), t.listDataLoaded()) {
                            I({
                                unseenCount: t.getUnseenNotificationsCount(t.props),
                                action: O.MarkAllRead
                            });
                            var e = t.props.listData.currentUser.notifications.edges.filter(function(e) {
                                return !e.node.isRead
                            }).map(function(e) {
                                return e.node.id
                            });
                            if (0 !== e.length) {
                                var n = function(e, t) {
                                    for (var n = [], i = 0; i < e.length; i += t) {
                                        var r = e.slice(i, i + t);
                                        n.push(r)
                                    }
                                    return n
                                }(e, fe);
                                Object(p.e)(oe, i.__assign({}, t.props.listData.variables), function(e) {
                                    return e.currentUser.notifications.edges = e.currentUser.notifications.edges.map(function(e) {
                                        return i.__assign({}, e, {
                                            node: i.__assign({}, e.node, {
                                                isRead: !0
                                            })
                                        })
                                    }), e
                                });
                                for (var r = 0, a = n; r < a.length; r++) {
                                    var o = a[r];
                                    t.markIDsAsRead(o)
                                }
                            }
                        }
                    }, t.markIDsAsRead = function(e) {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var t, n, r;
                            return i.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        t = e.map(function(e) {
                                            return {
                                                id: e,
                                                isRead: !0,
                                                __typename: "OnsiteNotification"
                                            }
                                        }), n = i.__assign({}, Object(p.a)({
                                            ids: e
                                        }), {
                                            optimisticResponse: {
                                                readNotifications: {
                                                    __typename: "ReadNotificationsPayload",
                                                    notifications: t,
                                                    count: e.length
                                                }
                                            }
                                        }), a.label = 1;
                                    case 1:
                                        return a.trys.push([1, 3, , 4]), [4, this.props.readOnsiteNotification(n)];
                                    case 2:
                                        return a.sent(), [3, 4];
                                    case 3:
                                        return r = a.sent(), de.error(r, "Unable to read notifications", {
                                            ids: e
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.readNotification = function(e) {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var t, n;
                            return i.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        t = i.__assign({}, Object(p.a)({
                                            ids: [e]
                                        }), {
                                            optimisticResponse: {
                                                readNotifications: {
                                                    __typename: "ReadNotificationsPayload",
                                                    notifications: [{
                                                        id: e,
                                                        isRead: !0,
                                                        __typename: "OnsiteNotification"
                                                    }],
                                                    count: 1
                                                }
                                            }
                                        }), this.listDataLoaded() && Object(p.e)(oe, i.__assign({}, this.props.listData.variables), function(t) {
                                            return t.currentUser.notifications.edges = t.currentUser.notifications.edges.map(function(t) {
                                                return t.node.id === e ? i.__assign({}, t, {
                                                    node: i.__assign({}, t.node, {
                                                        isRead: !0
                                                    })
                                                }) : t
                                            }), t
                                        }), r.label = 1;
                                    case 1:
                                        return r.trys.push([1, 3, , 4]), [4, this.props.readOnsiteNotification(t)];
                                    case 2:
                                        return r.sent(), [3, 4];
                                    case 3:
                                        return n = r.sent(), de.error(n, "Unable to read notification", {
                                            id: e
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.loadMore = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            return i.__generator(this, function(e) {
                                return this.props.listData.loading ? [2] : [2, this.props.loadMore()]
                            })
                        })
                    }, t.clearTimeout = function() {
                        t.newNotificationsCountTimer && (clearTimeout(t.newNotificationsCountTimer), t.newNotificationsCountTimer = 0)
                    }, t.saveCenterWindowToggleBalloonRef = function(e) {
                        return t.centerWindowToggleBalloon = e
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.conditionallyInsertSummaryTestData(), this.conditionallyInsertListNotificationsTestData(), this.listNotificationsLoaded && !this.hasReportedListNotificationsLoaded && this.listDataLoaded() && (this.hasReportedListNotificationsLoaded = !0, this.props.latencyTracking.reportCustomEvent(this.listNotificationsLoaded))
                }, t.prototype.componentWillUnmount = function() {
                    this.clearTimeout()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (this.summaryDataLoaded(e)) {
                        var t = this.hasNewFriendRequests(e);
                        this.setState({
                            newFriendRequestsBadgeCount: t ? 1 : 0
                        }), this.summaryDataLoaded(this.props) || this.setState({
                            isFriendRequestsNotificationUnread: t
                        }), o.o.setBadgeCount(this.getUnseenNotificationsCount(e))
                    }
                    e.shouldDefer || this.listNotificationsLoaded || (this.listNotificationsLoaded = this.registerListNotificationsLoadedEvent())
                }, t.prototype.render = function() {
                    var e = this.props.shouldDefer || !this.listDataLoaded() ? [] : this.props.listData.currentUser.notifications.edges;
                    return ge.label = Object(o.d)("Notifications", "OnsiteNotificationsToolTip"), a.createElement(F._8, {
                        className: "onsite-notifications"
                    }, a.createElement(ee, {
                        onViewNotification: this.viewNotification
                    }), a.createElement(F._8, {
                        position: F._15.Relative
                    }, a.createElement(s.a, {
                        onToggle: this.toggleCenter,
                        ref: this.saveCenterWindowToggleBalloonRef,
                        tooltipProps: ge
                    }, a.createElement(F.w, {
                        ariaLabel: Object(o.d)("Open Notifications", "OnsiteNotifications"),
                        size: F.x.Large,
                        icon: F._25.NotificationBell,
                        overlay: !0
                    }), a.createElement(F.q, {
                        "data-test-selector": "center-window__balloon",
                        direction: F.r.BottomRight,
                        size: F.s.Large,
                        offsetX: "10px"
                    }, a.createElement(G, {
                        newNotificationsCount: this.state.newNotificationsCount,
                        hasInitiallyLoaded: this.listDataLoaded(),
                        data: e,
                        friendRequestsData: this.getFriendRequestsData(),
                        onLoadMore: this.loadMore,
                        onViewNotification: this.viewNotification,
                        onReadAllNotifications: this.readAllNotifications,
                        onDeleteNotification: this.deleteNotification
                    }))), this.renderUnseenNotificationsBadge()))
                }, t.prototype.registerListNotificationsLoadedEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent({
                        benchmark: 1e3,
                        group: h.a.OnsiteNotifications,
                        key: h.b.OnsiteNotificationsLoaded,
                        label: h.c.Init,
                        start: h.d.Registration
                    })
                }, t = i.__decorate([function(e) {
                    return function(t) {
                        function n() {
                            var e = null !== t && t.apply(this, arguments) || this;
                            return e.state = {
                                shouldDefer: !0
                            }, e.stopDeferring = function() {
                                e.state.shouldDefer && e.setState({
                                    shouldDefer: !1
                                })
                            }, e
                        }
                        return i.__extends(n, t), n.prototype.render = function() {
                            var t = {
                                shouldDefer: this.state.shouldDefer,
                                stopDeferring: this.stopDeferring
                            };
                            return a.createElement(e, i.__assign({}, this.props, t))
                        }, n
                    }(a.Component)
                }, Object(l.a)(le, {
                    name: "summaryData",
                    skip: function(e) {
                        return !e.firstPageLoaded
                    }
                }), Object(l.a)(ce, {
                    name: "viewNotifications"
                }), Object(l.a)(oe, {
                    name: "listData",
                    options: function(e) {
                        return {
                            variables: i.__assign({}, ve, {
                                language: e.languageCode
                            })
                        }
                    },
                    skip: function(e) {
                        return e.shouldDefer
                    },
                    props: function(e) {
                        return i.__assign({}, e, {
                            loadMore: function() {
                                return e.listData.fetchMore({
                                    query: oe,
                                    variables: i.__assign({}, e.listData.variables, {
                                        cursor: e.listData.currentUser ? e.listData.currentUser.notifications.edges[e.listData.currentUser.notifications.edges.length - 1].cursor : ""
                                    }),
                                    updateQuery: function(e, t) {
                                        var n = t.fetchMoreResult;
                                        return {
                                            currentUser: i.__assign({}, n.currentUser, {
                                                notifications: i.__assign({}, n.currentUser.notifications, {
                                                    edges: e.currentUser.notifications.edges.concat(n.currentUser.notifications.edges)
                                                })
                                            })
                                        }
                                    }
                                })
                            }
                        })
                    }
                }), Object(l.a)(ae, {
                    name: "deleteOnsiteNotification"
                }), Object(l.a)(se, {
                    name: "readOnsiteNotification"
                }), Object(c.a)(function(e) {
                    return {
                        query: le,
                        skip: !e.currentUser,
                        topic: Object(m.l)("" + (e.currentUser && e.currentUser.id)),
                        types: [u.PubsubMessageType.OnsiteNotificationSummaryUpdate, u.PubsubMessageType.OnsiteNotificationUpdate, u.PubsubMessageType.OnsiteNotificationCreate, u.PubsubMessageType.OnsiteNotificationDelete],
                        mutator: ne
                    }
                }), Object(c.a)(function(e) {
                    return {
                        query: oe,
                        variables: i.__assign({}, ve, {
                            language: e.languageCode
                        }),
                        skip: !(e.currentUser && e.listData && e.listData.currentUser && e.listData.currentUser.notifications && e.listData.currentUser.notifications.edges),
                        topic: Object(m.l)("" + (e.currentUser && e.currentUser.id)),
                        types: [u.PubsubMessageType.OnsiteNotificationsRead, u.PubsubMessageType.OnsiteNotificationUpdate, u.PubsubMessageType.OnsiteNotificationCreate, u.PubsubMessageType.OnsiteNotificationDelete],
                        mutator: ie
                    }
                }), Object(f.d)("OnsiteNotifications", {
                    autoReportInteractive: !0
                })], t)
            }(a.Component)
    },
    U8pM: function(e, t) {},
    UKw0: function(e, t) {},
    UUPo: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FriendRequestsNotification_Query"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "incomingFriendRequests"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "1"
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "totalUnreadCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 115
            }
        };
        n.loc.source = {
            body: "query FriendRequestsNotification_Query {\ncurrentUser {\nid\nincomingFriendRequests(first: 1) {\ntotalUnreadCount\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "UW/+": function(e, t) {},
    Ugo3: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FriendButton_UnfriendUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnfriendUserInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "unfriendUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "friendButtonFragment"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 211
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/friend-button/queries/friend-button-fragment.gql"\nmutation FriendButton_UnfriendUser($input: UnfriendUserInput!) {\nunfriendUser(input: $input) {\nuser {\nid\n...friendButtonFragment\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var r = {};
        i.definitions = i.definitions.concat(n("HC5L").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !r[t] && (r[t] = !0, !0)
        })), e.exports = i
    },
    UhWx: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "OnsiteNotifications_ListNotifications"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "limit"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Int"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "cursor"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "language"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "String"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "notifications"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "limit"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "after"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "cursor"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "language"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "language"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "pageInfo"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "hasNextPage"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "type"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "body"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "createdAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "updatedAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isRead"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "thumbnailURL"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "actions"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "body"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "type"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "url"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 311
            }
        };
        n.loc.source = {
            body: "query OnsiteNotifications_ListNotifications($limit: Int $cursor: Cursor $language: String) {\ncurrentUser {\nid\nnotifications(first: $limit after: $cursor language: $language) {\npageInfo {\nhasNextPage\n}\nedges {\ncursor\nnode {\nid\ntype\nbody\ncreatedAt\nupdatedAt\nisRead\nthumbnailURL\nactions {\nbody\ntype\nurl\n}\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Uhaz: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("6sO2"),
            o = n("CSlQ"),
            s = n("Odds"),
            l = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onLoginClick = function(e) {
                        e.preventDefault(), t.props.login()
                    }, t.onSignUpClick = function(e) {
                        e.preventDefault(), t.props.signup()
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return r.createElement(s._8, {
                        className: "anon-user",
                        flexWrap: s.U.NoWrap,
                        display: s.R.Flex,
                        margin: {
                            left: 1
                        },
                        "data-a-target": "user-card"
                    }, r.createElement(s._8, {
                        margin: {
                            right: 1
                        }
                    }, r.createElement(s.v, {
                        onClick: this.onLoginClick,
                        "data-a-target": "login-button"
                    }, Object(a.d)("Log in", "top-nav"))), r.createElement(s._8, {
                        margin: {
                            right: 1
                        }
                    }, r.createElement(s.v, {
                        onClick: this.onSignUpClick,
                        "data-a-target": "signup-button"
                    }, Object(a.d)("Sign up", "top-nav"))))
                }, t = i.__decorate([Object(o.d)("AnonUser")], t)
            }(r.Component);
        n.d(t, "a", function() {
            return l
        })
    },
    UhzT: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecommendedFriend_DismissFriendRecommendation"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DismissFriendRecommendationInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "dismissFriendRecommendation"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 160
            }
        };
        n.loc.source = {
            body: "mutation RecommendedFriend_DismissFriendRecommendation($input: DismissFriendRecommendationInput!) {\ndismissFriendRecommendation(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "V1E/": function(e, t) {},
    VNvG: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FollowButton_FollowUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "FollowUserInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "followUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "follow"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "disableNotifications"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 124
            }
        };
        n.loc.source = {
            body: "mutation FollowButton_FollowUser($input: FollowUserInput!) {\nfollowUser(input: $input) {\nfollow {\ndisableNotifications\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    VOrx: function(e, t) {},
    VkpB: function(e, t) {},
    Vprp: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecommendedFriend_CreateFriendRequest"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CreateFriendRequestInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "createFriendRequest"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 136
            }
        };
        n.loc.source = {
            body: "mutation RecommendedFriend_CreateFriendRequest($input: CreateFriendRequestInput!) {\ncreateFriendRequest(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Vr0l: function(e, t) {},
    WC9X: function(e, t) {},
    WHFs: function(e, t) {},
    WIs4: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("HZww");

        function o(e) {
            return function(t) {
                return function(n) {
                    function o(t) {
                        var i = n.call(this, t) || this;
                        return i.mutator = function(e, t) {
                            return i.options.mutator(e, t)
                        }, i.typesChanged = function(e) {
                            if (e.types && !i.options.types || !e.types && i.options.types) return !0;
                            if (e.types && i.options.types) {
                                if (e.types.length !== i.options.types.length) return !0;
                                var t = new Set(i.options.types);
                                return e.types.some(function(e) {
                                    return !t.has(e)
                                })
                            }
                            return !1
                        }, i.options = e(t), i
                    }
                    return i.__extends(o, n), o.prototype.componentDidMount = function() {
                        this.options.skip || this.subscribe(this.options)
                    }, o.prototype.componentWillReceiveProps = function(t) {
                        var n = e(t);
                        n.skip !== this.options.skip && (n.skip ? this.unsubscribe() : this.subscribe(n)), n.skip || (n.topic !== this.options.topic || n.type !== this.options.type || this.typesChanged(n)) && (this.unsubscribe(), this.subscribe(n)), this.options = n
                    }, o.prototype.componentWillUnmount = function() {
                        this.unsubscribe()
                    }, o.prototype.render = function() {
                        return r.createElement(t, i.__assign({}, this.props))
                    }, o.prototype.subscribe = function(e) {
                        this.unsubscriber = Object(a.s)({
                            query: e.query,
                            variables: e.variables,
                            topic: e.topic,
                            type: e.type,
                            types: e.types,
                            mutator: this.mutator,
                            skipMessage: e.skipMessage
                        })
                    }, o.prototype.unsubscribe = function() {
                        this.unsubscriber && (this.unsubscriber(), this.unsubscriber = null)
                    }, o
                }(r.Component)
            }
        }
        n.d(t, "a", function() {
            return o
        })
    },
    WKaT: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("6sO2"),
            o = n("7vx8"),
            s = n("+6x9"),
            l = n("E1ro"),
            c = n("dKYh"),
            d = n("Odds"),
            u = n("oPEP"),
            p = (n("tLvU"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this;
                    if (!this.props.data || this.props.data.loading) return r.createElement(d._10, null);
                    if (this.props.data && this.props.data.error) return null;
                    if (this.props.data.user.subscriptionProducts.length < 1) return null;
                    var t = this.props.data.user.subscriptionProducts[0],
                        n = Object(c.b)(t, !0).map(function(t) {
                            return r.createElement(d._2, {
                                className: "insider-pass-emote-and-badge-rewards__item",
                                "data-test-selector": "insider-pass-emote-reward",
                                key: t.name
                            }, r.createElement("li", null, r.createElement(d._8, {
                                display: d.R.Flex,
                                flexDirection: d.T.Column,
                                alignItems: d.c.Center,
                                padding: {
                                    bottom: e.props.insiderPurchaseState === l.a.PrePurchase ? 4 : 2
                                }
                            }, r.createElement(s.a, {
                                imageURL: t.imageURL,
                                noBorder: !0
                            }), e.props.insiderPurchaseState === l.a.PostPurchase && r.createElement(d._8, {
                                textAlign: d._45.Center,
                                padding: {
                                    bottom: 1
                                }
                            }, r.createElement(d.Q, {
                                noWrap: !0,
                                bold: !0
                            }, t.name)))))
                        }),
                        i = this.props.data.user.broadcastBadges.filter(function(e) {
                            return "subscriber" === e.setID
                        }).map(function(e) {
                            return Object(c.a)(e, !1)
                        }),
                        o = this.props.data.user.tournament.rewards.insider.badges.concat(i).map(function(t) {
                            return r.createElement(d._2, {
                                className: "insider-pass-emote-and-badge-rewards__item",
                                "data-test-selector": "insider-pass-badge-reward",
                                key: t.name
                            }, r.createElement("li", null, r.createElement(d._8, {
                                display: d.R.Flex,
                                flexDirection: d.T.Column,
                                alignItems: d.c.Center
                            }, r.createElement(s.a, {
                                imageURL: t.imageURL,
                                noBorder: !0
                            }), e.props.insiderPurchaseState === l.a.PostPurchase && r.createElement(d._8, {
                                textAlign: d._45.Center,
                                padding: {
                                    bottom: 1
                                }
                            }, r.createElement(d.Q, {
                                bold: !0
                            }, t.name)))))
                        });
                    return r.createElement(d._8, {
                        className: "insider-pass-emote-and-badge-rewards",
                        display: d.R.Flex,
                        flexDirection: d.T.Column
                    }, r.createElement(d._8, {
                        padding: {
                            bottom: 4
                        }
                    }, r.createElement(d._8, {
                        textAlign: d._45.Center,
                        padding: {
                            bottom: 2
                        }
                    }, r.createElement(d.Q, {
                        fontSize: d.V.Size3,
                        bold: !0
                    }, Object(a.d)("Global Overwatch League Twitch Emotes", "InsiderPassEmoteAndBadgeRewards"))), r.createElement(d._2, {
                        textAlign: d._45.Center,
                        display: d.R.Flex,
                        flexWrap: d.U.Wrap,
                        flexDirection: d.T.Row,
                        justifyContent: d._7.Center,
                        alignItems: d.c.Baseline
                    }, r.createElement("ul", null, n))), r.createElement(d._8, null, r.createElement(d._8, {
                        textAlign: d._45.Center
                    }, r.createElement(d.Q, {
                        fontSize: d.V.Size3,
                        bold: !0
                    }, Object(a.d)("Global Overwatch League Twitch Badges", "InsiderPassEmoteAndBadgeRewards"))), r.createElement(d._2, {
                        display: d.R.Flex,
                        flexDirection: d.T.Row,
                        flexWrap: d.U.Wrap,
                        justifyContent: d._7.Center,
                        padding: {
                            y: 2
                        }
                    }, r.createElement("ul", null, o))))
                }, t = i.__decorate([Object(o.a)(u, {
                    options: function(e) {
                        return {
                            variables: {
                                channelID: e.channelID
                            }
                        }
                    }
                })], t)
            }(r.PureComponent));
        n.d(t, !1, function() {
            return "insider-pass-badge-reward"
        }), n.d(t, !1, function() {
            return "insider-pass-emote-reward"
        }), n.d(t, "a", function() {
            return p
        })
    },
    WVx7: function(e, t, n) {
        "use strict";
        var i, r = n("RH2O"),
            a = n("V5M+"),
            o = n("Iw4B"),
            s = n("Aj/L"),
            l = n("TToO"),
            c = n("GiK3"),
            d = n("2KeS"),
            u = n("6sO2"),
            p = n("+8VM"),
            m = n("7vx8"),
            h = n("oIkB");
        ! function(e) {
            e[e.ExitEarly = 0] = "ExitEarly", e[e.Unknown = 1] = "Unknown", e[e.Adblock = 2] = "Adblock", e[e.LimitReached = 3] = "LimitReached"
        }(i || (i = {}));
        var f = n("4JjK"),
            g = n("/LBW"),
            v = n("Odds"),
            b = n("zzpv"),
            k = (n("x583"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.hasAwarded = !1, t.messageHandler = function(e) {
                        return l.__awaiter(t, void 0, void 0, function() {
                            var t, n, r, a, o;
                            return l.__generator(this, function(s) {
                                switch (s.label) {
                                    case 0:
                                        if (e.origin !== window.location.origin) return [2];
                                        if (!(t = e.data) || "trueXAd" !== t.msgSrc) return [2];
                                        switch (t.type) {
                                            case f.a.Ready:
                                                return [3, 1];
                                            case f.a.RequestAd:
                                                return [3, 2];
                                            case f.a.Dimensions:
                                                return [3, 3];
                                            case f.a.OnStart:
                                                return [3, 4];
                                            case f.a.OnCredit:
                                                return [3, 5];
                                            case f.a.OnClose:
                                            case f.a.OnFinish:
                                            case f.a.LimitReached:
                                            case f.a.Adblock:
                                            case f.a.OnError:
                                                return [3, 9]
                                        }
                                        return [3, 10];
                                    case 1:
                                        return n = {
                                            msgSrc: "wateb-ad-modal",
                                            tuid: this.props.tuid
                                        }, e.source.postMessage(n, "*"), [2];
                                    case 2:
                                        try {
                                            if (!(r = JSON.parse(t.activityJSON))) return [2];
                                            Object(g.g)({
                                                campaignID: r.campaign_id.toString(),
                                                requestID: t.requestID,
                                                requestMethod: this.props.requestRef
                                            })
                                        } catch (e) {}
                                        return [2];
                                    case 3:
                                        return t.height && t.width && this.setState({
                                            customDimensions: {
                                                height: t.height,
                                                width: t.width
                                            }
                                        }), [3, 10];
                                    case 4:
                                        try {
                                            if (!(r = JSON.parse(t.activityJSON))) return [2];
                                            Object(g.f)({
                                                requestID: t.requestID,
                                                adblock: !1,
                                                campaignID: r.campaign_id.toString()
                                            })
                                        } catch (e) {}
                                        return [2];
                                    case 5:
                                        return s.trys.push([5, 7, , 8]), [4, this.props.redeemTrueXAd(Object(h.a)({
                                            args: t.engagement.signature_argument_string,
                                            signature: t.engagement.signature,
                                            trueXAd: {
                                                creativeID: t.engagement.ad.creative_id,
                                                campaignID: t.engagement.ad.campaign_id,
                                                name: t.engagement.ad.name,
                                                currencyAmount: t.engagement.ad.currency_amount
                                            },
                                            targetID: this.props.channelID
                                        }))];
                                    case 6:
                                        return a = s.sent(), this.hasAwarded = !0, this.props.onBitsAwarded && this.props.onBitsAwarded(a.data.redeemTrueXAd.grantedBits), [3, 8];
                                    case 7:
                                        return o = s.sent(), u.j.warn("Error while redeeming bits for truex ad", o), this.props.onError && this.props.onError(i.Unknown), [3, 8];
                                    case 8:
                                        return [3, 10];
                                    case 9:
                                        return this.props.onError && (t.type === f.a.LimitReached ? this.props.onError(i.LimitReached) : t.type === f.a.Adblock ? this.props.onError(i.Adblock) : t.type === f.a.OnError ? this.props.onError(i.Unknown) : this.hasAwarded || this.props.onError(i.ExitEarly)), this.props.closeModal(), [3, 10];
                                    case 10:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return l.__extends(t, e), t.prototype.componentWillMount = function() {
                    window.addEventListener("message", this.messageHandler)
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("message", this.messageHandler)
                }, t.prototype.render = function() {
                    return c.createElement(v._35, {
                        background: v.n.Base
                    }, c.createElement("div", {
                        className: "t-watch-ads-modal",
                        style: this.state.customDimensions
                    }, c.createElement(p.a, null), c.createElement("iframe", {
                        src: "/products/bits/ad"
                    })))
                }, t = l.__decorate([Object(m.a)(b, {
                    name: "redeemTrueXAd"
                })], t)
            }(c.Component));
        var y, _ = Object(r.b)(null, function(e) {
                return Object(d.b)({
                    closeModal: a.c
                }, e)
            })(k),
            S = n("HW6M"),
            E = n("3zLD"),
            C = n("jF7o"),
            N = n("zCIC");

        function T(e) {
            return l.__awaiter(this, void 0, void 0, function() {
                var t, n, i, r, a;
                return l.__generator(this, function(o) {
                    switch (o.label) {
                        case 0:
                            if (t = u.b.get("bits_truex_partner_hash", ""), !(n = u.b.get("bits_truex_api_url", "")) || !t) return u.j.warn("Truex API info missing from dynamic settings"), [2, y.Error];
                            o.label = 1;
                        case 1:
                            return o.trys.push([1, 5, , 6]), [4, fetch(n + "?placement.key=" + t + "&user.uid=" + e + "&max_activities=1")];
                        case 2:
                            return (i = o.sent()).ok ? [4, i.json()] : [3, 4];
                        case 3:
                            if ((r = o.sent()) && Array.isArray(r) && r.length) return [2, y.Available];
                            o.label = 4;
                        case 4:
                            return [2, y.Unavailable];
                        case 5:
                            return a = o.sent(), u.j.warn("Failed checking ad availability from TrueX, probably due to AdBlock", a), [2, y.AdBlocked];
                        case 6:
                            return [2]
                    }
                })
            })
        }! function(e) {
            e[e.Error = 0] = "Error", e[e.AdBlocked = 1] = "AdBlocked", e[e.Unavailable = 2] = "Unavailable", e[e.Available = 3] = "Available"
        }(y || (y = {}));
        var w, O = function(e) {
                var t = null;
                return e.disableWatchAd && (t = Object(u.d)("Try again later", "Bits--WatchAdOffer")), c.createElement(v._35, {
                    className: "bits-buy-card__offer-row",
                    display: v.R.Flex,
                    flexShrink: 0,
                    borderBottom: !0,
                    justifyContent: v._7.Between,
                    flexWrap: v.U.NoWrap,
                    padding: {
                        x: 2,
                        y: 1
                    }
                }, c.createElement(v._8, {
                    padding: {
                        right: 4
                    }
                }, c.createElement("strong", null, Object(u.d)("Get {minBitsCount} or more Bits by watching short ads", {
                    minBitsCount: e.minPayout
                }, "Bits--WatchAdOffer"))), c.createElement(v._8, {
                    flexShrink: 0,
                    display: v.R.Flex,
                    flexDirection: v.T.Column,
                    alignItems: v.c.End
                }, c.createElement(v.v, {
                    type: v.B.Hollow,
                    "data-a-target": "bits-watch-ad",
                    onClick: e.onWatchAdClick,
                    disabled: e.disableWatchAd
                }, Object(u.d)("Watch Ad", "Bits--WatchAdOffer")), t && c.createElement(v._8, {
                    className: "bits-buy-card__sub-text",
                    alignSelf: v.d.Stretch,
                    textAlign: v._45.Center,
                    margin: {
                        top: .5
                    }
                }, t)))
            },
            R = /version\/([\w\.]+).+?(mobile\s?safari|safari)/i,
            D = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        enableWatchAd: !0
                    }, t
                }
                return l.__extends(t, e), t.prototype.componentWillMount = function() {
                    return l.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return l.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, T(this.props.truexUserID)];
                                case 1:
                                    return e = t.sent(), Object(g.e)({
                                        channel: this.props.channelLogin,
                                        channelID: this.props.channelID,
                                        available: e === y.Available
                                    }), e !== y.Available && e !== y.AdBlocked && this.setState({
                                        enableWatchAd: !1
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return R.test(navigator.userAgent) ? null : c.createElement(O, l.__assign({}, this.props, {
                        disableWatchAd: !this.state.enableWatchAd
                    }))
                }, t
            }(c.Component),
            I = n("jxGs"),
            x = n("3iBR"),
            F = n("iydZ"),
            P = n("ZJYd"),
            U = n("CFVp"),
            j = n("qe65"),
            A = (n("aysN"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleBuyClick = function(e) {
                        var n = t.props.channelID || "",
                            i = Object(P.b)({
                                trackBitsCardInteraction: t.props.trackBitsCardInteraction,
                                channelID: n,
                                purchaseUrl: e.currentTarget.dataset.purchaseUrl,
                                bitsAmount: e.currentTarget.dataset.bitsAmount,
                                closeAllBits: t.props.closeAllBits,
                                location: t.props.location
                            });
                        i && (t.props.onBuyPopupClose(i), t.props.onClose())
                    }, t
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    if (this.props.offer.type === I.a) {
                        if (!this.props.channelLogin) return null;
                        var e = this.props.currentUserSHA || "";
                        return c.createElement(D, {
                            key: "wateb",
                            minPayout: this.props.offer.bits,
                            onWatchAdClick: this.props.handleWatchAdClick,
                            truexUserID: e,
                            channelID: this.props.channelID || "",
                            channelLogin: this.props.channelLogin
                        })
                    }
                    var t = null;
                    Object(P.c)(this.props.offer) ? t = c.createElement(v._8, {
                        className: "bits-buy-card-offer-row__bonus-text bits-buy-card-offer-row__bonus-text-headline",
                        "data-test-selector": "first-time-promo-form"
                    }, c.createElement(v.Q, {
                        type: v._49.Strong,
                        fontSize: v.V.Size6
                    }, Object(u.d)("Special Offer: 1st Time Buyers", "Bits--BuyCard"))) : Object(P.d)(this.props.offer) && null !== this.props.offer.promotion && this.props.offer.promotion.id === I.c ? t = c.createElement(v._8, {
                        className: "bits-buy-card-offer-row__bonus-text bits-buy-card-offer-row__bonus-text-headline",
                        "data-test-selector": "black-friday-promo-form"
                    }, c.createElement(v.Q, {
                        type: v._49.Strong,
                        fontSize: v.V.Size6
                    }, Object(u.d)("Flash Sale: Now thru Nov. 27!", "Bits--BuyCard"))) : Object(P.d)(this.props.offer) && null !== this.props.offer.promotion && this.props.offer.promotion.id === I.d && (t = c.createElement(v._8, {
                        className: "bits-buy-card-offer-row__bonus-text bits-buy-card-offer-row__bonus-text-headline",
                        "data-test-selector": "prime-promo-promo-form"
                    }, c.createElement(v.Q, {
                        type: v._49.Strong,
                        fontSize: v.V.Size6
                    }, Object(u.d)("Twitch Prime Bits Discount", "Bits--BuyCard"))));
                    var n = null;
                    this.props.offer.discount && (n = c.createElement("div", {
                        className: "bits-buy-card-offer-row__sub-text",
                        "data-test-selector": "discount-subtext-form"
                    }, Object(u.d)("{percentOff,number,percent} discount", {
                        percentOff: this.props.offer.discount
                    }, "Bits--BuyCard")));
                    var i = null;
                    (Object(P.c)(this.props.offer) || Object(P.e)(this.props.offer)) && (i = c.createElement("div", {
                        className: "bits-buy-card-offer-row__sub-text",
                        "data-test-selector": "one-per-account-form"
                    }, Object(u.d)("one per account", "Bits--BuyCard")));
                    var r = this.props.isLastRow ? v._35 : v._8;
                    return c.createElement(r, {
                        className: "bits-buy-card-offer-row",
                        flexShrink: 0,
                        display: v.R.Flex,
                        justifyContent: v._7.Center,
                        borderBottom: this.props.isLastRow,
                        flexDirection: v.T.Column,
                        padding: {
                            x: 2,
                            y: 1
                        }
                    }, t, c.createElement(v._8, {
                        display: v.R.Flex,
                        justifyContent: v._7.Between,
                        alignItems: v.c.Center
                    }, c.createElement(v._8, {
                        flexGrow: 1
                    }, c.createElement(v.Q, {
                        type: v._49.H5,
                        color: v.K.Base,
                        bold: !0
                    }, this.props.offer.bits, " Bits"), this.getAvailableTiers(this.props.offer.bits)), c.createElement(v._8, {
                        flexShrink: 0,
                        display: v.R.Flex,
                        flexDirection: v.T.Column,
                        alignItems: v.c.End
                    }, c.createElement(v.v, {
                        onClick: this.handleBuyClick,
                        "data-purchase-url": this.props.offer.url,
                        "data-bits-amount": this.props.offer.bits,
                        "data-a-target": "bits-purchase-button-" + this.props.offer.bits
                    }, this.props.offer.price), (n || i) && c.createElement(v._8, {
                        alignSelf: v.d.Stretch,
                        textAlign: v._45.Right,
                        margin: {
                            top: .5
                        }
                    }, n, i))))
                }, t.prototype.getAvailableTiers = function(e) {
                    var t = this.props.bitsConfig && this.props.bitsConfig.indexedActions[x.g];
                    t || (t = Object(U.b)());
                    var n = t.orderedTiers.filter(function(t) {
                        return t.bits <= e
                    }).reverse();
                    return c.createElement(v._8, {
                        padding: {
                            top: .5
                        },
                        className: "bits-buy-card-offer-row__tier-bits-images"
                    }, n.map(function(e) {
                        return c.createElement(j.a, {
                            key: e.bits,
                            sources: Object(F.b)(e, 2, !1)
                        })
                    }))
                }, t
            }(c.Component)),
            L = (n("pzcm"), function(e) {
                var t = [],
                    n = [],
                    i = null;
                return e.offers.forEach(function(r, a) {
                    var o = c.createElement(A, {
                            key: r.id,
                            offer: r,
                            isLastRow: a + 1 < e.offers.length,
                            bitsConfig: e.bitsConfig,
                            channelID: e.channelID,
                            channelLogin: e.channelLogin,
                            currentUserSHA: e.currentUserSHA,
                            location: e.location,
                            onClose: e.onClose,
                            onBuyPopupClose: e.onBuyPopupClose,
                            handleWatchAdClick: e.handleWatchAdClick,
                            closeAllBits: e.closeAllBits,
                            trackBitsCardInteraction: e.trackBitsCardInteraction
                        }),
                        s = Object(P.d)(r),
                        l = Object(P.c)(r),
                        d = r.type === I.a;
                    l && !e.hidePromos ? t.push(o) : s && !l ? t.push(o) : d && !e.hideWateb ? i = o : d || s || n.push(o)
                }), e.fullsize ? c.createElement(v._8, {
                    className: "bits-buy-card-offers__full-size",
                    flexGrow: 1,
                    flexWrap: v.U.NoWrap,
                    display: v.R.Flex,
                    flexDirection: v.T.Column
                }, i, t, n) : c.createElement(N.b, {
                    className: "bits-buy-card-offers__scroll-view"
                }, c.createElement(v._8, {
                    flexGrow: 1,
                    flexWrap: v.U.NoWrap,
                    display: v.R.Flex,
                    flexDirection: v.T.Column
                }, i, t, n))
            }),
            M = function(e) {
                var t = null;
                e.pricesIncludeVAT && (t = c.createElement(v.Q, {
                    "data-test-selector": "prices-include-vat-selector",
                    italic: !0,
                    type: v._49.P,
                    color: v.K.Alt
                }, Object(u.d)("Prices include VAT", "Bits--BuyCard")));
                var n = null;
                e.minBitsToCheer && e.minBitsToCheer > 1 && (n = c.createElement(v.Q, {
                    "data-test-selector": "min-bits-to-cheer-selector",
                    color: v.K.Alt
                }, Object(u.d)("{displayName} requires {minBits} Bits to Cheer in this channel.", {
                    displayName: e.displayName,
                    minBits: e.minBitsToCheer
                }, "Bits--BuyCard")));
                var i = null;
                return void 0 !== e.bitsBalance && null !== e.bitsBalance && (i = c.createElement(v.Q, {
                    "data-test-selector": "bits-balance-header-selector",
                    color: v.K.Alt
                }, Object(u.d)("You have {totalBits} Bits", {
                    totalBits: c.createElement("strong", {
                        "data-a-target": "buy-card-bits-count"
                    }, e.bitsBalance)
                }, "Bits--BuyCard"))), c.createElement(v._35, {
                    className: "bits-buy-card-header",
                    padding: {
                        x: 1,
                        bottom: 1
                    },
                    borderBottom: !0,
                    flexShrink: 0
                }, c.createElement(v._8, {
                    margin: {
                        bottom: 1
                    }
                }, c.createElement(v.Q, {
                    type: v._49.H4,
                    color: v.K.Alt
                }, Object(u.d)("Purchase Bits", "Bits--BuyCard")), t), i, n)
            },
            B = n("nrdj"),
            W = function(e) {
                return c.createElement(v._8, {
                    display: v.R.Flex,
                    flexGrow: 1,
                    flexDirection: v.T.Column,
                    alignItems: v.c.Center,
                    fullWidth: !0,
                    flexWrap: v.U.NoWrap,
                    padding: {
                        y: 1
                    }
                }, c.createElement(B.a, {
                    prefix: "cheer",
                    amount: e.amount,
                    bitsConfig: e.bitsConfig,
                    showAmount: !0,
                    showImage: !0
                }), c.createElement(v._8, {
                    display: v.R.Flex,
                    padding: {
                        top: 1
                    },
                    flexGrow: 1,
                    flexDirection: v.T.Column,
                    alignItems: v.c.Center,
                    flexWrap: v.U.NoWrap
                }, c.createElement(v.Q, {
                    type: v._49.H4,
                    bold: !0
                }, Object(u.d)("You got {bitsAmount,number} Bits!", {
                    bitsAmount: e.amount
                }, "Bits--WatchAdAward")), c.createElement(v._2, {
                    padding: {
                        top: 1
                    }
                }, c.createElement(v.Q, {
                    color: v.K.Alt2
                }, Object(u.d)("{bitsAmount,number} Bits were added to your Bit inventory.", {
                    bitsAmount: e.amount
                }, "Bits--WatchAdAward"), c.createElement("br", null), Object(u.d)("You can use these Bits to Cheer!", "Bits--WatchAdAward")))), c.createElement(v._8, {
                    display: v.R.Flex,
                    padding: {
                        x: 1,
                        top: 3
                    },
                    alignSelf: v.d.Stretch,
                    justifyContent: v._7.Between
                }, c.createElement(v.v, {
                    onClick: e.onStartCheering
                }, Object(u.d)("Start Cheering", "Bits--WatchAdAward")), c.createElement(v.v, {
                    type: v.B.Hollow,
                    onClick: e.onWatchAnother,
                    disabled: !e.hasAdAvailable
                }, Object(u.d)("Watch Another", "Bits--WatchAdAward"))))
            },
            V = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasAdAvailable: !0
                    }, t
                }
                return l.__extends(t, e), t.prototype.componentWillMount = function() {
                    return l.__awaiter(this, void 0, void 0, function() {
                        return l.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return [4, T(this.props.truexUserID)];
                                case 1:
                                    return e.sent() !== y.Available && this.setState({
                                        hasAdAvailable: !1
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return c.createElement(W, l.__assign({}, this.props, {
                        hasAdAvailable: this.state.hasAdAvailable
                    }))
                }, t
            }(c.Component),
            H = (n("q8Cw"), function(e) {
                var t = Object(u.d)("Something's wrong!", "Bits--WatchAdError"),
                    n = Object(u.d)("Something went wrong. Wait a while and try again.", "Bits--WatchAdError"),
                    r = "adserrorgeneric";
                switch (e.type) {
                    case i.Adblock:
                        r = "adserroradblock", n = Object(u.d)("We can't load this Ad, probably because Ad Blocking software is running. To watch an ad and get Bits, please disable all Ad Blocking software.", "Bits--WatchAdError");
                        break;
                    case i.LimitReached:
                        r = "adserrorlimit", t = Object(u.d)("Ad Limit Reached", "Bits--WatchAdError"), n = Object(u.d)("That's all the Ads we have for now. Try again tomorrow!", "Bits--WatchAdError");
                        break;
                    case i.ExitEarly:
                        n = Object(u.d)("To get Bits, you must view and interact with the Ad for the minimum amount of time.", "Bits--WatchAdError")
                }
                var a = c.createElement(v._8, {
                    className: "watch-ad-error__footer",
                    display: v.R.Flex,
                    padding: {
                        top: 2
                    },
                    alignSelf: v.d.Stretch,
                    justifyContent: v._7.Center
                }, c.createElement(v.v, {
                    onClick: e.onTryAgain
                }, Object(u.d)("Try Again", "Bits--WatchAdError")));
                return e.type === i.LimitReached && (a = c.createElement(v._8, {
                    className: "watch-ad-error__footer",
                    display: v.R.Flex,
                    padding: {
                        top: 2
                    },
                    alignSelf: v.d.Stretch,
                    justifyContent: v._7.Between
                }, c.createElement(v.v, {
                    onClick: e.onClose
                }, Object(u.d)("Got It", "Bits--WatchAdError")), c.createElement(v.v, {
                    onClick: e.onTryAgain,
                    type: v.B.Hollow
                }, Object(u.d)("Buy Bits", "Bits--WatchAdError")))), c.createElement(v._8, {
                    padding: {
                        x: 1
                    },
                    display: v.R.Flex,
                    flexGrow: 1,
                    flexDirection: v.T.Column,
                    alignItems: v.c.Center,
                    fullWidth: !0,
                    flexWrap: v.U.NoWrap
                }, c.createElement(v._8, {
                    padding: {
                        y: 2
                    }
                }, c.createElement("img", {
                    className: "watch-ad-error__error-image",
                    src: x.b + "/light/static/1/" + r + ".png"
                })), c.createElement(v._8, {
                    padding: {
                        bottom: 1
                    }
                }, c.createElement(v.Q, {
                    type: v._49.H4,
                    bold: !0
                }, t)), c.createElement(v.Q, {
                    color: v.K.Alt2
                }, n), a)
            }),
            G = n("CSlQ"),
            z = n("aqNN"),
            q = (n("6Rwu"), "storage.wateb.agreedToWatebTerms.v1"),
            Q = "bits-show-wateb-terms",
            K = "bits-agree-wateb-terms";
        ! function(e) {
            e[e.Inactive = 0] = "Inactive", e[e.Error = 1] = "Error", e[e.Awarded = 2] = "Awarded"
        }(w || (w = {}));
        var $ = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        wateb: w.Inactive,
                        watebError: null,
                        bitsAwarded: 0,
                        showWatebTerms: !1,
                        agreedToWatebTerms: u.l.get(q, !1)
                    }, t.onBuyPopupClose = function(e) {
                        Object(C.a)(e, function() {
                            t.props.data && t.props.data.refetch()
                        })
                    }, t.onAdBitsAwarded = function(e) {
                        t.props.data && !t.props.data.loading && t.props.data.refetch(), t.setState({
                            wateb: w.Awarded,
                            bitsAwarded: e
                        })
                    }, t.renderWatebTerms = function(e, n) {
                        return c.createElement(v._35, l.__assign({
                            className: S(e),
                            display: v.R.Flex,
                            flexDirection: v.T.Column,
                            justifyContent: v._7.Center,
                            padding: {
                                bottom: 2,
                                x: 2
                            },
                            textAlign: v._45.Left,
                            "data-a-target": Q
                        }, n), c.createElement(v._35, {
                            margin: {
                                top: 2,
                                bottom: 2,
                                left: 0
                            },
                            alignItems: v.c.Baseline
                        }, c.createElement("div", {
                            key: "Bits--back-edit",
                            style: {
                                cursor: "pointer"
                            },
                            onClick: t.onCloseWatebTerms
                        }, c.createElement(v.Q, {
                            color: v.K.Link,
                            type: v._49.Span
                        }, c.createElement(v._24, {
                            asset: v._25.ChatSettingsBack,
                            height: 10,
                            width: 10
                        }), Object(u.d)("Back", "Bits--Watch-Ad-Terms")))), c.createElement(v._8, {
                            padding: {
                                bottom: 2
                            }
                        }, c.createElement(v.Q, {
                            type: v._49.Span
                        }, Object(u.d)("Before continuing to watch ads to earn Bits, we remind you that the <x:link>Bits Acceptable Use Policy</x:link> applies to your participation with this feature and any Bits you may obtain. As a reminder, you may not:", {
                            "x:link": function(e) {
                                return c.createElement("span", {
                                    key: "helplink"
                                }, c.createElement("a", {
                                    href: "https://www.twitch.tv/p/legal/bits-acceptable-use/",
                                    target: "_blank",
                                    rel: "noopener noreferrer"
                                }, e))
                            }
                        }, "Bits--Watch-Ad-Terms")), c.createElement(v._8, {
                            margin: {
                                y: 1
                            }
                        }, c.createElement("li", null, Object(u.d)("Obtain Bits to Cheer on your own channel via this feature", "Bits--Watch-Ad-Terms")), c.createElement("li", null, Object(u.d)("Collect Bits via this feature through the use of multiple accounts, robots, or other automated means", "Bits--Watch-Ad-Terms")))), c.createElement(v._8, {
                            display: v.R.Flex,
                            justifyContent: v._7.Center
                        }, c.createElement(v.v, {
                            size: v.z.Small,
                            onClick: t.onAgreeToWatebTerms,
                            "data-a-target": K
                        }, Object(u.d)("Continue", "Bits--Watch-Ad-Terms"))))
                    }, t.onAgreeToWatebTerms = function() {
                        u.l.set(q, !0), t.setState({
                            agreedToWatebTerms: !0,
                            showWatebTerms: !1
                        }), t.showWatchAdModal()
                    }, t.onCloseWatebTerms = function() {
                        t.setState({
                            showWatebTerms: !1
                        })
                    }, t.handleWatchAdClick = function() {
                        return l.__awaiter(t, void 0, void 0, function() {
                            return l.__generator(this, function(e) {
                                return this.state.agreedToWatebTerms ? (this.showWatchAdModal(), [2]) : (this.setState({
                                    showWatebTerms: !0
                                }), [2])
                            })
                        })
                    }, t.receiveAdErrorState = function(e) {
                        t.setState({
                            wateb: w.Error,
                            watebError: e
                        })
                    }, t.resetAdErrorState = function() {
                        t.state.wateb === w.Error && (t.setState({
                            wateb: w.Inactive
                        }), t.props.data && t.props.data.refetch())
                    }, t
                }
                return l.__extends(t, e), t.prototype.shouldComponentUpdate = function(e) {
                    return !e.adModalOpen
                }, t.prototype.render = function() {
                    var e = {
                            border: !0,
                            background: v.n.Base,
                            fullWidth: !0,
                            elevation: 3
                        },
                        t = S({
                            "bits-buy-card": !0,
                            "bits-buy-card__chat-tooltip": this.props.location === g.b.ChatTooltip
                        }),
                        n = null;
                    if (this.props.location === g.b.ChatTooltip && (n = c.createElement("button", {
                            className: "bits-buy-card__close",
                            onClick: this.props.onClose,
                            "data-a-target": "bits-buy-card-close-button"
                        }, c.createElement(v._24, {
                            asset: v._25.Close,
                            height: 11,
                            width: 11
                        }))), !this.props.data || this.props.data.loading) return c.createElement(v._35, l.__assign({
                        className: t,
                        "data-a-target": "bits-buy-card-loading",
                        display: v.R.Flex,
                        flexDirection: v.T.Column,
                        alignItems: v.c.Center,
                        justifyContent: v._7.Center,
                        textAlign: v._45.Center
                    }, e), c.createElement(v._10, {
                        delay: 0
                    }), c.createElement(v._8, {
                        padding: {
                            top: 2
                        }
                    }, c.createElement(v.Q, {
                        italic: !0
                    }, Object(u.d)("Fetching bits", "Bits--BuyCard"))));
                    if (this.props.data.error) return c.createElement(v._8, l.__assign({
                        className: S(t, "bits-buy-card--shorter"),
                        display: v.R.Flex,
                        flexDirection: v.T.Column,
                        alignItems: v.c.Center,
                        justifyContent: v._7.Center,
                        padding: 2,
                        textAlign: v._45.Center,
                        "data-a-target": "bits-buy-card-error"
                    }, e), n, c.createElement(v.Q, {
                        italic: !0
                    }, Object(u.d)("Bits prices are unavailable right now. Check back again later.", "Bits--BuyCard")));
                    if (this.state.showWatebTerms) return this.renderWatebTerms(t, e);
                    var i = this.renderWatebCard();
                    if (i) return c.createElement(v._35, l.__assign({
                        className: S(t, "bits-buy-card--shorter"),
                        display: v.R.Flex,
                        flexDirection: v.T.Column,
                        alignItems: v.c.Center,
                        justifyContent: v._7.Center,
                        textAlign: v._45.Center,
                        padding: 1
                    }, e), n, i);
                    var r = [];
                    this.props.data.currentUser ? r = this.props.data.currentUser.bitsOffers : this.props.data.bitsOffers && (r = this.props.data.bitsOffers);
                    var a = r.filter(function(e) {
                            return e.type === I.b
                        }).some(function(e) {
                            return e.includesVAT
                        }),
                        o = this.props.data.user ? this.props.data.user.id : "",
                        s = c.createElement(L, {
                            offers: r,
                            fullsize: this.props.fullsize,
                            hidePromos: this.props.hidePromos,
                            hideWateb: this.props.hideWateb,
                            bitsConfig: this.props.bitsConfig,
                            channelID: o,
                            channelLogin: this.props.channelLogin,
                            closeAllBits: this.props.closeAllBits,
                            currentUserSHA: this.props.data && this.props.data.currentUser && this.props.data.currentUser.idSHA1,
                            handleWatchAdClick: this.handleWatchAdClick,
                            location: this.props.location,
                            onBuyPopupClose: this.onBuyPopupClose,
                            onClose: this.props.onClose,
                            trackBitsCardInteraction: this.props.trackBitsCardInteraction
                        }),
                        d = null;
                    return this.props.location === g.b.ChatTooltip && (d = c.createElement(M, {
                        bitsBalance: this.props.data && this.props.data.currentUser && this.props.data.currentUser.bitsBalance,
                        displayName: this.props.data && this.props.data.user && this.props.data.user.displayName || this.props.channelLogin || "",
                        minBitsToCheer: this.props.data && this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.settings.cheerMinimumBits,
                        pricesIncludeVAT: a
                    })), c.createElement(v._35, l.__assign({
                        className: t,
                        padding: {
                            top: 1
                        },
                        display: v.R.Flex,
                        flexDirection: v.T.Column,
                        "data-a-target": "bits-buy-card"
                    }, e), n, d, s)
                }, t.prototype.renderWatebCard = function() {
                    if (this.props.data && this.props.data.currentUser) switch (this.state.wateb) {
                        case w.Awarded:
                            return c.createElement(V, {
                                bitsConfig: this.props.bitsConfig,
                                amount: this.state.bitsAwarded,
                                onStartCheering: this.props.onClose,
                                onWatchAnother: this.handleWatchAdClick,
                                truexUserID: this.props.data.currentUser.idSHA1
                            });
                        case w.Error:
                            return c.createElement(H, {
                                type: this.state.watebError || i.Unknown,
                                onClose: this.props.onClose,
                                onTryAgain: this.resetAdErrorState
                            });
                        default:
                            return !1
                    }
                }, t.prototype.showWatchAdModal = function() {
                    this.props.data && this.props.data.currentUser && this.props.data.user && this.props.showWatchAdModal({
                        tuid: this.props.data.currentUser.idSHA1,
                        onBitsAwarded: this.onAdBitsAwarded,
                        onError: this.receiveAdErrorState,
                        requestRef: g.c.ShowAdButton,
                        channelID: this.props.data.user.id
                    })
                }, t = l.__decorate([Object(m.a)(z, {
                    name: "data",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin,
                                withChannel: !!e.channelLogin,
                                isLoggedIn: e.isLoggedIn
                            }
                        }
                    }
                })], t)
            }(c.Component),
            Y = Object(E.compose)(Object(G.d)("BitsBuyCard", {
                autoReportInteractive: !0
            }))($);

        function Z(e) {
            return {
                adModalOpen: Object(o.b)(e, _),
                isLoggedIn: Object(s.d)(e)
            }
        }

        function X(e) {
            return {
                showWatchAdModal: function(t) {
                    return e(Object(a.d)(_, t))
                }
            }
        }
        var J = Object(r.b)(Z, X)(Y);
        n.d(t, !1, function() {
            return Z
        }), n.d(t, !1, function() {
            return X
        }), n.d(t, "a", function() {
            return J
        })
    },
    WfBs: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "OnsiteNotifications_ReadNotifications"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReadNotificationsInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "readNotifications"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "notifications"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isRead"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 148
            }
        };
        n.loc.source = {
            body: "mutation OnsiteNotifications_ReadNotifications($input: ReadNotificationsInput!) {\nreadNotifications(input: $input) {\nnotifications {\nid\nisRead\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    WnwY: function(e, t) {},
    XF1M: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "OnsiteNotifications_DeleteNotification"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DeleteNotificationInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "deleteNotification"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "notification"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 143
            }
        };
        n.loc.source = {
            body: "mutation OnsiteNotifications_DeleteNotification($input: DeleteNotificationInput!) {\ndeleteNotification(input: $input) {\nnotification {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Xo53: function(e, t) {},
    Xorj: function(e, t) {},
    "YEG/": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("6sO2"),
            o = n("yDzg"),
            s = n("CSlQ"),
            l = n("CwIZ"),
            c = n("Odds"),
            d = "subscribe-button__subscribe-tier-button",
            u = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasPopupExperiment: !1
                    }, t.handleClick = function() {
                        t.openCheckout(), t.props.reportSubAction({
                            action: l.a.ClickCheckout,
                            checkoutButtonTier: t.props.tierPrice
                        })
                    }, t.setPopupExperiment = function() {
                        var e = a.o.experiments.getAssignment("TWILIGHT_SUB_CHECKOUT_POPUP");
                        t.setState({
                            hasPopupExperiment: "yes" === e
                        })
                    }, t.openCheckout = function() {
                        t.state.hasPopupExperiment && window.open(Object(o.a)(t.props.url, {
                            ref: "subscribe-tier-button"
                        }), "Twitch", "width=1000, height=1100, menubar, toolbar, location, personalbar, scrollbars")
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    !1 !== this.props.targetBlank && this.setPopupExperiment()
                }, t.prototype.render = function() {
                    if (this.props.isSubbedToTier) {
                        var e = Object(a.d)("Subscribed", "SubTierButton");
                        return r.createElement(c.v, {
                            ariaLabel: e,
                            "data-test-selector": d,
                            disabled: !0,
                            icon: c._25.Star
                        }, e)
                    }
                    var t = this.props.isEsportChannel ? Object(a.d)("Get the All-Access Pass", "SubTierButton") : Object(a.d)("Subscribe Now", "SubTierButton");
                    return r.createElement(c.v, i.__assign({
                        ariaLabel: t + " " + this.props.tierPrice,
                        "data-test-selector": d,
                        linkTo: this.state.hasPopupExperiment ? void 0 : this.props.url,
                        onClick: this.handleClick,
                        purchase: this.props.tierPrice
                    }, Object(c._63)(this.props), {
                        targetBlank: void 0 === this.props.targetBlank || this.props.targetBlank
                    }), t)
                }, t = i.__decorate([Object(s.d)("SubTierButton", {
                    autoReportInteractive: !0
                })], t)
            }(r.Component);
        n.d(t, !1, function() {
            return d
        }), n.d(t, "a", function() {
            return u
        })
    },
    YH6m: function(e, t, n) {
        "use strict";
        var i, r = n("TToO"),
            a = n("GiK3"),
            o = n("6sO2"),
            s = n("vBst"),
            l = n("Tzcg"),
            c = n("CSlQ"),
            d = n("daN3"),
            u = n("37Pp"),
            p = n("YEG/"),
            m = n("FDYX"),
            h = n("CwIZ"),
            f = n("odx1"),
            g = n("Odds"),
            v = (n("6O9f"), "gift-subscription-button"),
            b = "subscribe-button";

        function k(e) {
            return "subscribe-button-modal-tab-" + e
        }! function(e) {
            e[e.Prime = 0] = "Prime", e[e.Tier1 = 1] = "Tier1", e[e.Tier2 = 2] = "Tier2", e[e.Tier3 = 3] = "Tier3"
        }(i || (i = {}));
        var y = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.toggleActiveTab = function(e) {
                    if (e.currentTarget.parentElement) switch (e.currentTarget.parentElement.getAttribute("data-tier")) {
                        case "subscribe-button-modal-tab-" + i.Prime:
                            n.setState({
                                activeTab: i.Prime,
                                currentPurchasePrice: n.getPrice(n.props.subscriptionProducts[0])
                            }), n.props.onSelectTierTab(i.Prime);
                            break;
                        case "subscribe-button-modal-tab-" + i.Tier1:
                            n.setState({
                                activeTab: i.Tier1,
                                currentPurchasePrice: n.getPrice(n.props.subscriptionProducts[0])
                            }), n.props.onSelectTierTab(i.Tier1);
                            break;
                        case "subscribe-button-modal-tab-" + i.Tier2:
                            n.setState({
                                activeTab: i.Tier2,
                                currentPurchasePrice: n.getPrice(n.props.subscriptionProducts[1])
                            }), n.props.onSelectTierTab(i.Tier2);
                            break;
                        case "subscribe-button-modal-tab-" + i.Tier3:
                            n.setState({
                                activeTab: i.Tier3,
                                currentPurchasePrice: n.getPrice(n.props.subscriptionProducts[2])
                            }), n.props.onSelectTierTab(i.Tier3);
                            break;
                        default:
                            n.setState({
                                activeTab: i.Prime,
                                currentPurchasePrice: n.getPrice(n.props.subscriptionProducts[0])
                            }), n.props.onSelectTierTab(i.Prime)
                    }
                }, n.getTabTitle = function() {
                    switch (n.state.activeTab) {
                        case i.Prime:
                            return Object(o.d)("Free Channel Sub with Twitch Prime", "SubTierTabs");
                        case i.Tier1:
                            return n.props.subscriptionProducts[0].displayName;
                        case i.Tier2:
                            return n.props.subscriptionProducts[1].displayName;
                        case i.Tier3:
                            return n.props.subscriptionProducts[2].displayName;
                        default:
                            return n.props.subscriptionProducts[0].displayName
                    }
                }, n.getTierSubscribeButton = function() {
                    var e = n.props.subscriptionProducts[n.state.activeTab - 1];
                    if (n.props.isGift) {
                        var t = Object(o.d)("Gift A Subscription", "SubTierTabs");
                        return n.props.giftRecipient ? a.createElement(d.a, {
                            subProductId: e.id,
                            giftRecipient: n.props.giftRecipient,
                            checkoutURL: e.url,
                            buttonMessage: t,
                            purchase: n.state.currentPurchasePrice,
                            onClick: n.reportGiftCheckoutAction
                        }) : a.createElement(g.v, {
                            ariaLabel: t + " " + n.state.currentPurchasePrice,
                            "data-test-selector": v,
                            onClick: n.onGiftSelect,
                            purchase: n.state.currentPurchasePrice
                        }, t)
                    }
                    return n.state.subbedTier === n.state.activeTab && n.state.activeTab === i.Prime ? a.createElement(f.a, {
                        authToken: n.props.authToken,
                        "data-a-target": "subscribe-with-prime-button",
                        isSubscribed: n.props.isSubscribed,
                        isSubscribedWithPrime: n.props.subbedTier === s.a.Prime,
                        onSubscribedWithPrime: n.onSubscribedWithPrime,
                        reportSubMenuAction: n.props.reportSubMenuAction,
                        subLogin: n.props.subLogin,
                        userHasPrime: n.props.userHasPrime,
                        canPrimeSubscribe: n.props.canPrimeSubscribe,
                        channelLogin: n.props.subLogin
                    }) : a.createElement(p.a, {
                        isSubbedToTier: n.state.subbedTier === n.state.activeTab,
                        tierPrice: n.state.currentPurchasePrice,
                        reportSubAction: n.props.reportSubMenuAction,
                        url: e.url,
                        "data-a-target": "subscribe-now-button",
                        "data-test-selector": b
                    })
                }, n.onSubscribedWithPrime = function() {
                    n.props.onSubscribedWithPrime && n.props.onSubscribedWithPrime()
                }, n.reportGiftCheckoutAction = function() {
                    n.props.reportSubMenuAction({
                        action: h.a.BuyGiftSub,
                        checkoutButtonTier: n.state.currentPurchasePrice,
                        giftRecipient: n.props.giftRecipient ? n.props.giftRecipient : null
                    })
                }, n.onGiftSelect = function() {
                    n.props.onGiftSelect && n.props.onGiftSelect()
                }, n.getTierExperimentAssignment = function() {
                    var e = o.o.experiments.getAssignment("TWILIGHT_MOBILE_SUBS_TIER_NAMES");
                    n.setState({
                        tierNameEnabled: "name" === e
                    })
                }, n.mapSubbedTierToTabs = function(e) {
                    e.subbedTier === s.a.Prime ? (n.setState({
                        activeTab: i.Prime,
                        subbedTier: i.Prime
                    }), e.onSelectTierTab(i.Prime)) : e.subbedTier === s.a.Tier1 ? (n.setState({
                        activeTab: i.Tier1,
                        subbedTier: i.Tier1
                    }), e.onSelectTierTab(i.Tier1)) : e.subbedTier === s.a.Tier2 ? (n.setState({
                        activeTab: i.Tier2,
                        subbedTier: i.Tier2
                    }), e.onSelectTierTab(i.Tier2)) : e.subbedTier === s.a.Tier3 ? (n.setState({
                        activeTab: i.Tier3,
                        subbedTier: i.Tier3
                    }), e.onSelectTierTab(i.Tier3)) : e.isGift ? e.onSelectTierTab(n.state.activeTab) : e.onSelectTierTab(i.Prime)
                }, n.getExtraEmotes = function(e) {
                    return (e === i.Tier2 ? Object(l.b)(n.props.subscriptionProducts[1].emotes) : Object(l.b)(n.props.subscriptionProducts[2].emotes.concat(n.props.subscriptionProducts[1].emotes))).map(function(e) {
                        return a.createElement(g._8, {
                            display: g.R.InlineFlex,
                            margin: {
                                right: .5
                            },
                            key: e.id
                        }, a.createElement("img", {
                            srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/" + e.srcSet
                        }))
                    })
                }, n.state = n.getInitialState(), n
            }
            return r.__extends(t, e), t.prototype.componentWillMount = function() {
                this.mapSubbedTierToTabs(this.props), this.getTierExperimentAssignment()
            }, t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                var e = null;
                this.state.subbedTier && (e = a.createElement(g._8, {
                    display: g.R.InlineFlex,
                    margin: {
                        right: .5
                    },
                    className: "subscription-balloon-options__subbed-star"
                }, a.createElement(g._24, {
                    asset: g._25.Star
                })));
                var t = null,
                    n = null,
                    r = null,
                    l = this.state.tierNameEnabled ? Object(o.d)("Tier 3", "SubTierTabs") : this.props.subscriptionProducts[2].price,
                    c = a.createElement(g._8, {
                        display: g.R.InlineFlex
                    }, this.state.subbedTier === i.Tier3 && e, a.createElement(g._36, {
                        active: this.state.activeTab === i.Tier3,
                        "data-tier": k(i.Tier3),
                        "data-a-target": k(i.Tier3),
                        onClick: this.toggleActiveTab
                    }, l));
                if (this.props.subbedTier !== s.a.Prime || this.props.isGift || (t = a.createElement(g._8, {
                        display: g.R.InlineFlex,
                        margin: {
                            right: 2
                        }
                    }, a.createElement(g._8, {
                        display: g.R.InlineFlex,
                        margin: {
                            right: 1
                        },
                        className: "subscription-balloon-options__prime-crown"
                    }, a.createElement(g._24, {
                        asset: g._25.Crown
                    })), a.createElement(g._36, {
                        active: this.state.activeTab === i.Prime,
                        "data-tier": k(i.Prime),
                        "data-a-target": k(i.Prime),
                        onClick: this.toggleActiveTab
                    }, Object(o.d)("Prime", "SubTierTabs")))), !this.props.subbedTier || this.props.subbedTier === s.a.Tier1) {
                    var d = this.state.tierNameEnabled ? Object(o.d)("Tier 1", "SubTierTabs") : this.props.subscriptionProducts[0].price;
                    n = a.createElement(g._8, {
                        display: g.R.InlineFlex,
                        margin: {
                            right: 2
                        }
                    }, this.state.subbedTier === i.Tier1 && e, a.createElement(g._36, {
                        active: this.state.activeTab === i.Tier1,
                        "data-tier": k(i.Tier1),
                        "data-a-target": k(i.Tier1),
                        onClick: this.toggleActiveTab
                    }, d))
                }
                if (!this.props.subbedTier || this.props.subbedTier === s.a.Prime || this.props.subbedTier === s.a.Tier1 || this.props.subbedTier === s.a.Tier2) {
                    var p = this.state.tierNameEnabled ? Object(o.d)("Tier 2", "SubTierTabs") : this.props.subscriptionProducts[1].price;
                    r = a.createElement(g._8, {
                        display: g.R.InlineFlex,
                        margin: {
                            right: 2
                        }
                    }, this.state.subbedTier === i.Tier2 && e, a.createElement(g._36, {
                        active: this.state.activeTab === i.Tier2,
                        "data-tier": k(i.Tier2),
                        "data-a-target": k(i.Tier2),
                        onClick: this.toggleActiveTab
                    }, p))
                }
                var m = this.props.subscriptionProducts[1].emotes.length,
                    h = m + this.props.subscriptionProducts[2].emotes.length,
                    f = null;
                (m > 0 && this.state.activeTab === i.Tier2 || h > 0 && this.state.activeTab === i.Tier3) && (f = a.createElement(g._8, {
                    display: g.R.InlineFlex,
                    alignItems: g.c.Center
                }, this.getExtraEmotes(this.state.activeTab), a.createElement(g.Q, {
                    bold: !0
                }, Object(o.d)("{extraEmoteCount, plural, one {Plus {extraEmoteCount, number} extra channel emote} other {Plus {extraEmoteCount, number} extra channel emotes}}", {
                    extraEmoteCount: this.state.activeTab === i.Tier2 ? m : h
                }, "SubTierTabs"))));
                var v = this.props.subscriptionProducts[this.state.activeTab - 1];
                return a.createElement(g._8, {
                    className: "channel-header__subscription-balloon-options"
                }, a.createElement(g._8, {
                    margin: {
                        bottom: 1
                    }
                }, a.createElement(g._37, null, t, n, r, c)), a.createElement(g._8, null, a.createElement(g._8, {
                    margin: {
                        bottom: 1
                    }
                }, a.createElement(g.Q, {
                    type: g._49.H5,
                    bold: !0
                }, this.getTabTitle())), a.createElement(g._8, {
                    margin: {
                        bottom: 1
                    }
                }, a.createElement(g.Q, null, Object(o.d)("{availableEmoteCount, plural, one {Includes {availableEmoteCount, number} emoticon, subscriber badge, and customizable messages upon subscribing} other {Includes {availableEmoteCount, number} emoticons, subscriber badge, and customizable messages upon subscribing}}", {
                    availableEmoteCount: this.props.subscriptionProducts[0].emotes.length
                }, "SubTierTabs"))), f, a.createElement(u.a, {
                    subscriptionProduct: v,
                    isGift: this.props.isGift
                }), a.createElement(g._8, {
                    margin: {
                        top: 1,
                        right: 1
                    }
                }, this.getTierSubscribeButton())))
            }, t.prototype.getInitialState = function() {
                var e = this.props.subscriptionProducts[0].price;
                return (Object(m.d)(this.props.subscriptionProducts) || Object(m.c)(this.props.subscriptionProducts)) && (e = Object(m.a)(this.props.subscriptionProducts[0], this.props.isGift)), {
                    activeTab: i.Tier1,
                    currentPurchasePrice: e,
                    subbedTier: null,
                    tierNameEnabled: !1
                }
            }, t.prototype.getPrice = function(e) {
                return Object(m.d)(this.props.subscriptionProducts) || Object(m.c)(this.props.subscriptionProducts) ? Object(m.a)(e, this.props.isGift) : e.price
            }, t = r.__decorate([Object(c.d)("SubTierTabs")], t)
        }(a.Component);
        n.d(t, !1, function() {
            return v
        }), n.d(t, !1, function() {
            return b
        }), n.d(t, "b", function() {
            return i
        }), n.d(t, !1, function() {
            return k
        }), n.d(t, "a", function() {
            return y
        })
    },
    YhVV: function(e, t, n) {
        "use strict";
        t.b = function(e, t) {
            var n = [];
            if (!e || !t) return n;
            var r = /[^\s\.,\!]+/g,
                a = r.exec(e);
            for (; a;) {
                var o = a[0],
                    s = t[o];
                if (s && "function" != typeof s) {
                    var l = Object(i.d)(e.slice(0, a.index)),
                        c = l ? l.length : a.index;
                    n[c] = {
                        startIndex: c,
                        endIndex: c + o.length,
                        data: {
                            alt: o,
                            images: {
                                themed: !1,
                                sources: {
                                    "1x": Object(i.f)(s.id, 1),
                                    "2x": Object(i.f)(s.id, 2),
                                    "4x": Object(i.f)(s.id, 4)
                                }
                            }
                        }
                    }
                }
                a = r.exec(e)
            }
            return n
        }, t.a = function(e) {
            for (var t = {}, n = 0, i = e; n < i.length; n++)
                for (var o = i[n], s = 0, l = o.emotes; s < l.length; s++)
                    for (var c = l[s], d = r[c.token] || [c.token], u = 0, p = d; u < p.length; u++) {
                        var m = p[u];
                        t[m] && o.id === a || (t[m] = {
                            id: c.id,
                            token: m
                        })
                    }
            return t
        };
        var i = n("l21v");
        var r = {
                "\\:\\&gt\\;": [":>"],
                "\\&gt\\;\\(": [">("],
                "\\&lt\\;\\]": ["<]"],
                "\\&lt\\;3": ["<3"],
                ":-?(?:7|L)": [":-7", ":-L", ":7", ":L"],
                "[oO](_|\\.)[oO]": ["o_o", "O_O", "o_O", "O_o", "o.o", "O.O", "o.O", "O.o"],
                "\\;-?(p|P)": [";-p", ";-P", ";p", ";P"],
                "\\;-?\\)": [";-)", ";)"],
                "\\:-?(o|O)": [":-o", ":-O", ":o", ":O"],
                "\\:-?(p|P)": [":-p", ":-P", ":p", ":P"],
                "\\:-?(S|s)": [":-S", ":-s", ":s", ":S"],
                "\\:-?[\\\\/]": [":-/", ":-\\", ":/", ":\\"],
                "\\:-?[z|Z|\\|]": [":-|", ":-Z", ":-z", ":|", ":Z", ":z"],
                "\\:-?\\(": [":-(", ":("],
                "\\:-?\\)": [":-)", ":)"],
                "\\:-?D": [":-D", ":D"],
                "#-?[\\\\/]": ["#-/", "#-\\", "#/", "#\\"],
                "B-?\\)": ["B-)", "B)"],
                "R-?\\)": ["R-)", "R)"]
            },
            a = "0"
    },
    YugT: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FollowButton_FollowEvent_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPartner"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hosting"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "stream"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "game"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 157
            }
        };
        n.loc.source = {
            body: "query FollowButton_FollowEvent_User($id: ID!) {\nuser(id: $id) {\nid\nisPartner\nstream {\nid\ngame {\nid\nname\n}\n}\nhosting {\nid\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Yy4F: function(e, t) {},
    "Z+EN": function(e, t) {},
    "Z+Fq": function(e, t) {},
    ZJYd: function(e, t, n) {
        "use strict";
        t.c = function(e) {
            if (e.type === a.a) return !1;
            return l(e) && null !== e.promotion && e.promotion.type === a.e
        }, t.e = function(e) {
            if (e.type === a.a) return !1;
            return l(e) && null !== e.promotion && (e.promotion.type === a.g || e.promotion.type === a.f)
        }, t.d = l, t.a = function(e) {
            var t = 0,
                n = 0,
                i = 0;
            return e.forEach(function(e) {
                e.cheerAmount && (t = Math.max(t, e.cheerAmount), n = n ? Math.min(n, e.cheerAmount) : e.cheerAmount, i += e.cheerAmount)
            }), {
                total: i,
                smallestCheermote: n,
                largestCheermote: t
            }
        }, t.f = function(e) {
            var t = e.messageBits,
                n = t.total,
                r = t.largestCheermote,
                a = t.smallestCheermote;
            if (n) {
                var s = {
                        cheerAboveMaxBitsPerEmote: r > o.k,
                        totalAboveBalance: n > e.balance,
                        totalBelowCheerMinimum: n < e.cheerMinimumBits,
                        totalBelowEmoteMinimum: a < e.emoteMinimumBits,
                        inputLongerThanMaxBitsMessage: e.inputValue.length > o.j,
                        inputStartsWithCommand: e.inputValue.startsWith("/")
                    },
                    l = Object.keys(s).some(function(e) {
                        return s[e]
                    });
                if (l) return i.__assign({
                    canSpend: !1
                }, s)
            }
            return {
                canSpend: !0
            }
        }, t.b = function(e) {
            var t = e.purchaseUrl;
            if (!t) return;
            e.trackBitsCardInteraction(Object(s.d)(e.bitsAmount), {
                location: e.location
            });
            var n = t.replace("{channelID}", e.channelID),
                i = window.open(n, "Twitch", "width=1024,height=600,scrollbars=yes");
            if (!i || Object(r.a)()) return e.closeAllBits && e.closeAllBits(), void e.trackBitsCardInteraction(s.a.CloseCard, {
                location: e.location
            });
            return i.focus(), i
        };
        var i = n("TToO"),
            r = n("Ouuk"),
            a = n("jxGs"),
            o = n("3iBR"),
            s = n("/LBW");

        function l(e) {
            return e.type === a.b && null !== e.promotion && !!e.promotion
        }
    },
    Zifq: function(e, t) {},
    a2ud: function(e, t) {},
    aBcb: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ClearUnreadFriendRequests"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "clearUnreadFriendRequests"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 80
            }
        };
        n.loc.source = {
            body: "mutation ClearUnreadFriendRequests {\nclearUnreadFriendRequests {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    aMxy: function(e, t, n) {
        "use strict";
        var i = n("arZ9");
        n.n(i);
        n.o(i, "FrienshipChangeType") && n.d(t, "FrienshipChangeType", function() {
            return i.FrienshipChangeType
        }), n.o(i, "ModerationActions") && n.d(t, "ModerationActions", function() {
            return i.ModerationActions
        }), n.o(i, "PubsubMessageType") && n.d(t, "PubsubMessageType", function() {
            return i.PubsubMessageType
        }), n.o(i, "PubsubTopic") && n.d(t, "PubsubTopic", function() {
            return i.PubsubTopic
        }), n.o(i, "TargetedModerationActions") && n.d(t, "TargetedModerationActions", function() {
            return i.TargetedModerationActions
        });
        var r = n("GHQc");
        n.n(r);
        n.o(r, "FrienshipChangeType") && n.d(t, "FrienshipChangeType", function() {
            return r.FrienshipChangeType
        }), n.o(r, "ModerationActions") && n.d(t, "ModerationActions", function() {
            return r.ModerationActions
        }), n.o(r, "PubsubMessageType") && n.d(t, "PubsubMessageType", function() {
            return r.PubsubMessageType
        }), n.o(r, "PubsubTopic") && n.d(t, "PubsubTopic", function() {
            return r.PubsubTopic
        }), n.o(r, "TargetedModerationActions") && n.d(t, "TargetedModerationActions", function() {
            return r.TargetedModerationActions
        });
        var a = n("/3Lr");
        n.d(t, "FrienshipChangeType", function() {
            return a.a
        }), n.d(t, "ModerationActions", function() {
            return a.b
        }), n.d(t, "PubsubMessageType", function() {
            return a.c
        }), n.d(t, "PubsubTopic", function() {
            return a.d
        }), n.d(t, "TargetedModerationActions", function() {
            return a.e
        })
    },
    abYt: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("HW6M"),
            a = n("GiK3"),
            o = n("CSlQ"),
            s = n("GfPd"),
            l = n("Odds"),
            c = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.setRef = function(e) {
                        return t.ref = e
                    }, t.onMouseEnter = function() {
                        t.props.tooltipLayer.show({
                            from: t.ref,
                            label: t.props.title,
                            align: l._53.Center,
                            direction: l._54.Right
                        })
                    }, t.onMouseLeave = function() {
                        t.props.tooltipLayer.hide()
                    }, t.addEventListeners = function() {
                        t.ref && (t.ref.addEventListener("mouseenter", t.onMouseEnter), t.ref.addEventListener("mouseleave", t.onMouseLeave))
                    }, t.removeEventListeners = function() {
                        t.ref && (t.ref.removeEventListener("mouseenter", t.onMouseEnter), t.ref.removeEventListener("mouseleave", t.onMouseLeave))
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.addEventListeners()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.collapsed && !e.collapsed && this.removeEventListeners()
                }, t.prototype.componentDidUpdate = function(e) {
                    this.props.collapsed && !e.collapsed && this.addEventListeners()
                }, t.prototype.componentWillUnmount = function() {
                    this.removeEventListeners()
                }, t.prototype.render = function() {
                    var e, t = {
                            "side-nav-header": !0
                        },
                        n = this.props,
                        i = n.collapsed,
                        o = n.collapsedIcon,
                        s = n.title;
                    return e = o ? a.createElement(l._24, {
                        asset: o,
                        width: 20,
                        height: 20
                    }) : a.createElement(l._24, {
                        asset: l._25.FriendsSC,
                        width: 20,
                        height: 20
                    }), i ? a.createElement(l._35, {
                        className: r(t),
                        color: l.K.Alt2,
                        display: l.R.Flex,
                        flexWrap: l.U.Wrap,
                        justifyContent: l._7.Center,
                        alignItems: l.c.Center,
                        margin: {
                            top: 1
                        },
                        padding: {
                            top: 1,
                            bottom: .5
                        },
                        "data-a-target": "side-nav-header-collapsed",
                        refDelegate: this.setRef
                    }, e, a.createElement(l._35, {
                        borderTop: !0,
                        fullWidth: !0,
                        margin: {
                            top: 1
                        }
                    })) : a.createElement(l._8, {
                        className: r(t),
                        margin: {
                            top: 1,
                            x: 1
                        },
                        padding: {
                            top: 1,
                            bottom: .5
                        },
                        "data-a-target": "side-nav-header-expanded"
                    }, a.createElement(l.Q, {
                        type: l._49.H5,
                        color: l.K.Alt
                    }, s), a.createElement(l._35, {
                        borderTop: !0,
                        fullWidth: !0,
                        margin: {
                            top: 1
                        }
                    }))
                }, t
            }(a.Component),
            d = Object(o.d)("Side Nav Header", {
                autoReportInteractive: !0
            })(Object(s.c)()(c));
        n.d(t, !1, function() {
            return c
        }), n.d(t, "a", function() {
            return d
        })
    },
    adox: function(e, t) {},
    afun: function(e, t) {},
    aqNN: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Bits_BuyCard_Offers"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "withChannel"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isLoggedIn"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "bitsOffers"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "skip"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "bitsOffersFragment"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "idSHA1"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bitsOffers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "bitsOffersFragment"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "withChannel"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cheerMinimumBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 440
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/bits/models/bits-offers-fragment.gql"\nquery Bits_BuyCard_Offers($withChannel: Boolean! $isLoggedIn: Boolean! $channelLogin: String!) {\nbitsOffers @skip(if: $isLoggedIn) {\n...bitsOffersFragment\n}\ncurrentUser @include(if: $isLoggedIn) {\nid\nidSHA1\nbitsBalance\nbitsOffers {\n...bitsOffersFragment\n}\n}\nuser(login: $channelLogin) @include(if: $withChannel) {\nid\ndisplayName\ncheer {\nid\nsettings {\ncheerMinimumBits\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var r = {};
        i.definitions = i.definitions.concat(n("OcEY").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !r[t] && (r[t] = !0, !0)
        })), e.exports = i
    },
    arZ9: function(e, t) {},
    aysN: function(e, t) {},
    bBGx: function(e, t) {},
    bkpq: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            var t = [],
                n = {};
            return e.forEach(function(e) {
                var s, l, c, d = e.tiers.map(function(e) {
                    return o(e)
                });
                "Cheer" === e.prefix && d.push((s = ["DARK", "LIGHT"], l = ["static", "animated"], c = [], [1, 1.5, 2, 3, 4].forEach(function(e) {
                    s.forEach(function(t) {
                        l.forEach(function(n) {
                            c.push({
                                url: a.a + "/cheer/" + t.toLowerCase() + "/" + n + "/100000/" + e + "." + ("static" === n ? "png" : "gif"),
                                isAnimated: "animated" === n,
                                theme: t,
                                dpiScale: e
                            })
                        })
                    })
                }), o({
                    id: "Cheer:100000",
                    bits: 1e5,
                    canCheer: !1,
                    color: a.f[r.a.Yellow],
                    images: c
                }))), d.sort(function(e, t) {
                    return t.bits - e.bits
                });
                var u = i.__assign({}, e, {
                    indexedTiers: new Map(d.map(function(e) {
                        return [e.bits, e]
                    })),
                    orderedTiers: d
                });
                t.push(u), n[u.prefix.toLowerCase()] = u
            }), {
                indexedActions: n,
                orderedActions: t
            }
        }, t.b = function(e, t) {
            return {
                cursor: "" + e.rank,
                node: {
                    id: t + "_" + e.entry_key,
                    entryKey: e.entry_key,
                    rank: e.rank,
                    score: e.score,
                    __typename: "BitsLeaderboardItem"
                },
                __typename: "BitsLeaderboardItemEdge"
            }
        };
        var i = n("TToO"),
            r = n("I89S"),
            a = n("3iBR");

        function o(e) {
            var t = new Map,
                n = new Map,
                r = new Map,
                a = new Map;
            return e.images.forEach(function(e) {
                "LIGHT" === e.theme ? e.isAnimated ? n.set(e.dpiScale, e.url) : t.set(e.dpiScale, e.url) : e.isAnimated ? a.set(e.dpiScale, e.url) : r.set(e.dpiScale, e.url)
            }), i.__assign({
                indexedImages: {
                    LIGHT: {
                        static: t,
                        animated: n
                    },
                    DARK: {
                        static: r,
                        animated: a
                    }
                }
            }, e)
        }
    },
    c3pS: function(e, t, n) {
        "use strict";
        n("67ft");
        var i, r = n("TToO"),
            a = n("KSGD"),
            o = n("GiK3"),
            s = n("6BvN"),
            l = n("HW6M"),
            c = n("6sO2"),
            d = n("rCmJ"),
            u = n("Odds"),
            p = (n("IfJQ"), "autocomplete-balloon-matches"),
            m = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.resizeAnimationFrame = 0, t.messages = {
                        noMatches: Object(c.d)("No matches.", "AutocompleteBalloon")
                    }, t.logger = c.j.withCategory("AutocompleteBalloon"), t.renderMatches = function() {
                        return t.props.matches.map(function(e, n) {
                            var i = t.state.selectedMatch,
                                r = i && i.replacement === e.replacement,
                                a = l("autocomplete-balloon__item", {
                                    "autocomplete-balloon__item--selected": r
                                });
                            return o.createElement(u._8, {
                                key: "autocomplete-match-" + n,
                                refDelegate: r ? t.focusOnOption : void 0,
                                "data-test-selector": p
                            }, o.createElement(u._2, {
                                display: u.R.Block,
                                fullWidth: !0
                            }, o.createElement("button", {
                                onMouseEnter: t.handleMatchMouseEnter,
                                className: a,
                                "data-a-target": e.replacement,
                                "data-click-index": n,
                                onClick: t.onMatchClick
                            }, o.createElement(u._8, {
                                padding: {
                                    x: .5
                                },
                                display: u.R.Flex,
                                alignItems: u.c.Center
                            }, e.element))))
                        })
                    }, t.handleMatchMouseEnter = function(e) {
                        var n = t.getMatchFromEvent(e);
                        n && t.setState({
                            selectedMatch: n
                        })
                    }, t.onMatchClick = function(e) {
                        var n = t.getMatchFromEvent(e);
                        n && t.props.onMatchSelect(n)
                    }, t.getMatchFromEvent = function(e) {
                        var n = t.props.matches,
                            i = e.currentTarget.getAttribute("data-click-index");
                        return !i || +i >= n.length ? (t.logger.error(new Error, "The index received from the UI element was not found in props.matches."), null) : n[+i]
                    }, t.handleKeydown = function(e) {
                        var n = e.charCode || e.keyCode,
                            i = function() {
                                e.preventDefault(), e.stopPropagation()
                            };
                        switch (n) {
                            case s.a.Tab:
                            case s.a.Enter:
                                i(), t.props.matches.length && t.state.selectedMatch ? t.props.onMatchSelect(t.state.selectedMatch) : t.props.onDismiss();
                                break;
                            case s.a.Up:
                            case s.a.Down:
                                if (!t.state.selectedMatch || !t.props.matches.length) return;
                                var r = t.props.matches.indexOf(t.state.selectedMatch);
                                if (-1 === r) return void t.logger.error(new Error, "The selected match was not found in props.matches.");
                                i();
                                var a = n === s.a.Up ? -1 : 1,
                                    o = t.getIndexWithinLength(r + a, t.props.matches.length),
                                    l = t.props.matches[o];
                                t.setState({
                                    selectedMatch: l
                                })
                        }
                    }, t.getIndexWithinLength = function(e, t) {
                        var n = e % t;
                        return n < 0 ? n + t : n
                    }, t.onResize = function() {
                        t.resizeAnimationFrame || (t.resizeAnimationFrame = requestAnimationFrame(t.setContainerHeight))
                    }, t.setContainerHeight = function() {
                        var e = t.props.containerElement && t.props.containerElement.clientHeight || 1080;
                        t.setState({
                            containerHeight: e
                        }), t.resizeAnimationFrame = 0
                    }, t.focusOnOption = function(e) {
                        if (e && t.autocompleteBalloonElement) {
                            var n = e.getBoundingClientRect(),
                                i = t.autocompleteBalloonElement.getBoundingClientRect();
                            (n.bottom > i.bottom || n.top < i.top) && e.scrollIntoView()
                        }
                    }, t.setAutocompleteBalloonElement = function(e) {
                        t.autocompleteBalloonElement = e
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    window.addEventListener("keydown", this.handleKeydown, !0), window.addEventListener("resize", this.onResize, !0), this.setContainerHeight(), this.props.matches.length > 0 && this.setState({
                        selectedMatch: this.props.matches[0]
                    })
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("resize", this.onResize, !0), window.removeEventListener("keydown", this.handleKeydown, !0), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this,
                        n = e.matches.reduce(function(e, n, i) {
                            return t.state.selectedMatch ? n.replacement === t.state.selectedMatch.replacement ? i : e : 0
                        }, 0);
                    this.setState({
                        selectedMatch: e.matches[n]
                    })
                }, t.prototype.render = function() {
                    var e;
                    return e = 0 === this.props.matches.length ? o.createElement(u._8, {
                        padding: {
                            x: .5
                        },
                        "data-test-selector": "autocomplete-balloon-no-matches"
                    }, o.createElement(u.Q, {
                        type: u._49.Span,
                        color: u.K.Alt2
                    }, this.messages.noMatches)) : this.renderMatches(), o.createElement(u._8, {
                        position: u._15.Relative
                    }, o.createElement(d.a, {
                        onClickOut: this.props.onDismiss
                    }, o.createElement(u.q, {
                        direction: u.r.TopLeft,
                        "data-a-target": "autocomplete-balloon",
                        "data-test-selector": "autocomplete-balloon",
                        show: !0
                    }, o.createElement(u._8, {
                        refDelegate: this.setAutocompleteBalloonElement,
                        "data-test-selector": "autocomplete-matches-container",
                        className: "autocomplete-balloon",
                        overflow: u._11.Auto,
                        padding: {
                            y: 1
                        }
                    }, o.createElement("div", {
                        style: {
                            maxHeight: this.state.containerHeight
                        }
                    }, e)))))
                }, t
            }(o.Component),
            h = n("2emZ"),
            f = n("vH/s"),
            g = {
                Chat: "chat",
                Feed: "feed",
                Whisper: "whisper"
            },
            v = ":",
            b = "#",
            k = "@",
            y = function(e) {
                switch (e) {
                    case h.a.Emote:
                        return v;
                    case h.a.Hashtag:
                        return b;
                    case h.a.Mention:
                        return k;
                    default:
                        return void c.j.warn("Chat Suggestions tracking was passed an unknown autocomplete type.")
                }
            },
            _ = function(e) {
                var t = y(e.autocompleteType);
                if (t) {
                    var n = {
                        channel: e.channelLogin,
                        completed_text: e.completedText,
                        source: e.source,
                        start_character: t
                    };
                    c.n.track(f.SpadeEventType.ChatSuggestionComplete, n)
                }
            };
        ! function(e) {
            e.Input = "input", e.TextArea = "textarea"
        }(i || (i = {}));
        var S = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        autocompleteType: h.a.None,
                        matchedCursorPosition: 0,
                        matches: null,
                        value: ""
                    }, t.providers = [], t.onChange = function(e) {
                        t.setState({
                            value: e.target.value
                        }, function() {
                            t.getMatches()
                        }), t.props.onChange && t.props.onChange(e)
                    }, t.onKeyDown = function(e) {
                        var n = function() {
                                t.props.onKeyDown && t.props.onKeyDown(e)
                            },
                            i = function() {
                                e.preventDefault(), e.stopPropagation()
                            },
                            r = e.charCode || e.keyCode;
                        if (r !== s.a.Enter) {
                            switch (r) {
                                case s.a.Tab:
                                    if (!t.state.matches) t.getMatches(!0) && i();
                                    break;
                                case s.a.Esc:
                                    t.state.matches && (i(), t.resetDisplayState())
                            }
                            n()
                        } else n()
                    }, t.setComponentRefDelegate = function(e) {
                        t.componentRef = e, t.props.componentRefDelegate && t.props.componentRefDelegate(e)
                    }, t.getMatches = function(e) {
                        var n = t.state.value;
                        if (0 === t.providers.length || 0 === n.length) return t.resetDisplayState(), !1;
                        var i = t.getCurrentCursorPosition();
                        if (i > n.length);
                        else
                            for (; i < n.length && !/\s/.test(n.charAt(i));) i++;
                        var r = n.substring(0, i);
                        if (0 === r.length || /\s/.test(r.substring(r.length - 1))) return t.resetDisplayState(), !1;
                        for (var a = r.split(/\s/), o = a[a.length - 1], s = 0, l = t.providers; s < l.length; s++) {
                            var c = l[s];
                            if (!e || c.canBeTriggeredByTab) {
                                var d = c.getMatches(o, e);
                                if (d) return t.setState({
                                    autocompleteType: c.autocompleteType,
                                    matchedCursorPosition: i,
                                    matches: d
                                }), !0
                            }
                        }
                        return t.resetDisplayState(), !1
                    }, t.resetDisplayState = function(e, n) {
                        var i = r.__assign({}, t.state, {
                            autocompleteType: h.a.None,
                            matches: null
                        }, e || {});
                        t.setState(i, n)
                    }, t.insertReplacement = function(e) {
                        var n = t.state.value,
                            i = t.state.matchedCursorPosition,
                            a = n.substring(0, i),
                            o = a.lastIndexOf(e.current);
                        if (-1 === o) a = a.concat(e.replacement + " "), i = a.length;
                        else {
                            var s = a.substring(0, o),
                                l = n.length > o + e.current.length ? n.substring(o + e.current.length) : "",
                                c = l.startsWith(" ") ? e.replacement : e.replacement + " ";
                            a = "" + s + c + l, i = s.length + c.length
                        }
                        _(r.__assign({}, t.props.trackingParams || {}, {
                            autocompleteType: t.state.autocompleteType,
                            completedText: e.replacement,
                            source: t.props.suggestionSource
                        })), t.resetDisplayState({
                            value: a
                        }, function() {
                            t.setCursorPosition(i)
                        })
                    }, t.getCurrentCursorPosition = function() {
                        return t.componentRef.selectionStart
                    }, t.setCursorPosition = function(e) {
                        t.componentRef && (t.componentRef.setSelectionRange(e, e), t.componentRef.focus())
                    }, t.registerAutocompleteProvider = function(e) {
                        return t.providers.push(e),
                            function() {
                                var n = t.providers.indexOf(e);
                                t.providers.splice(n, 1)
                            }
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.refDelegate && this.props.refDelegate(this)
                }, t.prototype.getChildContext = function() {
                    return {
                        registerAutocompleteProvider: this.registerAutocompleteProvider
                    }
                }, t.prototype.componentWillUpdate = function(e, t) {
                    !this.state.matches && t.matches && function(e) {
                        var t = y(e.autocompleteType);
                        if (t) {
                            var n = {
                                source: e.source,
                                start_character: t
                            };
                            c.n.track(f.SpadeEventType.ChatSuggestion, n)
                        }
                    }({
                        autocompleteType: t.autocompleteType,
                        source: e.suggestionSource
                    })
                }, t.prototype.componentDidUpdate = function(e, t) {
                    t.value !== this.state.value && this.props.onValueUpdate && this.props.onValueUpdate(this.state.value)
                }, t.prototype.render = function() {
                    var e = r.__assign({}, this.props, {
                        onChange: this.onChange,
                        onKeyDown: this.onKeyDown,
                        refDelegate: this.setComponentRefDelegate,
                        value: this.state.value
                    });
                    return o.createElement(u._8, null, this.state.matches && o.createElement(m, {
                        matches: this.state.matches,
                        onMatchSelect: this.insertReplacement,
                        onDismiss: this.resetDisplayState,
                        containerElement: this.props.containerElement
                    }), this.props.componentType === i.Input ? o.createElement(u._4, r.__assign({}, e, {
                        type: e.type || u._5.Text
                    })) : o.createElement(u._46, r.__assign({}, e)), this.props.children)
                }, t.prototype.getValue = function() {
                    return this.state.value
                }, t.prototype.setValue = function(e) {
                    this.resetDisplayState({
                        value: e
                    })
                }, t.childContextTypes = {
                    registerAutocompleteProvider: a.func
                }, t
            }(o.Component),
            E = n("Bir6"),
            C = n("Tzcg"),
            N = (n("D3yV"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.autocompleteType = h.a.Emote, t.canBeTriggeredByTab = !1, t.getMatches = function(e) {
                        return e.startsWith(":") ? e.length < 3 ? null : t.getMatchedEmotes(e) : null
                    }, t.getMatchedEmotes = function(e) {
                        var n = t.state.hydratedEmotes;
                        if (!n || 0 === n.length) return null;
                        var i = e.substring(1),
                            r = n.reduce(function(e, n) {
                                var r = n.emotes.filter(function(e) {
                                    if (e.token) return t.doesEmoteMatchTerm(e, i)
                                });
                                return e.concat([r])
                            }, []).filter(function(e) {
                                return e.length > 0
                            }).reduce(function(e, t) {
                                return e.concat(t)
                            }, []);
                        return r = Object(C.d)(r), (r = Object(C.e)(r, i)).map(function(e) {
                            return {
                                current: ":" + i,
                                replacement: e.token,
                                element: t.renderEmoteSuggestion(e)
                            }
                        })
                    }, t.doesEmoteMatchTerm = function(e, t) {
                        var n = new RegExp("^" + Object(E.a)(t), "i");
                        if (e.token.match(n)) return !0;
                        var i = new RegExp("" + Object(E.a)(t.charAt(0)).toUpperCase()),
                            r = new RegExp("^" + Object(E.a)(t.slice(1)), "i"),
                            a = e.token.match(i);
                        return !!(a && a.index && e.token.slice(a.index + 1).match(r))
                    }, t.renderEmoteSuggestion = function(e) {
                        return [o.createElement(u._8, {
                            padding: {
                                right: .5
                            },
                            key: "emote-img-" + e.id
                        }, o.createElement("img", {
                            className: "emote-autocomplete-provider__image",
                            srcSet: e.srcSet
                        })), o.createElement(u.Q, {
                            type: u._49.Span,
                            key: "emote-text-" + e.id
                        }, e.token)]
                    }, t.hidrateEmotes = function(e) {
                        var n = e.map(function(e) {
                            return {
                                id: e.id,
                                emotes: Object(C.b)(e.emotes)
                            }
                        });
                        t.setState({
                            hydratedEmotes: n
                        })
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    e.emotes && this.props.emotes !== e.emotes && this.hidrateEmotes(e.emotes)
                }, t.prototype.componentWillMount = function() {
                    this.hidrateEmotes(this.props.emotes)
                }, t.prototype.componentDidMount = function() {
                    this.unregister = this.context.registerAutocompleteProvider(this)
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister()
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    registerAutocompleteProvider: a.func
                }, t
            }(o.Component));
        n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "b", function() {
            return S
        }), n.d(t, "a", function() {
            return i
        }), n.d(t, !1, function() {}), n.d(t, "d", function() {
            return N
        }), n.d(t, "c", function() {
            return g
        })
    },
    c84M: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("6sO2"),
            o = n("NXs7"),
            s = n("VAT8"),
            l = n("3iBR"),
            c = n("WKaT"),
            d = n("sEXz"),
            u = n("CWW0"),
            p = n("RZjb"),
            m = n("Odds"),
            h = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(m._8, {
                        display: m.R.Flex,
                        flexDirection: m.T.Column,
                        padding: {
                            top: 2,
                            bottom: 4
                        }
                    }, r.createElement(m._8, {
                        textAlign: m._45.Center,
                        padding: {
                            bottom: 2
                        }
                    }, r.createElement(m.Q, {
                        fontSize: m.V.Size3,
                        bold: !0
                    }, Object(a.d)("The Overwatch League All-Access Experience", "EsportsInsiderPassTab"))), r.createElement(m._8, {
                        display: m.R.Flex,
                        flexDirection: m.T.Column,
                        breakpointSmall: {
                            flexDirection: m.T.Row
                        },
                        justifyContent: m._7.Center
                    }, r.createElement(m._8, {
                        margin: {
                            x: 2
                        },
                        padding: {
                            bottom: 2
                        },
                        breakpointSmall: {
                            padding: 0
                        }
                    }, r.createElement(p.a, {
                        type: p.b.Major,
                        title: Object(a.d)("Exclusive Command Center livestream", "EsportsInsiderPassTab"),
                        body: Object(a.d)("This game-changing stream shows you alternate camera angles, live stats, player POVs, and team facecams all on one multiviewer overlay. Try it for free until Stage 4.", "EsportsInsiderPassTab"),
                        imageURL: l.c + "/owl-2017/marketing/insider-stream.jpg"
                    })), r.createElement(m._8, {
                        margin: {
                            x: 2
                        },
                        padding: {
                            bottom: 2
                        },
                        breakpointSmall: {
                            padding: 0
                        }
                    }, r.createElement(p.a, {
                        type: p.b.Major,
                        title: Object(a.d)("Your questions, answered!", "EsportsInsiderPassTab"),
                        body: Object(a.d)("After Overwatch League match day broadcasts, enjoy an interactive player Q&A session by submitting your questions in Passholder-only chat. Selected questions will be answered by players live on the Command Center stream.", "EsportsInsiderPassTab"),
                        imageURL: l.c + "/owl-2017/marketing/insider-questions.jpg"
                    })), r.createElement(m._8, {
                        margin: {
                            x: 2
                        }
                    }, r.createElement(p.a, {
                        type: p.b.Major,
                        title: Object(a.d)("Behind the Screens: Match analysis by players", "EsportsInsiderPassTab"),
                        body: Object(a.d)("Top players from each team will walk you through their thoughts on a match and explain what they did and why in an exclusive video every week, starting April 6th!", "EsportsInsiderPassTab"),
                        imageURL: l.c + "/owl-2017/marketing/insider-vods.jpg"
                    }))))
                }, t
            }(r.PureComponent),
            f = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(m.Y, {
                        gutterSize: m.Z.Large
                    }, r.createElement(m.L, {
                        cols: {
                            default: 12,
                            lg: 6
                        }
                    }, r.createElement(m._8, {
                        padding: {
                            bottom: 2
                        },
                        breakpointLarge: {
                            padding: 0
                        }
                    }, r.createElement(p.a, {
                        type: p.b.Minor,
                        title: Object(a.d)("Passholder-Only Chat", "InsiderPassMarketingMinorCallouts"),
                        body: Object(a.d)("Hang out and chat with people who love the game as much as you do.", "InsiderPassMarketingMinorCallouts"),
                        imageURL: l.c + "/owl-2017/marketing/insider-pre-purchase-chat.png"
                    }))), r.createElement(m.L, {
                        cols: {
                            default: 12,
                            lg: 6
                        }
                    }, r.createElement(m._8, {
                        padding: {
                            bottom: 2
                        },
                        breakpointLarge: {
                            padding: 0
                        }
                    }, r.createElement(p.a, {
                        type: p.b.Minor,
                        title: Object(a.d)("Ad-free viewing on Overwatch League", "InsiderPassMarketingMinorCallouts"),
                        body: Object(a.d)("With the All-Access Pass you won’t have to sit through Twitch ads before you can watch the game.", "InsiderPassMarketingMinorCallouts"),
                        imageURL: l.c + "/owl-2017/marketing/insider-pre-purchase-ads.png"
                    }))))
                }, t
            }(r.PureComponent),
            g = n("E1ro"),
            v = n("FDYX"),
            b = (n("Yy4F"), "https://blog.twitch.tv/overwatch-league-all-access-pass-on-twitch-8cbf3e23df0a"),
            k = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = Object(a.d)("Get the All-Access Pass", "EsportsCampaignTabs"),
                        n = Object(v.d)(this.props.subscriptionProducts),
                        i = n ? Object(v.a)(this.props.subscriptionProducts[0]) : this.props.subscriptionProducts[0].price;
                    return r.createElement(m._8, {
                        className: "insider-pass-pre-purchase"
                    }, r.createElement(m._35, {
                        className: "insider-pass-pre-purchase__header",
                        margin: {
                            top: 3
                        },
                        padding: {
                            x: 2,
                            bottom: 5,
                            top: 3
                        }
                    }, r.createElement(m.Y, {
                        gutterSize: m.Z.Large
                    }, r.createElement(m.L, {
                        cols: 6
                    }, r.createElement(m._35, {
                        fullHeight: !0,
                        display: m.R.Flex,
                        alignItems: m.c.Center,
                        justifyContent: m._7.End
                    }, r.createElement("img", {
                        src: l.c + "/owl-2017/all-access-logo.svg",
                        alt: Object(a.d)("Overwatch League All-Access Pass on Twitch", "EsportsCampaignTabs"),
                        height: "120px"
                    }))), r.createElement(m.L, {
                        cols: 6
                    }, r.createElement(m._2, {
                        margin: {
                            bottom: .5
                        }
                    }, r.createElement(m.Q, {
                        color: m.K.Overlay,
                        fontSize: m.V.Size4,
                        bold: !0
                    }, Object(a.d)("Your VIP pass to the best of the Overwatch League.", "EsportsCampaignTabs"))), r.createElement(m.Q, {
                        color: m.K.Overlay,
                        fontSize: m.V.Size6,
                        className: "insider-pass-pre-purchase__sub-header"
                    }, Object(a.d)("All-Access benefits last up to the start of the 2019 Overwatch League Season. Twitch emotes, badges, and in-game content are yours to keep forever!", "EsportsCampaignTabs")), r.createElement(m._8, {
                        margin: {
                            top: 2,
                            bottom: 1
                        }
                    }, r.createElement(m.v, {
                        targetBlank: !0,
                        ariaLabel: t + " " + i,
                        linkTo: this.props.subscriptionProducts[0].url,
                        purchase: i
                    }, t)), r.createElement(m._8, {
                        display: m.R.Flex
                    }, r.createElement(m._8, {
                        margin: {
                            right: .5
                        }
                    }, r.createElement(m._24, {
                        asset: m._25.Crown,
                        type: m._26.Prime
                    })), this.props.userHasPrime && n && r.createElement(m.Q, {
                        color: m.K.Overlay
                    }, Object(a.d)("You’re saving $10 off the $29.99 price with Twitch Prime", "EsportsCampaignTabs")), !this.props.userHasPrime && r.createElement(m.Q, {
                        color: m.K.Overlay,
                        className: Object(s.c)(o.a.Dark)
                    }, Object(a.d)("Get $10 off with Twitch Prime <x:link>Sign up now</x:link>", {
                        "x:link": function(e) {
                            return r.createElement(m.O, {
                                key: "insider-prime-link",
                                to: "https://twitch.amazon.com/prime/",
                                type: m.P.Overlay,
                                targetBlank: !0
                            }, e)
                        }
                    }, "EsportsCampaignTabs"))), r.createElement(m.Q, {
                        fontSize: m.V.Size7,
                        className: Object(s.c)(o.a.Dark)
                    }, r.createElement(m.O, {
                        to: b
                    }, Object(a.d)("Offer available for a limited time. Terms and conditions apply", "EsportsCampaignTabs"))))), r.createElement(m._8, {
                        position: m._15.Absolute,
                        display: m.R.Flex,
                        justifyContent: m._7.Center,
                        margin: {
                            top: 3
                        },
                        fullWidth: !0
                    }, r.createElement(m._35, {
                        className: "insider-pass-pre-purchase__command-center-trial",
                        background: m.n.Base,
                        padding: {
                            x: 2,
                            y: 1
                        },
                        elevation: 3,
                        borderRadius: m.t.Medium,
                        display: m.R.Flex,
                        alignItems: m.c.Center
                    }, r.createElement(m._2, {
                        margin: {
                            right: 1
                        }
                    }, r.createElement("img", {
                        src: l.c + "/owl-2017/switcher-command-center.svg",
                        height: "44px",
                        width: "69px"
                    })), !this.props.dismissedTrial && r.createElement(m.Q, null, Object(a.d)("Preview the Command Center stream for free until Stage 4 <x:nowrap>(begins May 16)!</x:nowrap> <x:link>Try Command Center Now</x:link>", {
                        "x:nowrap": function(e) {
                            return r.createElement(m.Q, {
                                type: m._49.Span,
                                key: "insider-nowrap",
                                noWrap: !0
                            }, e)
                        },
                        "x:link": function(t) {
                            return r.createElement(m.O, {
                                onClick: e.props.handleDismissedTrial,
                                key: "insider-trial-link",
                                "data-test-selector": "insider-pass-video-toggle-button-selector"
                            }, t)
                        }
                    }, "EsportsCampaignTabs")), this.props.dismissedTrial && r.createElement(m._8, null, r.createElement(m.Q, {
                        bold: !0
                    }, Object(a.d)("You now have free access to the Command Center!", "EsportsCampaignTabs")), r.createElement(m.Q, null, Object(a.d)("Click the button under the video to switch between the Command Center stream and the standard stream.", "EsportsCampaignTabs")))))), r.createElement(m._35, {
                        padding: {
                            bottom: 2
                        },
                        borderBottom: !0
                    }, r.createElement(h, null)), r.createElement(m._35, {
                        borderBottom: !0
                    }, r.createElement(u.a, {
                        channelID: this.props.channelID,
                        insiderPurchaseState: g.a.PrePurchase
                    })), r.createElement(m._8, {
                        className: "insider-pass-pre-purchase__marketing",
                        padding: {
                            y: 3
                        }
                    }, r.createElement(m._8, {
                        padding: {
                            y: 2
                        }
                    }, r.createElement(c.a, {
                        channelID: this.props.channelID,
                        insiderPurchaseState: g.a.PrePurchase
                    })), r.createElement(m._8, {
                        padding: {
                            y: 2
                        }
                    }, r.createElement(f, null))), r.createElement(d.a, null))
                }, t
            }(r.PureComponent);
        n.d(t, !1, function() {
            return "insider-pass-video-toggle-button-selector"
        }), n.d(t, "b", function() {
            return b
        }), n.d(t, "a", function() {
            return k
        })
    },
    c8sn: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "OnsiteNotifications_Summary"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "notifications"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "summary"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "unseenCount"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "lastSeenAt"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "incomingFriendRequests"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "1"
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "totalUnreadCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "newestEdge"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "createdAt"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 188
            }
        };
        n.loc.source = {
            body: "query OnsiteNotifications_Summary {\ncurrentUser {\nid\nnotifications {\nsummary {\nunseenCount\nlastSeenAt\n}\n}\nincomingFriendRequests(first: 1) {\ntotalUnreadCount\nnewestEdge {\ncreatedAt\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    cLQP: function(e, t) {},
    "cuT/": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return f
        }), n.d(t, "c", function() {
            return i
        }), n.d(t, "b", function() {
            return g
        });
        var i, r = n("TToO"),
            a = n("HW6M"),
            o = (n.n(a), n("knr3")),
            s = (n.n(o), n("GiK3")),
            l = (n.n(s), n("6sO2")),
            c = n("rK5D"),
            d = n("zNzU"),
            u = n("CSlQ"),
            p = n("Odds"),
            m = n("WHFs"),
            h = (n.n(m), 920),
            f = "34rem",
            g = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.logger = l.j.withCategory("RightColumn"), n.handleToggleVisibility = function() {
                        var e = n.getLayoutCache();
                        n.props.fullscreenTheatreModeEnabled ? n.props.isExpanded ? (n.props.collapseFullscreenRightColumn(), e.resource.isFullscreenRightColumnClosedByUserAction = !0) : (n.props.expandFullscreenRightColumn(), e.resource.isFullscreenRightColumnClosedByUserAction = !1) : n.props.isExpanded ? (n.props.collapseRightColumn(), e.resource.isRightColumnClosedByUserAction = !0) : (n.props.expandRightColumn(), e.resource.isRightColumnClosedByUserAction = !1), l.l.set(l.o.config.layoutCacheKey, e), Object(c.c)({
                            element: n.props.fullscreenTheatreModeEnabled ? c.a.FullscreenChat : c.a.Chat,
                            action: n.props.isExpanded ? c.b.Close : c.b.Open
                        })
                    }, n.hideOnBreakpoint = function() {
                        if (n.containerRef) {
                            var e = h;
                            window.innerWidth < e && !n.props.theatreModeEnabled ? "none" !== n.containerRef.style.display && (n.containerRef.style.display = "none") : "none" === n.containerRef.style.display && (n.containerRef.style.display = "")
                        }
                    }, n.onTheatreMouseMove = function() {
                        n.state.hideCollapseButton && n.setState({
                            hideCollapseButton: !1
                        }), window.removeEventListener("mousemove", n.onTheatreMouseMove), clearTimeout(n.mouseMoveTimer), n.mouseMoveTimer = setTimeout(function() {
                            document.addEventListener("mousemove", n.onTheatreMouseMove)
                        }, 1e3), n.startHideButtonTimer()
                    }, n.setContainerRef = function(e) {
                        return n.containerRef = e
                    }, n.state = {
                        content: null,
                        contentID: null,
                        isError: !1,
                        hideCollapseButton: !1
                    }, i && n.logger.warn("RightColumn should only ever be used in the Root. Use <RightColumnContent> instead to wrap components that should display in the right column."), i = n, n
                }
                return r.__extends(t, e), t.prototype.componentDidCatch = function(e, t) {
                    var n = this;
                    this.setState({
                        isError: !0
                    }, function() {
                        n.logger.error(e, "A unhandled exception occurred in the component hierarchy", {
                            info: t
                        })
                    })
                }, t.prototype.componentDidMount = function() {
                    window.addEventListener("resize", this.hideOnBreakpoint), this.hideOnBreakpoint(), this.reportInteractive(), o.bind("alt+r", this.handleToggleVisibility), this.props.theatreModeEnabled && (window.addEventListener("mousemove", this.onTheatreMouseMove), this.startHideButtonTimer())
                }, t.prototype.componentDidUpdate = function(e) {
                    this.hideOnBreakpoint(), this.state.content && this.reportInteractive(), e.theatreModeEnabled !== this.props.theatreModeEnabled && (this.props.theatreModeEnabled ? (window.addEventListener("mousemove", this.onTheatreMouseMove), this.startHideButtonTimer()) : (clearTimeout(this.hideToggleTimer), clearTimeout(this.mouseMoveTimer), window.removeEventListener("mousemove", this.onTheatreMouseMove)))
                }, t.prototype.componentWillUnmount = function() {
                    clearTimeout(this.hideToggleTimer), clearTimeout(this.mouseMoveTimer), window.removeEventListener("mousemove", this.onTheatreMouseMove), window.removeEventListener("resize", this.hideOnBreakpoint), o.unbind("alt+r")
                }, t.prototype.render = function() {
                    if (!this.state.content || this.state.isError) return null;
                    var e = a("right-column", {
                            "right-column--collapsed": !this.props.isExpanded,
                            "right-column--theatre": this.props.theatreModeEnabled
                        }),
                        t = this.props.isExpanded ? "right-column-chat-bar" : "right-column-chat-bar-collapsed";
                    return s.createElement(p._8, {
                        className: e,
                        refDelegate: this.setContainerRef,
                        flexShrink: 0,
                        fullHeight: !0,
                        position: this.props.theatreModeEnabled ? p._15.Fixed : p._15.Relative,
                        attachTop: this.props.theatreModeEnabled,
                        attachRight: this.props.theatreModeEnabled,
                        "data-a-target": t
                    }, s.createElement(p._8, {
                        position: p._15.Relative,
                        flexGrow: 0,
                        flexShrink: 0,
                        fullHeight: !0,
                        display: this.props.isExpanded ? p.R.Block : p.R.Hide
                    }, this.state.content), s.createElement(p._2, {
                        className: "right-column__toggle-visibility",
                        position: p._15.Absolute,
                        flexGrow: 0,
                        flexShrink: 0,
                        display: this.state.hideCollapseButton ? p.R.Hide : p.R.Block,
                        zIndex: p._62.Above
                    }, s.createElement("button", {
                        onClick: this.handleToggleVisibility,
                        "data-a-target": "right-column__toggle-collapse-btn"
                    }, s.createElement(p._2, {
                        className: "right-column__toggle-visibility-icon",
                        position: p._15.Absolute
                    }, s.createElement(p.Q, {
                        type: p._49.Span
                    }, s.createElement(p._24, {
                        asset: p._25.GlyphArrDown
                    }))))))
                }, t.prototype.provideContent = function(e, t) {
                    this.state.content && this.state.contentID !== t && this.logger.warn("Displaying another component already. Only one component can be displayed at a time using <RightColumnContent>. Check the page or other subcomponents to find the other instance and determine which one should be showing."), this.setState({
                        content: e,
                        contentID: t
                    })
                }, t.prototype.removeContent = function() {
                    this.setState({
                        content: null,
                        contentID: null
                    })
                }, t.prototype.reportInteractive = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.getLayoutCache = function() {
                    return l.l.get(l.o.config.layoutCacheKey, d.a)
                }, t.prototype.startHideButtonTimer = function() {
                    var e = this;
                    clearTimeout(this.hideToggleTimer), this.hideToggleTimer = setTimeout(function() {
                        e.setState({
                            hideCollapseButton: !0
                        })
                    }, 5e3)
                }, t = r.__decorate([Object(u.d)("RightColumn")], t)
            }(s.Component)
    },
    cyj3: function(e, t) {},
    czpb: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return i.b.get(a.a, !1) || i.a.buildType !== r.a.Production ? "string" == typeof e ? e : e.pathname || "" : "string" == typeof e ? o + e : o + e.pathname
        }, t.b = function() {
            return !i.b.get(a.a, !1) && i.a.buildType === r.a.Production
        };
        var i = n("6sO2"),
            r = n("Ejve"),
            a = n("6Vb7"),
            o = "https://www.twitch.tv"
    },
    dKYh: function(e, t, n) {
        "use strict";
        t.b = function(e, t) {
            if (!e.emotes) return [];
            return Object(i.b)(e.emotes).map(function(e) {
                var n = "",
                    i = e.srcSet.split(",").find(function(e) {
                        return e.includes("3.0x")
                    });
                return i && (n = i.trim().split(" ")[0]), {
                    id: e.id,
                    name: e.displayName,
                    type: r.a.Insider,
                    description: "",
                    imageURL: n,
                    isEntitled: t,
                    canBeFulfilled: !1,
                    isPrimeOnly: !1,
                    quantity: 1
                }
            })
        }, t.a = function(e, t) {
            return {
                id: e.id,
                type: r.a.Insider,
                name: e.title,
                description: e.title,
                canBeFulfilled: !1,
                isEntitled: t,
                imageURL: e.image4x,
                isPrimeOnly: !1,
                quantity: 1
            }
        };
        var i = n("Tzcg"),
            r = n("6QFv")
    },
    daN3: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("6sO2"),
            o = n("7vx8"),
            s = n("yDzg"),
            l = n("CSlQ"),
            c = n("Odds"),
            d = n("lK86"),
            u = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.handleClick = function() {
                        return n.openCheckout(), n.props.onClick && n.props.onClick()
                    }, n.openCheckout = function() {
                        n.state.hasPopupExperiment && n.props.checkoutURL && n.props.giftRecipient && window.open(Object(s.a)(n.props.checkoutURL, {
                            recipient: n.props.giftRecipient,
                            ref: "gift-subscribe-button"
                        }), "Twitch", "width=1000, height=1100, menubar, toolbar, location, personalbar, scrollbars")
                    };
                    var i = a.o.experiments.getAssignment("TWILIGHT_SUB_CHECKOUT_POPUP");
                    return n.state = {
                        hasPopupExperiment: "yes" === i
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e, t, n = !!(this.props.data && this.props.data.user && this.props.data.user.self) && this.props.data.user.self.canGift;
                    this.props.checkoutURL ? this.props.isEsportChannel ? (e = Object(a.d)("Buy All-Access Pass Gift", "GiftSubscribeButton"), t = "esports-checkout-gift-subscribe-button") : (e = Object(a.d)("Buy Gift Subscription", "GiftSubscribeButton"), t = "checkout-gift-subscribe-button") : this.props.isEsportChannel ? (e = Object(a.d)("Gift All-Access Pass", "GiftSubscribeButton"), t = "esports-gift-subscribe-button") : (e = Object(a.d)("Gift Subscription", "GiftSubscribeButton"), t = "gift-subscribe-button");
                    var i = this.props.checkoutURL && this.props.giftRecipient ? Object(s.a)(this.props.checkoutURL, {
                        recipient: this.props.giftRecipient
                    }) : "";
                    return r.createElement(c.v, {
                        targetBlank: !0,
                        disabled: !n,
                        onClick: this.handleClick,
                        linkTo: this.state.hasPopupExperiment ? void 0 : i,
                        "data-test-selector": t,
                        purchase: this.props.purchase
                    }, this.props.buttonMessage || e)
                }, t = i.__decorate([Object(l.d)("GiftSubscribeButton", {
                    autoReportInteractive: !0
                }), Object(o.a)(d, {
                    options: function(e) {
                        return {
                            variables: {
                                recipientLogin: e.giftRecipient,
                                subProductId: e.subProductId
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.giftRecipient || !e.subProductId
                    }
                })], t)
            }(r.Component);
        n.d(t, !1, function() {
            return "gift-subscribe-button"
        }), n.d(t, !1, function() {
            return "checkout-gift-subscribe-button"
        }), n.d(t, !1, function() {
            return "esports-gift-subscribe-button"
        }), n.d(t, !1, function() {
            return "esports-checkout-gift-subscribe-button"
        }), n.d(t, "a", function() {
            return u
        })
    },
    djIP: function(e, t, n) {
        "use strict";
        var i, r, a;
        n.d(t, "c", function() {
                return i
            }), n.d(t, "b", function() {
                return r
            }), n.d(t, "a", function() {
                return a
            }),
            function(e) {
                e.Spam = "Spam", e.Harassment = "Harassment"
            }(i || (i = {})),
            function(e) {
                e.Spam = "spam", e.Harassment = "harassment", e.Other = "other"
            }(r || (r = {})),
            function(e) {
                e.Whisper = "WHISPER", e.Chat = "CHAT"
            }(a || (a = {}))
    },
    dnng: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("CSlQ"),
            o = n("Kckk"),
            s = n("Odds"),
            l = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = Object(o.f)(this.props.errorType);
                    return r.createElement(s._35, {
                        background: s.n.Alt2,
                        display: s.R.Flex,
                        justifyContent: s._7.Center,
                        padding: {
                            y: 1
                        },
                        margin: {
                            bottom: 1
                        },
                        textAlign: s._45.Center,
                        "data-test-selector": this.props.testTarget,
                        "data-a-target": this.props.testTarget
                    }, r.createElement(s.Q, {
                        type: s._49.H4,
                        align: s._59.Middle
                    }, r.createElement(s._35, {
                        padding: 1,
                        display: s.R.InlineFlex,
                        flexGrow: 1,
                        flexWrap: s.U.NoWrap,
                        alignItems: s.c.Center,
                        textAlign: s._45.Left,
                        fontSize: this.props.fontSize ? this.props.fontSize : s.V.Size5,
                        "data-a-target": "prime-error-glitch"
                    }, r.createElement(s._8, {
                        margin: {
                            right: 1
                        },
                        display: s.R.InlineFlex,
                        flexGrow: 1,
                        flexWrap: s.U.NoWrap,
                        alignItems: s.c.Center
                    }, r.createElement(s._24, {
                        asset: s._25.DeadGlitch,
                        type: s._26.Alert,
                        width: 20,
                        height: 20
                    })), r.createElement(s.Q, {
                        type: s._49.P
                    }, e))))
                }, t
            }(r.Component),
            c = Object(a.d)("PrimeError", {
                autoReportInteractive: !0
            })(l);
        n.d(t, "a", function() {
            return c
        })
    },
    e1CU: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            var n = e,
                i = !1;
            n ? n.split("").map(function(e) {
                return e.charCodeAt(0) > 127
            }).reduce(function(e, t) {
                return e || t
            }) && (i = !0) : n = t;
            return {
                userDisplayName: n,
                isIntl: i
            }
        }
    },
    e6tx: function(e, t) {},
    eBiB: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            if (e && "v" === e.charAt(0)) return e.substring(1);
            return e
        }
    },
    eXld: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            r = n("CIox"),
            a = n("2KeS"),
            o = n("TToO"),
            s = n("HW6M"),
            l = n("KSGD"),
            c = n("GiK3"),
            d = n("N221"),
            u = n("Odds"),
            p = (n("V1E/"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        scrollableProps: {}
                    }, t.historyUnlisten = null, t.currentPath = t.props.location.pathname, t.getChildContext = function() {
                        return {
                            setRootScrollableProps: t.setRootScrollableProps,
                            resetRootScrollableProps: t.resetRootScrollableProps
                        }
                    }, t.setRootScrollableProps = function(e) {
                        t.setState({
                            scrollableProps: e
                        })
                    }, t.resetRootScrollableProps = function() {
                        t.setState({
                            scrollableProps: {}
                        })
                    }, t.onHistoryChange = function(e, n) {
                        t.scrollableAreaRef && "POP" !== n && e.pathname !== t.currentPath && t.scrollableAreaRef.scrollToTop(), t.currentPath = e.pathname
                    }, t.setScrollableAreaRef = function(e) {
                        return t.scrollableAreaRef = e
                    }, t
                }
                return o.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.historyUnlisten = this.props.history.listen(this.onHistoryChange)
                }, t.prototype.componentWillUnmount = function() {
                    this.historyUnlisten && this.historyUnlisten()
                }, t.prototype.render = function() {
                    var e = this.props.playerIsPersisting && this.state.scrollableProps && this.state.scrollableProps.addPaddingWhenPlayerIsPersisting,
                        t = s({
                            "root-scrollable": !this.state.scrollableProps.className,
                            "root-scrollable--persisting-player": e
                        }, this.state.scrollableProps.className || ""),
                        n = o.__assign({
                            contentClassName: "root-scrollable__content"
                        }, this.state.scrollableProps, {
                            className: t
                        });
                    return c.createElement(d.b, o.__assign({}, n, {
                        "data-a-target": "root-scroller",
                        scrollRef: this.setScrollableAreaRef
                    }), c.createElement(u._8, {
                        position: u._15.Relative,
                        fullWidth: !0,
                        className: "root-scrollable__wrapper",
                        refDelegate: this.props.contentRefDelegate
                    }, this.props.children))
                }, t.childContextTypes = {
                    setRootScrollableProps: l.func,
                    resetRootScrollableProps: l.func
                }, t
            }(c.Component));
        var m = Object(a.d)(r.f, Object(i.b)(function(e) {
                return {
                    playerIsPersisting: e.ui.persistentPlayerEnabled && e.ui.persistentPlayerIsPersisting
                }
            }))(p),
            h = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.shouldSetRootScrollableProps = function(e, t) {
                        return !(!e || !t) && (e.disableDebounce !== t.disableDebounce || (e.scrollRef !== t.scrollRef || (e.contentClassName !== t.contentClassName || (e.scrollContentClassName !== t.scrollContentClassName || (e.suppressScrollX !== t.suppressScrollX || (e.suppressScrollY !== t.suppressScrollY || e.className !== t.className))))))
                    }, t
                }
                return o.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.context.setRootScrollableProps && this.context.setRootScrollableProps(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.shouldSetRootScrollableProps(this.props, e) && this.context.setRootScrollableProps && this.context.setRootScrollableProps(e)
                }, t.prototype.componentWillUnmount = function() {
                    this.context.resetRootScrollableProps && this.context.resetRootScrollableProps()
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    setRootScrollableProps: l.func,
                    resetRootScrollableProps: l.func
                }, t
            }(c.Component);
        n.d(t, "a", function() {
            return m
        }), n.d(t, "b", function() {
            return h
        })
    },
    eY4D: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Prime_PrimeOfferList_PrimeOffers"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "dateOverride"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Time"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "primeOffers"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "dateOverride"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "dateOverride"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "title"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "imageURL"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "claimInstructions"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "description"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "deliveryMethod"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "priority"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "content"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "externalURL"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "publisher"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "categories"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "hasEntitlement"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "claimData"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "status"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 283
            }
        };
        n.loc.source = {
            body: "query Prime_PrimeOfferList_PrimeOffers($dateOverride: Time) {\nprimeOffers(dateOverride: $dateOverride) {\nid\ntitle\nimageURL\nclaimInstructions\ndescription\ndeliveryMethod\npriority\ncontent {\ngame {\nid\nname\n}\nexternalURL\npublisher\ncategories\n}\nself {\nhasEntitlement\nclaimData\nstatus\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    ekcc: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "TopNav_Store_CurrentUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hasPrime"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 62
            }
        };
        n.loc.source = {
            body: "query TopNav_Store_CurrentUser {\ncurrentUser {\nid\nhasPrime\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    emkL: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("6sO2"),
            o = n("l4QG"),
            s = n("Odds"),
            l = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.onHistoryChange = function(e) {
                        n.setState({
                            currentPathname: e.pathname
                        })
                    }, n.shouldShow = function() {
                        return n.props.link && n.state.currentPathname !== n.props.link.pathname
                    };
                    var i = a.o.experiments.getAssignment("TWILIGHT_EXTENDED_PRESENCE");
                    return n.state = {
                        currentPathname: location.pathname,
                        hasExtendedRichPresence: "variant_a" === i
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.historyUnlisten = a.o.history.listen(this.onHistoryChange)
                }, t.prototype.componentWillUnmount = function() {
                    this.historyUnlisten()
                }, t.prototype.render = function() {
                    if (!this.props.link || !this.shouldShow()) return null;
                    var e = Object(a.d)("Join", "JoinButton");
                    return this.props.availability === o.a.Offline && this.state.hasExtendedRichPresence && (e = Object(a.d)("Watch", "JoinButton")), r.createElement(s.v, {
                        linkTo: this.props.link,
                        onClick: this.props.onClick,
                        overlay: this.props.shouldHollowOverlay,
                        size: s.z.Small,
                        tabIndex: -1,
                        type: this.props.shouldHollowOverlay ? s.B.Hollow : s.B.Default
                    }, e)
                }, t
            }(r.Component);
        n.d(t, "a", function() {
            return l
        })
    },
    f8UT: function(e, t) {},
    fS5P: function(e, t) {},
    fc0G: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("F8kA"),
            o = n("6sO2"),
            s = n("hdYS"),
            l = n("+Znq"),
            c = n("vH/s"),
            d = n("LjAQ"),
            u = n("mw/a"),
            p = n("70dR"),
            m = n("Odds"),
            h = (n("Zifq"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleReportHosterClick = function() {
                        t.props.isLoggedIn ? t.props.showReportUserModal({
                            onClose: t.handleReportModalClose,
                            reportContext: {
                                contentType: u.a.User,
                                targetUserID: t.props.hostChannelID
                            },
                            title: Object(o.d)("Report {channelDisplayName}", {
                                channelDisplayName: t.props.hostChannelDisplayName
                            }, "VideoPlayerHostingUI")
                        }) : t.props.login()
                    }, t.handleReportModalClose = function(e) {
                        (e === d.b.MutationError || e === d.b.Success) && t.props.history.push("/")
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = !!this.props.hostedChannelDisplayName;
                    return r.createElement(m._35, {
                        className: "video-player-hosting-ui__container"
                    }, e && this.renderHeader(), r.createElement("span", {
                        key: "video-player"
                    }, this.props.children), r.createElement(m._8, {
                        display: e ? m.R.Block : m.R.Hide,
                        position: m._15.Relative,
                        zIndex: m._62.Above
                    }, e && this.renderFooter()))
                }, t.prototype.renderHeader = function() {
                    return r.createElement(m.e, {
                        type: m.j.SlideInBottom,
                        delay: m.f.Medium,
                        duration: m.g.Medium,
                        enabled: !0
                    }, r.createElement(a.a, {
                        key: "hosting-ui-header",
                        className: "video-player-hosting-ui__link",
                        to: {
                            pathname: "/" + this.props.hostedChannelLogin,
                            state: {
                                medium: c.PageviewMedium.Channel,
                                content: c.PageviewContent.Host
                            }
                        },
                        "data-a-target": "hosting-ui-link",
                        "data-test-selector": "video-player-hosting-ui__header"
                    }, r.createElement(m._35, {
                        className: "video-player-hosting-ui__header",
                        display: m.R.Flex,
                        background: m.n.AccentAlt2,
                        color: m.K.Overlay,
                        alignItems: m.c.Center,
                        padding: {
                            x: 1,
                            y: .5
                        },
                        "data-a-target": "hosting-ui-header"
                    }, r.createElement(m._8, {
                        className: "video-player-hosting-ui__avatar-container"
                    }, r.createElement(m.m, {
                        src: this.props.hostedChannelProfileImageURL || "",
                        size: 30,
                        alt: Object(o.d)("Hosted Channel {hostedChannelDisplayName}'s Avatar", {
                            hostedChannelDisplayName: this.props.hostedChannelDisplayName || ""
                        }, "VideoPlayerHostingUI")
                    })), r.createElement(m._35, {
                        margin: {
                            left: 1
                        },
                        fontSize: m.V.Size5
                    }, Object(o.d)("Hosting", "VideoPlayerHostingUI"), " ", r.createElement(m.Q, {
                        type: m._49.Span,
                        className: "video-player-hosting-ui__channel-name",
                        color: m.K.OverlayAlt,
                        "data-a-target": "hosting-ui-channel-name"
                    }, this.props.hostedChannelDisplayName)))))
                }, t.prototype.renderFooter = function() {
                    return r.createElement(m.e, {
                        type: m.j.SlideInTop,
                        enabled: !0,
                        delay: m.f.Medium,
                        duration: m.g.Medium
                    }, r.createElement(m._35, {
                        key: "hosting-ui-footer",
                        background: m.n.AccentAlt2,
                        className: "video-player-hosting-ui__footer",
                        display: m.R.Block,
                        padding: 1,
                        "data-test-selector": "video-player-hosting-ui__footer",
                        "data-a-target": "hosting-ui-footer"
                    }, r.createElement(m._8, {
                        padding: {
                            y: .5
                        },
                        display: m.R.Flex,
                        justifyContent: m._7.Between
                    }, r.createElement(m._8, {
                        display: m.R.Flex
                    }, r.createElement(m._8, {
                        margin: {
                            right: 1
                        }
                    }, r.createElement(s.a, {
                        "data-a-target": "hosting-ui-follow-button",
                        channelName: this.props.hostedChannelLogin || "",
                        channelLogin: this.props.hostedChannelLogin,
                        hostChannelLogin: this.props.hostChannelLogin,
                        hostChannelID: this.props.hostChannelID,
                        isHostedFollow: !0,
                        balloonDirection: m.r.BottomLeft,
                        followUIType: s.b.IconAndText,
                        unfollowUIType: s.b.IconOnly
                    })), r.createElement(m._8, null, r.createElement(p.a, {
                        channelLogin: this.props.hostedChannelLogin,
                        hostChannelID: this.props.hostChannelID,
                        hostChannelLogin: this.props.hostChannelLogin,
                        "data-a-target": "hosting-ui-subscribe-button"
                    }))), r.createElement(l.a, null, r.createElement(m.w, {
                        ariaLabel: Object(o.d)("More options", "HostingUI"),
                        overlay: !0,
                        icon: m._25.More,
                        onClick: this.handleReportHosterClick,
                        "data-a-target": "hosting-ui-more-button"
                    }), r.createElement(m.q, {
                        direction: m.r.TopRight,
                        "data-a-target": "hosting-ui-more-balloon"
                    }, r.createElement(m._8, {
                        padding: {
                            y: 1
                        }
                    }, r.createElement(m._6, {
                        onClick: this.handleReportHosterClick,
                        "data-a-target": "hosting-ui-report-button"
                    }, r.createElement(m._8, {
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, Object(o.d)("Report {hostChannelDisplayName}", {
                        hostChannelDisplayName: this.props.hostChannelDisplayName
                    }, "VideoPlayerHostingUI")))))))))
                }, t
            }(r.Component)),
            f = n("RH2O"),
            g = n("2KeS"),
            v = n("+xm8"),
            b = n("V5M+"),
            k = n("f2i/"),
            y = n("Aj/L"),
            _ = n("oSFp");
        var S = Object(f.b)(function(e) {
                return {
                    isLoggedIn: Object(y.d)(e)
                }
            }, function(e) {
                return Object(g.b)({
                    login: function() {
                        return Object(k.f)(v.a.ReportHoster)
                    },
                    showReportUserModal: function(e) {
                        var t = i.__rest(e, []);
                        return Object(b.d)(_.a, t)
                    }
                }, e)
            })(Object(a.f)(h)),
            E = n("CIox"),
            C = n("BhGt"),
            N = [];
        C.onchange = function() {
            N.forEach(function(e) {
                e()
            })
        };
        var T, w = n("7enT"),
            O = n("0nzt"),
            R = n("Hjbq"),
            D = n("j0cR"),
            I = n("HW6M"),
            x = n("BwgW"),
            F = n("knr3"),
            P = n("OAwv"),
            U = n("eBiB"),
            j = n("HM6l"),
            A = n("JpYe"),
            L = n("ZVME"),
            M = n("CSlQ"),
            B = n("L3z0"),
            W = n("5MsU"),
            V = n("Tjmd"),
            H = (n("4NZK"), n("Ryxq"));
        ! function(e) {
            e.AnimatedThumbnails = "animated_thumbnails", e.Embed = "embed", e.Feed = "feed", e.Frontpage = "frontpage", e.Site = "site", e.Highlighter = "highlighter", e.Onboarding = "onboarding"
        }(T || (T = {}));
        var G = {
            allowfullscreen: !0,
            externalfullscreen: !1,
            autoplay: !0,
            branding: !1,
            channelInfo: !1,
            controls: !0,
            height: "100%",
            playsinline: !0,
            player: T.Site,
            showInfo: !1,
            showtheatre: !1,
            trackingProperties: {
                client_app: "twilight"
            },
            width: "100%",
            oauth_token: ""
        };

        function z() {
            return !!window.Twitch && !!window.Twitch.Player
        }
        var q = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.logger = o.j.withCategory("video-player"), n.checkPlayerDependencyStatus = function() {
                        z() ? (n.setState({
                            canInitializePlayer: !0
                        }), n.checkPlayerDependencyAnimationFrame = null) : n.checkPlayerDependencyAnimationFrame = requestAnimationFrame(n.checkPlayerDependencyStatus)
                    }, n.attachRef = function(e) {
                        return n.playerRef = e
                    }, n.onMetadataLoaded = function() {
                        var e = n.player && n.player.getSessionInfo();
                        e && (n.logger.debug("Got player session info from player instance", e), o.n.setVideoPlayerTrackingData({
                            broadcastID: e.broadcastId,
                            playSessionID: e.playSessionId
                        }))
                    }, n.onOpenStream = function() {
                        if (n.props.playerTypeOverride === T.Frontpage && n.player)
                            if (n.props.channelLogin) o.o.history.push("/" + n.props.channelLogin);
                            else if (n.props.vodID) {
                            var e = Math.floor(n.player.getCurrentTime());
                            o.o.history.push("/videos/" + n.props.vodID + "?t=" + Object(H.a)(e))
                        } else n.props.collectionID && o.o.history.push("/collections/" + n.props.collectionID)
                    }, n.onPlayerReady = function() {
                        n.player && (n.logger.debug("Ready"), n.props.latencyTracking.reportInteractive(), n.hasPlayed = !1, n.props.latencyTracking.reportCustomEvent(n.playerLoaded), n.setState({
                            playerInitialized: !0
                        }, n.updatePlayerTrackingDataFromProps))
                    }, n.onPlayerPlay = function() {
                        n.logger.debug("Play"), n.reportPlayerBuffering(), n.lastPausedProp = !1, n.togglePause(!1)
                    }, n.onPlayerPlaying = function() {
                        n.logger.debug("Playing"), n.reportPlayerPlayed(), n.lastPausedProp = !1, n.state.playerRefID !== n.props.activeVideoPlayerRefID && n.props.reportPlayerInstanceStarted && n.props.reportPlayerInstanceStarted(n.state.playerRefID), n.togglePause(!1)
                    }, n.onPause = function() {
                        n.logger.debug("Pause"), n.lastPausedProp = !0, n.togglePause(!0)
                    }, n.togglePause = function(e) {
                        n.setState({
                            playerPaused: e
                        }), n.props.onPauseToggled && n.props.onPauseToggled(e)
                    }, n.onStreamStatusOnline = function() {
                        n.props.onStreamStatusChange && n.props.onStreamStatusChange(W.a.Online)
                    }, n.onStreamStatusOffline = function() {
                        n.props.onStreamStatusChange && n.props.onStreamStatusChange(W.a.Offline)
                    }, n.onTheatreChange = function(e) {
                        e ? (n.logger.debug("Theatre Entered"), n.props.enableTheatreMode && !n.props.theatreModeEnabled && n.props.enableTheatreMode()) : (n.logger.debug("Theatre Exited"), n.props.disableTheatreMode && n.props.theatreModeEnabled && n.props.disableTheatreMode())
                    }, n.onFullScreenChange = function() {
                        n.player && (n.logger.debug("Fullscreen change", n.player.fullscreen), n.player.fullscreen !== n.state.isFullScreen && n.setState({
                            isFullScreen: n.player.fullscreen
                        }))
                    }, n.onExternalFullScreenChange = function() {
                        n.player && (n.logger.debug("External Fullscreen change", n.player.fullscreen), n.player.fullscreen !== n.state.isFullScreen && (n.player.fullscreen ? n.enterFullscreen() : n.exitFullscreen()))
                    }, n.onTwilightFullscreenChange = function() {
                        var e = n.props.fullscreen.element(),
                            t = !!e && !!n.playerRef && e.contains(n.playerRef);
                        n.state.isFullScreen && !t && n.exitFullscreen()
                    }, n.onSeek = function() {
                        n.props.onSeek && n.player && n.props.onSeek(n.player.getCurrentTime())
                    }, n.onTimeUpdate = function() {
                        n.props.onVideoTimeChange && n.player && n.props.onVideoTimeChange(n.player.getCurrentTime())
                    }, n.onHistoryChange = function() {
                        n.state.isFullScreen && n.exitFullscreen()
                    }, n.onTransitionToCollectionVod = function(e) {
                        if (n.props.onNavigationRequest) {
                            var t = {};
                            e.vodId && (t.videoID = Object(U.a)(e.vodId)), e.collectionId && (t.collectionID = e.collectionId), n.props.onNavigationRequest(t)
                        }
                    }, n.onTransitionToRecommendedVod = function(e) {
                        if (n.props.onNavigationRequest) {
                            var t = {};
                            e.vodId && (t.videoID = Object(U.a)(e.vodId)), n.props.onNavigationRequest(t)
                        }
                    }, n.onPersistentPlayerToggled = function() {
                        n.props.togglePersistentPlayer && n.props.togglePersistentPlayer()
                    }, n.updatePlayerTrackingData = function(e) {
                        if (n.state.playerInitialized && n.player) {
                            var t = o.n.getLastPageview(),
                                r = {
                                    host_channel: e.hostChannel,
                                    collapse_right: !e.rightColumnExpanded,
                                    collapse_left: !e.sideNavExpanded
                                };
                            t ? n.logger.debug("Tracking data updated.", {
                                pageviewProperties: t,
                                updates: r
                            }) : n.logger.debug("pageviewProperties not found; only hosting status updated", {
                                pageviewProperties: t,
                                updates: r
                            }), n.player.setTrackingProperties(i.__assign({}, t, r))
                        }
                    }, n.updatePlayerTrackingDataFromProps = function() {
                        n.updatePlayerTrackingData(n.props)
                    }, n.updatePlayerType = function(e) {
                        var t = e || G.player;
                        n.player && n.playerType !== t && (n.player.setPlayerType(t), n.playerType = t)
                    }, n.maybeRecordClip = function() {
                        n.player && n.state.playerInitialized && n.player.recordClip()
                    }, n.playerBuffering = n.registerBufferingEvent(), n.playerCreated = n.registerCreatedEvent(), n.playerLoaded = n.registerLoadedEvent(), n.playerPlayed = n.registerPlayedEvent(), n.state = {
                        canInitializePlayer: z(),
                        playerInitialized: !1,
                        isFullScreen: !1,
                        playerPaused: !1,
                        playerRefID: Object(j.a)()
                    }, n.playerType = t.playerTypeOverride || G.player, n.lastSetChannel = t.channelLogin, t.fullscreen.addChangeListener(n.onTwilightFullscreenChange), t.instanceRef && t.instanceRef(n), n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    if (this.props.latencyTracking.reportCustomEvent(this.playerCreated), this.bindHotKeys(), this.historyUnlistener = this.props.history.listen(this.onHistoryChange), this.state.canInitializePlayer ? this.initializePlayer() : this.checkPlayerDependencyAnimationFrame = window.requestAnimationFrame(this.checkPlayerDependencyStatus), o.n.eventEmitter.addListener(c.SpadeEventType.Pageview, this.updatePlayerTrackingDataFromProps), window.__playerScriptChunk && !t.tagInjected) {
                        this.logger.debug("Loading player chunk after page loaded");
                        var e = document.createElement("script");
                        e.async = !0, e.crossOrigin = "anonymous", e.src = window.__playerScriptChunk, document.body.appendChild(e);
                        var n = document.createElement("link");
                        n.href = window.__playerStyleChunk, n.media = "screen", n.rel = "stylesheet", n.type = "text/css", document.body.appendChild(n), t.tagInjected = !0
                    }
                }, t.prototype.componentWillUpdate = function(e, t) {
                    if (this.state.canInitializePlayer || !t.canInitializePlayer) {
                        if (t.canInitializePlayer && t.playerInitialized) {
                            this.updatePlayerTrackingData(e), this.updatePlayerType(e.playerTypeOverride), this.player && t.isFullScreen !== this.player.fullscreen && this.player.setFullscreen(t.isFullScreen), this.player && e.theatreModeEnabled !== this.player.getTheatre() && this.player.setTheatre(e.theatreModeEnabled), this.player && e.miniModeEnabled !== this.props.miniModeEnabled && this.player.setMiniPlayerMode(!!e.miniModeEnabled), this.player && t.playerPaused !== this.lastPausedProp && (t.playerPaused ? this.player.pause() : t.playerPaused || this.player.play(), this.lastPausedProp = t.playerPaused);
                            var n = e.channelLogin !== this.lastSetChannel;
                            if (this.player && e.channelLogin && (n || Object(V.a)(this.props, e))) return this.logger.debug("Setting Channel: ", e.channelLogin), this.player.setChannel(e.channelLogin), this.lastSetChannel = e.channelLogin, void o.n.setVideoPlayerTrackingData({
                                vodID: void 0
                            });
                            var i = e.collectionID && this.props.collectionID !== e.collectionID,
                                r = e.vodID && this.props.vodID !== e.vodID;
                            if (i || r) {
                                var a = e.vodID ? Object(A.b)(e.vodID) : "";
                                if ("" !== a && o.n.setVideoPlayerTrackingData({
                                        vodID: e.vodID
                                    }), !this.player) return;
                                i || e.collectionID && r ? this.player.setCollection(e.collectionID, a, e.nextVideoOffset) : this.player.setVideo(a, e.nextVideoOffset)
                            } else void 0 !== e.nextVideoOffset && e.nextVideoOffset >= 0 && this.props.nextVideoOffset !== e.nextVideoOffset && this.player && this.player.setCurrentTime(e.nextVideoOffset)
                        }
                    } else this.initializePlayer()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (void 0 !== e.paused && this.props.paused !== e.paused) this.togglePause(e.paused);
                    else {
                        var t = this.props.activeVideoPlayerRefID,
                            n = e.activeVideoPlayerRefID;
                        t !== n && (n === this.state.playerRefID && this.state.playerPaused ? this.togglePause(!1) : n === this.state.playerRefID || this.state.playerPaused || this.togglePause(!0))
                    }
                }, t.prototype.render = function() {
                    var e = I("video-player", {
                        "video-player--theatre": this.props.theatreModeEnabled,
                        "video-player--theatre-whispers": this.props.theatreModeEnabled && this.props.isWhispersBottomBarVisible,
                        "video-player--logged-in": this.props.isLoggedIn,
                        "video-player--fullscreen": this.state.isFullScreen
                    });
                    return r.createElement("div", {
                        className: I(e),
                        "data-test-selector": "video-player"
                    }, r.createElement("div", {
                        className: "video-player__container",
                        ref: this.attachRef
                    }))
                }, t.prototype.componentWillUnmount = function() {
                    this.props.latencyTracking.reportInteractive(), this.unbindHotKeys(), this.historyUnlistener && this.historyUnlistener(), this.checkPlayerDependencyAnimationFrame && cancelAnimationFrame(this.checkPlayerDependencyAnimationFrame), this.maybeDetachFromWindow(), this.state.isFullScreen && this.exitFullscreen(), this.props.fullscreen.removeChangeListener(this.onTwilightFullscreenChange), this.props.onDestroy && this.props.onDestroy(), o.n.eventEmitter.removeListener(c.SpadeEventType.Pageview, this.updatePlayerTrackingDataFromProps), this.player && (this.player.removeEventListener(W.a.PlayerReady, this.onPlayerReady), this.player.removeEventListener(W.a.Online, this.onStreamStatusOnline), this.player.removeEventListener(W.a.Offline, this.onStreamStatusOffline), this.player.removeEventListener(B.a.Ended, this.onStreamStatusOffline), this.player.removeEventListener(B.a.Play, this.onPlayerPlay), this.player.removeEventListener(B.a.Playing, this.onPlayerPlaying), this.player.removeEventListener(W.a.TheatreChange, this.onTheatreChange), this.player.removeEventListener(W.a.TransitionToCollectionVOD, this.onTransitionToCollectionVod), this.player.removeEventListener(W.a.FullscreenChange, this.onFullScreenChange), this.player.removeEventListener(W.a.ExternalFullscreenChange, this.onExternalFullScreenChange), this.player.removeEventListener(B.a.Seeked, this.onSeek), this.player.removeEventListener(B.a.TimeUpdate, this.onTimeUpdate), this.player.removeEventListener(W.a.OpenStream, this.onOpenStream), this.player.removeEventListener(B.a.Pause, this.onPause), this.player.removeEventListener(W.a.PersistenPlayerToggle, this.onPersistentPlayerToggled), this.player.removeEventListener(B.a.LoadedMetadata, this.onMetadataLoaded), x.extensionService.unregisterPlayer(), this.player.destroy()), o.n.setVideoPlayerTrackingData({
                        vodID: void 0
                    })
                }, t.prototype.trackMiniPlayerAction = function(e, t) {
                    this.player && this.state.playerInitialized && this.player.trackMiniPlayerAction(e, t)
                }, t.prototype.initializePlayer = function() {
                    var e = i.__assign({}, G, {
                        showtheatre: !this.props.disableTheatreButton,
                        allowfullscreen: !this.props.disableFullscreen,
                        externalfullscreen: this.props.fullscreen.supported(),
                        autoplay: !this.props.paused
                    });
                    this.props.playerTypeOverride && (e.player = this.props.playerTypeOverride, this.playerType = this.props.playerTypeOverride), this.props.channelLogin && (e.channel = this.props.channelLogin, this.lastSetChannel = this.props.channelLogin), this.props.collectionID && (e.collection = this.props.collectionID), this.props.vodID && (e.video = Object(A.b)(this.props.vodID), o.n.setVideoPlayerTrackingData({
                        vodID: this.props.vodID
                    })), this.props.showChannelInfoOnHover && (e.showInfo = this.props.showChannelInfoOnHover), void 0 !== this.props.nextVideoOffset && this.props.nextVideoOffset >= 0 && (e.time = Object(H.a)(this.props.nextVideoOffset)), this.lastPausedProp = this.props.paused, e.oauth_token = this.props.authToken || "", this.logger.debug("Initializing", e);
                    var t = new window.Twitch.Player(this.playerRef, e);
                    this.player = t, t.addEventListener(W.a.PlayerReady, this.onPlayerReady), t.addEventListener(W.a.Online, this.onStreamStatusOnline), t.addEventListener(W.a.Offline, this.onStreamStatusOffline), t.addEventListener(B.a.Ended, this.onStreamStatusOffline), t.addEventListener(B.a.Play, this.onPlayerPlay), t.addEventListener(B.a.Playing, this.onPlayerPlaying), t.addEventListener(B.a.Seeked, this.onSeek), t.addEventListener(B.a.TimeUpdate, this.onTimeUpdate), t.addEventListener(W.a.TheatreChange, this.onTheatreChange), t.addEventListener(W.a.FullscreenChange, this.onFullScreenChange), t.addEventListener(W.a.ExternalFullscreenChange, this.onExternalFullScreenChange), t.addEventListener(W.a.TransitionToCollectionVOD, this.onTransitionToCollectionVod), t.addEventListener(W.a.TransitionToRecommendedVOD, this.onTransitionToRecommendedVod), t.addEventListener(W.a.OpenStream, this.onOpenStream), t.addEventListener(B.a.Pause, this.onPause), t.addEventListener(W.a.PersistenPlayerToggle, this.onPersistentPlayerToggled), t.addEventListener(B.a.LoadedMetadata, this.onMetadataLoaded), x.extensionService.registerPlayer(this.player), x.extensionService.setPlayerWindow(window), this.props.onInit && this.props.onInit(t), this.maybeAttachToWindow(this.props)
                }, t.prototype.registerBufferingEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent({
                        benchmark: 1e3,
                        group: L.a.Player,
                        key: L.b.PlayerBuffering,
                        label: L.c.Buffering
                    })
                }, t.prototype.registerCreatedEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent({
                        benchmark: 1e3,
                        group: L.a.Player,
                        key: L.b.PlayerCreated,
                        label: L.c.Created
                    })
                }, t.prototype.registerLoadedEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent({
                        benchmark: 2500,
                        group: L.a.Player,
                        key: L.b.PlayerLoaded,
                        label: L.c.Init
                    })
                }, t.prototype.registerPlayedEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent({
                        benchmark: 4e3,
                        group: L.a.Player,
                        key: L.b.PlayerPlayed,
                        label: L.c.FirstFrame
                    })
                }, t.prototype.reportPlayerBuffering = function() {
                    this.hasBuffered || (this.hasBuffered = !0, this.playerBuffering && this.props.latencyTracking.reportCustomEvent(this.playerBuffering))
                }, t.prototype.reportPlayerPlayed = function() {
                    this.hasPlayed || (this.hasPlayed = !0, this.playerPlayed && this.props.latencyTracking.reportCustomEvent(this.playerPlayed))
                }, t.prototype.enterFullscreen = function() {
                    this.setState({
                        isFullScreen: !0
                    }), this.props.supportTheatreFullscreen ? (this.props.enableFullscreenTheatreMode(), this.props.fullscreen.enable(document.body)) : this.props.fullscreen.enable(this.playerRef)
                }, t.prototype.exitFullscreen = function() {
                    this.state.isFullScreen && (this.props.disableFullscreenTheatreMode(), this.setState({
                        isFullScreen: !1
                    }), this.props.fullscreen.disable())
                }, t.prototype.maybeAttachToWindow = function(e) {
                    P.parse(window.location.search).attachPlayer && e.attachToWindow && this.player && (window.player = this.player)
                }, t.prototype.maybeDetachFromWindow = function() {
                    window.player = void 0
                }, t.prototype.bindHotKeys = function() {
                    F.bind("alt+x", this.maybeRecordClip)
                }, t.prototype.unbindHotKeys = function() {
                    F.unbind("alt+x")
                }, t.tagInjected = !1, t
            }(r.Component),
            Q = Object(M.d)("VideoPlayer")(q);
        var K = Object(g.d)(Object(f.b)(function(e) {
            return {
                isWhispersBottomBarVisible: Object(O.b)(e),
                theatreModeEnabled: e.ui.theatreModeEnabled,
                rightColumnExpanded: e.ui.rightColumnExpanded,
                sideNavExpanded: e.ui.sideNavExpanded,
                isLoggedIn: Object(y.d)(e),
                authToken: Object(y.a)(e),
                activeVideoPlayerRefID: Object(D.a)(e)
            }
        }, function(e) {
            return Object(g.b)({
                enableTheatreMode: w.v,
                disableTheatreMode: w.t,
                enableFullscreenTheatreMode: w.u,
                disableFullscreenTheatreMode: w.s,
                togglePersistentPlayer: w.B,
                reportPlayerInstanceStarted: R.b
            }, e)
        }), function(e) {
            return function(t) {
                function n() {
                    var e = null !== t && t.apply(this, arguments) || this;
                    return e.addChangeListener = function(e) {
                        N.push(e)
                    }, e.removeChangeListener = function(e) {
                        N = N.filter(function(t) {
                            return t !== e
                        })
                    }, e
                }
                return i.__extends(n, t), n.prototype.render = function() {
                    var t = {
                        fullscreen: {
                            addChangeListener: this.addChangeListener,
                            removeChangeListener: this.removeChangeListener,
                            supported: this.supported,
                            element: this.element,
                            enable: this.enable,
                            disable: this.disable
                        }
                    };
                    return r.createElement(e, i.__assign({}, t, this.props))
                }, n.prototype.supported = function() {
                    return !!C.enabled
                }, n.prototype.element = function() {
                    return C.element
                }, n.prototype.enable = function(e) {
                    C.request(e)
                }, n.prototype.disable = function() {
                    C.exit()
                }, n
            }(r.Component)
        }, E.f)(Q);

        function $(e, t, n) {
            if (e.collectionID || !e.videoID)
                if (e.collectionID && e.videoID) {
                    if (n && n.currentVideoID && n.currentCollectionID && n.currentVideoID === e.videoID && n.currentCollectionID === e.collectionID) return;
                    t.push("/videos/" + e.videoID + "?collection=" + e.collectionID)
                } else !e.collectionID || e.videoID ? o.j.withCategory("video-player").error(new Error("No collection or video specified from the emitted player transition event."), "No collection or video specified from the emitted player transition event.") : t.push("/collections/" + e.collectionID);
            else t.push("/videos/" + e.videoID)
        }
        n.d(t, !1, function() {
            return "hosting-ui-report-button"
        }), n.d(t, !1, function() {
            return "hosting-ui-more-balloon"
        }), n.d(t, !1, function() {
            return "hosting-ui-more-button"
        }), n.d(t, !1, function() {
            return "hosting-ui-channel-name"
        }), n.d(t, !1, function() {
            return "video-player-hosting-ui__header"
        }), n.d(t, !1, function() {
            return "video-player-hosting-ui__footer"
        }), n.d(t, !1, function() {
            return h
        }), n.d(t, "a", function() {
            return S
        }), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "b", function() {
            return T
        }), n.d(t, !1, function() {}), n.d(t, "c", function() {
            return K
        }), n.d(t, "d", function() {
            return $
        })
    },
    gIPD: function(e, t, n) {
        e.exports = n.p + "assets/friend_requests-aec9595d7e19764bc23d982c8c0f43d9.png"
    },
    h4Qz: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Whispers_Thread_WhisperThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "cursor"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "whisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "userLastMessageRead"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "sentAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "participants"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "chatColor"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "profileImageURL"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "width"
                                            },
                                            value: {
                                                kind: "IntValue",
                                                value: "70"
                                            }
                                        }],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "spamInfo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "lastMarkedNotSpamAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "likelihood"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isMuted"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isArchived"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "messages"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "20"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "after"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "cursor"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "content"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "content"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "emotes"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "emoteID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "setID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "from"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "to"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "from"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "sentAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "editedAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "deletedAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "unreadMessagesCount"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 449
            }
        };
        n.loc.source = {
            body: "query Whispers_Thread_WhisperThread($id: ID! $cursor: Cursor) {\nwhisperThread(id: $id) {\nid\nuserLastMessageRead {\nid\nsentAt\n}\nparticipants {\nid\nchatColor\ndisplayName\nprofileImageURL(width: 70)\nlogin\n}\nspamInfo {\nlastMarkedNotSpamAt\nlikelihood\n}\nisMuted\nisArchived\nmessages(first: 20 after: $cursor) {\nedges {\ncursor\nnode {\nid\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n}\n}\nfrom {\nid\n}\nsentAt\neditedAt\ndeletedAt\n}\n}\n}\nunreadMessagesCount\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    hdYS: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            r = n("2KeS"),
            a = n("+xm8"),
            o = n("f2i/"),
            s = n("Aj/L"),
            l = n("4bQk");
        var c = Object(i.b)(function(e) {
            var t = Object(s.c)(e);
            return {
                currentUserLogin: t && t.login,
                isLoggedIn: Object(s.d)(e)
            }
        }, function(e) {
            return Object(r.b)({
                login: function() {
                    return Object(o.f)(a.a.FollowButton)
                }
            }, e)
        })(l.a);
        n.d(t, "a", function() {
            return c
        }), n.d(t, "b", function() {
            return l.b
        })
    },
    hvzu: function(e, t, n) {
        "use strict";
        var i, r = n("TToO"),
            a = n("GiK3"),
            o = n("6sO2"),
            s = n("8RKZ"),
            l = n("l21v");
        ! function(e) {
            e[e.Text = 0] = "Text", e[e.Link = 1] = "Link"
        }(i || (i = {}));
        var c = n("Odds");
        t.a = p, n.d(t, "g", function() {
            return m
        }), n.d(t, "f", function() {
            return h
        }), n.d(t, "b", function() {
            return f
        }), n.d(t, "e", function() {
            return g
        }), n.d(t, "d", function() {
            return v
        }), n.d(t, "c", function() {
            return b
        });
        var d = "whisper-message-part";

        function u(e) {
            var t = function(e) {
                var t = e.split(/\s+/),
                    n = [];
                return t.forEach(function(e, r) {
                    var a = /([^\w@#%\-+=:~])?(?:(https?:\/\/)?(?:[\w@#%\-+=:~]+\.)+[a-z]{2,8}(?:\/[\w./@#%&()\-+=:?~]*)?)([^\w./@#%&()\-+=:?~]|\s|$)/g,
                        o = a.exec(e);
                    if (o) {
                        var s = o.index,
                            l = !1,
                            c = !1,
                            d = o[1];
                        d && (s += 1, /\s/.test(d) || (l = !0)), 0 !== s && n.push({
                            type: i.Text,
                            content: (c ? " " : "") + e.slice(0, s) + (l ? " " : "")
                        }), c = !1;
                        var u = a.lastIndex,
                            p = o[3];
                        p && (u -= 1, /\s/.test(p) || (c = !0));
                        var m = e.slice(s, u);
                        if (m.indexOf("@") > -1 && (-1 === m.indexOf("/") || m.indexOf("@") < m.indexOf("/"))) n.push({
                            type: i.Link,
                            content: {
                                displayText: m,
                                url: "mailto:" + m,
                                shouldOpenInNewTab: !1
                            }
                        });
                        else {
                            var h = (o[2] ? "" : "https://") + e.slice(s, u);
                            n.push({
                                type: i.Link,
                                content: {
                                    displayText: e.slice(s, u),
                                    shouldOpenInNewTab: !0,
                                    url: h
                                }
                            })
                        }
                        var f = e.slice(u),
                            g = "";
                        r < t.length - 1 && (g = " "), f && n.push({
                            type: i.Text,
                            content: (c ? " " : "") + f + g
                        })
                    } else {
                        var v = n.length && n[n.length - 1];
                        if (g = "", r < t.length - 1 && (g = " "), v && v.type === i.Text) v.content += e + g;
                        else {
                            var b = "";
                            r && (b = " "), n.push({
                                type: i.Text,
                                content: b + e + g
                            })
                        }
                    }
                }), n
            }(e);
            return t.reduce(function(e, n, r) {
                if (n.type === i.Text) e.push(n.content);
                else if (n.type === i.Link) {
                    t[r - 1] && t[r - 1].type === i.Link && e.push(" "), e.push(a.createElement("a", {
                        key: r,
                        href: n.content.url,
                        target: "__blank"
                    }, n.content.displayText))
                }
                return e
            }, [])
        }

        function p(e, t, n) {
            var i = [],
                r = 0,
                p = Object(l.d)(e);
            if (t.forEach(function(t) {
                    var n = t.from,
                        o = t.to,
                        m = {
                            themed: !1,
                            sources: {
                                "1x": Object(l.f)("" + t.emoteID, 1),
                                "2x": Object(l.f)("" + t.emoteID, 2),
                                "4x": Object(l.f)("" + t.emoteID, 4)
                            }
                        };
                    if (n > r) {
                        var h = p ? p.slice(r, n).join("") : e.slice(r, n);
                        i.push(a.createElement("span", {
                            key: "str-" + r,
                            "data-a-target": d,
                            className: "thread-message__message--part"
                        }, u(h)))
                    }
                    var f = p ? p.slice(n, o + 1).join("") : e.slice(n, o + 1);
                    i.push(a.createElement(s.a, {
                        key: "emote-" + r,
                        tooltipDirection: c._54.Top,
                        className: "thread-message__message--emote",
                        srcSet: m,
                        srcKey: "1x",
                        alt: f
                    })), r = o + 1
                }), r < e.length) {
                var m = p ? p.slice(r, p.length).join("") : e.slice(r, e.length);
                i.push(a.createElement("span", {
                    key: "str-" + r,
                    "data-a-target": d,
                    className: "thread-message__message--part"
                }, u(m)))
            }
            if (n) {
                var h = Object(o.d)("edited", "ThreadMessage"),
                    f = Object(o.d)("{timestamp, date, full} {timestamp, time, long}", {
                        timestamp: new Date(n)
                    }, "ThreadMessage");
                i.push(a.createElement(c._2, {
                    key: "editedAt",
                    margin: {
                        left: 1
                    }
                }, a.createElement(c.Q, {
                    type: c._49.Span,
                    className: "thread-message__message--edited",
                    title: f,
                    color: c.K.Alt2
                }, "(" + h + ")")))
            }
            return i
        }
        var m = function(e) {
                var t = "/me " === e.content.substr(0, 4);
                t && (e.content = e.content.substr(4), e.emotes = e.emotes.map(function(e) {
                    return r.__assign({}, e, {
                        from: e.from - 4,
                        to: e.to - 4
                    })
                }));
                var n = p(e.content, e.emotes, e.editedAt);
                if (n.unshift(a.createElement("span", {
                        key: "str-separator"
                    }, t ? " " : ": ")), e.deletedAt) return null;
                var i = e.from && e.from.chatColor || "",
                    s = e.from && e.from.displayName || a.createElement(c.Q, {
                        type: c._49.Span,
                        italic: !0
                    }, Object(o.d)("Unknown", "ThreadMessage")),
                    l = t ? i : "";
                return a.createElement(c._8, {
                    padding: {
                        x: 1,
                        y: .5
                    }
                }, a.createElement("span", {
                    className: "thread-message__message--user-name",
                    "data-a-target": "whisper-message-name",
                    style: {
                        color: i
                    }
                }, s), a.createElement("span", {
                    style: {
                        color: l
                    }
                }, n))
            },
            h = function() {
                return a.createElement(c._8, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, Object(o.d)("Please don't share passwords or personal information.", "whispers"))
            },
            f = function() {
                return a.createElement(c._8, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, Object(o.d)("This account is no longer active.", "whispers"))
            },
            g = function(e) {
                var t = new Date,
                    n = Object(o.d)("Today, {timestamp, time, medium}", {
                        timestamp: e.timestamp
                    }, "ThreadMessage"),
                    i = Object(o.d)("{timestamp, time, medium}", {
                        timestamp: e.timestamp
                    }, "ThreadMessage"),
                    r = e.timestamp.toDateString() === t.toDateString() ? n : i;
                return a.createElement(c._8, {
                    padding: {
                        y: 1
                    },
                    textAlign: c._45.Center
                }, "" + r)
            },
            v = function(e) {
                return a.createElement(c._8, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, a.createElement(c.Q, {
                    type: c._49.Span,
                    color: c.K.Alt2
                }, e.content))
            },
            b = function() {
                return a.createElement(c._8, {
                    textAlign: c._45.Center,
                    padding: {
                        y: .5
                    }
                }, Object(o.d)("New Whispers", "whispers"))
            }
    },
    iGr2: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "TopNav_PrimeUpsell_CurrentUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hasPrime"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hasTurbo"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "requestInfo"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "countryCode"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 105
            }
        };
        n.loc.source = {
            body: "query TopNav_PrimeUpsell_CurrentUser {\ncurrentUser {\nid\nhasPrime\nhasTurbo\n}\nrequestInfo {\ncountryCode\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    iMOk: function(e, t, n) {
        "use strict";
        var i = n("GiK3"),
            r = n("6sO2"),
            a = n("NXs7"),
            o = n("3iBR"),
            s = n("iydZ"),
            l = n("CFVp"),
            c = n("qe65");
        n("1pvm");

        function d(e) {
            var t, n = Object(r.d)("{bitsAmount} Bits", {
                bitsAmount: e.count.toString()
            }, "Bits--BitsCount");
            if (e.withImage) {
                var d = e.bitsConfig && e.bitsConfig.indexedActions[o.g];
                d || (d = Object(l.b)());
                var u = d.orderedTiers.find(function(t) {
                    return t.bits <= e.count
                });
                if (u) {
                    var p = Object(s.b)(u, void 0, e.animated);
                    return void 0 !== e.themeOverride && (e.themeOverride === a.a.Light ? p.dark = p.light : p.light = p.dark), t = i.createElement(c.a, {
                        className: "bits-count--img",
                        sources: p
                    }), i.createElement("strong", {
                        className: "bits-count",
                        "data-a-target": "bits-count"
                    }, i.createElement("span", null, t, " ", e.withText ? n : ""))
                }
            }
            return i.createElement("strong", {
                className: "bits-count",
                "data-a-target": "bits-count"
            }, i.createElement("span", null, n))
        }
        n.d(t, "a", function() {
            return d
        })
    },
    iOr9: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("6sO2"),
            o = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.logger = a.o.logger.withCategory("component-experiment");
                    var i = a.o.experiments.getAssignment(n.props.name, n.props.channel ? {
                        channel: n.props.channel
                    } : {});
                    return i && n.props.assignments[i] ? n.logger.debug("Displaying component for experiment", {
                        name: n.props.name,
                        assignment: i
                    }) : n.logger.debug("Displaying fallback component for experiment", {
                        name: n.props.name,
                        assignment: i
                    }), n.state = {
                        assignment: i
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.state.assignment && this.props.assignments[this.state.assignment]) {
                        var e = this.props.assignments[this.state.assignment]();
                        return "string" == typeof e ? (window.location.replace(e), null) : e
                    }
                    return this.props.assignments.fallback()
                }, t
            }(r.Component);
        n.d(t, "a", function() {
            return o
        })
    },
    iPhu: function(e, t, n) {
        "use strict";
        var i, r = n("TToO"),
            a = n("GiK3"),
            o = n("6sO2"),
            s = n("Odds"),
            l = (n("Di3n"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        isError: !1,
                        options: null,
                        hovering: !1
                    }, n.logger = o.o.logger.withCategory("user-card-layer"), n.clearTimeoutAndRun = function(e, t) {
                        void 0 === t && (t = 400), n.displayTimeout && (clearTimeout(n.displayTimeout), n.displayTimeout = 0), n.displayTimeout = setTimeout(function() {
                            e(), n.displayTimeout = 0
                        }, t)
                    }, n.setRef = function(e) {
                        n.removeEventListeners(), n.addEventListeners(e), n.ref = e
                    }, n.addEventListeners = function(e) {
                        e && (e.addEventListener("mouseenter", n.handleMouseEnter, !0), e.addEventListener("mouseleave", n.handleMouseLeave))
                    }, n.removeEventListeners = function() {
                        n.ref && (n.ref.removeEventListener("mouseenter", n.handleMouseEnter), n.ref.removeEventListener("mouseleave", n.handleMouseLeave))
                    }, n.handleMouseEnter = function() {
                        n.setState({
                            hovering: !0
                        })
                    }, n.handleMouseLeave = function() {
                        n.setState({
                            hovering: !1
                        }, function() {
                            n.displayTimeout || n.hideUserCard()
                        })
                    }, i = n, n
                }
                return r.__extends(t, e), t.prototype.componentDidCatch = function(e, t) {
                    var n = this;
                    this.setState({
                        isError: !0
                    }, function() {
                        n.logger.error(e, "A unhandled exception occurred in the component hierarchy", {
                            info: t
                        })
                    })
                }, t.prototype.componentDidUpdate = function() {
                    this.state.options || this.removeEventListeners()
                }, t.prototype.render = function() {
                    if (this.state.isError) return null;
                    var e = null;
                    if (this.state.options) {
                        var t = {
                            left: this.state.options.from.x,
                            top: this.state.options.from.y
                        };
                        e = a.createElement(s._2, {
                            className: "user-card-layer",
                            position: s._15.Fixed,
                            zIndex: s._62.Above
                        }, a.createElement("div", {
                            style: t,
                            ref: this.setRef
                        }, a.createElement(s.q, {
                            direction: this.state.options.direction ? this.state.options.direction : s.r.Right,
                            size: s.s.Large,
                            show: !0,
                            tailOffset: this.state.options.tailOffset
                        }, a.createElement(s._8, {
                            padding: 1
                        }, a.createElement(s._8, {
                            className: "user-card-layer__card-container"
                        }, a.createElement(y, {
                            id: this.state.options.id
                        }))))))
                    }
                    return e
                }, t.prototype.showUserCard = function(e) {
                    var t = this;
                    this.clearTimeoutAndRun(function() {
                        t.setState({
                            options: e
                        })
                    })
                }, t.prototype.hideUserCard = function(e) {
                    var t = this;
                    void 0 === e && (e = {}), this.clearTimeoutAndRun(function() {
                        t.state.hovering && !e.force || t.setState({
                            options: null
                        })
                    }, e.timeout)
                }, t
            }(a.Component)),
            c = n("RH2O"),
            d = n("F8kA"),
            u = n("E9Qg"),
            p = n("hdYS"),
            m = n("5s0/"),
            h = n("7vx8"),
            f = n("phns"),
            g = n("CSlQ"),
            v = n("m4HT"),
            b = (n("rRWv"), n("/OR/")),
            k = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getBio = function() {
                        if (t.props.data && (t.props.data.loading || t.props.data.error)) return null;
                        var e = t.getUserData();
                        return e ? a.createElement(s._8, {
                            ellipsis: !0,
                            padding: {
                                top: .5
                            },
                            fullWidth: !0
                        }, a.createElement(s.Q, {
                            ellipsis: !0
                        }, e.description || Object(o.d)("This user has no bio.", "UserCard"))) : null
                    }, t.getButtons = function() {
                        var e = t.getUserData();
                        return e ? a.createElement(s._8, {
                            className: t.props.showButtonsOnHover ? "user-card__buttons-container" : "",
                            display: s.R.InlineFlex,
                            flexDirection: s.T.Row,
                            justifyContent: s._7.Between,
                            fullWidth: !0,
                            flexGrow: 0,
                            position: s._15.Absolute,
                            padding: 1,
                            attachBottom: !0,
                            attachLeft: !0
                        }, a.createElement(s._8, {
                            alignItems: s.c.End,
                            display: s.R.Flex
                        }, a.createElement(s._8, {
                            padding: {
                                right: 1
                            }
                        }, a.createElement(f.a, {
                            targetID: t.props.id,
                            friendData: {
                                user: e
                            }
                        })), a.createElement(p.a, {
                            channelLogin: e.login,
                            followData: {
                                user: e
                            },
                            balloonDirection: t.props.balloonDirection,
                            followUIType: p.b.IconAndText,
                            unfollowUIType: p.b.IconOnly
                        })), a.createElement(s._8, {
                            alignItems: s.c.End,
                            display: s.R.Flex,
                            padding: {
                                left: 1
                            }
                        }, a.createElement(m.a, {
                            threadID: t.getThreadID(),
                            isPopout: !1,
                            onClick: t.onWhisperButtonClick
                        }))) : null
                    }, t.onWhisperButtonClick = function() {
                        E({
                            force: !0,
                            timeout: 0
                        })
                    }, t.getThreadID = function() {
                        var e = t.getUserData();
                        if (t.props.currentUserID && e && e.id) return Object(v.a)(e.id, t.props.currentUserID)
                    }, t.getUserData = function() {
                        return t.props.userData && t.props.userData.user || t.props.data && t.props.data.user || null
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.userData && this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    (this.props.data && !this.props.data.loading && this.props.data.user || this.props.data && this.props.data.error) && this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.props.data && (!this.props.data.user || this.props.data.error)) return null;
                    if (this.props.data && this.props.data.loading) return a.createElement("div", {
                        className: "user-card"
                    }, a.createElement(s._10, {
                        fillContent: !0
                    }));
                    var e = this.getUserData();
                    if (!e) return null;
                    var t = {
                        backgroundImage: "url(" + (e && e.bannerImageURL || u) + ")",
                        backgroundPosition: "center",
                        backgroundSize: "auto 100%",
                        backgroundRepeat: "repeat",
                        position: "relative"
                    };
                    return a.createElement(s._2, {
                        fullWidth: !0
                    }, a.createElement("div", {
                        className: "user-card",
                        style: t
                    }, a.createElement(d.a, {
                        to: "/" + e.login
                    }, a.createElement(s.k, {
                        ratio: s.l.Aspect16x9,
                        overflow: !0
                    }, a.createElement(s._35, {
                        padding: 1,
                        display: s.R.Flex,
                        flexDirection: s.T.Column,
                        fullHeight: !0,
                        fullWidth: !0,
                        background: s.n.Overlay,
                        "data-a-target": "user-card-modal"
                    }, a.createElement(s._8, {
                        alignItems: s.c.Center,
                        className: "info",
                        justifyContent: s._7.Center,
                        display: s.R.Flex,
                        flexDirection: s.T.Column,
                        textAlign: s._45.Center,
                        fullWidth: !0,
                        flexGrow: 1,
                        overflow: s._11.Hidden
                    }, a.createElement(s.m, {
                        src: e.profileImageURL,
                        size: 50,
                        alt: e.displayName || ""
                    }), a.createElement(s._35, {
                        padding: {
                            top: .5
                        },
                        ellipsis: !0,
                        color: s.K.Overlay
                    }, e.displayName), this.getBio())))), this.getButtons()))
                }, t = r.__decorate([Object(h.a)(b, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.id
                            },
                            skip: e.userData
                        }
                    }
                }), Object(g.d)("UserCard")], t)
            }(a.Component);
        var y = Object(c.b)(function(e) {
                return {
                    currentUserID: e.session.user && "" + e.session.user.id
                }
            })(k),
            _ = 214;

        function S(e) {
            if (i && e.ref) {
                var t = function(e) {
                    var t = r.__assign({}, e),
                        n = 0;
                    e.y + _ + 20 > window.innerHeight && (t.y = window.innerHeight - _ - 20, n = e.y - t.y);
                    return {
                        coords: t,
                        offset: n
                    }
                }(function(e, t) {
                    var n = t.getBoundingClientRect();
                    switch (e) {
                        case s.r.Bottom:
                        case s.r.BottomLeft:
                            return {
                                x: n.left,
                                y: n.bottom
                            };
                        case s.r.BottomCenter:
                            return {
                                x: n.left + n.width / 2,
                                y: n.bottom
                            };
                        case s.r.BottomRight:
                            return {
                                x: n.right,
                                y: n.bottom
                            };
                        case s.r.Left:
                        case s.r.Top:
                        case s.r.TopLeft:
                            return {
                                x: n.left,
                                y: n.top
                            };
                        case s.r.LeftCenter:
                            return {
                                x: n.left,
                                y: n.top + n.height / 2
                            };
                        case s.r.TopCenter:
                            return {
                                x: n.left + n.width / 2,
                                y: n.top
                            };
                        case s.r.TopRight:
                        case s.r.Right:
                            return {
                                x: n.right,
                                y: n.top
                            };
                        case s.r.RightCenter:
                            return {
                                x: n.right,
                                y: n.top + n.height / 2
                            };
                        default:
                            return {
                                x: n.left,
                                y: n.bottom
                            }
                    }
                }(e.direction, e.ref));
                i.showUserCard({
                    id: e.id,
                    direction: e.direction,
                    from: {
                        x: t.coords.x,
                        y: t.coords.y
                    },
                    tailOffset: t.offset
                })
            }
        }

        function E(e) {
            void 0 === e && (e = {}), i && i.hideUserCard(e)
        }
        n.d(t, "b", function() {
            return l
        }), n.d(t, "a", function() {
            return y
        }), n.d(t, "d", function() {
            return S
        }), n.d(t, "c", function() {
            return E
        })
    },
    iXJ1: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "SearchFriendResult_CreateFriendRequest"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CreateFriendRequestInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "createFriendRequest"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 137
            }
        };
        n.loc.source = {
            body: "mutation SearchFriendResult_CreateFriendRequest($input: CreateFriendRequestInput!) {\ncreateFriendRequest(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    ieBa: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            r = n("TToO"),
            a = n("GiK3"),
            o = n("rCmJ"),
            s = n("6sO2"),
            l = n("Odds"),
            c = function(e) {
                return a.createElement(l.w, {
                    icon: l._25.Emoticons,
                    ariaLabel: Object(s.d)("Emote picker", "EmotePickerButton"),
                    type: l.y.Secondary,
                    onClick: e.onClick,
                    "data-a-target": "emote-picker-button"
                })
            },
            d = n("P+j/"),
            u = n("CSlQ"),
            p = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasInteracted: !1,
                        isEmotePickerMenuVisible: !1,
                        isEmotePickerButtonVisible: !1
                    }, t.onClickOut = function() {
                        t.setState({
                            isEmotePickerMenuVisible: !1
                        })
                    }, t.onClickEmote = function(e, n) {
                        t.props.onClickEmote && t.props.onClickEmote(e, n)
                    }, t.toggleEmotePicker = function() {
                        t.setState(function(e) {
                            return {
                                isEmotePickerMenuVisible: !e.isEmotePickerMenuVisible
                            }
                        })
                    }, t.onEmotePickerDataLoaded = function(e) {
                        e && t.setState({
                            isEmotePickerButtonVisible: !0
                        })
                    }, t.onInteraction = function() {
                        return t.setState({
                            hasInteracted: !0
                        })
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive(), this.props.inputRef && (this.props.inputRef.addEventListener("mouseenter", this.onInteraction), this.props.inputRef.addEventListener("focus", this.onInteraction))
                }, t.prototype.componentWillUnmount = function() {
                    this.props.inputRef && (this.props.inputRef.removeEventListener("mouseenter", this.onInteraction), this.props.inputRef.removeEventListener("focus", this.onInteraction))
                }, t.prototype.render = function() {
                    var e = null;
                    this.state.isEmotePickerButtonVisible && (e = a.createElement(c, {
                        onClick: this.toggleEmotePicker
                    }));
                    var t = null;
                    this.hasInteractedOrPageload && (t = a.createElement(d.a, {
                        channelOwnerID: this.props.channelOwnerID,
                        onClickEmote: this.onClickEmote,
                        onLoad: this.onEmotePickerDataLoaded,
                        toggleVisibility: this.toggleEmotePicker,
                        visible: this.state.isEmotePickerMenuVisible,
                        direction: this.props.direction
                    }));
                    var n = a.createElement(l._8, r.__assign({
                        className: "emote-picker-and-button"
                    }, this.layoutProps), e, t);
                    return this.props.shouldCloseOnClickOut ? a.createElement(o.a, {
                        onClickOut: this.onClickOut
                    }, n) : n
                }, Object.defineProperty(t.prototype, "hasInteractedOrPageload", {
                    get: function() {
                        return !(!this.props.firstPageLoaded && !this.state.hasInteracted)
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "layoutProps", {
                    get: function() {
                        var e = {
                            attachTop: !!this.props.attachTop,
                            attachRight: !!this.props.attachRight,
                            attachBottom: !!this.props.attachBottom,
                            attachLeft: !!this.props.attachLeft,
                            padding: this.props.padding
                        };
                        return this.props.position && (e.position = this.props.position), e
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(a.Component),
            m = Object(u.d)("EmotePicker")(p);
        var h = Object(i.b)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded
                }
            })(m),
            f = n("nEoF");
        n.d(t, "a", function() {
            return h
        }), n.d(t, "c", function() {
            return d.a
        }), n.d(t, !1, function() {
            return f.c
        }), n.d(t, !1, function() {
            return f.b
        }), n.d(t, !1, function() {
            return f.a
        }), n.d(t, "b", function() {
            return c
        })
    },
    ilhN: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FriendButton_CreateFriendRequest"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CreateFriendRequestInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "createFriendRequest"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "friendButtonFragment"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 232
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/friend-button/queries/friend-button-fragment.gql"\nmutation FriendButton_CreateFriendRequest($input: CreateFriendRequestInput!) {\ncreateFriendRequest(input: $input) {\nuser {\nid\n...friendButtonFragment\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var r = {};
        i.definitions = i.definitions.concat(n("HC5L").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !r[t] && (r[t] = !0, !0)
        })), e.exports = i
    },
    iydZ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        }), t.c = function(e, t) {
            var n = [],
                o = t.indexedActions,
                l = new RegExp("^(" + Object.keys(o).join("|") + ")(\\d+)$", "i"),
                c = e.split(/\s+/);
            return c.forEach(function(e, t) {
                var d = l.exec(e);
                if (d) {
                    var u = d[1].toLowerCase(),
                        p = +d[2],
                        m = o[u];
                    if (m || u !== i.g || (m = Object(r.b)()), m) {
                        var h = m.orderedTiers.find(function(e) {
                            return e.bits <= p
                        });
                        !h && p && (h = m.orderedTiers[0]), h && n.push({
                            type: a.a.Emote,
                            content: {
                                images: s(h),
                                alt: m.prefix,
                                cheerAmount: p,
                                cheerColor: h.color
                            }
                        })
                    }
                } else {
                    var f = n.length && n[n.length - 1],
                        g = "";
                    if (t < c.length - 1 && (g = " "), f && f.type === a.a.Text) f.content += e + g;
                    else {
                        var v = "";
                        t && (v = " "), n.push({
                            type: a.a.Text,
                            content: v + e + g
                        })
                    }
                }
            }), n
        }, t.b = s;
        var i = n("3iBR"),
            r = n("CFVp"),
            a = n("mwvJ"),
            o = {
                indexedActions: {},
                orderedActions: []
            };

        function s(e, t, n) {
            void 0 === n && (n = !0);
            var i, r, a = n ? "animated" : "static";
            return t ? {
                themed: !0,
                dark: (i = {}, i[t + "x"] = e.indexedImages.DARK[a].get(t), i),
                light: (r = {}, r[t + "x"] = e.indexedImages.LIGHT[a].get(t), r)
            } : {
                themed: !0,
                dark: {
                    "1x": e.indexedImages.DARK[a].get(1),
                    "1.5x": e.indexedImages.DARK[a].get(1.5),
                    "2x": e.indexedImages.DARK[a].get(2),
                    "3x": e.indexedImages.DARK[a].get(3),
                    "4x": e.indexedImages.DARK[a].get(4)
                },
                light: {
                    "1x": e.indexedImages.LIGHT[a].get(1),
                    "1.5x": e.indexedImages.LIGHT[a].get(1.5),
                    "2x": e.indexedImages.LIGHT[a].get(2),
                    "3x": e.indexedImages.LIGHT[a].get(3),
                    "4x": e.indexedImages.LIGHT[a].get(4)
                }
            }
        }
    },
    j0cR: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return e.videoPlayer.activeVideoPlayerInstanceRefID
        };
        var i = n("TToO"),
            r = n("6sO2"),
            a = n("Hjbq");
        r.o.store.registerReducer("videoPlayer", function(e, t) {
            switch (void 0 === e && (e = {
                activeVideoPlayerInstanceRefID: void 0
            }), t.type) {
                case a.a:
                    return i.__assign({}, e, {
                        activeVideoPlayerInstanceRefID: t.playerRefID
                    });
                default:
                    return e
            }
        })
    },
    jAYy: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "TopNav_UserMenu_Dropdown"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "availability"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "settings"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isSharingActivity"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "visibility"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 144
            }
        };
        n.loc.source = {
            body: "query TopNav_UserMenu_Dropdown {\ncurrentUser {\nid\ndisplayName\nlogin\navailability\nsettings {\nisSharingActivity\nvisibility\n}\nroles {\nisStaff\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    jF7o: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            if (!e) return void i.j.warn("[onPopupClose] Attempted to observe a window that failed to open.");
            var n = setInterval(function() {
                var i = !1,
                    r = !1;
                try {
                    i = e.closed, r = !!e.success
                } catch (e) {}
                if (i || r) {
                    t(r);
                    try {
                        e.close()
                    } catch (e) {}
                    clearInterval(n)
                }
            }, 500)
        };
        var i = n("6sO2")
    },
    jUhM: function(e, t, n) {
        "use strict";
        var i = n("GiK3"),
            r = n("6sO2"),
            a = n("3iBR"),
            o = n("qe65"),
            s = n("Odds"),
            l = (n("FZFL"), {
                themed: !0,
                dark: {
                    "1x": a.b + "/dark/animated/1/cheertutorial.gif"
                },
                light: {
                    "1x": a.b + "/light/animated/1/cheertutorial.gif"
                }
            }),
            c = function() {
                return i.createElement(s._8, {
                    display: s.R.Flex,
                    padding: {
                        top: 5,
                        bottom: 3
                    },
                    flexGrow: 1,
                    flexDirection: s.T.Column,
                    justifyContent: s._7.Center,
                    alignItems: s.c.Center
                }, i.createElement(s.Q, {
                    type: s._49.H4,
                    bold: !0
                }, i.createElement(o.a, {
                    className: "cheermote-help__tutorial-image",
                    sources: l
                }), Object(r.d)("How to Cheer", "Bits--CheermoteHelp")), i.createElement(s._8, {
                    padding: {
                        x: 3
                    }
                }, i.createElement(s.Q, null, Object(r.d)('Type "cheer" + the number of Bits you want to Cheer.', "Bits--CheermoteHelp"))))
            };
        n.d(t, "a", function() {
            return c
        })
    },
    jetF: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return s
        });
        var i = n("TToO"),
            r = n("GiK3"),
            a = (n.n(r), n("HM6l")),
            o = n("Odds"),
            s = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        showBalloon: !!t.props.openByDefault,
                        hasInteracted: !!t.props.openByDefault
                    }, t.toggleBalloonId = Object(a.a)(), t.handleButtonClick = function() {
                        t.setState(function(e) {
                            return {
                                showBalloon: !e.showBalloon,
                                hasInteracted: !0
                            }
                        }, function() {
                            t.props.onToggle && t.props.onToggle(!t.state.showBalloon)
                        })
                    }, t.handleGlobalClick = function(e) {
                        e.target.matches('[data-toggle-balloon-id="' + t.toggleBalloonId + '"] *') || t.setState({
                            showBalloon: !1
                        }, function() {
                            t.props.onToggle && t.props.onToggle(!t.state.showBalloon)
                        })
                    }, t.onMouseEnter = function() {
                        t.state.hasInteracted || t.setState({
                            hasInteracted: !0
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.openByDefault && document.addEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.componentWillUpdate = function(e, t) {
                    this.state.showBalloon !== t.showBalloon && (t.showBalloon ? document.addEventListener("click", this.handleGlobalClick, !0) : document.removeEventListener("click", this.handleGlobalClick, !0))
                }, t.prototype.componentWillUnmount = function() {
                    document.removeEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.render = function() {
                    var e = r.Children.toArray(this.props.children);
                    if (2 !== e.length) throw new Error("ToggleBalloonWrapper should only be given two children: a clickable and a Balloon");
                    var t = e[0],
                        n = e[1];
                    if (n.type !== o.q) throw new Error("ToggleBalloonWrapper needs a Balloon as its second child element");
                    var a = r.cloneElement(t, {
                            onClick: this.handleButtonClick
                        }),
                        s = null;
                    (this.state.hasInteracted || this.props.alwaysMountBalloonContent) && (s = r.cloneElement(n, {
                        show: this.state.showBalloon
                    }));
                    var l = a;
                    return this.props.tooltipProps && (l = r.createElement(o._52, i.__assign({}, this.props.tooltipProps), a)), r.createElement(o._8, {
                        "data-toggle-balloon-id": this.toggleBalloonId,
                        display: this.props.display,
                        position: o._15.Relative
                    }, r.createElement("div", {
                        style: {
                            display: "inherit"
                        },
                        onMouseEnter: this.onMouseEnter,
                        "data-test-selector": "toggle-balloon-wrapper__mouse-enter-detector"
                    }, l), s)
                }, t.prototype.toggleBalloon = function(e) {
                    void 0 === e && (e = !this.state.showBalloon), this.setState({
                        showBalloon: e,
                        hasInteracted: !0
                    })
                }, t
            }(r.Component)
    },
    jxGs: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return r
        }), n.d(t, "e", function() {
            return a
        }), n.d(t, "g", function() {
            return o
        }), n.d(t, "f", function() {
            return s
        }), n.d(t, "c", function() {
            return l
        }), n.d(t, "d", function() {
            return c
        });
        var i = "AD",
            r = "BUNDLE",
            a = "first_time_purchase",
            o = "single_purchase",
            s = "prime_single_purchase",
            l = "black_friday_2017",
            c = "twitch_prime_2018"
    },
    l21v: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("6sO2"),
            a = n("iydZ"),
            o = n("mwvJ"),
            s = new RegExp("(?:^|\\s)(?:https?://)?clips.twitch.tv/(\\w+)(?:/)?(\\w+)?(?:/edit)?(?:$|\\s)?");
        var l = n("YhVV"),
            c = n("3KVC"),
            d = n("e1CU");
        t.a = function(e, t, n, r, a, o) {
            void 0 === o && (o = !1);
            var s;
            s = a ? Object(l.b)(e, a) : function(e) {
                var t = [];
                e && Object.keys(e).forEach(function(n) {
                    var i = e[n];
                    i.forEach(function(e) {
                        t[e.startIndex] = {
                            startIndex: e.startIndex,
                            endIndex: e.endIndex + 1,
                            data: {
                                images: {
                                    themed: !1,
                                    sources: {
                                        "1x": b(n, 1),
                                        "2x": b(n, 2),
                                        "4x": b(n, 4)
                                    }
                                }
                            }
                        }
                    })
                });
                return t
            }(t.emotes);
            var c = Object(d.a)(t.displayName, t.username);
            return {
                badges: t.badges || {},
                bits: t.bits,
                user: i.__assign({}, c, {
                    userLogin: t.username,
                    userID: t.userID,
                    userType: t.userType,
                    color: t.color || m(t.userID)
                }),
                messageParts: e ? h(e, s, t.bits, n, r, c.userDisplayName) : [],
                deleted: o,
                timestamp: Date.now()
            }
        }, t.b = m, t.g = h, t.d = f, t.c = v, t.f = b, t.e = function(e) {
            return {
                src: b(e, 1),
                srcSet: b(e, 1) + " 1x, " + b(e, 2) + " 2x, " + b(e, 3) + " 4x"
            }
        };
        var u = ["#FF0000", "#0000FF", "#008000", "#B22222", "#FF7F50", "#9ACD32", "#FF4500", "#2E8B57", "#DAA520", "#D2691E", "#5F9EA0", "#1E90FF", "#FF69B4", "#8A2BE2", "#00FF7F"],
            p = {};

        function m(e, t) {
            return void 0 === t && (t = 15), "number" != typeof p[e] && (p[e] = Math.floor(Math.random() * t)), u[p[e]]
        }

        function h(e, t, n, r, a, s) {
            void 0 === t && (t = []);
            var l = [],
                c = 0,
                d = f(e);
            t.forEach(function(t) {
                var u = d ? d.slice(c, t.startIndex).join("") : e.slice(c, t.startIndex);
                u && (l = n ? l.concat(g(u, s, a, r)) : l.concat(v(u, s, a))), l.push({
                    type: o.a.Emote,
                    content: i.__assign({
                        alt: d ? d.slice(t.startIndex, t.endIndex).join("") : e.slice(t.startIndex, t.endIndex)
                    }, t.data)
                }), c = t.endIndex
            });
            var u = d ? d.slice(c).join("") : e.slice(c);
            return u && (l = n ? l.concat(g(u, s, a, r)) : l.concat(v(u, s, a))), l
        }

        function f(e) {
            return e.match(/[^\uD800-\uDFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDFFF]/g)
        }

        function g(e, t, n, i) {
            if (!i) return v(e, t, n);
            var r = Object(a.c)(e, i).map(function(e) {
                return e.type === o.a.Text ? v(e.content, t, n) : e
            });
            return [].concat.apply([], r)
        }

        function v(e, t, n) {
            var i = /^(?:(https?:\/\/)?(?:[\w@#%\-+=:~]+\.)+[a-z]{2,8}(?:\/[\w./@#%&()\-+=:?~]*)?)$/g,
                a = /([^\w@#%\-+=:~])?(@)([^\u0000-\u007F]+|\w+)+([^\w./@#%&()\-+=:?~]|\s|$)/g,
                l = [],
                d = e.split(/\s+/);
            return d.forEach(function(e, u) {
                i.lastIndex = 0;
                var p = i.exec(e);
                a.lastIndex = 0;
                var m = a.exec(e);
                if (p) {
                    var h = p.index;
                    0 !== h && l.push({
                        type: o.a.Text,
                        content: "" + e.slice(0, h)
                    });
                    var f = i.lastIndex;
                    if (n) l.push({
                        type: o.a.Text,
                        content: " <" + Object(r.d)("deleted link", "CreateMessageData") + "> "
                    });
                    else {
                        var g = (p[1] ? "" : "https://") + e.slice(h, f);
                        if (function(e) {
                                return void 0 === e && (e = ""), s.test(e) && !e.includes("clips.twitch.tv/2017/")
                            }(g)) {
                            var v = function(e) {
                                void 0 === e && (e = "");
                                var t = e.match(s);
                                return null === t ? "" : t && t.length > 0 && void 0 !== t.index ? t[1] : ""
                            }(g);
                            l.push({
                                type: o.a.ClipLink,
                                content: {
                                    slug: v,
                                    url: g,
                                    displayText: e.slice(h, f)
                                }
                            })
                        } else if (Object(c.a)(g)) {
                            var b = Object(c.b)(g);
                            l.push({
                                type: o.a.VideoLink,
                                content: {
                                    id: b,
                                    url: g,
                                    displayText: e.slice(h, f)
                                }
                            })
                        } else l.push({
                            type: o.a.Link,
                            content: {
                                displayText: e.slice(h, f),
                                url: g
                            }
                        })
                    }
                    var k = e.slice(f),
                        y = "";
                    u < d.length - 1 && (y = " "), k && l.push({
                        type: o.a.Text,
                        content: "" + k + y
                    })
                } else {
                    if (!m) {
                        var _ = l.length && l[l.length - 1];
                        y = "";
                        if (u < d.length - 1 && (y = " "), _ && _.type === o.a.Text) _.content += e + y;
                        else {
                            var S = "";
                            u && (S = " "), l.push({
                                type: o.a.Text,
                                content: S + e + y
                            })
                        }
                        return
                    }
                    var E = m[3];
                    l.push({
                        type: o.a.Mention,
                        content: {
                            sender: t,
                            recipient: E
                        }
                    })
                }
            }), l
        }

        function b(e, t) {
            return "https://static-cdn.jtvnw.net/emoticons/v1/" + e + "/" + Math.min(Math.ceil(t), 3) + ".0"
        }
    },
    l4QG: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = {
            Away: "AWAY",
            Busy: "BUSY",
            Idle: "IDLE",
            Invisible: "INVISIBLE",
            Offline: "OFFLINE",
            Online: "ONLINE"
        }
    },
    lK86: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "GiftSubscribeButton_Gift_Eligibility"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "recipientLogin"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "String"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "subProductId"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "recipientLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "canGift"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "product"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "subProductId"
                                                }
                                            }
                                        }],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 171
            }
        };
        n.loc.source = {
            body: "query GiftSubscribeButton_Gift_Eligibility($recipientLogin: String $subProductId: String!) {\nuser(login: $recipientLogin) {\nid\nself {\ncanGift(product: $subProductId)\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    m0Vj: function(e, t) {},
    m4HT: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            return parseInt(t, 10) < parseInt(e, 10) ? t + "_" + e : e + "_" + t
        }, t.b = function(e, t) {
            return e.split("_").find(function(e) {
                return e !== t
            }) || null
        }
    },
    m5Kq: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "GetBitsButton_Bits"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isLoggedIn"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "withChannel"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "bitsOffers"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "skip"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "bitsOffersFragment"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "idSHA1"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bitsOffers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "bitsOffersFragment"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "withChannel"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 748
            }
        };
        i.loc.source = {
            body: '# Documentation about how to use GraphQL is located in the Data Access Guide:\n# https://git-aws.internal.justin.tv/pages/twilight/twilight-docs/docs/guides/data-access.html\n# Additionally use the GraphQL explorer (https://api.twitch.tv/gql/explore) to browse\n# available GraphQL data and construct your query.\n#import "twilight/features/bits/models/bits-offers-fragment.gql"\n#import "twilight/features/chat/models/cheer-fragment.gql"\nquery GetBitsButton_Bits($isLoggedIn: Boolean! $withChannel: Boolean! $login: String!) {\nbitsOffers @skip(if: $isLoggedIn) {\n...bitsOffersFragment\n}\ncurrentUser @include(if: $isLoggedIn) {\nid\nidSHA1\nbitsBalance\nbitsOffers {\n...bitsOffersFragment\n}\n}\nuser(login: $login) @include(if: $withChannel) {\nid\n...cheer\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var r = {};

        function a(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !r[t] && (r[t] = !0, !0)
            })
        }
        i.definitions = i.definitions.concat(a(n("OcEY").definitions)), i.definitions = i.definitions.concat(a(n("576g").definitions)), e.exports = i
    },
    mRH2: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_ReportUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportContentInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "reportContent"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "contentID"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 111
            }
        };
        n.loc.source = {
            body: "mutation ReportUserModal_ReportUser($input: ReportContentInput!) {\nreportContent(input: $input) {\ncontentID\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    mi6k: function(e, t, n) {
        "use strict";

        function i(e, t) {
            return (t -= e.toString().length) > 0 ? new Array(t + (/\./.test(e.toString()) ? 2 : 1)).join("0") + e : e.toString()
        }
        t.b = function(e, t) {
            var n = Math.floor(e % 60),
                r = Math.floor(e % 3600 / 60),
                a = Math.floor(e / 3600);
            return t && t.zeroPadAll ? i(a, 2) + ":" + i(r, 2) + ":" + i(n, 2) : a ? a + ":" + i(r, 2) + ":" + i(n, 2) : r + ":" + i(n, 2)
        }, t.a = function(e) {
            if ("" === e) return 0;
            var t = e.split(":");
            if (t.length > 3) return NaN;
            return t.reduce(function(e, t) {
                var n;
                return n = "-" === t[0] ? NaN : Math.round(parseInt(t, 10)), 60 * e + n
            }, 0)
        }
    },
    mmQh: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_ReportUserCommunity"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportUserInCommunityInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "reportUserInCommunity"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 138
            }
        };
        n.loc.source = {
            body: "mutation ReportUserModal_ReportUserCommunity($input: ReportUserInCommunityInput!) {\nreportUserInCommunity(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    mqvl: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            switch (e.type) {
                case i.b.Playing:
                    return {
                        type: i.a.Playing,
                        "Symbol(id)": t,
                        __typename: "Playing",
                        game: {
                            id: e.game_id,
                            name: e.game,
                            "Symbol(id)": t + ".game",
                            __typename: "Game"
                        }
                    };
                case i.b.Streaming:
                    var n = {
                        type: i.a.Streaming,
                        "Symbol(id)": t,
                        __typename: "Streaming",
                        stream: {
                            id: e.channel_id,
                            game: null,
                            "Symbol(id)": t + ".stream",
                            __typename: "Stream"
                        }
                    };
                    return e.game && e.game_id && (n.stream.game = {
                        id: e.game_id,
                        name: e.game,
                        "Symbol(id)": t + ".stream.game",
                        __typename: "Game"
                    }), n;
                case i.b.Watching:
                    var r = {
                        type: i.a.Watching,
                        "Symbol(id)": t,
                        __typename: "Watching",
                        user: {
                            id: e.channel_id,
                            login: e.channel_login,
                            displayName: e.channel_display_name,
                            "Symbol(id)": t + ".user",
                            __typename: "User",
                            hosting: {
                                id: e.hosted_channel_id || null,
                                displayName: e.hosted_channel_display_name || null,
                                login: e.hosted_channel_login || null,
                                "Symbol(id)": t + ".user.hosting",
                                __typename: "User"
                            }
                        }
                    };
                    return r;
                default:
                    return null
            }
        };
        var i = n("Ex+h")
    },
    "mw/a": function(e, t, n) {
        "use strict";
        var i, r;
        n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return r
            }),
            function(e) {
                e.ChannelFeedComment = "CHANNEL_FEED_COMMENT_REPORT", e.ChannelFeedPost = "CHANNEL_FEED_POST_REPORT", e.Chat = "CHAT_REPORT", e.Clip = "CLIP_REPORT", e.Collection = "COLLECTION_REPORT", e.Community = "COMMUNITY_REPORT", e.Event = "EVENT_REPORT", e.Extension = "EXTENSION_REPORT", e.LiveUp = "LIVE_UP_REPORT", e.Raid = "RAID_REPORT", e.Room = "ROOM_REPORT", e.StreamUp = "STREAM_UP_REPORT", e.User = "USER_REPORT", e.VideoChatMessage = "VOD_COMMENT_REPORT", e.Vod = "VOD_REPORT", e.Whisper = "WHISPER_REPORT"
            }(i || (i = {})),
            function(e) {
                e.BitsViolation = "bits_violation", e.ChatBanEvasion = "chat_ban_evasion", e.Cheating = "cheating", e.Gore = "gore", e.Harassment = "harassment", e.Harm = "harm", e.HatefulConduct = "hateful_conduct", e.Impersonation = "impersonation", e.Miscategorized = "miscategorized", e.OffensiveUsername = "offensive_username", e.Other = "other", e.Porn = "porn", e.Prohibited = "prohibited", e.SelfHarm = "selfharm", e.SexualContent = "sexual_content", e.SexualViolence = "sexual_violence", e.Spam = "spam", e.TosBanEvasion = "tos_ban_evasion", e.Underaged = "underaged"
            }(r || (r = {}))
    },
    mwvJ: function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e[e.Text = 0] = "Text", e[e.Mention = 1] = "Mention", e[e.Link = 2] = "Link", e[e.Emote = 3] = "Emote", e[e.ClipLink = 4] = "ClipLink", e[e.VideoLink = 5] = "VideoLink"
            }(i || (i = {}))
    },
    n7G4: function(e, t) {},
    n7Mz: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            r = n("Aj/L"),
            a = n("TToO"),
            o = n("GiK3"),
            s = n("3zLD"),
            l = n("6sO2"),
            c = n("7vx8"),
            d = n("Odds"),
            u = n("Dbus"),
            p = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        error: !1
                    }, t.claimAllRewards = function() {
                        return a.__awaiter(t, void 0, void 0, function() {
                            return a.__generator(this, function(e) {
                                switch (e.label) {
                                    case 0:
                                        if (!this.props.claimAllRewards || !this.props.user) return [2];
                                        e.label = 1;
                                    case 1:
                                        return e.trys.push([1, 3, , 4]), [4, this.props.claimAllRewards({
                                            variables: {
                                                input: {
                                                    domain: this.props.tournamentID,
                                                    userID: this.props.user.id
                                                }
                                            }
                                        })];
                                    case 2:
                                        return e.sent(), [3, 4];
                                    case 3:
                                        return e.sent(), this.setState({
                                            error: !0
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.inGame ? Object(l.d)("Redeem All In-Game Rewards", "EsportsRewardsTab") : Object(l.d)("Redeem All", "EsportsRewardsTab");
                    return o.createElement(d._8, {
                        className: "esports-claim-all-rewards-button",
                        display: d.R.InlineFlex,
                        margin: {
                            right: 1
                        },
                        verticalAlign: d._59.Bottom
                    }, o.createElement(d.v, {
                        "data-test-selector": "esports-claim-all-button",
                        onClick: this.claimAllRewards,
                        disabled: !this.props.enabled
                    }, this.state.error && o.createElement(d._24, {
                        "data-test-selector": "esports-claim-all-button-error",
                        asset: d._25.DeadGlitch
                    }), !this.state.error && e))
                }, t
            }(o.Component),
            m = Object(s.compose)(Object(c.a)(u, {
                name: "claimAllRewards"
            }))(p);
        var h = Object(i.b)(function(e) {
            return {
                user: Object(r.c)(e)
            }
        })(m);
        n.d(t, "a", function() {
            return h
        })
    },
    n9f8: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Threads_MarkAllWhispersAsRead"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateAllWhisperThreadsInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateAllWhisperThreads"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "count"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 130
            }
        };
        n.loc.source = {
            body: "mutation Threads_MarkAllWhispersAsRead($input: UpdateAllWhisperThreadsInput!) {\nupdateAllWhisperThreads(input: $input) {\ncount\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    nEoF: function(e, t, n) {
        "use strict";
        n.d(t, "c", function() {
            return r
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, "a", function() {
            return i
        });
        var i, r = {
                TriHard: {
                    count: 196568036
                },
                Kappa: {
                    count: 192158118
                },
                "4Head": {
                    count: 155758710
                },
                PogChamp: {
                    count: 151485090
                },
                cmonBruh: {
                    count: 146352878
                },
                BibleThump: {
                    count: 56472964
                },
                WutFace: {
                    count: 45069031
                },
                Kreygasm: {
                    count: 41387580
                },
                DansGame: {
                    count: 38097659
                },
                hi5F: {
                    count: 34986404
                },
                SMOrc: {
                    count: 34734484
                },
                KappaPride: {
                    count: 34262839
                },
                VoHiYo: {
                    count: 27886434
                },
                SwiftRage: {
                    count: 24561900
                },
                ResidentSleeper: {
                    count: 24438298
                },
                EleGiggle: {
                    count: 19891526
                },
                FailFish: {
                    count: 19118343
                },
                NotLikeThis: {
                    count: 18802905
                },
                Keepo: {
                    count: 18351415
                },
                BabyRage: {
                    count: 18220906
                },
                MingLee: {
                    count: 18026207
                },
                pbfSSH: {
                    count: 16911241
                },
                forsenE: {
                    count: 14960299
                },
                HeyGuys: {
                    count: 14851569
                },
                ANELE: {
                    count: 14648986
                },
                PJSalt: {
                    count: 14438861
                }
            },
            a = ["354", "49106", "4339", "48", "25", "55338", "70433", "1902", "68856", "81103", "76171", "27509"];
        ! function(e) {
            e.Web = "WEB", e.IOS = "IOS", e.Android = "ANDROID"
        }(i || (i = {}))
    },
    nFc2: function(e, t) {},
    nist: function(e, t) {},
    nmYW: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "blockedUsers"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "blockedUsers"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 56
            }
        };
        n.loc.source = {
            body: "fragment blockedUsers on User {\nid\nblockedUsers {\nid\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    nrdj: function(e, t, n) {
        "use strict";
        var i, r = n("HW6M"),
            a = n("GiK3"),
            o = n("6sO2"),
            s = n("iydZ"),
            l = n("CFVp"),
            c = n("qe65"),
            d = n("Odds");
        n("PPK2");
        ! function(e) {
            e[e.Large = 4] = "Large", e[e.Medium = 3] = "Medium", e[e.Small = 2] = "Small", e[e.ExtraSmall = 1.5] = "ExtraSmall", e[e.ExtremelySmall = 1] = "ExtremelySmall"
        }(i || (i = {}));
        var u = function(e) {
            var t = e.bitsConfig && e.bitsConfig.indexedActions[e.prefix.toLowerCase()];
            t || (t = Object(l.b)());
            var n = t.orderedTiers.find(function(t) {
                return t.bits <= (e.amount || 100)
            });
            n || (n = t.orderedTiers[0]);
            var u = e.display === d.R.Inline || e.display === d.R.InlineFlex || e.display === d.R.InlineBlock,
                p = null,
                m = r("cheermote-for-amount__cheer-amount", {
                    "cheermote-for-amount__display--table-cell": !u
                }, {
                    "cheermote-for-amount__cheer-amount--medium": e.size === i.Medium
                }, {
                    "cheermote-for-amount__cheer-amount--small": e.size === i.Small || e.size === i.ExtraSmall
                }, {
                    "cheermote-for-amount__cheer-amount--extremely-small": e.size === i.ExtremelySmall
                });
            if (void 0 !== e.amount && e.showAmount) {
                var h = e.formattedNumber ? Object(o.e)(e.amount) : e.amount;
                p = a.createElement(d._2, {
                    padding: e.size === i.Small ? 0 : void 0,
                    textAlign: e.size === i.Small ? d._45.Center : void 0
                }, a.createElement("strong", {
                    className: m,
                    style: {
                        color: n.color
                    }
                }, h))
            }
            var f = r("cheermote-for-amount__cheer-image", {
                    "cheermote-for-amount__display--table-cell": !u
                }, {
                    "cheermote-for-amount__cheer--inline": u
                }, {
                    "cheermote-for-amount__cheer-image--small": e.size === i.Small
                }, {
                    "cheermote-for-amount__cheer-image--extra-small": e.size === i.ExtraSmall
                }, {
                    "cheermote-for-amount__cheer-image--extremely-small": e.size === i.ExtremelySmall
                }),
                g = a.createElement(c.a, {
                    className: f,
                    sources: Object(s.b)(n, e.size || i.Large, e.animated)
                });
            return e.showImage || (g = null), a.createElement(d._2, {
                className: "cheermote-for-amount",
                alignItems: e.alignItems,
                display: e.display
            }, a.createElement("span", null, g, p))
        };
        n.d(t, "b", function() {
            return i
        }), n.d(t, "a", function() {
            return u
        })
    },
    oFw4: function(e, t) {},
    oI0V: function(e, t) {},
    oLZt: function(e, t) {},
    oPEP: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "InsiderPassTabEmotesAndBadges"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "broadcastBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "badge"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "price"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emoteSetID"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "promotion"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "newPrice"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "oldPrice"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "discountType"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "discountValue"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "giftPromotion"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "newPrice"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "oldPrice"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "discountType"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "discountValue"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "tournament"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "rewards"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "insider"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "badges"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "type"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "imageURL"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "description"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "canBeFulfilled"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "isEntitled"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "isPrimeOnly"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 516
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery InsiderPassTabEmotesAndBadges($channelID: ID!) {\nuser(id: $channelID) {\nid\nbroadcastBadges {\n...badge\n}\nsubscriptionProducts {\nid\nprice\nurl\nemoteSetID\ndisplayName\nname\nemotes {\nid\ntoken\n}\nself {\npromotion {\nnewPrice\noldPrice\ndiscountType\ndiscountValue\n}\n}\ngiftPromotion {\nnewPrice\noldPrice\ndiscountType\ndiscountValue\n}\n}\ntournament {\nid\nrewards {\ninsider {\nbadges {\nid\nname\ntype\nimageURL\ndescription\ncanBeFulfilled\nisEntitled\nisPrimeOnly\n}\n}\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var r = {};
        i.definitions = i.definitions.concat(n("QU+n").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !r[t] && (r[t] = !0, !0)
        })), e.exports = i
    },
    oSFp: function(e, t, n) {
        "use strict";
        var i = n("A5Hr"),
            r = n("TToO"),
            a = n("GiK3"),
            o = n("RH2O"),
            s = n("2KeS"),
            l = n("+8VM"),
            c = n("V5M+"),
            d = n("CSlQ"),
            u = n("Odds"),
            p = (n("oFw4"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleClose = function(e, n) {
                        t.props.closeModal(), t.props.onClose && t.props.onClose(e, n)
                    }, t
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(u._35, {
                        className: "reporting-modal__container",
                        background: u.n.Base,
                        padding: {
                            x: 2,
                            y: 3
                        }
                    }, a.createElement(i.b, {
                        onClose: this.handleClose,
                        reportContext: this.props.reportContext,
                        title: this.props.title,
                        defaultDescription: this.props.defaultDescription
                    }), a.createElement(l.a, null))
                }, t
            }(a.Component));
        var m = Object(s.d)(Object(d.d)("ReportUserModal"), Object(o.b)(null, function(e) {
            return Object(s.b)({
                closeModal: c.c
            }, e)
        }))(p);
        n.d(t, !1, function() {}), n.d(t, !1, function() {
            return i.c
        }), n.d(t, !1, function() {
            return i.a
        }), n.d(t, !1, function() {}), n.d(t, !1, function() {
            return i.b
        }), n.d(t, !1, function() {
            return p
        }), n.d(t, "a", function() {
            return m
        })
    },
    odx1: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return c
        });
        var i, r = n("TToO"),
            a = n("GiK3"),
            o = (n.n(a), n("iOr9")),
            s = n("bZTi"),
            l = n("Odds");
        ! function(e) {
            e.TREATMENT = "treatment", e.CONTROL = "control"
        }(i || (i = {}));
        var c = function(e) {
            var t, c = {
                    failSilently: !1,
                    placeholder: a.createElement(l._14, {
                        width: 82,
                        height: 30
                    })
                },
                d = {
                    name: "TWILIGHT_PRIME_SUB_CREDIT_API_WEXIT",
                    assignments: (t = {
                        fallback: function() {
                            return s.a.wrap(function() {
                                return n.e(59).then(n.bind(null, "tkxl"))
                            }, "SubscribeWithPrimeButton", c)(e)
                        }
                    }, t[i.TREATMENT] = function() {
                        return s.a.wrap(function() {
                            return n.e(58).then(n.bind(null, "JJaH"))
                        }, "PrimeSubscribeButton", c)(e)
                    }, t),
                    loader: function() {
                        return a.createElement(l._14, {
                            width: 82,
                            height: 30
                        })
                    }
                };
            return a.createElement(o.a, r.__assign({}, d))
        }
    },
    onRC: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "followButtonFragment"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "displayName"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "login"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "self"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "follower"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "disableNotifications"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 172
            }
        };
        n.loc.source = {
            body: "# Queries the data necessary to render the FollowButton component.\nfragment followButtonFragment on User {\nid\ndisplayName\nlogin\nself {\nfollower {\ndisableNotifications\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    ozx1: function(e, t) {},
    "p+06": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "TopNav_CurrentUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "createdAt"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hasPrime"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 66
            }
        };
        n.loc.source = {
            body: "query TopNav_CurrentUser {\ncurrentUser {\nid\ncreatedAt\nhasPrime\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    p6Rc: function(e, t) {},
    p8c9: function(e, t) {},
    pQNb: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("6sO2"),
            o = n("FDYX"),
            s = n("Odds"),
            l = (n("Z+EN"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.hasDiscount(this.props.subscriptionProducts)) {
                        var e = this.getMessage();
                        return r.createElement(s._35, {
                            textAlign: s._45.Center,
                            className: "sub-discount-banner",
                            padding: 1,
                            color: s.K.Overlay,
                            "data-test-selector": "sub-discount-banner"
                        }, r.createElement(s.Q, {
                            bold: !0
                        }, e))
                    }
                    return null
                }, t.prototype.getMessage = function() {
                    var e = Object(o.b)(this.props.subscriptionProducts[0], this.props.isGift);
                    return this.props.isGift ? Object(a.d)("Gift a sub and get {percent} off!", {
                        percent: Object(a.e)(e / 100, "percent")
                    }, "SubDiscountBanner") : Object(a.d)("Get {percent} off the first month of any paid subscription!", {
                        percent: Object(a.e)(e / 100, "percent")
                    }, "SubDiscountBanner")
                }, t.prototype.hasDiscount = function(e) {
                    return this.props.isGift ? Object(o.c)(e) : Object(o.d)(e)
                }, t
            }(r.Component));
        n.d(t, !1, function() {
            return "sub-discount-banner"
        }), n.d(t, "a", function() {
            return l
        })
    },
    phns: function(e, t, n) {
        "use strict";
        var i = n("3zLD"),
            r = n("RH2O"),
            a = n("7vx8"),
            o = n("Aj/L"),
            s = n("CSlQ"),
            l = n("TToO"),
            c = n("GiK3"),
            d = n("2KeS"),
            u = n("oIkB"),
            p = n("+xm8"),
            m = n("f2i/"),
            h = "FriendEdge",
            f = "IncomingFriendRequestEdge",
            g = "",
            v = "OutgoingFriendRequestEdge";

        function b(e, t, n, i) {
            return {
                optimisticResponse: (r = {}, r[e] = {
                    __typename: t,
                    user: {
                        __typename: "User",
                        id: n,
                        self: {
                            __typename: "UserSelfConnection",
                            friendship: {
                                __typename: i
                            }
                        }
                    }
                }, r)
            };
            var r
        }
        var k = n("6sO2"),
            y = n("Odds"),
            _ = n("ilhN");
        var S = Object(i.compose)(Object(r.b)(null, function(e) {
                return Object(d.b)({
                    onLoginClick: function() {
                        return m.f(p.a.FriendAdd)
                    }
                }, e)
            }), Object(a.a)(_, {
                name: "onCreateFriendRequest",
                options: function(e) {
                    return l.__assign({}, Object(u.a)({
                        targetID: e.targetID
                    }), b("createFriendRequest", "CreateFriendRequestPayload", e.targetID, v))
                }
            }))(function(e) {
                var t = Object(k.d)("Add Friend", "AddFriendButton");
                return c.createElement(y.v, {
                    ariaLabel: t,
                    onClick: e.isLoggedIn ? e.onCreateFriendRequest : e.onLoginClick,
                    "data-test-selector": "add-button"
                }, t)
            }),
            E = n("0Hcb"),
            C = n("QkQX"),
            N = Object(i.compose)(Object(a.a)(E, {
                name: "onAcceptFriendRequest",
                options: function(e) {
                    return l.__assign({}, Object(u.a)({
                        targetID: e.targetID
                    }), b("acceptFriendRequest", "AcceptFriendRequestPayload", e.targetID, h))
                }
            }), Object(a.a)(C, {
                name: "onRejectFriendRequest",
                options: function(e) {
                    return l.__assign({}, Object(u.a)({
                        targetID: e.targetID
                    }), b("rejectFriendRequest", "RejectFriendRequestPayload", e.targetID, g))
                }
            }))(function(e) {
                var t = Object(k.d)("Accept", "IncomingFriendRequestButton"),
                    n = Object(k.d)("Reject", "IncomingFriendRequestButton");
                return c.createElement(y._8, null, c.createElement(y._8, {
                    display: y.R.InlineBlock,
                    margin: {
                        right: .5
                    }
                }, c.createElement(y._52, {
                    align: y._53.Left,
                    label: Object(k.d)("Accept Friend Request", "IncomingFriendRequestButton")
                }, c.createElement(y.v, {
                    ariaLabel: t,
                    onClick: e.onAcceptFriendRequest,
                    "data-test-selector": "accept-button"
                }, t))), c.createElement(y._52, {
                    align: y._53.Left,
                    label: Object(k.d)("Reject Friend Request", "IncomingFriendRequestButton")
                }, c.createElement(y.v, {
                    ariaLabel: n,
                    onClick: e.onRejectFriendRequest,
                    type: y.B.Alert,
                    "data-test-selector": "reject-button"
                }, n)))
            }),
            T = n("x1ax"),
            w = Object(i.compose)(Object(a.a)(T, {
                name: "onCancelFriendRequest",
                options: function(e) {
                    return l.__assign({}, Object(u.a)({
                        targetID: e.targetID
                    }), b("cancelFriendRequest", "CancelFriendRequestPayload", e.targetID, g))
                }
            }))(function(e) {
                var t = Object(k.d)("Cancel Request", "OutgoingFriendRequestButton");
                return c.createElement(y.v, {
                    ariaLabel: t,
                    onClick: e.onCancelFriendRequest,
                    "data-test-selector": "cancel-button"
                }, t)
            }),
            O = n("Ugo3"),
            R = Object(i.compose)(Object(a.a)(O, {
                name: "onUnfriendUser",
                options: function(e) {
                    return l.__assign({}, Object(u.a)({
                        targetID: e.targetID
                    }), b("unfriendUser", "UnfriendUserPayload", e.targetID, g))
                }
            }))(function(e) {
                var t = Object(k.d)("Friends", "UnfriendButton"),
                    n = Object(k.d)("Unfriend", "UnfriendButton");
                return c.createElement(y.v, {
                    ariaLabel: n,
                    onClick: e.onUnfriendUser,
                    statusAlertText: n,
                    "data-test-selector": "unfriend-button"
                }, t)
            }),
            D = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return l.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (!this.props.friendData && this.props.data && (this.props.data.loading || this.props.data.error)) return c.createElement(y._14, {
                        height: 30,
                        width: 60
                    });
                    var e = this.props.friendData || this.props.data;
                    if (!e || !e.user || !e.user.self || this.props.targetID === this.props.currentUserID) return null;
                    if (!this.props.isLoggedIn) return c.createElement(S, {
                        isLoggedIn: this.props.isLoggedIn,
                        targetID: this.props.targetID
                    });
                    switch (e.user.self.friendship ? e.user.self.friendship.__typename : g) {
                        case h:
                            return c.createElement(R, {
                                targetID: this.props.targetID
                            });
                        case f:
                            return c.createElement(N, {
                                targetID: this.props.targetID
                            });
                        case v:
                            return c.createElement(w, {
                                targetID: this.props.targetID
                            });
                        case g:
                        default:
                            return c.createElement(S, {
                                isLoggedIn: this.props.isLoggedIn,
                                targetID: this.props.targetID
                            })
                    }
                }, t
            }(c.Component),
            I = n("7iNp");
        var x = Object(i.compose)(Object(s.d)("FriendButton"), Object(r.b)(function(e) {
            var t = Object(o.c)(e);
            return {
                currentUserID: t && t.id,
                isLoggedIn: Object(o.d)(e)
            }
        }), Object(a.a)(I, {
            options: function(e) {
                return {
                    variables: {
                        id: e.targetID
                    }
                }
            },
            skip: function(e) {
                return !!e.friendData || !e.isLoggedIn || e.currentUserID === e.targetID
            }
        }))(D);
        n.d(t, "a", function() {
            return x
        })
    },
    puy8: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return i
        }), t.a = r, t.c = function(e, t) {
            var n = parseInt(e, 10) % i.length;
            return r(i[n], t)
        };
        var i = [{
            id: "profile_image_001",
            urlSlug: "bb97f7e6-f11a-4194-9708-52bf5a5125e8"
        }, {
            id: "profile_image_002",
            urlSlug: "27103734-3cda-44d6-a384-f2ab71e4bb85"
        }, {
            id: "profile_image_003",
            urlSlug: "49988c7b-57bc-4dee-bd4f-6df4ad215d3a"
        }, {
            id: "profile_image_004",
            urlSlug: "0ecbb6c3-fecb-4016-8115-aa467b7c36ed"
        }, {
            id: "profile_image_005",
            urlSlug: "cd618d3e-f14d-4960-b7cf-094231b04735"
        }, {
            id: "profile_image_006",
            urlSlug: "4cbf10f1-bb9f-4f57-90e1-15bf06cfe6f5"
        }, {
            id: "profile_image_007",
            urlSlug: "b83b1794-7df9-4878-916c-88c2ad2e4f9f"
        }];

        function r(e, t) {
            var n = 70;
            return 300 === t ? n = 300 : 96 !== t && 80 !== t || (n = 150), "https://static-cdn.jtvnw.net/user-default-pictures/" + e.urlSlug + "-profile_image-" + n + "x" + n + ".jpg"
        }
    },
    pzcm: function(e, t) {},
    q8Cw: function(e, t) {},
    qe65: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("RH2O"),
            o = n("NXs7"),
            s = n("0nzt"),
            l = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props,
                        t = (e.defaultRes, e.sources),
                        n = (e.darkModeEnabled, i.__rest(e, ["defaultRes", "sources", "darkModeEnabled"])),
                        a = this.props.darkModeEnabled ? t.dark : t.light,
                        o = Object.keys(a);
                    delete n.dispatch;
                    var s = i.__assign({}, n, {
                        src: a[this.props.defaultRes || o[0]],
                        srcSet: o.map(function(e) {
                            return a[e] + " " + e
                        }).join(",")
                    });
                    return r.createElement("img", i.__assign({}, s, {
                        onLoad: this.props.onLoad
                    }))
                }, t
            }(r.Component);
        var c = Object(a.b)(function(e) {
            return {
                darkModeEnabled: Object(s.a)(e) === o.a.Dark
            }
        })(l);
        n.d(t, "a", function() {
            return c
        })
    },
    qpaC: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Thread_ArchiveThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateWhisperThreadInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isArchived"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 132
            }
        };
        n.loc.source = {
            body: "mutation Thread_ArchiveThread($input: UpdateWhisperThreadInput!) {\nupdateWhisperThread(input: $input) {\nthread {\nid\nisArchived\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "qzJ+": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("6sO2"),
            a = n("oIkB"),
            o = n("HM6l"),
            s = n("9RMu"),
            l = n("l21v");
        var c = n("BVQ1"),
            d = n("m4HT"),
            u = n("+gWs");

        function p(e) {
            try {
                var t = r.o.apollo.client.cache.readQuery({
                    query: u,
                    variables: {
                        id: e
                    }
                }, !0);
                return t ? t.whisperThread : null
            } catch (e) {
                return null
            }
        }
        t.a = function(e) {
            var t = e.currentUserID,
                n = e.emotes,
                m = e.message,
                h = e.recipientUserID;
            if ("" === t || "" === m || "" === h) return Promise.reject(new Error("Tried to send a whisper with nonsensical parameters."));
            var f = Object(o.b)(),
                g = i.__assign({
                    mutation: c
                }, Object(a.a)({
                    message: m,
                    nonce: f,
                    recipientUserID: h
                })),
                v = Object(d.a)(t, h),
                b = p(v);
            if (b) {
                var k = function(e, t) {
                    for (var n = [], i = /\S+/g, r = i.exec(e); r;) {
                        var a = r[0],
                            o = t[a];
                        if (o) {
                            var s = Object(l.d)(e.slice(0, r.index)),
                                c = s ? s.length : r.index;
                            n.push({
                                id: o.id,
                                start: c,
                                end: c + a.length - 1
                            })
                        }
                        r = i.exec(e)
                    }
                    return n
                }(m, n).map(s.a);
                g.optimisticResponse = {
                    sendWhisper: {
                        __typename: "SendWhisperPayload",
                        message: {
                            content: {
                                content: m,
                                emotes: k,
                                __typename: "MessageBody"
                            },
                            from: {
                                id: t,
                                __typename: "User"
                            },
                            id: f,
                            sentAt: (new Date).toISOString(),
                            deletedAt: null,
                            editedAt: null,
                            __typename: "WhisperMessage"
                        }
                    }
                }, g.update = function(e, t) {
                    var n = "" + (parseInt(b.messages.edges[0].cursor, 10) + 1) || "";
                    if (t.data) {
                        var i = p(v);
                        if (i) {
                            var r = i.messages.edges.findIndex(function(e) {
                                return e.cursor === n
                            });
                            if (r < 0) {
                                var a = {
                                    cursor: n,
                                    node: t.data.sendWhisper.message,
                                    __typename: "WhisperMessageEdge"
                                };
                                i.messages.edges.unshift(a)
                            } else i.messages.edges[r].node = t.data.sendWhisper.message;
                            i.userLastMessageRead.sentAt = t.data.sendWhisper.message.sentAt, i.unreadMessagesCount = 0, e.writeQuery({
                                query: u,
                                data: {
                                    whisperThread: i
                                }
                            })
                        }
                    }
                }
            }
            return r.o.apollo.client.mutate(g)
        }
    },
    rCmJ: function(e, t, n) {
        "use strict";
        var i = n("zgdU");
        n.d(t, "a", function() {
            return i.a
        })
    },
    rK5D: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return r
        }), n.d(t, "c", function() {
            return l
        });
        var i, r, a = n("TToO"),
            o = n("6sO2"),
            s = n("vH/s");
        ! function(e) {
            e.Chat = "chat", e.SocialColumn = "socialcolumn", e.FullscreenChat = "fullscreen_chat"
        }(i || (i = {})),
        function(e) {
            e.Close = "close", e.Open = "open"
        }(r || (r = {}));
        var l = function(e) {
            var t = a.__assign({
                action_type: "click"
            }, e);
            o.n.track(s.SpadeEventType.SiteLayoutMod, t)
        }
    },
    rRWv: function(e, t) {},
    rWzl: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "BlockUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BlockUserInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "blockUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "targetUser"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 94
            }
        };
        n.loc.source = {
            body: "mutation BlockUser($input: BlockUserInput!) {\nblockUser(input: $input) {\ntargetUser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    rZAm: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Search_SearchGameResultCard_Game"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "name"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "game"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "name"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "boxArtURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "40"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "height"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "55"
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 115
            }
        };
        n.loc.source = {
            body: "query Search_SearchGameResultCard_Game($name: String!) {\ngame(name: $name) {\nid\nboxArtURL(width: 40 height: 55)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    sEXz: function(e, t, n) {
        "use strict";
        var i = n("GiK3"),
            r = n("6sO2"),
            a = n("Odds"),
            o = function() {
                return i.createElement(a._8, {
                    className: "insider-pass-footer",
                    textAlign: a._45.Center,
                    padding: {
                        top: 1
                    }
                }, i.createElement(a.Q, null, Object(r.d)("All-Access benefits last up to the start of the 2019 Overwatch League Season.", "InsiderPassFooter")), i.createElement(a.Q, null, Object(r.d)("Twitch emotes, badges, and in-game content are yours to keep forever.", "InsiderPassFooter")))
            };
        n.d(t, "a", function() {
            return o
        })
    },
    sq7i: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Current_User"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 41
            }
        };
        n.loc.source = {
            body: "query Current_User {\ncurrentUser {\nid\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    tLvU: function(e, t) {},
    tTbW: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Prime_PrimeOffers_PrimeOfferIds"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "dateOverride"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Time"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "primeOffers"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "dateOverride"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "dateOverride"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "status"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 126
            }
        };
        n.loc.source = {
            body: "query Prime_PrimeOffers_PrimeOfferIds($dateOverride: Time) {\nprimeOffers(dateOverride: $dateOverride) {\nid\nself {\nstatus\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    tnNl: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("F8kA"),
            o = n("vH/s"),
            s = n("CSlQ"),
            l = n("2b/B"),
            c = n("Odds"),
            d = (n("Xorj"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(c._2, {
                        position: c._15.Fixed,
                        attachTop: !0,
                        fullWidth: !0
                    }, r.createElement("nav", {
                        className: "minimal-top-nav"
                    }, r.createElement(c._8, {
                        className: "minimal-top-nav__menu",
                        display: c.R.Flex,
                        alignItems: c.c.Stretch,
                        flexWrap: c.U.NoWrap,
                        fullHeight: !0,
                        justifyContent: c._7.Between
                    }, r.createElement(c._2, {
                        display: c.R.InlineFlex,
                        alignItems: c.c.Center,
                        flexShrink: 0
                    }, r.createElement(a.a, {
                        to: {
                            pathname: "/",
                            state: {
                                medium: o.PageviewMedium.TopNav,
                                content: o.PageviewContent.Logo
                            }
                        },
                        className: "minimal-top-nav__home-link"
                    }, r.createElement(c._24, {
                        asset: c._25.LogoTwitch,
                        width: 94,
                        height: 32
                    }))), r.createElement(l.a, {
                        darkModeEnabled: this.props.darkModeEnabled
                    }))))
                }, t = i.__decorate([Object(s.d)("MinimalTopNav", {
                    autoReportInteractive: !0
                })], t)
            }(r.Component));
        n.d(t, "a", function() {
            return d
        })
    },
    u8SD: function(e, t, n) {
        "use strict";
        t.a = function() {
            var e = this;
            return Object(r.a)(s, {
                props: function(t) {
                    return {
                        blockUserMutation: function(n, r, s, l) {
                            return i.__awaiter(e, void 0, void 0, function() {
                                return i.__generator(this, function(e) {
                                    switch (e.label) {
                                        case 0:
                                            return t.mutate ? [4, t.mutate({
                                                variables: {
                                                    input: {
                                                        targetUserID: n,
                                                        sourceContext: s,
                                                        reason: r
                                                    }
                                                },
                                                optimisticResponse: {
                                                    blockUser: {
                                                        __typename: "BlockUserPayload",
                                                        targetUser: {
                                                            __typename: "User",
                                                            id: n
                                                        }
                                                    }
                                                },
                                                update: function(e) {
                                                    var t = e.readFragment({
                                                        id: Object(o.a)(l),
                                                        fragment: a
                                                    });
                                                    t && (t.blockedUsers.push({
                                                        id: n,
                                                        __typename: "User"
                                                    }), e.writeFragment({
                                                        id: Object(o.a)(l),
                                                        fragment: a,
                                                        data: t
                                                    }))
                                                }
                                            })] : [3, 2];
                                        case 1:
                                            return e.sent(), [3, 3];
                                        case 2:
                                            throw new Error("blockUserMutation is not ready");
                                        case 3:
                                            return [2]
                                    }
                                })
                            })
                        }
                    }
                }
            })
        };
        var i = n("TToO"),
            r = n("7vx8"),
            a = n("nmYW"),
            o = (n.n(a), n("yADj")),
            s = n("rWzl");
        n.n(s)
    },
    uTyw: function(e, t, n) {
        "use strict";
        t.b = function(e) {
            var t, n, l, c, d, u = e.append,
                p = void 0 !== u && u,
                m = e.searchResults,
                h = e.currentGameResults,
                f = e.currentUserResults,
                g = e.currentCommunityResults,
                v = e.currentVideoResults,
                b = e.currentLiveResults;
            m.games && (t = {
                totalHits: m.games.totalHits,
                results: p && h ? h.results : []
            }, p && m.exhaustedHits && h && !m.games.totalHits && (t.totalHits = h.totalHits), t.results = t.results.concat(m.games.hits.map(function(e, t) {
                var n = i.o.intl.getLanguageCode();
                return {
                    title: n && void 0 !== e.localizations && n in e.localizations ? e.localizations[n] : e.name,
                    thumbnailAltText: e.name,
                    linkTo: {
                        pathname: Object(a.c)(e.name),
                        state: {
                            content: o.PageviewContent.Game,
                            content_index: t,
                            medium: o.PageviewMedium.NavSearch
                        }
                    },
                    id: e.objectID,
                    popularity: e.popularity
                }
            })));
            if (m.videos) {
                var k = p && v ? v.results : [],
                    y = m.videos.totalHits;
                p && m.exhaustedHits && v && !m.videos.totalHits && (y = v.totalHits), c = function(e, t, n) {
                    return {
                        results: e.concat(t.hits.map(s)),
                        totalHits: t.totalHits || n
                    }
                }(k, m.videos, y)
            }
            m.users && (n = {
                totalHits: p && f ? f.totalHits : m.users.totalHits,
                results: p && f ? f.results : []
            }, p && m.exhaustedHits && f && !m.users.totalHits && (n.totalHits = f.totalHits), n.results = n.results.concat(m.users.hits.map(function(e, t) {
                return {
                    login: e.login,
                    name: e.name,
                    thumbnail: e.profile_image || Object(r.c)(e.objectID, 64),
                    thumbnailAltText: e.name,
                    linkTo: {
                        pathname: "/" + e.login,
                        state: {
                            content: o.PageviewContent.User,
                            content_index: t,
                            medium: o.PageviewMedium.NavSearch
                        }
                    },
                    id: e.objectID,
                    followers: e.followers
                }
            })));
            m.channels && ((d = {
                totalHits: p && b ? b.totalHits : m.channels.totalHits,
                results: p && b ? b.results : []
            }).results = d.results.concat(m.channels.hits.map(function(e, t) {
                return {
                    viewerCount: e.channel_count,
                    login: e.login,
                    name: e.name,
                    thumbnailAltText: e.status,
                    linkTo: {
                        pathname: "/" + e.login,
                        state: {
                            content: o.PageviewContent.Live,
                            content_index: t,
                            medium: o.PageviewMedium.NavSearch
                        }
                    },
                    id: e.objectID,
                    status: e.status
                }
            })));
            m.communities && (l = {
                totalHits: m.communities.totalHits,
                results: p && g ? g.results : []
            }, p && m.exhaustedHits && g && !m.communities.totalHits && (l.totalHits = g.totalHits), l.results = l.results.concat(m.communities.hits.map(function(e, t) {
                return {
                    name: e.name,
                    thumbnail: e.avatar_image_url,
                    thumbnailAltText: e.name,
                    linkTo: {
                        pathname: "/communities/" + e.name,
                        state: {
                            content: o.PageviewContent.Community,
                            content_index: t,
                            medium: o.PageviewMedium.NavSearch
                        }
                    },
                    viewerCount: e.viewers,
                    id: e.objectID
                }
            })));
            return {
                currentGameResults: t,
                currentUserResults: n,
                currentLiveResults: d,
                currentCommunityResults: l,
                currentVideoResults: c,
                exhaustedHits: m.exhaustedHits
            }
        }, t.a = s;
        var i = n("6sO2"),
            r = n("puy8"),
            a = n("NY9D"),
            o = n("vH/s");

        function s(e, t) {
            return {
                title: e.title,
                thumbnail: e.thumbnail,
                thumbnailAltText: e.title,
                linkTo: {
                    pathname: "/videos/" + e.objectID,
                    state: {
                        content: o.PageviewContent.Video,
                        content_index: t,
                        medium: o.PageviewMedium.NavSearch
                    }
                },
                login: e.broadcaster_login,
                name: e.broadcaster_name,
                createdAt: e.created_at,
                length: e.length,
                id: e.objectID
            }
        }
    },
    uXDg: function(e, t, n) {
        "use strict";
        n.d(t, "f", function() {
            return i
        }), n.d(t, "b", function() {
            return r
        }), n.d(t, "c", function() {
            return a
        }), n.d(t, "d", function() {
            return o
        }), n.d(t, "e", function() {
            return s
        }), n.d(t, "g", function() {
            return l
        }), n.d(t, "a", function() {
            return c
        }), t.l = function(e, t) {
            return {
                type: i,
                data: e,
                contentWidth: t
            }
        }, t.h = function(e, t) {
            return {
                type: r,
                threadID: e,
                contentWidth: t
            }
        }, t.i = function(e, t) {
            return {
                type: a,
                threadID: e,
                contentWidth: t
            }
        }, t.j = function(e, t) {
            return {
                type: o,
                threadID: e,
                contentWidth: t
            }
        }, t.m = function(e) {
            return {
                type: c,
                contentWidth: e
            }
        }, t.k = function(e, t) {
            return {
                type: s,
                threadID: e,
                contentWidth: t
            }
        }, t.n = function(e, t) {
            return {
                type: l,
                threadID: e,
                contentWidth: t
            }
        };
        var i = "whispers.THREAD_OPENED",
            r = "whispers.THREAD_CLOSED",
            a = "whispers.THREAD_COLLAPSED",
            o = "whispers.THREAD_EXPANDED",
            s = "whispers.THREAD_FOCUSED",
            l = "whispers.THREAD_UNFOCUSED",
            c = "whispers.CONTENT_RESIZED"
    },
    ukY1: function(e, t) {},
    "v+rJ": function(e, t) {},
    vBst: function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return r
            }),
            function(e) {
                e.PercentOff = "percent_off", e.FixedValueOff = "fixed_value_off"
            }(i || (i = {}));
        var r = {
            Prime: "prime",
            Tier1: "1000",
            Tier2: "2000",
            Tier3: "3000",
            Custom: "Custom"
        }
    },
    "vKN/": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "SideNav_FeaturedChannels"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "language"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "String"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "featuredStreams"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "language"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "language"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "broadcaster"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "login"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "profileImageURL"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "width"
                                                    },
                                                    value: {
                                                        kind: "IntValue",
                                                        value: "70"
                                                    }
                                                }],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 189
            }
        };
        n.loc.source = {
            body: "query SideNav_FeaturedChannels($language: String) {\nfeaturedStreams(language: $language) {\nstream {\nid\nbroadcaster {\nid\ndisplayName\nlogin\nprofileImageURL(width: 70)\n}\ngame {\nid\nname\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    vQuK: function(e, t) {},
    vRhQ: function(e, t) {},
    vbMw: function(e, t) {},
    "w+Qa": function(e, t) {},
    "w/8h": function(e, t) {},
    w0LG: function(e, t) {},
    wHbv: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "OnsiteNotifications_View"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "viewedNotifications"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "notifications"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "summary"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "unseenCount"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "lastSeenAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 123
            }
        };
        n.loc.source = {
            body: "mutation OnsiteNotifications_View {\nviewedNotifications {\nuser {\nnotifications {\nsummary {\nunseenCount\nlastSeenAt\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    wjhu: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Prime_PrimeOffers_CurrentUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hasPrime"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "requestInfo"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "countryCode"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 95
            }
        };
        n.loc.source = {
            body: "query Prime_PrimeOffers_CurrentUser {\ncurrentUser {\nid\nhasPrime\n}\nrequestInfo {\ncountryCode\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    x1ax: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FriendButton_CancelFriendRequest"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CancelFriendRequestInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "cancelFriendRequest"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "friendButtonFragment"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 232
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/friend-button/queries/friend-button-fragment.gql"\nmutation FriendButton_CancelFriendRequest($input: CancelFriendRequestInput!) {\ncancelFriendRequest(input: $input) {\nuser {\nid\n...friendButtonFragment\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var r = {};
        i.definitions = i.definitions.concat(n("HC5L").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !r[t] && (r[t] = !0, !0)
        })), e.exports = i
    },
    x4k6: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FollowButton_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "followButtonFragment"
                                },
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 156
            }
        };
        i.loc.source = {
            body: '#import "twilight/common/queries/follow-button-fragment.gql"\nquery FollowButton_User($login: String!) {\nuser(login: $login) {\nid\n...followButtonFragment\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var r = {};
        i.definitions = i.definitions.concat(n("onRC").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !r[t] && (r[t] = !0, !0)
        })), e.exports = i
    },
    x583: function(e, t) {},
    x6ny: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_ReportReasons"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "content"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportContentType"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "reportReasons"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "content"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "content"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "text"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 114
            }
        };
        n.loc.source = {
            body: "query ReportUserModal_ReportReasons($content: ReportContentType!) {\nreportReasons(content: $content) {\nid\ntext\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    xrVp: function(e, t, n) {
        "use strict";
        t.b = function(e, t) {
            var n = "";
            switch (t) {
                case o.a.TypedCommand:
                    n = "typed_command";
                    break;
                case o.a.UserMenu:
                    n = "user_menu";
                    break;
                default:
                    n = "user_menu"
            }
            var a = "";
            switch (e) {
                case r.a.Dark:
                    a = "dark";
                    break;
                case r.a.Light:
                    a = "light";
                    break;
                default:
                    a = "light"
            }
            i.n.track(s.SpadeEventType.ThemeChange, {
                source: n,
                mode: a
            })
        }, t.a = function(e) {
            switch (e) {
                case a.a.Archive:
                    return s.SpadeVideoBroadcastType.Archive;
                case a.a.Highlight:
                    return s.SpadeVideoBroadcastType.Highlight;
                case a.a.Upload:
                    return s.SpadeVideoBroadcastType.Upload;
                case a.a.WatchParty:
                    return s.SpadeVideoBroadcastType.WatchParty;
                case a.a.PastPremiere:
                    return s.SpadeVideoBroadcastType.PastPremiere;
                case a.a.PremiereUpload:
                    return s.SpadeVideoBroadcastType.PremiereUpload;
                default:
                    var t = e;
                    return t
            }
        };
        var i = n("6sO2"),
            r = n("NXs7"),
            a = n("6WAQ"),
            o = n("NikC"),
            s = n("vH/s")
    },
    xwpJ: function(e, t, n) {
        "use strict";
        var i = function(e, t) {
                var n = "https://www.twitch.tv/communities/{communityName}".replace("{communityName}", e);
                return 'community report (<a href="{link}">{link}</a>) {description}'.replace(/{link}/g, n).replace(/{description}/, t)
            },
            r = n("6sO2");

        function a() {
            return [{
                id: "other",
                text: Object(r.d)("Other Terms of Service Violation", "ReportUserModal")
            }]
        }
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        })
    },
    "y+bN": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Search_SearchLiveResultCard_UserStream"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "previewImageURL"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "width"
                                            },
                                            value: {
                                                kind: "IntValue",
                                                value: "156"
                                            }
                                        }, {
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "height"
                                            },
                                            value: {
                                                kind: "IntValue",
                                                value: "88"
                                            }
                                        }],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 145
            }
        };
        n.loc.source = {
            body: "query Search_SearchLiveResultCard_UserStream($login: String!) {\nuser(login: $login) {\nid\nstream {\nid\npreviewImageURL(width: 156 height: 88)\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    yADj: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return e && Object(i.c)(e) || ""
        };
        var i = n("+dIz")
    },
    yDSg: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Whispers_Tracking_CurrentUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hasTurbo"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "availability"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 86
            }
        };
        n.loc.source = {
            body: "query Whispers_Tracking_CurrentUser {\ncurrentUser {\nid\nhasTurbo\navailability\nlogin\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    yDaU: function(e, t, n) {
        "use strict";
        t.a = function(e, t, n) {
            var a = i.b.get("sidenav_follow_data_sample_rate", 1e4);
            if (Math.floor(Math.random() * a)) return;
            var s = {
                is_collapsed: n,
                followed_channels_total: 0
            };
            if (!t && (s.followed_channels_total = e.follows && e.follows.edges ? e.follows.edges.length : 0, e.followedLiveUsers && e.followedLiveUsers.nodes)) {
                var c = e.followedLiveUsers.nodes.reduce(function(e, t) {
                    return l(t.stream ? t.stream.type : null) === o ? e + 1 : e
                }, 0);
                s.followed_channels_live_stream = e.followedLiveUsers.nodes.length - c, s.followed_channels_rerun = c
            }
            i.o.tracking.track(r.SpadeEventType.SideNavDetails, s)
        }, t.c = function(e) {
            i.o.tracking.track(r.SpadeEventType.SideNavLoadMore, {
                displayed_channel_count: e
            })
        }, t.b = function(e, t) {
            i.o.tracking.track(r.SpadeEventType.SideNavChannelClick, {
                click_target_state: l(t),
                click_target_index: e
            })
        }, t.d = function(e, t) {
            i.o.tracking.track(r.SpadeEventType.SubscribedSideNavChannelClick, {
                click_target_state: l(t),
                click_target_index: e
            })
        };
        var i = n("6sO2"),
            r = n("vH/s"),
            a = "live",
            o = "rerun",
            s = "offline";

        function l(e) {
            return e ? "watch_party" === e ? o : a : s
        }
    },
    "yTC+": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Thread_SetMuteThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateWhisperThreadInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isMuted"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 129
            }
        };
        n.loc.source = {
            body: "mutation Thread_SetMuteThread($input: UpdateWhisperThreadInput!) {\nupdateWhisperThread(input: $input) {\nthread {\nid\nisMuted\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    yqdF: function(e, t) {},
    zAvr: function(e, t) {},
    zC6J: function(e, t) {},
    zNzU: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = {
            resource: {
                isSocialColumnClosedByUserAction: !1,
                isRightColumnClosedByUserAction: !1,
                isFullscreenRightColumnClosedByUserAction: !1
            },
            time: Date.now()
        }
    },
    zgdU: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        });
        var i = n("TToO"),
            r = n("GiK3"),
            a = (n.n(r), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.setContainerRef = function(e) {
                        t.container = e
                    }, t.handleGlobalClick = function(e) {
                        var n = e.target;
                        t.isParentOf(n) || t.props.onClickOut(e)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    document.addEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.componentWillUnmount = function() {
                    document.removeEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.render = function() {
                    var e = this.props,
                        t = (e.onClickOut, i.__rest(e, ["onClickOut"]));
                    return r.createElement("div", i.__assign({}, t, {
                        ref: this.setContainerRef
                    }), this.props.children)
                }, t.prototype.isParentOf = function(e) {
                    for (var t = e; t;) {
                        if (t === this.container) return !0;
                        t = t.parentElement
                    }
                    return !1
                }, t
            }(r.Component))
    },
    zzpv: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "WatchAdModal_Redeeem"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "RedeemTrueXAdInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "redeemTrueXAd"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "grantedBits"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 105
            }
        };
        n.loc.source = {
            body: "mutation WatchAdModal_Redeeem($input:RedeemTrueXAdInput!) {\nredeemTrueXAd(input:$input) {\ngrantedBits\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    }
});
//# sourceMappingURL=pages.subs-3f01d871687151b68ba9b1365afe989c.js.map