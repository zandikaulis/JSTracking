webpackJsonp([39, 75], {
    "+GT7": function(e, t, n) {
        "use strict";
        var i, r = n("TToO"),
            a = n("GiK3"),
            o = n("F8kA"),
            s = n("6sO2"),
            l = n("IOwa"),
            c = n("RH2O"),
            d = n("2KeS"),
            u = n("PPNL"),
            p = n("HW6M"),
            m = n("YUUt"),
            h = n.n(m),
            g = n("/SNv"),
            f = n.n(g),
            v = n("Vr3l"),
            b = n.n(v);
        ! function(e) {
            e[e.CounterStrike = 0] = "CounterStrike", e[e.Hearthstone = 1] = "Hearthstone", e[e.LeagueOfLegends = 2] = "LeagueOfLegends", e[e.Overwatch = 3] = "Overwatch"
        }(i || (i = {}));
        var k = n("LgcN"),
            y = n("Odds"),
            S = (n("AHWf"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isLoading: !1,
                        isError: !1
                    }, t.logger = s.n.logger.withCategory("metadata-icon"), t.didUnmount = !1, t.loadData = function() {
                        if (!t.state.isLoading && !t.state.isError && t.props.streamMetadata && !t.state.content) {
                            var e = t.props.streamMetadata.counterStrikeGlobalOffensive && t.props.streamMetadata.counterStrikeGlobalOffensive.skill,
                                n = t.props.streamMetadata.hearthstone && t.props.streamMetadata.hearthstone.broadcasterHeroClass,
                                r = t.props.streamMetadata.leagueOfLegends && t.props.streamMetadata.leagueOfLegends.championID,
                                a = t.props.streamMetadata.overwatch && t.props.streamMetadata.overwatch.broadcasterCharacter;
                            e ? (t.setState({
                                game: i.CounterStrike,
                                gameSprite: h.a,
                                item: String(e),
                                isLoading: !0
                            }), t.getCounterStrikeData(e)) : n ? (t.setState({
                                game: i.Hearthstone,
                                gameSprite: f.a,
                                item: n,
                                isLoading: !0
                            }), t.getHearthstoneData()) : r ? (t.setState({
                                game: i.LeagueOfLegends,
                                item: String(r)
                            }), t.getLeagueData()) : a && (t.setState({
                                game: i.Overwatch,
                                gameSprite: b.a,
                                item: a,
                                isLoading: !0
                            }), t.getOverwatchData())
                        }
                    }, t.renderIcon = function(e, n, r, o, s, l) {
                        if (!r) return null;
                        var c = p("metadata-icon", {
                                "metadata-icon--csgo-skill": t.state.game === i.CounterStrike
                            }),
                            d = 30;
                        return t.state.game === i.CounterStrike && (d = 50), a.createElement(y._2, {
                            display: y.N.Flex,
                            flexDirection: y.P.Column,
                            alignItems: y.c.Center,
                            justifyContent: y._1.Center,
                            fullHeight: !0,
                            margin: {
                                left: 1
                            }
                        }, a.createElement(y._43, {
                            direction: y._45.Left,
                            label: e
                        }, a.createElement(y._2, {
                            className: c
                        }, a.createElement("div", {
                            style: {
                                backgroundImage: "url(" + n + ")",
                                backgroundPositionX: s ? -1 * s : 0,
                                backgroundPositionY: l ? -1 * l : 0,
                                width: r ? r + "px" : "3rem",
                                height: r ? o + "px" : "3rem",
                                transform: "scale(" + (r > 0 ? d / r : 1) + ")",
                                transformOrigin: "0 0"
                            }
                        }))))
                    }, t.getCounterStrikeData = function(e) {
                        return r.__awaiter(t, void 0, void 0, function() {
                            var t, n, i;
                            return r.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        return r.trys.push([0, 2, , 3]), [4, Object(k.a)()];
                                    case 1:
                                        return t = r.sent(), this.didUnmount ? [2] : ((n = {})[e] = t[0]["Skill Group"][e - 1], this.setState({
                                            content: n
                                        }), [3, 3]);
                                    case 2:
                                        return i = r.sent(), this.logger.error(i, "Failed to load Counter-Strike skill group data"), this.setState({
                                            isError: !0,
                                            isLoading: !1
                                        }), [3, 3];
                                    case 3:
                                        return [2]
                                }
                            })
                        })
                    }, t.getHearthstoneData = function() {
                        return r.__awaiter(t, void 0, void 0, function() {
                            var e, t, n;
                            return r.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        return i.trys.push([0, 2, , 3]), [4, Object(k.b)()];
                                    case 1:
                                        return e = i.sent(), this.didUnmount ? [2] : (t = {}, e[0].Class.forEach(function(e) {
                                            t[e.class] = e
                                        }), this.setState({
                                            content: t,
                                            isLoading: !1
                                        }), [3, 3]);
                                    case 2:
                                        return n = i.sent(), this.logger.error(n, "Failed to load Hearthstone class data"), this.setState({
                                            isError: !0,
                                            isLoading: !1
                                        }), [3, 3];
                                    case 3:
                                        return [2]
                                }
                            })
                        })
                    }, t.getLeagueData = function() {
                        t.props.leagueOfLegends.isLoading || t.props.leagueOfLegends.isError || t.props.leagueOfLegends.championsMap || t.props.onLoadLeagueOfLegendsChampions()
                    }, t.getOverwatchData = function() {
                        return r.__awaiter(t, void 0, void 0, function() {
                            var e, t, n, i, a, o, s, l, c, d, u, p, m;
                            return r.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        return r.trys.push([0, 2, , 3]), [4, Object(k.d)()];
                                    case 1:
                                        if (e = r.sent(), this.didUnmount) return [2];
                                        for (t = !1, n = void 0, i = 0, a = e; i < a.length && (n = a[i], !t); i++)
                                            for (o in n)
                                                if (n.hasOwnProperty(o))
                                                    for (s = n[o], l = 0, c = s; l < c.length; l++)
                                                        if ((d = c[l]).character === this.state.item) {
                                                            (m = {})[d.character] = d, u = m, this.setState({
                                                                content: u,
                                                                isLoading: !1
                                                            }), t = !0;
                                                            break
                                                        }
                                        return [3, 3];
                                    case 2:
                                        return p = r.sent(), this.logger.error(p, "Failed to load Overwatch character data"), this.setState({
                                            isError: !0,
                                            isLoading: !1
                                        }), [3, 3];
                                    case 3:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.loadData()
                }, t.prototype.componentWillUnmount = function() {
                    this.didUnmount = !0
                }, t.prototype.render = function() {
                    if (!this.state.item) return null;
                    if (this.state.game === i.LeagueOfLegends) {
                        if (!this.props.leagueOfLegends.championsMap) return null;
                        var e = this.props.leagueOfLegends.championsMap[this.state.item],
                            t = "https://ddragon.leagueoflegends.com/cdn/" + this.props.leagueOfLegends.version + "/img/sprite/" + e.image.sprite;
                        return this.renderIcon(e.name, t, e.image.w, e.image.h, e.image.x, e.image.y)
                    }
                    var n = this.state.content && this.state.content[this.state.item];
                    return n ? this.renderIcon(n.display_name, this.state.gameSprite || "", n.image_width, n.image_height, n.sprite_x_offset, n.sprite_y_offset) : null
                }, t
            }(a.Component));
        var _ = Object(c.b)(function(e) {
                return {
                    leagueOfLegends: {
                        championsMap: e.directory.leagueOfLegends.championsMap,
                        isError: e.directory.leagueOfLegends.isError,
                        isLoading: e.directory.leagueOfLegends.isLoading,
                        version: e.directory.leagueOfLegends.version
                    }
                }
            }, function(e) {
                return Object(d.b)({
                    onLoadLeagueOfLegendsChampions: u.a
                }, e)
            })(S),
            N = (n("LEV+"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        isPremiereExperimentActive: !1
                    }, n
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    return r.__awaiter(this, void 0, void 0, function() {
                        return r.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return [4, s.n.experiments.getAssignment("TWILIGHT_PREMIERE_UPLOAD_FLOW")];
                                case 1:
                                    return "yes" === e.sent() && s.b.get("premiere_video_manager_staff", !1) && this.setState({
                                        isPremiereExperimentActive: !0
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    var e = null;
                    !0 !== this.state.isPremiereExperimentActive && this.props.vodcast && (e = a.createElement(y._2, {
                        display: y.N.InlineBlock,
                        padding: {
                            right: .5
                        }
                    }, a.createElement(y._6, {
                        label: Object(s.d)("Vodcast", "LiveChannelCard")
                    })));
                    var t = Object(s.d)("{viewerCount, plural, one {# viewer on {channel}} other {# viewers on {channel}}}", {
                        viewerCount: this.props.viewerCount,
                        channel: a.createElement(o.a, {
                            to: this.props.channelNameLinkTo,
                            className: "live-channel-card__videos",
                            "data-a-target": "live-channel-card-channel-name-link"
                        }, this.props.channelName)
                    }, "Live Channel Card");
                    return a.createElement("div", r.__assign({
                        className: "live-channel-card"
                    }, Object(y._53)(this.props)), a.createElement(y.A, {
                        key: this.props.title
                    }, a.createElement(y._2, {
                        fullWidth: !0
                    }, a.createElement(y.j, {
                        overflow: !0
                    }, a.createElement("div", null, a.createElement(o.a, {
                        to: this.props.linkTo,
                        title: this.props.title,
                        "data-a-target": "live-channel-card-thumbnail-link"
                    }, this.props.children ? this.props.children : a.createElement(y.C, {
                        alt: this.props.imageAlt,
                        src: this.props.imageSrc,
                        aspect: y.k.Aspect16x9
                    }), this.renderContentType()), this.renderGameBoxArt()))), a.createElement(y.B, null, a.createElement(y._2, {
                        display: y.N.Flex,
                        flexWrap: y.Q.NoWrap
                    }, a.createElement(y._2, {
                        flexGrow: 1,
                        ellipsis: !0
                    }, a.createElement(o.a, {
                        to: this.props.linkTo,
                        className: "live-channel-card__channel",
                        "data-a-target": "live-channel-card-title-link"
                    }, a.createElement(y.W, {
                        margin: {
                            top: .5
                        }
                    }, a.createElement(y._35, {
                        type: y._40.H3,
                        fontSize: y.R.Size5,
                        lineHeight: y._3.Body,
                        ellipsis: !0,
                        className: "live-channel-card__title"
                    }, this.props.title))), a.createElement(y._2, {
                        className: "live-channel-card__meta",
                        display: y.N.Flex,
                        flexWrap: y.Q.NoWrap
                    }, e, a.createElement(y._35, {
                        type: y._40.Span,
                        ellipsis: !0
                    }, t))), a.createElement(y._2, {
                        flexGrow: 0,
                        flexShrink: 0
                    }, this.renderStreamMetadata())))))
                }, t.prototype.renderGameBoxArt = function() {
                    var e = this.props.gameLinkTo,
                        t = this.props.gameTitle,
                        n = this.props.gameImageSrc;
                    return t && e ? a.createElement(o.a, {
                        to: e,
                        title: t,
                        "data-a-target": "live-channel-card-game-link"
                    }, a.createElement(y._25, {
                        className: "live-channel-card__boxart",
                        position: y._9.Absolute,
                        attachRight: !0,
                        attachBottom: !0
                    }, a.createElement(y._43, {
                        display: y.N.Block,
                        direction: y._45.Bottom,
                        label: t
                    }, a.createElement(y.C, {
                        src: n,
                        alt: t,
                        aspect: y.k.BoxArt
                    })))) : null
                }, t.prototype.renderContentType = function() {
                    return !0 !== this.state.isPremiereExperimentActive ? null : "string" == typeof this.props.streamType && this.props.streamType ? a.createElement(y._2, {
                        position: y._9.Absolute,
                        attachLeft: !0,
                        attachTop: !0,
                        padding: .5
                    }, a.createElement(l.a, {
                        type: this.props.streamType,
                        hosting: this.props.hosting
                    })) : null
                }, t.prototype.renderStreamMetadata = function() {
                    return this.props.streamMetadata ? a.createElement(_, {
                        streamMetadata: this.props.streamMetadata
                    }) : null
                }, t
            }(a.Component)),
            E = N;
        n.d(t, !1, function() {
            return N
        }), n.d(t, "a", function() {
            return E
        })
    },
    "+I3D": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("6sO2"),
            o = n("CSlQ"),
            s = n("XhYx"),
            l = n("2qz3"),
            c = n("Odds"),
            d = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onFollow = function() {
                        t.props.onFollowCategoryChange(t.props.category, !0)
                    }, t.onUnfollow = function() {
                        t.props.onFollowCategoryChange(t.props.category, !1)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.props.isFollowingAllGamesInCategory) return r.createElement(c.v, {
                        ariaLabel: Object(a.d)("Unfollow All", "OnboardingFollowCategory"),
                        "data-test-selector": "onboarding-follow-category-button-component",
                        icon: c._16.Heart,
                        onClick: this.onUnfollow,
                        statusAlertIcon: c._16.Unheart
                    });
                    var e = Object(a.d)("Follow All", "OnboardingFollowCategory");
                    return r.createElement(c.u, {
                        icon: c._16.Heart,
                        ariaLabel: e,
                        "data-test-selector": "onboarding-follow-category-button-component",
                        onClick: this.onFollow
                    }, e)
                }, t
            }(r.Component),
            u = n("DBTH"),
            p = n("v5ho"),
            m = 3,
            h = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        categoryChange: null,
                        isFollowCategoriesExperimentEnabled: !1
                    }, t.renderCategoryContent = function() {
                        if (t.props.withStreams) {
                            var e = t.props.data.games.slice(0, m);
                            return r.createElement(l.a, {
                                names: e,
                                withAd: t.props.withAd,
                                directoryType: p.a.Games,
                                trackingMedium: t.props.trackingMedium
                            })
                        }
                        var n = void 0;
                        return t.props.withStreams || t.props.withBoxArtGameCards || (n = {
                            category: t.props.data.name,
                            categoryChange: t.state.categoryChange,
                            onFollow: t.props.onFollow,
                            onUnfollow: t.props.onUnfollow
                        }), r.createElement(s.a, {
                            names: t.props.data.games,
                            directoryType: p.a.Games,
                            cardSize: t.props.cardSize,
                            withAd: t.props.withAd,
                            followGameCardOptions: n,
                            isScrollable: !0
                        })
                    }, t.onFollowCategoryChange = function(e, n) {
                        t.setState({
                            categoryChange: {
                                timestampMs: Date.now(),
                                shouldFollow: n,
                                category: e
                            }
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return i.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, a.n.experiments.getAssignment(u.k)];
                                case 1:
                                    return e = t.sent(), this.setState({
                                        isFollowCategoriesExperimentEnabled: e === u.c.ENABLED
                                    }), this.props.latencyTracking.reportInteractive(), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return r.createElement(c._2, {
                        "data-test-selector": "community-category",
                        flexShrink: 0
                    }, r.createElement(c._2, {
                        alignItems: c.c.Center,
                        display: c.N.Flex,
                        flexWrap: c.Q.NoWrap
                    }, r.createElement(c._2, {
                        margin: {
                            x: 1,
                            bottom: .5
                        }
                    }, r.createElement(c._35, {
                        "data-test-selector": "community-category__title",
                        color: c.I.Base,
                        fontSize: c.R.Size3,
                        bold: !0
                    }, function(e) {
                        switch (e) {
                            case "MOBA":
                                return Object(a.d)("MOBA", "format-category");
                            case "Survival":
                                return Object(a.d)("Survival", "format-category");
                            case "Sandbox":
                                return Object(a.d)("Sandbox", "format-category");
                            case "Strategy":
                                return Object(a.d)("Strategy", "format-category");
                            case "FPS":
                                return Object(a.d)("FPS", "format-category");
                            case "Open World":
                                return Object(a.d)("Open World", "format-category");
                            case "MMORPG":
                                return Object(a.d)("MMORPG", "format-category");
                            case "Science Fiction":
                                return Object(a.d)("Science Fiction", "format-category");
                            case "Hack and Slash":
                                return Object(a.d)("Hack and Slash", "format-category");
                            case "Sports":
                                return Object(a.d)("Sports", "format-category");
                            case "Platform":
                                return Object(a.d)("Platform", "format-category");
                            case "Indie":
                                return Object(a.d)("Indie", "format-category");
                            case "RPG":
                                return Object(a.d)("RPG", "format-category");
                            case "Stealth":
                                return Object(a.d)("Stealth", "format-category");
                            case "Horror":
                                return Object(a.d)("Horror", "format-category");
                            case "Third-Person Shooter":
                                return Object(a.d)("Third-Person Shooter", "format-category");
                            case "Fighting":
                                return Object(a.d)("Fighting", "format-category");
                            case "Historical":
                                return Object(a.d)("Historical", "format-category");
                            case "Music":
                                return Object(a.d)("Music", "format-category");
                            case "Simulator":
                                return Object(a.d)("Simulator", "format-category");
                            case "Adventure":
                                return Object(a.d)("Adventure", "format-category");
                            case "Anime":
                                return Object(a.d)("Anime", "format-category");
                            case "Party":
                                return Object(a.d)("Party", "format-category");
                            case "Rogue-like":
                                return Object(a.d)("Rogue-like", "format-category");
                            case "Racing":
                                return Object(a.d)("Racing", "format-category");
                            case "Puzzle":
                                return Object(a.d)("Puzzle", "format-category");
                            default:
                                return e
                        }
                    }(this.props.data.name))), this.state.isFollowCategoriesExperimentEnabled && !this.props.withStreams && !this.props.withBoxArtGameCards && r.createElement(c._25, {
                        margin: {
                            left: 2
                        }
                    }, r.createElement(d, {
                        category: this.props.data,
                        onFollowCategoryChange: this.onFollowCategoryChange,
                        isFollowingAllGamesInCategory: this.props.isFollowingAllGamesInCategory
                    }))), r.createElement(c._2, null, r.createElement(c.W, {
                        flexGrow: 1
                    }, this.renderCategoryContent())))
                }, t
            }(r.Component),
            g = Object(o.d)("CommunityCategory")(h);
        n.d(t, !1, function() {
            return "community-category"
        }), n.d(t, !1, function() {
            return "community-category__title"
        }), n.d(t, !1, function() {
            return h
        }), n.d(t, "a", function() {
            return g
        })
    },
    "+R+X": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RecommendedFriends"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "recommendations"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "friends"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "user"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "displayName"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "login"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "profileImageURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "70"
                                                            }
                                                        }],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 136
            }
        };
        n.loc.source = {
            body: "query RecommendedFriends {\ncurrentUser {\nid\nrecommendations {\nfriends {\nuser {\nid\ndisplayName\nlogin\nprofileImageURL(width: 70)\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "+YN9": function(e, t) {},
    "+Znq": function(e, t, n) {
        "use strict";
        var i = n("jetF");
        n.d(t, "a", function() {
            return i.a
        })
    },
    "+gWs": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "WhisperThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "whisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "userLastMessageRead"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "sentAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "unreadMessagesCount"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "messages"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "20"
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "content"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "content"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "emotes"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "emoteID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "setID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "from"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "to"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "from"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "sentAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "editedAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "deletedAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 264
            }
        };
        n.loc.source = {
            body: "query WhisperThread($id: ID!) {\nwhisperThread(id: $id) {\nid\nuserLastMessageRead {\nid\nsentAt\n}\nunreadMessagesCount\nmessages(first: 20) {\nedges {\ncursor\nnode {\nid\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n}\n}\nfrom {\nid\n}\nsentAt\neditedAt\ndeletedAt\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "+p4h": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChannelPage_SubscribeBalloon_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "price"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emoteSetID"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "promotion"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "newPrice"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "oldPrice"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "discountType"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "discountValue"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "giftPromotion"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "newPrice"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "oldPrice"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "discountType"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "discountValue"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "canPrimeSubscribe"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "subscriptionBenefit"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "purchasedWithPrime"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "tier"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "endsAt"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "paidUpgrade"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "price"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "startsAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "gift"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isGift"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "gifter"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "displayName"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hasPrime"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "requestInfo"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "countryCode"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 536
            }
        };
        n.loc.source = {
            body: "query ChannelPage_SubscribeBalloon_User($login: String!) {\nuser(login: $login) {\nid\nlogin\ndisplayName\nsubscriptionProducts {\nid\nprice\nurl\nemoteSetID\ndisplayName\nname\nemotes {\nid\n}\nself {\npromotion {\nnewPrice\noldPrice\ndiscountType\ndiscountValue\n}\n}\ngiftPromotion {\nnewPrice\noldPrice\ndiscountType\ndiscountValue\n}\n}\nself {\ncanPrimeSubscribe\nsubscriptionBenefit {\nid\npurchasedWithPrime\ntier\nendsAt\npaidUpgrade {\nprice\nstartsAt\n}\ngift {\nisGift\ngifter {\nid\ndisplayName\n}\n}\n}\n}\n}\ncurrentUser {\nid\nlogin\nhasPrime\n}\nrequestInfo {\ncountryCode\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "+xsx": function(e, t) {},
    "/+to": function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            r = n("TToO"),
            a = n("GiK3"),
            o = n("6sO2"),
            s = n("Us7i"),
            l = n("QG7y"),
            c = "#google_ads_iframe_\\/3576121\\/twitch\\/directory_0",
            d = "#google_ads_iframe_\\/3576121\\/twitch\\/directory_1",
            u = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.logger = o.i.withCategory("ad-slot"), n.createSlot = function(e) {
                        return r.__awaiter(n, void 0, void 0, function() {
                            var t;
                            return r.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        if (this.state.slotCreated) return [2];
                                        this.setState({
                                            slotCreated: !0
                                        }), n.label = 1;
                                    case 1:
                                        return n.trys.push([1, 3, , 4]), [4, s.a.createSlot(e.slotID, e.adUnit, e.adSize, e.targeting, e.autoEnable)];
                                    case 2:
                                        return t = n.sent(), Object(l.h)(t.getSlotElementId()), this.setState({
                                            slot: t
                                        }), [3, 4];
                                    case 3:
                                        return n.sent(), this.logger.warn("Unable to create ad slot", {
                                            slotID: e.slotID,
                                            adUnit: e.adUnit,
                                            adSize: e.adSize,
                                            targeting: e.targeting,
                                            autoEnable: e.autoEnable
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, n.setRef = function(e) {
                        return n.slotRef = e
                    }, n.onSlotRenderEnd = function(e) {
                        var t = e.slot.getSlotElementId();
                        if (n.state.slot && t === n.props.slotID) {
                            if (n.logger.debug("Ad slot render ended", {
                                    elementID: t,
                                    lineItemID: e.lineItemId,
                                    createdID: e.creativeId,
                                    isEmpty: e.isEmpty,
                                    serviceName: e.serviceName,
                                    size: e.size
                                }), e.isEmpty) return;
                            if (!n.slotRef) return;
                            if (n.props.slotID === l.b.anonFront.takeover) return void(document.body.classList.contains("takeover") && n.setState({
                                shouldDisplay: !0
                            }, function() {
                                return n.slotRendered(e.slot)
                            }));
                            var i;
                            if (n.props.slotID === l.b.directory.banner) return void((i = n.slotRef.querySelector(c)) && 1 !== i.clientWidth && n.setState({
                                shouldDisplay: !0
                            }, function() {
                                return n.slotRendered(e.slot)
                            }));
                            if (n.props.slotID === l.b.directory.rectangle) return void((i = n.slotRef.querySelector(d)) && 1 !== i.clientWidth && n.setState({
                                shouldDisplay: !0
                            }, function() {
                                return n.slotRendered(e.slot)
                            }));
                            n.setState({
                                shouldDisplay: !0
                            }, function() {
                                return n.slotRendered(e.slot)
                            })
                        }
                    }, n.slotRendered = function(e) {
                        n.props.slotRendered && n.props.slotRendered(e)
                    }, n.state = {
                        shouldDisplay: !1
                    }, n
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    l.g.addListener(l.f, this.onSlotRenderEnd), this.props.trackingSet ? (this.logger.debug("Tracking is set. Creating slot (componentDidMount)", this.props.slotID), this.createSlot(this.props)) : this.logger.debug("Tracking is not set. Skipping slot creation (componentDidMount)", this.props.slotID)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.state.slotCreated || (e.trackingSet && !this.props.trackingSet ? (this.logger.debug("Tracking is set. Creating slot (componentWillReceiveProps)", this.props.slotID), this.createSlot(e)) : this.logger.debug("Tracking is not set. Skipping slot creation (componentWillReceiveProps)", this.props.slotID))
                }, t.prototype.componentWillUnmount = function() {
                    this.logger.debug("Destroying Slot (componentWillUnmount)", this.props.slotID), l.g.removeListener(l.f, this.onSlotRenderEnd), this.state.slot && s.a.destroySlot(this.state.slot)
                }, t.prototype.shouldComponentUpdate = function(e, t) {
                    return t.shouldDisplay !== this.state.shouldDisplay
                }, t.prototype.render = function() {
                    var e = r.__assign({}, this.props.injectStyles);
                    return this.state.shouldDisplay || (e.display = "none"), a.createElement("div", {
                        style: e,
                        id: this.props.slotID,
                        ref: this.setRef
                    })
                }, t
            }(a.Component);
        var p = Object(i.b)(function(e) {
            return {
                trackingSet: e.ads.trackingSet
            }
        })(u);
        n.d(t, "a", function() {
            return p
        })
    },
    "/3Lr": function(e, t, n) {
        "use strict";
        n.d(t, "d", function() {
            return s
        }), n.d(t, "c", function() {
            return l
        }), n.d(t, "a", function() {
            return c
        }), n.d(t, "b", function() {
            return i
        }), n.d(t, "e", function() {
            return r
        });
        var i, r, a, o, s = {
                BitsLeaderboardEvents: "leaderboard-events-v1",
                CampaignGlobalEvents: "campaign-events",
                CampaignUserEvents: "user-campaign-events",
                ChannelBitsEvents: "channel-bits-events-v1",
                ChannelBitsPinEvents: "channel-bit-events-public",
                ChannelEventUpdates: "channel-event-updates",
                ChannelSubscribeEvents: "channel-subscribe-events-v1",
                ChatRoom: "chatrooms-room-v1",
                ChatRoomsChannel: "chatrooms-channel-v1",
                ChatRoomsUser: "chatrooms-user-v1",
                Friendship: "friendship",
                ImageUpload: "user-image-update",
                ModerationActionsByUserAndChannel: "chat_moderator_actions",
                OnsiteNotifications: "onsite-notifications",
                Presence: "presence",
                Raid: "raid",
                StreamChange: "stream-change-v1",
                StreamChatRoom: "stream-chat-room-v1",
                UploadService: "upload",
                UserBitsUpdates: "user-bits-updates-v1",
                UserCommerceEvents: "user-commerce-events",
                UserCrateEvents: "user-crate-events-v1",
                UserSubscribeEvents: "user-subscribe-events-v1",
                VideoPlayback: "video-playback",
                VideoPlaybackById: "video-playback-by-id",
                Whispers: "whispers"
            },
            l = {
                BitsPinEvent: "bits-pin-event",
                BitsLeaderboardEvent: "bits-leaderboard-event",
                ChannelStreamDown: "stream-down",
                ChannelStreamUp: "stream-up",
                ChatNotification: "chat-notification",
                ChatRoomCreated: "created_room",
                ChatRoomDeleted: "deleted_room",
                ChatRoomUpdated: "updated_room",
                ChatRoomsUserModAction: "user_moderation_action",
                ChatRoomMessageCreated: "created_room_message",
                ChatRoomMessageEdited: "edited_room_message",
                ChatRoomMessageDeleted: "deleted_room_message",
                ChatRoomsRoomViewUpdated: "updated_room_view",
                ImageUploadSuccess: "imageuploadsuccess",
                LiveEvent: "live-event",
                ModerationAction: "moderation_action",
                OnsiteNotificationCreate: "create-notification",
                OnsiteNotificationDelete: "delete-notification",
                OnsiteNotificationsRead: "read-notifications",
                OnsiteNotificationSummaryUpdate: "update-summary",
                OnsiteNotificationUpdate: "update-notification",
                Presence: "presence",
                PresenceSettings: "settings",
                PurgeMessageRequest: "purge_messages_request",
                RaidCancel: "raid_cancel",
                RaidUpdate: "raid_update",
                StreamChatRoomChatRichEmbed: "chat_rich_embed",
                StreamDown: "stream_down",
                StreamUp: "stream_up",
                UpdatedChannelChatProperty: "updated_channel_chat_property",
                UploadService: "upload",
                UserBitsBalanceUpdate: "balance_update",
                UserBitsBadgeUpdate: "badge_update",
                UserCampaignProgressEvent: "progress",
                UserCampaignRewardEvent: "reward",
                UserCrateEvent: "crate-event",
                UserGiftEvent: "gift-event",
                UserMention: "user_mention",
                ViewCount: "viewcount",
                Vodcast: "watchparty-vod",
                WhisperAllThreadsUpdate: "threads",
                WhisperDeleted: "whisper_deleted",
                WhisperEdited: "whisper_edited",
                WhisperReceived: "whisper_received",
                WhisperSent: "whisper_sent",
                WhisperThreadUpdate: "thread"
            },
            c = {
                Accepted: "accepted",
                Requested: "requested",
                Removed: "removed",
                SelfAccepted: "self_accepted",
                SelfRemoved: "self_removed",
                SelfRequested: "self_requested"
            };
        ! function(e) {
            e.Affiliate = "affiliate", e.AutoModEnabled = "automod_enabled", e.AutoModRejected = "automod_rejected", e.Ban = "ban", e.Clear = "clear", e.EmoteOnly = "emoteonly", e.EmoteOnlyOff = "emoteonlyoff", e.FollowersOnly = "followers", e.FollowersOnlyOff = "followersoff", e.Host = "host", e.Mod = "mod", e.R9kBeta = "r9kbeta", e.R9kBetaOff = "r9kbetaoff", e.Slow = "slow", e.SlowOff = "slowoff", e.SubsBeta = "subsbeta", e.SubscribersOnly = "subscribers", e.SubscribersOnlyOff = "subscribersoff", e.Timeout = "timeout", e.Unban = "unban", e.Unhost = "unhost", e.Unmod = "unmod", e.Untimeout = "untimeout"
        }(i || (i = {})),
        function(e) {
            e.AutoModMessageRejected = "automod_message_rejected", e.AutoModMessageApproved = "automod_message_approved", e.AutoModMessageDenied = "automod_message_denied"
        }(r || (r = {})),
        function(e) {
            e.Archive = "archive", e.Highlight = "highlight", e.Upload = "upload", e.Premiere = "premiere", e.Rerun = "rerun", e.WatchPartyPremiere = "watch_party_premiere", e.WatchPartyRerun = "watch_party_rerun"
        }(a || (a = {})),
        function(e) {
            e.Private = "private", e.Public = "public"
        }(o || (o = {}))
    },
    "/OR/": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "UserCard"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bannerImageURL"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "description"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "availability"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "activity"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "Playing"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "game"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "Streaming"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "stream"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "game"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "Watching"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "user"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "displayName"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "login"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 290
            }
        };
        n.loc.source = {
            body: "query UserCard($id: ID!) {\nuser(id: $id) {\nid\nlogin\nbannerImageURL\ndisplayName\ndescription\nprofileImageURL(width: 70)\navailability\nactivity {\ntype\n... on Playing {\ngame {\nid\nname\n}\n}\n... on Streaming {\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n... on Watching {\nuser {\nid\ndisplayName\nlogin\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "/SNv": function(e, t, n) {
        e.exports = n.p + "assets/hearthstone-classes-b3b59eedbe78268cf62299a41ec09be1.png"
    },
    "/UH7": function(e, t, n) {
        "use strict";
        var i = n("2KeS"),
            r = n("6sO2"),
            a = n("TToO"),
            o = n("LIeg"),
            s = n("uXDg"),
            l = 234,
            c = 310;

        function d(e) {
            if (0 === e.openedIDs.length) return 0;
            for (var t = 0, n = 0, i = e.openedIDs; n < i.length; n++) {
                var r = i[n],
                    a = e.byID[r];
                a.hidden || (t += a.collapsed ? l : c)
            }
            return t
        }

        function u(e) {
            var t = e.openedIDs.slice(),
                n = t.pop();
            return n && e.focusedID === n && t.length > 0 && (t.pop(), t.push(n)), o(e, function(e) {
                return e.openedIDs
            }, function() {
                return t
            })
        }

        function p(e, t) {
            var n = e.orderedIDs.filter(function(t) {
                return !e.openedIDs.includes(t)
            });
            return n.length > 0 ? m(e, n[0], t) : e
        }

        function m(e, t, n) {
            var i = n - d(e),
                r = a.__assign({}, e);
            return r.openedIDs.includes(t) || (i < c && (r = u(r)), r = o(r, function(e) {
                return e.openedIDs
            }, function(e) {
                return e.push(t), e
            })), r
        }

        function h(e, t, n) {
            if (!e.byID[t]) return e;
            var i = o(e, function(e) {
                return e.byID
            }, function(e) {
                return e[t].collapsed = !1, e
            });
            return i.focusedID = t, d(e) > n && (i = u(i)), i
        }
        var g = n("5k1t");
        t.b = function(e, t) {
            if (e.whispers) return e.whispers.display.byID[t];
            return null
        }, t.a = function(e, t) {
            return e.whispers.notifications.byThreadID[t] || []
        };
        var f = Object(i.c)({
            display: function(e, t) {
                switch (void 0 === e && (e = {
                    byID: {},
                    orderedIDs: [],
                    openedIDs: [],
                    focusedID: ""
                }), t.type) {
                    case s.f:
                        var n = (r = a.__assign({}, e)).byID[t.data.threadID],
                            i = r.openedIDs.includes(t.data.threadID);
                        return n || (r = o(r, function(e) {
                            return e.orderedIDs
                        }, function(e) {
                            return e.push(t.data.threadID), e
                        }), r = o(r, function(e) {
                            return e.byID
                        }, function(e) {
                            return e[t.data.threadID] = t.data, e
                        })), r.openedIDs.includes(t.data.threadID) && !r.byID[t.data.threadID].hidden || (r.byID[t.data.threadID].hidden = t.data.hidden), t.data.ignoreCollapseIfOpen || t.data.collapsed || (r.focusedID = t.data.threadID), r = m(r, t.data.threadID, t.contentWidth), (!i || i && !t.data.ignoreCollapseIfOpen) && (t.data.collapsed || (r = h(r, t.data.threadID, t.contentWidth))), r;
                    case s.b:
                        if (!e.byID[t.threadID]) return e;
                        var r = o(e, function(e) {
                            return e.byID
                        }, function(e) {
                            return delete e[t.threadID], e
                        });
                        return r = o(r, function(e) {
                            return e.orderedIDs
                        }, function(e) {
                            return e.filter(function(e) {
                                return e !== t.threadID
                            })
                        }), r = o(r, function(e) {
                            return e.openedIDs
                        }, function(e) {
                            return e.filter(function(e) {
                                return e !== t.threadID
                            })
                        }), e.focusedID === t.threadID && (r.focusedID = r.openedIDs[0]), p(r, t.contentWidth);
                    case s.c:
                        return e.byID[t.threadID] ? (e.focusedID === t.threadID && (e.focusedID = ""), o(e, function(e) {
                            return e.byID
                        }, function(e) {
                            return e[t.threadID].collapsed = !0, e
                        })) : e;
                    case s.d:
                        return h(e, t.threadID, t.contentWidth);
                    case s.e:
                        return o(e, function(e) {
                            return e.focusedID
                        }, function() {
                            return t.threadID
                        });
                    case s.g:
                        return o(e, function(e) {
                            return e.focusedID
                        }, function(e) {
                            return e === t.threadID ? "" : e
                        });
                    case s.a:
                        var l = d(e);
                        if (l > t.contentWidth) {
                            if (e.openedIDs.length <= 1) return e;
                            for (var g = a.__assign({}, e); l > t.contentWidth && g.openedIDs.length > 1;) l = d(g = u(g));
                            return g
                        }
                        if (t.contentWidth - l >= c) {
                            var f = Math.floor((t.contentWidth - l) / c),
                                v = Math.min(f, e.orderedIDs.length - e.openedIDs.length);
                            if (0 === v) return e;
                            g = a.__assign({}, e);
                            for (var b = 0; b < v; b++)
                                if ((g = p(g, t.contentWidth)).openedIDs.length > 1)
                                    for (var k = g.openedIDs, y = k.length, S = 0, _ = g.orderedIDs; S < _.length; S++) {
                                        var N = _[S];
                                        if (k[y - 1] === N) {
                                            var E = k.splice(y - 2, 1);
                                            k.push(E[0]);
                                            break
                                        }
                                        if (k[y - 2] === N) break
                                    }
                                return g
                        }
                        return e;
                    default:
                        return e
                }
            },
            notifications: function(e, t) {
                switch (void 0 === e && (e = {
                    byThreadID: {}
                }), t.type) {
                    case g.a:
                        return e.byThreadID[t.threadID] ? o(e, function(e) {
                            return e.byThreadID[t.threadID]
                        }, function(e) {
                            return [{
                                threadID: t.threadID,
                                afterMessageID: t.afterMessageID,
                                content: t.content
                            }].concat(e)
                        }) : o(e, function(e) {
                            return e.byThreadID
                        }, function(e) {
                            return a.__assign(((n = {})[t.threadID] = [{
                                threadID: t.threadID,
                                afterMessageID: t.afterMessageID,
                                content: t.content
                            }], n), e);
                            var n
                        });
                    default:
                        return e
                }
            }
        });
        r.n.store.registerReducer("whispers", f)
    },
    "/Vp/": function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return !e.isLoggedIn && e.location.pathname === i
        };
        var i = "/"
    },
    "0Mfl": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = "https://www.amazon.com/twitchmerch?channel=tpn&ref_=tw_or_web_tpn_ms"
    },
    "0Yyt": function(e, t) {},
    "1EXI": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_UserCommunities"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userId"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userId"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "directories"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "nodes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "directoryType"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 140
            }
        };
        n.loc.source = {
            body: "query ReportUserModal_UserCommunities($userId: ID!) {\nuser(id: $userId) {\nid\ndirectories {\nnodes {\nid\nname\ndisplayName\ndirectoryType\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "1Krm": function(e, t) {},
    "1Mw/": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("DtWM"),
            o = n("RH2O"),
            s = n("2KeS"),
            l = n("Aj/L"),
            c = n("5k1t"),
            d = n("HW6M"),
            u = n("3zLD"),
            p = n("6sO2"),
            m = n("rCmJ"),
            h = n("yWCw"),
            g = n("7vx8"),
            f = n("RweG"),
            v = n("6BvN"),
            b = n("Ldv2"),
            k = n("oIkB"),
            y = n("HZww"),
            S = n("HM6l"),
            _ = n("ZVME"),
            N = n("c3pS"),
            E = n("ieBa"),
            C = n("CSlQ"),
            T = n("F8kA"),
            w = n("+Znq"),
            O = n("u8SD"),
            I = n("4Dne"),
            D = n("djIP"),
            P = n("vH/s"),
            F = n("2Hj/"),
            R = n("emkL"),
            x = n("+dIz"),
            L = n("Kxgf"),
            U = n("7miU"),
            M = n("Odds"),
            A = n("82Ta"),
            j = n("yTC+"),
            W = "whispers-report-harassment-button",
            B = "whispers-report-spam-button",
            G = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderReportSpamButton = function() {
                        if (t.isBlocked) return null;
                        var e = Object(p.d)("Report Spam", "ThreadSettings");
                        return r.createElement(M._0, {
                            "data-test-selector": B,
                            ariaLabel: e,
                            onClick: t.reportUserSpam
                        }, r.createElement(M._2, {
                            padding: {
                                y: .5,
                                x: 1
                            }
                        }, e))
                    }, t.renderReportHarassmentButton = function() {
                        if (t.isBlocked) return null;
                        var e = Object(p.d)("Report Harrasment", "ThreadSettings");
                        return r.createElement(M._0, {
                            "data-test-selector": W,
                            ariaLabel: e,
                            onClick: t.reportUserHarassment
                        }, r.createElement(M._2, {
                            padding: {
                                y: .5,
                                x: 1
                            }
                        }, e))
                    }, t.onChannelRedirect = function() {
                        t.props.collapseThread && t.props.collapseThread()
                    }, t.toggleMutethread = function() {
                        var e = !t.props.isMuted,
                            n = i.__assign({}, Object(k.a)({
                                threadID: t.props.threadID,
                                isMuted: !t.props.isMuted
                            }), {
                                optimisticResponse: {
                                    updateWhisperThread: {
                                        thread: {
                                            id: t.props.threadID,
                                            isMuted: e,
                                            __typename: "WhisperThread"
                                        },
                                        __typename: "UpdateWhisperThreadPayload"
                                    }
                                }
                            });
                        t.props.setMuteThread && (e ? Object(U.j)(t.props.threadID) : Object(U.k)(t.props.threadID), t.props.setMuteThread(n))
                    }, t.reportUserHarassment = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return i.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        e = Object(k.a)({
                                            targetUserID: this.props.userID,
                                            reason: D.c.Harassment,
                                            threadID: this.props.threadID
                                        }), n.label = 1;
                                    case 1:
                                        return n.trys.push([1, 3, , 4]), [4, this.props.reportWhisperThread(e)];
                                    case 2:
                                        return n.sent(), this.blockUser(), [3, 4];
                                    case 3:
                                        return t = n.sent(), p.i.error(t, "Failed to report whisper thread for harassment.", {
                                            threadID: this.props.threadID
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.reportUserSpam = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return i.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        e = Object(k.a)({
                                            targetUserID: this.props.userID,
                                            reason: D.c.Spam,
                                            threadID: this.props.threadID
                                        }), n.label = 1;
                                    case 1:
                                        return n.trys.push([1, 3, , 4]), [4, this.props.reportWhisperThread(e)];
                                    case 2:
                                        return n.sent(), this.blockUser(), [3, 4];
                                    case 3:
                                        return t = n.sent(), p.i.error(t, "Failed to report whisper thread for spam.", {
                                            threadID: this.props.threadID
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.blockUser = function() {
                        t.props.blockUserMutation(t.props.userID, D.b.Other, D.a.Whisper, t.props.currentUser), t.props.onBlock && t.props.onBlock(t.props.threadID)
                    }, t.unblockUser = function() {
                        t.props.unblockUserMutation(t.props.userID, t.props.currentUser), t.props.onUnblock && t.props.onUnblock(t.props.threadID)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.displayName || this.props.login,
                        t = this.props.isMuted ? Object(p.d)("Turn Notifications On", "ThreadSettings") : Object(p.d)("Turn Notifications Off", "ThreadSettings"),
                        n = Object(p.d)("Go to {displayName}'s Channel", {
                            displayName: e
                        }, "ThreadSettings");
                    return r.createElement(M._2, {
                        display: M.N.Flex,
                        flexDirection: M.P.Column,
                        margin: 1
                    }, r.createElement(M._0, {
                        ariaLabel: t,
                        onClick: this.toggleMutethread
                    }, r.createElement(M._2, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, t)), r.createElement(M._25, {
                        borderBottom: !0,
                        margin: {
                            y: 1,
                            left: .5
                        }
                    }), this.renderBlockButton(), this.renderReportHarassmentButton(), this.renderReportSpamButton(), r.createElement(M._0, {
                        linkTo: "/" + this.props.login,
                        onClick: this.onChannelRedirect,
                        ariaLabel: n
                    }, r.createElement(M._2, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, n)))
                }, t.prototype.renderBlockButton = function() {
                    var e, t, n = this.props.displayName || this.props.login;
                    return this.isBlocked ? (e = Object(p.d)("Unblock {displayName}...", {
                        displayName: n
                    }, "ThreadSettings"), t = this.unblockUser) : (e = Object(p.d)("Block {displayName}...", {
                        displayName: n
                    }, "ThreadSettings"), t = this.blockUser), r.createElement(M._0, {
                        "data-test-selector": "whispers-block-user-button",
                        ariaLabel: e,
                        onClick: t
                    }, r.createElement(M._2, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, e))
                }, Object.defineProperty(t.prototype, "isBlocked", {
                    get: function() {
                        var e = this;
                        return !(!this.props.currentUser.blockedUsers || !this.props.currentUser.blockedUsers.find(function(t) {
                            return t.id === e.props.userID
                        }))
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "currentUserDataID", {
                    get: function() {
                        return Object(x.c)(this.props.currentUser) || ""
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(r.Component),
            H = Object(u.compose)(Object(g.a)(j, {
                name: "setMuteThread"
            }), Object(g.a)(A, {
                name: "reportWhisperThread"
            }), Object(O.a)(), Object(L.a)())(G),
            V = n("GxF8");
        var z = n("N5sm");
        var q = n("l4QG");
        var Q, K = n("P0T5"),
            $ = (n("+xsx"), "report-as-spam-button"),
            Y = "mark-not-spam-button",
            Z = "dismiss-prompt-button",
            X = "spam-prompt-pending-target",
            J = "spam-prompt-reported-target",
            ee = {
                displayName: "???",
                login: "???",
                displayBadges: [],
                id: ""
            },
            te = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        potentialSpamResolution: "pending"
                    }, t.renderPotentialSpamPrompt = function() {
                        if (t.props.spamInfo && "low" !== t.props.spamInfo.likelihood && null === t.props.spamInfo.lastMarkedNotSpamAt) {
                            if ("pending" === t.state.potentialSpamResolution) return r.createElement(M._2, {
                                "data-a-target": X,
                                className: "thread-header__potential-spam-prompt",
                                attachRight: !0,
                                attachLeft: !0,
                                attachTop: !0
                            }, r.createElement(M._25, {
                                background: M.m.Alt2,
                                padding: .5,
                                elevation: 2
                            }, r.createElement(M._2, {
                                display: M.N.InlineBlock,
                                margin: .5
                            }, r.createElement(M._35, {
                                type: M._40.Span,
                                fontSize: M.R.Size6,
                                color: M.I.Alt2
                            }, Object(p.d)("It looks like this conversation triggered our spam detector. If it is spam, please report it!", "ThreadHeader"))), r.createElement(M._2, {
                                display: M.N.InlineBlock,
                                margin: .5
                            }, r.createElement(M.u, {
                                "data-a-target": $,
                                type: M.z.Alert,
                                onClick: t.reportSpam,
                                size: M.x.Small
                            }, Object(p.d)("Report spam", "ThreadHeader"))), r.createElement(M._2, {
                                display: M.N.InlineBlock,
                                margin: .5
                            }, r.createElement(M.u, {
                                "data-a-target": Y,
                                onClick: t.markNotSpam,
                                size: M.x.Small
                            }, Object(p.d)("This is not spam", "ThreadHeader")))));
                            if ("reported" === t.state.potentialSpamResolution && t.interlocutor.displayName) return r.createElement(M._2, {
                                "data-a-target": J,
                                className: "thread-header__potential-spam-prompt",
                                attachRight: !0,
                                attachLeft: !0,
                                attachTop: !0
                            }, r.createElement(M._25, {
                                background: M.m.Alt2,
                                padding: .5,
                                elevation: 2
                            }, r.createElement(M._2, {
                                display: M.N.InlineBlock,
                                margin: .5
                            }, r.createElement(M._35, {
                                type: M._40.Span,
                                fontSize: M.R.Size6,
                                color: M.I.Alt2
                            }, Object(p.d)("Thank you for helping us fight spam. We've blocked {user} from sending you further whispers. You can undo this from the Whisper Settings Menu.", {
                                user: t.interlocutor.displayName
                            }, "ThreadHeader"))), r.createElement(M._2, {
                                display: M.N.InlineBlock,
                                margin: .5
                            }, r.createElement(M.u, {
                                "data-a-target": Z,
                                type: M.z.Text,
                                onClick: t.dismissSpamPrompt,
                                size: M.x.Small
                            }, Object(p.d)("Dismiss", "ThreadHeader")))))
                        }
                        return null
                    }, t.reportSpam = function() {
                        t.props.reportUserMutation(t.interlocutor.id, D.c.Spam, t.props.threadID), t.props.blockUserMutation(t.interlocutor.id, D.b.Other, D.a.Whisper, t.props.participants.currentUser), t.props.setThreadSpamStatusMutation(t.props.threadID, !0), Object(K.l)(t.interlocutor.login, K.a.SpamPropmt), t.setState({
                            potentialSpamResolution: "reported"
                        })
                    }, t.markNotSpam = function() {
                        t.props.setThreadSpamStatusMutation(t.props.threadID, !1), Object(K.o)(t.props.threadID), t.setState({
                            potentialSpamResolution: "dismissed"
                        })
                    }, t.dismissSpamPrompt = function() {
                        t.props.onBlock && t.props.onBlock(t.props.threadID), Object(K.n)(t.props.threadID), t.setState({
                            potentialSpamResolution: "dismissed"
                        })
                    }, t.onSettingsClick = function(e) {
                        e.stopPropagation()
                    }, t.onPresenceClick = function(e, n) {
                        n.stopPropagation();
                        var i = t.props.participants.currentUser && t.props.participants.currentUser.friends.edges.find(function(e) {
                            return !(!e.node || e.node.id !== t.interlocutor.id)
                        });
                        t.props.participants.user && i && i.activity ? Object(I.b)({
                            context: e,
                            friendActivity: i.activity,
                            friendLogin: t.props.participants.user.login
                        }) : p.i.warn("[ThreadHeader] Attempted to track presence click without required data.")
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = d({
                            "thread-header__title-bar-container": !0,
                            "thread-header__title-bar-container--highlighted": this.props.isHighlighted,
                            "thread-header__title-bar-container--focused": this.props.isFocused
                        }),
                        n = d({
                            "thread-header": !0,
                            "thread-header--collapsed": this.props.isCollapsed
                        }),
                        i = Object(p.d)("Close", "WhisperThreadHeader"),
                        a = Object(p.d)("Settings", "WhisperThreadHeader");
                    if (this.props.isLoading || !this.props.participants.currentUser || !this.props.participants.user) return r.createElement(M._2, {
                        className: t,
                        display: M.N.Flex,
                        justifyContent: M._1.Between,
                        fullWidth: !0,
                        alignItems: M.c.Center,
                        padding: {
                            y: .5,
                            x: 1
                        },
                        flexShrink: 0,
                        flexGrow: 0,
                        flexWrap: M.Q.NoWrap
                    }, r.createElement(M._8, {
                        height: 20,
                        width: 80
                    }), r.createElement(M._2, {
                        display: M.N.Flex
                    }, r.createElement(M.v, {
                        ariaLabel: i,
                        icon: M._16.RemoveTag,
                        "data-a-target": "whispers-thread__close-button-" + this.props.threadID,
                        onClick: this.props.onClose
                    })));
                    var o = null,
                        s = null,
                        l = null,
                        c = null,
                        u = this.props.participants.currentUser && this.props.participants.currentUser.friends.edges.find(function(t) {
                            return !(!t.node || t.node.id !== e.interlocutor.id)
                        });
                    if (u && (s = r.createElement(M._2, {
                            margin: {
                                left: 1
                            },
                            display: M.N.Flex,
                            alignItems: M.c.Center
                        }, r.createElement(M._10, {
                            status: function(e) {
                                switch (e) {
                                    case q.a.Online:
                                        return M._11.Online;
                                    case q.a.Away:
                                    case q.a.Idle:
                                        return M._11.Away;
                                    case q.a.Busy:
                                        return M._11.Busy;
                                    case q.a.Offline:
                                    case q.a.Invisible:
                                    default:
                                        return M._11.Offline
                                }
                            }(u.availability)
                        })), u.activity)) {
                        var m = Object(F.c)(u.activity, !0),
                            h = null,
                            g = Object(F.d)(this.props.participants.user.login, u.activity);
                        if (g && (h = {
                                pathname: g,
                                state: {
                                    content: P.PageviewContent.Presence,
                                    medium: P.PageviewMedium.Whispers
                                }
                            }), h) {
                            var f = d({
                                "thread-header__activity-link--highlighted": this.props.isHighlighted
                            });
                            l = r.createElement(T.a, {
                                className: f,
                                title: Object(F.c)(u.activity) || "",
                                onClick: this.onPresenceClick.bind(this, I.a.WhisperHeaderLink),
                                to: h,
                                "data-test-selector": "whispers-thread__presence-link"
                            }, m)
                        } else l = m;
                        this.props.isCollapsed || (c = r.createElement(M._2, {
                            padding: {
                                right: .5
                            }
                        }, r.createElement(R.a, {
                            link: h,
                            onClick: this.onPresenceClick.bind(this, I.a.WhisperHeaderButton),
                            shouldHollowOverlay: this.props.isHighlighted
                        })))
                    }!this.props.isCollapsed && this.props.participants.currentUser && (o = r.createElement(w.a, null, r.createElement(M.v, {
                        ariaLabel: a,
                        icon: M._16.Gear,
                        overlay: this.props.isHighlighted
                    }), r.createElement(M.p, {
                        direction: M.q.BottomRight,
                        offsetX: "0.5rem"
                    }, r.createElement(H, {
                        login: this.interlocutor.login,
                        displayName: this.interlocutor.displayName,
                        currentUser: this.props.participants.currentUser,
                        userID: this.interlocutor.id,
                        isMuted: this.props.isMuted,
                        threadID: this.props.threadID,
                        collapseThread: this.props.collapse,
                        onBlock: this.props.onBlock,
                        onUnblock: this.props.onUnblock
                    }))));
                    var v = this.interlocutor.displayBadges.map(function(e) {
                        return r.createElement(M.W, {
                            key: e.id,
                            flexShrink: 0,
                            margin: {
                                right: .5
                            }
                        }, r.createElement("img", {
                            alt: e.title,
                            title: e.title,
                            className: "thread-header__badge",
                            src: e.imageURL
                        }))
                    });
                    return r.createElement(M._2, {
                        className: n,
                        position: M._9.Relative,
                        fullWidth: !0
                    }, r.createElement("div", {
                        className: "thread-header__click-area",
                        onClick: this.props.onHeaderClick,
                        "data-a-target": "thread-header__click-area"
                    }, r.createElement(M._2, {
                        className: t,
                        fullWidth: !0,
                        padding: {
                            x: 1,
                            y: .5
                        },
                        alignItems: M.c.Center,
                        flexGrow: 1,
                        display: M.N.Flex,
                        "data-a-target": "whisper-thread__title-bar-" + this.props.threadID,
                        "data-click-out-id": "thread-expand-close",
                        flexWrap: M.Q.NoWrap
                    }, r.createElement(M._2, {
                        fullHeight: !0,
                        flexGrow: 1,
                        display: M.N.Flex,
                        flexDirection: M.P.Column
                    }, r.createElement(M._2, {
                        display: M.N.Flex,
                        flexGrow: 1,
                        alignItems: M.c.Center,
                        flexWrap: M.Q.NoWrap,
                        padding: {
                            right: 1
                        },
                        ellipsis: !0
                    }, v, r.createElement(M._35, {
                        color: this.props.isHighlighted ? M.I.Overlay : M.I.Base,
                        type: M._40.Span,
                        bold: !0,
                        ellipsis: !0
                    }, this.interlocutor.displayName), s), r.createElement(M._25, {
                        className: "thread-header__activity",
                        color: this.props.isHighlighted ? M.I.Overlay : M.I.Base,
                        padding: {
                            right: 1
                        },
                        ellipsis: !0
                    }, l)), r.createElement(M._2, {
                        display: M.N.Flex,
                        flexShrink: 0,
                        flexDirection: M.P.Row,
                        alignItems: M.c.Center
                    }, c, r.createElement("div", {
                        onClick: this.onSettingsClick
                    }, o), r.createElement(M.v, {
                        ariaLabel: i,
                        icon: M._16.RemoveTag,
                        "data-a-target": "thread-header__close-button-" + this.props.threadID,
                        onClick: this.props.onClose,
                        overlay: this.props.isHighlighted
                    })))), this.renderPotentialSpamPrompt())
                }, Object.defineProperty(t.prototype, "interlocutor", {
                    get: function() {
                        return this.props.participants.user || ee
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(r.Component),
            ne = Object(s.d)(Object(O.a)(), function() {
                var e = this;
                return Object(g.a)(V, {
                    props: function(t) {
                        return {
                            reportUserMutation: function(n, r, a) {
                                return i.__awaiter(e, void 0, void 0, function() {
                                    var e;
                                    return i.__generator(this, function(i) {
                                        switch (i.label) {
                                            case 0:
                                                if (!t.mutate) return [3, 4];
                                                i.label = 1;
                                            case 1:
                                                return i.trys.push([1, 3, , 4]), [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            targetUserID: n,
                                                            reason: r,
                                                            threadID: a
                                                        }
                                                    }
                                                })];
                                            case 2:
                                                return i.sent(), [3, 4];
                                            case 3:
                                                return e = i.sent(), p.i.error(e, "Unable to report user"), [3, 4];
                                            case 4:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }(), function() {
                var e = this;
                return Object(g.a)(z, {
                    props: function(t) {
                        return {
                            setThreadSpamStatusMutation: function(n, r) {
                                return i.__awaiter(e, void 0, void 0, function() {
                                    var e;
                                    return i.__generator(this, function(i) {
                                        switch (i.label) {
                                            case 0:
                                                if (!t.mutate) return [3, 4];
                                                i.label = 1;
                                            case 1:
                                                return i.trys.push([1, 3, , 4]), [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            threadID: n,
                                                            isSpam: r
                                                        }
                                                    }
                                                })];
                                            case 2:
                                                return i.sent(), [3, 4];
                                            case 3:
                                                return e = i.sent(), p.i.error(e, "Unable to modify threads spam status user"), [3, 4];
                                            case 4:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }())(te),
            ie = n("/UH7"),
            re = n("zCIC"),
            ae = n("Th9g");
        ! function(e) {
            e[e.Timestamp = 0] = "Timestamp", e[e.Whisper = 1] = "Whisper", e[e.Warning = 2] = "Warning", e[e.NewMessages = 3] = "NewMessages", e[e.Notification = 4] = "Notification"
        }(Q || (Q = {}));
        n("vRhQ");
        var oe = n("hvzu"),
            se = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.message;
                    switch (e.type) {
                        case Q.Timestamp:
                            return r.createElement(M._25, {
                                className: "thread-message__timestamp",
                                color: M.I.Alt2,
                                fontSize: M.R.Size7
                            }, Object(oe.d)(e));
                        case Q.Warning:
                            return r.createElement(M._25, {
                                className: "thread-message__warning",
                                color: M.I.Alt2
                            }, Object(oe.e)());
                        case Q.Whisper:
                            return this.props.reportOutgoingWhisperRendered && this.props.reportOutgoingWhisperRendered(e.content), r.createElement(M._2, {
                                className: "thread-message__message",
                                "data-a-target": "whisper-message"
                            }, Object(oe.f)(e));
                        case Q.NewMessages:
                            return r.createElement(M._25, {
                                className: "thread-message__new-messages",
                                color: M.I.OverlayAlt,
                                fontSize: M.R.Size7
                            }, Object(oe.b)());
                        case Q.Notification:
                            return r.createElement(M._2, {
                                className: "thread-message__notification"
                            }, Object(oe.c)(e));
                        default:
                            return null
                    }
                }, t
            }(r.Component),
            le = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        disableInfiniteTrigger: !0
                    }, t.loadMore = function() {
                        var e = t.scroll.scrollContent.scrollHeight;
                        return t.setState({
                            prevScrollHeight: e
                        }), t.props.loadMore()
                    }, t.renderMessages = function(e) {
                        return e.map(function(e, n) {
                            return r.createElement(se, {
                                message: e,
                                reportOutgoingWhisperRendered: t.props.reportOutgoingWhisperRendered || void 0,
                                key: t.generateMessageKey(e, n.toString())
                            })
                        })
                    }, t.getMessages = function() {
                        var e = t.props.unreadMessagesCount;
                        return t.props.thread.messages.edges.map(function(e) {
                            return {
                                type: Q.Whisper,
                                content: e.node.content.content,
                                from: t.props.participantsByID[+e.node.from.id],
                                emotes: e.node.content.emotes,
                                id: e.node.id,
                                sentAt: new Date(e.node.sentAt),
                                editedAt: e.node.editedAt,
                                deletedAt: e.node.deletedAt
                            }
                        }).reduce(function(n, i, r, a) {
                            if (t.notificationsFor(i).forEach(function(e) {
                                    n.push(e)
                                }), n.push(i), 0 == --e && n.push(t.createNewMessagesIndicator()), 0 === r);
                            else if (r < a.length - 1) {
                                var o = a[r + 1];
                                !i.deletedAt && t.shouldAddTimestamp(i, o) && n.push(t.createTimestampMessage(i))
                            }
                            return r === a.length - 1 && (i.deletedAt || n.push(t.createTimestampMessage(i)), n.push(t.createWarningMessage())), n
                        }, []).reverse()
                    }, t.shouldAddTimestamp = function(e, t) {
                        return e.sentAt.valueOf() - t.sentAt.valueOf() > 6e5
                    }, t.createTimestampMessage = function(e) {
                        return {
                            type: Q.Timestamp,
                            timestamp: new Date(e.sentAt)
                        }
                    }, t.notificationsFor = function(e) {
                        return t.props.notifications.filter(function(t) {
                            return t.afterMessageID === e.id
                        }).map(t.createNotificationLine)
                    }, t.createNotificationLine = function(e) {
                        return {
                            type: Q.Notification,
                            content: e.content
                        }
                    }, t.createNewMessagesIndicator = function() {
                        return {
                            type: Q.NewMessages
                        }
                    }, t.createWarningMessage = function() {
                        return {
                            type: Q.Warning
                        }
                    }, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.scrollToBottom = function() {
                        t.scroll.scrollContent.scrollTop = t.scroll.scrollContent.scrollHeight
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.scrollToBottom(), this.setState({
                        disableInfiniteTrigger: !1
                    })
                }, t.prototype.componentWillReceiveProps = function(e) {
                    (this.props.thread.messages.edges.length > 0 || e.thread.messages.edges.length > 0) && (0 === this.props.thread.messages.edges.length && e.thread.messages.edges.length > 0 || this.props.thread.messages.edges[0].cursor !== e.thread.messages.edges[0].cursor) && this.setState({
                        prevScrollHeight: this.scroll.scrollContent.scrollHeight
                    })
                }, t.prototype.componentDidUpdate = function(e) {
                    if (this.props.thread.messages.edges.length > e.thread.messages.edges.length)
                        if (this.props.thread.messages.edges[0] && e.thread.messages.edges[0] && this.props.thread.messages.edges[0].cursor === e.thread.messages.edges[0].cursor && this.props.thread.messages.edges[0].node.id === e.thread.messages.edges[0].node.id) {
                            if (this.state.prevScrollHeight && this.state.prevScrollHeight !== this.scroll.scrollContent.scrollHeight) {
                                var t = this.scroll.scrollContent.scrollHeight - this.state.prevScrollHeight;
                                this.scroll.scrollContent.scrollTop = t
                            }
                        } else this.scrollToBottom();
                    this.props.notifications.length > e.notifications.length && this.scrollToBottom()
                }, t.prototype.render = function() {
                    var e = this.getMessages();
                    return r.createElement(M._2, {
                        fullHeight: !0
                    }, r.createElement(re.b, {
                        scrollRef: this.saveScrollRef,
                        suppressScrollX: !0
                    }, r.createElement(M._2, null, r.createElement(re.a, {
                        enabled: !this.state.disableInfiniteTrigger,
                        loadMore: this.loadMore,
                        pixelThreshold: 200,
                        orientation: ae.b.Down,
                        contentLength: e.length
                    }), this.renderMessages(e))))
                }, t.prototype.generateMessageKey = function(e, t) {
                    switch (e.type) {
                        case Q.NewMessages:
                        case Q.Warning:
                            return "" + e.type;
                        case Q.Timestamp:
                            return e.type + "-" + e.timestamp.getTime();
                        case Q.Whisper:
                            return e.type + "-" + e.id;
                        default:
                            return p.i.warn("[ThreadMessages] Encountered an unknown message type."), t
                    }
                }, t
            }(r.Component);
        var ce = Object(o.b)(function(e, t) {
            return {
                notifications: Object(ie.a)(e, t.thread.id)
            }
        })(le);
        var de = n("DCOT"),
            ue = n("qzJ+"),
            pe = n("m4HT"),
            me = n("Iv9R"),
            he = (n("p8c9"), n("h4Qz")),
            ge = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.refetchTimeout = 0, n.hadError = !1, n.onEmoticonClick = function(e) {
                        var t = n.autocompleteInput.getValue();
                        t && t.length > 0 && !t.endsWith(" ") && (t += " "), t += e + " ", n.autocompleteInput.setValue(t)
                    }, n.onBlock = function(e) {
                        n.addNotification(Object(p.d)("User successfully blocked", "whispers")), n.props.onBlock && n.props.onBlock(e)
                    }, n.onUnblock = function() {
                        n.addNotification(Object(p.d)("User successfully unblocked", "whispers"))
                    }, n.loadMore = function() {
                        return i.__awaiter(n, void 0, void 0, function() {
                            return i.__generator(this, function(e) {
                                return this.props.data.loading || this.hadError ? [2] : [2, this.props.loadMore()]
                            })
                        })
                    }, n.addNewThreadSendWhisper = function(e) {
                        var t = n.state.newThreadMessages;
                        t.unshift({
                            content: e,
                            id: Object(S.b)()
                        }), n.setState({
                            newThreadMessages: t
                        })
                    }, n.addNotification = function(e) {
                        n.props.notifyWhisperThread(n.props.threadID, e, n.getLastMessageID())
                    }, n.getLastMessageID = function() {
                        if (n.props.data.whisperThread && n.props.data.whisperThread.messages.edges[0]) return n.props.data.whisperThread.messages.edges[0].node.id
                    }, n.getPlaceholderThreadFromLocalState = function() {
                        return e = n.state.newThreadMessages, t = n.props.currentUserID, {
                            messages: {
                                edges: e.map(function(e, n) {
                                    return {
                                        cursor: "" + n,
                                        node: {
                                            content: {
                                                content: e.content,
                                                emotes: []
                                            },
                                            deletedAt: null,
                                            editedAt: null,
                                            from: {
                                                id: t
                                            },
                                            id: e.id,
                                            sentAt: (new Date).toISOString()
                                        }
                                    }
                                })
                            },
                            isMuted: !1,
                            unreadMessagesCount: 0,
                            participants: [],
                            id: Object(S.b)(),
                            spamInfo: {
                                lastMarkedNotSpamAt: null,
                                likelihood: "low"
                            },
                            userLastMessageRead: {
                                sentAt: (new Date).toISOString()
                            }
                        };
                        var e, t
                    }, n.handleHeaderClick = function() {
                        n.props.collapsed ? n.expand() : n.collapse()
                    }, n.expand = function() {
                        n.props.participants.currentUser && Object(U.h)(n.props.threadID), n.props.onExpand(n.props.threadID)
                    }, n.onClickOut = function() {
                        n.props.focused && n.props.onUnfocus(n.props.threadID)
                    }, n.handleClose = function() {
                        n.props.participants.currentUser && Object(U.c)(n.props.threadID), n.props.onClose(n.props.threadID)
                    }, n.collapse = function() {
                        n.props.participants.currentUser && Object(U.d)(n.props.threadID), n.props.onCollapse(n.props.threadID)
                    }, n.handleKeydown = function(e) {
                        if ((e.charCode || e.keyCode) === v.a.Enter) {
                            var t = n.autocompleteInput.getValue();
                            n.autocompleteInput.setValue(""), n.sendWhisper(t)
                        }
                    }, n.handleClick = function() {
                        n.props.onFocus(n.props.threadID), n.markThreadMessagesAsRead()
                    }, n.markThreadMessagesAsRead = function() {
                        if (!(n.props.data.loading || n.hadError || n.props.data.whisperThread && 0 === n.props.data.whisperThread.unreadMessagesCount)) {
                            var e = n.props.data.whisperThread && +n.props.data.whisperThread.messages.edges[0].cursor;
                            e && !isNaN(e) || (e = 0), Object(de.a)({
                                threadID: n.props.threadID,
                                lastReadMessageID: n.props.data.whisperThread && n.props.data.whisperThread.messages.edges[0].node.id || ""
                            }, e)
                        }
                    }, n.sendWhisper = function(e) {
                        if ("" !== e) {
                            n.props.latencyTracking.resetCustomEvents(_.a.Whispers), n.outgoingWhisperRenderedEvent = n.props.latencyTracking.registerCustomEvent({
                                benchmark: 150,
                                group: _.a.Whispers,
                                key: _.b.WhispersRenderSent,
                                label: _.c.RenderSent,
                                start: _.d.Registration
                            }), n.outgoingWhisperMessage = e, n.hadError && n.addNewThreadSendWhisper(e);
                            var t = Object(pe.b)(n.props.threadID, n.props.currentUserID);
                            t ? (n.props.participants.currentUser && n.props.participants.user && Object(U.m)({
                                threadID: n.props.threadID,
                                targetUserLogin: n.props.participants.user.login
                            }), Object(ue.a)({
                                currentUserID: n.props.currentUserID,
                                emotes: n.props.emoteSetsData && n.props.emoteSetsData.emoteMap || {},
                                message: e,
                                recipientUserID: t
                            }).catch(function() {
                                var e = Object(p.d)("Your whisper was not delivered.", "Thread"),
                                    t = n.props.data.whisperThread && n.props.data.whisperThread.messages.edges[0].node.id;
                                n.props.notifyWhisperThread(n.props.threadID, e, t)
                            })) : p.i.warn("Unable to parse whisper recipient ID.")
                        }
                    }, n.setAutocompleteInnerComponentRef = function(e) {
                        n.textInput = e
                    }, n.setAutocompleteInputRef = function(e) {
                        return n.autocompleteInput = e
                    }, n.handleContentClick = function() {
                        document.getSelection().toString() || n.textInput.focus()
                    }, n.reportOutgoingWhisperRendered = function(e) {
                        n.outgoingWhisperRenderedEvent && e === n.outgoingWhisperMessage && n.props.latencyTracking.reportCustomEvent(n.outgoingWhisperRenderedEvent)
                    }, n.state = {
                        newThreadMessages: []
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t = this;
                    if (e.data.error && (this.hadError = !0), e.data.error || e.data.loading || !e.data.whisperThread || this.props.reportThreadData(e.threadID, e.data.whisperThread), this.hadError) {
                        var n = !1;
                        this.props.pubsub.messages.whisperReceived !== e.pubsub.messages.whisperReceived && e.pubsub.messages.whisperReceived && e.pubsub.messages.whisperReceived.data_object.thread_id === this.props.threadID && (n = !0), this.props.pubsub.messages.whisperSent !== e.pubsub.messages.whisperSent && e.pubsub.messages.whisperSent && e.pubsub.messages.whisperSent.data_object.thread_id === this.props.threadID && (n = !0), n && (clearTimeout(this.refetchTimeout), this.refetchTimeout = setTimeout(function() {
                            t.props.data.refetch()
                        }, 200))
                    }
                }, t.prototype.componentDidUpdate = function(e) {
                    e.data.whisperThread && this.props.data.whisperThread && (this.props.data.whisperThread.messages.edges.length, e.data.whisperThread.messages.edges.length)
                }, t.prototype.render = function() {
                    var e = d({
                        "whispers-thread": !0,
                        "whispers-thread--collapsed": this.props.collapsed,
                        "whispers-thread--focused": this.props.focused
                    });
                    if (this.props.hidden) return null;
                    var t = this.props.emoteSetsData && this.props.emoteSetsData.emoteSets || [];
                    return r.createElement(m.a, {
                        onClickOut: this.onClickOut
                    }, r.createElement(M._25, {
                        className: e,
                        display: M.N.Flex,
                        flexShrink: 0,
                        flexGrow: 0,
                        position: M._9.Relative,
                        background: M.m.Base,
                        margin: {
                            left: 1
                        },
                        alignItems: M.c.Center,
                        justifyContent: M._1.Center,
                        "data-a-target": "whisper-thread-" + this.props.threadID + (this.props.collapsed ? "-collapsed" : ""),
                        elevation: 3
                    }, r.createElement(M._2, {
                        className: "whisper-thread__input",
                        position: M._9.Absolute,
                        fullWidth: !0,
                        padding: {
                            x: 1,
                            bottom: 1
                        },
                        attachBottom: !0
                    }, r.createElement(N.b, {
                        componentType: N.a.Input,
                        suggestionSource: N.c.Whisper,
                        iconRight: !0,
                        onFocus: this.handleClick,
                        onClick: this.handleClick,
                        onKeyDown: this.handleKeydown,
                        componentRefDelegate: this.setAutocompleteInnerComponentRef,
                        refDelegate: this.setAutocompleteInputRef
                    }, r.createElement(N.d, {
                        emotes: t
                    })), r.createElement(E.a, {
                        attachBottom: !0,
                        attachRight: !0,
                        inputRef: this.textInput,
                        onClickEmote: this.onEmoticonClick,
                        padding: {
                            x: 1,
                            bottom: 1
                        },
                        position: M._9.Absolute,
                        shouldCloseOnClickOut: !0
                    })), r.createElement(M.W, {
                        fullWidth: !0
                    }, r.createElement("div", {
                        className: "whispers-thread__content",
                        onClick: this.handleContentClick
                    }, this.renderContent())), r.createElement(M._2, {
                        position: M._9.Absolute,
                        fullWidth: !0,
                        flexShrink: 0,
                        display: M.N.Flex,
                        alignItems: M.c.Center,
                        attachTop: !0
                    }, r.createElement(ne, {
                        isHighlighted: !!(this.props.data.whisperThread && this.props.data.whisperThread.unreadMessagesCount > 0),
                        isFocused: !!this.props.focused,
                        isMuted: !!this.props.data.whisperThread && this.props.data.whisperThread.isMuted,
                        isCollapsed: this.props.collapsed,
                        isLoading: this.props.participants.loading || !this.props.participants.user || !this.props.participants.currentUser,
                        participants: this.props.participants,
                        spamInfo: this.props.data.whisperThread && this.props.data.whisperThread.spamInfo,
                        threadID: this.props.threadID,
                        collapse: this.collapse,
                        onHeaderClick: this.handleHeaderClick,
                        onBlock: this.onBlock,
                        onUnblock: this.onUnblock,
                        onClose: this.handleClose
                    }))))
                }, t.prototype.renderContent = function() {
                    var e;
                    return this.hadError ? (e = r.createElement(h.a, {
                        message: Object(p.d)("Sorry, something went wrong loading this conversation.", "WhisperThread")
                    }), e = r.createElement(M._2, null), this.props.participants.currentUser && this.props.participants.user && (e = r.createElement(ce, {
                        thread: this.getPlaceholderThreadFromLocalState(),
                        unreadMessagesCount: 0,
                        participantsByID: this.getUsersByID([this.props.participants.currentUser, this.props.participants.user]),
                        loadMore: this.loadMore
                    }))) : e = this.props.data.loading || this.props.participants.loading || !this.props.data.whisperThread ? r.createElement(M._2, {
                        display: M.N.Flex,
                        justifyContent: M._1.Center,
                        alignItems: M.c.Center,
                        margin: 2,
                        fullHeight: !0,
                        flexGrow: 1
                    }, r.createElement(M._4, null)) : r.createElement(ce, {
                        thread: this.props.data.whisperThread,
                        participantsByID: this.getUsersByID(this.props.data.whisperThread.participants),
                        unreadMessagesCount: this.props.data.whisperThread.unreadMessagesCount,
                        loadMore: this.loadMore,
                        reportOutgoingWhisperRendered: this.reportOutgoingWhisperRendered
                    }), e
                }, t.prototype.getUsersByID = function(e) {
                    for (var t = {}, n = 0, i = e; n < i.length; n++) {
                        var r = i[n];
                        t[r.id] = r
                    }
                    return t
                }, t
            }(r.Component),
            fe = Object(u.compose)(Object(g.a)(me, {
                options: function(e) {
                    return {
                        variables: {
                            targetUserID: Object(pe.b)(e.threadID, e.currentUserID) || ""
                        },
                        skip: !e.currentUserID || !e.threadID
                    }
                },
                name: "participants"
            }), Object(g.a)(he, {
                options: function(e) {
                    return {
                        variables: {
                            id: e.threadID
                        }
                    }
                },
                props: function(e) {
                    return i.__assign({}, e, {
                        loadMore: function() {
                            return e.data.fetchMore({
                                query: he,
                                variables: i.__assign({}, e.data.variables, {
                                    cursor: e.data.whisperThread && e.data.whisperThread.messages.edges[e.data.whisperThread.messages.edges.length - 1].cursor
                                }),
                                updateQuery: function(e, t) {
                                    var n = t.fetchMoreResult;
                                    if (!n.whisperThread) return {
                                        whisperThread: null
                                    };
                                    if (!e.whisperThread) return {
                                        whisperThread: n.whisperThread
                                    };
                                    var r = i.__assign({}, n.whisperThread.messages, {
                                        edges: Object(k.b)(e.whisperThread.messages.edges, n.whisperThread.messages.edges)
                                    });
                                    return {
                                        whisperThread: i.__assign({}, n.whisperThread, {
                                            messages: r
                                        })
                                    }
                                }
                            })
                        }
                    })
                }
            }), Object(f.a)([{
                topic: function(e) {
                    return Object(y.x)(e.currentUserID)
                },
                mapMessageTypesToProps: {
                    whisper_received: "whisperReceived",
                    whisper_sent: "whisperSent"
                }
            }]), Object(b.a)(), Object(C.d)("WhispersThread", {
                autoReportInteractive: !0
            }))(ge);
        var ve, be = Object(o.b)(function(e) {
            return {
                isLoggedIn: Object(l.d)(e)
            }
        }, function(e) {
            return Object(s.b)({
                notifyWhisperThread: c.b
            }, e)
        })(fe);
        n("0Yyt");
        n.d(t, "b", function() {
            return ve
        }), n.d(t, "a", function() {
            return ke
        });
        var ke = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.resizeAnimationHandle = null, t.renderThread = function(e) {
                    return e ? r.createElement(be, {
                        key: e.threadID,
                        currentUserID: t.props.currentUserID,
                        collapsed: e.collapsed,
                        hidden: e.hidden,
                        threadID: e.threadID,
                        onBlock: t.onBlock,
                        onCollapse: t.props.onCollapseThread,
                        onClose: t.props.onCloseThread,
                        onExpand: t.props.onExpandThread,
                        onFocus: t.props.onFocusThread,
                        onUnfocus: t.props.onUnfocusThread,
                        focused: t.props.focusedThreadID === e.threadID,
                        reportThreadData: t.props.reportThreadData
                    }) : null
                }, t.onBlock = function(e) {
                    t.props.archiveThread(e), t.props.onBlockThread(e)
                }, t.setOpenThreadsRef = function(e) {
                    return ve = e
                }, t.handleContentResize = function() {
                    t.resizeAnimationHandle || (t.resizeAnimationHandle = requestAnimationFrame(function() {
                        t.props.onResizeContent(), t.resizeAnimationHandle = null
                    }))
                }, t
            }
            return i.__extends(t, e), t.prototype.render = function() {
                var e = this,
                    t = this.props.openedThreads.map(function(t) {
                        return e.renderThread(t)
                    });
                return r.createElement(M._2, {
                    className: "whispers-open-threads",
                    display: M.N.Flex,
                    flexDirection: M.P.RowReverse,
                    alignItems: M.c.End,
                    position: M._9.Absolute,
                    attachBottom: !0,
                    attachLeft: !0,
                    refDelegate: this.setOpenThreadsRef
                }, t, r.createElement(a.a, {
                    onResize: this.handleContentResize
                }))
            }, t
        }(r.Component)
    },
    "2BvQ": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Core_Services_Spade_Video"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "video"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "broadcastType"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 81
            }
        };
        n.loc.source = {
            body: "query Core_Services_Spade_Video($id: ID!) {\nvideo(id: $id) {\nid\nbroadcastType\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "2Hj/": function(e, t, n) {
        "use strict";
        var i = n("GiK3"),
            r = n("6sO2"),
            a = n("Ex+h");

        function o(e, t) {
            if (!e) return null;
            switch (e.type) {
                case a.a.Playing:
                    return e.game && e.game.name ? Object(r.d)("playing {game}", {
                        game: e.game.name
                    }, "PresenceActivity") : Object(r.d)("playing", "PresenceActivity");
                case a.a.Watching:
                    if (!t && e.user.hosting && e.user.hosting.displayName) return Object(r.d)("watching {user} with the {community} community", {
                        user: e.user.hosting.displayName,
                        community: e.user.displayName
                    }, "PresenceActivity");
                    if (!t && e.user.stream && e.user.stream.game && e.user.stream.game.name) return Object(r.d)("watching {user} stream {game}", {
                        user: e.user.displayName,
                        game: e.user.stream.game.name
                    }, "PresenceActivity");
                    var n = e.user.hosting && e.user.hosting.displayName ? e.user.hosting.displayName : e.user.displayName;
                    return Object(r.d)("watching {user}", {
                        user: n
                    }, "PresenceActivity");
                case a.a.Streaming:
                    return e.stream && e.stream.game && e.stream.game.name ? Object(r.d)("streaming {game}", {
                        game: e.stream.game.name
                    }, "PresenceActivity") : Object(r.d)("streaming", "PresenceActivity");
                default:
                    return null
            }
        }

        function s(e, t) {
            if (!t) return null;
            switch (t.type) {
                case a.a.Streaming:
                    return "/" + e;
                case a.a.Watching:
                    return "/" + t.user.login;
                default:
                    return null
            }
        }
        var l = n("l4QG");

        function c(e) {
            var t = Object(r.d)("Online", "PresenceAvailability");
            switch (e) {
                case l.a.Idle:
                case l.a.Away:
                    return Object(r.d)("Away", "PresenceAvailability");
                case l.a.Busy:
                    return Object(r.d)("Busy", "PresenceAvailability");
                case l.a.Offline:
                    return Object(r.d)("Offline", "PresenceAvailability");
                case l.a.Invisible:
                    return Object(r.d)("Invisible", "PresenceAvailability");
                case l.a.Online:
                default:
                    return t
            }
        }
        var d = function(e) {
                return i.createElement("span", {
                    "data-a-target": "presence-text"
                }, o(e.activity, e.condensed) || c(e.availability))
            },
            u = n("Odds"),
            p = function(e) {
                var t = u._11.Online;
                switch (e.availability) {
                    case l.a.Idle:
                    case l.a.Away:
                        t = u._11.Away;
                        break;
                    case l.a.Busy:
                        t = u._11.Busy;
                        break;
                    case l.a.Invisible:
                        t = u._11.Invisible;
                        break;
                    case l.a.Offline:
                        t = u._11.Offline;
                        break;
                    case l.a.Online:
                        t = u._11.Online;
                        break;
                    default:
                        t = u._11.Online
                }
                return i.createElement(u._10, {
                    status: t
                })
            },
            m = n("TToO"),
            h = n("HZww");
        var g = n("aMxy"),
            f = n("mqvl"),
            v = n("TVUY");

        function b(e) {
            return function(t) {
                return function(e) {
                    return function(t) {
                        return function(n) {
                            function r(t) {
                                var i = n.call(this, t) || this;
                                return i.options = e(t), i
                            }
                            return m.__extends(r, n), r.prototype.componentDidMount = function() {
                                this.options.skip || this.subscribe(this.options)
                            }, r.prototype.componentWillReceiveProps = function(t) {
                                var n = e(t);
                                n.topic === this.options.topic || n.skip || (this.unsubscribe(), this.subscribe(n)), this.options = n
                            }, r.prototype.componentWillUnmount = function() {
                                this.unsubscribe()
                            }, r.prototype.render = function() {
                                return i.createElement(t, m.__assign({}, this.props))
                            }, r.prototype.subscribe = function(e) {
                                this.unsubscriber = Object(h.o)({
                                    fragment: e.fragment,
                                    id: e.id,
                                    topic: e.topic,
                                    type: e.type,
                                    mutator: e.mutator
                                })
                            }, r.prototype.unsubscribe = function() {
                                this.unsubscriber && this.unsubscriber()
                            }, r
                        }(i.Component)
                    }
                }(function(t) {
                    var n = e(t);
                    return {
                        id: "User:" + n.id,
                        skip: n.skip,
                        fragment: v,
                        topic: Object(h.l)(n.currentUserID),
                        type: g.PubsubMessageType.Presence,
                        mutator: function(e, t) {
                            if (!t) return null;
                            var i = n.id;
                            if (e.data.user_id !== +i) return t;
                            var r = "$User:" + i + ".activity";
                            return t.availability = e.data.availability.toUpperCase(), t.activity = Object(f.a)(e.data.activity, r), t
                        }
                    }
                })(t)
            }
        }
        n.d(t, "b", function() {
            return d
        }), n.d(t, "a", function() {
            return p
        }), n.d(t, !1, function() {
            return b
        }), n.d(t, "c", function() {
            return o
        }), n.d(t, "d", function() {
            return s
        }), n.d(t, !1, function() {
            return c
        })
    },
    "2aoH": function(e, t, n) {
        "use strict";
        var i, r = n("TToO"),
            a = n("GiK3"),
            o = n("6sO2"),
            s = n("Odds"),
            l = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        content: null,
                        isError: !1
                    }, n.logger = o.i.withCategory("StickyHeaderRoot"), n.displayContent = function(e) {
                        n.setState({
                            content: e
                        })
                    }, n.hideContent = function() {
                        n.setState({
                            content: null
                        })
                    }, i && n.logger.error(new Error("StickyHeaderRoot is already mounted."), "StickyHeaderRoot is already mounted. There should only be one of these mounted at a time."), i = n, n
                }
                return r.__extends(t, e), t.prototype.componentDidCatch = function(e, t) {
                    var n = this;
                    this.setState({
                        isError: !0
                    }, function() {
                        n.logger.error(e, "A unhandled exception occurred in the component hierarchy", {
                            info: t
                        })
                    })
                }, t.prototype.componentWillUnmount = function() {
                    i = null
                }, t.prototype.render = function() {
                    return this.state.isError || !this.state.content ? null : a.createElement(s._2, null, this.state.content)
                }, t
            }(a.Component),
            c = null,
            d = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    if (c) {
                        var i = "There may only be one StickyHeader mounted at a time.";
                        o.i.error(new Error(i), i)
                    }
                    return c = n, n
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    i && i.displayContent(this.props.children)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    i && (e.children ? i.displayContent(e.children) : i.hideContent())
                }, t.prototype.componentWillUnmount = function() {
                    i && i.hideContent(), c = null
                }, t.prototype.render = function() {
                    return null
                }, t
            }(a.Component);
        n.d(t, "a", function() {
            return d
        }), n.d(t, "b", function() {
            return l
        })
    },
    "2b/B": function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            r = n("2KeS"),
            a = n("+xm8"),
            o = n("f2i/"),
            s = n("NikC"),
            l = n("Aj/L"),
            c = n("TToO"),
            d = n("HW6M"),
            u = n("GiK3"),
            p = n("6sO2"),
            m = n("rCmJ"),
            h = n("7vx8"),
            g = n("NXs7"),
            f = n("VAT8"),
            v = n("CSlQ"),
            b = n("Odds"),
            k = n("Kkxm"),
            y = (n("e6tx"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onCardClick = function() {
                        n.setState({
                            dropdownOpen: !n.state.dropdownOpen
                        })
                    }, n.onClickOut = function() {
                        n.setState({
                            dropdownOpen: !1
                        })
                    }, n.onLoginClick = function(e) {
                        e.preventDefault(), n.props.login()
                    }, n.onLogoutClick = function(e) {
                        e.preventDefault(), n.props.logout()
                    }, n.onDarkModeCheckboxClick = function() {
                        var e = n.props.theme === g.a.Dark ? g.a.Light : g.a.Dark;
                        n.props.changeTheme(e, s.a.UserMenu)
                    }, n.state = {
                        dropdownOpen: !1
                    }, n
                }
                return c.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.props.data.loading || this.props.data.error) return u.createElement(b._8, null);
                    if (this.props.isOnboarding) return u.createElement(b._2, {
                        display: b.N.Flex,
                        className: "minimal-top-nav__user",
                        fullHeight: !0
                    }, u.createElement(b._2, {
                        display: b.N.Flex,
                        flexWrap: b.Q.NoWrap,
                        alignItems: b.c.Center,
                        flexGrow: 1,
                        padding: {
                            right: 1
                        },
                        fullHeight: !0
                    }, u.createElement(b._2, {
                        margin: {
                            x: 1
                        },
                        flexShrink: 0
                    }, u.createElement(b._2, null, u.createElement(b.l, {
                        size: 30,
                        src: this.props.data.currentUser.profileImageURL,
                        alt: "User avatar"
                    }))), u.createElement(b._2, {
                        flexGrow: 1,
                        flexShrink: 1,
                        flexDirection: b.P.Column,
                        ellipsis: !0
                    }, u.createElement(b._25, {
                        className: "minimal-top-nav__username"
                    }, this.props.data.currentUser.displayName))));
                    if (this.props.isLoggedIn) {
                        var e = null;
                        this.props.darkModeEnabled && (e = u.createElement(b._25, {
                            borderBottom: !0,
                            margin: {
                                y: 1
                            }
                        }, u.createElement(b._2, {
                            margin: {
                                x: 2,
                                bottom: 1
                            }
                        }, u.createElement(b.H, {
                            id: "dark-mode-toggle",
                            label: Object(p.d)("Dark Mode", "MinimalUser"),
                            "data-a-target": "dark-mode-toggle",
                            "data-test-selector": "dark-mode-toggle",
                            "data-a-value": this.props.theme,
                            checked: this.props.theme === g.a.Dark,
                            onChange: this.onDarkModeCheckboxClick
                        }))));
                        var t = d(Object(f.c)(g.a.Dark), {
                                "minimal-top-nav__dropdown-open": this.state.dropdownOpen
                            }),
                            n = d({
                                "minimal-top-nav__dropdown-open": this.state.dropdownOpen
                            }, {
                                "minimal-top-nav__dropdown": !this.state.dropdownOpen
                            });
                        return u.createElement(m.a, {
                            onClickOut: this.onClickOut,
                            className: t
                        }, u.createElement(b._2, {
                            display: b.N.Flex,
                            className: "minimal-top-nav__user",
                            fullHeight: !0
                        }, u.createElement(b._0, {
                            onClick: this.onCardClick,
                            "data-test-selector": "user-menu-toggle"
                        }, u.createElement(b._2, {
                            display: b.N.Flex,
                            flexWrap: b.Q.NoWrap,
                            alignItems: b.c.Center,
                            flexGrow: 1,
                            padding: {
                                right: 1
                            },
                            fullHeight: !0
                        }, u.createElement(b._2, {
                            margin: {
                                x: 1
                            },
                            flexShrink: 0
                        }, u.createElement(b._2, null, u.createElement(b.l, {
                            size: 30,
                            src: this.props.data.currentUser.profileImageURL,
                            alt: "User avatar"
                        }))), u.createElement(b._2, {
                            flexGrow: 1,
                            flexShrink: 1,
                            flexDirection: b.P.Column,
                            ellipsis: !0
                        }, u.createElement(b._25, {
                            className: "minimal-top-nav__username"
                        }, this.props.data.currentUser.displayName)), u.createElement(b._25, {
                            display: b.N.Flex,
                            flexShrink: 0,
                            className: "minimal-top-nav__expand"
                        }, u.createElement(b._15, {
                            asset: b._16.GlyphArrDown
                        }))))), u.createElement(b._25, {
                            fullWidth: !0,
                            overflow: b._5.Hidden,
                            position: b._9.Absolute,
                            padding: {
                                y: 1
                            },
                            background: b.m.Base,
                            className: n,
                            "data-test-selector": "dropdown-down"
                        }, e, u.createElement(b._0, {
                            onClick: this.onLogoutClick
                        }, u.createElement(b._25, {
                            color: b.I.Alt,
                            display: b.N.Flex,
                            alignItems: b.c.Center,
                            padding: {
                                x: 2,
                                y: .5
                            }
                        }, u.createElement(b._2, {
                            display: b.N.Flex,
                            alignItems: b.c.Center,
                            margin: {
                                right: 1
                            }
                        }, u.createElement(b._15, {
                            asset: b._16.NavLogout,
                            height: 18,
                            width: 18
                        })), u.createElement(b._35, null, Object(p.d)("Log Out", "MinimalUser"))))))
                    }
                    return u.createElement(b._2, {
                        margin: 1
                    }, u.createElement(b.u, {
                        onClick: this.onLoginClick
                    }, Object(p.d)("Log in", "MinimalUser")))
                }, t.prototype.reportInteractive = function() {
                    !this.props.data || this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t = c.__decorate([Object(v.d)("MinimalUser"), Object(h.a)(k)], t)
            }(u.Component));
        var S = Object(i.b)(function(e) {
            return {
                isLoggedIn: Object(l.d)(e),
                theme: e.ui.theme
            }
        }, function(e) {
            return Object(r.b)({
                logout: o.g,
                login: function() {
                    return o.f(a.a.TopNavLoginButton)
                },
                changeTheme: s.b
            }, e)
        })(y);
        n.d(t, "a", function() {
            return S
        })
    },
    "2emZ": function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.Emote = "emote", e.Mention = "mention", e.Hashtag = "hashtag", e.None = "none"
            }(i || (i = {}))
    },
    "2o2f": function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.Live = "live", e.WatchParty = "watch_party", e.Premiere = "premiere", e.Rerun = "rerun"
            }(i || (i = {}))
    },
    "2qz3": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("/+to"),
            o = n("QG7y"),
            s = n("CSlQ"),
            l = n("7vx8"),
            c = n("jkA6"),
            d = n("7tMz"),
            u = n("IOwa"),
            p = n("2o2f"),
            m = n("KSGD"),
            h = n("6sO2"),
            g = n("S4HN"),
            f = n("AadB"),
            v = n("Odds"),
            b = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.impressionEventFired = !1, t.setRef = function(e) {
                        return t.element = e
                    }, t.isVisible = function(e) {
                        if (null !== t.element) {
                            var n = t.element.getBoundingClientRect();
                            return n.left < e.right && n.right > e.left
                        }
                        return !1
                    }, t.trackImpression = function() {
                        var e = {
                            channel_id: t.props.streamNode.id,
                            action: g.a.Impression,
                            parent_game: t.props.streamNode.game ? t.props.streamNode.game.name : "",
                            content_index: t.props.streamIndex
                        };
                        Object(g.c)(e)
                    }, t.trackClickEvent = function() {
                        var e = {
                            channel_id: t.props.streamNode.id,
                            action: g.a.Click,
                            parent_game: t.props.streamNode.game ? t.props.streamNode.game.name : "",
                            content_index: t.props.streamIndex
                        };
                        Object(g.c)(e)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this.context.registerReceiver;
                    e ? this.unregister = e(this) : h.i.warn("<StreamThumbnailWithTrackingComponent /> initialized missing a <ScrollableArea /> provider")
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister && this.unregister()
                }, t.prototype.render = function() {
                    return r.createElement("div", {
                        onClick: this.trackClickEvent
                    }, r.createElement(v._2, {
                        refDelegate: this.setRef
                    }, r.createElement(f.b, {
                        key: this.props.streamIndex,
                        directoryName: this.props.directoryName,
                        directoryType: this.props.directoryType,
                        streamIndex: this.props.streamIndex,
                        streamNode: this.props.streamNode,
                        trackingMedium: this.props.trackingMedium
                    })))
                }, t.prototype.checkVisible = function(e) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(t) {
                            return !this.impressionEventFired && this.isVisible(e) && (this.trackImpression(), this.impressionEventFired = !0), [2]
                        })
                    })
                }, t.contextTypes = {
                    registerReceiver: m.func
                }, t
            }(r.Component),
            k = "community-stream__placeholder",
            y = "community-stream",
            S = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderStream = function() {
                        return t.props.data ? r.createElement(v._2, {
                            "data-test-selector": y,
                            position: v._9.Relative
                        }, r.createElement(v._2, {
                            padding: .5,
                            position: v._9.Absolute,
                            zIndex: v._52.Above
                        }, r.createElement(u.a, {
                            type: p.a.Live
                        })), r.createElement(b, {
                            key: t.props.data.id,
                            trackingMedium: t.props.trackingMedium,
                            directoryName: t.props.directoryName,
                            directoryType: t.props.directoryType,
                            streamIndex: t.props.index,
                            streamNode: t.props.data
                        })) : r.createElement(v._2, {
                            "data-test-selector": k,
                            margin: {
                                bottom: 2
                            }
                        }, r.createElement(v._2, {
                            margin: {
                                bottom: .5
                            }
                        }, r.createElement(v.j, {
                            ratio: v.k.Aspect16x9
                        }, r.createElement(v._8, null))), r.createElement(v._35, null, r.createElement(v._8, {
                            width: 150
                        })), r.createElement(v._35, {
                            fontSize: v.R.Size7
                        }, r.createElement(v._8, {
                            width: 100
                        })))
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(v._2, null, this.renderStream())
                }, t
            }(r.Component),
            _ = n("eqtY"),
            N = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data && !this.props.data.loading && this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = null,
                        t = "/directory";
                    if (this.props.data && !this.props.data.loading && !this.props.data.error && this.props.data.directory && this.props.data.directory.streams && this.props.data.directory.streams.edges) {
                        t = this.props.data.directory.name;
                        var n = this.props.data.directory.streams.edges.filter(function(e) {
                            var t = e.node;
                            return t.broadcaster && t.broadcaster.login
                        }).slice(0, 1).map(function(e) {
                            return e.node
                        });
                        n.length && (e = n[0])
                    }
                    return r.createElement(S, {
                        data: e,
                        index: this.props.index,
                        directoryName: t,
                        directoryType: this.props.directoryType,
                        trackingMedium: this.props.trackingMedium
                    })
                }, t = i.__decorate([Object(l.a)(_, {
                    options: function(e) {
                        return {
                            fetchPolicy: "network-only",
                            variables: {
                                name: e.name,
                                limit: e.limit ? e.limit : 3,
                                type: Object(c.a)(e.directoryType)
                            }
                        }
                    }
                }), Object(d.a)("CommunityStream")], t)
            }(r.Component),
            E = "community-streams-row__ad",
            C = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        adDisplayed: !1
                    }, t.renderStreamGridWithAdSlot = function() {
                        var e = r.createElement(v._2, {
                                key: "ad",
                                "data-test-selector": E,
                                display: v.N.Flex,
                                flexGrow: 1,
                                justifyContent: v._1.Center,
                                padding: {
                                    bottom: t.state.adDisplayed ? 2 : 0,
                                    left: t.state.adDisplayed ? .5 : 0
                                }
                            }, r.createElement(a.a, {
                                adSize: o.c.anonFront.rect,
                                adUnit: o.d.frontpage,
                                slotID: o.b.anonFront.rect,
                                targeting: {
                                    pagetype: o.a.frontpage
                                },
                                slotRendered: t.onSlotRendered,
                                autoEnable: !1
                            })),
                            n = t.renderStreams().map(function(e, t) {
                                return r.createElement(v.J, {
                                    key: "stream-" + t.toString(),
                                    cols: 4
                                }, e)
                            });
                        return n.splice(2, 0, e), r.createElement(v._2, {
                            padding: {
                                x: 1
                            }
                        }, r.createElement(v.U, {
                            gutterSize: v.V.Medium
                        }, n))
                    }, t.renderStreams = function() {
                        if (t.props.data) {
                            var e = t.props.data;
                            return t.props.withAd && t.state.adDisplayed && (e = e.slice(0, 2)), e.map(function(e, n) {
                                return r.createElement(S, {
                                    key: e.id,
                                    data: e,
                                    index: n,
                                    directoryName: e.title,
                                    directoryType: t.props.directoryType,
                                    trackingMedium: t.props.trackingMedium
                                })
                            })
                        }
                        if (t.props.names) {
                            var n = t.props.names;
                            return t.props.withAd && t.state.adDisplayed && (n = n.slice(0, 2)), n.map(function(e, n) {
                                return r.createElement(N, {
                                    key: e,
                                    name: e,
                                    index: n,
                                    directoryType: t.props.directoryType,
                                    trackingMedium: t.props.trackingMedium
                                })
                            })
                        }
                        throw new Error("Need to pass either data or names into CommunityStreamsRow")
                    }, t.onSlotRendered = function() {
                        t.state.adDisplayed || t.setState({
                            adDisplayed: !0
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.props.withAd) return this.renderStreamGridWithAdSlot();
                    var e = this.props.data && 1 === this.props.data.length || this.props.names && 1 === this.props.names.length ? 1 : 0;
                    return r.createElement(v._2, {
                        margin: {
                            x: 1
                        }
                    }, r.createElement(v._46, {
                        gutterSize: v._48.Small,
                        childWidth: v._47.Large,
                        placeholderItems: e,
                        noWrap: !0
                    }, this.renderStreams()))
                }, t
            }(r.Component),
            T = Object(s.d)("CommunityStreamsRow")(C);
        n.d(t, !1, function() {
            return E
        }), n.d(t, !1, function() {
            return C
        }), n.d(t, "a", function() {
            return T
        })
    },
    "2rJy": function(e, t) {},
    3: function(e, t) {},
    "37Pp": function(e, t, n) {
        "use strict";
        var i = n("GiK3"),
            r = n("6sO2"),
            a = n("FDYX"),
            o = n("Odds"),
            s = (n("M5Tl"), function(e) {
                var t = e.subscriptionProduct;
                if (void 0 === t) return i.createElement("div", null);
                var n = Object(r.d)("{price} / Month", {
                    price: t.price
                }, "SubDiscountPriceLabel");
                if (e.isGift ? Object(a.c)([e.subscriptionProduct]) : Object(a.d)([e.subscriptionProduct])) {
                    var s = void 0;
                    return s = e.isGift ? Object(r.d)("{price} (Save {percent})", {
                        price: Object(a.a)(e.subscriptionProduct, e.isGift),
                        percent: Object(r.e)(Object(a.b)(e.subscriptionProduct, e.isGift) / 100, "percent")
                    }, "SubDiscountPriceLabel") : Object(r.d)("{price} for the first month (Save {percent})", {
                        price: Object(a.a)(e.subscriptionProduct, e.isGift),
                        percent: Object(r.e)(Object(a.b)(e.subscriptionProduct, e.isGift) / 100, "percent")
                    }, "SubDiscountPriceLabel"), i.createElement(o._2, {
                        "data-test-selector": "sub-discount-price-label__discounted"
                    }, i.createElement(o._35, {
                        color: o.I.Alt2,
                        decoration: o._38.Strikethrough
                    }, n), i.createElement(o._35, {
                        className: "sub-discount-price-label__discount-price",
                        type: o._40.H5,
                        bold: !0
                    }, s))
                }
                return i.createElement(o._2, {
                    "data-test-selector": "sub-discount-price-label__non-discounted"
                }, i.createElement(o._35, null, n))
            });
        n.d(t, !1, function() {
            return "sub-discount-price-label__discounted"
        }), n.d(t, !1, function() {
            return "sub-discount-price-label__non-discounted"
        }), n.d(t, "a", function() {
            return s
        })
    },
    "3KVC": function(e, t, n) {
        "use strict";
        t.a = function(e) {
            void 0 === e && (e = "");
            return i.test(e)
        }, t.b = function(e) {
            void 0 === e && (e = "");
            var t = e.match(i);
            if (null === t) return "";
            if (t && t.length > 0 && void 0 !== t.index) {
                var n = t[1];
                return n
            }
            return ""
        };
        var i = new RegExp("(?:^|\\s)(?:https?://)?(?:(?:www|go).)?twitch.tv/videos/(\\d+)(?:$|\\s)?")
    },
    "3QSP": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Core_Services_Spade_SubEvent_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "withVideo"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "videoID"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "canPrimeSubscribe"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "subscriptionBenefit"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "tier"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "purchasedWithPrime"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "video"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "videoID"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "withVideo"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "broadcastType"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 266
            }
        };
        n.loc.source = {
            body: "query Core_Services_Spade_SubEvent_User($channelID: ID! $withVideo: Boolean! $videoID: ID) {\nuser(id: $channelID) {\nid\nself {\ncanPrimeSubscribe\nsubscriptionBenefit {\nid\ntier\npurchasedWithPrime\n}\n}\n}\nvideo(id: $videoID) @include(if: $withVideo) {\nid\nbroadcastType\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "3iBR": function(e, t, n) {
        "use strict";
        n.d(t, "m", function() {
            return a
        }), n.d(t, "c", function() {
            return o
        }), n.d(t, "b", function() {
            return s
        }), n.d(t, "a", function() {
            return l
        }), n.d(t, "i", function() {
            return c
        }), n.d(t, "k", function() {
            return d
        }), n.d(t, "j", function() {
            return u
        }), n.d(t, "l", function() {
            return p
        }), n.d(t, "g", function() {
            return m
        }), n.d(t, "h", function() {
            return h
        }), n.d(t, "d", function() {
            return g
        }), n.d(t, "e", function() {
            return f
        }), n.d(t, "f", function() {
            return v
        });
        var i, r = n("I89S"),
            a = {
                ERROR_DISPLAY_TIMEOUT: 5e3,
                GET_BALANCE_RATE_LIMIT: 5e3,
                UNDO_PROMPT_DURATION: 5e3
            },
            o = "https://d3aqoihi2n8ty8.cloudfront.net",
            s = o + "/cheer",
            l = o + "/actions",
            c = 8e5,
            d = 1e4,
            u = 500,
            p = 1e3,
            m = "cheer",
            h = r.a.Purple,
            g = "FIRST_PARTY",
            f = "THIRD_PARTY",
            v = ((i = {})[r.a.Gray] = "#979797", i[r.a.Purple] = "#9c3ee8", i[r.a.Green] = "#1db2a5", i[r.a.Blue] = "#0099fe", i[r.a.Red] = "#f43021", i[r.a.Yellow] = "#f3a71a", i)
    },
    "3yQz": function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return r
        }), n.d(t, "a", function() {
            return a
        });
        var i, r = "VIEWS",
            a = "TIME";
        ! function(e) {
            e.Popular = "VIEWS", e.Newest = "TIME"
        }(i || (i = {}))
    },
    "3ydF": function(e, t) {},
    "4Dne": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.b = function(e) {
            return a.__awaiter(this, void 0, void 0, function() {
                var t, n, i, u, p, m, h, g;
                return a.__generator(this, function(a) {
                    switch (a.label) {
                        case 0:
                            return (t = e.friendActivity) ? (n = Object(c.d)(e.friendLogin, t)) ? (i = "/" === n[0] ? n.slice(1) : n, t.type !== s.a.Streaming ? [3, 1] : (u = {
                                target_action: r.Streaming,
                                target_channel: e.friendLogin,
                                target_game: t.stream.game && t.stream.game.name || void 0,
                                target_login: e.friendLogin,
                                target_url: i,
                                ui_context: e.context
                            }, [3, 7])) : (o.i.warn("[trackPresenceClick] Attempted to track a click on an unjoinable activity."), [2]) : (o.i.warn("[trackPresenceClick] Attempted to track a click with no activity."), [2]);
                        case 1:
                            if (t.type !== s.a.Watching) return [3, 6];
                            p = void 0, m = null, a.label = 2;
                        case 2:
                            return a.trys.push([2, 4, , 5]), [4, o.n.apollo.client.query({
                                query: d,
                                variables: {
                                    login: t.user.login
                                }
                            })];
                        case 3:
                            return m = a.sent(), [3, 5];
                        case 4:
                            return h = a.sent(), o.i.error(h, "[trackPresenceClick] Failed to query watched user data.", {
                                watchedUser: t.user.login
                            }), [3, 5];
                        case 5:
                            return (g = m && m.data && m.data.user) ? p = g.hosting && g.hosting.stream ? g.hosting.stream.game && g.hosting.stream.game.name || void 0 : g.stream && g.stream.game && g.stream.game.name || void 0 : o.i.error(new Error("GraphQL empty response"), "[trackPresenceClick] Query for watched user info returned no data.", {
                                watchedUser: t.user.login
                            }), u = {
                                target_action: r.Watching,
                                target_channel: t.user.login,
                                target_game: p,
                                target_hosted_channel: t.user.hosting && t.user.hosting.login || void 0,
                                target_login: e.friendLogin,
                                target_url: i,
                                ui_context: e.context
                            }, [3, 7];
                        case 6:
                            return o.i.warn("[trackPresenceClick] Attempted to track a click on an unjoinable activity."), [2];
                        case 7:
                            return o.m.track(l.SpadeEventType.PresenceClick, u), [2]
                    }
                })
            })
        };
        var i, r, a = n("TToO"),
            o = n("6sO2"),
            s = n("Ex+h"),
            l = n("vH/s"),
            c = n("2Hj/"),
            d = n("K1Jg");
        n.n(d);
        ! function(e) {
            e.FriendsListButton = "friends", e.WhisperHeaderButton = "convo_join", e.WhisperHeaderLink = "convo_link"
        }(i || (i = {})),
        function(e) {
            e.Streaming = "streaming", e.Watching = "watching"
        }(r || (r = {}))
    },
    "4MRZ": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChannelPage_SubscribeButton_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emoteSetID"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "canPrimeSubscribe"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "subscriptionBenefit"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "purchasedWithPrime"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "tier"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "requestInfo"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "countryCode"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 262
            }
        };
        n.loc.source = {
            body: "query ChannelPage_SubscribeButton_User($login: String!) {\nuser(login: $login) {\nid\ndisplayName\nsubscriptionProducts {\nid\nemoteSetID\n}\nself {\ncanPrimeSubscribe\nsubscriptionBenefit {\nid\npurchasedWithPrime\ntier\n}\n}\n}\ncurrentUser {\nid\n}\nrequestInfo {\ncountryCode\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "4NZK": function(e, t) {},
    "4ik2": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecommendedFriend_CancelFriendRequest"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CancelFriendRequestInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "cancelFriendRequest"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 136
            }
        };
        n.loc.source = {
            body: "mutation RecommendedFriend_CancelFriendRequest($input: CancelFriendRequestInput!) {\ncancelFriendRequest(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "508y": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "CommunityCard_CommunityDetails"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "name"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "type"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DirectoryType"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "directory"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "name"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "type"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "type"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "avatarURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "285"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "height"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "380"
                                    }
                                }],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "viewersCount"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 172
            }
        };
        n.loc.source = {
            body: "query CommunityCard_CommunityDetails($name: String! $type: DirectoryType!) {\ndirectory(name: $name type: $type) {\nid\nname\navatarURL(width: 285 height: 380)\nviewersCount\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "5G5w": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("7vx8"),
            o = n("oIkB"),
            s = n("LIeg");

        function l(e, t, n, i) {
            void 0 === n && (n = {});
            var r = e.readQuery({
                query: t,
                variables: n
            });
            if (r) {
                var a = s(r, function(e) {
                    return e
                }, function(e) {
                    return i(e)
                });
                e.writeQuery({
                    query: t,
                    variables: n,
                    data: a
                })
            }
        }
        var c = n("Odds"),
            d = n("xGL+"),
            u = n("E+ZP"),
            p = (n("AtoX"), n("RuaR"));
        n.d(t, "a", function() {
            return m
        });
        var m = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    hovered: !1,
                    inProgress: !1
                }, t.onClick = function() {
                    t.state.inProgress || t.setState({
                        inProgress: !0
                    }, t.mutateFollowGame)
                }, t.mutateFollowGame = function() {
                    return i.__awaiter(t, void 0, void 0, function() {
                        return i.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.followGameDataLoadedWithoutError() && this.props.data.game ? this.isFollowing() ? [3, 2] : [4, this.followGame(this.props.data.game.id)] : [2];
                                case 1:
                                    return e.sent(), [3, 4];
                                case 2:
                                    return [4, this.unfollowGame(this.props.data.game.id)];
                                case 3:
                                    e.sent(), e.label = 4;
                                case 4:
                                    return [2]
                            }
                        })
                    })
                }, t.onMouseEnter = function() {
                    t.setState({
                        hovered: !0
                    })
                }, t.onMouseLeave = function() {
                    t.setState({
                        hovered: !1
                    })
                }, t
            }
            return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                !e.categoryChange || this.props.categoryChange && this.props.categoryChange.timestampMs === e.categoryChange.timestampMs || !e.categoryChange.category.games.includes(this.props.title) || this.isFollowing() !== e.categoryChange.shouldFollow && this.onClick()
            }, t.prototype.render = function() {
                var e;
                return this.state.inProgress ? e = r.createElement("div", {
                    className: "follow-game-card__overlay"
                }, r.createElement(c._4, {
                    fillContent: !0
                })) : this.state.hovered ? e = r.createElement("div", {
                    className: "follow-game-card__overlay"
                }, r.createElement(c._15, {
                    width: 50,
                    height: 50,
                    asset: this.isFollowing() ? c._16.Unheart : c._16.Heart
                })) : this.isFollowing() && (e = r.createElement("div", {
                    className: "follow-game-card__overlay follow-game-card__overlay--followed",
                    "data-a-target": "follow-game-card--followed"
                }, r.createElement(c._15, {
                    width: 50,
                    height: 50,
                    asset: c._16.Heart
                }))), r.createElement(c.W, {
                    margin: {
                        bottom: 1
                    }
                }, r.createElement("div", i.__assign({
                    className: "follow-game-card",
                    onMouseEnter: this.onMouseEnter,
                    onMouseLeave: this.onMouseLeave,
                    onClick: this.onClick
                }, Object(c._53)(this.props)), r.createElement(c.A, {
                    key: this.props.title
                }, r.createElement(c._2, {
                    position: c._9.Relative
                }, e, r.createElement(c.C, {
                    aspect: c.k.Aspect3x4,
                    alt: this.props.imageAlt,
                    src: this.props.imageSrc
                })), r.createElement(c.B, null, r.createElement(c._2, {
                    margin: {
                        top: .5,
                        bottom: 1
                    }
                }, r.createElement(c._35, {
                    color: c.I.Base,
                    fontSize: c.R.Size5
                }, this.props.title), r.createElement(c._35, {
                    color: c.I.Alt,
                    fontSize: c.R.Size6
                }, this.props.info))))))
            }, t.prototype.followGame = function(e) {
                return i.__awaiter(this, void 0, void 0, function() {
                    var t, n = this;
                    return i.__generator(this, function(r) {
                        switch (r.label) {
                            case 0:
                                t = i.__assign({}, Object(o.a)({
                                    gameID: e
                                }), {
                                    update: function(e, t) {
                                        var i = t.data.followGame;
                                        l(e, u, {
                                            name: n.props.title
                                        }, function(e) {
                                            return e.game && i && i.game ? (e.game.self.follow = i.game.self.follow, e) : e
                                        })
                                    },
                                    optimisticResponse: {
                                        followGame: {
                                            __typename: "FollowGamePayload",
                                            game: {
                                                __typename: "Game",
                                                self: {
                                                    __typename: "GameSelfConnection",
                                                    follow: {
                                                        __typename: "GameFollow",
                                                        followedAt: (new Date).toISOString()
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }), r.label = 1;
                            case 1:
                                return r.trys.push([1, 3, , 4]), [4, this.props.followGame(t)];
                            case 2:
                                return r.sent(), this.setState({
                                    inProgress: !1
                                }, function() {
                                    n.props.onFollow && n.props.onFollow(n.props.title)
                                }), [3, 4];
                            case 3:
                                return r.sent(), this.setState({
                                    inProgress: !1
                                }), [3, 4];
                            case 4:
                                return [2]
                        }
                    })
                })
            }, t.prototype.unfollowGame = function(e) {
                return i.__awaiter(this, void 0, void 0, function() {
                    var t, n = this;
                    return i.__generator(this, function(r) {
                        switch (r.label) {
                            case 0:
                                t = i.__assign({}, Object(o.a)({
                                    gameID: e
                                }), {
                                    update: function(e, t) {
                                        var i = t.data.unfollowGame;
                                        l(e, u, {
                                            name: n.props.title
                                        }, function(e) {
                                            return e.game && i && i.game ? (e.game.self.follow = i.game.self.follow, e) : e
                                        })
                                    },
                                    optimisticResponse: {
                                        unfollowGame: {
                                            __typename: "UnfollowGamePayload",
                                            game: {
                                                __typename: "Game",
                                                self: {
                                                    __typename: "GameSelfConnection",
                                                    follow: null
                                                }
                                            }
                                        }
                                    }
                                }), r.label = 1;
                            case 1:
                                return r.trys.push([1, 3, , 4]), [4, this.props.unfollowGame(t)];
                            case 2:
                                return r.sent(), this.setState({
                                    inProgress: !1
                                }, function() {
                                    n.props.onUnfollow && n.props.onUnfollow(n.props.title)
                                }), [3, 4];
                            case 3:
                                return r.sent(), this.setState({
                                    inProgress: !1
                                }), [3, 4];
                            case 4:
                                return [2]
                        }
                    })
                })
            }, t.prototype.isFollowing = function() {
                return !!(this.followGameDataLoadedWithoutError() && this.props.data.game && this.props.data.game.self && this.props.data.game.self.follow)
            }, t.prototype.followGameDataLoadedWithoutError = function() {
                return !(!this.props || !this.props.data || this.props.data.loading || this.props.data.error || !this.props.data.game)
            }, t = i.__decorate([Object(a.a)(u, {
                options: function(e) {
                    return {
                        variables: {
                            name: e.title
                        }
                    }
                }
            }), Object(a.a)(d, {
                name: "followGame"
            }), Object(a.a)(p, {
                name: "unfollowGame"
            })], t)
        }(r.Component)
    },
    "5LoI": function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.Games = "game", e.Videos = "vod", e.VideosNewest = "vod_by_created_at", e.Users = "user", e.Channels = "live_channel", e.Communities = "community"
            }(i || (i = {}))
    },
    "5MsU": function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.PlayerInit = "init", e.ContentShowing = "contentShowing", e.PlaybackStatistics = "playbackStatistics", e.ChansubRequired = "chansubRequired", e.VideoFailure = "videoFailure", e.Formats = "videoFormats", e.ABSStreamFormatChange = "abs_stream_format_change", e.FormatChanged = "videoFormatChanged", e.TimeChange = "timeChange", e.BufferChange = "bufferChange", e.SegmentChange = "segmentchange", e.UsherFailError = "usherFail", e.CaptionUpdate = "captions", e.SeekFailed = "seekfailed", e.VariantSwitchRequest = "variantSwitchRequested", e.ViewersChange = "viewerschange", e.StreamLoaded = "streamLoaded", e.VideoLoaded = "videoLoaded", e.VideoPaused = "videoPaused", e.QualityChange = "qualitychange", e.Online = "online", e.Offline = "offline", e.Restricted = "restricted", e.CastingChange = "castingchange", e.TheatreChange = "theatrechange", e.MidrollRequested = "midrollrequested", e.ManifestExtraInfo = "manifestExtraInfo", e.TransitionToCollectionVOD = "transitionToCollectionVod", e.TransitionToRecommendedVOD = "transitionToRecommendedVod", e.StitchedAdStart = "stitchedadstart", e.StichedAdEnd = "stitchedadend", e.PersistenPlayerToggle = "persistentPlayerEnableToggle", e.StatsUpdate = "statsupdate", e.PromptLoginModal = "prompt login modal", e.OpenStream = "openStream", e.PlayerReady = "ready", e.FullscreenChange = "fullscreenchange"
            }(i || (i = {}))
    },
    "5k1t": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.b = function(e, t, n) {
            return {
                type: i,
                threadID: e,
                afterMessageID: n,
                content: t
            }
        };
        var i = "whisperNotifications.WHISPER_THREAD_NOTIFIED"
    },
    "5s0/": function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            r = n("2KeS"),
            a = n("+xm8"),
            o = n("f2i/"),
            s = n("uXDg"),
            l = n("QPF3"),
            c = n("TToO"),
            d = n("GiK3"),
            u = n("6sO2"),
            p = n("CSlQ"),
            m = n("Odds"),
            h = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleClick = function() {
                        t.props.threadID ? (t.props.onClick && t.props.onClick(), t.props.openThread(t.props.threadID)) : t.props.login()
                    }, t
                }
                return c.__extends(t, e), t.prototype.render = function() {
                    var e = Object(u.d)("Whisper", "WhisperButton");
                    return d.createElement(m.u, {
                        onClick: this.handleClick,
                        "data-a-target": "usercard-whisper-button"
                    }, e)
                }, t = c.__decorate([Object(p.d)("WhisperButton", {
                    autoReportInteractive: !0
                })], t)
            }(d.Component);
        var g = Object(i.b)(null, function(e) {
            return Object(r.b)({
                login: function() {
                    return Object(o.f)(a.a.WhisperButton)
                },
                openThread: function(e) {
                    return Object(s.l)({
                        collapsed: !1,
                        threadID: e,
                        ignoreCollapseIfOpen: !0
                    }, Object(l.a)())
                }
            }, e)
        })(h);
        n.d(t, "a", function() {
            return g
        })
    },
    "67ft": function(e, t) {},
    "68hr": function(e, t, n) {
        "use strict";
        var i = n("GiK3"),
            r = n("6sO2"),
            a = n("yWCw"),
            o = n("Odds"),
            s = function() {
                return i.createElement(a.a, {
                    message: Object(r.d)("Sorry. Unless you’ve got a time machine, that content is unavailable.", "PageNotFound")
                }, i.createElement(o._2, {
                    margin: {
                        top: 2
                    }
                }, i.createElement(o.u, {
                    linkTo: "/directory",
                    "data-a-target": "browse-channels-button"
                }, Object(r.d)("Browse channels", "PageNotFound"))))
            };
        n.d(t, "a", function() {
            return s
        })
    },
    "6O9f": function(e, t) {},
    "6WAQ": function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.Archive = "ARCHIVE", e.Highlight = "HIGHLIGHT", e.Upload = "UPLOAD", e.WatchParty = "WATCH_PARTY", e.PastPremiere = "PAST_PREMIERE", e.PremiereUpload = "PREMIERE_UPLOAD"
            }(i || (i = {}))
    },
    "70dR": function(e, t, n) {
        "use strict";
        var i, r = n("TToO"),
            a = n("GiK3"),
            o = n("RH2O"),
            s = n("Aj/L"),
            l = n("CSlQ"),
            c = n("6sO2"),
            d = n("+Znq"),
            u = n("7vx8"),
            p = n("RweG"),
            m = n("vBst"),
            h = n("S1vB"),
            g = n("HZww"),
            f = n("oIkB"),
            v = n("HM6l"),
            b = n("6BvN"),
            k = n("5LoI"),
            y = n("MAZT"),
            S = n("uTyw"),
            _ = n("zCIC"),
            N = n("SZoP"),
            E = n("2KeS"),
            C = n("lK86"),
            T = n("Odds"),
            w = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    return !this.props.data || this.props.data.loading || !this.props.recipientLogin || this.props.data.user.self.canGift ? null : a.createElement(T._2, {
                        margin: {
                            top: 1
                        }
                    }, a.createElement(T._35, {
                        italic: !0,
                        color: T.I.Alt2,
                        "data-test-selector": "gift-eligibility-message-selector"
                    }, Object(c.d)("Sorry, a gift subscription to this channel is not available for this user.", "GiftRecipientIneligibleMessage")))
                }, t
            }(a.Component),
            O = Object(E.d)(Object(l.d)("GiftRecipientIneligibleMessage"), Object(u.a)(C, {
                options: function(e) {
                    return {
                        variables: {
                            recipientLogin: e.recipientLogin,
                            subProductId: e.subProductId
                        }
                    }
                },
                skip: function(e) {
                    return !e.recipientLogin || !e.subProductId
                }
            }))(w),
            I = n("daN3"),
            D = n("CwIZ"),
            P = (n("+YN9"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        selectedUser: null
                    }, t.reportGiftCheckoutAction = function() {
                        t.props.reportSubMenuAction({
                            action: D.a.BuyGiftSub,
                            checkoutButtonTier: t.props.selectedProductPrice,
                            giftRecipient: t.state.selectedUser ? t.state.selectedUser.login : null
                        })
                    }, t.onUserClick = function(e) {
                        for (var n = e.target; n.parentElement && !n.dataset.user_id;) n = n.parentElement;
                        n.dataset.user_id && n.dataset.user_login && n.dataset.user_name ? t.setState({
                            selectedUser: {
                                id: n.dataset.userId || "",
                                login: n.dataset.user_login || "",
                                name: n.dataset.user_name || ""
                            }
                        }) : t.setState({
                            selectedUser: null
                        })
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    (e.isWaiting || e.isErrored || !e.hasInput) && this.setState({
                        selectedUser: null
                    })
                }, t.prototype.render = function() {
                    var e;
                    return e = this.props.isWaiting ? a.createElement(T._2, {
                        fullHeight: !0
                    }, a.createElement(T._4, {
                        fillContent: !0
                    })) : this.props.hasInput ? this.props.isErrored ? this.getErrorMessage() : this.props.userResults && this.props.userResults.totalHits > 0 ? this.getUserResultContent() : this.getNoResultsMessage() : a.createElement(T._2, {
                        margin: 1
                    }, a.createElement(T._35, {
                        color: T.I.Alt2
                    }, Object(c.d)("Start typing to see a list of suggestions here.", "GiftRecipientSearchResult"))), a.createElement("div", {
                        onKeyDown: this.props.onKeyDown
                    }, a.createElement(T._25, {
                        className: "gift-recipient-search-result-view",
                        background: T.m.Alt,
                        position: T._9.Relative,
                        overflow: T._5.Hidden,
                        display: T.N.Block,
                        margin: {
                            bottom: 2
                        },
                        borderLeft: !0,
                        borderBottom: !0,
                        borderRight: !0
                    }, a.createElement(T.W, {
                        overflow: T._5.Hidden,
                        position: T._9.Relative
                    }, a.createElement(_.b, {
                        suppressScrollX: !0
                    }, a.createElement(T._2, null, e, a.createElement(_.a, {
                        enabled: !this.props.isWaiting && this.props.hasInput,
                        loadMore: this.props.loadMore
                    }))))), a.createElement(T._2, null, a.createElement(T._2, {
                        display: T.N.Flex,
                        alignItems: T.c.Center,
                        fullWidth: !0
                    }, this.getBuyGiftButton(), a.createElement(T.W, {
                        margin: {
                            x: 1
                        }
                    }, a.createElement(T._35, {
                        "data-test-selector": "gift-recipient-display-name-selector"
                    }, Object(c.d)("for {displayName}", {
                        displayName: a.createElement(T._35, {
                            bold: !0,
                            type: T._40.Span
                        }, this.getFormattedDisplayName())
                    }, "GiftRecipientCheckoutButton")))), a.createElement(O, {
                        subProductId: this.props.selectedProductId,
                        recipientLogin: this.state.selectedUser ? this.state.selectedUser.login : null
                    })))
                }, t.prototype.getBuyGiftButton = function() {
                    return a.createElement(I.a, {
                        subProductId: this.props.selectedProductId,
                        giftRecipient: this.state.selectedUser ? this.state.selectedUser.login : null,
                        checkoutURL: this.props.selectedProductURL,
                        onClick: this.reportGiftCheckoutAction
                    })
                }, t.prototype.getFormattedDisplayName = function() {
                    return this.state.selectedUser ? Object(N.a)(this.state.selectedUser.login, this.state.selectedUser.name) : ""
                }, t.prototype.getErrorMessage = function() {
                    return a.createElement(T._2, {
                        fullWidth: !0,
                        textAlign: T._36.Center,
                        justifyContent: T._1.Center
                    }, a.createElement(T._35, null, Object(c.d)("Something went wrong", "GiftRecipientSearchResult")))
                }, t.prototype.getUserResultContent = function() {
                    var e = this;
                    return this.props.userResults ? this.props.userResults.results.map(function(t) {
                        var n = Object(N.a)(t.login || "", t.name || "");
                        return a.createElement(T._0, {
                            tabIndex: -1,
                            "data-ts_selectable": !0,
                            "data-tt_content": !0,
                            key: "git-recipient-result__" + t.id,
                            "data-user_id": t.id,
                            "data-user_login": t.login,
                            "data-user_name": t.name,
                            onClick: e.onUserClick,
                            "data-test-selector": "subscribe-button__gift_search_result"
                        }, a.createElement(T._2, {
                            padding: .5
                        }, a.createElement(T.A, {
                            row: !0
                        }, a.createElement(T.C, {
                            alt: t.thumbnailAltText,
                            src: t.thumbnail ? t.thumbnail : "",
                            size: T.D.Size4,
                            aspect: T.k.Aspect1x1
                        }), a.createElement(T.B, {
                            overflow: T._5.Hidden
                        }, a.createElement(T.W, {
                            padding: {
                                x: 1
                            }
                        }, a.createElement(T._35, {
                            type: T._40.H5,
                            ellipsis: !0
                        }, n))))))
                    }) : a.createElement(T._8, null)
                }, t.prototype.getNoResultsMessage = function() {
                    return a.createElement(T._2, {
                        margin: 1
                    }, a.createElement(T._35, {
                        color: T.I.Alt2
                    }, Object(c.d)("No Results", "GiftRecipientSearchResult")))
                }, t = r.__decorate([Object(l.d)("GiftRecipientSearchResultPanel")], t)
            }(a.Component)),
            F = (n("m0Vj"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleChange = function(e) {
                        t.props.onChange(e.target.value)
                    }, t
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    if (this.props.selectedSubProduct) {
                        var e = null;
                        if (this.props.selectedSubProduct && this.props.selectedSubProduct.giftPromotion) {
                            var t = this.props.selectedSubProduct && this.props.selectedSubProduct.giftPromotion ? this.props.selectedSubProduct.giftPromotion : null;
                            e = a.createElement(T._35, {
                                bold: !0,
                                className: "subscription-gift-recipient-search__discount-message"
                            }, Object(c.d)("{price} (Save {percent})", {
                                price: t ? t.newPrice : "",
                                percent: Object(c.e)(t ? t.discountValue / 100 : 0, "percent")
                            }, "GiftRecipientSearch"))
                        }
                        return a.createElement(T._2, {
                            padding: 2,
                            className: "subscription-gift-recipient-search"
                        }, a.createElement(T._2, null, a.createElement(T._2, {
                            display: T.N.Flex,
                            justifyContent: T._1.Between,
                            alignItems: T.c.Center,
                            margin: {
                                bottom: 1
                            }
                        }, a.createElement(T._35, {
                            type: T._40.H4,
                            bold: !0
                        }, Object(c.d)("Choose a Gift Recipient", "GiftRecipientSearch")), a.createElement(T.u, {
                            type: T.z.Text,
                            "data-a-target": "subscribe-back-button",
                            icon: T._16.AngleLeft,
                            onClick: this.props.onBack,
                            "data-test-selector": "gift-recipient-search-back-button"
                        }, a.createElement(T._2, {
                            alignItems: T.c.Center,
                            display: T.N.InlineFlex
                        }, a.createElement(T._35, null, Object(c.d)("Back", "GiftRecipientSearch"))))), a.createElement(T._2, null, a.createElement(T._35, null, Object(c.d)("{subDisplayName}: {giftPrice} Gift Subscription (Single Month)", {
                            subDisplayName: this.props.selectedSubProduct ? this.props.selectedSubProduct.displayName : "",
                            giftPrice: this.props.selectedSubProduct ? this.props.selectedSubProduct.price : ""
                        }, "GiftRecipientSearch")), e, a.createElement(T._2, {
                            display: T.N.Flex,
                            justifyContent: T._1.Center,
                            padding: {
                                top: 1
                            },
                            fullWidth: !0
                        }, a.createElement(T.W, {
                            fullWidth: !0
                        }, a.createElement("div", null, a.createElement(T._18, {
                            onChange: this.handleChange,
                            onKeyDown: this.props.onKeyDown,
                            id: "gift-recipient-search",
                            placeholder: Object(c.d)("Search for a Twitch ID", "GiftRecipientSearch"),
                            "data-test-selector": "gift-recipient-search-input-selector"
                        }), a.createElement(P, {
                            hasInput: this.props.hasInput,
                            userResults: this.props.userResults,
                            isErrored: this.props.isErrored,
                            isWaiting: this.props.isWaiting,
                            loadMore: this.props.loadMore,
                            onKeyDown: this.props.onKeyDown,
                            selectedProductId: this.props.selectedSubProduct.id,
                            selectedProductURL: this.props.selectedSubProduct.url,
                            selectedProductPrice: this.props.selectedSubProduct.price,
                            reportSubMenuAction: this.props.reportSubMenuAction
                        })))))))
                    }
                    return a.createElement(T._8, null)
                }, t
            }(a.Component)),
            R = 50,
            x = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onChange = function(e) {
                        n.inputTimer && (clearTimeout(n.inputTimer), n.inputTimer = 0), e ? (n.setState({
                            isWaiting: !0
                        }), n.inputTimer = setTimeout(function() {
                            return n.doSearch(e)
                        }, R)) : n.setState(n.getEmptyState())
                    }, n.loadMore = function() {
                        return r.__awaiter(n, void 0, void 0, function() {
                            var e, t, n;
                            return r.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        if (this.state.queryID || !0 === this.state.exhaustedHits) return [2];
                                        e = this.state.currentPage + 1, i.label = 1;
                                    case 1:
                                        return i.trys.push([1, 3, , 4]), [4, this.searchClient.queryForType(k.a.Users, this.state.term, "", {
                                            page: e
                                        })];
                                    case 2:
                                        return t = i.sent(), [3, 4];
                                    case 3:
                                        return i.sent(), this.setState(r.__assign({}, this.getEmptyState(), {
                                            isErrored: !0,
                                            hasInput: !0
                                        })), [2];
                                    case 4:
                                        return t ? (n = Object(S.b)({
                                            searchResults: t,
                                            append: e > 0,
                                            currentUserResults: this.state.currentUserResults
                                        }), this.setState({
                                            currentUserResults: n.currentUserResults,
                                            term: this.state.term,
                                            hasInput: !0,
                                            isWaiting: !1,
                                            currentPage: e,
                                            exhaustedHits: n.exhaustedHits
                                        }), [2]) : (this.setState(r.__assign({}, this.getEmptyState(), {
                                            isErrored: !0,
                                            hasInput: !0
                                        })), [2])
                                }
                            })
                        })
                    }, n.onKeyDown = function(e) {
                        n.state.term && (e.keyCode === b.a.Esc ? n.setState({
                            hasInput: !1
                        }) : e.keyCode === b.a.Up ? n.focusNext(-1) : e.keyCode === b.a.Down && n.focusNext(1))
                    }, n.state = n.getEmptyState(), n.searchClient = new y.a(c.a.algoliaApplicationID, c.a.algoliaAPIKey), n
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(F, {
                        onChange: this.onChange,
                        loadMore: this.loadMore,
                        onKeyDown: this.onKeyDown,
                        userResults: this.state.currentUserResults,
                        hasInput: this.state.hasInput,
                        isErrored: this.state.isErrored,
                        isWaiting: this.state.isWaiting,
                        onBack: this.props.onBack,
                        selectedSubProduct: this.props.selectedSubProduct,
                        reportSubMenuAction: this.props.reportSubMenuAction
                    })
                }, t.prototype.getEmptyState = function() {
                    return {
                        currentUserResults: {
                            totalHits: 0,
                            results: []
                        },
                        term: "",
                        hasInput: !1,
                        isErrored: !1,
                        queryID: "",
                        isWaiting: !1,
                        currentPage: -1,
                        focusSelectable: !1,
                        exhaustedHits: !1
                    }
                }, t.prototype.doSearch = function(e) {
                    return r.__awaiter(this, void 0, void 0, function() {
                        var t, n, i, a, o;
                        return r.__generator(this, function(s) {
                            switch (s.label) {
                                case 0:
                                    this.inputTimer = 0, t = -1, n = v.a(), i = "INPUT" === document.activeElement.tagName, this.setState({
                                        queryID: n,
                                        focusSelectable: !i && !!this.state.currentFocus
                                    }), s.label = 1;
                                case 1:
                                    return s.trys.push([1, 3, , 4]), t = 0, [4, this.searchClient.queryForType(k.a.Users, e, n)];
                                case 2:
                                    return a = s.sent(), [3, 4];
                                case 3:
                                    return s.sent(), this.setState(r.__assign({}, this.getEmptyState(), {
                                        isErrored: !0,
                                        hasInput: !0,
                                        term: e
                                    })), [2];
                                case 4:
                                    return a ? this.state.queryID !== a.id ? [2] : (o = Object(S.b)({
                                        searchResults: a,
                                        append: !1
                                    }), this.setState(function(n) {
                                        return r.__assign({}, n, o, {
                                            queryID: "",
                                            term: e,
                                            hasInput: !0,
                                            isWaiting: !1,
                                            currentPage: t
                                        })
                                    }), [2]) : (this.setState(r.__assign({}, this.getEmptyState(), {
                                        isErrored: !0,
                                        hasInput: !0,
                                        term: e
                                    })), [2])
                            }
                        })
                    })
                }, t.prototype.focusNext = function(e) {
                    var t, n = document.querySelectorAll("[data-ts_selectable=true]"),
                        i = document.activeElement,
                        r = Array.prototype.indexOf.call(n, i);
                    if ((t = r < 0 ? e > 0 ? 0 : n.length - 1 : r + e) < 0 && (t = 0), !(t >= n.length)) {
                        var a = n.item(t);
                        a.focus(), a.tabIndex = 0, this.state.currentFocus && (this.state.currentFocus.tabIndex = -1), this.setState({
                            currentFocus: a
                        })
                    }
                }, t = r.__decorate([Object(l.d)("GiftRecipientSearch")], t)
            }(a.Component),
            L = n("37Pp"),
            U = n("YEG/"),
            M = n("jYA1"),
            A = n("FDYX"),
            j = function(e) {
                var t = null,
                    n = null,
                    i = null,
                    r = e.subscriptionProducts[0].price;
                if (Object(A.d)(e.subscriptionProducts) && (r = Object(A.a)(e.subscriptionProducts[0])), e.channelLogin && (e.inPrimeRegion || e.userHasPrime)) {
                    var o = e.userHasPrime ? Object(c.d)("Use your free channel subscription to directly support your favorite streamer. {upsellTextLink}", {
                        upsellTextLink: a.createElement("a", {
                            href: "https://help.twitch.tv/customer/en/portal/articles/2572060-twitch-prime-guide",
                            target: "_blank"
                        }, Object(c.d)("Learn more about your free sub", "NonSubbedTopPage"))
                    }, "NonSubbedTopPage") : Object(c.d)("{upsellTextBold}, plus get free game loot every month, ad-free viewing, and loads more with Twitch Prime.", {
                        upsellTextBold: a.createElement("strong", null, Object(c.d)("Support your favorite streamer", "NonSubbedTopPage"))
                    }, "NonSubbedTopPage");
                    i = a.createElement(T._2, {
                        margin: {
                            bottom: 2
                        }
                    }, a.createElement(T._2, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(T._35, {
                        type: T._40.H4,
                        bold: !0
                    }, Object(c.d)("Free Channel Sub with Twitch Prime", "NonSubbedTopPage"))), a.createElement(T._2, null, a.createElement(T._2, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(T._35, null, o)), a.createElement(M.a, {
                        authToken: e.authToken,
                        "data-a-target": "subscribe-with-prime-button",
                        isSubscribed: !1,
                        isSubscribedWithPrime: !1,
                        onSubscribedWithPrime: e.onSubscribedWithPrime,
                        reportSubMenuAction: e.reportSubMenuAction,
                        subLogin: e.channelLogin,
                        userHasPrime: e.userHasPrime,
                        canPrimeSubscribe: e.canPrimeSubscribe
                    })))
                }
                if (!e.isNonStandardSub) {
                    var s = Object(c.d)("More Paid Subscription Options", "NonSubbedTopPage");
                    t = a.createElement(T._2, {
                        margin: {
                            right: 1
                        },
                        display: T.N.Inline
                    }, a.createElement(T.u, {
                        ariaLabel: s,
                        onClick: e.showSubOptions,
                        type: T.z.Hollow,
                        "data-test-selector": "subscribe-button__more-sub-options-button",
                        "data-a-target": "see-more-sub-options-button"
                    }, s));
                    var l = Object(c.d)("Gift a Subscription", "NonSubbedTopPage");
                    n = a.createElement(T._2, {
                        display: T.N.Inline
                    }, a.createElement(T.u, {
                        ariaLabel: l,
                        onClick: e.showGiftOptions,
                        type: T.z.Hollow,
                        "data-test-selector": "subscribe-button__gift"
                    }, l))
                }
                return a.createElement(T._2, {
                    padding: 2
                }, i, a.createElement(T._2, null, a.createElement(T._35, {
                    type: T._40.H4,
                    bold: !0
                }, Object(c.d)("Paid Subscription", "NonSubbedTopPage")), a.createElement(L.a, {
                    subscriptionProduct: e.subscriptionProducts[0]
                }), a.createElement(T._2, {
                    display: T.N.Flex
                }, a.createElement(T._2, {
                    margin: {
                        right: 1,
                        top: 1
                    }
                }, a.createElement(U.a, {
                    isSubbedToTier: !1,
                    tierPrice: r,
                    "data-a-target": "tier1-subscribe-button",
                    reportSubAction: e.handleTopPageSubButtonClick,
                    url: e.subscriptionProducts[0].url
                })))), a.createElement(T._2, {
                    margin: {
                        right: 1,
                        top: 2
                    }
                }, t, n))
            },
            W = n("YH6m"),
            B = function(e) {
                return a.createElement(T._2, {
                    padding: 2
                }, a.createElement(T._2, null, a.createElement(T._2, {
                    display: T.N.Flex,
                    justifyContent: T._1.Between,
                    alignItems: T.c.Center,
                    fullWidth: !0
                }, a.createElement(T._35, {
                    type: T._40.H4,
                    bold: !0
                }, e.header), a.createElement(T.u, {
                    type: T.z.Text,
                    "data-a-target": "subscribe-back-button",
                    "data-test-selector": "subscribe-button__back-button",
                    icon: T._16.AngleLeft,
                    onClick: e.onBack
                }, a.createElement(T._2, {
                    alignItems: T.c.Center,
                    display: T.N.InlineFlex
                }, a.createElement(T._35, null, Object(c.d)("Back", "PaidSubOptions"))))), a.createElement(W.a, {
                    canPrimeSubscribe: !1,
                    channelDisplayName: e.channelDisplayName,
                    isSubscribed: e.isSubscribed,
                    onSelectTierTab: e.onSelectTierTab,
                    isGift: e.isGift,
                    onGiftSelect: e.onGiftSelect,
                    giftRecipient: e.giftRecipient,
                    reportSubMenuAction: e.reportSubMenuAction,
                    subscriptionProducts: e.subscriptionProducts,
                    userHasPrime: !1
                })))
            },
            G = n("pQNb"),
            H = (n("DquS"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.subbedTier !== m.a.Tier3 ? Object(c.d)("Change Your Subscription", "SubbedTopPage") : this.getSubbedHeader(),
                        t = a.createElement(T._2, null, a.createElement(T._35, {
                            type: T._40.H4,
                            bold: !0
                        }, e), a.createElement(W.a, {
                            authToken: this.props.authToken,
                            onSubscribedWithPrime: this.props.onSubscribedWithPrime,
                            subLogin: this.props.channelLogin,
                            userHasPrime: this.props.userHasPrime,
                            canPrimeSubscribe: this.props.canPrimeSubscribe,
                            channelDisplayName: this.props.channelDisplayName,
                            onSelectTierTab: this.props.onSelectTierTab,
                            subbedTier: this.props.subbedTier,
                            subscriptionProducts: this.props.subscriptionProducts,
                            reportSubMenuAction: this.props.reportSubMenuAction,
                            onGiftSelect: this.props.showRecipientSelect,
                            isSubscribed: !0
                        })),
                        n = this.getGiftSection();
                    return a.createElement(T._2, {
                        className: "channel-header__subscription-modal-main",
                        padding: 2
                    }, n, !this.props.isGift && t)
                }, t.prototype.getGiftSection = function() {
                    return this.props.giftSender ? this.props.giftSender && !this.props.giftPaidUpgrade ? a.createElement(T._2, null, a.createElement(T._2, {
                        margin: {
                            bottom: 2
                        }
                    }, this.getGiftInfoSection()), this.getGiftExtendSection()) : a.createElement(T._2, null, a.createElement(T._2, {
                        margin: {
                            bottom: 2
                        }
                    }, this.getGiftInfoSection()), this.getTopPageGiftSection()) : a.createElement(T._2, {
                        margin: {
                            bottom: 2
                        }
                    }, this.getTopPageGiftSection())
                }, t.prototype.getGiftInfoSection = function() {
                    var e, t, n = null;
                    return this.props.giftPaidUpgrade ? (e = this.getSubbedHeader(), t = Object(c.d)("{giftPrice} Gift Subscription from {giftSender}", {
                        giftPrice: this.getCurrentSubPrice(),
                        giftSender: a.createElement(T._35, {
                            bold: !0,
                            type: T._40.Span
                        }, this.props.giftSender || "")
                    }, "SubbedTopPage"), n = Object(c.d)("Your new {upgradePrice} Paid Subscription will begin on {subStartDate}", {
                        upgradePrice: this.props.giftPaidUpgrade ? this.props.giftPaidUpgrade.price : "",
                        subStartDate: this.getFormattedGiftUpgradeStartDate()
                    }, "SubbedTopPage")) : (e = Object(c.d)("Your Gift Subscription", "SubbedTopPage"), t = Object(c.d)("{giftPrice} Subscription from {giftSender} - Benefits expire on {giftEndDate}", {
                        giftPrice: this.getCurrentSubPrice(),
                        giftSender: a.createElement(T._35, {
                            bold: !0,
                            type: T._40.Span
                        }, this.props.giftSender || ""),
                        giftEndDate: this.getFormattedGiftEndDate()
                    }, "SubbedTopPage")), a.createElement(T._2, null, a.createElement(T._35, {
                        bold: !0,
                        type: T._40.H4
                    }, e), a.createElement(T.W, {
                        margin: {
                            y: 1
                        }
                    }, a.createElement(T._35, null, t)), a.createElement(T._35, {
                        className: "balloon-subscribed-user__gift-upgrade-info",
                        bold: !0
                    }, n))
                }, t.prototype.getGiftExtendSection = function() {
                    var e, t = null;
                    if (!this.props.isNonStandardSub) {
                        var n = Object(c.d)("More Paid Subscription Options", "SubbedTopPage");
                        t = a.createElement(T._2, {
                            margin: {
                                right: 1
                            },
                            display: T.N.Inline
                        }, a.createElement(T.u, {
                            ariaLabel: n,
                            onClick: this.props.showSubOptions,
                            type: T.z.Hollow,
                            "data-a-target": "see-more-sub-options-button"
                        }, n))
                    }
                    var i = this.getGiftMessage();
                    return e = a.createElement(T._2, {
                        display: T.N.Inline
                    }, a.createElement(T.u, {
                        "data-test-selector": "subscribe-button__gift",
                        ariaLabel: i,
                        onClick: this.props.showGiftOptions,
                        type: T.z.Hollow
                    }, i)), a.createElement(T._2, null, a.createElement(T._2, {
                        margin: {
                            top: 1
                        }
                    }, a.createElement(T._35, {
                        type: T._40.H4,
                        bold: !0
                    }, Object(c.d)("Extend Your Subscription", "SubbedTopPage")), a.createElement(T.W, {
                        margin: {
                            top: 1
                        }
                    }, a.createElement(T._35, null, Object(c.d)("{price} / Month", {
                        price: this.props.subscriptionProducts[0].price
                    }, "SubbedTopPage"))), a.createElement(T._2, {
                        margin: {
                            right: 1,
                            top: 1
                        }
                    }, a.createElement(T.u, {
                        ariaLabel: this.props.subscriptionProducts[0].price,
                        "data-a-target": "tier1-subscribe-button",
                        linkTo: this.props.subscriptionProducts[0].url,
                        onClick: this.props.handleTopPageSubButtonClick,
                        purchase: this.props.subscriptionProducts[0].price,
                        targetBlank: !0
                    }, Object(c.d)("Subscribe Now", "SubbedTopPage")))), a.createElement(T._2, {
                        margin: {
                            right: 1,
                            top: 2
                        }
                    }, t, e))
                }, t.prototype.getTopPageGiftSection = function() {
                    var e = this.props.subscriptionProducts[0].price;
                    Object(A.c)(this.props.subscriptionProducts) && (e = Object(A.a)(this.props.subscriptionProducts[0], !0));
                    var t = this.getGiftMessage(),
                        n = Object(c.d)("More Gift Options", "SubbedTopPage");
                    return a.createElement(T._2, null, a.createElement(T._35, {
                        type: T._40.H4,
                        bold: !0
                    }, Object(c.d)("Help Grow {streamer}'s Community", {
                        streamer: this.props.channelDisplayName
                    }, "SubbedTopPage")), a.createElement(T._2, {
                        margin: {
                            top: 1,
                            bottom: 1
                        },
                        display: T.N.Flex
                    }, a.createElement(T.u, {
                        ariaLabel: t + " " + e,
                        onClick: this.props.onGiftSelect,
                        purchase: e
                    }, t), a.createElement(T._2, {
                        margin: {
                            left: 1
                        }
                    }, a.createElement(T.u, {
                        ariaLabel: n,
                        onClick: this.props.showGiftOptions,
                        type: T.z.Hollow
                    }, n))))
                }, t.prototype.getFormattedGiftUpgradeStartDate = function() {
                    var e = "";
                    if (this.props.giftPaidUpgrade && this.props.giftPaidUpgrade.startsAt) try {
                        e = Object(c.c)(new Date(this.props.giftPaidUpgrade.startsAt), {
                            month: "long",
                            day: "numeric"
                        })
                    } catch (t) {
                        c.i.debug(t, "There was an error formatting gift upgrade start date."), e = ""
                    }
                    return e
                }, t.prototype.getFormattedGiftEndDate = function() {
                    var e = "";
                    if (this.props.giftSubEndDate) try {
                        e = Object(c.c)(new Date(this.props.giftSubEndDate), {
                            month: "long",
                            day: "numeric"
                        })
                    } catch (t) {
                        c.i.debug(t, "There was an error formatting gift end date."), e = ""
                    }
                    return e
                }, t.prototype.getCurrentSubPrice = function() {
                    switch (this.props.subbedTier) {
                        case m.a.Tier1:
                            return this.props.subscriptionProducts[0].price;
                        case m.a.Tier2:
                            return this.props.subscriptionProducts[1].price;
                        case m.a.Tier3:
                            return this.props.subscriptionProducts[2].price;
                        default:
                            return this.props.subscriptionProducts[0].price
                    }
                }, t.prototype.getSubbedHeader = function() {
                    return Object(c.d)("Your Subscription", "SubbedTopPage")
                }, t.prototype.getGiftMessage = function() {
                    return Object(c.d)("Gift A Subscription", "SubbedTopPage")
                }, t
            }(a.Component));
        ! function(e) {
            e[e.Top = 0] = "Top", e[e.SubOptions = 1] = "SubOptions", e[e.GiftOptions = 2] = "GiftOptions", e[e.RecipientSelect = 3] = "RecipientSelect"
        }(i || (i = {}));
        n("UKw0");
        var V = n("+p4h"),
            z = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        currentPage: i.Top,
                        selectedSubProductIndex: 0,
                        giftShortcut: !1
                    }, t.showTop = function() {
                        t.setState(function() {
                            return {
                                currentPage: i.Top
                            }
                        })
                    }, t.showRecipientSelect = function() {
                        t.setState(function() {
                            return {
                                currentPage: i.RecipientSelect
                            }
                        })
                    }, t.showGiftOptions = function() {
                        t.props.reportSubMenuAction({
                            action: D.a.ClickGiftSubOptions,
                            modalLevel: "second_page"
                        }), t.setState(function() {
                            return {
                                currentPage: i.GiftOptions
                            }
                        })
                    }, t.showSubOptions = function() {
                        t.props.reportSubMenuAction({
                            action: D.a.ClickMoreSubOptions,
                            modalLevel: "second_page"
                        }), t.setState(function() {
                            return {
                                currentPage: i.SubOptions
                            }
                        })
                    }, t.goToPreviousPage = function() {
                        if (t.props.reportSubMenuAction({
                                action: D.a.ClickBack,
                                modalLevel: t.state.currentPage === i.SubOptions || t.state.currentPage === i.GiftOptions ? "top_page" : "second_page"
                            }), t.state.currentPage === i.GiftOptions || t.state.currentPage === i.SubOptions || t.state.giftShortcut) return t.showTop(), void t.setState({
                            giftShortcut: !1
                        });
                        t.state.currentPage !== i.RecipientSelect || t.showGiftOptions()
                    }, t.onGiftSelect = function() {
                        if (!t.props.data.user || !t.props.data.user.subscriptionProducts) return null;
                        t.state.currentPage === i.Top ? t.setState({
                            giftShortcut: !0,
                            selectedSubProductIndex: 0
                        }) : t.setState({
                            giftShortcut: !1
                        }), t.props.reportSubMenuAction({
                            action: D.a.GiftASub,
                            checkoutButtonTier: t.props.data.user.subscriptionProducts[t.state.selectedSubProductIndex].price
                        }), t.showRecipientSelect()
                    }, t.onSelectTierTab = function(e) {
                        if (!t.props.data.user || !t.props.data.user.subscriptionProducts) return null;
                        var n, i;
                        t.tabToSubProduct || (t.tabToSubProduct = (n = t.props.data.user.subscriptionProducts, (i = new Map).set(W.b.Prime, null), n.forEach(function(e, t) {
                            i.set(t + 1, e)
                        }), i));
                        var r = t.tabToSubProduct.get(e);
                        if (r) {
                            var a = t.props.data.user.subscriptionProducts.findIndex(function(e) {
                                return e.price === r.price
                            });
                            a !== t.state.selectedSubProductIndex && t.setState({
                                selectedSubProductIndex: a
                            }), t.props.onSelectTierTab(r.price)
                        } else t.props.onSelectTierTab(m.a.Prime)
                    }, t.handleTopPageSubButtonClick = function() {
                        if (!t.props.data.user || !t.props.data.user.subscriptionProducts) return null;
                        t.props.reportSubMenuAction({
                            action: D.a.ClickCheckout,
                            checkoutButtonTier: t.props.data.user.subscriptionProducts[0].price
                        })
                    }, t.onSubscribedWithPrime = function() {
                        t.props.onSubscribedWithPrime(), Object(f.d)(V, {
                            login: t.props.channelLogin
                        }, function(e) {
                            return e.user && e.user.self && (e.user.self.canPrimeSubscribe = !1, e.user.self.subscriptionBenefit = {
                                id: Object(v.a)(),
                                purchasedWithPrime: !0,
                                tier: m.a.Prime,
                                endsAt: null,
                                paidUpgrade: null,
                                gift: {
                                    isGift: !1,
                                    gifter: null,
                                    __typename: "SubscriptionGift"
                                },
                                __typename: "SubscriptionBenefit"
                            }), e
                        })
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    e.channelLogin !== this.props.channelLogin && this.setState({
                        currentPage: i.Top,
                        selectedSubProductIndex: 0,
                        giftShortcut: !1
                    })
                }, t.prototype.render = function() {
                    if (this.props.data.loading) return c.i.debug("NOT rendering sub balloon; sub data not yet ready", {
                        state: this.state
                    }), a.createElement(T._2, {
                        display: T.N.Flex,
                        alignItems: T.c.Center,
                        justifyContent: T._1.Center,
                        className: "channel-header__subscription-modal"
                    }, a.createElement(T._4, {
                        fillContent: !0
                    }));
                    if (!this.props.data.user || !this.props.data.user.subscriptionProducts) return c.i.debug("NOT rendering sub balloon; sub data not yet ready", {
                        state: this.state
                    }), null;
                    c.i.debug("rendering balloon", {
                        state: this.state
                    });
                    var e, t = a.createElement(T._8, null),
                        n = !1,
                        r = this.props.data.user.subscriptionProducts,
                        o = !0;
                    switch (this.state.currentPage) {
                        case i.Top:
                            if (!this.props.isSubscribed) {
                                e = this.getUnsubbedTopPage();
                                break
                            }
                            e = this.getSubbedTopPage(), n = !0;
                            break;
                        case i.SubOptions:
                            if (this.props.isSubscribed) {
                                e = this.getPaidOptionsPage(!0), o = !1;
                                break
                            }
                            e = this.getPaidOptionsPage(!1);
                            break;
                        case i.GiftOptions:
                            e = this.getGiftOptionsPage(), n = !0;
                            break;
                        case i.RecipientSelect:
                            e = this.getGiftRecipientSearchPage(), r = [r[this.state.selectedSubProductIndex]], n = !0;
                            break;
                        default:
                            if (!this.props.isSubscribed) {
                                e = this.getUnsubbedTopPage();
                                break
                            }
                            e = this.getSubbedTopPage(), n = !0
                    }
                    return o && (t = a.createElement(G.a, {
                        subscriptionProducts: r,
                        isGift: n
                    })), a.createElement(T._2, {
                        key: "subscribe-balloon"
                    }, t, e)
                }, t.prototype.getGiftRecipientSearchPage = function() {
                    return this.props.data.user && this.props.data.user.subscriptionProducts ? a.createElement(x, {
                        key: "gift-recipient-search-page",
                        onBack: this.goToPreviousPage,
                        selectedSubProduct: this.props.data.user.subscriptionProducts[this.state.selectedSubProductIndex],
                        reportSubMenuAction: this.props.reportSubMenuAction
                    }) : null
                }, t.prototype.getGiftOptionsPage = function() {
                    return this.props.data.user && this.props.data.user.subscriptionProducts ? a.createElement(B, {
                        onBack: this.goToPreviousPage,
                        channelDisplayName: this.props.data.user.displayName,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        subscriptionProducts: this.props.data.user.subscriptionProducts,
                        isGift: !0,
                        onGiftSelect: this.onGiftSelect,
                        isSubscribed: !1,
                        header: Object(c.d)("Choose A Gift Subscription", "SubscribeBalloon")
                    }) : null
                }, t.prototype.getPaidOptionsPage = function(e) {
                    return this.props.data.user && this.props.data.user.subscriptionProducts ? a.createElement(B, {
                        onBack: this.goToPreviousPage,
                        channelDisplayName: this.props.data.user.displayName,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        subscriptionProducts: this.props.data.user.subscriptionProducts,
                        isSubscribed: e,
                        header: Object(c.d)("All Paid Subscriptions", "SubscribeBalloon")
                    }) : null
                }, t.prototype.getSubbedTopPage = function() {
                    if (!this.props.data.user || !this.props.data.user.self || !this.props.data.user.self.subscriptionBenefit) return null;
                    var e = this.props.data.user.self.subscriptionBenefit.gift,
                        t = e && e.isGift ? e.gifter.displayName : null,
                        n = !(!e || !e.isGift);
                    return a.createElement(H, {
                        authToken: this.props.authToken,
                        channelLogin: this.props.channelLogin,
                        channelDisplayName: this.props.data.user.displayName,
                        canPrimeSubscribe: !!this.props.data.user.self && this.props.data.user.self.canPrimeSubscribe,
                        isGift: n,
                        handleTopPageSubButtonClick: this.handleTopPageSubButtonClick,
                        isNonStandardSub: this.props.isNonStandardSub,
                        giftSubEndDate: this.props.data.user.self.subscriptionBenefit.endsAt,
                        giftPaidUpgrade: this.props.data.user.self.subscriptionBenefit.paidUpgrade,
                        onGiftSelect: this.onGiftSelect,
                        onSelectTierTab: this.onSelectTierTab,
                        onSubscribedWithPrime: this.onSubscribedWithPrime,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        showGiftOptions: this.showGiftOptions,
                        showSubOptions: this.showSubOptions,
                        showRecipientSelect: this.showRecipientSelect,
                        subbedTier: this.props.subbedTier,
                        giftSender: t,
                        subscriptionProducts: this.props.data.user ? this.props.data.user.subscriptionProducts : [],
                        userHasPrime: !!this.props.data.currentUser && this.props.data.currentUser.hasPrime
                    })
                }, t.prototype.getUnsubbedTopPage = function() {
                    return this.props.data.user ? a.createElement(j, {
                        authToken: this.props.authToken,
                        channelLogin: this.props.channelLogin,
                        canPrimeSubscribe: !!this.props.data.user.self && this.props.data.user.self.canPrimeSubscribe,
                        handleTopPageSubButtonClick: this.handleTopPageSubButtonClick,
                        inPrimeRegion: this.props.inPrimeRegion,
                        isNonStandardSub: this.props.isNonStandardSub,
                        onSubscribedWithPrime: this.onSubscribedWithPrime,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        showGiftOptions: this.showGiftOptions,
                        showSubOptions: this.showSubOptions,
                        subscriptionProducts: this.props.data.user ? this.props.data.user.subscriptionProducts : [],
                        userHasPrime: !!this.props.data.currentUser && this.props.data.currentUser.hasPrime
                    }) : null
                }, t = r.__decorate([Object(u.a)(V, {
                    options: function(e) {
                        return {
                            fetchPolicy: "network-only",
                            variables: {
                                login: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(l.d)("SubscribeBalloon")], t)
            }(a.Component),
            q = n("4MRZ"),
            Q = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        activeTierPrice: null,
                        inPrimeRegion: !1
                    }, t.modalLevel = "top_page", t.reportSubMenuAction = function(e) {
                        var n = !!(t.props.data.user && t.props.data.user.self && t.props.data.user.self.subscriptionBenefit),
                            i = t.props.data.requestInfo && Object(h.a)(t.props.data.requestInfo.countryCode);
                        Object(D.b)({
                            action: e.action || "",
                            channelLogin: t.props.channelLogin || "",
                            channelID: t.props.data && t.props.data.user.id,
                            checkoutButtonTier: e.checkoutButtonTier || (t.state.activeTierPrice || m.a.Prime).slice(),
                            hasSubCredit: !!t.props.data.user.self && t.props.data.user.self.canPrimeSubscribe,
                            hostChannelID: t.props.hostChannelID,
                            hostChannelLogin: t.props.hostChannelLogin,
                            isMenuOpen: !(e.action === D.a.OpenSubMenu),
                            sub_location: "channel_page",
                            modal: !n,
                            modalLevel: n ? "" : t.modalLevel.slice(),
                            showPrimeContent: i,
                            giftRecipient: e.giftRecipient || null
                        }), !e.modalLevel || e.action !== D.a.ClickMoreSubOptions && e.action !== D.a.ClickBack || (t.modalLevel = e.modalLevel, t.setState({
                            activeTierPrice: m.a.Prime
                        }))
                    }, t.handleMenuToggle = function(e) {
                        t.reportSubMenuAction({
                            action: e ? D.a.CloseSubMenu : D.a.OpenSubMenu
                        })
                    }, t.onSelectTierTab = function(e) {
                        t.state.activeTierPrice !== e && t.setState({
                            activeTierPrice: e
                        })
                    }, t.onSubscribedWithPrime = function() {
                        t.reportSubMenuAction({
                            action: D.a.SubWithPrime
                        }), t.modalLevel = ""
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentWillUnmount = function() {
                    this.props.reportInteractive()
                }, t.prototype.componentDidMount = function() {
                    this.props.reportInteractive && this.isUserDataReady(this.props) && this.props.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.props.channelLogin && !this.isUserDataReady(this.props) || !this.props.updateContainerWidth || this.props.updateContainerWidth(), this.props.reportInteractive && this.props.data && !this.props.data.loading && this.props.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.isUserDataReady(e) && e.pubsub.messages.subscriptionInfo !== this.props.pubsub.messages.subscriptionInfo && this.props.data.refetch()
                }, t.prototype.render = function() {
                    if (!this.isUserDataReady(this.props) || !this.hasSubscriptionProducts(this.props)) return null;
                    var e, t = this.props.data.requestInfo && Object(h.a)(this.props.data.requestInfo.countryCode),
                        n = !!(this.props.data.user && this.props.data.user.self && this.props.data.user.self.subscriptionBenefit),
                        i = 1 === this.props.data.user.subscriptionProducts.length,
                        r = null;
                    if (this.props.data.user.self && this.props.data.user.self.subscriptionBenefit && (r = this.props.data.user.self.subscriptionBenefit.purchasedWithPrime ? m.a.Prime : this.props.data.user.self.subscriptionBenefit.tier, this.modalLevel = ""), this.props.data.user.subscriptionProducts.some(this.isSubscriptionProductInvalid) && (i = !0), n) {
                        var o = i ? Object(c.d)("Subscribed", "SubscribeButton") : Object(c.d)("Gift A Sub", "SubscribeButton");
                        if (e = this.props.hostChannelID ? Object(c.d)("Subscribed to {username}", {
                                username: this.props.data.user.displayName
                            }, "SubscribeButton") : o, i) return a.createElement(T.u, {
                            disabled: !0,
                            ariaLabel: e,
                            icon: T._16.Star
                        }, e)
                    } else e = this.props.hostChannelID ? Object(c.d)("Subscribe to {username}", {
                        username: this.props.data.user.displayName
                    }, "SubscribeButton") : Object(c.d)("Subscribe", "SubscribeButton");
                    var s = r === m.a.Prime ? T._16.Crown : T._16.Star,
                        l = n ? "subscribed-button" : "subscribe-button",
                        u = a.createElement(T.u, {
                            "data-a-target": l,
                            "data-test-selector": "subscribe-button__dropdown",
                            ariaLabel: e,
                            type: n ? T.z.Success : T.z.Default,
                            dropdown: !0,
                            icon: n ? s : void 0
                        }, e),
                        p = this.props.hostChannelID ? T.q.TopLeft : T.q.BottomRight;
                    return a.createElement(d.a, {
                        onToggle: this.handleMenuToggle
                    }, u, a.createElement(T.p, {
                        size: T.r.Large,
                        direction: p,
                        "data-a-target": "sub-balloon"
                    }, a.createElement(z, {
                        authToken: this.props.authToken,
                        channelLogin: this.props.channelLogin || "",
                        inPrimeRegion: t,
                        isNonStandardSub: i,
                        onSelectTierTab: this.onSelectTierTab,
                        onSubscribedWithPrime: this.onSubscribedWithPrime,
                        reportSubMenuAction: this.reportSubMenuAction,
                        subbedTier: r || m.a.Prime,
                        userHasPrime: !1,
                        isSubscribed: n
                    })))
                }, t.prototype.hasSubscriptionProducts = function(e) {
                    return e.data.user.subscriptionProducts && e.data.user.subscriptionProducts.length > 0
                }, t.prototype.isUserDataReady = function(e) {
                    return e.data && e.data.user && !e.data.loading && !e.data.error
                }, t.prototype.isSubscriptionProductInvalid = function(e) {
                    return !e.emoteSetID
                }, t = r.__decorate([Object(u.a)(q, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(p.a)([{
                    topic: function(e) {
                        return Object(g.v)(e.data.currentUser && e.data.currentUser.id || "")
                    },
                    mapMessageTypesToProps: {
                        "*": "subscriptionInfo"
                    },
                    skip: function(e) {
                        return !(e.data && !e.data.loading && !e.data.error && e.data.currentUser)
                    }
                }])], t)
            }(a.Component),
            K = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.reportInteractive = function() {
                        t.props.latencyTracking.reportInteractive()
                    }, t
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(Q, {
                        authToken: this.props.authToken,
                        hostChannelID: this.props.hostChannelID,
                        hostChannelLogin: this.props.hostChannelLogin,
                        channelLogin: this.props.channelLogin,
                        updateContainerWidth: this.props.updateContainerWidth,
                        reportInteractive: this.reportInteractive
                    })
                }, t = r.__decorate([Object(l.d)("SubscribeButton")], t)
            }(a.Component);
        var $ = Object(o.b)(function(e) {
            return {
                authToken: Object(s.a)(e)
            }
        })(K);
        n.d(t, !1, function() {
            return K
        }), n.d(t, "a", function() {
            return $
        }), n.d(t, !1, function() {
            return "subscribe-button__dropdown"
        }), n.d(t, !1, function() {
            return Q
        })
    },
    "7B9K": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "UserEmotes"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "emoteSets"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 76
            }
        };
        n.loc.source = {
            body: "query UserEmotes {\ncurrentUser {\nid\nemoteSets {\nid\nemotes {\nid\ntoken\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "7LIQ": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("HW6M"),
            a = n("GiK3"),
            o = n("6sO2"),
            s = n("CSlQ"),
            l = n("Odds"),
            c = (n("VkpB"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = r("emote-picker__emote-link", {
                            "emote-picker__emote-link--locked": this.props.locked
                        }),
                        n = a.createElement(l._25, {
                            alignItems: l.c.Center,
                            background: l.m.Overlay,
                            borderRadius: l.s.Small,
                            className: "emote-picker__emote-lock",
                            color: l.I.Overlay,
                            display: l.N.InlineFlex,
                            justifyContent: l._1.Center,
                            position: l._9.Absolute,
                            zIndex: l._52.Above
                        }, a.createElement(l._15, {
                            asset: l._16.Lock,
                            height: 10,
                            width: 10
                        })),
                        i = this.props.emoteSet.emotes.map(function(i, r) {
                            if (!i.srcSet) return null;
                            var c = a.createElement("img", {
                                srcSet: i.srcSet,
                                alt: i.displayName
                            });
                            if (0 === r) {
                                var d = i.srcSet.split(" ")[0];
                                c = a.createElement(s.b, {
                                    src: d,
                                    srcSet: i.srcSet,
                                    alt: i.displayName
                                })
                            }
                            return a.createElement("div", {
                                key: i.id,
                                className: "emote-picker__emote"
                            }, a.createElement(l._43, {
                                label: i.displayName || Object(o.d)("Emote", "EmoteGrid"),
                                direction: l._45.Bottom
                            }, a.createElement(l.W, {
                                display: l.N.Flex,
                                alignItems: l.c.Center,
                                justifyContent: l._1.Center
                            }, a.createElement("button", {
                                className: t,
                                name: i.displayName,
                                onClick: e.props.locked ? void 0 : e.handleClickEmote.bind(e, i.id),
                                "data-a-target": i.displayName
                            }, a.createElement("figure", {
                                className: "emote-picker__emote-figure"
                            }, e.props.locked ? n : null, c)))))
                        });
                    return a.createElement(l._2, {
                        display: l.N.Flex,
                        flexWrap: l.Q.Wrap,
                        justifyContent: l._1.Center
                    }, i)
                }, t.prototype.handleClickEmote = function(e, t) {
                    this.props.onClickEmote && this.props.onClickEmote(t.currentTarget.name, e)
                }, t
            }(a.Component));
        n.d(t, "a", function() {
            return c
        })
    },
    "7dPO": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FriendButton_UnfriendUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnfriendUserInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "unfriendUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 110
            }
        };
        n.loc.source = {
            body: "mutation FriendButton_UnfriendUser($input: UnfriendUserInput!) {\nunfriendUser(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "7iNp": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FriendButton"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "friends"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 75
            }
        };
        n.loc.source = {
            body: "query FriendButton {\ncurrentUser {\nid\nfriends {\nedges {\nnode {\nid\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "7miU": function(e, t, n) {
        "use strict";
        var i = n("P0T5");
        n.d(t, "a", function() {
            return i.b
        }), n.d(t, "b", function() {
            return i.c
        }), n.d(t, "c", function() {
            return i.d
        }), n.d(t, "d", function() {
            return i.e
        }), n.d(t, "e", function() {
            return i.f
        }), n.d(t, "f", function() {
            return i.g
        }), n.d(t, "g", function() {
            return i.h
        }), n.d(t, "h", function() {
            return i.i
        }), n.d(t, "i", function() {
            return i.j
        }), n.d(t, "j", function() {
            return i.k
        }), n.d(t, "k", function() {
            return i.m
        }), n.d(t, "l", function() {
            return i.p
        }), n.d(t, "m", function() {
            return i.q
        })
    },
    "7rq1": function(e, t) {},
    "7tMz": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("75D5");

        function o(e) {
            return {
                latencyTracking: function(e, t) {
                    return new a.a(e, t)
                }(e),
                rootLatencyTracker: s()
            }
        }

        function s() {
            return new a.a("Root")
        }
        n("MRMr");

        function l(e, t) {
            return function(t) {
                return function(n) {
                    function a() {
                        return null !== n && n.apply(this, arguments) || this
                    }
                    return i.__extends(a, n), a.prototype.render = function() {
                        return r.createElement(t, i.__assign({}, this.props, o(e)))
                    }, a
                }(r.Component)
            }
        }
        n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "a", function() {
            return l
        })
    },
    "82Ta": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Thread_ReportUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportWhisperThreadInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "reportWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 118
            }
        };
        n.loc.source = {
            body: "mutation Thread_ReportUser($input: ReportWhisperThreadInput!) {\nreportWhisperThread(input: $input) {\nthread {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "8RKZ": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("HW6M"),
            a = n("GiK3"),
            o = n("qe65"),
            s = n("Odds"),
            l = (n("2rJy"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onImageLoad = function() {
                        n.setState({
                            imageLoaded: !0
                        })
                    }, n.onMouseOver = function() {
                        n.setState({
                            isHovering: !0
                        })
                    }, n.onMouseOut = function() {
                        n.setState({
                            isHovering: !1
                        })
                    }, n.renderImage = function() {
                        var e = null,
                            t = r("chat-image", {
                                "chat-image__animated": !!n.props.cheerText && n.state.imageLoaded
                            }, n.props.className);
                        if (n.props.srcSet.themed) e = a.createElement(s.W, {
                            display: n.state.imageLoaded ? s.N.InlineBlock : s.N.Hide
                        }, a.createElement(o.a, {
                            alt: n.props.alt,
                            className: t,
                            defaultRes: n.props.srcKey,
                            onLoad: n.onImageLoad,
                            onMouseOver: n.onMouseOver,
                            onMouseOut: n.onMouseOut,
                            sources: n.props.srcSet
                        }));
                        else {
                            for (var i = [], l = 0, c = Object.keys(n.props.srcSet.sources); l < c.length; l++) {
                                var d = c[l];
                                i.push(n.props.srcSet.sources[d] + " " + d)
                            }
                            e = a.createElement(s.W, {
                                display: n.state.imageLoaded ? s.N.InlineBlock : s.N.Hide
                            }, a.createElement("img", {
                                className: t,
                                onLoad: n.onImageLoad,
                                onMouseOver: n.onMouseOver,
                                onMouseOut: n.onMouseOut,
                                src: n.props.srcSet.sources[n.props.srcKey],
                                srcSet: i.join(","),
                                alt: n.props.alt
                            }))
                        }
                        return e
                    }, n.renderPlaceholder = function() {
                        return n.state.imageLoaded ? null : a.createElement(s.W, {
                            display: s.N.InlineBlock
                        }, a.createElement(s._35, {
                            type: s._40.Span,
                            className: "chat-image__placeholder",
                            align: s._50.Top
                        }, a.createElement(s._8, {
                            height: 28,
                            width: 28
                        })))
                    }, n.state = {
                        imageLoaded: !1,
                        isHovering: !1
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e;
                    return e = this.state.isHovering && this.state.imageLoaded ? a.createElement(s._43, {
                        direction: this.props.tooltipDirection || s._45.Top,
                        label: this.props.alt,
                        display: s.N.Inline,
                        offsetY: "0.9rem",
                        "data-a-target": "emote-name"
                    }, this.renderPlaceholder(), this.renderImage(), this.props.cheerText) : a.createElement("span", {
                        "data-a-target": "emote-name"
                    }, this.renderPlaceholder(), this.renderImage(), this.props.cheerText), this.props.cheerText ? a.createElement(s._35, {
                        type: s._40.Span,
                        noWrap: !0
                    }, e) : e
                }, t
            }(a.Component));
        n.d(t, "a", function() {
            return l
        })
    },
    "8p/O": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Whispers_Whispers_UserWhisperThreads"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "cursor"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "emoteSets"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "whisperThreads"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "10"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "after"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "cursor"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "participants"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "chatColor"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "displayName"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "profileImageURL"
                                                                },
                                                                arguments: [{
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "width"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "70"
                                                                    }
                                                                }],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "login"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "spamInfo"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "lastMarkedNotSpamAt"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "likelihood"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "messages"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "first"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "20"
                                                            }
                                                        }],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "edges"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "cursor"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "node"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "sentAt"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "editedAt"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "deletedAt"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "from"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "id"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }]
                                                                                }
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "content"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "content"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: []
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "emotes"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: [],
                                                                                        selectionSet: {
                                                                                            kind: "SelectionSet",
                                                                                            selections: [{
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "id"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "emoteID"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "setID"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "from"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "to"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: []
                                                                                            }]
                                                                                        }
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "userLastMessageRead"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "sentAt"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isMuted"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isArchived"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "unreadMessagesCount"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 538
            }
        };
        n.loc.source = {
            body: "query Whispers_Whispers_UserWhisperThreads($cursor: Cursor) {\ncurrentUser {\nid\nlogin\nemoteSets {\nid\nemotes {\nid\ntoken\n}\n}\nwhisperThreads(first: 10 after: $cursor) {\nedges {\ncursor\nnode {\nid\nparticipants {\nid\nchatColor\ndisplayName\nprofileImageURL(width: 70)\nlogin\n}\nspamInfo {\nlastMarkedNotSpamAt\nlikelihood\n}\nmessages(first: 20) {\nedges {\ncursor\nnode {\nid\nsentAt\neditedAt\ndeletedAt\nfrom {\nid\n}\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n}\n}\n}\n}\n}\nuserLastMessageRead {\nid\nsentAt\n}\nisMuted\nisArchived\nunreadMessagesCount\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "9RMu": function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                id: "" + e.id,
                start: e.start,
                end: e.end
            }
        }

        function r(e) {
            return {
                from: e.start,
                to: e.end,
                emoteID: e.id,
                id: e.id + ";" + e.start + ";" + e.end,
                setID: "0",
                __typename: "EmbeddedEmote"
            }
        }
        t.c = function(e) {
            return {
                __typename: "WhisperMessageEdge",
                cursor: "" + e.data_object.id,
                node: {
                    __typename: "WhisperMessage",
                    id: e.data_object.message_id,
                    sentAt: new Date(1e3 * e.data_object.sent_ts).toISOString(),
                    editedAt: null,
                    deletedAt: null,
                    content: {
                        __typename: "MessageBody",
                        content: e.data_object.body,
                        emotes: e.data_object.tags.emotes.map(function(e) {
                            var t = i(e);
                            return r(t)
                        })
                    },
                    from: {
                        __typename: "User",
                        id: "" + e.data_object.from_id
                    }
                }
            }
        }, t.b = function(e) {
            return e.map(function(e) {
                return r(i(e))
            })
        }, t.a = r
    },
    "9u8h": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        });
        var i = n("TToO"),
            r = n("6sO2"),
            a = n("Aj/L"),
            o = function() {
                function e() {}
                return e.get = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(r) {
                            switch (r.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "GET"
                                    }), n)];
                                case 1:
                                    return [2, r.sent()]
                            }
                        })
                    })
                }, e.put = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(r) {
                            switch (r.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "PUT"
                                    }), n)];
                                case 1:
                                    return [2, r.sent()]
                            }
                        })
                    })
                }, e.post = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(r) {
                            switch (r.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "POST"
                                    }), n)];
                                case 1:
                                    return [2, r.sent()]
                            }
                        })
                    })
                }, e.delete = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(r) {
                            switch (r.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "DELETE"
                                    }), n)];
                                case 1:
                                    return [2, r.sent()]
                            }
                        })
                    })
                }, e.request = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        var r, a;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return t = this.constructOptions(t, n), r = t.headers ? t.headers["Content-Type"] : void 0, t.body = this.serialize(t.body, r), [4, this._fetch(e, t)];
                                case 1:
                                    return a = i.sent(), [4, this.constructLegacyAPIResponse(a)];
                                case 2:
                                    return [2, i.sent()]
                            }
                        })
                    })
                }, e.getAPIURL = function(e) {
                    return new URL(e, r.n.config.apiBaseURL)
                }, e.constructLegacyAPIResponse = function(e) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var t, n, r;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    t = {
                                        status: e.status
                                    }, i.label = 1;
                                case 1:
                                    return i.trys.push([1, 3, , 4]), [4, e.json()];
                                case 2:
                                    return n = i.sent(), e.ok ? t.body = n : t.error = n, [3, 4];
                                case 3:
                                    return r = i.sent(), t.requestError = r, [3, 4];
                                case 4:
                                    return [2, t]
                            }
                        })
                    })
                }, e._fetch = function(e, t) {
                    return void 0 === t && (t = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return [4, fetch(this.getAPIURL(e).toString(), t)];
                                case 1:
                                    return [2, n.sent()]
                            }
                        })
                    })
                }, e.constructOptions = function(e, t) {
                    return e = Object.assign({}, e, {
                        headers: i.__assign({}, this.getDefaultHeaders(e, t), e.headers)
                    })
                }, e.serialize = function(e, t) {
                    return "application/json; charset=UTF-8" === t ? JSON.stringify(e) : e
                }, e.getDefaultHeaders = function(e, t) {
                    var n = r.n.store.getState(),
                        i = {
                            Accept: "application/vnd.twitchtv.v" + (t.version || 5) + "+json; charset=UTF-8",
                            "Accept-Language": "en-us",
                            "Client-ID": r.n.config.legacyClientID,
                            "X-Requested-With": "XMLHttpRequest"
                        };
                    e.body && FormData.prototype.isPrototypeOf(e.body) || (i["Content-Type"] = "application/json; charset=UTF-8");
                    var o = Object(a.c)(n);
                    return o && (i.Authorization = "OAuth " + o.authToken, o.legacyCSRFToken && (i["Twitch-Api-Token"] = o.legacyCSRFToken)), t.excludeHeaders && t.excludeHeaders.forEach(function(e) {
                        i[e] && delete i[e]
                    }), i
                }, e
            }()
    },
    "9uSE": function(e, t) {},
    A5Hr: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return k
        });
        var i = n("TToO"),
            r = n("GiK3"),
            a = (n.n(r), n("RH2O")),
            o = n("2KeS"),
            s = n("6sO2"),
            l = n("7vx8"),
            c = n("oIkB"),
            d = n("vH/s"),
            u = n("CSlQ"),
            p = n("LjAQ"),
            m = n("mw/a"),
            h = n("xwpJ"),
            g = n("LjAQ"),
            f = n("mmQh"),
            v = (n.n(f), n("mRH2")),
            b = (n.n(v), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        submitStatus: g.b.Unsubmitted
                    }, t.handleSubmit = function(e, n, r, a) {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var t, o, l;
                            return i.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        if (e !== p.a) return [3, 5];
                                        o = {
                                            userID: this.props.reportContext.targetUserID,
                                            communityID: r || "",
                                            reason: n
                                        }, i.label = 1;
                                    case 1:
                                        return i.trys.push([1, 3, , 4]), [4, this.props.reportUserInCommunity(Object(c.a)(o))];
                                    case 2:
                                        return i.sent(), s.n.tracking.track(d.SpadeEventType.CommunityModeration, {
                                            community_id: r,
                                            name: a,
                                            is_official: !1,
                                            user_id: this.props.sessionUser && this.props.sessionUser.id,
                                            target_id: this.props.reportContext.targetUserID,
                                            action: "report",
                                            reason: e
                                        }), this.setState({
                                            submitStatus: g.b.Success
                                        }), [3, 4];
                                    case 3:
                                        return t = i.sent(), s.i.error(t, "ReportUserInCommunity Mutation failed."), this.setState({
                                            submitStatus: g.b.MutationError
                                        }), [3, 4];
                                    case 4:
                                        return [3, 9];
                                    case 5:
                                        o = {
                                            description: n,
                                            reason: e,
                                            content: this.props.reportContext.contentType,
                                            contentID: this.props.reportContext.contentID,
                                            extra: this.props.reportContext.extra,
                                            targetID: this.props.reportContext.targetUserID
                                        }, this.props.reportContext.contentType === m.a.Community && this.props.reportContext.extra && (o.description = Object(h.a)(this.props.reportContext.extra, n)), i.label = 6;
                                    case 6:
                                        return i.trys.push([6, 8, , 9]), [4, this.props.reportUser(Object(c.a)(o))];
                                    case 7:
                                        return i.sent(), this.props.reportContext.contentType === m.a.Community && s.n.tracking.track(d.SpadeEventType.CommunityReport, {
                                            community_id: this.props.reportContext.contentID,
                                            name: this.props.reportContext.extra,
                                            is_official: !1,
                                            user_id: this.props.sessionUser && this.props.sessionUser.id,
                                            reason: e
                                        }), this.setState({
                                            submitStatus: g.b.Success
                                        }), [3, 9];
                                    case 8:
                                        return l = i.sent(), s.i.error(l, "ReportUser Mutation failed."), this.setState({
                                            submitStatus: g.b.MutationError
                                        }), [3, 9];
                                    case 9:
                                        return [2]
                                }
                            })
                        })
                    }, t.handleChildError = function(e) {
                        return t.setState({
                            submitStatus: e
                        })
                    }, t.handleClose = function() {
                        t.props.onClose && t.props.onClose(t.state.submitStatus)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillUnmount = function() {
                    this.handleClose()
                }, t.prototype.render = function() {
                    return r.createElement(g.c, {
                        onClose: this.handleClose,
                        onError: this.handleChildError,
                        onSubmit: this.handleSubmit,
                        reportContentType: this.props.reportContext.contentType,
                        submitStatus: this.state.submitStatus,
                        targetUserID: this.props.reportContext.targetUserID,
                        title: this.props.title,
                        defaultDescription: this.props.defaultDescription
                    })
                }, t
            }(r.Component));
        var k = Object(o.d)(Object(l.a)(f, {
            name: "reportUserInCommunity"
        }), Object(l.a)(v, {
            name: "reportUser"
        }), Object(u.d)("ReportUser"), Object(a.b)(function(e) {
            return {
                sessionUser: e.session.user
            }
        }, null))(b)
    },
    A9VK: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        });
        var i = n("TToO"),
            r = this,
            a = function() {
                return i.__awaiter(r, void 0, void 0, function() {
                    return i.__generator(this, function(e) {
                        return [2, n.e(83).then(n.bind(null, "Revh"))]
                    })
                })
            }
    },
    AHWf: function(e, t) {},
    AadB: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("O27J"),
            o = n("6sO2"),
            s = n("+GT7"),
            l = n("SZoP"),
            c = n("NY9D"),
            d = n("vH/s"),
            u = n("HW6M"),
            p = n("Odds"),
            m = (n("ehrk"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = u("live-channel-preview-card", {
                        "live-channel-preview-card--loading": !this.props.streamLoaded
                    });
                    return r.createElement("div", i.__assign({
                        className: e,
                        "data-test-selector": "live-channel-preview-card"
                    }, Object(p._53)(this.props)), r.createElement(s.a, i.__assign({}, this.props), r.createElement(p.j, {
                        ratio: p.k.Aspect16x9
                    }, this.props.videoPlayer)))
                }, t
            }(r.Component)),
            h = n("v5ho"),
            g = n("RH2O"),
            f = n("2KeS"),
            v = n("V5M+"),
            b = n("jetF"),
            k = n("7vx8"),
            y = n("CSlQ"),
            S = n("3zLD"),
            _ = n("+8VM"),
            N = n("oIkB"),
            E = function(e) {
                switch (e) {
                    case "TARGET_USER_OWNER":
                        return Object(o.d)("You cannot ban or timeout the owner of this community", "BanTimeoutErrorMessages");
                    case "TARGET_USER_MOD":
                        return Object(o.d)("You cannot ban or timeout a moderator", "BanTimeoutErrorMessages");
                    case "TARGET_USER_SELF":
                        return Object(o.d)("You cannot ban or timeout yourself", "BanTimeoutErrorMessages");
                    case "TARGET_USER_STAFF":
                        return Object(o.d)("You cannot ban or timeout a staff member", "BanTimeoutErrorMessages");
                    case "NOT_PERMITTED":
                        return Object(o.d)("The user is already banned from this community", "BanTimeoutErrorMessages");
                    default:
                        return Object(o.d)("Something went wrong", "BanTimeoutErrorMessages")
                }
            },
            C = n("nC3l"),
            T = (n("sJt0"), "error-message"),
            w = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        error: "",
                        reason: ""
                    }, t.renderErrorMessage = function() {
                        return t.state.error ? r.createElement(p._2, {
                            margin: {
                                bottom: 2
                            }
                        }, r.createElement(p._35, {
                            color: p.I.Error,
                            type: p._40.H4,
                            "data-test-selector": T
                        }, E(t.state.error))) : null
                    }, t.onReasonChange = function(e) {
                        var n = e.target.value;
                        t.setState({
                            reason: n
                        })
                    }, t.banUserFromCommunity = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return i.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        return this.props.banUserFromCommunity ? (e = i.__assign({}, Object(N.a)({
                                            communityID: this.props.communityID,
                                            userID: this.props.userID,
                                            reason: this.state.reason
                                        }), {
                                            optimisticResponse: {
                                                banUserFromCommunity: {
                                                    error: null,
                                                    __typename: "BanUserFromCommunityPayload"
                                                }
                                            }
                                        }), [4, this.props.banUserFromCommunity(e)]) : [2];
                                    case 1:
                                        return null === (t = n.sent()).data.banUserFromCommunity.error ? (o.n.tracking.track(d.SpadeEventType.CommunityModeration, {
                                            community_id: this.props.communityID,
                                            name: this.props.communityName,
                                            is_official: !1,
                                            user_id: this.props.currentUserID,
                                            target_id: this.props.userID,
                                            action: "ban",
                                            reason: this.state.reason
                                        }), this.props.onCloseModal()) : this.setState({
                                            error: t.data.banUserFromCommunity.error
                                        }), [2]
                                }
                            })
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(p.W, {
                        position: p._9.Relative
                    }, r.createElement(p._25, {
                        background: p.m.Base,
                        className: "stream-ban-modal"
                    }, r.createElement(p._2, {
                        padding: 2
                    }, this.renderErrorMessage(), r.createElement(p._2, {
                        margin: {
                            bottom: 2
                        }
                    }, r.createElement(p._35, {
                        type: p._40.H4
                    }, Object(o.d)("Are you sure you want to ban {name}?", {
                        name: this.props.username
                    }, "StreamBanModal"))), r.createElement(p._25, {
                        borderTop: !0
                    }, r.createElement(p._2, {
                        margin: {
                            y: 2
                        }
                    }, r.createElement(p._35, {
                        bold: !0
                    }, Object(o.d)("Reason (Required)", "StreamBanModal")), r.createElement(p.Y, {
                        type: p.Z.Text,
                        placeholder: Object(o.d)("Please be as detailed as possible", "StreamBanModal"),
                        onChange: this.onReasonChange,
                        "data-test-selector": "reason-input"
                    }))), r.createElement(p._25, {
                        borderTop: !0
                    }, r.createElement(p._2, {
                        padding: {
                            top: 2
                        },
                        textAlign: p._36.Center
                    }, r.createElement(p._2, {
                        display: p.N.Inline,
                        margin: {
                            x: 1
                        }
                    }, r.createElement(p.u, {
                        type: p.z.Text,
                        onClick: this.props.onCloseModal,
                        "data-test-selector": "cancel-button"
                    }, Object(o.d)("Cancel", "StreamBanModal"))), r.createElement(p._2, {
                        display: p.N.Inline,
                        margin: {
                            x: 1
                        }
                    }, r.createElement(p.u, {
                        onClick: this.banUserFromCommunity,
                        disabled: !this.state.reason.length,
                        "data-test-selector": "ban-button"
                    }, Object(o.d)("Ban", "StreamBanModal")))))), r.createElement(_.a, {
                        closeOnBackdropClick: !0
                    })))
                }, t
            }(r.Component),
            O = Object(S.compose)(Object(k.a)(C, {
                name: "banUserFromCommunity"
            }))(w);
        var I = Object(g.b)(null, function(e) {
                return Object(f.b)({
                    onCloseModal: v.c
                }, e)
            })(O),
            D = (n("npyu"), n("plcU")),
            P = "error-message",
            F = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        durationHours: 2,
                        error: "",
                        reason: ""
                    }, t.renderErrorMessage = function() {
                        return t.state.error ? r.createElement(p._2, {
                            margin: {
                                bottom: 2
                            }
                        }, r.createElement(p._35, {
                            color: p.I.Error,
                            type: p._40.H4,
                            "data-test-selector": P
                        }, E(t.state.error))) : null
                    }, t.onReasonChange = function(e) {
                        var n = e.target.value;
                        t.setState({
                            reason: n
                        })
                    }, t.onDurationHoursChange = function(e) {
                        var n = parseInt(e.target.value, 10);
                        t.setState({
                            durationHours: n
                        })
                    }, t.timeoutUserFromCommunity = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return i.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        return this.props.timeoutUserFromCommunity ? (e = i.__assign({}, Object(N.a)({
                                            communityID: this.props.communityID,
                                            durationHours: this.state.durationHours,
                                            userID: this.props.userID,
                                            reason: this.state.reason
                                        }), {
                                            optimisticResponse: {
                                                timeoutUserFromCommunity: {
                                                    error: null,
                                                    __typename: "TimeoutUserFromCommunityPayload"
                                                }
                                            }
                                        }), [4, this.props.timeoutUserFromCommunity(e)]) : [2];
                                    case 1:
                                        return null === (t = n.sent()).data.timeoutUserFromCommunity.error ? (o.n.tracking.track(d.SpadeEventType.CommunityModeration, {
                                            community_id: this.props.communityID,
                                            name: this.props.communityName,
                                            is_official: !1,
                                            user_id: this.props.currentUserID,
                                            target_id: this.props.userID,
                                            action: "timeout",
                                            reason: this.state.reason,
                                            duration: this.state.durationHours
                                        }), this.props.onCloseModal()) : this.setState({
                                            error: t.data.timeoutUserFromCommunity.error
                                        }), [2]
                                }
                            })
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(p.W, {
                        position: p._9.Relative
                    }, r.createElement(p._25, {
                        background: p.m.Base,
                        className: "stream-timeout-modal"
                    }, r.createElement(p._2, {
                        padding: 2
                    }, this.renderErrorMessage(), r.createElement(p._2, {
                        margin: {
                            bottom: 2
                        }
                    }, r.createElement(p._35, {
                        type: p._40.H4
                    }, Object(o.d)("Are you sure you want to timeout {name}?", {
                        name: this.props.username
                    }, "StreamTimeoutModal"))), r.createElement(p._25, {
                        borderTop: !0
                    }, r.createElement(p._2, {
                        margin: {
                            y: 2
                        }
                    }, r.createElement(p._35, {
                        bold: !0
                    }, Object(o.d)("Reason (Required)", "StreamTimeoutModal")), r.createElement(p.Y, {
                        type: p.Z.Text,
                        placeholder: Object(o.d)("Please be as detailed as possible", "StreamTimeoutModal"),
                        onChange: this.onReasonChange,
                        "data-test-selector": "reason-input"
                    }))), r.createElement(p._2, {
                        margin: {
                            y: 2
                        }
                    }, r.createElement(p._35, {
                        bold: !0
                    }, Object(o.d)("Duration", "StreamTimeoutModal")), r.createElement(p._21, {
                        defaultValue: "2",
                        onChange: this.onDurationHoursChange
                    }, r.createElement("option", {
                        value: "2"
                    }, Object(o.d)("2 hours", "StreamTimeoutModal")), r.createElement("option", {
                        value: "4"
                    }, Object(o.d)("4 hours", "StreamTimeoutModal")), r.createElement("option", {
                        value: "8"
                    }, Object(o.d)("8 hours", "StreamTimeoutModal")), r.createElement("option", {
                        value: "12"
                    }, Object(o.d)("12 hours", "StreamTimeoutModal")), r.createElement("option", {
                        value: "24"
                    }, Object(o.d)("24 hours", "StreamTimeoutModal")))), r.createElement(p._25, {
                        borderTop: !0
                    }, r.createElement(p._2, {
                        padding: {
                            top: 2
                        },
                        textAlign: p._36.Center
                    }, r.createElement(p._2, {
                        display: p.N.Inline,
                        margin: {
                            x: 1
                        }
                    }, r.createElement(p.u, {
                        type: p.z.Text,
                        onClick: this.props.onCloseModal,
                        "data-test-selector": "cancel-button"
                    }, Object(o.d)("Cancel", "StreamTimeoutModal"))), r.createElement(p._2, {
                        display: p.N.Inline,
                        margin: {
                            x: 1
                        }
                    }, r.createElement(p.u, {
                        onClick: this.timeoutUserFromCommunity,
                        disabled: !this.state.reason.length,
                        "data-test-selector": "timeout-button"
                    }, Object(o.d)("Timeout", "StreamTimeoutModal")))))), r.createElement(_.a, {
                        closeOnBackdropClick: !0
                    })))
                }, t
            }(r.Component),
            R = Object(S.compose)(Object(k.a)(D, {
                name: "timeoutUserFromCommunity"
            }))(F);
        var x = Object(g.b)(null, function(e) {
                return Object(f.b)({
                    onCloseModal: v.c
                }, e)
            })(R),
            L = n("PO03"),
            U = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onStreamBanClick = function() {
                        var e = Object(l.a)(t.props.login, t.props.displayName, !0);
                        t.props.onShowModal(I, {
                            communityID: t.props.data.community.id,
                            communityName: t.props.communityName,
                            currentUserID: t.props.data.currentUser.id,
                            userID: t.props.userID,
                            username: e
                        })
                    }, t.onStreamTimeoutClick = function() {
                        var e = Object(l.a)(t.props.login, t.props.displayName, !0);
                        t.props.onShowModal(x, {
                            communityID: t.props.data.community.id,
                            communityName: t.props.communityName,
                            currentUserID: t.props.data.currentUser.id,
                            userID: t.props.userID,
                            username: e
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return this.props.data && !this.props.data.loading && !this.props.data.error && this.props.data.community && this.props.data.community.self && (this.props.data.community.self.permissions.banning || this.props.data.community.self.permissions.timingOut) ? r.createElement(b.a, null, r.createElement(p.v, {
                        ariaLabel: Object(o.d)("Moderation", "DirectoryGamePage"),
                        icon: p._16.ChatRiskFlag
                    }), r.createElement(p.p, {
                        direction: p.q.BottomRight,
                        size: p.r.ExtraSmall,
                        offsetX: "1rem"
                    }, this.renderBanInteractable(), this.renderTimeoutInteractable())) : null
                }, t.prototype.renderBanInteractable = function() {
                    return this.props.data.community.self.permissions.banning ? r.createElement(p._0, {
                        onClick: this.onStreamBanClick,
                        "data-test-selector": "ban-selector"
                    }, r.createElement(p._2, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(o.d)("Ban", "StreamFlag"))) : null
                }, t.prototype.renderTimeoutInteractable = function() {
                    return this.props.data.community.self.permissions.timingOut ? r.createElement(p._0, {
                        onClick: this.onStreamTimeoutClick,
                        "data-test-selector": "timeout-selector"
                    }, r.createElement(p._2, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(o.d)("Timeout", "StreamFlag"))) : null
                }, t = i.__decorate([Object(k.a)(L, {
                    options: function(e) {
                        return {
                            fetchPolicy: "network-only",
                            variables: {
                                name: decodeURIComponent(e.communityName)
                            }
                        }
                    }
                }), Object(y.d)("StreamFlagComponent", {
                    autoReportInteractive: !0
                })], t)
            }(r.Component);
        var M = Object(g.b)(null, function(e) {
                return Object(f.b)({
                    onShowModal: v.d
                }, e)
            })(U),
            A = n("BwgW"),
            j = n("fc0G"),
            W = n("L3z0"),
            B = n("5MsU"),
            G = {
                autoplay: !0,
                branding: !1,
                channelInfo: !1,
                controls: !1,
                height: "100%",
                playsinline: !0,
                player: j.b.AnimatedThumbnails,
                showInfo: !1,
                trackingProperties: {
                    client_app: "twilight"
                },
                width: "100%",
                oauth_token: ""
            };

        function H() {
            return !!window.Twitch && !!window.Twitch.Player
        }
        var V = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.checkPlayerDependencyStatus = function() {
                        H() ? (n.setState({
                            canInitializePlayer: !0
                        }), n.checkPlayerDependencyAnimationFrame = null) : n.checkPlayerDependencyAnimationFrame = requestAnimationFrame(n.checkPlayerDependencyStatus)
                    }, n.attachRef = function(e) {
                        return n.playerRef = e
                    }, n.onPlayerReady = function() {
                        n.player && n.setState({
                            playerInitialized: !0
                        })
                    }, n.onPlayerPlay = function() {
                        n.player.setVolume(0)
                    }, n.onPlayerPlaying = function() {
                        n.player.setQuality("160p30"), n.props.onPlayerPlaying && n.props.onPlayerPlaying()
                    }, n.state = {
                        canInitializePlayer: H(),
                        playerInitialized: !1
                    }, n
                }
                return i.__extends(t, e), n = t, t.prototype.componentDidMount = function() {
                    var e = this;
                    if (this.userVolumeSetting = window.localStorage.getItem("volume"), this.userMuteSetting = window.localStorage.getItem("muted"), window.addEventListener("beforeunload", function() {
                            return e.resetVolume()
                        }), this.state.canInitializePlayer ? this.initializePlayer() : this.checkPlayerDependencyAnimationFrame = window.requestAnimationFrame(this.checkPlayerDependencyStatus), window.__playerScriptChunk && !n.tagInjected) {
                        var t = document.createElement("script");
                        t.async = !0, t.crossOrigin = "anonymous", t.src = window.__playerScriptChunk, document.body.appendChild(t);
                        var i = document.createElement("link");
                        i.href = window.__playerStyleChunk, i.media = "screen", i.rel = "stylesheet", i.type = "text/css", document.body.appendChild(i), n.tagInjected = !0
                    }
                }, t.prototype.componentWillUpdate = function(e, t) {
                    this.state.canInitializePlayer || !t.canInitializePlayer ? t.canInitializePlayer && t.playerInitialized : this.initializePlayer()
                }, t.prototype.render = function() {
                    return r.createElement("div", {
                        className: "video-player",
                        "data-test-selector": "thumbnail-video-player"
                    }, r.createElement("div", {
                        className: "video-player__container",
                        ref: this.attachRef
                    }))
                }, t.prototype.componentWillUnmount = function() {
                    var e = this;
                    this.checkPlayerDependencyAnimationFrame && cancelAnimationFrame(this.checkPlayerDependencyAnimationFrame), window.removeEventListener("beforeunload", function() {
                        return e.resetVolume()
                    }), this.resetVolume(), this.player && (this.player.removeEventListener(B.a.PlayerReady, this.onPlayerReady), this.player.removeEventListener(W.a.Play, this.onPlayerPlay), this.player.removeEventListener(W.a.Playing, this.onPlayerPlaying), A.extensionService.unregisterPlayer(), this.player.destroy())
                }, t.prototype.initializePlayer = function() {
                    var e = G;
                    this.props.channelLogin && (e.channel = this.props.channelLogin);
                    var t = new window.Twitch.Player(this.playerRef, e);
                    this.player = t, t.addEventListener(B.a.PlayerReady, this.onPlayerReady), t.addEventListener(W.a.Play, this.onPlayerPlay), t.addEventListener(W.a.Playing, this.onPlayerPlaying), A.extensionService.registerPlayer(this.player)
                }, t.prototype.resetVolume = function() {
                    this.userVolumeSetting && window.localStorage.setItem("volume", this.userVolumeSetting), this.userMuteSetting && window.localStorage.setItem("muted", this.userMuteSetting)
                }, t.tagInjected = !1, t = n = i.__decorate([Object(y.d)("LiveChannelPreviewCard")], t);
                var n
            }(r.Component),
            z = n("PLRK"),
            q = (n("GiGb"), 5e3),
            Q = 300,
            K = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.getLinkTo = function(e, t) {
                        var i = n.props.trackingContent ? n.props.trackingContent : d.PageviewContent.Live,
                            r = n.props.directoryType === h.a.Communities ? d.PageviewMedium.Community : d.PageviewMedium.Game;
                        return n.props.trackingMedium && (r = n.props.trackingMedium), {
                            pathname: e,
                            state: {
                                medium: r,
                                content: i,
                                content_index: t
                            }
                        }
                    }, n.renderStreamFlag = function() {
                        var e = n.props.streamNode;
                        return e.broadcaster ? n.props.directoryType === h.a.Communities && n.props.directoryName ? r.createElement(p._2, {
                            className: "stream-thumbnail__card stream-thumbnail__card-flag",
                            position: p._9.Absolute,
                            attachTop: !0,
                            attachRight: !0
                        }, r.createElement(M, {
                            communityName: n.props.directoryName,
                            login: e.broadcaster.login,
                            displayName: e.broadcaster.displayName,
                            userID: e.broadcaster.id
                        })) : void 0 : null
                    }, n.shouldShowGame = function(e) {
                        return n.props.directoryType !== h.a.Games && n.props.streamNode.game ? n.props.streamNode.game[e] : ""
                    }, n.onMouseEnterHandler = function() {
                        !n.props.showPreview || n.state.hovered && !n.state.previewTimedOut || (n.removeThumbnailListener(), n.clearTimeouts(), n.setState({
                            hovered: !0
                        }, function() {
                            n.hoverTimeout = setTimeout(function() {
                                n.state.hovered && n.setState({
                                    loadingPreview: !0,
                                    previewTimedOut: !1,
                                    streamLoaded: !1
                                })
                            }, Q)
                        }))
                    }, n.onFocusHandler = function() {
                        n.setState({
                            focused: !0
                        }), n.onMouseEnterHandler()
                    }, n.onMouseLeaveHandler = function() {
                        n.state.hovered && n.props.showPreview && (n.clearTimeouts(), n.setState({
                            hovered: !1,
                            focused: !1,
                            loadingPreview: !1,
                            previewTimedOut: !1,
                            streamLoaded: !1
                        }, function() {
                            n.addThumbnailListener()
                        }))
                    }, n.onStreamLoaded = function() {
                        n.state.hovered && (n.setState({
                            streamLoaded: !0,
                            loadingPreview: !1
                        }), n.createPreviewTimeout())
                    }, n.createPreviewTimeout = function() {
                        n.previewTimeout && window.clearTimeout(n.previewTimeout), n.previewTimeout = setTimeout(function() {
                            n.state.hovered && n.setState({
                                previewTimedOut: !0,
                                streamLoaded: !1,
                                loadingPreview: !1
                            })
                        }, q)
                    }, n.setRef = function(e) {
                        e && (n.thumbnailNode = a.findDOMNode(e), n.addThumbnailListener())
                    }, n.getVideoPlayer = function() {
                        var e = {
                            onPlayerPlaying: n.onStreamLoaded
                        };
                        if (n.props.showPreview && n.state.hovered && n.props.streamNode.broadcaster && n.props.streamNode.broadcaster.login) return r.createElement(V, i.__assign({
                            channelLogin: n.props.streamNode.broadcaster.login
                        }, e))
                    }, n.clearTimeouts = function() {
                        n.hoverTimeout && window.clearTimeout(n.hoverTimeout), n.createPreviewTimeout && window.clearTimeout(n.previewTimeout)
                    }, n.addThumbnailListener = function() {
                        n.thumbnailNode && n.props.showPreview && n.thumbnailNode.getElementsByClassName("tw-card-img")[0] && (n.thumbnailNode.getElementsByClassName("tw-card-img")[0].addEventListener("mouseenter", n.onMouseEnterHandler), n.thumbnailNode.getElementsByClassName("tw-card-img")[0].parentElement.addEventListener("focus", n.onFocusHandler))
                    }, n.removeThumbnailListener = function() {
                        n.thumbnailNode && n.props.showPreview && n.thumbnailNode.getElementsByClassName("tw-card-img")[0] && (n.thumbnailNode.getElementsByClassName("tw-card-img")[0].removeEventListener("mouseenter", n.onMouseEnterHandler), n.thumbnailNode.getElementsByClassName("tw-card-img")[0].parentElement.removeEventListener("focus", n.onFocusHandler))
                    }, n.state = {
                        focused: !1,
                        streamLoaded: !1,
                        hovered: !1,
                        previewTimedOut: !1,
                        loadingPreview: !1
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    e.showPreview && this.addThumbnailListener()
                }, t.prototype.componentDidUpdate = function(e, t) {
                    t.focused && this.thumbnailNode.getElementsByTagName("a").length && this.thumbnailNode.getElementsByTagName("a")[0].focus()
                }, t.prototype.componentWillUnmount = function() {
                    this.clearTimeouts(), this.removeThumbnailListener()
                }, t.prototype.render = function() {
                    var e = this.props.streamNode,
                        t = this.props.streamIndex;
                    if (!e.broadcaster) return null;
                    var n = this.props.showPreview && this.state.hovered && this.state.loadingPreview && !this.state.streamLoaded && !this.state.previewTimedOut,
                        i = this.props.showPreview && this.state.hovered && (this.state.loadingPreview || this.state.streamLoaded) && !this.state.previewTimedOut;
                    return r.createElement("div", {
                        className: "stream-thumbnail",
                        ref: this.setRef,
                        "data-target": t ? "" : "directory-first-item",
                        onBlur: this.onMouseLeaveHandler,
                        onMouseLeave: this.onMouseLeaveHandler,
                        style: {
                            order: t
                        }
                    }, r.createElement(p._2, {
                        className: "stream-thumbnail__card",
                        position: p._9.Relative,
                        margin: {
                            bottom: 2
                        },
                        "data-target": "directory-game__card_container"
                    }, n && r.createElement(p._25, {
                        attachRight: !0,
                        attachTop: !0,
                        background: p.m.Overlay,
                        borderRadius: p.s.Small,
                        color: p.I.OverlayAlt,
                        margin: .5,
                        padding: .5,
                        position: p._9.Absolute,
                        zIndex: p._52.Above
                    }, r.createElement(p._4, {
                        fillContent: !0,
                        inheritColor: !0,
                        size: p._23.Small
                    })), !this.state.streamLoaded && r.createElement(s.a, {
                        imageSrc: e.previewImageURL || o.a.defaultStreamPreviewURL,
                        imageAlt: e.broadcaster.login + " cover image",
                        viewerCount: e.viewersCount || 0,
                        title: e.title || z.a,
                        channelName: Object(l.a)(e.broadcaster.login, e.broadcaster.displayName, !0),
                        gameImageSrc: this.shouldShowGame("boxArtURL") || o.a.defaultBoxArtURL,
                        gameTitle: this.shouldShowGame("name"),
                        gameLinkTo: this.getLinkTo(Object(c.c)(this.shouldShowGame("name")), t),
                        linkTo: this.getLinkTo("/" + e.broadcaster.login, t),
                        channelNameLinkTo: this.getLinkTo("/" + e.broadcaster.login + "/videos", t),
                        streamType: e.type,
                        "data-a-target": "card-" + t,
                        "data-a-id": "card-" + (e.broadcaster.login || "").replace(/ /g, "")
                    }), i && r.createElement(m, {
                        streamLoaded: this.state.streamLoaded,
                        imageSrc: e.previewImageURL || o.a.defaultStreamPreviewURL,
                        imageAlt: e.broadcaster.login + " cover image",
                        viewerCount: e.viewersCount || 0,
                        title: e.title || z.a,
                        channelName: Object(l.a)(e.broadcaster.login, e.broadcaster.displayName, !0),
                        gameImageSrc: this.shouldShowGame("boxArtURL") || o.a.defaultBoxArtURL,
                        gameTitle: this.shouldShowGame("name"),
                        gameLinkTo: this.getLinkTo(Object(c.c)(this.shouldShowGame("name")), t),
                        linkTo: this.getLinkTo("/" + e.broadcaster.login, t),
                        channelNameLinkTo: this.getLinkTo("/" + e.broadcaster.login + "/videos", t),
                        streamType: e.type,
                        videoPlayer: this.getVideoPlayer()
                    }), this.renderStreamFlag()))
                }, t
            }(r.Component);
        n.d(t, "a", function() {
            return "directory-first-item"
        }), n.d(t, !1, function() {
            return "directory-game__card_container"
        }), n.d(t, "b", function() {
            return K
        })
    },
    AckU: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            r = n("7enT"),
            a = n("cuT/");
        var o = Object(i.b)(function(e) {
            return {
                isExpanded: e.ui.rightColumnExpanded,
                theatreModeEnabled: e.ui.theatreModeEnabled,
                sideNavExpanded: e.ui.sideNavExpanded
            }
        }, function(e) {
            return {
                collapse: function() {
                    return e(r.l())
                },
                expand: function() {
                    return e(r.p())
                }
            }
        })(a.b);
        n.d(t, "b", function() {
            return o
        }), n.d(t, "a", function() {
            return a.a
        })
    },
    AtoX: function(e, t) {},
    BC6Q: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            r = n("2KeS"),
            a = n("7enT"),
            o = n("Aj/L"),
            s = n("TToO"),
            l = n("GiK3"),
            c = n("F8kA"),
            d = n("6sO2"),
            u = n("HW6M"),
            p = n("AckU"),
            m = n("LiYP"),
            h = n("fc0G");

        function g(e, t) {
            return !(!e && !t) && (!t || !e || (t.channelLogin !== e.channelLogin || t.vodID !== e.vodID || t.collectionID !== e.collectionID))
        }
        var f = n("Odds"),
            v = (n("KfGW"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        sideNavCollapsedByCSSBreakpoint: window.innerWidth < m.d
                    }, t.resizeAnimationFrame = 0, t.renderMiniTitle = function() {
                        return l.createElement(f._2, {
                            padding: {
                                y: .5,
                                right: .5
                            },
                            flexDirection: f.P.Row,
                            display: f.N.Flex,
                            alignItems: f.c.Center,
                            justifyContent: f._1.Between,
                            flexWrap: f.Q.NoWrap,
                            className: "persistent-player__title",
                            zIndex: f._52.Above,
                            "data-test-selector": "persistent-player-mini-title"
                        }, l.createElement(f._2, {
                            ellipsis: !0,
                            margin: {
                                x: 1
                            }
                        }, l.createElement(f._35, {
                            fontSize: f.R.Size5,
                            type: f._40.Span
                        }, t.props.options.miniPlayerTitle)), l.createElement(f._2, {
                            flexShrink: 0
                        }, l.createElement(f.v, {
                            ariaLabel: Object(d.d)("Dismiss Mini Player", "PersistentPlayerMini"),
                            icon: f._16.Close,
                            overlay: !0,
                            onClick: t.props.onClickDismiss,
                            "data-test-selector": "persistent-player-mini-dismiss"
                        })))
                    }, t.renderMiniHoverControls = function() {
                        var e = t.state.isPaused ? Object(d.d)("Play", "PersistentPlayerMini") : Object(d.d)("Pause", "PersistentPlayerMini");
                        return l.createElement(f._2, {
                            className: "persistent-player__hover-controls",
                            justifyContent: f._1.Center,
                            alignItems: f.c.Center,
                            display: f.N.Flex,
                            flexDirection: f.P.Row,
                            attachTop: !0,
                            attachBottom: !0,
                            attachLeft: !0,
                            attachRight: !0,
                            margin: {
                                top: 4
                            },
                            position: f._9.Absolute,
                            zIndex: f._52.Above,
                            "data-test-selector": "persistent-player-mini-hover"
                        }, t.renderMiniControl(f._16.MiniPlayerExpand, Object(d.d)("Expand Player", "PersistentPlayerMini"), "persistent-player-mini-expand", t.props.onClickExpand), l.createElement(f._2, {
                            margin: {
                                left: 2
                            }
                        }, t.renderMiniControl(t.state.isPaused ? f._16.MiniPlayerPlay : f._16.MiniPlayerPause, e, "persistent-player-mini-pause-play", t.togglePause)))
                    }, t.renderMiniControl = function(e, t, n, i) {
                        return l.createElement("button", {
                            className: "persistent-player__control",
                            onClick: i,
                            "aria-label": t,
                            "data-test-selector": n
                        }, l.createElement(f._15, {
                            asset: e,
                            width: 30,
                            height: 30
                        }))
                    }, t.renderMiniInterceptPointerView = function() {
                        return l.createElement(f._2, {
                            className: "persistent-player__intercept-view",
                            position: f._9.Absolute,
                            attachBottom: !0,
                            attachLeft: !0,
                            attachRight: !0,
                            zIndex: f._52.Above,
                            "data-test-selector": "persistent-player-mini-cover"
                        })
                    }, t.togglePause = function() {
                        t.setState(function(e) {
                            return {
                                shouldPause: !e.isPaused
                            }
                        })
                    }, t.onPauseToggled = function(e) {
                        t.setState({
                            isPaused: e,
                            shouldPause: e
                        })
                    }, t.collapseOnBreakpoint = function() {
                        var e = window.innerWidth;
                        e < m.d && !t.state.sideNavCollapsedByCSSBreakpoint ? t.setState({
                            sideNavCollapsedByCSSBreakpoint: !0
                        }) : e >= m.d && t.state.sideNavCollapsedByCSSBreakpoint && t.setState({
                            sideNavCollapsedByCSSBreakpoint: !1
                        }), t.resizeAnimationFrame = 0
                    }, t.handleWindowResize = function() {
                        t.resizeAnimationFrame || (t.resizeAnimationFrame = requestAnimationFrame(t.collapseOnBreakpoint))
                    }, t.handleLocationChange = function() {
                        t.props.theatreModeEnabled && t.props.disableTheatreMode()
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.props.location.pathname !== e.location.pathname && this.handleLocationChange(), g(this.props.options.playerProps, e.options.playerProps) && this.setState({
                        shouldPause: !1
                    })
                }, t.prototype.componentDidMount = function() {
                    window.addEventListener("resize", this.handleWindowResize)
                }, t.prototype.componentWillUnmount = function() {
                    this.handleLocationChange(), window.removeEventListener("resize", this.handleWindowResize), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame)
                }, t.prototype.render = function() {
                    var e, t = this.props.theatreModeEnabled && !this.props.mini,
                        n = u({
                            "persistent-player--theatre": t
                        }),
                        i = this.props.mainRef.getBoundingClientRect();
                    if (t) e = {
                        position: "fixed",
                        left: 0,
                        top: 0,
                        maxHeight: "100vh",
                        height: "100%",
                        width: window.innerWidth < 820 || this.props.rightNavCollapsed ? "100%" : "calc(100% - " + p.a + ")",
                        zIndex: 3e3
                    };
                    else if (this.props.mini) e = {
                        position: "fixed",
                        width: "26rem",
                        height: "18.6rem",
                        left: i.left,
                        bottom: 0,
                        margin: "1rem",
                        zIndex: 1e3
                    };
                    else {
                        var r = this.props.contentRef.getBoundingClientRect(),
                            a = r.left - i.left,
                            o = i.right - r.right;
                        e = {
                            top: r.top - i.top,
                            left: a,
                            position: "absolute",
                            width: "100%",
                            maxWidth: "calc(100% - " + (a + o) + "px)",
                            maxHeight: "calc(100vh - 16rem)",
                            overflow: "hidden",
                            height: "auto"
                        }
                    }
                    return l.createElement("div", {
                        className: u("persistent-player", n),
                        style: e
                    }, this.props.mini && this.renderMiniTitle(), l.createElement(f.j, null, l.createElement(h.c, s.__assign({}, this.props.options.playerProps, {
                        instanceRef: this.props.onVideoPlayerInstance,
                        miniModeEnabled: this.props.mini,
                        paused: this.state.shouldPause,
                        onPauseToggled: this.onPauseToggled
                    }))), this.props.mini && this.renderMiniInterceptPointerView(), this.props.mini && this.renderMiniHoverControls())
                }, t
            }(l.Component)),
            b = Object(c.f)(v);
        var k, y, S = Object(i.b)(function(e) {
            return {
                sideNavCollapsed: !e.ui.sideNavExpanded,
                rightNavCollapsed: !e.ui.rightColumnExpanded,
                theatreModeEnabled: e.ui.theatreModeEnabled
            }
        }, function(e) {
            return Object(r.b)({
                disableTheatreMode: a.n
            }, e)
        })(b);
        ! function(e) {
            e.CloseMini = "close", e.OpenMini = "open", e.ExpandPlayer = "expand", e.ContentChange = "content_change"
        }(k || (k = {})),
        function(e) {
            e.Minimize = "minimize", e.Maximize = "maximize", e.UserMinimize = "user_minimize", e.UserMaximize = "user_maximize"
        }(y || (y = {}));
        var _, N = n("/Vp/"),
            E = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.logger = d.i.withCategory("PersistentPlayerRoot"), n.trackMiniPlayerAction = function(e, t) {
                        n.videoPlayerComponent && n.videoPlayerComponent.trackMiniPlayerAction(e, t)
                    }, n.setVideoPlayerRef = function(e) {
                        return n.videoPlayerComponent = e
                    }, n.onClickExpand = function() {
                        n.state.options && (n.state.overrides && n.state.overrides.onMiniPlayerExpand ? n.state.overrides.onMiniPlayerExpand() : (n.props.history.push(n.state.options.miniPlayerContentRoute), n.trackMiniPlayerAction(k.ExpandPlayer, y.UserMaximize)))
                    }, n.onClickDismiss = function() {
                        n.state.options && (n.state.overrides && n.state.overrides.onMiniPlayerDismiss ? n.state.overrides.onMiniPlayerDismiss() : (n.destroyPlayer(), n.trackMiniPlayerAction(k.CloseMini, y.UserMinimize)))
                    }, n.onHistoryChange = function(e) {
                        var t = n.props.isLoggedIn,
                            i = Object(N.a)({
                                isLoggedIn: t,
                                location: e
                            });
                        i !== n.state.hideSideNav && n.setState({
                            hideSideNav: i
                        })
                    };
                    var i = t.isLoggedIn,
                        r = t.location;
                    return n.state = {
                        isError: !1,
                        mini: !1,
                        hideSideNav: Object(N.a)({
                            isLoggedIn: i,
                            location: r
                        })
                    }, _ && n.logger.warn("attempting to create a second instance of the Persistent Player Root. There should only be one in <Root>, use <PersistentPlayerContent> instead."), _ = n, n
                }
                return s.__extends(t, e), t.prototype.componentDidCatch = function(e, t) {
                    var n = this;
                    this.setState({
                        isError: !0
                    }, function() {
                        n.logger.error(e, "A unhandled exception occurred in the component hierarchy", {
                            info: t
                        })
                    })
                }, t.prototype.componentDidMount = function() {
                    this.historyUnlisten = d.n.history.listen(this.onHistoryChange)
                }, t.prototype.componentWillUnmount = function() {
                    this.historyUnlisten && this.historyUnlisten()
                }, t.prototype.render = function() {
                    return !this.state.isError && this.state.options && this.state.contentRef && this.props.mainRef ? l.createElement(S, {
                        options: this.state.options,
                        contentRef: this.state.contentRef,
                        mainRef: this.props.mainRef,
                        mini: this.state.mini,
                        hideSideNav: this.state.hideSideNav,
                        forceRender: this.state.forcePresentationRender,
                        onClickExpand: this.onClickExpand,
                        onClickDismiss: this.onClickDismiss,
                        onVideoPlayerInstance: this.setVideoPlayerRef
                    }) : null
                }, t.prototype.destroyPlayer = function(e) {
                    var t = this;
                    this.setState({
                        mini: !1,
                        options: void 0,
                        overrides: void 0,
                        contentRef: void 0
                    }, function() {
                        t.props.stopPersistingPlayer(), e && e()
                    })
                }, t.prototype.requestVideoContent = function(e) {
                    var t = this,
                        n = function() {
                            t.setState({
                                contentRef: e.ref,
                                options: e.options,
                                overrides: e.overrides
                            }, e.onCompletion)
                        };
                    g(this.state.options && this.state.options.playerProps, e.options.playerProps) ? (this.trackMiniPlayerAction(k.ContentChange, ""), this.destroyPlayer(n)) : n()
                }, t.prototype.transitionToMiniPlayer = function(e) {
                    this.setState({
                        mini: !0
                    }), this.props.beginPersistingPlayer(), e && this.trackMiniPlayerAction(k.OpenMini, e)
                }, t.prototype.transitionToAnchoredPlayer = function(e) {
                    this.setState({
                        mini: !1
                    }), this.props.stopPersistingPlayer(), e && this.trackMiniPlayerAction(k.CloseMini, e)
                }, t.prototype.reposition = function() {
                    var e = this.state.forcePresentationRender;
                    this.setState({
                        forcePresentationRender: e ? e + 1 : 1
                    })
                }, t
            }(l.Component),
            C = Object(c.f)(E);
        var T = Object(i.b)(function(e) {
                return {
                    isLoggedIn: Object(o.d)(e)
                }
            }, function(e) {
                return Object(r.b)({
                    beginPersistingPlayer: a.k,
                    stopPersistingPlayer: a.r
                }, e)
            })(C),
            w = n("KSGD"),
            O = n("VAT8"),
            I = null,
            D = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        userHasDismissedContent: !1
                    }, n.logger = d.i.withCategory("PersistentPlayer"), n.setDomRef = function(e) {
                        return n.domRef = e
                    }, n.onMiniPlayerDismiss = function() {
                        n.transitionToAnchoredPlayer(y.UserMinimize), n.setState({
                            userHasDismissedContent: !0
                        })
                    }, n.onMiniPlayerExpand = function() {
                        n.context.scrollToTop()
                    }, n.getPersistentPlayerOverrides = function() {
                        return {
                            onMiniPlayerDismiss: n.onMiniPlayerDismiss,
                            onMiniPlayerExpand: n.onMiniPlayerExpand
                        }
                    }, I && n.logger.error(new Error, "there should only ever be one <PersistentPlayer> rendered at a time. Verify that no other component above or below this in the tree has rendered one as well."), I = n, n
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    _ || this.logger.error(new Error, "No <PersistentPlayerRoot> found. Make sure it is mounted in the Root component"), this.unregister = this.context.registerReceiver(this), _.requestVideoContent({
                        ref: this.domRef,
                        options: this.props,
                        overrides: this.getPersistentPlayerOverrides(),
                        onCompletion: function() {
                            return e.transitionToAnchoredPlayer()
                        }
                    }), this.props.repositionPlayerRef && this.props.repositionPlayerRef(this.reposition)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    _.requestVideoContent({
                        ref: this.domRef,
                        options: e,
                        overrides: this.getPersistentPlayerOverrides()
                    }), e.repositionPlayerRef && e.repositionPlayerRef !== this.props.repositionPlayerRef && e.repositionPlayerRef(this.reposition)
                }, t.prototype.componentWillUnmount = function() {
                    var e = this;
                    if (this.unregister(), this.props.repositionPlayerRef && this.props.repositionPlayerRef(null), this.props.disablePersistenceOnUnmount || this.state.userHasDismissedContent || !this.props.persistentPlayerEnabled) return _.destroyPlayer(), void(I = null);
                    var t = this.props,
                        n = t.playerProps,
                        i = t.miniPlayerTitle,
                        r = t.miniPlayerContentRoute,
                        a = {
                            playerProps: {
                                channelLogin: n.channelLogin,
                                hostChannel: n.hostChannel,
                                collectionID: n.collectionID,
                                disableTheatreButton: n.disableTheatreButton,
                                nextVideoOffset: n.nextVideoOffset,
                                playerTypeOverride: n.playerTypeOverride,
                                vodID: n.vodID,
                                attachToWindow: n.attachToWindow
                            },
                            miniPlayerTitle: i,
                            miniPlayerContentRoute: r
                        };
                    _.requestVideoContent({
                        ref: this.domRef,
                        options: a,
                        onCompletion: function() {
                            return e.transitionToMiniPlayer(y.Minimize)
                        }
                    }), I = null
                }, t.prototype.render = function() {
                    return l.createElement(f._25, {
                        background: f.m.Alt2,
                        position: f._9.Absolute,
                        attachBottom: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        attachTop: !0,
                        refDelegate: this.setDomRef,
                        "data-target": "persistent-player-content",
                        className: Object(O.a)(this.props.theme)
                    })
                }, t.prototype.transitionToMiniPlayer = function(e) {
                    _.transitionToMiniPlayer(e)
                }, t.prototype.transitionToAnchoredPlayer = function(e) {
                    _.transitionToAnchoredPlayer(e)
                }, t.prototype.isMini = function() {
                    return _.state.mini
                }, t.prototype.checkVisible = function(e, t) {
                    var n = this.context.getScrollContent();
                    if (t && n) {
                        var i = this.domRef.getBoundingClientRect(),
                            r = n.getBoundingClientRect(),
                            a = i.top + i.height - r.top;
                        a <= 100 && this.props.persistentPlayerEnabled && !this.isMini() && !this.props.disablePersistenceOnScroll && !this.state.userHasDismissedContent && this.transitionToMiniPlayer(y.Minimize), a > 100 && (this.isMini() && this.transitionToAnchoredPlayer(y.Maximize), this.state.userHasDismissedContent && this.setState({
                            userHasDismissedContent: !1
                        }))
                    }
                }, t.prototype.reposition = function() {
                    _.reposition()
                }, t.contextTypes = {
                    registerReceiver: w.func,
                    getScrollContent: w.func,
                    scrollToTop: w.func
                }, t
            }(l.Component);
        var P = Object(i.b)(function(e) {
            return {
                theme: e.ui.theme,
                persistentPlayerEnabled: e.ui.persistentPlayerEnabled
            }
        })(D);
        n.d(t, "b", function() {
            return T
        }), n.d(t, "a", function() {
            return P
        }), n.d(t, !1, function() {
            return y
        })
    },
    BVQ1: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "SendWhisper"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SendWhisperInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "sendWhisper"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "content"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "content"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "emotes"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "emoteID"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "setID"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "from"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "to"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "from"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "sentAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "editedAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "deletedAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 191
            }
        };
        n.loc.source = {
            body: "mutation SendWhisper($input: SendWhisperInput!) {\nsendWhisper(input: $input) {\nmessage {\nid\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n}\n}\nfrom {\nid\n}\nsentAt\neditedAt\ndeletedAt\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Bir6: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")
        }
    },
    CF9R: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FollowedChannels"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "limit"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Int"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "cursor"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "sort"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "StreamSort"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "follows"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "limit"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "after"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "cursor"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "displayName"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "login"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "profileImageURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "70"
                                                            }
                                                        }],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "stream"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "title"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "viewersCount"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "game"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "lastBroadcast"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "game"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "pageInfo"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "hasNextPage"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "followedLiveUsers"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "limit"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "sort"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "sort"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "nodes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "login"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "profileImageURL"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "width"
                                                    },
                                                    value: {
                                                        kind: "IntValue",
                                                        value: "70"
                                                    }
                                                }],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "stream"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "title"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "viewersCount"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "game"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "type"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "lastBroadcast"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "game"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 521
            }
        };
        n.loc.source = {
            body: "query FollowedChannels($limit: Int $cursor: Cursor $sort: StreamSort) {\ncurrentUser {\nid\nfollows(first: $limit after: $cursor) {\nedges {\ncursor\nnode {\nid\ndisplayName\nlogin\nprofileImageURL(width: 70)\nstream {\nid\ntitle\nviewersCount\ngame {\nid\nname\n}\n}\nlastBroadcast {\nid\ngame {\nid\nname\n}\n}\n}\n}\npageInfo {\nhasNextPage\n}\n}\nfollowedLiveUsers(first: $limit sort: $sort) {\nnodes {\nid\ndisplayName\nlogin\nprofileImageURL(width: 70)\nstream {\nid\ntitle\nviewersCount\ngame {\nid\nname\n}\ntype\n}\nlastBroadcast {\nid\ngame {\nid\nname\n}\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    CFVp: function(e, t, n) {
        "use strict";
        t.a = function() {
            if (!l) {
                var e = [],
                    t = {};
                Object.keys(a).forEach(function(n) {
                    var i = d(n, a[n]);
                    e.push(i), t[n.toLowerCase()] = i
                }), l = {
                    orderedActions: e,
                    indexedActions: t
                }
            }
            return l
        }, t.b = function() {
            c || (c = function(e) {
                if (l) return l.indexedActions[e.toLowerCase()];
                return d(e, a[e])
            }("Cheer"));
            return c
        };
        var i = n("I89S"),
            r = n("3iBR"),
            a = {
                Cheer: r.d,
                Kreygasm: r.d,
                Kappa: r.d,
                Muxy: r.e,
                Streamlabs: r.e,
                SwiftRage: r.d,
                VoHiYo: r.d
            },
            o = ["LIGHT", "DARK"],
            s = [1, 1.5, 2, 3, 4],
            l = null;
        var c = null;

        function d(e, t) {
            var n = [i.a.Red, i.a.Blue, i.a.Green, i.a.Purple, i.a.Gray],
                r = new Map,
                a = [];
            if ("Cheer" === e) {
                var o = u(e, i.a.Yellow);
                r.set(i.a.Yellow, o), a.push(o)
            }
            return a.push.apply(a, n.map(function(t) {
                var n = u(e, t);
                return r.set(t, n), n
            })), {
                prefix: e,
                type: t,
                tiers: a,
                orderedTiers: a,
                indexedTiers: r
            }
        }

        function u(e, t) {
            for (var n = [], i = {}, a = 0, l = o; a < l.length; a++)
                for (var c = l[a], d = 0, u = s; d < u.length; d++) {
                    var m = u[d];
                    i[c] || (i[c] = {
                        animated: new Map,
                        static: new Map
                    });
                    var h = p(e, c, !0, t, m);
                    n.push(h), i[c].animated.set(m, h.url);
                    var g = p(e, c, !1, t, m);
                    n.push(g), i[c].static.set(m, g.url)
                }
            return {
                id: e + ";" + t,
                bits: t,
                color: r.f[t],
                images: n,
                indexedImages: i
            }
        }

        function p(e, t, n, i, r) {
            var a = n ? "gif" : "png";
            return {
                theme: t,
                isAnimated: n,
                dpiScale: r,
                url: "https://d3aqoihi2n8ty8.cloudfront.net/actions/" + e.toLowerCase() + "/" + t.toLowerCase() + "/" + (n ? "animated" : "static") + "/" + i + "/" + r + "." + a
            }
        }
    },
    CwIZ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return l
        }), t.b = function(e) {
            return i.__awaiter(this, void 0, void 0, function() {
                var t, n, l, c, d, u, p, m, h, g, f, v, b;
                return i.__generator(this, function(i) {
                    switch (i.label) {
                        case 0:
                            t = r.m.getVideoPlayerTrackingData().vodID, n = !!t, l = {
                                channelID: e.channelID,
                                withVideo: !1
                            }, n && (l.withVideo = !0, l.videoID = t), c = null, i.label = 1;
                        case 1:
                            return i.trys.push([1, 3, , 4]), [4, r.n.apollo.client.query({
                                query: s,
                                variables: l
                            })];
                        case 2:
                            return c = i.sent(), [3, 4];
                        case 3:
                            return d = i.sent(), r.i.error(d, "Failed to make query for channel info in FollowEvent reporting.", {
                                channelID: e.channelID
                            }), [3, 4];
                        case 4:
                            return u = c && c.data && c.data.user || null, c && !u && r.i.error(new Error("GraphQL empty response"), "Query for channel info in SubEvent reporting returned no data.", {
                                channelID: e.channelID
                            }), p = null, c && n && ((m = c && c.data && c.data.video) ? p = Object(o.a)(m.broadcastType) : r.i.error(new Error("GraphQL empty response"), "Query for video info in SubEvent reporting returned no data.", {
                                currentVideoID: t
                            })), h = u && u.self, g = h ? !!h.subscriptionBenefit : null, f = h && h.subscriptionBenefit && h.subscriptionBenefit.purchasedWithPrime || !1, v = h ? h.canPrimeSubscribe : null, b = {
                                action: e.action,
                                can_subscribe: v,
                                channel: e.channelLogin,
                                channel_id: e.channelID,
                                checkout_button_tier: e.checkoutButtonTier,
                                has_sub_credit: e.hasSubCredit,
                                host_channel: e.hostChannelLogin,
                                host_channel_id: e.hostChannelID,
                                is_menu_open: e.isMenuOpen,
                                is_subscribed: g,
                                is_subscribed_current_tier: h && h.subscriptionBenefit && h.subscriptionBenefit.tier,
                                sub_location: e.sub_location,
                                sub_recipient: e.giftRecipient,
                                modal: e.modal,
                                modal_level: e.modalLevel || "",
                                show_prime_content: e.showPrimeContent,
                                show_resub: u ? v && f : null,
                                vod_id: t,
                                vod_type: p,
                                viewport_height: window.innerHeight,
                                viewport_width: window.innerWidth
                            }, r.m.track(a.SpadeEventType.Subscription, b), [2]
                    }
                })
            })
        };
        var i = n("TToO"),
            r = n("6sO2"),
            a = n("vH/s"),
            o = n("xrVp"),
            s = n("3QSP"),
            l = (n.n(s), {
                BuyGiftSub: "buy_gift_sub",
                ClickCheckout: "click_checkout_button",
                ClickMoreSubOptions: "more_options_click",
                ClickGiftSubOptions: "gift_options_click",
                ClickPrimeFAQ: "click_prime_faq",
                ClickSignupForPrime: "click_signup_for_prime",
                ClickBack: "back_top_level",
                CloseSubMenu: "close_subscribe_menu",
                GiftASub: "gift_a_sub",
                OpenSubMenu: "open_subscribe_menu",
                SubWithPrime: "samus_spend_credit"
            })
    },
    CybZ: function(e, t) {},
    DBTH: function(e, t, n) {
        "use strict";
        n.d(t, "g", function() {
            return a
        }), n.d(t, "f", function() {
            return o
        }), n.d(t, "h", function() {
            return s
        }), n.d(t, "j", function() {
            return l
        }), n.d(t, "i", function() {
            return c
        }), n.d(t, "l", function() {
            return d
        }), n.d(t, "k", function() {
            return u
        }), n.d(t, "d", function() {
            return r
        }), n.d(t, "b", function() {
            return m
        }), n.d(t, "a", function() {
            return h
        }), n.d(t, "c", function() {
            return f
        }), n.d(t, "e", function() {
            return v
        }), n.d(t, "q", function() {
            return k
        }), n.d(t, "o", function() {
            return y
        }), n.d(t, "p", function() {
            return S
        }), n.d(t, "n", function() {
            return _
        }), n.d(t, "m", function() {
            return N
        }), n.d(t, "r", function() {
            return E
        });
        var i, r, a = "TWILIGHT_WEB_ONBOARDING_CATEGORIES",
            o = "TWILIGHT_WEB_ONBOARDING_CATEGORIES_ANON_FRONT_PAGE",
            s = "TWILIGHT_WEB_ONBOARDING_CHANNEL_RANKING",
            l = "TWILIGHT_WEB_ONBOARDING_FOLLOWING_FOR_YOU",
            c = "TWILIGHT_WEB_ONBOARDING",
            d = "TWILIGHT_WEB_ONBOARDING_RANDOMIZED_GAMES",
            u = "TWILIGHT_WEB_ONBOARDING_FOLLOW_CATEGORIES";
        ! function(e) {
            e.NoSkip = "no_skip"
        }(i || (i = {})),
        function(e) {
            e.First = "first", e.Last = "last"
        }(r || (r = {}));
        var p, m, h, g = new Set([r.First.toString(), r.Last.toString()]);
        ! function(e) {
            e.Yes = "yes"
        }(p || (p = {})),
        function(e) {
            e.Yes = "yes"
        }(m || (m = {})),
        function(e) {
            e.Games = "games", e.Streams = "streams"
        }(h || (h = {}));
        var f, v, b = new Set([h.Games.toString(), h.Streams.toString()]);
        ! function(e) {
            e.ENABLED = "enabled"
        }(f || (f = {})),
        function(e) {
            e.ENABLED = "enabled"
        }(v || (v = {}));
        var k = function(e) {
                return e === i.NoSkip
            },
            y = function(e) {
                return !!e && g.has(e)
            },
            S = function(e, t) {
                return k(e) && y(t)
            },
            _ = function(e, t, n) {
                return k(e) && y(t) && n === p.Yes
            },
            N = function(e) {
                return !!e && b.has(e)
            },
            E = function(e) {
                return e.getTime() >= C().getTime()
            },
            C = function() {
                return new Date((new Date).getTime() - 12096e5)
            }
    },
    DCOT: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            var n = s[e.threadID];
            if (n) {
                if (n.lastReadCursorID >= t) return;
                clearTimeout(n.timeoutHandle)
            }
            var l = setTimeout(function() {
                var t = i.__assign({
                    mutation: o
                }, Object(a.a)({
                    threadID: e.threadID,
                    lastReadMessageID: e.lastReadMessageID
                }), {
                    optimisticResponse: {
                        updateWhisperThread: {
                            thread: {
                                __typename: "WhisperThread",
                                id: e.threadID,
                                unreadMessagesCount: 0
                            },
                            __typename: "UpdateWhisperThreadPayload"
                        }
                    }
                });
                r.n.apollo.client.mutate(t), delete s[e.threadID]
            }, 250);
            s[e.threadID] = {
                timeoutHandle: l,
                lastReadCursorID: t
            }
        };
        var i = n("TToO"),
            r = n("6sO2"),
            a = n("oIkB"),
            o = n("EBeM"),
            s = (n.n(o), {})
    },
    "DMR/": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RecommendedChannels"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "first"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Int"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "recID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "language"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "recommendations"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "liveRecommendations"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "first"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "first"
                                                }
                                            }
                                        }, {
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "recRequestID"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "recID"
                                                }
                                            }
                                        }, {
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "language"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "language"
                                                }
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "generationID"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "responseID"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nodes"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "broadcaster"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "displayName"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "login"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "profileImageURL"
                                                                },
                                                                arguments: [{
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "width"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "70"
                                                                    }
                                                                }],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "game"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 315
            }
        };
        n.loc.source = {
            body: "query RecommendedChannels($first: Int $recID: String! $language: String!) {\ncurrentUser {\nid\nrecommendations {\nliveRecommendations (first: $first recRequestID: $recID language: $language) {\ngenerationID\nresponseID\nnodes {\nid\nbroadcaster {\nid\ndisplayName\nlogin\nprofileImageURL(width: 70)\n}\ngame {\nid\nname\n}\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Di3n: function(e, t) {},
    DquS: function(e, t) {},
    DtWM: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("6sO2"),
            o = (n("SX5d"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.logger = a.n.logger.withCategory("resize-detector"), t.onScroll = function() {
                        var e = t.container,
                            n = e.offsetWidth,
                            i = e.offsetHeight,
                            r = e.offsetLeft,
                            a = e.offsetTop;
                        t.logger.debug("Resize Detector -- onScroll"), n === t.width && i === t.height && a === t.top && r === t.left || (t.width = n, t.height = i, t.props.onResize(n, i, a, r)), t.reset()
                    }, t.setGrowDivRef = function(e) {
                        return t.growDiv = e
                    }, t.setGrowChildDivRef = function(e) {
                        return t.growChildDiv = e
                    }, t.setShrinkDivRef = function(e) {
                        return t.shrinkDiv = e
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement("div", {
                        className: "resize-detector"
                    }, r.createElement("div", {
                        className: "resize-detector",
                        ref: this.setGrowDivRef
                    }, r.createElement("div", {
                        className: "resize-detector__grow",
                        ref: this.setGrowChildDivRef
                    })), r.createElement("div", {
                        className: "resize-detector",
                        ref: this.setShrinkDivRef
                    }, r.createElement("div", {
                        className: "resize-detector__shrink"
                    })))
                }, t.prototype.componentDidMount = function() {
                    if (this.growDiv) {
                        this.growDiv.parentElement || this.logger.warn("growDiv.parentElement is undefined!"), this.container = this.growDiv.parentElement.parentElement;
                        var e = this.container.style.position;
                        "relative" !== e && "absolute" !== e && "fixed" !== e && "static" === window.getComputedStyle(this.container).getPropertyValue("position") && (this.container.style.position = "relative"), this.onScroll(), this.growDiv.addEventListener("scroll", this.onScroll), this.shrinkDiv.addEventListener("scroll", this.onScroll)
                    } else this.logger.warn("growDiv is undefined!")
                }, t.prototype.componentWillUnmount = function() {
                    this.growDiv.removeEventListener("scroll", this.onScroll), this.shrinkDiv.removeEventListener("scroll", this.onScroll)
                }, t.prototype.reset = function() {
                    var e = this.growDiv,
                        t = this.shrinkDiv,
                        n = this.growChildDiv.style;
                    n.width = "100000px", n.height = "100000px", e.scrollLeft = 1e5, e.scrollTop = 1e5, t.scrollLeft = 1e5, t.scrollTop = 1e5
                }, t
            }(r.Component));
        n.d(t, "a", function() {
            return o
        })
    },
    "E+ZP": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Game_FollowGameCard"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "name"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "String"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "game"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "name"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "follow"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "followedAt"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 100
            }
        };
        n.loc.source = {
            body: "query Game_FollowGameCard($name: String) {\ngame(name: $name) {\nid\nself {\nfollow {\nfollowedAt\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    E9Qg: function(e, t, n) {
        e.exports = n.p + "assets/bg_glitch_pattern-34ca2e369aad1ed33b57f3d2d59c70eb.png"
    },
    EBeM: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Whispers_MarkThreadMessageRead"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateWhisperThreadInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "unreadMessagesCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 151
            }
        };
        n.loc.source = {
            body: "mutation Whispers_MarkThreadMessageRead($input: UpdateWhisperThreadInput!) {\nupdateWhisperThread(input: $input) {\nthread {\nid\nunreadMessagesCount\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "Ex+h": function(e, t, n) {
        "use strict";
        var i, r;
        n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return r
            }),
            function(e) {
                e.Playing = "PLAYING", e.Streaming = "BROADCASTING", e.Watching = "WATCHING"
            }(i || (i = {})),
            function(e) {
                e.Playing = "playing", e.Streaming = "broadcasting", e.Watching = "watching"
            }(r || (r = {}))
    },
    FDYX: function(e, t, n) {
        "use strict";
        t.d = function(e) {
            return e.some(function(e) {
                return !!e.self && !!e.self.promotion
            })
        }, t.c = function(e) {
            return e.some(function(e) {
                return !!e.giftPromotion
            })
        }, t.a = function(e, t) {
            var n;
            t ? n = e.giftPromotion : e.self && (n = e.self.promotion);
            if (n) return n.newPrice;
            return e.price
        }, t.b = function(e, t) {
            var n;
            t ? n = e.giftPromotion : e.self && (n = e.self.promotion);
            if (n) return n.discountValue;
            return 0
        }
    },
    GHQc: function(e, t) {},
    GfPd: function(e, t, n) {
        "use strict";
        var i, r = n("TToO"),
            a = n("HW6M"),
            o = n("GiK3"),
            s = n("NXs7"),
            l = n("VAT8"),
            c = n("Odds"),
            d = (n("Z+Fq"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    var e, t = ((e = {})[Object(l.c)(s.a.Dark)] = this.props.forceDarkTheme, e);
                    return o.createElement(c._2, {
                        className: a("rich-content-tooltip", t)
                    }, this.props.children, o.createElement(c.p, {
                        show: this.props.show,
                        direction: this.props.balloonDirection || c.q.Right,
                        tailOffset: this.props.balloonDirection !== c.q.RightCenter ? 16 : 0
                    }, o.createElement("div", {
                        ref: this.props.refCallback,
                        className: "rich-content-tooltip__pointer-target"
                    }, o.createElement(c._2, {
                        padding: .5
                    }, this.props.content))))
                }, t
            }(o.Component)),
            u = n("6sO2"),
            p = (n("1Krm"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        isError: !1,
                        options: null,
                        richOptions: null,
                        hovering: !1
                    }, n.logger = u.n.logger.withCategory("tooltip-layer"), n.clearTimeoutAndRun = function(e, t) {
                        void 0 === t && (t = 0), n.displayTimeout && (clearTimeout(n.displayTimeout), n.displayTimeout = 0), n.displayTimeout = setTimeout(function() {
                            e(), n.displayTimeout = 0
                        }, t)
                    }, n.setRef = function(e) {
                        n.removeEventListeners(), n.addEventListeners(e), n.ref = e
                    }, n.addEventListeners = function(e) {
                        e && (e.addEventListener("mouseenter", n.handleMouseEnter), e.addEventListener("mouseleave", n.handleMouseLeave), e.addEventListener("click", n.handleMouseClick))
                    }, n.removeEventListeners = function() {
                        n.ref && (n.ref.removeEventListener("mouseenter", n.handleMouseEnter), n.ref.removeEventListener("mouseleave", n.handleMouseLeave), n.ref.removeEventListener("click", n.handleMouseClick))
                    }, n.handleMouseEnter = function() {
                        n.setState({
                            hovering: !0
                        })
                    }, n.handleMouseLeave = function() {
                        n.setState({
                            hovering: !1
                        }, function() {
                            n.displayTimeout || n.hideTooltip()
                        })
                    }, n.handleMouseClick = function() {
                        n.setState({
                            hovering: !1
                        }, function() {
                            n.hideTooltip(!0)
                        })
                    }, i = n, n
                }
                return r.__extends(t, e), t.prototype.componentDidCatch = function(e, t) {
                    var n = this;
                    this.setState({
                        isError: !0
                    }, function() {
                        n.logger.error(e, "A unhandled exception occurred in the component hierarchy", {
                            info: t
                        })
                    })
                }, t.prototype.render = function() {
                    if (this.state.isError) return null;
                    var e = this.state.options && this.state.options.from || this.state.richOptions && this.state.richOptions.from;
                    if (!e) return null;
                    var t = this.state.richOptions ? 2 : 0,
                        n = e.getBoundingClientRect(),
                        i = {
                            left: n.left,
                            top: n.top,
                            width: n.width + t,
                            height: n.height
                        },
                        r = o.createElement("div", {
                            style: {
                                width: i.width,
                                height: i.height
                            }
                        }),
                        a = null;
                    return this.state.options ? a = o.createElement(c._43, {
                        direction: this.state.options.direction,
                        align: this.state.options.align,
                        label: this.state.options.label,
                        show: !0
                    }, r) : this.state.richOptions && (a = o.createElement(d, {
                        content: this.state.richOptions.richContent,
                        refCallback: this.state.richOptions.allowHover && this.setRef || void 0,
                        forceDarkTheme: this.state.richOptions.forceDarkTheme,
                        balloonDirection: this.state.richOptions.balloonDirection,
                        show: !0
                    }, r)), o.createElement("div", {
                        className: "tooltip-layer",
                        style: i
                    }, a)
                }, t.prototype.showTooltip = function(e) {
                    var t = this;
                    this.clearTimeoutAndRun(function() {
                        t.setState({
                            options: e,
                            richOptions: null
                        })
                    }), this.hoverTimeout && (clearTimeout(this.hoverTimeout), this.hoverTimeout = 0)
                }, t.prototype.showRichTooltip = function(e) {
                    var t = this;
                    this.clearTimeoutAndRun(function() {
                        t.setState({
                            richOptions: e,
                            options: null
                        })
                    }, e && e.delayOpenMS && !this.hoverTimeout ? e.delayOpenMS : 0), this.hoverTimeout && (clearTimeout(this.hoverTimeout), this.hoverTimeout = 0)
                }, t.prototype.hideTooltip = function(e) {
                    var t = this;
                    e || this.state.hovering || this.displayTimeout || (this.hoverTimeout = setTimeout(function() {
                        clearTimeout(t.hoverTimeout), t.hoverTimeout = 0
                    }, 1e3)), this.clearTimeoutAndRun(function() {
                        t.state.hovering || t.setState({
                            options: null,
                            richOptions: null
                        })
                    }, !e && this.state.richOptions && this.state.richOptions.allowHover ? 400 : 0)
                }, t
            }(o.Component));

        function m() {
            return function(e) {
                return function(t) {
                    function n() {
                        var e = null !== t && t.apply(this, arguments) || this;
                        return e.logger = u.i.withCategory("TooltipLayer"), e.show = function(t) {
                            i ? i.showTooltip(t) : e.logger.error(new Error, "Attempted to show a tooltip in the global layer, but the global layer was not mounted.")
                        }, e.showRich = function(t) {
                            i ? i.showRichTooltip(t) : e.logger.error(new Error, "Attempted to show a tooltip in the global layer, but the global layer was not mounted.")
                        }, e.hide = function() {
                            i ? i.hideTooltip() : e.logger.error(new Error, "Attempted to show a tooltip in the global layer, but the global layer was not mounted.")
                        }, e
                    }
                    return r.__extends(n, t), n.prototype.render = function() {
                        var t = {
                            tooltipLayer: {
                                show: this.show,
                                showRich: this.showRich,
                                hide: this.hide
                            }
                        };
                        return o.createElement(e, r.__assign({}, this.props, t))
                    }, n
                }(o.Component)
            }
        }
        n.d(t, "a", function() {
            return d
        }), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "c", function() {
            return m
        }), n.d(t, "b", function() {
            return p
        }), n.d(t, !1, function() {})
    },
    GiGb: function(e, t) {},
    GxF8: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "WhisperThread_ReportUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportWhisperThreadInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "reportWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 125
            }
        };
        n.loc.source = {
            body: "mutation WhisperThread_ReportUser($input: ReportWhisperThreadInput!) {\nreportWhisperThread(input: $input) {\nthread {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    H4lr: function(e, t, n) {
        "use strict";
        var i, r = n("TToO"),
            a = n("GiK3"),
            o = n("6sO2"),
            s = n("Odds"),
            l = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        content: null,
                        isError: !1
                    }, n.logger = o.i.withCategory("StickyFooterRoot"), n.displayContent = function(e) {
                        n.setState({
                            content: e
                        })
                    }, n.hideContent = function() {
                        n.setState({
                            content: null
                        })
                    }, i && n.logger.error(new Error("StickyFooterRoot is already mounted."), "StickyFooterRoot is already mounted. There should only be one of these mounted at a time."), i = n, n
                }
                return r.__extends(t, e), t.prototype.componentDidCatch = function(e, t) {
                    var n = this;
                    this.setState({
                        isError: !0
                    }, function() {
                        n.logger.error(e, "A unhandled exception occurred in the component hierarchy", {
                            info: t
                        })
                    })
                }, t.prototype.componentWillUnmount = function() {
                    i = null
                }, t.prototype.render = function() {
                    return this.state.isError || !this.state.content ? null : a.createElement(s._2, null, this.state.content)
                }, t
            }(a.Component),
            c = null,
            d = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    if (c) {
                        var i = "There may only be one StickyFooter mounted at a time.";
                        o.i.error(new Error(i), i)
                    }
                    return c = n, n
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    i && i.displayContent(this.props.children)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    i && (e.children ? i.displayContent(e.children) : i.hideContent())
                }, t.prototype.componentWillUnmount = function() {
                    i && i.hideContent(), c = null
                }, t.prototype.render = function() {
                    return null
                }, t
            }(a.Component);
        n.d(t, "b", function() {
            return l
        }), n.d(t, "a", function() {
            return d
        })
    },
    HZww: function(e, t, n) {
        "use strict";
        t.d = function(e) {
            return r.PubsubTopic.ChatRoom + "." + e
        }, t.e = function(e) {
            return r.PubsubTopic.ChatRoomsChannel + "." + e
        }, t.f = function(e) {
            return r.PubsubTopic.ChatRoomsUser + "." + e
        }, t.i = function(e) {
            return r.PubsubTopic.ImageUpload + "." + e
        }, t.q = function(e) {
            return r.PubsubTopic.UploadService + "." + e
        }, t.w = function(e) {
            return r.PubsubTopic.VideoPlaybackById + "." + e
        }, t.l = function(e) {
            return r.PubsubTopic.Presence + "." + e
        }, t.j = function(e, t) {
            return r.PubsubTopic.ModerationActionsByUserAndChannel + "." + e + "." + t
        }, t.m = function(e) {
            return r.PubsubTopic.Raid + "." + e
        }, t.g = function(e) {
            return r.PubsubTopic.Friendship + "." + e
        }, t.b = function(e) {
            return r.PubsubTopic.ChannelBitsPinEvents + "." + e
        }, t.a = function(e) {
            return r.PubsubTopic.BitsLeaderboardEvents + "." + e.id
        }, t.r = function(e) {
            return r.PubsubTopic.UserBitsUpdates + "." + e
        }, t.v = function(e) {
            return r.PubsubTopic.UserSubscribeEvents + "." + e
        }, t.u = function(e) {
            return r.PubsubTopic.UserCrateEvents + "." + e
        }, t.h = function(e) {
            return r.PubsubTopic.CampaignGlobalEvents + "." + e
        }, t.s = function(e) {
            return r.PubsubTopic.CampaignUserEvents + "." + e
        }, t.t = function(e) {
            return r.PubsubTopic.UserCommerceEvents + "." + e
        }, t.x = function(e) {
            return r.PubsubTopic.Whispers + "." + e
        }, t.k = function(e) {
            return r.PubsubTopic.OnsiteNotifications + "." + e
        }, t.n = function(e) {
            return r.PubsubTopic.StreamChatRoom + "." + e
        }, t.c = function(e) {
            return r.PubsubTopic.ChannelEventUpdates + "." + e
        }, t.p = function(e) {
            return i.j.subscribe({
                topic: e.topic,
                onMessage: function(t) {
                    t.type && !e.type && !e.types || t.type && e.type && t.type !== e.type || t.type && e.types && !e.types.includes(t.type) || Object(a.d)(e.query, e.variables, function(n) {
                        return e.mutator(t, n)
                    }, function(n) {
                        return !!e.skipMessage && e.skipMessage(t, n)
                    })
                }
            })
        }, t.o = function(e) {
            return i.j.subscribe({
                topic: e.topic,
                onMessage: function(t) {
                    t.type && t.type !== e.type || Object(a.c)({
                        fragment: e.fragment,
                        id: e.id,
                        mutator: function(n) {
                            return e.mutator(t, n)
                        }
                    })
                }
            })
        };
        var i = n("6sO2"),
            r = n("aMxy"),
            a = n("oIkB")
    },
    Hcc4: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FollowedChannels_CurrentUser_FollowedVideos"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "videoTypes"
                        }
                    },
                    type: {
                        kind: "ListType",
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "BroadcastType"
                                }
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "followedVideos"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "100"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "types"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "videoTypes"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "title"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "viewCount"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "publishedAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "previewThumbnailURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "126"
                                                            }
                                                        }, {
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "height"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "71"
                                                            }
                                                        }],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "owner"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "displayName"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "self"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "viewingHistory"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "position"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 308
            }
        };
        n.loc.source = {
            body: "query FollowedChannels_CurrentUser_FollowedVideos($videoTypes: [BroadcastType!]) {\ncurrentUser {\nid\nfollowedVideos(first: 100 types: $videoTypes) {\nedges {\nnode {\nid\ntitle\nviewCount\npublishedAt\npreviewThumbnailURL(width: 126 height: 71)\nowner {\nid\ndisplayName\n}\nself {\nviewingHistory {\nposition\n}\n}\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    I4TS: function(e, t) {},
    I89S: function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e[e.Gray = 1] = "Gray", e[e.Purple = 100] = "Purple", e[e.Green = 1e3] = "Green", e[e.Blue = 5e3] = "Blue", e[e.Red = 1e4] = "Red", e[e.Yellow = 1e5] = "Yellow"
            }(i || (i = {}))
    },
    IOwa: function(e, t, n) {
        "use strict";
        var i, r, a, o = n("TToO"),
            s = n("HW6M"),
            l = n("GiK3"),
            c = n("6sO2"),
            d = n("2o2f"),
            u = n("Odds"),
            p = (n("CybZ"), (i = {})[d.a.Live] = "stream-type-indicator--live", i[d.a.Premiere] = "stream-type-indicator--premiere", i[d.a.Rerun] = "stream-type-indicator--rerun", i[d.a.WatchParty] = "stream-type-indicator--rerun", i),
            m = ((r = {})[d.a.Premiere] = u._16.VideoPremiere, r[d.a.Rerun] = u._16.VideoRerun, r[d.a.WatchParty] = u._16.VideoRerun, r),
            h = ((a = {})[d.a.Premiere] = u._17.Live, a[d.a.Rerun] = u._17.Inherit, a[d.a.WatchParty] = u._17.Inherit, a),
            g = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return o.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(u._25, {
                        className: this.getClassNames(),
                        color: u.I.Overlay,
                        background: u.m.Overlay,
                        padding: {
                            x: .5
                        },
                        borderRadius: u.s.Small,
                        display: u.N.Flex
                    }, l.createElement(u._2, {
                        display: u.N.Flex,
                        alignItems: u.c.Center,
                        margin: {
                            right: .5
                        }
                    }, this.getIcon()), l.createElement(u._35, {
                        type: u._40.Span
                    }, this.getLabel()))
                }, t.prototype.getClassNames = function() {
                    var e = {
                        "stream-type-indicator": !0
                    };
                    return e[p[this.props.type]] = !0, s(e)
                }, t.prototype.getIcon = function() {
                    return this.props.hosting ? l.createElement(u._25, {
                        borderRadius: u.s.Rounded,
                        className: "stream-type-indicator__hosting-dot"
                    }) : this.props.type === d.a.Live ? l.createElement(u._2, {
                        className: "stream-type-indicator__live-wrapper",
                        display: u.N.Flex,
                        alignItems: u.c.Center
                    }, l.createElement(u.E, {
                        status: u.G.Live,
                        size: u.F.Small
                    })) : l.createElement(u._15, {
                        asset: m[this.props.type],
                        type: h[this.props.type],
                        width: 14,
                        height: 14
                    })
                }, t.prototype.getLabel = function() {
                    if (this.props.hosting) return Object(c.d)("Hosting", "StreamTypeIndicator");
                    switch (this.props.type) {
                        case d.a.Live:
                            return Object(c.d)("Live", "StreamTypeIndicator");
                        case d.a.Premiere:
                            return Object(c.d)("Premiere", "StreamTypeIndicator");
                        case d.a.Rerun:
                        case d.a.WatchParty:
                            return Object(c.d)("Rerun", "StreamTypeIndicator");
                        default:
                            return ""
                    }
                }, t
            }(l.Component);
        n.d(t, "a", function() {
            return g
        })
    },
    IfJQ: function(e, t) {},
    Iv9R: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Whispers_Thread_Participants"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetUserID"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "blockedUsers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "chatColor"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "friends"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "availability"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "activity"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "type"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Playing"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "game"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Streaming"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "stream"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "game"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "name"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Watching"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "user"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "displayName"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "login"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "hosting"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "displayName"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetUserID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "title"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "imageURL"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "chatColor"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 503
            }
        };
        n.loc.source = {
            body: "query Whispers_Thread_Participants($targetUserID: ID) {\ncurrentUser {\nid\nblockedUsers {\nid\n}\nchatColor\ndisplayName\nprofileImageURL(width: 70)\nlogin\nfriends {\nedges {\nnode {\nid\n}\navailability\nactivity {\ntype\n... on Playing {\ngame {\nid\nname\n}\n}\n... on Streaming {\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n... on Watching {\nuser {\nid\ndisplayName\nlogin\nhosting {\nid\ndisplayName\n}\n}\n}\n}\n}\n}\n}\nuser(id: $targetUserID) {\nid\ndisplayBadges {\nid\ntitle\nimageURL\n}\nchatColor\ndisplayName\nprofileImageURL(width: 70)\nlogin\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    JpYe: function(e, t, n) {
        "use strict";
        t.e = function(e, t, n, r) {
            var o = r || l(t),
                d = "";
            o && (d = "?sort=" + function(e) {
                switch (e) {
                    case s.b:
                        return i.Popular;
                    case s.a:
                        return i.Newest;
                    default:
                        var t = e;
                        return t
                }
            }(o));
            var u = n ? n.toLowerCase() : function(e) {
                var t = c(e);
                return t ? t.toLowerCase() : "all"
            }(t);
            a.n.history.push(e + "/" + u + d)
        }, t.d = l, t.c = c, t.a = function(e) {
            var t = r.parse(e.location.search);
            return e.match.params.collectionID || t.collection || ""
        }, t.f = d, t.b = function(e) {
            if ("" === e) return "";
            if (e.startsWith("v")) return e;
            return "v" + e
        };
        var i, r = n("OAwv"),
            a = (n.n(r), n("6sO2")),
            o = n("6WAQ"),
            s = n("3yQz");

        function l(e) {
            return d(r.parse(e.location.search).sort || "")
        }

        function c(e) {
            switch (e.match.params.filter) {
                case o.a.Archive.toLowerCase():
                    return o.a.Archive;
                case o.a.Highlight.toLowerCase():
                    return o.a.Highlight;
                case o.a.Upload.toLowerCase():
                    return o.a.Upload;
                case o.a.PastPremiere.toLowerCase():
                    return o.a.PastPremiere;
                default:
                    return
            }
        }

        function d(e) {
            switch (e.toUpperCase()) {
                case s.b:
                    return s.b;
                case s.a:
                    return s.a;
                default:
                    return null
            }
        }! function(e) {
            e.Popular = "views", e.Newest = "time"
        }(i || (i = {}))
    },
    K1Jg: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Presence_WatchingClick_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hosting"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "stream"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "game"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 158
            }
        };
        n.loc.source = {
            body: "query Presence_WatchingClick_User($login: String!) {\nuser(login: $login) {\nid\nstream {\nid\ngame {\nid\nname\n}\n}\nhosting {\nid\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    KJtg: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "UnblockUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnblockUserInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "unblockUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "targetUser"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 100
            }
        };
        n.loc.source = {
            body: "mutation UnblockUser($input: UnblockUserInput!) {\nunblockUser(input: $input) {\ntargetUser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    KfGW: function(e, t) {},
    Kkxm: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "MinimalTopNav_MinimalUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 93
            }
        };
        n.loc.source = {
            body: "query MinimalTopNav_MinimalUser {\ncurrentUser {\nid\ndisplayName\nprofileImageURL(width: 70)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Kxgf: function(e, t, n) {
        "use strict";
        t.a = function() {
            var e = this;
            return Object(r.a)(s, {
                props: function(t) {
                    return {
                        unblockUserMutation: function(n, r) {
                            return i.__awaiter(e, void 0, void 0, function() {
                                return i.__generator(this, function(e) {
                                    switch (e.label) {
                                        case 0:
                                            return t.mutate ? [4, t.mutate({
                                                variables: {
                                                    input: {
                                                        targetUserID: n
                                                    }
                                                },
                                                optimisticResponse: {
                                                    unblockUser: {
                                                        __typename: "UnblockUserPayload",
                                                        targetUser: {
                                                            __typename: "User",
                                                            id: n
                                                        }
                                                    }
                                                },
                                                update: function(e) {
                                                    var t = e.readFragment({
                                                        id: Object(o.a)(r),
                                                        fragment: a
                                                    });
                                                    t && (t.blockedUsers = t.blockedUsers.filter(function(e) {
                                                        return null !== e && e.id !== n
                                                    }), e.writeFragment({
                                                        id: Object(o.a)(r),
                                                        fragment: a,
                                                        data: t
                                                    }))
                                                }
                                            })] : [3, 2];
                                        case 1:
                                            return e.sent(), [3, 3];
                                        case 2:
                                            throw new Error("unblockUserMutation is not ready");
                                        case 3:
                                            return [2]
                                    }
                                })
                            })
                        }
                    }
                }
            })
        };
        var i = n("TToO"),
            r = n("7vx8"),
            a = n("nmYW"),
            o = (n.n(a), n("yADj")),
            s = n("KJtg");
        n.n(s)
    },
    L3z0: function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.LoadStart = "loadstart", e.Error = "error", e.LoadedMetadata = "loadedmetadata", e.CanPlay = "canplay", e.Playing = "playing", e.Waiting = "waiting", e.Seeking = "seeking", e.Seeked = "seeked", e.Ended = "ended", e.DurationChange = "durationchange", e.TimeUpdate = "timeupdate", e.Play = "play", e.Pause = "pause", e.VolumeChange = "volumechange", e.RateChange = "ratechange"
            }(i || (i = {}))
    },
    "LEV+": function(e, t) {},
    LYwx: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "EmotePicker_EmotePicker_UserSubscriptionProducts"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelOwnerID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelOwnerID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emoteSetID"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 194
            }
        };
        n.loc.source = {
            body: "query EmotePicker_EmotePicker_UserSubscriptionProducts($channelOwnerID: ID!) {\nuser(id: $channelOwnerID) {\nid\nlogin\ndisplayName\nsubscriptionProducts {\nid\nurl\nemotes {\nid\ntoken\n}\nemoteSetID\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Ldv2: function(e, t, n) {
        "use strict";
        t.a = function() {
            return Object(r.a)(o, {
                props: function(e) {
                    if (e.data) {
                        var t = e.data.currentUser && e.data.currentUser.emoteSets,
                            n = t && Object(a.a)(t);
                        return {
                            emoteSetsData: i.__assign({}, e.data, {
                                emoteMap: n,
                                emoteSets: t
                            })
                        }
                    }
                    return {}
                },
                skip: function(e) {
                    return !e.isLoggedIn
                }
            })
        };
        var i = n("TToO"),
            r = n("7vx8"),
            a = n("YhVV"),
            o = n("7B9K");
        n.n(o)
    },
    LgcN: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        }), n.d(t, "b", function() {
            return o
        }), n.d(t, "c", function() {
            return s
        }), n.d(t, "d", function() {
            return l
        });
        var i = n("TToO"),
            r = this,
            a = function() {
                return i.__awaiter(r, void 0, void 0, function() {
                    return i.__generator(this, function(e) {
                        switch (e.label) {
                            case 0:
                                return [4, n.e(88).then(n.bind(null, "tk3B"))];
                            case 1:
                                return [2, e.sent()]
                        }
                    })
                })
            },
            o = function() {
                return i.__awaiter(r, void 0, void 0, function() {
                    return i.__generator(this, function(e) {
                        switch (e.label) {
                            case 0:
                                return [4, n.e(87).then(n.bind(null, "e/M0"))];
                            case 1:
                                return [2, e.sent()]
                        }
                    })
                })
            },
            s = function() {
                return i.__awaiter(r, void 0, void 0, function() {
                    return i.__generator(this, function(e) {
                        switch (e.label) {
                            case 0:
                                return [4, n.e(86).then(n.bind(null, "Dan5"))];
                            case 1:
                                return [2, e.sent()]
                        }
                    })
                })
            },
            l = function() {
                return i.__awaiter(r, void 0, void 0, function() {
                    return i.__generator(this, function(e) {
                        switch (e.label) {
                            case 0:
                                return [4, n.e(85).then(n.bind(null, "sQp1"))];
                            case 1:
                                return [2, e.sent()]
                        }
                    })
                })
            }
    },
    LiYP: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("HW6M"),
            a = n("GiK3"),
            o = n("F8kA"),
            s = n("6sO2"),
            l = n("zCIC"),
            c = n("7vx8"),
            d = n("NXs7"),
            u = n("VAT8"),
            p = n("rK5D"),
            m = n("zNzU"),
            h = n("CSlQ"),
            g = n("RH2O"),
            f = n("hdYS"),
            v = n("5kgt"),
            b = n("SZoP"),
            k = n("GfPd"),
            y = n("Odds"),
            S = (n("WnwY"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.setContainerRef = function(e) {
                        return t.containerRef = e
                    }, t.onMouseEnter = function() {
                        t.containerRef && (t.props.tooltipLabel ? t.props.tooltipLayer.show({
                            label: t.props.tooltipLabel,
                            from: t.containerRef,
                            align: y._44.Center,
                            direction: y._45.Right
                        }) : t.props.tooltipContent && t.props.tooltipLayer.showRich({
                            from: t.containerRef,
                            richContent: t.props.tooltipContent,
                            allowHover: t.props.offline,
                            delayOpenMS: 1e3,
                            forceDarkTheme: !0,
                            balloonDirection: t.props.offline ? y.q.Right : y.q.RightCenter
                        }))
                    }, t.onMouseLeave = function() {
                        t.props.tooltipLayer.hide()
                    }, t.addEventListeners = function() {
                        t.containerRef && (t.containerRef.addEventListener("mouseenter", t.onMouseEnter), t.containerRef.addEventListener("mouseleave", t.onMouseLeave))
                    }, t.removeEventListeners = function() {
                        t.containerRef && (t.containerRef.removeEventListener("mouseenter", t.onMouseEnter), t.containerRef.removeEventListener("mouseleave", t.onMouseLeave))
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive(), this.addEventListeners()
                }, t.prototype.componentWillUnmount = function() {
                    this.removeEventListeners()
                }, t.prototype.render = function() {
                    return this.props.collapsed ? a.createElement("div", {
                        ref: this.setContainerRef,
                        "data-test-selector": "side-nav-card-collapsed"
                    }, a.createElement(y.W, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        display: y.N.Flex,
                        alignItems: y.c.Center,
                        flexWrap: y.Q.NoWrap
                    }, a.createElement(o.a, {
                        to: this.props.linkTo,
                        className: "side-nav-card",
                        onClick: this.props.onClick
                    }, a.createElement(y._2, {
                        className: r("side-nav-card__avatar", {
                            "side-nav-card__avatar--offline": this.props.offline
                        }),
                        flexShrink: 0
                    }, a.createElement(y.l, {
                        src: this.props.avatarSrc,
                        alt: this.props.avatarAlt,
                        size: 30,
                        presenceIndicator: this.props.avatarPresence,
                        presenceStatus: this.props.presenceStatus
                    }))))) : a.createElement("div", {
                        ref: this.setContainerRef
                    }, a.createElement(y._2, {
                        className: "side-nav-card",
                        position: y._9.Relative,
                        display: y.N.Flex,
                        alignItems: y.c.Center
                    }, a.createElement(y.W, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        display: y.N.Flex,
                        alignItems: y.c.Center,
                        flexWrap: y.Q.NoWrap,
                        fullWidth: !0
                    }, a.createElement(o.a, i.__assign({
                        to: this.props.linkTo,
                        className: "side-nav-card__link",
                        onClick: this.props.onClick
                    }, Object(y._53)(this.props)), a.createElement(y._2, {
                        className: r("side-nav-card__avatar", {
                            "side-nav-card__avatar--offline": this.props.offline
                        }),
                        flexShrink: 0,
                        alignItems: y.c.Center
                    }, a.createElement(y.l, {
                        src: this.props.avatarSrc,
                        alt: this.props.avatarAlt,
                        size: 30,
                        presenceIndicator: this.props.avatarPresence,
                        presenceStatus: this.props.presenceStatus
                    })), a.createElement(y._2, {
                        ellipsis: !0,
                        flexDirection: y.P.Column,
                        flexGrow: 1,
                        margin: {
                            left: 1
                        },
                        display: y.N.Flex,
                        "data-a-target": "side-nav-card-metadata"
                    }, a.createElement("div", {
                        className: "side-nav-card__title",
                        title: this.props.title,
                        "data-a-target": "side-nav-title"
                    }, a.createElement(y._35, {
                        ellipsis: !0,
                        fontSize: y.R.Size5
                    }, this.props.titleElement || this.props.title)), a.createElement(y._25, {
                        className: "side-nav-card__metadata",
                        fontSize: y.R.Size6,
                        display: y.N.Flex,
                        justifyContent: y._1.Between,
                        flexWrap: y.Q.NoWrap,
                        ellipsis: !0
                    }, a.createElement(y.W, {
                        flexGrow: 1,
                        "data-a-target": "side-nav-game-title"
                    }, a.createElement(y._35, {
                        type: y._40.Span,
                        ellipsis: !0
                    }, this.props.metadataLeft)), a.createElement(y._2, {
                        flexShrink: 0,
                        margin: {
                            left: .5
                        },
                        "data-a-target": "side-nav-live-status"
                    }, this.props.metadataRight))))), this.getCardSlideInContent()))
                }, t.prototype.getCardSlideInContent = function() {
                    return this.props.slideInContent ? a.createElement(y._2, {
                        className: "side-nav-card__hover-content",
                        position: y._9.Absolute,
                        display: y.N.Flex,
                        alignItems: y.c.Center,
                        attachRight: !0,
                        padding: {
                            right: 1
                        },
                        "data-a-target": "side-nav-card-hover"
                    }, this.props.slideInContent) : null
                }, t = i.__decorate([Object(h.d)("SideNavCard"), Object(k.c)()], t)
            }(a.Component)),
            _ = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.renderGame = function() {
                        return n.props.gameName ? a.createElement(y.W, {
                            flexGrow: 1,
                            display: y.N.Flex,
                            flexDirection: y.P.Row
                        }, a.createElement("div", {
                            className: "recommended-channel__game",
                            title: n.props.gameName,
                            "data-a-target": "featured-channel-game-title"
                        }, a.createElement(y._2, {
                            ellipsis: !0,
                            flexGrow: 1
                        }, n.props.gameName))) : null
                    }, n.getSlideInContent = function() {
                        if (n.props.firstPageLoaded) return a.createElement(f.a, {
                            tabIndex: -1,
                            blurAfterClick: !0,
                            hideIcon: !0,
                            hideWhenFollowing: !0,
                            size: y.x.Small,
                            channelLogin: n.props.channelLogin,
                            "data-a-target": "featured-channel-follow-button"
                        })
                    }, n.state = {
                        hovered: !1
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return a.createElement(S, i.__assign({
                        collapsed: this.props.collapsed,
                        title: this.props.displayName,
                        titleElement: Object(b.a)(this.props.channelLogin, this.props.displayName),
                        avatarAlt: this.props.displayName,
                        avatarSrc: this.props.profileImageURL,
                        linkTo: {
                            pathname: "/" + this.props.channelLogin,
                            state: {
                                content: "featured_channels",
                                medium: "twitch_socialcolumn"
                            }
                        },
                        metadataLeft: this.renderGame(),
                        slideInContent: this.getSlideInContent()
                    }, Object(v.a)(this.props)))
                }, t = i.__decorate([Object(h.d)("Featured Channel")], t)
            }(a.Component);
        var N, E = Object(g.b)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded
                }
            })(_),
            C = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.setRef = function(e) {
                        return t.ref = e
                    }, t.onMouseEnter = function() {
                        t.props.tooltipLayer.show({
                            from: t.ref,
                            label: t.props.title,
                            align: y._44.Center,
                            direction: y._45.Right
                        })
                    }, t.onMouseLeave = function() {
                        t.props.tooltipLayer.hide()
                    }, t.addEventListeners = function() {
                        t.ref && (t.ref.addEventListener("mouseenter", t.onMouseEnter), t.ref.addEventListener("mouseleave", t.onMouseLeave))
                    }, t.removeEventListeners = function() {
                        t.ref && (t.ref.removeEventListener("mouseenter", t.onMouseEnter), t.ref.removeEventListener("mouseleave", t.onMouseLeave))
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.addEventListeners()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.collapsed && !e.collapsed && this.removeEventListeners()
                }, t.prototype.componentDidUpdate = function(e) {
                    this.props.collapsed && !e.collapsed && this.addEventListeners()
                }, t.prototype.componentWillUnmount = function() {
                    this.removeEventListeners()
                }, t.prototype.render = function() {
                    var e, t = {
                            "side-nav-header": !0
                        },
                        n = this.props,
                        i = n.collapsed,
                        o = n.collapsedIcon,
                        s = n.title;
                    return e = o ? a.createElement(y._15, {
                        asset: o,
                        width: 20,
                        height: 20
                    }) : a.createElement(y._15, {
                        asset: y._16.FriendsSC,
                        width: 20,
                        height: 20
                    }), i ? a.createElement(y._25, {
                        className: r(t),
                        color: y.I.Alt2,
                        display: y.N.Flex,
                        flexWrap: y.Q.Wrap,
                        justifyContent: y._1.Center,
                        alignItems: y.c.Center,
                        margin: {
                            top: 1
                        },
                        padding: {
                            top: 1,
                            bottom: .5
                        },
                        "data-a-target": "side-nav-header-collapsed",
                        refDelegate: this.setRef
                    }, e, a.createElement(y._25, {
                        borderTop: !0,
                        fullWidth: !0,
                        margin: {
                            top: 1
                        }
                    })) : a.createElement(y._2, {
                        className: r(t),
                        margin: {
                            top: 1,
                            x: 1
                        },
                        padding: {
                            top: 1,
                            bottom: .5
                        },
                        "data-a-target": "side-nav-header-expanded"
                    }, a.createElement(y._35, {
                        type: y._40.H5,
                        color: y.I.Alt
                    }, s), a.createElement(y._25, {
                        borderTop: !0,
                        fullWidth: !0,
                        margin: {
                            top: 1
                        }
                    }))
                }, t
            }(a.Component),
            T = Object(h.d)("Side Nav Header", {
                autoReportInteractive: !0
            })(Object(k.c)()(C)),
            w = n("vKN/"),
            O = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getFeaturedChannels = function() {
                        return !t.props.data.loading && !t.props.data.error && t.props.data.featuredStreams && t.props.data.featuredStreams.length - 1 ? t.props.data.featuredStreams.filter(function(e) {
                            return e.stream && e.stream.broadcaster && e.stream.broadcaster.displayName
                        }).slice(0, 5).map(function(e, n) {
                            return e.stream && e.stream.broadcaster && e.stream.broadcaster.displayName && e.stream.broadcaster.id ? a.createElement(E, {
                                key: "featured-channels-" + e.stream.id,
                                id: e.stream.id,
                                displayName: e.stream.broadcaster.displayName,
                                gameName: e.stream.game ? e.stream.game.name : "",
                                profileImageURL: e.stream.broadcaster.profileImageURL,
                                collapsed: t.props.collapsed,
                                channelLogin: e.stream.broadcaster.login,
                                "data-a-id": "featured-channel-" + n,
                                "data-a-target": "featured-channel"
                            }) : null
                        }) : []
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data.loading || this.props.data.error || !this.props.data.featuredStreams || this.props.latencyTracking.reportInteractive(Math.min(this.props.data.featuredStreams.length, 4))
                }, t.prototype.render = function() {
                    var e = Object(s.d)("Featured Channels", "FeaturedChannels");
                    return this.props.collapsed ? a.createElement(y._2, {
                        margin: {
                            bottom: 2
                        }
                    }, a.createElement(T, {
                        title: e,
                        collapsed: this.props.collapsed,
                        collapsedIcon: y._16.NavChannels
                    }), this.getFeaturedChannels()) : a.createElement(y._2, {
                        margin: {
                            bottom: 2
                        }
                    }, a.createElement(T, {
                        title: e
                    }), a.createElement(y.W, {
                        fullWidth: !0
                    }, a.createElement("figure", null, a.createElement("svg", {
                        width: "240",
                        height: "100",
                        viewBox: "0 0 240 108"
                    }, a.createElement("g", {
                        fill: "none",
                        fillRule: "evenodd"
                    }, a.createElement("path", {
                        fill: "#D7CCEB",
                        d: "M123 56v8h-20V44h20v8l8-8h4v20h-4"
                    }), a.createElement("path", {
                        fill: "#4B367C",
                        d: "M158 30v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zm-86 0v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zm0 46v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zm86 0v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zm17-23v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zM57 53v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zm37 27l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8v-4zm0-57v-4l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8zm34 0v-4l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8zm0 61v-4l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8zm19-31v-4l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8zm-72 0v-4l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8z"
                    }))))), a.createElement(y._2, {
                        padding: {
                            x: 1
                        },
                        margin: {
                            bottom: 2
                        },
                        textAlign: y._36.Center
                    }, a.createElement(y._35, {
                        color: y.I.Alt2,
                        fontSize: y.R.Size6
                    }, Object(s.d)("Follow channels and easily access your favorites here. Here are a few you might like!", "FeaturedChannels"))), this.getFeaturedChannels())
                }, t = i.__decorate([Object(c.a)(w, {
                    options: function() {
                        return {
                            variables: {
                                language: s.n.intl.getLanguageCode()
                            }
                        }
                    }
                }), Object(h.d)("Featured Channels")], t)
            }(a.Component),
            I = Object(h.d)("No Online Friends", {
                autoReportInteractive: !0
            })(function(e) {
                var t = Object(s.d)("Online Friends", "NoOnlineFriends"),
                    n = Object(s.d)("Twitch is better together. Add some Friends to see who's online and chat!", "NoOnlineFriends"),
                    i = Object(s.d)("None of your Friends are online. Get out there and add more!", "NoOnlineFriends"),
                    r = e.hasOfflineFriends ? "online-friends-no-friends-online" : "online-friends-no-friends";
                return a.createElement(y._2, {
                    margin: {
                        bottom: 2
                    }
                }, a.createElement(T, {
                    title: t
                }), a.createElement(y.W, {
                    margin: {
                        y: 1
                    },
                    fullWidth: !0
                }, a.createElement("figure", null, a.createElement("svg", {
                    width: "240",
                    height: "100",
                    viewBox: "0 0 240 108"
                }, a.createElement("defs", null, a.createElement("linearGradient", {
                    x1: "100%",
                    x2: "0%",
                    y1: "50%",
                    y2: "50%"
                }, a.createElement("stop", {
                    stopColor: "#4B367C",
                    stopOpacity: "0",
                    offset: "0%"
                }), a.createElement("stop", {
                    stopColor: "#4B367C",
                    stopOpacity: "0",
                    offset: "3.947%"
                }), a.createElement("stop", {
                    stopColor: "#4B367C",
                    offset: "12.281%"
                }), a.createElement("stop", {
                    stopColor: "#4B367C",
                    offset: "87.719%"
                }), a.createElement("stop", {
                    stopColor: "#4B367C",
                    stopOpacity: "0",
                    offset: "96.053%"
                }), a.createElement("stop", {
                    stopColor: "#4B367C",
                    stopOpacity: "0",
                    offset: "100%"
                }))), a.createElement("g", {
                    fill: "none",
                    fillRule: "evenodd"
                }, a.createElement("path", {
                    fill: "#4B367C",
                    d: "M174.606 56h-13.21l-11.154 26.932c-.212.51-.806 1.1-1.31 1.31L127 93.326V87l-4-4h-6l-4 4v6.326L99.9 87.9 97 85v-7l-4-4h-6l-.666.666L78.604 56h-13.21L57.75 74.452c-.21.507-.787 1.087-1.298 1.3L44 80.908V78l-4-4h-6l-4 4v3.737L15.548 75.75c-.507-.21-1.087-.787-1.3-1.298L6.16 54.918c-.21-.507-.21-1.326 0-1.836l8.09-19.534c.21-.507.79-1.087 1.3-1.3l19.534-8.09c.507-.21 1.326-.21 1.836 0L48 28.748V41h12.838l4.556 11h13.21l7.454-18H100v-6l-3-3v-3.7l22.074-9.142c.51-.212 1.348-.21 1.852 0L143 21.3V25l-3 3v6h13.942l7.455 18h13.21l7.642-18.452c.21-.507.784-1.087 1.295-1.3l10.59-4.385L194 34h20v-6l10.452 4.25c.507.21 1.087.787 1.3 1.298l8.09 19.534c.21.507.21 1.326 0 1.836l-8.09 19.534c-.21.507-.79 1.087-1.3 1.3l-19.534 8.09c-.507.21-1.326.21-1.836 0L193 79.666V67h-13.838l-4.556-11zM119.08 28.16l-16.702 6.917c-.498.206-1.09.793-1.3 1.3l-6.92 16.704c-.205.5-.21 1.335 0 1.84l6.92 16.705c.205.498.792 1.09 1.3 1.3l16.703 6.92c.5.205 1.335.21 1.84 0l16.705-6.92c.498-.205 1.09-.792 1.3-1.3l6.92-16.703c.205-.497.21-1.33 0-1.84l-6.92-16.7c-.205-.5-.792-1.09-1.3-1.3l-16.703-6.92c-.497-.206-1.33-.21-1.84 0zm-83.12 10l-9.53 3.948c-.528.22-1.106.804-1.32 1.32l-3.948 9.53c-.218.528-.213 1.352 0 1.867l3.948 9.532c.22.526.804 1.105 1.32 1.318l9.53 3.948c.528.22 1.352.214 1.867 0l9.532-3.948c.523-.218 1.102-.804 1.315-1.32l3.948-9.53c.22-.528.214-1.35 0-1.867l-3.948-9.53c-.218-.528-.804-1.106-1.32-1.32l-9.53-3.948c-.528-.218-1.35-.213-1.867 0zm167.107.106l-9.532 3.948c-.527.218-1.106.804-1.32 1.32l-3.947 9.53c-.22.528-.214 1.352 0 1.867l3.948 9.535c.218.527.804 1.106 1.32 1.32l9.53 3.947c.528.22 1.352.215 1.867 0l9.532-3.947c.527-.218 1.106-.804 1.32-1.32l3.947-9.53c.22-.528.214-1.352 0-1.867l-3.948-9.532c-.218-.527-.804-1.106-1.32-1.32l-9.53-3.947c-.528-.22-1.352-.215-1.867 0z"
                }), a.createElement("path", {
                    fill: "#D7CCEB",
                    d: "M92 17l2 2v5l-3 2v1h4l2 2v2H83v-2l2-2h4v-1l-3-2v-5l2-2h4zm0 60l2 2v5l-3 2v1h4l2 2v2H83v-2l2-2h4v-1l-3-2v-5l2-2h4zm30 9l2 2v5l-3 2v1h4l2 2v2h-14v-2l2-2h4v-1l-3-2v-5l2-2h4zm30-69l2 2v5l-3 2v1h4l2 2v2h-14v-2l2-2h4v-1l-3-2v-5l2-2h4zm54 0l2 2v5l-3 2v1h4l2 2v2h-14v-2l2-2h4v-1l-3-2v-5l2-2h4zM39 77l2 2v5l-3 2v1h4l2 2v2H30v-2l2-2h4v-1l-3-2v-5l2-2h4zm137-7h14v10h-14V70zm5 2v6l5-3-5-3zM51 28h14v10H51V28zm5 2v6l5-3-5-3zm154 29l-4-4v4h-10V49h10v4l4-4h2v10h-2zM29 55l3-6h2l3 1 3-1h2l3 6v2l-2 2h-2l-2-2h-4l-2 2h-2l-2-2v-2zm10-2v1h1v-1h-1zm1 1v1h1v-1h-1zm1-1v1h1v-1h-1zm-1-1v1h1v-1h-1zm-7 1h-1v1h1v1h1v-1h1v-1h-1v-1h-1v1zm91-14l4 4v10l-6 4v2h8l4 4v4h-28v-4l4-4h8v-2l-6-4V43l4-4h8z"
                }))))), a.createElement(y._2, {
                    padding: {
                        x: 1
                    },
                    textAlign: y._36.Center
                }, a.createElement(y._35, {
                    color: y.I.Alt2,
                    fontSize: y.R.Size6,
                    "data-a-target": r
                }, e.hasOfflineFriends ? i : n)))
            }),
            D = Object(h.d)("Anon Side Nav", {
                autoReportInteractive: !0
            })(function(e) {
                return e.collapsed ? a.createElement(y._2, {
                    className: "anon-side-nav",
                    fullWidth: !0
                }, a.createElement(O, {
                    collapsed: e.collapsed
                })) : a.createElement(y._2, {
                    className: "anon-side-nav",
                    fullWidth: !0
                }, a.createElement(O, {
                    collapsed: e.collapsed
                }), !e.collapsed && a.createElement(I, null))
            });
        ! function(e) {
            e.ViewerCount = "VIEWER_COUNT", e.Relevance = "RELEVANCE"
        }(N || (N = {}));
        var P = n("6WAQ"),
            F = n("2o2f"),
            R = n("vH/s"),
            x = (n("fS5P"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = [];
                    if (this.props.videos)
                        for (var t = 0; t < 3 && t < this.props.videos.length; t++) e.push(this.getVideoSummary(this.props.videos[t]));
                    return a.createElement(y._2, null, e, this.getAllRecentVideosLabel())
                }, t.prototype.getAllRecentVideosLabel = function() {
                    return a.createElement(y._0, {
                        linkTo: "/" + this.props.creatorLogin + "/videos/all",
                        key: "recentVideoLabel",
                        alpha: !0,
                        blurAfterClick: !0
                    }, a.createElement(y._2, {
                        textAlign: y._36.Center,
                        padding: .5
                    }, a.createElement(y._35, {
                        transform: y._39.Capitalize,
                        color: y.I.Base
                    }, Object(s.d)("See all recent videos", "OfflineFollowedChannelTooltip"))))
                }, t.prototype.getVideoSummary = function(e) {
                    return a.createElement(y._0, {
                        linkTo: "/videos/" + e.id,
                        key: "videoSumm-" + e.id,
                        alpha: !0,
                        blurAfterClick: !0
                    }, a.createElement(y._2, {
                        padding: {
                            top: .5,
                            bottom: .5
                        }
                    }, a.createElement(y.A, {
                        row: !0
                    }, a.createElement(y.C, {
                        src: e.previewThumbnailURL,
                        alt: e.title,
                        size: y.D.Size8,
                        aspect: y.k.Aspect16x9
                    }), a.createElement(y.B, null, a.createElement(y._2, {
                        padding: {
                            left: 1,
                            right: 1
                        },
                        className: "offline-followed-channel-tooltip__video-body"
                    }, a.createElement(y._35, {
                        color: y.I.Base,
                        title: e.title,
                        lines: 2
                    }, e.title), a.createElement(y._35, {
                        color: y.I.Alt2,
                        "data-test-selector": "offline-followed-channel-tooltip-text"
                    }, Object(s.d)("{views, plural, one {{formattedViews} view} other {{formattedViews} views}}", {
                        views: e.viewCount,
                        formattedViews: Object(s.e)(e.viewCount)
                    }, "OnlineFollowedChannelTooltip")))))))
                }, t
            }(a.Component)),
            L = (n("ozx1"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = null,
                        t = null;
                    switch (this.props.streamType) {
                        case F.a.Premiere:
                            e = a.createElement(y._15, {
                                asset: y._16.VideoPremiere,
                                type: y._17.Live,
                                width: 12,
                                height: 12
                            }), t = Object(s.d)("Video Premiere", "OnlineFollowedChannelTooltip");
                            break;
                        case F.a.WatchParty:
                        case F.a.Rerun:
                            e = a.createElement(y._15, {
                                asset: y._16.VideoRerun,
                                type: y._17.Alt2,
                                width: 12,
                                height: 12
                            }), t = Object(s.d)("Rerun", "OnlineFollowedChannelTooltip");
                            break;
                        default:
                            if (!this.props.collapsed) break;
                            e = a.createElement(y.E, {
                                status: y.G.Live,
                                size: y.F.Small
                            }), t = Object(s.d)("Live", "OnlineFollowedChannelTooltip")
                    }
                    return a.createElement(y._2, {
                        className: "online-followed-channel-tooltip__body"
                    }, this.props.collapsed && a.createElement(y._35, {
                        color: y.I.Link,
                        ellipsis: !0
                    }, this.props.gameName ? this.props.channelDisplayName + " · " + this.props.gameName : this.props.channelDisplayName), a.createElement(y._35, {
                        color: y.I.Base,
                        lines: 2
                    }, this.props.streamTitle), e && a.createElement(y._2, {
                        display: y.N.Flex,
                        alignItems: y.c.Center
                    }, e, a.createElement(y.W, {
                        padding: {
                            left: .5
                        }
                    }, a.createElement(y._35, {
                        color: y.I.Alt2,
                        type: y._40.Span
                    }, t, this.props.collapsed && this.props.viewership ? " | " + Object(s.d)("{viewers} viewers", {
                        viewers: Object(s.e)(this.props.viewership)
                    }, "OnlineFollowedChannelTooltip") : null))))
                }, t
            }(a.Component)),
            U = (n("TWH+"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e, t = this.getMetadataLeft(),
                        n = this.getTooltipContent(),
                        r = this.isChannelOffline(),
                        o = Object(b.a)(this.props.user.login, this.props.user.displayName, !0);
                    return !n && this.props.collapsed && (e = t.length > 0 && !r ? o + " - " + t : o), a.createElement(S, i.__assign({
                        avatarAlt: o,
                        avatarSrc: this.props.user.profileImageURL,
                        collapsed: this.props.collapsed,
                        linkTo: {
                            pathname: this.getChannelLink(),
                            state: {
                                content: R.PageviewContent.FollowedChannels,
                                medium: R.PageviewMedium.SideNav
                            }
                        },
                        metadataLeft: t,
                        metadataRight: this.getMetadataRight(),
                        onClick: this.props.onChannelClick,
                        offline: this.isChannelOffline(),
                        title: o,
                        titleElement: Object(b.a)(this.props.user.login, this.props.user.displayName),
                        tooltipLabel: this.props.collapsed && !this.props.premieresEnabled ? e : void 0,
                        tooltipContent: this.getTooltipContent()
                    }, Object(y._53)(this.props)))
                }, t.prototype.getMetadataLeft = function() {
                    return this.props.user.stream && this.props.user.stream.game ? this.props.user.stream.game.name : this.props.recentChannelVideos && this.props.recentChannelVideos.length > 0 && this.props.videoExperimentAssignment !== Ae ? Object(s.d)("{numVideos, plural, one {{numVideos} new video} other {{numVideos} new videos}}", {
                        numVideos: this.props.recentChannelVideos.length
                    }, "FollowedChannel") : this.props.user.lastBroadcast && this.props.user.lastBroadcast.game && this.props.user.lastBroadcast.game.name && this.props.videoExperimentAssignment === Ae ? this.props.user.lastBroadcast.game.name : ""
                }, t.prototype.getMetadataRight = function() {
                    return this.props.user.stream && this.props.user.stream.id ? a.createElement(y._2, {
                        display: y.N.Flex,
                        alignItems: y.c.Center
                    }, this.getChannelStatusIndicator(), a.createElement(y._2, {
                        margin: {
                            left: .5
                        }
                    }, Object(s.e)(this.props.user.stream.viewersCount || 0))) : a.createElement(y._35, {
                        type: y._40.Span
                    }, Object(s.d)("Offline", "FollowedChannel"))
                }, t.prototype.getChannelStatusIndicator = function() {
                    if (!this.props.user.stream || !this.props.user.stream.id) return null;
                    switch (this.props.user.stream.type) {
                        case F.a.Premiere:
                            return this.props.premieresEnabled ? a.createElement(y._15, {
                                asset: y._16.VideoPremiere,
                                type: y._17.Live,
                                width: 12,
                                height: 12
                            }) : a.createElement(y.E, {
                                status: y.G.Live,
                                size: y.F.Small
                            });
                        case F.a.WatchParty:
                        case F.a.Rerun:
                            return this.props.premieresEnabled ? a.createElement(y._15, {
                                asset: y._16.VideoRerun,
                                type: y._17.Alt2,
                                width: 12,
                                height: 12
                            }) : a.createElement("span", {
                                className: "followed-channel__vodcast-live-indicator"
                            }, a.createElement(y.E, {
                                status: y.G.Live,
                                size: y.F.Small
                            }));
                        default:
                            return a.createElement(y.E, {
                                status: y.G.Live,
                                size: y.F.Small
                            })
                    }
                }, t.prototype.getTooltipContent = function() {
                    if (this.isChannelOffline()) {
                        if (this.props.videoExperimentAssignment === Ae || !this.props.user.login) return;
                        return a.createElement(x, {
                            creatorLogin: this.props.user.login,
                            videos: this.props.recentChannelVideos
                        })
                    }
                    if (this.props.premieresEnabled) return a.createElement(L, {
                        streamType: this.props.user.stream && this.props.user.stream.type || F.a.Live,
                        streamTitle: this.props.user.stream && this.props.user.stream.title || "",
                        collapsed: this.props.collapsed,
                        channelDisplayName: this.props.user.displayName || "",
                        gameName: this.props.user.stream && this.props.user.stream.game && this.props.user.stream.game.name || void 0,
                        viewership: this.props.user.stream && this.props.user.stream.viewersCount || 0
                    })
                }, t.prototype.isChannelOffline = function() {
                    return !(this.props.user.stream && this.props.user.stream.id.length > 0)
                }, t.prototype.getChannelLink = function() {
                    return this.isChannelOffline() ? this.props.recentChannelVideos && this.props.recentChannelVideos.length > 0 && this.props.videoExperimentAssignment !== Ae ? "/videos/" + this.props.recentChannelVideos[0].id : "/" + this.props.user.login + "/videos/all" : "/" + this.props.user.login
                }, t = i.__decorate([Object(h.d)("FollowedChannel")], t)
            }(a.Component)),
            M = (n("bBGx"), function(e) {
                var t = y._1.Between;
                return e.lessDisabled && (t = y._1.End), a.createElement(y._2, {
                    padding: 1,
                    display: y.N.Flex,
                    fullWidth: !0,
                    overflow: y._5.Hidden,
                    textAlign: y._36.Left,
                    justifyContent: t
                }, !e.lessDisabled && a.createElement("button", {
                    className: "side-nav-show-more-toggle__button",
                    onClick: e.onClickLess,
                    "data-a-target": "side-nav-show-less-button"
                }, Object(s.d)("Show less", "SideNavShowMoreToggleButton")), !e.moreDisabled && a.createElement("button", {
                    className: "side-nav-show-more-toggle__button",
                    onClick: e.onClickMore,
                    "data-a-target": "side-nav-show-more-button"
                }, Object(s.d)("Show more", "SideNavShowMoreToggleButton")))
            }),
            A = n("Ex+h"),
            j = n("l4QG");

        function W(e) {
            return e ? e.slice().filter(function(e) {
                return (null !== e.activity || null !== e.availability) && (e.availability === j.a.Online || e.availability === j.a.Idle || e.availability === j.a.Busy || e.availability === j.a.Away)
            }).sort(function(e, t) {
                if (!e.activity && !t.activity) return B(e, t);
                if (e.activity && !t.activity) return -1;
                if (!e.activity && t.activity) return 1;
                if (e.activity && t.activity) {
                    if (e.activity.type === A.a.Watching && t.activity.type !== A.a.Watching) return -1;
                    if (e.activity.type !== A.a.Watching && t.activity.type === A.a.Watching) return 1;
                    if (e.activity.type === A.a.Watching && t.activity.type === A.a.Watching) return B(e, t);
                    if (e.activity.type === A.a.Streaming && t.activity.type !== A.a.Streaming) return -1;
                    if (e.activity.type !== A.a.Streaming && t.activity.type === A.a.Streaming) return 1;
                    if (e.activity.type === A.a.Streaming && t.activity.type === A.a.Streaming) return B(e, t);
                    if (e.activity.type === A.a.Playing && t.activity.type !== A.a.Playing) return -1;
                    if (e.activity.type !== A.a.Playing && t.activity.type === A.a.Playing) return 1;
                    if (e.activity.type === A.a.Playing && t.activity.type === A.a.Playing) return B(e, t)
                }
                return H(e, t)
            }) : []
        }

        function B(e, t) {
            return e.availability || t.availability ? e.availability && !t.availability ? -1 : !e.availability && t.availability ? 1 : e.availability === j.a.Online && t.availability !== j.a.Online ? -1 : e.availability !== j.a.Online && t.availability === j.a.Online ? 1 : e.availability === j.a.Online && t.availability === j.a.Online ? H(e, t) : e.availability === j.a.Idle && t.availability !== j.a.Idle ? -1 : e.availability !== j.a.Idle && t.availability === j.a.Idle ? 1 : e.availability === j.a.Idle && t.availability === j.a.Idle ? H(e, t) : e.availability === j.a.Busy && t.availability !== j.a.Busy ? -1 : e.availability !== j.a.Busy && t.availability === j.a.Busy ? 1 : (e.availability === j.a.Busy && (t.availability, j.a.Busy), H(e, t)) : -1
        }

        function G(e, t, n, i) {
            var r = e.slice(),
                a = new Set,
                o = r.filter(function(e) {
                    return e.stream && e.stream.id
                });
            o.forEach(function(e) {
                a.add(e.id)
            });
            var s = function(e) {
                    var t = [],
                        n = [],
                        i = [];
                    return e.forEach(function(e) {
                        switch (e.stream && e.stream.type || F.a.Live) {
                            case F.a.Premiere:
                                n.push(e);
                                break;
                            case F.a.WatchParty:
                            case F.a.Rerun:
                                i.push(e);
                                break;
                            default:
                                t.push(e)
                        }
                    }), t.concat(n, i)
                }(i ? o : function(e) {
                    return e.sort(function(e, t) {
                        return e.stream && t.stream ? null !== e.stream.viewersCount && null === t.stream.viewersCount ? -1 : null !== t.stream.viewersCount && null === e.stream.viewersCount ? 1 : null === e.stream.viewersCount || null === t.stream.viewersCount ? 0 : e.stream.viewersCount > t.stream.viewersCount ? -1 : e.stream.viewersCount < t.stream.viewersCount ? 1 : function(e, t) {
                            var n = e.displayName || e.login || "",
                                i = t.displayName || t.login || "";
                            return n.localeCompare(i)
                        }(e, t) : 0
                    })
                }(o)),
                l = t.filter(function(e) {
                    return !a.has(e.id)
                });
            l.reverse();
            var c = function(e, t) {
                if (!t) return e;
                var n = e.filter(function(e) {
                        return null !== e.id && !!t[e.id]
                    }),
                    i = e.filter(function(e) {
                        return null !== e.id && !t[e.id]
                    });
                return n.sort(function(e, n) {
                    var i = null !== e.id && t[e.id],
                        r = null !== n.id && t[n.id],
                        a = i && i.length || 0;
                    return (r && r.length || 0) - a
                }), n.concat(i)
            }(l, n);
            return s.concat(c)
        }

        function H(e, t) {
            if (!e.node && !t.node) return 0;
            if (e.node && !t.node) return -1;
            if (t.node && !e.node) return 1;
            var n = e.node.displayName || e.node.login || "",
                i = t.node.displayName || t.node.login || "";
            return n.localeCompare(i)
        }
        var V = "live",
            z = "rerun",
            q = "offline";

        function Q(e) {
            return e.stream && e.stream.id ? "watch_party" === e.stream.type ? z : V : q
        }
        var K = n("Hcc4"),
            $ = n("CF9R"),
            Y = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        sortedFollows: [],
                        displayAmount: 5
                    }, t.hasRequestedTracking = !1, t.followedVideoDict = {}, t.sortFollowedChannels = function(e) {
                        if (e.data.loading || e.data.error || !e.data.currentUser || !e.data.currentUser.followedLiveUsers) return [];
                        var n = e.data.currentUser.followedLiveUsers.nodes.slice(),
                            i = (e.data.currentUser.follows.edges || []).map(function(e) {
                                return e.node
                            }).filter(function(e) {
                                return !!e
                            }),
                            r = (e.videoData && e.videoData.currentUser && e.videoData.currentUser.followedVideos && e.videoData.currentUser.followedVideos.edges || []).map(function(e) {
                                return e.node
                            });
                        t.followedVideoDict = function(e) {
                            var t = {},
                                n = {};
                            if (!e.length) return t;
                            var i = Date.now() - 6048e5;
                            return e.forEach(function(e) {
                                var r = e.owner && e.owner.id;
                                if (r && !n[e.owner.id])
                                    if (e.self && e.self.viewingHistory && e.self.viewingHistory.position) n[e.owner.id] = !0;
                                    else {
                                        var a = new Date(e.publishedAt).getTime();
                                        if (a && !(a < i)) {
                                            var o = t[r] || [];
                                            o.push(e), t[r] = o
                                        }
                                    }
                            }), t
                        }(r);
                        var a = G(n, i, t.followedVideoDict, e.sortByRelevance);
                        t.setState({
                            sortedFollows: a
                        })
                    }, t.getFollowedChannels = function() {
                        return t.props.data.loading || t.props.data.error && 0 === t.state.sortedFollows.length ? [] : t.state.sortedFollows.slice(0, t.state.displayAmount).map(function(e, n) {
                            if (!e.id) return null;
                            var i = t.onChannelClick.bind(t, n, e);
                            return a.createElement(U, {
                                key: "followed-channels-" + e.id,
                                user: e,
                                recentChannelVideos: t.followedVideoDict[e.id],
                                collapsed: t.props.collapsed,
                                "data-a-id": "followed-channel-" + n,
                                "data-a-target": "followed-channel",
                                onChannelClick: i,
                                premieresEnabled: t.props.premieresEnabled,
                                videoExperimentAssignment: t.props.videoExperimentAssignment
                            })
                        })
                    }, t.getShowMore = function() {
                        return t.props.collapsed || !t.state.sortedFollows || t.state.sortedFollows.length <= 5 ? null : a.createElement(M, {
                            onClickMore: t.onClickShowMore,
                            onClickLess: t.onClickShowLess,
                            lessDisabled: t.state.displayAmount <= 5,
                            moreDisabled: t.state.displayAmount >= t.state.sortedFollows.length
                        })
                    }, t.onClickShowMore = function() {
                        var e = Math.min(t.state.displayAmount + 10, t.state.sortedFollows.length);
                        t.setState({
                                displayAmount: e
                            }),
                            function(e) {
                                s.n.tracking.track(R.SpadeEventType.SideNavLoadMore, {
                                    displayed_channel_count: e
                                })
                            }(e)
                    }, t.onClickShowLess = function() {
                        var e = 10 * (Math.floor((t.state.displayAmount + 4) / 10) - 1) + 5;
                        t.setState({
                            displayAmount: e
                        })
                    }, t.onChannelClick = function(e, t) {
                        ! function(e, t) {
                            s.n.tracking.track(R.SpadeEventType.SideNavChannelClick, {
                                click_target_state: Q(t),
                                click_target_index: e
                            })
                        }(e, t)
                    }, t.isRenderReady = function() {
                        return !(t.props.data.loading || t.props.data.error || !t.props.data.currentUser) && (!t.props.data.currentUser.follows.edges || 0 === t.props.data.currentUser.follows.edges.length || t.props.data.currentUser.follows.edges.length > 0 && t.state.sortedFollows.length > 0)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.isRenderReady() && this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.sortFollowedChannels(e)
                }, t.prototype.render = function() {
                    var e = !this.props.data.loading && !this.props.data.error && this.props.data.currentUser && (!this.props.data.currentUser.follows.edges || 0 === this.props.data.currentUser.follows.edges.length);
                    return this.props.data.loading || this.props.data.error || !this.props.data.currentUser || this.hasRequestedTracking || (this.hasRequestedTracking = !0, function(e, t, n) {
                        var i = s.b.get("sidenav_follow_data_sample_rate", 1e4);
                        if (!Math.floor(Math.random() * i)) {
                            var r = {
                                is_collapsed: n,
                                followed_channels_total: 0
                            };
                            if (!t && (r.followed_channels_total = e.follows.edges ? e.follows.edges.length : 0, e.followedLiveUsers && e.followedLiveUsers.nodes)) {
                                var a = e.followedLiveUsers.nodes.reduce(function(e, t) {
                                    return Q(t) === z ? e + 1 : e
                                }, 0);
                                r.followed_channels_live_stream = e.followedLiveUsers.nodes.length - a, r.followed_channels_rerun = a
                            }
                            s.n.tracking.track(R.SpadeEventType.SideNavDetails, r)
                        }
                    }(this.props.data.currentUser, e || !1, this.props.collapsed)), e ? a.createElement(O, {
                        collapsed: this.props.collapsed
                    }) : a.createElement(y._2, {
                        className: "followed-channels"
                    }, a.createElement(T, {
                        title: Object(s.d)("Followed Channels", "FollowedChannels"),
                        collapsed: this.props.collapsed,
                        collapsedIcon: y._16.Heart
                    }), this.getFollowedChannels(), this.getShowMore())
                }, t = i.__decorate([Object(c.a)($, {
                    options: function(e) {
                        return {
                            pollInterval: 6e5,
                            variables: {
                                limit: 100,
                                cursor: "",
                                sort: e.sortByRelevance ? N.Relevance : N.ViewerCount
                            }
                        }
                    }
                }), Object(c.a)(K, {
                    options: function(e) {
                        return {
                            variables: {
                                videoTypes: e.videoExperimentAssignment === je ? [P.a.Archive, P.a.Highlight, P.a.Upload] : [P.a.Highlight, P.a.Upload]
                            }
                        }
                    },
                    name: "videoData",
                    skip: function(e) {
                        return e.videoExperimentAssignment === Ae
                    }
                }), Object(h.d)("Followed Channels")], t)
            }(a.Component),
            Z = n("WIs4"),
            X = n("aMxy"),
            J = n("mqvl"),
            ee = n("HZww"),
            te = n("2KeS"),
            ne = n("uXDg"),
            ie = n("QPF3"),
            re = n("4Dne"),
            ae = n("iPhu"),
            oe = n("2Hj/"),
            se = n("emkL"),
            le = n("m4HT"),
            ce = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderJoinButton = function() {
                        var e = null,
                            n = Object(oe.d)(t.props.user.login, t.props.activity);
                        return n && (e = {
                            pathname: n,
                            state: {
                                content: R.PageviewContent.Presence,
                                medium: R.PageviewMedium.SideNav
                            }
                        }), a.createElement(se.a, {
                            link: e,
                            onClick: t.handleJoinClick,
                            "data-a-target": "friend-join-button"
                        })
                    }, t.handleClick = function(e) {
                        e.preventDefault();
                        var n = Object(le.a)(t.props.user.id, t.props.currentUserID);
                        t.props.openThread(n), Object(ae.c)({
                            force: !0,
                            timeout: 0
                        })
                    }, t.handleJoinClick = function() {
                        Object(re.b)({
                            context: re.a.FriendsListButton,
                            friendActivity: t.props.activity,
                            friendLogin: t.props.user.login
                        })
                    }, t.getPresenceStatus = function() {
                        switch (t.props.availability) {
                            case j.a.Online:
                                return 3;
                            case j.a.Idle:
                            case j.a.Away:
                                return 5;
                            case j.a.Busy:
                                return 4;
                            default:
                                return
                        }
                    }, t.onMouseEnter = function() {
                        Object(ae.d)({
                            id: t.props.user.id,
                            direction: y.q.Right,
                            ref: t.ref
                        })
                    }, t.onMouseLeave = function() {
                        return Object(ae.c)()
                    }, t.setRefDelegate = function(e) {
                        t.ref = e
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return a.createElement("div", {
                        ref: this.setRefDelegate,
                        onMouseEnter: this.onMouseEnter,
                        onMouseLeave: this.onMouseLeave
                    }, a.createElement(S, i.__assign({
                        title: this.props.user.displayName,
                        titleElement: Object(b.a)(this.props.user.login, this.props.user.displayName),
                        avatarAlt: this.props.user.displayName,
                        avatarSrc: this.props.user.profileImageURL,
                        avatarPresence: !0,
                        presenceStatus: this.getPresenceStatus(),
                        onClick: this.handleClick,
                        linkTo: "#",
                        metadataLeft: a.createElement(oe.b, {
                            availability: this.props.availability,
                            activity: this.props.activity,
                            condensed: !0
                        }),
                        slideInContent: this.renderJoinButton(),
                        collapsed: this.props.collapsed
                    }, Object(y._53)(this.props))))
                }, t = i.__decorate([Object(h.d)("OnlineFriend")], t)
            }(a.Component);
        var de = Object(g.b)(function(e) {
                return {
                    currentUserID: e.session.user && "" + e.session.user.id || ""
                }
            }, function(e) {
                return Object(te.b)({
                    openThread: function(e) {
                        return Object(ne.l)({
                            collapsed: !1,
                            threadID: e,
                            ignoreCollapseIfOpen: !0
                        }, Object(ie.a)())
                    }
                }, e)
            })(ce),
            ue = n("TMvI"),
            pe = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.defaultInitialRenderCount = 15, n.sortTimeout = 0, n.onMouseEnter = function() {
                        n.state.hasInteracted || n.setState({
                            hasInteracted: !0
                        })
                    }, n.renderOnlineFriends = function() {
                        return n.state.sortedFriends.length ? (n.state.hasInteracted ? n.state.sortedFriends : n.state.sortedFriends.slice(0, n.getDisplayCount())).map(function(e, t) {
                            return e.node.id ? a.createElement(de, {
                                activity: e.activity,
                                availability: e.availability,
                                key: "online-friends-" + e.node.id,
                                collapsed: n.props.collapsed,
                                user: e.node,
                                "data-a-id": "online-friend-" + t,
                                "data-a-target": "online-friend",
                                "data-a-name": "online-friend-" + e.node.login
                            }) : null
                        }) : []
                    }, n.getDisplayCount = function() {
                        return n.state.hasInteracted ? n.state.sortedFriends.length : Math.min(n.defaultInitialRenderCount, n.state.sortedFriends.length)
                    }, n.state = {
                        sortedFriends: [],
                        hasSorted: !1,
                        initialRenderCount: n.defaultInitialRenderCount,
                        hasInteracted: !1
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t = this;
                    this.sortTimeout && (clearTimeout(this.sortTimeout), this.sortTimeout = 0), this.sortTimeout = setTimeout(function() {
                        var n = !!e.friends && e.friends.length > 0;
                        t.setState({
                            sortedFriends: W(e.friends),
                            hasSorted: n
                        }), t.props.latencyTracking.reportInteractive(t.getDisplayCount())
                    }, 100)
                }, t.prototype.componentDidMount = function() {
                    this.props.loading || this.props.errored || !this.props.friends || this.setState({
                        sortedFriends: W(this.props.friends),
                        hasSorted: !0
                    })
                }, t.prototype.render = function() {
                    return this.props.friends && 0 !== this.props.friends.length || this.props.errored || this.props.loading || this.props.collapsed ? !this.props.errored && !this.props.loading && this.props.friends && this.state.hasSorted && this.props.friends.length > 0 && 0 === this.state.sortedFriends.length && !this.props.collapsed ? a.createElement(I, {
                        hasOfflineFriends: !0
                    }) : a.createElement("div", {
                        className: "online-friends",
                        onMouseEnter: this.onMouseEnter,
                        "data-a-target": "online-friends-list"
                    }, a.createElement(T, {
                        title: Object(s.d)("Online Friends", "OnlineFriends"),
                        collapsed: this.props.collapsed,
                        collapsedIcon: y._16.FriendsSC
                    }), this.renderOnlineFriends()) : a.createElement(I, null)
                }, t = i.__decorate([Object(Z.a)(function(e) {
                    return {
                        query: ue,
                        skip: !e.friends || 0 === e.friends.length,
                        topic: Object(ee.l)(e.selfID || ""),
                        type: X.PubsubMessageType.Presence,
                        mutator: function(t, n) {
                            if (!n.currentUser || !n.currentUser.friends) return n;
                            for (var i = -1, r = 0; r < n.currentUser.friends.edges.length; r++) {
                                if (+n.currentUser.friends.edges[r].node.id === t.data.user_id) {
                                    i = r;
                                    break
                                }
                            }
                            if (i >= 0) {
                                var a = n.currentUser.friends.edges[i];
                                a.availability = t.data.availability.toUpperCase();
                                var o = "$User:" + e.selfID + ".friends.edges." + i + ".activity";
                                a.activity = Object(J.a)(t.data.activity, o)
                            }
                            return n
                        }
                    }
                }), Object(Z.a)(function(e) {
                    return {
                        query: ue,
                        skip: !e.friends || 0 === e.friends.length,
                        topic: Object(ee.g)(e.selfID || ""),
                        mutator: function(t, n) {
                            if (!n.currentUser || !n.currentUser.friends) return n;
                            var i = t.change === X.FrienshipChangeType.Removed || t.change === X.FrienshipChangeType.SelfRemoved;
                            if ((t.change === X.FrienshipChangeType.Accepted || t.change === X.FrienshipChangeType.SelfAccepted) && setTimeout(function() {
                                    e && e.refetch && e.refetch()
                                }), !i) return n;
                            for (var r = -1, a = t.change === X.FrienshipChangeType.SelfRemoved, o = 0; o < n.currentUser.friends.edges.length; o++) {
                                if (n.currentUser.friends.edges[o].node.id === (a ? t.target_user_id : t.user_id)) {
                                    r = o;
                                    break
                                }
                            }
                            return r >= 0 && n.currentUser.friends.edges.splice(r, 1), n
                        }
                    }
                }), Object(h.d)("OnlineFriends")], t)
            }(a.Component),
            me = n("HM6l"),
            he = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getSlideInContent = function() {
                        if (t.props.firstPageLoaded) return a.createElement(f.a, {
                            tabIndex: -1,
                            hideIcon: !0,
                            hideWhenFollowing: !0,
                            size: y.x.Small,
                            channelLogin: t.props.login,
                            "data-a-target": "recommended-channel-follow-button"
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = Object(b.a)(this.props.login, this.props.displayName, !0),
                        t = this.props.gameName.length > 0 ? e + " - " + this.props.gameName : e;
                    return a.createElement(S, i.__assign({
                        title: e,
                        titleElement: Object(b.a)(this.props.login, this.props.displayName),
                        avatarAlt: e,
                        avatarSrc: this.props.profileImageURL,
                        linkTo: {
                            pathname: "/" + this.props.login,
                            state: {
                                content: R.PageviewContent.RecommendedChannels,
                                medium: R.PageviewMedium.SideNav,
                                content_index: this.props.contentIndex
                            }
                        },
                        metadataLeft: this.props.gameName,
                        slideInContent: this.getSlideInContent(),
                        collapsed: this.props.collapsed,
                        tooltipLabel: t
                    }, Object(y._53)(this.props)))
                }, t = i.__decorate([Object(h.d)("RecommendedChannel")], t)
            }(a.Component);
        var ge = Object(g.b)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded
                }
            })(he),
            fe = n("DMR/"),
            ve = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasLoadedMore: !1
                    }, t.getRecommendedChannels = function() {
                        return t.props.data.currentUser.recommendations.liveRecommendations.nodes.slice(0, t.getNodesToDisplayCount()).map(function(e, n) {
                            return e.broadcaster && e.broadcaster.id && e.broadcaster.login ? a.createElement(ge, {
                                id: e.broadcaster.id,
                                key: "recommended-channels-" + e.id,
                                collapsed: t.props.collapsed,
                                "data-a-id": "recommended-channel-" + n,
                                "data-a-target": "recommended-channel",
                                displayName: e.broadcaster.displayName,
                                contentIndex: n,
                                gameName: e.game && e.game.name || "",
                                login: e.broadcaster.login,
                                profileImageURL: e.broadcaster.profileImageURL
                            }) : null
                        })
                    }, t.hasDataToDisplay = function() {
                        return !(t.props.data.loading || t.props.data.error || !t.props.data.currentUser || 0 === t.props.data.currentUser.recommendations.liveRecommendations.nodes.length)
                    }, t.getNodesToDisplayCount = function() {
                        return t.hasDataToDisplay ? t.state.hasLoadedMore ? t.props.data.currentUser.recommendations.liveRecommendations.nodes.length : Math.min(t.props.data.currentUser.recommendations.liveRecommendations.nodes.length, 3) : 0
                    }, t.onClickShowMore = function() {
                        t.setState({
                            hasLoadedMore: !0
                        })
                    }, t.onClickShowLess = function() {
                        t.setState({
                            hasLoadedMore: !1
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data.loading || this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (!this.hasDataToDisplay()) return null;
                    var e = null;
                    return !this.props.collapsed && this.props.data.currentUser.recommendations.liveRecommendations.nodes.length > 3 && (e = a.createElement(M, {
                        onClickMore: this.onClickShowMore,
                        onClickLess: this.onClickShowLess,
                        lessDisabled: !this.state.hasLoadedMore,
                        moreDisabled: this.state.hasLoadedMore
                    })), a.createElement("div", {
                        className: "recommended-channels"
                    }, a.createElement(T, {
                        title: Object(s.d)("Recommended Channels", "RecommendedChannels"),
                        collapsed: this.props.collapsed,
                        collapsedIcon: y._16.NavChannels
                    }), this.getRecommendedChannels(), e)
                }, t = i.__decorate([Object(c.a)(fe, {
                    options: function() {
                        return {
                            variables: {
                                first: 10,
                                recID: Object(me.a)(),
                                language: ""
                            }
                        }
                    }
                }), Object(h.d)("RecommendedChannels")], t)
            }(a.Component),
            be = n("oIkB"),
            ke = n("Vprp"),
            ye = n("UhzT"),
            Se = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.getSlideInContent = function() {
                        if (!n.state.working) {
                            var e = Object(s.d)("Add Friend", "RecommendedFriend");
                            return a.createElement(y.v, {
                                tabIndex: -1,
                                ariaLabel: e,
                                type: y.w.Primary,
                                icon: y._16.AddFriend,
                                size: y.x.Small,
                                onClick: n.onClickAddFriend,
                                "data-a-target": "recommended-friend-add-button"
                            })
                        }
                    }, n.handleClick = function(e) {
                        e.preventDefault();
                        var t = Object(le.a)(n.props.user.id, n.props.currentUserID);
                        n.props.openThread(t), Object(ae.c)({
                            force: !0,
                            timeout: 0
                        })
                    }, n.onClickAddFriend = function() {
                        n.setState({
                            working: !0
                        }, function() {
                            var e = Object(be.a)({
                                targetID: n.props.user.id
                            });
                            n.props.createFriendRequest(e).then(n.props.onRecommendationChanged).catch(function() {
                                return n.setState({
                                    working: !1
                                })
                            })
                        })
                    }, n.onMouseEnter = function() {
                        Object(ae.d)({
                            id: n.props.user.id,
                            direction: y.q.Right,
                            ref: n.ref
                        })
                    }, n.onMouseLeave = function() {
                        return Object(ae.c)()
                    }, n.setRefDelegate = function(e) {
                        n.ref = e
                    }, n.state = {
                        working: !1
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return a.createElement("div", {
                        ref: this.setRefDelegate,
                        onMouseEnter: this.onMouseEnter,
                        onMouseLeave: this.onMouseLeave
                    }, a.createElement(S, i.__assign({
                        title: this.props.user.displayName,
                        titleElement: Object(b.a)(this.props.user.login, this.props.user.displayName),
                        avatarAlt: this.props.user.displayName,
                        avatarSrc: this.props.user.profileImageURL,
                        onClick: this.handleClick,
                        linkTo: "#",
                        metadataLeft: "",
                        collapsed: this.props.collapsed,
                        slideInContent: this.getSlideInContent()
                    }, Object(y._53)(this.props))))
                }, t = i.__decorate([Object(c.a)(ke, {
                    name: "createFriendRequest"
                }), Object(c.a)(ye, {
                    name: "dismissFriendRecommendation"
                }), Object(h.d)("RecommendedFriend")], t)
            }(a.Component);
        var _e = Object(g.b)(function(e) {
                return {
                    currentUserID: e.session.user && "" + e.session.user.id || ""
                }
            }, function(e) {
                return Object(te.b)({
                    openThread: function(e) {
                        return Object(ne.l)({
                            collapsed: !1,
                            threadID: e,
                            ignoreCollapseIfOpen: !0
                        }, Object(ie.a)())
                    }
                }, e)
            })(Se),
            Ne = n("+R+X"),
            Ee = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getRecommendedFriends = function() {
                        return t.props.data.currentUser.recommendations.friends.slice(0, t.getDisplayCount(t.props)).map(function(e, n) {
                            return e.user.id ? a.createElement(_e, {
                                key: "recommended-friends-" + e.user.id,
                                user: e.user,
                                collapsed: t.props.collapsed,
                                onRecommendationChanged: t.onRecommendationDataChanged,
                                "data-a-id": "recommended-friend-" + n,
                                "data-a-target": "recommended-friend"
                            }) : null
                        })
                    }, t.getDisplayCount = function(e) {
                        return Math.min(5, e.data.currentUser.recommendations.friends.length)
                    }, t.onRecommendationDataChanged = function() {
                        t.props.data.refetch()
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data.loading || this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.props.collapsed || this.props.data.loading || this.props.data.error || 0 === this.props.data.currentUser.recommendations.friends.length ? null : a.createElement("div", {
                        className: "recommended-friends"
                    }, a.createElement(T, {
                        title: Object(s.d)("Recommended Friends", "RecommendedFriends")
                    }), this.getRecommendedFriends())
                }, t = i.__decorate([Object(c.a)(Ne), Object(h.d)("RecommendedFriends")], t)
            }(a.Component),
            Ce = n("puy8"),
            Te = n("5LoI"),
            we = n("MAZT"),
            Oe = n("4ik2"),
            Ie = n("iXJ1"),
            De = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.handleClick = function(e) {
                        e.preventDefault();
                        var t = Object(le.a)(n.props.id, n.props.currentUserID);
                        n.props.openThread(t)
                    }, n.getSlideInContent = function() {
                        if (!n.state.working) {
                            if (n.state.requested) {
                                var e = Object(s.d)("Cancel Request", "SearchFriendResult");
                                return a.createElement(y.v, {
                                    ariaLabel: e,
                                    type: y.w.Primary,
                                    icon: y._16.Close,
                                    size: y.x.Small,
                                    onClick: n.onClickCancelRequest,
                                    "data-a-target": "search-result-cancel-button"
                                })
                            }
                            var t = Object(s.d)("Add Friend", "SearchFriendResult");
                            return a.createElement(y.v, {
                                ariaLabel: t,
                                type: y.w.Primary,
                                icon: y._16.AddFriend,
                                size: y.x.Small,
                                onClick: n.onClickAddFriend,
                                "data-a-target": "search-result-add-button"
                            })
                        }
                    }, n.onClickAddFriend = function() {
                        n.setState({
                            working: !0
                        }, function() {
                            n.props.createFriendRequest(Object(be.a)({
                                targetID: n.props.id
                            })).then(function() {
                                n.setState({
                                    working: !1,
                                    requested: !0
                                })
                            }).catch(function() {
                                n.setState({
                                    working: !1
                                })
                            })
                        })
                    }, n.onClickCancelRequest = function() {
                        n.setState({
                            working: !0
                        }, function() {
                            n.props.cancelFriendRequest(Object(be.a)({
                                targetID: n.props.id
                            })).then(function() {
                                n.setState({
                                    working: !1,
                                    requested: !1
                                })
                            }).catch(function() {
                                n.setState({
                                    working: !1
                                })
                            })
                        })
                    }, n.state = {
                        working: !1,
                        requested: !1
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(S, i.__assign({
                        title: this.props.displayName,
                        titleElement: Object(b.a)(this.props.login, this.props.displayName),
                        avatarAlt: this.props.displayName,
                        avatarSrc: this.props.profileImageURL,
                        linkTo: "#",
                        onClick: this.handleClick,
                        slideInContent: this.getSlideInContent(),
                        collapsed: this.props.collapsed
                    }, Object(v.a)(this.props)))
                }, t = i.__decorate([Object(c.a)(Ie, {
                    name: "createFriendRequest"
                }), Object(c.a)(Oe, {
                    name: "cancelFriendRequest"
                }), Object(h.d)("Search Friend Result")], t)
            }(a.Component);
        var Pe = Object(g.b)(function(e) {
                return {
                    currentUserID: e.session.user && "" + e.session.user.id || ""
                }
            }, function(e) {
                return Object(te.b)({
                    openThread: function(e) {
                        return Object(ne.l)({
                            collapsed: !1,
                            threadID: e,
                            ignoreCollapseIfOpen: !0
                        }, Object(ie.a)())
                    }
                }, e)
            })(De),
            Fe = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.inputTimeout = 0, n.renderFilteredFriends = function() {
                        return n.state.filteredFriends && 0 !== n.state.filteredFriends.length ? n.state.filteredFriends.filter(function(e) {
                            return null !== e.node.id
                        }).map(function(e, t) {
                            return a.createElement(de, {
                                activity: e.activity,
                                availability: e.availability,
                                key: "friend-search-results-" + e.node.id,
                                collapsed: n.props.collapsed,
                                user: e.node,
                                "data-a-id": "friend-search-result-" + t,
                                "data-a-target": "friend-search-result"
                            })
                        }) : []
                    }, n.renderSearchResults = function() {
                        var e = n.state.searchResults;
                        return e && e.users && 0 !== e.users.totalHits ? e.users.hits.map(function(e, t) {
                            var i = e.profile_image || Object(Ce.c)(e.objectID, 30);
                            return a.createElement(Pe, {
                                id: e.objectID,
                                displayName: e.name,
                                login: e.login,
                                profileImageURL: i,
                                key: "search-results-" + e.objectID,
                                collapsed: n.props.collapsed,
                                "data-a-id": "search-result-" + t,
                                "data-a-target": "search-result"
                            })
                        }) : []
                    }, n.renderNoResults = function() {
                        return a.createElement(y._2, {
                            padding: {
                                x: 1,
                                y: .5
                            }
                        }, a.createElement(y._35, {
                            color: y.I.Alt2
                        }, Object(s.d)('Sorry, we couldn\'t find anyone named "{user}"', {
                            user: n.props.searchInput
                        }, "SearchFriendResult")))
                    }, n.trySearchAndFilter = function(e) {
                        if (e.searchInput && 0 === e.searchInput.length) return clearTimeout(n.inputTimeout), void(n.inputTimeout = 0);
                        clearTimeout(n.inputTimeout), n.inputTimeout = setTimeout(function() {
                            if (n.search(e.searchInput), e.friends && e.searchInput) {
                                var t = e.searchInput || "",
                                    i = {},
                                    r = e.friends.filter(function(e) {
                                        var n = (e.node.displayName || e.node.login || "").toLowerCase().includes(t.toLowerCase());
                                        return n && (i[e.node.login] = !0), n
                                    });
                                n.setState({
                                    filteredFriends: r,
                                    filterFriendsByLogin: i
                                })
                            }
                        }, 200)
                    }, n.state = {
                        searching: !0
                    }, n.searchClient = new we.a(s.a.algoliaApplicationID, s.a.algoliaAPIKey), n
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.props.searchInput !== e.searchInput && this.trySearchAndFilter(e)
                }, t.prototype.componentDidMount = function() {
                    this.trySearchAndFilter(this.props)
                }, t.prototype.componentWillUnmount = function() {
                    clearTimeout(this.inputTimeout), this.inputTimeout = 0
                }, t.prototype.render = function() {
                    var e = null,
                        t = !this.state.filteredFriends || 0 === this.state.filteredFriends.length,
                        n = !this.state.searchResults || !this.state.searchResults.users || 0 === this.state.searchResults.users.hits.length;
                    return e = !this.state.searching && t && n ? this.renderNoResults() : [this.renderFilteredFriends(), this.renderSearchResults()], a.createElement("div", {
                        className: "recommended-friends"
                    }, a.createElement(T, {
                        title: Object(s.d)("Results", "SearchFriendResults")
                    }), e)
                }, t.prototype.search = function(e) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var t, n = this;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return e ? (this.setState({
                                        searching: !0
                                    }), [4, this.searchClient.queryForType(Te.a.Users, e, Object(me.a)(), {
                                        hitsPerPage: 10
                                    })]) : [2];
                                case 1:
                                    return t = i.sent(), this.inputTimeout && e === this.props.searchInput && (t && t.users && (t.users.hits = t.users.hits.filter(function(e) {
                                        return n.state.filterFriendsByLogin && !n.state.filterFriendsByLogin[e.login]
                                    })), this.setState({
                                        searchResults: t,
                                        searching: !1
                                    })), [2]
                            }
                        })
                    })
                }, t = i.__decorate([Object(h.d)("Search Friend Results")], t)
            }(a.Component),
            Re = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleInputChange = function(e) {
                        t.props.onInputChange(e.target.value)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return this.props.collapsed ? null : a.createElement(y._25, {
                        borderTop: !0,
                        padding: 1
                    }, a.createElement(y._18, {
                        id: "side-nav.find-friends",
                        placeholder: Object(s.d)("Search to Add Friends", "SearchFriendsInput"),
                        onChange: this.handleInputChange,
                        "data-a-target": "side-nav-search-input"
                    }))
                }, t
            }(a.Component),
            xe = n("/Vp/");
        n("vQuK");
        n.d(t, "d", function() {
            return Le
        }), n.d(t, "b", function() {
            return Ae
        }), n.d(t, "a", function() {
            return je
        }), n.d(t, "c", function() {
            return Ge
        });
        var Le = 1200,
            Ue = "treatment",
            Me = "control",
            Ae = "none",
            je = "all_content",
            We = "no_archives",
            Be = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.logger = s.n.logger.withCategory("side-nav"), n.handleToggleVisibility = function() {
                        var e = n.getLayoutCache();
                        n.props.collapsed ? (n.props.expandSideNav(), e.resource.isSocialColumnClosedByUserAction = !1) : (n.props.collapseSideNav(), e.resource.isSocialColumnClosedByUserAction = !0), s.k.set(s.n.config.layoutCacheKey, e), Object(p.c)({
                            element: p.a.SocialColumn,
                            action: n.props.collapsed ? p.b.Open : p.b.Close
                        })
                    }, n.collapseOnBreakpoint = function() {
                        var e = window.innerWidth;
                        e < Le && !n.state.forceCollapsed ? n.setState({
                            forceCollapsed: !0
                        }) : e >= Le && n.state.forceCollapsed && n.setState({
                            forceCollapsed: !1
                        }), n.resetAnimationState()
                    }, n.handleWindowResize = function() {
                        n.resizeAnimationFrame || (n.resizeAnimationFrame = requestAnimationFrame(n.collapseOnBreakpoint))
                    }, n.resetAnimationState = function() {
                        n.resizeAnimationFrame = null
                    }, n.onHistoryChange = function(e) {
                        var t = n.props.isLoggedIn,
                            i = Object(xe.a)({
                                isLoggedIn: t,
                                location: e
                            });
                        i !== n.state.hideSideNav && n.setState({
                            hideSideNav: i
                        })
                    }, n.onSearchInputChange = function(e) {
                        n.setState({
                            searchInput: e
                        })
                    }, n.reportInteractive = function() {
                        n.props.isLoggedIn && (n.props.data.loading || n.props.data.error) || n.props.latencyTracking.reportInteractive()
                    }, n.getRelevanceSortingAssignment = function(e) {
                        switch (e) {
                            case Ue:
                                return !0;
                            case Me:
                            default:
                                return !1
                        }
                    }, n.getVideoAssignment = function(e) {
                        switch (e) {
                            case Ae:
                            case je:
                            case We:
                                return e;
                            default:
                                return Ae
                        }
                    };
                    var i = t.isLoggedIn,
                        r = t.location;
                    return n.state = {
                        isError: !1,
                        hideSideNav: Object(xe.a)({
                            isLoggedIn: i,
                            location: r
                        }),
                        forceCollapsed: !1,
                        videoExperimentAssignment: Ae,
                        premieresEnabled: !1,
                        sortByRelevance: !1
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentDidCatch = function(e, t) {
                    var n = this;
                    this.setState({
                        isError: !0
                    }, function() {
                        n.logger.error(e, "A unhandled exception occurred in the component hierarchy", {
                            info: t
                        })
                    })
                }, t.prototype.componentWillMount = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e, t, n;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return [4, s.n.experiments.getAssignment("TWILIGHT_VIDEOS_IN_SIDENAV")];
                                case 1:
                                    return e = i.sent(), [4, s.n.experiments.getAssignment("TWILIGHT_PREMIERE_UPLOAD_FLOW")];
                                case 2:
                                    return t = i.sent(), [4, s.n.experiments.getAssignment("TWILIGHT_AML_RANKING_FOLLOWS")];
                                case 3:
                                    return n = i.sent(), this.setState({
                                        videoExperimentAssignment: this.getVideoAssignment(e),
                                        premieresEnabled: "yes" === t,
                                        sortByRelevance: this.getRelevanceSortingAssignment(n)
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.componentDidMount = function() {
                    this.reportInteractive(), this.historyUnlisten = s.n.history.listen(this.onHistoryChange), window.addEventListener("resize", this.handleWindowResize), this.collapseOnBreakpoint()
                }, t.prototype.componentDidUpdate = function() {
                    this.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    !this.props.collapsed && e.collapsed && this.state.searchInput && this.state.searchInput.length > 0 && this.setState({
                        searchInput: ""
                    })
                }, t.prototype.componentWillUnmount = function() {
                    this.historyUnlisten(), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame), window.removeEventListener("resize", this.handleWindowResize)
                }, t.prototype.render = function() {
                    if (this.state.isError) return null;
                    var e = this.props.collapsed || this.state.forceCollapsed,
                        t = r("side-nav", {
                            "side-nav--collapsed": e
                        }),
                        n = e ? "side-nav-bar-collapsed" : "side-nav-bar",
                        i = {
                            "side-nav__toggle-visibility": !0,
                            "side-nav__toggle-visibility--open": e
                        },
                        o = a.createElement(y.W, {
                            position: y._9.Absolute,
                            flexGrow: 0,
                            flexShrink: 0,
                            display: this.state.forceCollapsed ? y.N.Hide : y.N.Block,
                            className: r(i),
                            "data-a-target": "side-nav-arrow"
                        }, a.createElement("button", {
                            onClick: this.handleToggleVisibility
                        }, a.createElement(y.W, {
                            className: "side-nav__toggle-visibility-icon",
                            position: y._9.Absolute
                        }, a.createElement(y._35, {
                            type: y._40.Span
                        }, a.createElement(y._15, {
                            asset: y._16.GlyphArrDown
                        })))));
                    if (!this.props.isLoggedIn) return this.state.hideSideNav ? null : a.createElement(y._2, {
                        className: t,
                        flexShrink: 0,
                        flexGrow: 0,
                        fullHeight: !0,
                        position: y._9.Relative,
                        "data-a-target": n
                    }, a.createElement(y._2, {
                        className: Object(u.c)(d.a.Dark),
                        flexShrink: 0,
                        fullWidth: !0,
                        fullHeight: !0
                    }, a.createElement(y._25, {
                        borderRight: !0,
                        className: "side-nav__theme-wrapper",
                        flexShrink: 0,
                        flexGrow: 1,
                        flexDirection: y.P.Column,
                        flexWrap: y.Q.NoWrap,
                        fullWidth: !0,
                        fullHeight: !0,
                        display: y.N.Flex,
                        position: y._9.Relative
                    }, a.createElement(y._2, {
                        flexWrap: y.Q.NoWrap,
                        fullHeight: !0,
                        display: y.N.Flex,
                        position: y._9.Relative,
                        fullWidth: !0
                    }, a.createElement(y.W, {
                        flexGrow: 1,
                        fullWidth: !0
                    }, a.createElement(l.b, {
                        suppressScrollX: !0
                    }, a.createElement(D, {
                        collapsed: e
                    })))))), o);
                    var s = this.state.searchInput && this.state.searchInput.length > 0 && !e,
                        c = null,
                        p = this.props.data && !this.props.data.error && !this.props.data.loading && this.props.data.currentUser,
                        m = p && p.friends ? p.friends.edges : [];
                    s && (c = a.createElement(y.W, {
                        position: y._9.Absolute,
                        attachLeft: !0,
                        attachRight: !0,
                        attachTop: !0
                    }, a.createElement(l.b, {
                        className: "side-nav__overlay-wrapper",
                        suppressScrollX: !0
                    }, a.createElement(Fe, {
                        searchInput: this.state.searchInput,
                        friends: m,
                        key: "search-friend-results",
                        collapsed: e
                    }))));
                    var h = p ? p.id : "";
                    return a.createElement(y._2, {
                        className: t,
                        flexShrink: 0,
                        fullHeight: !0,
                        position: y._9.Relative
                    }, a.createElement(y._2, {
                        className: Object(u.c)(d.a.Dark),
                        flexShrink: 0,
                        fullWidth: !0,
                        fullHeight: !0
                    }, a.createElement(y._25, {
                        className: "side-nav__theme-wrapper",
                        borderRight: !0,
                        flexShrink: 0,
                        flexGrow: 1,
                        flexDirection: y.P.Column,
                        flexWrap: y.Q.NoWrap,
                        fullWidth: !0,
                        fullHeight: !0,
                        display: y.N.Flex,
                        position: y._9.Relative
                    }, a.createElement(y._2, {
                        className: "side-nav__overlay-wrapper",
                        flexWrap: y.Q.NoWrap,
                        fullHeight: !0,
                        display: y.N.Flex,
                        position: y._9.Relative,
                        overflow: y._5.Hidden,
                        fullWidth: !0
                    }, a.createElement(y.W, {
                        flexGrow: 1,
                        fullWidth: !0,
                        overflow: y._5.Hidden
                    }, a.createElement(l.b, {
                        suppressScrollX: !0
                    }, a.createElement(y._2, {
                        flexGrow: 1,
                        fullWidth: !0
                    }, a.createElement(Y, {
                        collapsed: e,
                        premieresEnabled: this.state.premieresEnabled,
                        videoExperimentAssignment: this.state.videoExperimentAssignment,
                        sortByRelevance: this.state.sortByRelevance
                    }), a.createElement(pe, {
                        collapsed: e,
                        friends: m,
                        selfID: h,
                        loading: this.props.data.loading,
                        errored: !!this.props.data.error,
                        refetch: this.props.data.refetch
                    }), this.props.firstPageLoaded && a.createElement(ve, {
                        collapsed: e
                    }), this.props.firstPageLoaded && a.createElement(Ee, {
                        collapsed: e
                    })))), c), a.createElement(Re, {
                        collapsed: e,
                        onInputChange: this.onSearchInputChange
                    }))), o)
                }, t.prototype.getLayoutCache = function() {
                    return s.k.get(s.n.config.layoutCacheKey, m.a)
                }, t = i.__decorate([Object(h.d)("SideNav"), Object(c.a)(ue, {
                    skip: function(e) {
                        return !e.isLoggedIn
                    }
                })], t)
            }(a.Component),
            Ge = Object(o.f)(Be)
    },
    LjAQ: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("HW6M"),
            a = n("GiK3"),
            o = n("2KeS"),
            s = n("6sO2"),
            l = n("7vx8"),
            c = n("CSlQ"),
            d = n("xwpJ"),
            u = n("Odds"),
            p = n("x6ny"),
            m = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleChange = function(e) {
                        t.props.onChange(e.target.value)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = null,
                        t = Object(s.d)("Select One...", "ReportUserModal");
                    this.props.data.loading ? e = [a.createElement("option", {
                        key: "Loading"
                    }, Object(s.d)("Loading...", "ReportReasonsSelect"))] : e = (this.props.data.reportReasons || Object(d.b)()).map(function(e) {
                        return a.createElement("option", {
                            key: e.id,
                            value: e.id
                        }, e.text)
                    });
                    return a.createElement(u._2, {
                        margin: {
                            bottom: 2
                        }
                    }, a.createElement(u.S, {
                        id: "reporting-modal__select",
                        label: Object(s.d)("Select Reason (required)", "ReportUserModal")
                    }, a.createElement(u._21, {
                        id: "reporting-modal__select",
                        "data-test-selector": "reporting-modal.select",
                        disabled: this.props.data.loading || !!this.props.data.error,
                        onChange: this.handleChange,
                        defaultValue: t
                    }, a.createElement("option", {
                        disabled: !0,
                        key: "default"
                    }, t), e)))
                }, t = i.__decorate([Object(c.d)("ReportReasonSelect")], t)
            }(a.Component),
            h = Object(l.a)(p, {
                options: function(e) {
                    return {
                        variables: {
                            content: e.reportContentType
                        }
                    }
                }
            })(m),
            g = (n("I4TS"), n("1EXI"));
        n.d(t, "a", function() {
            return v
        }), n.d(t, "b", function() {
            return f
        }), n.d(t, "c", function() {
            return k
        });
        var f, v = "community_rules_violation";
        ! function(e) {
            e[e.Unsubmitted = 0] = "Unsubmitted", e[e.Success = 1] = "Success", e[e.FormError = 2] = "FormError", e[e.MutationError = 3] = "MutationError"
        }(f || (f = {}));
        var b = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        community: null,
                        description: "",
                        reason: null,
                        isCommunityReason: !1,
                        selectedCommunityID: null,
                        selectedCommunityName: null
                    }, t.headerMessage = Object(s.d)("Tell us your concern about this content so that we can review it to determine whether there has been a violation of the {tosLink}. {br} (Abuse of this feature is a violation of the terms of service)", {
                        br: a.createElement("br", null),
                        tosLink: a.createElement("a", {
                            href: "https://www.twitch.tv/p/terms-of-service",
                            target: "_blank"
                        }, Object(s.d)("terms of service", "ReportUser"))
                    }, "ReportUser"), t.selectCommunity = function(e) {
                        t.setState({
                            selectedCommunityID: e.target.value,
                            selectedCommunityName: e.target.getAttribute("data-community-name")
                        })
                    }, t.handleSubmit = function(e) {
                        e.preventDefault(), t.state.reason && t.state.description.length > 0 ? t.props.onSubmit(t.state.reason || "", t.state.description, t.state.selectedCommunityID, t.state.selectedCommunityName) : t.props.onError(f.FormError)
                    }, t.handleTextAreaChange = function(e) {
                        t.setState({
                            description: e.target.value
                        })
                    }, t.handleReasonChange = function(e) {
                        if (!t.props.data || t.props.data.loading || t.props.data.error || !t.props.data.user) return null;
                        var n = t.props.data.user.directories.nodes.filter(function(e) {
                            return "COMMUNITY" === e.directoryType
                        });
                        n.length && e === v ? t.setState({
                            reason: e,
                            selectedCommunityID: n[0].id,
                            selectedCommunityName: n[0].name,
                            isCommunityReason: !0
                        }) : t.setState({
                            reason: e,
                            isCommunityReason: !1
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(u._2, {
                        display: u.N.Flex,
                        flexDirection: u.P.Column,
                        alignItems: u.c.Center,
                        justifyContent: u._1.Center
                    }, this.renderStatusMessage(), this.renderBody())
                }, t.prototype.renderBody = function() {
                    return this.props.submitStatus === f.Success ? a.createElement("div", null, a.createElement(u.u, {
                        onClick: this.props.onClose
                    }, a.createElement(u._2, {
                        padding: {
                            x: 2
                        }
                    }, Object(s.d)("Close", "ReportUser")))) : a.createElement("div", null, a.createElement(u._2, {
                        "data-test-selector": "reporting.title",
                        margin: {
                            bottom: 1
                        },
                        "data-a-target": "reporting-channel-name"
                    }, a.createElement(u._35, {
                        type: u._40.H4
                    }, this.props.title), a.createElement(u._25, {
                        color: u.I.Alt2,
                        margin: {
                            top: 1
                        }
                    }, this.headerMessage)), a.createElement("form", null, a.createElement(u._25, {
                        borderTop: !0,
                        borderBottom: !0,
                        margin: {
                            y: 2
                        },
                        padding: {
                            y: 2
                        }
                    }, a.createElement(h, {
                        reportContentType: this.props.reportContentType,
                        onChange: this.handleReasonChange
                    }), this.renderCommunitiesSelector(), a.createElement(u.S, {
                        id: "reporting__text-area",
                        label: Object(s.d)("Description (required)", "ReportUser")
                    }, a.createElement(u._37, {
                        defaultValue: this.props.defaultDescription,
                        onChange: this.handleTextAreaChange
                    }))), a.createElement(u._25, {
                        display: u.N.Flex,
                        justifyContent: u._1.Center
                    }, a.createElement(u.u, {
                        onClick: this.handleSubmit
                    }, a.createElement(u._2, {
                        padding: {
                            x: 2
                        }
                    }, Object(s.d)("Send", "ReportUser"))))))
                }, t.prototype.renderCommunitiesSelector = function() {
                    if (!this.props.data || this.props.data.loading || this.props.data.error || !this.props.data.user) return null;
                    if (this.state.isCommunityReason) {
                        var e = this.props.data.user.directories.nodes.filter(function(e) {
                            return "COMMUNITY" === e.directoryType
                        }).map(function(e) {
                            return a.createElement("option", {
                                key: e.id,
                                value: e.id,
                                "data-community-name": e.name
                            }, e.displayName)
                        });
                        return a.createElement(u._2, {
                            margin: {
                                bottom: 2
                            }
                        }, a.createElement(u.S, {
                            id: "reporting__select-community",
                            label: Object(s.d)("Community", "ReportUser")
                        }, a.createElement(u._21, {
                            id: "reporting__select-community",
                            "data-test-selector": "reporting.select-community",
                            disabled: this.props.data.loading || !!this.props.data.error,
                            onChange: this.selectCommunity
                        }, e)))
                    }
                }, t.prototype.renderStatusMessage = function() {
                    var e = null;
                    switch (this.props.submitStatus) {
                        case f.FormError:
                            e = Object(s.d)("Reason and Description are required.", "ReportUser");
                            break;
                        case f.MutationError:
                            e = Object(s.d)("Sorry, a network error occurred when submitting your report. Please try again later.", "ReportUser");
                            break;
                        case f.Success:
                            e = Object(s.d)("Thank you for your report.", "ReportUser");
                            break;
                        default:
                            return null
                    }
                    var t = r({
                        "reporting__error-container": this.props.submitStatus !== f.Success,
                        "reporting__success-container": this.props.submitStatus === f.Success
                    });
                    return a.createElement(u._25, {
                        className: t,
                        fullWidth: this.props.submitStatus !== f.Success,
                        "data-test-selector": "reporting.error",
                        margin: {
                            bottom: 2
                        },
                        padding: 1
                    }, e)
                }, t
            }(a.Component),
            k = Object(o.d)(Object(l.a)(g, {
                options: function(e) {
                    return {
                        fetchPolicy: "network-only",
                        variables: {
                            userId: e.targetUserID
                        }
                    }
                }
            }))(b)
    },
    M5Tl: function(e, t) {},
    MAZT: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return l
        });
        var i = n("TToO"),
            r = n("6gPI"),
            a = (n.n(r), n("5LoI")),
            o = n("PHcJ"),
            s = {
                games: {
                    indexName: a.a.Games,
                    hitsPerPage: 2,
                    topNumericFilters: ["popularity>1"],
                    singleTypeNumericFilters: [],
                    optionalFacetFilters: ""
                },
                videos: {
                    indexName: a.a.Videos,
                    hitsPerPage: 6,
                    get topNumericFilters() {
                        return ["created_at>" + (e = new Date, e.setMonth(e.getMonth() - 1), Math.floor(e.getTime() / 1e3))];
                        var e
                    },
                    singleTypeNumericFilters: [],
                    optionalFacetFilters: ""
                },
                users: {
                    indexName: a.a.Users,
                    hitsPerPage: 2,
                    topNumericFilters: ["followers>50"],
                    singleTypeNumericFilters: [],
                    optionalFacetFilters: ""
                },
                channels: {
                    indexName: a.a.Channels,
                    hitsPerPage: 6,
                    get topNumericFilters() {
                        return ["channel_count>10", "updated_on>" + c()]
                    },
                    get singleTypeNumericFilters() {
                        return ["updated_on>" + c()]
                    },
                    optionalFacetFilters: ""
                },
                communities: {
                    indexName: a.a.Communities,
                    hitsPerPage: 2,
                    topNumericFilters: ["channels>9"],
                    singleTypeNumericFilters: [],
                    optionalFacetFilters: ""
                }
            },
            l = function() {
                function e(e, t) {
                    this.client = r(e, t)
                }
                return e.prototype.queryTopResults = function(e, t) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var n, r, a, o;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return r = [], (n = []).push(this.getTopResult(s.games, e)), n.push(this.getTopResult(s.videos, e)), n.push(this.getTopResult(s.users, e)), n.push(this.getTopResult(s.channels, e)), n.push(this.getTopResult(s.communities, e)), r.push(this.getTotalResult(s.games, e)), r.push(this.getTotalResult(s.videos, e)), r.push(this.getTotalResult(s.users, e)), r.push(this.getTotalResult(s.channels, e)), r.push(this.getTotalResult(s.communities, e)), [4, this.client.search(n.concat(r))];
                                case 1:
                                    return a = i.sent(), o = a.results, [2, {
                                        id: t,
                                        games: {
                                            totalHits: o[5].nbHits,
                                            hits: o[0].hits
                                        },
                                        videos: {
                                            totalHits: o[6].nbHits,
                                            hits: o[1].hits
                                        },
                                        users: {
                                            totalHits: o[7].nbHits,
                                            hits: o[2].hits
                                        },
                                        channels: {
                                            totalHits: o[8].nbHits,
                                            hits: o[3].hits
                                        },
                                        communities: {
                                            totalHits: o[9].nbHits,
                                            hits: o[4].hits
                                        }
                                    }]
                            }
                        })
                    })
                }, e.prototype.queryForType = function(e, t, n, r) {
                    var o = void 0 === r ? {} : r,
                        l = o.page,
                        c = void 0 === l ? 0 : l,
                        d = o.hitsPerPage,
                        u = void 0 === d ? 50 : d,
                        p = o.facetFilters,
                        m = void 0 === p ? "" : p,
                        h = o.numericFilters;
                    return i.__awaiter(this, void 0, void 0, function() {
                        var r, o, l, d, p, g, f, v = this;
                        return i.__generator(this, function(b) {
                            switch (b.label) {
                                case 0:
                                    switch (r = {
                                        id: n,
                                        currentPage: c
                                    }, o = function(e) {
                                        return i.__awaiter(v, void 0, void 0, function() {
                                            var n, a;
                                            return i.__generator(this, function(i) {
                                                switch (i.label) {
                                                    case 0:
                                                        return n = {
                                                            indexName: e.indexName,
                                                            query: t,
                                                            params: {
                                                                page: c,
                                                                hitsPerPage: u,
                                                                numericFilters: h || e.singleTypeNumericFilters,
                                                                facets: "*",
                                                                facetFilters: m
                                                            }
                                                        }, [4, this.client.search([n])];
                                                    case 1:
                                                        return a = i.sent(), r.exhaustedHits = !a.results[0].nbHits || a.results[0].hits.length < u, [2, {
                                                            totalHits: a.results[0].nbHits,
                                                            hits: a.results[0].hits
                                                        }]
                                                }
                                            })
                                        })
                                    }, e) {
                                        case a.a.Games:
                                            return [3, 1];
                                        case a.a.Users:
                                            return [3, 3];
                                        case a.a.Channels:
                                            return [3, 5];
                                        case a.a.Videos:
                                            return [3, 7];
                                        case a.a.Communities:
                                            return [3, 9]
                                    }
                                    return [3, 11];
                                case 1:
                                    return l = r, [4, o(s.games)];
                                case 2:
                                    return l.games = b.sent(), [3, 12];
                                case 3:
                                    return d = r, [4, o(s.users)];
                                case 4:
                                    return d.users = b.sent(), [3, 12];
                                case 5:
                                    return p = r, [4, o(s.channels)];
                                case 6:
                                    return p.channels = b.sent(), [3, 12];
                                case 7:
                                    return g = r, [4, o(s.videos)];
                                case 8:
                                    return g.videos = b.sent(), [3, 12];
                                case 9:
                                    return f = r, [4, o(s.communities)];
                                case 10:
                                    return f.communities = b.sent(), [3, 12];
                                case 11:
                                    return [2, null];
                                case 12:
                                    return [2, r]
                            }
                        })
                    })
                }, e.prototype.queryVideos = function(e, t, n) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var r, s, l, c;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    switch (n.sort) {
                                        case o.b.Newest:
                                            r = a.a.VideosNewest;
                                            break;
                                        case o.b.Popular:
                                        default:
                                            r = a.a.Videos
                                    }
                                    switch (s = [], n.length) {
                                        case o.a.Short:
                                            s.push("length<=900");
                                            break;
                                        case o.a.Long:
                                            s.push("length>900")
                                    }
                                    switch (l = {
                                        indexName: r,
                                        query: e,
                                        params: {
                                            page: 0,
                                            hitsPerPage: 50,
                                            numericFilters: s,
                                            facets: "*",
                                            facetFilters: ""
                                        }
                                    }, n.type) {
                                        case o.c.PastBroadcasts:
                                            l.params.facetFilters = "broadcast_type:archive";
                                            break;
                                        case o.c.Uploads:
                                            l.params.facetFilters = "broadcast_type:upload";
                                            break;
                                        case o.c.Highlights:
                                            l.params.facetFilters = "broadcast_type:highlight"
                                    }
                                    return [4, this.client.search([l])];
                                case 1:
                                    return c = i.sent(), [2, {
                                        id: t,
                                        totalHits: c.results[0].nbHits,
                                        hits: c.results[0].hits
                                    }]
                            }
                        })
                    })
                }, e.prototype.getTopResult = function(e, t) {
                    return {
                        indexName: e.indexName,
                        query: t,
                        params: {
                            page: 0,
                            hitsPerPage: e.hitsPerPage,
                            numericFilters: e.topNumericFilters
                        }
                    }
                }, e.prototype.getTotalResult = function(e, t) {
                    return {
                        indexName: e.indexName,
                        query: t,
                        params: {
                            hitsPerPage: 0,
                            numericFilters: e.singleTypeNumericFilters
                        }
                    }
                }, e
            }();

        function c() {
            return Math.floor(((new Date).getTime() - 6e5) / 1e3)
        }
    },
    N5sm: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "WhisperThread_SetThreadSpamStatus"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateWhisperThreadInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "spamInfo"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "lastMarkedNotSpamAt"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "likelihood"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 178
            }
        };
        n.loc.source = {
            body: "mutation WhisperThread_SetThreadSpamStatus($input: UpdateWhisperThreadInput!) {\nupdateWhisperThread(input: $input) {\nthread {\nid\nspamInfo {\nlastMarkedNotSpamAt\nlikelihood\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    ND9m: function(e, t) {},
    NY9D: function(e, t, n) {
        "use strict";
        t.c = function(e) {
            return "/directory/game/" + encodeURIComponent(e)
        }, t.a = function(e) {
            return "/communities/" + encodeURIComponent(e)
        }, t.b = function(e) {
            return "/events/" + encodeURIComponent(e)
        }, t.d = function(e) {
            return "/" + encodeURIComponent(e) + "/manager"
        }
    },
    NikC: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.b = function(e, t, n) {
            void 0 === n && (n = !0);
            return function(i) {
                i(Object(a.s)(e)), n && Object(r.d)(e), t && Object(o.b)(e, t)
            }
        };
        var i, r = n("VAT8"),
            a = n("7enT"),
            o = n("xrVp");
        ! function(e) {
            e[e.UserMenu = 1] = "UserMenu", e[e.TypedCommand = 2] = "TypedCommand"
        }(i || (i = {}))
    },
    O1nh: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            r = n("2KeS"),
            a = n("+xm8"),
            o = n("f2i/"),
            s = n("Aj/L"),
            l = n("TToO"),
            c = n("GiK3"),
            d = n("6sO2"),
            u = n("7vx8"),
            p = n("oIkB"),
            m = n("CSlQ"),
            h = n("Odds"),
            g = n("iYmP"),
            f = n("7iNp"),
            v = n("7dPO"),
            b = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hovered: !1
                    }, t.onClickAddFriend = function() {
                        t.props.onCreateFriendRequest(Object(p.a)({
                            targetID: t.props.channelID
                        }))
                    }, t.onClickUnfriend = function() {
                        t.props.onUnfriendUser(Object(p.a)({
                            targetID: t.props.channelID
                        }))
                    }, t
                }
                return l.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = Object(d.d)("Add Friend", "UserCard");
                    if (!this.props.isLoggedIn) return c.createElement(h.u, {
                        ariaLabel: e,
                        onClick: this.props.onLoginClick
                    }, e);
                    if (!this.props.friendsData && this.props.data && (this.props.data.loading || this.props.data.error)) return c.createElement(h._8, {
                        height: 30,
                        width: 60
                    });
                    if (!this.isFriend()) return c.createElement(h.u, {
                        onClick: this.onClickAddFriend
                    }, e);
                    var t = Object(d.d)("Unfriend", "UserCard"),
                        n = Object(d.d)("Friends", "UserCard");
                    return c.createElement(h.u, {
                        ariaLabel: t,
                        onClick: this.onClickUnfriend,
                        "data-a-target": "unfriend-button",
                        statusAlertText: t
                    }, n)
                }, t.prototype.isFriend = function() {
                    var e = this;
                    return !(!this.props.friendsData && this.props.data && (this.props.data.loading || this.props.data.error)) && !!(this.props.friendsData || this.props.data).currentUser.friends.edges.find(function(t) {
                        return !!t.node && t.node.id === e.props.channelID
                    })
                }, t = l.__decorate([Object(m.d)("FriendButton"), Object(u.a)(f, {
                    skip: function(e) {
                        return !!e.friendsData
                    }
                }), Object(u.a)(v, {
                    name: "onUnfriendUser"
                }), Object(u.a)(g, {
                    name: "onCreateFriendRequest"
                })], t)
            }(c.Component);
        var k = Object(i.b)(function(e) {
            return {
                isLoggedIn: Object(s.d)(e)
            }
        }, function(e) {
            return Object(r.b)({
                onLoginClick: function() {
                    return o.f(a.a.FriendAdd)
                }
            }, e)
        })(b);
        n.d(t, "a", function() {
            return k
        })
    },
    "P+j/": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("3zLD"),
            o = n("RH2O"),
            s = n("7vx8"),
            l = n("RweG"),
            c = n("Ldv2"),
            d = n("Aj/L"),
            u = n("Tzcg"),
            p = n("6sO2"),
            m = ["4.99", "9.99", "24.99"],
            h = n("CSlQ"),
            g = n("CwIZ"),
            f = n("HW6M"),
            v = n("zCIC"),
            b = n("6BvN"),
            k = n("7LIQ"),
            y = n("J4ib"),
            S = n("Odds"),
            _ = (n("9uSE"), function(e) {
                var t = {
                        "emote-picker__tab": !0
                    },
                    n = null,
                    a = null;
                if (e.channelTabVisible) {
                    var o = f(i.__assign({}, t, {
                        "emote-picker__tab--active": e.channelTabEnabled && e.channelTabSelected,
                        "emote-picker__tab--disabled": !e.channelTabEnabled
                    }));
                    n = r.createElement(S.W, {
                        padding: {
                            x: 1
                        }
                    }, r.createElement("div", {
                        key: "ChannelTabLink",
                        id: "emote-picker__channel",
                        className: o,
                        onClick: e.channelTabEnabled ? e.selectChannelTab : void 0,
                        "data-a-target": "emote-channel-tab"
                    }, r.createElement("span", null, Object(y.d)("Channel", "EmotePicker"))))
                }
                if (e.allTabVisible) {
                    var s = f(i.__assign({}, t, {
                        "emote-picker__tab--active": !(e.channelTabSelected && e.channelTabEnabled)
                    }));
                    a = r.createElement(S.W, {
                        padding: {
                            x: 1
                        }
                    }, r.createElement("div", {
                        key: "allTabLink",
                        id: "emote-picker__all",
                        className: s,
                        onClick: e.selectAllTab,
                        "data-a-target": "emote-all-tab"
                    }, r.createElement("span", null, Object(y.d)("All", "EmotePicker"))))
                }
                return r.createElement(S._25, {
                    background: S.m.Base,
                    borderTop: !0,
                    className: "emote-picker__tabs-container"
                }, n, a)
            }),
            N = n("YEG/"),
            E = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = [];
                    if (this.props.subscribeTexts)
                        for (var t = 0; t <= this.props.plan.level; t++) {
                            var n = this.props.subscribeTexts[t];
                            n && (t < this.props.plan.level ? (e.push(r.createElement("span", {
                                key: "upsell-predicate:" + t
                            }, n)), e.push(r.createElement("span", {
                                key: "upsell-plus:" + t
                            }, " + "))) : this.props.plan.level > 0 ? e.push(r.createElement("strong", {
                                key: "upsell-strong-end:" + this.props.plan.level
                            }, n)) : e.push(r.createElement("span", {
                                key: "upsell-end:" + t
                            }, n)))
                        }
                    if (!this.props.plan.emoteSetID) return null;
                    var i = {
                            id: this.props.plan.emoteSetID,
                            emotes: this.props.plan.emotes || []
                        },
                        a = {};
                    return this.props.plan.price && (a.purchase = Object(p.d)("${price}", {
                        price: this.props.plan.price
                    }, "PlanUpsell")), r.createElement(S._2, {
                        className: "emote-picker-plan-upsell",
                        display: S.N.Flex,
                        flexDirection: S.P.Column,
                        alignItems: S.c.Center,
                        margin: {
                            bottom: 1
                        }
                    }, r.createElement(k.a, {
                        emoteSet: i,
                        locked: !0
                    }), r.createElement(S._2, {
                        margin: 1,
                        alignItems: S.c.Center
                    }, e), r.createElement(N.a, {
                        isSubbedToTier: !1,
                        tierPrice: a.purchase || "",
                        reportSubAction: this.props.reportSubAction,
                        url: this.props.plan.url
                    }))
                }, t
            }(r.Component),
            C = (n("Xo53"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.closeOnEsc = function(e) {
                        e.keyCode === b.a.Esc && n.props.toggleVisibility()
                    }, n.handleFilterChange = function(e) {
                        var t = e.target.value,
                            i = t.toLowerCase(),
                            r = n.filterAvailableUpsells(n.props.availableUpsells, i),
                            a = n.filterEmoteSets(n.props.ownedChannelEmoteSets, i);
                        n.setState({
                            filter: i,
                            filteredAllEmoteSets: n.filterEmoteSets(n.props.allEmoteSets, i),
                            filteredAvailableUpsells: r,
                            filteredOwnedChannelEmoteSets: a,
                            inputValue: t,
                            channelTabEnabled: a.length > 0 || r.length > 0
                        })
                    }, n.state = {
                        filter: "",
                        filteredOwnedChannelEmoteSets: t.ownedChannelEmoteSets,
                        filteredAvailableUpsells: t.availableUpsells,
                        filteredAllEmoteSets: t.allEmoteSets,
                        inputValue: "",
                        channelTabSelected: !0,
                        channelTabEnabled: t.ownedChannelEmoteSets.length > 0 || t.availableUpsells.length > 0
                    }, n.selectAllTab = function() {
                        return n.setChannelTabSelected(!1)
                    }, n.selectChannelTab = function() {
                        return n.setChannelTabSelected(!0)
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    if (!e.gqlError)
                        if (this.state.filter.length > 0) {
                            var t = this.filterAvailableUpsells(this.props.availableUpsells, this.state.filter),
                                n = this.filterEmoteSets(this.props.ownedChannelEmoteSets, this.state.filter);
                            this.setState({
                                filteredAllEmoteSets: this.filterEmoteSets(this.props.allEmoteSets, this.state.filter),
                                filteredAvailableUpsells: t,
                                filteredOwnedChannelEmoteSets: n,
                                channelTabEnabled: n.length > 0 || t.length > 0
                            })
                        } else this.setState({
                            filteredOwnedChannelEmoteSets: e.ownedChannelEmoteSets,
                            filteredAvailableUpsells: e.availableUpsells,
                            filteredAllEmoteSets: e.allEmoteSets,
                            channelTabEnabled: e.ownedChannelEmoteSets.length > 0 || e.availableUpsells.length > 0
                        })
                }, t.prototype.render = function() {
                    return r.createElement(S.p, {
                        "data-a-target": "emote-picker",
                        direction: this.props.direction ? this.props.direction : S.q.TopRight,
                        size: this.props.size ? this.props.size : S.r.Medium,
                        noTail: !0,
                        show: !0
                    }, r.createElement(S._2, {
                        className: f("emote-picker")
                    }, this.renderTabContent(), r.createElement(S._2, {
                        className: "emote-picker__controls-container",
                        position: S._9.Relative
                    }, r.createElement(S._25, {
                        padding: 1,
                        borderTop: !0
                    }, r.createElement(S.Y, {
                        autoFocus: !0,
                        onChange: this.handleFilterChange,
                        onKeyDown: this.closeOnEsc,
                        placeholder: Object(p.d)("Search for Emotes", "EmotePicker"),
                        type: S.Z.Text,
                        value: this.state.inputValue
                    })), r.createElement(_, {
                        allTabVisible: this.props.allEmoteSets.length > 0,
                        channelTabEnabled: this.state.channelTabEnabled,
                        channelTabSelected: this.state.channelTabSelected,
                        channelTabVisible: !!this.props.channelTabVisible,
                        selectAllTab: this.selectAllTab,
                        selectChannelTab: this.selectChannelTab
                    }))))
                }, t.prototype.renderTabContent = function() {
                    var e = this,
                        t = [];
                    return this.props.gqlError ? t.push(r.createElement(S._2, {
                        key: "emotePicker-error"
                    }, r.createElement(S._35, {
                        color: S.I.Error
                    }, Object(p.d)("Unable to load available emotes.", "EmotePicker")))) : this.props.loading ? t.push(r.createElement(S._2, {
                        alignItems: S.c.Center,
                        display: S.N.Flex,
                        key: "loading",
                        fullHeight: !0,
                        fullWidth: !0,
                        justifyContent: S._1.Center
                    }, r.createElement(S._4, {
                        key: "LoadingSpinner"
                    }))) : this.state.channelTabEnabled && this.state.channelTabSelected ? (this.state.filteredOwnedChannelEmoteSets.length > 0 && t.push(r.createElement(S._2, {
                        className: "emote-picker__content-block",
                        key: "ownedChannelEmoteSets",
                        padding: 1,
                        position: S._9.Relative
                    }, r.createElement(k.a, {
                        emoteSet: this.state.filteredOwnedChannelEmoteSets[0],
                        onClickEmote: this.props.onClickEmote,
                        locked: !1
                    }))), t = t.concat(this.state.filteredAvailableUpsells.map(function(t) {
                        return r.createElement(S._2, {
                            className: "emote-picker__content-block",
                            key: "planUpsell:" + t.level,
                            padding: 1,
                            position: S._9.Relative
                        }, r.createElement(E, {
                            plan: t,
                            subscribeTexts: e.props.subscribeTexts,
                            reportSubAction: e.props.reportSubAction
                        }))
                    }))) : t = this.state.filteredAllEmoteSets.map(function(t) {
                        return r.createElement(S._2, {
                            key: "emoteGrid" + t.id,
                            position: S._9.Relative,
                            padding: {
                                top: 1,
                                bottom: 2
                            },
                            className: "emote-picker__content-block"
                        }, r.createElement(k.a, {
                            emoteSet: t,
                            onClickEmote: e.props.onClickEmote,
                            locked: !1
                        }))
                    }), t.length > 0 ? r.createElement(v.b, {
                        className: "emote-picker__tab-content"
                    }, r.createElement(S._2, {
                        padding: 1
                    }, t)) : null
                }, t.prototype.filterEmoteSet = function(e, t) {
                    return e.filter(function(e) {
                        return e.token.toLowerCase().includes(t)
                    })
                }, t.prototype.setChannelTabSelected = function(e) {
                    this.setState({
                        channelTabSelected: e
                    })
                }, t.prototype.filterEmoteSets = function(e, t) {
                    for (var n = [], i = 0, r = e; i < r.length; i++) {
                        var a = r[i],
                            o = this.filterEmoteSet(a.emotes, t);
                        o.length > 0 && n.push({
                            id: a.id,
                            emotes: o
                        })
                    }
                    return n
                }, t.prototype.filterAvailableUpsells = function(e, t) {
                    for (var n = [], r = 0, a = e; r < a.length; r++) {
                        var o = a[r];
                        if (o.emotes) {
                            var s = this.filterEmoteSet(o.emotes, t);
                            s.length > 0 && n.push(i.__assign({}, o, {
                                emotes: s
                            }))
                        }
                    }
                    return n
                }, t = i.__decorate([Object(h.d)("EmotePickerMenu", {
                    autoReportInteractive: !0
                })], t)
            }(r.Component)),
            T = n("LYwx"),
            w = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.trackSubEvent = function(e) {
                        Object(g.b)(i.__assign({}, e, {
                            action: g.a.ClickCheckout,
                            channelID: n.props.channelData && n.props.channelData.user && n.props.channelData.user.id || "",
                            channelLogin: n.props.channelData && n.props.channelData.user && n.props.channelData.user.displayName || "",
                            isMenuOpen: null,
                            hasSubCredit: null,
                            sub_location: "emote_picker",
                            modal: !1,
                            showPrimeContent: !0,
                            giftRecipient: null
                        }))
                    };
                    var r = {
                        allEmoteSets: [],
                        availableUpsells: [],
                        channelTabVisible: !1,
                        gqlError: t.emoteSetsData && !!t.emoteSetsData.error || t.channelData && !!t.channelData.error || !1,
                        gqlLoading: t.emoteSetsData && !!t.emoteSetsData.loading || t.channelData && !!t.channelData.loading || !1,
                        subscribeTexts: [],
                        ownedChannelEmoteSets: [],
                        ownedSetIDs: new Set([])
                    };
                    return r = n.applyDataPropsToState(t, r), n.state = i.__assign({}, r), n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.checkDataLoaded(this.props) && (this.props.onLoad && this.props.onLoad(this.checkForContent(this.props)), this.props.latencyTracking.reportInteractive())
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (e.emoteSetsData && e.emoteSetsData.error || e.channelData && e.channelData.error) this.setState({
                        gqlError: !0
                    });
                    else {
                        var t = this.applyDataPropsToState(e, this.state);
                        this.props.pubsub.messages.subscriptionInfo !== e.pubsub.messages.subscriptionInfo && (this.props.channelData && this.props.channelData.refetch(), this.props.emoteSetsData && this.props.emoteSetsData.refetch()), this.checkDataLoaded(e) && (e.latencyTracking.reportInteractive(), e.onLoad && e.onLoad(this.checkForContent(e)), t.gqlLoading = !1), this.setState(i.__assign({}, t, {
                            gqlError: !1
                        }))
                    }
                }, t.prototype.render = function() {
                    return this.props.visible ? r.createElement(C, {
                        allEmoteSets: this.state.allEmoteSets,
                        availableUpsells: this.state.availableUpsells,
                        channelTabVisible: this.state.channelTabVisible,
                        gqlError: this.state.gqlError,
                        loading: this.state.gqlLoading,
                        onClickEmote: this.props.onClickEmote,
                        ownedChannelEmoteSets: this.state.ownedChannelEmoteSets,
                        toggleVisibility: this.props.toggleVisibility,
                        subscribeTexts: this.state.subscribeTexts,
                        reportSubAction: this.trackSubEvent,
                        direction: this.props.direction,
                        size: this.props.size
                    }) : null
                }, t.prototype.checkDataLoaded = function(e) {
                    var t = !e.channelOwnerID || e.channelData && !e.channelData.loading,
                        n = !e.isLoggedIn || e.emoteSetsData && !e.emoteSetsData.loading;
                    return t && n
                }, t.prototype.checkForContent = function(e) {
                    var t = e.emoteSetsData && e.emoteSetsData.emoteSets && e.emoteSetsData.emoteSets.length > 0 || !1,
                        n = e.channelData && e.channelData.user && e.channelData.user.subscriptionProducts.filter(this.subscriptionProductHasEmotes).length > 0 || !1;
                    return t || n
                }, t.prototype.applyDataPropsToState = function(e, t) {
                    var n, r, a, o = i.__assign({}, t);
                    return e.emoteSetsData && e.emoteSetsData.emoteSets && (o.ownedSetIDs = new Set(e.emoteSetsData.emoteSets.map(function(e) {
                        return parseInt(e.id, 10)
                    })), o.allEmoteSets = Object(u.a)(e.emoteSetsData.emoteSets)), e.channelData && e.channelData.user && (o.availableUpsells = (n = o.ownedSetIDs, r = e.channelData.user.subscriptionProducts, a = [], r.forEach(function(e, t) {
                        e.emotes && e.emotes.length && e.emoteSetID && !n.has(parseInt(e.emoteSetID, 10)) && a.push(i.__assign({}, e, {
                            emotes: Object(u.b)(e.emotes),
                            level: t,
                            price: m[t]
                        }))
                    }), a), o.subscribeTexts = function(e) {
                        for (var t = [], n = 0; n < e.length; n++) {
                            var i = e[n];
                            0 === n && i.emotes && i.emotes.length > 1 ? t[n] = Object(p.d)("Unlock {numEmotes, number} Sub Emotes", {
                                numEmotes: i.emotes.length
                            }, "assembleSubscribeTexts") : 0 === n ? t[n] = Object(p.d)("Unlock 1 Sub Emote", "assembleSubscribeTexts") : i.emotes && i.emotes.length > 1 ? t[n] = Object(p.d)("{numEmotes, number} Extra {price} Sub Emotes", {
                                numEmotes: i.emotes.length,
                                price: m[n]
                            }, "assembleSubscribeTexts") : i.emotes && i.emotes.length && (t[n] = Object(p.d)("1 Extra ${price, number} Sub Emote", {
                                price: m[n]
                            }, "assembleSubscribeTexts"))
                        }
                        return t
                    }(e.channelData.user.subscriptionProducts), o.ownedChannelEmoteSets = function(e, t) {
                        for (var n = [{
                                id: "0",
                                emotes: []
                            }], i = 0, r = t; i < r.length; i++) {
                            var a = r[i];
                            a.emotes && a.emoteSetID && e.has(parseInt(a.emoteSetID, 10)) && (n[0].emotes = n[0].emotes.concat(Object(u.b)(a.emotes)))
                        }
                        return n[0].emotes.length ? n : []
                    }(o.ownedSetIDs, e.channelData.user.subscriptionProducts)), o.channelTabVisible = e.channelData && e.channelData.user && e.channelData.user.subscriptionProducts.filter(this.subscriptionProductHasEmotes).length > 0 || !1, o
                }, t.prototype.subscriptionProductHasEmotes = function(e) {
                    return void 0 !== e.emoteSetID && !!e.emotes && e.emotes.length > 0
                }, t
            }(r.Component);
        var O = Object(a.compose)(Object(o.b)(function(e) {
            return {
                currentUserID: e.session.user && e.session.user.id,
                isLoggedIn: Object(d.d)(e)
            }
        }), Object(s.a)(T, {
            name: "channelData",
            skip: function(e) {
                return !e.channelOwnerID
            },
            options: function(e) {
                return {
                    variables: {
                        channelOwnerID: e.channelOwnerID
                    }
                }
            }
        }), Object(l.a)([{
            topic: function(e) {
                return "user-subscribe-events-v1." + e.currentUserID
            },
            mapMessageTypesToProps: {
                "*": "subscriptionInfo"
            },
            skip: function(e) {
                return !e.currentUserID
            }
        }]), Object(h.d)("EmotePicker"), Object(c.a)())(w);
        n.d(t, "a", function() {
            return O
        })
    },
    P0T5: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        }), t.j = function() {
            g(r.MarkAllRead)
        }, t.h = function() {
            g(r.EnableDoNotDisturb)
        }, t.g = function() {
            g(r.DisableDoNotDisturb)
        }, t.l = function(e, t) {
            m({
                context: t,
                targetUserLogin: e,
                reason: i.Spam,
                source: "conversations_button"
            })
        }, t.o = function(e) {
            h(e, s.MarkNotSpam)
        }, t.n = function(e) {
            h(e, s.Archive)
        }, t.k = function(e) {
            p({
                threadID: e,
                action: a.Mute
            })
        }, t.m = function(e) {
            p({
                threadID: e,
                action: a.Unmute
            })
        }, t.i = function(e) {
            p({
                threadID: e,
                action: a.Expand
            })
        }, t.e = function(e) {
            p({
                threadID: e,
                action: a.Collapse
            })
        }, t.d = function(e) {
            p({
                threadID: e,
                action: a.Close
            })
        }, t.b = function(e) {
            p({
                threadID: e,
                action: a.Archive
            })
        }, t.f = function(e) {
            c.n.tracking.track(d.SpadeEventType.WhisperThreadCreate, {
                conversation_id: e.threadID,
                target_login: e.targetUserlogin,
                source: "search_target_result",
                search_result_rank: e.searchResultRank
            })
        }, t.c = function(e) {
            c.n.tracking.track(d.SpadeEventType.WhisperSearchClick, {
                query: e.searchQuery,
                source: "conversation_list",
                rank: e.searchResultRank,
                is_conversation: e.isConversation
            })
        }, t.q = function(e) {
            return l.__awaiter(this, void 0, void 0, function() {
                var t;
                return l.__generator(this, function(n) {
                    switch (n.label) {
                        case 0:
                            return [4, f()];
                        case 1:
                            return t = n.sent(), c.n.tracking.track(d.SpadeEventType.WhisperSent, {
                                to: e.targetUserLogin,
                                from: t && t.login,
                                player: "web",
                                is_turbo: t && t.hasTurbo,
                                conversation_id: e.threadID,
                                availability: t && t.availability
                            }), [2]
                    }
                })
            })
        }, t.p = function(e) {
            return l.__awaiter(this, void 0, void 0, function() {
                var t;
                return l.__generator(this, function(n) {
                    switch (n.label) {
                        case 0:
                            return [4, f()];
                        case 1:
                            return t = n.sent(), c.n.tracking.track(d.SpadeEventType.WhisperReceived, {
                                to: t && t.login,
                                from: e.targetUserLogin,
                                player: "web",
                                is_turbo: t && t.hasTurbo,
                                conversation_id: e.threadID
                            }), [2]
                    }
                })
            })
        };
        var i, r, a, o, s, l = n("TToO"),
            c = n("6sO2"),
            d = n("vH/s"),
            u = n("yDSg");
        n.n(u);

        function p(e) {
            c.n.tracking.track(d.SpadeEventType.WhisperThreadMod, {
                conversation_id: e.threadID,
                action: e.action
            })
        }

        function m(e) {
            return l.__awaiter(this, void 0, void 0, function() {
                var t;
                return l.__generator(this, function(n) {
                    switch (n.label) {
                        case 0:
                            return [4, f()];
                        case 1:
                            return t = n.sent(), c.n.tracking.track(d.SpadeEventType.WhisperIgnoreUser, {
                                ui_context: e.context,
                                from_login: t && t.login,
                                ignored_login: e.targetUserLogin,
                                reason: e.reason || i.Other,
                                source: e.source
                            }), [2]
                    }
                })
            })
        }

        function h(e, t) {
            return l.__awaiter(this, void 0, void 0, function() {
                var n;
                return l.__generator(this, function(i) {
                    switch (i.label) {
                        case 0:
                            return [4, f()];
                        case 1:
                            return n = i.sent(), c.n.tracking.track(d.SpadeEventType.WhisperThreadMod, {
                                conversation_id: e,
                                action: t,
                                login: n && n.login
                            }), [2]
                    }
                })
            })
        }

        function g(e) {
            c.n.tracking.track(d.SpadeEventType.WhisperAllThreadsMod, {
                action: e
            })
        }

        function f() {
            var e = this;
            return new Promise(function(t) {
                setTimeout(function() {
                    return l.__awaiter(e, void 0, void 0, function() {
                        var e, n, i;
                        return l.__generator(this, function(r) {
                            switch (r.label) {
                                case 0:
                                    e = null, r.label = 1;
                                case 1:
                                    return r.trys.push([1, 3, , 4]), [4, c.n.apollo.client.query({
                                        query: u
                                    })];
                                case 2:
                                    return e = r.sent(), [3, 4];
                                case 3:
                                    return n = r.sent(), c.i.error(n, "Failed to make query for current user info in WhisperSent reporting"), [3, 4];
                                case 4:
                                    return i = e && e.data && e.data.currentUser, t(i), [2]
                            }
                        })
                    })
                })
            })
        }! function(e) {
            e.Harassment = "Harassment", e.Spam = "Spam", e.Other = "Other"
        }(i || (i = {})),
        function(e) {
            e.MarkAllRead = "mark_all_read", e.EnableDoNotDisturb = "do_not_disturb_on", e.DisableDoNotDisturb = "do_not_disturb_off"
        }(r || (r = {})),
        function(e) {
            e.Mute = "mute", e.Unmute = "unmute", e.Expand = "maximize", e.Collapse = "minimize", e.Close = "close", e.Archive = "archive", e.Open = "open"
        }(a || (a = {})),
        function(e) {
            e.Dock = "dock", e.SpamPropmt = "dock_spam_cta"
        }(o || (o = {})),
        function(e) {
            e.Archive = "archive", e.MarkNotSpam = "mark_not_spam"
        }(s || (s = {}))
    },
    PHcJ: function(e, t, n) {
        "use strict";
        var i, r, a;
        n.d(t, "c", function() {
                return i
            }), n.d(t, "a", function() {
                return r
            }), n.d(t, "b", function() {
                return a
            }),
            function(e) {
                e[e.AllVideos = 0] = "AllVideos", e[e.PastBroadcasts = 1] = "PastBroadcasts", e[e.Uploads = 2] = "Uploads", e[e.Highlights = 3] = "Highlights"
            }(i || (i = {})),
            function(e) {
                e[e.AnyLength = 0] = "AnyLength", e[e.Short = 1] = "Short", e[e.Long = 2] = "Long"
            }(r || (r = {})),
            function(e) {
                e[e.Popular = 0] = "Popular", e[e.Newest = 1] = "Newest"
            }(a || (a = {}))
    },
    PLRK: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("6sO2"),
            o = function(e, t) {
                return Object(a.d)("{viewerCount,number} viewers on {channel}", {
                    viewerCount: e,
                    channel: t
                }, "DirectoryGamePage")
            },
            s = Object(a.d)("Untitled Broadcast", "StreamThumbnail"),
            l = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement("div", null, Object(a.d)("View All", "DirectoryInternationalSection"))
                }, t
            }(r.Component);
        n.d(t, !1, function() {
            return o
        }), n.d(t, "a", function() {
            return s
        }), n.d(t, !1, function() {
            return l
        })
    },
    PO03: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "DirectoryGame_CommunityPermissions"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "name"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "community"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "name"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissions"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "banning"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "timingOut"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 152
            }
        };
        n.loc.source = {
            body: "query DirectoryGame_CommunityPermissions($name: String!) {\ncommunity(name: $name) {\nid\nself {\npermissions {\nbanning\ntimingOut\n}\n}\n}\ncurrentUser {\nid\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    PPNL: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("OAwv"),
            a = n("6sO2"),
            o = n("9u8h"),
            s = {
                en: "en_US",
                de: "de_DE",
                es: "es_ES",
                "es-mx": "es_ES",
                fr: "fr_FR",
                it: "it_IT",
                hu: "hu_HU",
                pl: "pl_PL",
                pt: "pt_BR",
                "pt-br": "pt_BR",
                vi: "vn_VN",
                tr: "tr_TR",
                ro: "ro_RO",
                cs: "cs_CZ",
                el: "el_GR",
                ru: "ru_RU",
                th: "th_TH",
                "zh-cn": "zh_CN",
                "zh-tw": "zh_TW",
                ja: "ja_JP",
                ko: "ko_KR"
            },
            l = function(e) {
                return e && s[e] || "en_US"
            },
            c = n("pqU3");
        t.a = function() {
            var e = this;
            return function(t) {
                clearTimeout(d), d = setTimeout(function() {
                    return i.__awaiter(e, void 0, void 0, function() {
                        var e, n, s, d, u, p;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    e = a.n.logger.withCategory("leagueoflegends-api"), t(Object(c.e)(!0)), i.label = 1;
                                case 1:
                                    return i.trys.push([1, 3, , 4]), n = a.n.intl.getLanguageCode(), s = l(n), d = o.a.getAPIURL("/api/lol/champions?" + r.stringify({
                                        locale: s,
                                        on_site: 1
                                    })).toString(), [4, o.a.get(d)];
                                case 2:
                                    return (u = i.sent()).body ? t(Object(c.f)(u.body)) : (e.warn("LoL champion API response body was empty."), t(Object(c.d)(!0))), [3, 4];
                                case 3:
                                    throw p = i.sent(), t(Object(c.d)(!0)), e.error(p, "Failed to load LoL champion data"), p;
                                case 4:
                                    return [2]
                            }
                        })
                    })
                }, u)
            }
        };
        var d = 0,
            u = 350
    },
    QG7y: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return a
        }), n.d(t, "c", function() {
            return o
        }), n.d(t, "d", function() {
            return s
        }), n.d(t, "a", function() {
            return l
        }), n.d(t, "f", function() {
            return c
        }), n.d(t, "e", function() {
            return d
        }), n.d(t, "g", function() {
            return u
        }), t.i = function(e) {
            u.emit(c, e)
        }, t.h = function(e) {
            u.emit(d, e)
        };
        var i = n("BzvE"),
            r = (n.n(i), n("6sO2")),
            a = {
                directory: {
                    banner: "dfp-directory-banner",
                    rectangle: "dfp-directory-rectangle"
                },
                channel250: "google_companion_300x250",
                anonFront: {
                    rect: "Twitch_FPMedRect_holder",
                    banner: "Twitch_FPopaBanner_holder",
                    takeover: "Twitch_FPTakeoverSkinv2_holder",
                    bottom: "Twitch_FP970Bottom_holder",
                    sizzle: "sizzle_strip"
                },
                front: {
                    leaderboard: "hpto_logged_in_leaderboard",
                    rightTop: "hpto_logged_in_rcol_top",
                    rightBottom: "hpto_logged_in_rcol_bottom"
                }
            },
            o = {
                directory: {
                    banner: [
                        [970, 66],
                        [970, 250],
                        [728, 90]
                    ],
                    rectangle: [
                        [300, 250]
                    ]
                },
                channel250: [300, 250],
                anonFront: {
                    rect: [
                        [300, 250]
                    ],
                    banner: [
                        [970, 418],
                        [970, 67],
                        [970, 250],
                        [970, 150],
                        [980, 250]
                    ],
                    takeover: [
                        [1, 1]
                    ],
                    bottom: [
                        [970, 66],
                        [728, 90]
                    ],
                    sizzle: [
                        [980, 250]
                    ]
                },
                front: {
                    leaderboard: [
                        [970, 66],
                        [728, 90]
                    ],
                    rightTop: [
                        [300, 250]
                    ],
                    rightBottom: [
                        [300, 600]
                    ]
                }
            },
            s = {
                directory: "/" + r.a.dfpNetworkCode + "/twitch/directory",
                channel: "/" + r.a.dfpNetworkCode + "/twitch/channels",
                frontpage: "/" + r.a.dfpNetworkCode + "/twitch/homepage",
                sizzle: "/" + r.a.dfpNetworkCode + "/twitch/sizzle_strip"
            },
            l = {
                games: "games",
                channel: "channel",
                frontpage: "homepage"
            },
            c = "ads.slot-render-end",
            d = "ads.slot-ready",
            u = new i.EventEmitter
    },
    QPF3: function(e, t, n) {
        "use strict";
        t.a = function() {
            if (i.b) {
                var e = window.getComputedStyle(i.b);
                return +e.getPropertyValue("width").replace("px", "")
            }
            return 0
        };
        var i = n("1Mw/")
    },
    Qfvd: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return r
        });
        var i = "//static-cdn.jtvnw.net/ttv-boxart",
            r = "52x72"
    },
    RuaR: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FollowGameCard_UnfollowGame"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnfollowGameInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "unfollowGame"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "game"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "follow"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "followedAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 140
            }
        };
        n.loc.source = {
            body: "mutation FollowGameCard_UnfollowGame($input: UnfollowGameInput!) {\nunfollowGame(input: $input) {\ngame {\nself {\nfollow {\nfollowedAt\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    RweG: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("6sO2");

        function o(e) {
            return function(t) {
                return function(n) {
                    function o(t) {
                        var i = n.call(this, t) || this;
                        i.unsubscribers = {};
                        var r = {};
                        return e.map(function(e) {
                            e.skip && e.skip(t) || (r[i.getTopic(e.topic, t)] = {
                                isSubscribing: !0
                            })
                        }), i.state = {
                            status: r,
                            messages: {}
                        }, i
                    }
                    return i.__extends(o, n), o.prototype.componentDidMount = function() {
                        var t = this;
                        e.map(function(e) {
                            if (!e.skip || !e.skip(t.props)) {
                                var n = t.getTopic(e.topic, t.props);
                                t.unsubscribers[n] = a.j.subscribe({
                                    topic: n,
                                    success: function() {
                                        t.setState(function(e) {
                                            return {
                                                status: i.__assign({}, e.status, (t = {}, t[n] = {
                                                    isSubscribing: !1
                                                }, t))
                                            };
                                            var t
                                        })
                                    },
                                    failure: function(e) {
                                        t.setState(function(t) {
                                            return {
                                                status: i.__assign({}, t.status, (r = {}, r[n] = {
                                                    error: e,
                                                    isSubscribing: !1
                                                }, r))
                                            };
                                            var r
                                        })
                                    },
                                    onMessage: function(n) {
                                        e.mapMessageTypesToProps[n.type || ""] ? t.setState(function(t) {
                                            return {
                                                messages: i.__assign({}, t.messages, (r = {}, r[e.mapMessageTypesToProps[n.type || ""]] = n, r))
                                            };
                                            var r
                                        }) : e.mapMessageTypesToProps["*"] && t.setState(function(t) {
                                            return {
                                                messages: i.__assign({}, t.messages, (r = {}, r[e.mapMessageTypesToProps["*"]] = n, r))
                                            };
                                            var r
                                        })
                                    }
                                })
                            }
                        })
                    }, o.prototype.componentWillReceiveProps = function(t) {
                        var n = this,
                            r = {},
                            o = {};
                        e.forEach(function(e) {
                            if (!e.skip || !e.skip(t)) {
                                var s = n.getTopic(e.topic, t);
                                r[s] || (r[s] = {
                                    isSubscribing: !0
                                }), n.unsubscribers[s] ? o[s] = n.unsubscribers[s] : o[s] = a.j.subscribe({
                                    topic: s,
                                    success: function() {
                                        n.setState(function(e) {
                                            return {
                                                status: i.__assign({}, e.status, (t = {}, t[s] = {
                                                    isSubscribing: !1
                                                }, t))
                                            };
                                            var t
                                        })
                                    },
                                    failure: function(e) {
                                        n.setState(function(t) {
                                            return {
                                                status: i.__assign({}, t.status, (n = {}, n[s] = {
                                                    error: e,
                                                    isSubscribing: !1
                                                }, n))
                                            };
                                            var n
                                        })
                                    },
                                    onMessage: function(t) {
                                        e.mapMessageTypesToProps[t.type || ""] ? n.setState(function(n) {
                                            return {
                                                messages: i.__assign({}, n.messages, (r = {}, r[e.mapMessageTypesToProps[t.type || ""]] = t, r))
                                            };
                                            var r
                                        }) : e.mapMessageTypesToProps["*"] && n.setState(function(n) {
                                            return {
                                                messages: i.__assign({}, n.messages, (r = {}, r[e.mapMessageTypesToProps["*"]] = t, r))
                                            };
                                            var r
                                        })
                                    }
                                })
                            }
                        }), Object.keys(this.unsubscribers).forEach(function(e) {
                            o[e] || n.unsubscribers[e]()
                        }), this.unsubscribers = o, this.setState(function(e) {
                            return {
                                status: i.__assign({}, e.status, r)
                            }
                        })
                    }, o.prototype.componentWillUnmount = function() {
                        var e = this;
                        Object.keys(this.unsubscribers).map(function(t) {
                            return e.unsubscribers[t]()
                        })
                    }, o.prototype.render = function() {
                        var e = {
                            pubsub: {
                                messages: this.state.messages,
                                status: this.state.status
                            }
                        };
                        return r.createElement(t, i.__assign({}, this.props, e))
                    }, o.prototype.getTopic = function(e, t) {
                        return "string" == typeof e ? e : e(t)
                    }, o
                }(r.Component)
            }
        }
        n.d(t, "a", function() {
            return o
        })
    },
    RxMT: function(e, t, n) {
        "use strict";
        var i = n("AckU"),
            r = n("TToO"),
            a = n("GiK3"),
            o = n("6sO2"),
            s = n("HM6l"),
            l = n("cuT/"),
            c = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.renderPortal = function(e) {
                        l.c ? l.c.provideContent(e, n.contentID) : o.i.warn("RightColumn must be defined on the Root to manipulate its content.")
                    }, n.removePortal = function() {
                        l.c ? l.c.removeContent() : o.i.warn("RightColumn must be defined on the Root to manipulate its content.")
                    }, n.contentID = Object(s.a)(), n
                }
                return r.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    e.children ? this.renderPortal(e.children) : this.removePortal()
                }, t.prototype.componentDidMount = function() {
                    l.c || o.i.warn("RightColumn must be defined on the Root to manipulate its content."), this.props.children && this.renderPortal(this.props.children)
                }, t.prototype.componentWillUnmount = function() {
                    this.removePortal()
                }, t.prototype.render = function() {
                    return null
                }, t
            }(a.Component);
        n.d(t, "a", function() {
            return i.b
        }), n.d(t, "b", function() {
            return c
        })
    },
    Ryxq: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            var t = Math.floor(e / 3600),
                n = Math.floor((e - 3600 * t) / 60),
                i = e - 3600 * t - 60 * n;
            t < 10 && (t = "0" + t);
            n < 10 && (n = "0" + n);
            i < 10 && (i = "0" + i);
            return t + "h" + n + "m" + i + "s"
        }
    },
    S1vB: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            var t = i.b.get("prime_blocked_regions", []);
            if (!e) return !1;
            return !t.includes(e.toUpperCase())
        };
        var i = n("6sO2")
    },
    S4HN: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return i
        }), n.d(t, "a", function() {
            return r
        }), n.d(t, "g", function() {
            return s
        }), n.d(t, "f", function() {
            return l
        }), n.d(t, "d", function() {
            return c
        }), n.d(t, "e", function() {
            return d
        }), n.d(t, "c", function() {
            return u
        });
        var i, r, a = n("6sO2"),
            o = n("vH/s");
        ! function(e) {
            e.HomepageCTA = "homepage_cta", e.NewSignup = "new_signup"
        }(i || (i = {})),
        function(e) {
            e.Click = "click", e.Impression = "impression", e.Start = "start", e.Dismissed = "dismissed", e.Completed = "completed"
        }(r || (r = {}));
        var s = function(e) {
                var t = {
                    source: e.source,
                    action: r.Start
                };
                a.m.track(o.SpadeEventType.OnboardingEvent, t)
            },
            l = function() {
                var e = {
                    source: i.HomepageCTA,
                    action: r.Dismissed
                };
                a.m.track(o.SpadeEventType.OnboardingEvent, e)
            },
            c = function() {
                var e = {
                    source: i.HomepageCTA,
                    action: r.Completed
                };
                a.m.track(o.SpadeEventType.OnboardingEvent, e)
            },
            d = function(e, t) {
                var n = {
                    src: o.SpadeEventType.OnboardingEvent,
                    game: t
                };
                a.m.track(e, n)
            },
            u = function(e) {
                a.m.track(o.SpadeEventType.BrowseForYou, e)
            }
    },
    SUA7: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FollowButton_UnfollowUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnfollowUserInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "unfollowUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "follow"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "disableNotifications"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 130
            }
        };
        n.loc.source = {
            body: "mutation FollowButton_UnfollowUser($input: UnfollowUserInput!) {\nunfollowUser(input: $input) {\nfollow {\ndisableNotifications\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    SX5d: function(e, t) {},
    SZoP: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        }), t.b = o;
        var i = n("GiK3"),
            r = (n.n(i), /^[\x00-\x7F]*$/),
            a = function(e, t, n) {
                return void 0 === n && (n = !1), t && e && !o(t) ? n ? t + " (" + e + ")" : i.createElement("span", null, t, " ", i.createElement("span", {
                    className: "intl-login"
                }, "(" + e + ")")) : t || (e || "")
            };

        function o(e) {
            return r.test(e)
        }
    },
    T0IN: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            for (var t = e.length - 1; t > 0; t--) {
                var n = Math.floor(Math.random() * (t + 1)),
                    i = e[t];
                e[t] = e[n], e[n] = i
            }
            return e
        }
    },
    T8ns: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("BC6Q"),
            o = n("RxMT"),
            s = n("eXld"),
            l = n("LiYP"),
            c = n("RH2O"),
            d = n("2KeS"),
            u = n("7enT"),
            p = n("Aj/L");
        var m = Object(c.b)(function(e) {
                return {
                    collapsed: !e.ui.sideNavExpanded,
                    isLoggedIn: Object(p.d)(e),
                    firstPageLoaded: e.session.firstPageLoaded
                }
            }, function(e) {
                return Object(d.b)({
                    collapseSideNav: u.m,
                    expandSideNav: u.q
                }, e)
            })(l.c),
            h = n("H4lr"),
            g = n("2aoH"),
            f = n("/UH7"),
            v = n("uXDg"),
            b = n("QPF3"),
            k = n("HW6M"),
            y = n("6sO2"),
            S = n("7vx8"),
            _ = n("WIs4"),
            N = n("aMxy"),
            E = n("oIkB"),
            C = n("HZww"),
            T = n("rCmJ"),
            w = n("zCIC"),
            O = n("+Znq"),
            I = n("puy8"),
            D = n("HM6l"),
            P = n("ZVME"),
            F = n("CSlQ"),
            R = n("5LoI"),
            x = n("MAZT"),
            L = n("hvzu"),
            U = n("Odds"),
            M = (n("zC6J"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleThreadClick = function() {
                        t.props.selectThread(t.props.threadID)
                    }, t.handleArchiveClick = function(e) {
                        e.stopPropagation(), t.props.archiveThread(t.props.threadID)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.user;
                    if (!e) return this.renderError();
                    var t = this.props.lastMessage ? Object(L.a)(this.props.lastMessage.content.content, this.props.lastMessage.content.emotes, this.props.lastMessage.editedAt) : null,
                        n = this.props.unreadMessageCount,
                        i = e.displayName || e.login;
                    return r.createElement("div", {
                        onClick: this.handleThreadClick
                    }, r.createElement(U._25, {
                        className: "whispers-list-item",
                        borderBottom: !0,
                        padding: 1,
                        display: U.N.Flex,
                        flexDirection: U.P.Row,
                        flexWrap: U.Q.NoWrap,
                        fullWidth: !0,
                        alignItems: U.c.Center,
                        "data-a-target": "whisper-with-" + e.login
                    }, r.createElement(U._2, {
                        className: "whispers-list-item__avatar",
                        margin: {
                            right: .5
                        },
                        flexShrink: 0
                    }, r.createElement(U.l, {
                        size: 30,
                        alt: Object(y.d)("{interlocutorName}'s Avatar", {
                            interlocutorName: i
                        }, "WhisperThreadListItem"),
                        src: e.profileImageURL,
                        onLoad: this.props.avatarOnLoadCallback
                    })), r.createElement(U._2, {
                        fullWidth: !0,
                        display: U.N.Inline
                    }, r.createElement(U._35, {
                        fontSize: U.R.Size5,
                        bold: !0
                    }, i), r.createElement(U._2, {
                        className: "whispers-list-item__last-message",
                        ellipsis: !0
                    }, t)), r.createElement(U._2, {
                        className: "whispers-list-item__unread-count",
                        margin: {
                            right: 1
                        },
                        textAlign: U._36.Right
                    }, r.createElement(U._35, {
                        bold: !0
                    }, n > 0 && !this.props.muted ? n : null), this.props.muted && r.createElement(U._2, {
                        display: U.N.Flex,
                        alignItems: U.c.Center,
                        justifyContent: U._1.Center
                    }, r.createElement(U._15, {
                        type: U._17.Alt2,
                        asset: U._16.WhisperMuted
                    }))), r.createElement("div", {
                        className: "whispers-list-item__archive"
                    }, r.createElement(U.v, {
                        ariaLabel: Object(y.d)("Archive Thread", "WhisperThreadListItem"),
                        tabIndex: -1,
                        icon: U._16.Close,
                        "data-a-target": "whispers-list-item__archive-button",
                        onClick: this.handleArchiveClick,
                        "data-click-out-id": "whispers-list-item__archive-button"
                    }))))
                }, t.prototype.renderError = function() {
                    return r.createElement(U._2, null, r.createElement("p", null, Object(y.d)("Sorry, something went wrong fetching this conversation.", "WhisperThreadListItem")))
                }, t
            }(r.Component)),
            A = n("7miU"),
            j = n("n9f8"),
            W = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.markAllWhispersAsRead = function() {
                        var e = Object(E.a)({
                            markAllAsRead: !0
                        });
                        n.props.markAllWhispersAsRead && (Object(A.i)(), n.props.markAllWhispersAsRead(e)), n.props.onMarkAllMessagesRead && n.props.onMarkAllMessagesRead()
                    }, n.toggleDoNotDisturb = function() {
                        n.state.doNotDisturb ? (y.l.set("whisperDoNotDisturb", !1), Object(A.f)(), n.setState({
                            doNotDisturb: !1
                        })) : (y.l.set("whisperDoNotDisturb", !0), Object(A.g)(), n.setState({
                            doNotDisturb: !0
                        }))
                    }, n.state = {
                        doNotDisturb: y.l.get("whisperDoNotDisturb", !1)
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.state.doNotDisturb ? Object(y.d)("Disable Do Not Disturb", "ThreadsBoxSettings") : Object(y.d)("Enable Do Not Disturb", "ThreadsBoxSettings"),
                        t = Object(y.d)("Mark All Whispers as Read", "ThreadsBoxSettings");
                    return r.createElement(U._2, {
                        className: "threads-box-settings",
                        display: U.N.Flex,
                        flexDirection: U.P.Column,
                        margin: 1
                    }, r.createElement(U._0, {
                        ariaLabel: e,
                        onClick: this.toggleDoNotDisturb
                    }, r.createElement(U._2, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, e)), r.createElement(U._0, {
                        ariaLabel: t,
                        onClick: this.markAllWhispersAsRead
                    }, r.createElement(U._2, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, t)))
                }, t = i.__decorate([Object(S.a)(j, {
                    name: "markAllWhispersAsRead"
                })], t)
            }(r.Component),
            B = n("m4HT"),
            G = (n("U8pM"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onMarkAllMessagesRead = function() {
                        n.settingsMenu.toggleBalloon(!1)
                    }, n.renderUserSearchResult = function(e, t) {
                        var i = Object(y.d)("{username}'s avatar", {
                                username: e.name
                            }, "ThreadsBox"),
                            a = e.profile_image || Object(I.c)(e.objectID, 30);
                        return r.createElement("div", {
                            key: "searchResult:" + e.objectID,
                            onClick: n.handleUserSearchResultClick(e, t)
                        }, r.createElement(U._25, {
                            className: "whispers-list-item",
                            borderBottom: !0,
                            padding: 1,
                            display: U.N.Flex,
                            flexDirection: U.P.Row,
                            flexWrap: U.Q.NoWrap,
                            fullWidth: !0,
                            alignItems: U.c.Center
                        }, r.createElement(U._2, {
                            margin: {
                                right: .5
                            },
                            flexShrink: 0
                        }, r.createElement(U.l, {
                            size: 30,
                            src: a,
                            alt: i
                        })), r.createElement(U._2, {
                            fullWidth: !0,
                            display: U.N.Flex,
                            flexDirection: U.P.Column
                        }, r.createElement(U._35, {
                            fontSize: U.R.Size5,
                            bold: !0
                        }, e.login), r.createElement(U._2, null, " "))))
                    }, n.saveSettingsMenuRef = function(e) {
                        return n.settingsMenu = e
                    }, n.handleConversationsClick = function() {
                        n.state.open || (n.props.latencyTracking.resetCustomEvents(P.a.Whispers), n.whispersHistoryLatencyEvent = n.props.latencyTracking.registerCustomEvent({
                            benchmark: 200,
                            group: P.a.Whispers,
                            key: P.b.WhispersHistory,
                            label: P.c.History,
                            start: P.d.Registration
                        })), n.setState(function(e) {
                            return {
                                open: !e.open
                            }
                        })
                    }, n.selectThread = function(e) {
                        n.handleClose(), n.clearSearchText(), n.props.selectThread(e)
                    }, n.handleClose = function() {
                        n.setState({
                            open: !1
                        })
                    }, n.clearSearchText = function() {
                        n.setState({
                            searchText: "",
                            searching: !1
                        })
                    }, n.onSearchInputChange = function(e) {
                        return i.__awaiter(n, void 0, void 0, function() {
                            var t, n = this;
                            return i.__generator(this, function(i) {
                                return t = e.currentTarget.value, clearTimeout(this.inputTimeout), t && 0 !== t.length ? (this.setState({
                                    searchText: t,
                                    searching: !0
                                }), this.inputTimeout = setTimeout(function() {
                                    n.search(n.state.searchText)
                                }, 200), [2]) : (this.inputTimeout = 0, this.clearSearchText(), [2])
                            })
                        })
                    }, n.handleUserSearchResultClick = function(e, t) {
                        return function() {
                            var i = e.objectID;
                            if (null !== n.props.currentUserID && i !== n.props.currentUserID) {
                                n.handleClose(), n.clearSearchText();
                                var r = Object(B.a)(n.props.currentUserID, i);
                                Object(A.e)({
                                    threadID: r,
                                    targetUserlogin: e.login,
                                    searchResultRank: t
                                }), Object(A.b)({
                                    searchResultRank: t,
                                    searchQuery: n.state.searchText,
                                    isConversation: !1
                                }), n.props.selectThread(r)
                            }
                        }
                    }, n.filterExistingThreads = function(e) {
                        var t = e.toLowerCase();
                        return n.props.orderedThreadIDs.filter(function(e) {
                            var i = n.props.threadsByID[e].participants.find(function(e) {
                                return e.id !== n.props.currentUserID
                            });
                            return !(!i || !i.displayName) && i.displayName.toLowerCase().indexOf(t) >= 0
                        })
                    }, n.searchClient = new x.a(y.a.algoliaApplicationID, y.a.algoliaAPIKey), n.state = {
                        open: !1,
                        searchText: "",
                        searching: !1
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(T.a, {
                        onClickOut: this.handleClose
                    }, r.createElement(U._25, {
                        className: "whispers-threads-box__container " + (this.state.open ? "whispers-threads-box__container--open" : ""),
                        display: U.N.Flex,
                        flexDirection: U.P.Column,
                        flexWrap: U.Q.NoWrap,
                        border: !0,
                        background: U.m.Base,
                        position: U._9.Absolute,
                        attachBottom: !0,
                        attachRight: !0,
                        "data-click-out-id": "threads-box",
                        "data-a-target": "threads-box-" + (this.state.open ? "open" : "closed")
                    }, this.renderHeader(), this.renderList(), this.renderFooter()))
                }, t.prototype.renderOpenCloseButton = function() {
                    var e = null;
                    if (this.props.unreadCount > 0) {
                        var t = this.props.unreadCount > 99 ? "99+" : this.props.unreadCount.toString();
                        e = r.createElement(U._2, {
                            className: "whispers-threads-box__unread",
                            margin: {
                                y: .5
                            }
                        }, r.createElement("span", {
                            className: "whispers-threads-box__unread--count",
                            "data-a-target": "whisper-unreads"
                        }, t))
                    }
                    return r.createElement(U._25, {
                        className: "whispers-threads-box__open-close",
                        position: U._9.Relative,
                        background: U.m.Alt2,
                        display: U.N.Flex,
                        alignItems: U.c.Center,
                        justifyContent: U._1.Center
                    }, e, r.createElement(U.v, {
                        ariaLabel: Object(y.d)("Close Threads", "WhisperThreadsBox"),
                        icon: U._16.Conversations,
                        onClick: this.handleConversationsClick,
                        "data-a-target": "whisper-box-button"
                    }))
                }, t.prototype.renderList = function() {
                    var e, t = this;
                    if (!this.state.open) return null;
                    var n = null;
                    "" !== this.state.searchText && (n = r.createElement(U._25, {
                        key: "otherPeopleDivider",
                        borderBottom: !0,
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, Object(y.d)("Other People", "WhispersThreadBox")));
                    var i = null;
                    if (this.state.searching ? i = r.createElement(U._2, {
                            display: U.N.Flex,
                            flexDirection: U.P.Column,
                            margin: {
                                top: 4
                            },
                            alignItems: U.c.Center
                        }, r.createElement(U._4, {
                            delay: 0
                        })) : this.state.searchResults && this.state.searchResults.users && "" !== this.state.searchText && (i = this.state.searchResults.users.hits.filter(function(e) {
                            return !t.props.threadsByID[e.objectID]
                        }).map(this.renderUserSearchResult)), this.props.error) e = r.createElement(U._2, {
                        margin: {
                            x: "auto"
                        },
                        display: U.N.Flex,
                        justifyContent: U._1.Center,
                        alignItems: U.c.Center,
                        fullHeight: !0
                    }, r.createElement(U._35, {
                        color: U.I.Error
                    }, Object(y.d)("There was a problem loading whispers.", "WhisperThreadsBox")));
                    else if (this.props.loading) e = r.createElement(U._4, null);
                    else {
                        var a = this.props.orderedThreadIDs;
                        "" !== this.state.searchText && (a = this.filterExistingThreads(this.state.searchText)), e = a.filter(function(e) {
                            return t.props.threadsByID[e] && !t.props.threadsByID[e].archived
                        }).map(function(e, n) {
                            var i = 0 === n ? function() {
                                    t.props.latencyTracking.reportCustomEvent(t.whispersHistoryLatencyEvent)
                                } : void 0,
                                a = t.props.threadsByID[e];
                            return r.createElement(M, {
                                key: "whisperThread:" + a.id,
                                user: a.participants.find(function(e) {
                                    return e.id !== t.props.currentUserID
                                }),
                                threadID: a.id,
                                lastMessage: a.lastMessage,
                                archiveThread: t.props.archiveThread,
                                selectThread: t.selectThread,
                                unreadMessageCount: a.unreadMessagesCount,
                                muted: a.muted,
                                avatarOnLoadCallback: i
                            })
                        })
                    }
                    return r.createElement(w.b, {
                        suppressScrollX: !0
                    }, r.createElement(U._2, null, e, n, i, r.createElement(w.a, {
                        enabled: this.state.open,
                        loadMore: this.props.loadMore,
                        pixelThreshold: 200
                    })))
                }, t.prototype.renderHeader = function() {
                    return this.state.open ? r.createElement(U._25, {
                        className: "whispers-threads-box__header",
                        "data-a-target": "whispers-threads-box__header",
                        alignItems: U.c.Center,
                        background: U.m.Alt,
                        borderBottom: !0,
                        color: U.I.Base,
                        display: U.N.Flex,
                        flexDirection: U.P.Row,
                        flexGrow: 0,
                        flexShrink: 0,
                        padding: {
                            y: .5,
                            x: 1
                        },
                        "data-click-hide-id": "threads-box-header"
                    }, r.createElement(U._2, {
                        flexGrow: 1,
                        display: U.N.Flex
                    }, r.createElement(U._35, {
                        type: U._40.Span,
                        bold: !0
                    }, Object(y.d)("Whispers", "WhisperThreadsBox"))), r.createElement(O.a, {
                        ref: this.saveSettingsMenuRef
                    }, r.createElement(U.v, {
                        ariaLabel: Object(y.d)("Settings", "WhisperThreadsBox"),
                        icon: U._16.Gear,
                        "data-a-target": "whisper-settings-button"
                    }), r.createElement(U.p, {
                        size: U.r.Small,
                        direction: U.q.BottomRight,
                        offsetX: "0.5rem"
                    }, r.createElement(W, {
                        onMarkAllMessagesRead: this.onMarkAllMessagesRead
                    }))), r.createElement(U.v, {
                        ariaLabel: Object(y.d)("Minimize", "WhisperThreadsBox"),
                        icon: U._16.Minimize,
                        onClick: this.handleClose,
                        "data-a-target": "whisper-close-button"
                    })) : null
                }, t.prototype.renderFooter = function() {
                    return this.state.open ? r.createElement(U._25, {
                        display: U.N.Flex,
                        flexGrow: 0,
                        flexShrink: 0,
                        alignItems: U.c.Center,
                        borderTop: !0,
                        background: U.m.Alt
                    }, r.createElement(U._2, {
                        flexGrow: 1,
                        padding: {
                            top: .5,
                            bottom: .5,
                            left: 1
                        }
                    }, r.createElement(U._18, {
                        onChange: this.onSearchInputChange,
                        value: this.state.searchText,
                        placeholder: Object(y.d)("Search for People", "WhisperThreadsBox"),
                        id: "threads-box-filter",
                        autoFocus: !0,
                        "data-a-target": "whisper-search-input"
                    })), this.renderOpenCloseButton()) : this.renderOpenCloseButton()
                }, t.prototype.search = function(e) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var t;
                        return i.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return e ? [4, this.searchClient.queryForType(R.a.Users, e, D.a())] : [2];
                                case 1:
                                    return t = n.sent(), this.setState({
                                        searchResults: t,
                                        searching: !1
                                    }), [2]
                            }
                        })
                    })
                }, t = i.__decorate([Object(F.d)("WhisperCenter", {
                    autoReportInteractive: !0
                })], t)
            }(r.Component)),
            H = n("1Mw/");
        var V = Object(c.b)(function(e) {
            return {
                openedThreads: e.whispers.display.openedIDs.map(function(t) {
                    return Object(f.b)(e, t)
                }),
                focusedThreadID: e.whispers.display.focusedID
            }
        }, function(e) {
            return {
                onBlockThread: function(t) {
                    return e(v.h(t, Object(b.a)()))
                },
                onCloseThread: function(t) {
                    return e(v.h(t, Object(b.a)()))
                },
                onCollapseThread: function(t) {
                    return e(v.i(t, Object(b.a)()))
                },
                onExpandThread: function(t) {
                    return e(v.j(t, Object(b.a)()))
                },
                onFocusThread: function(t) {
                    return e(v.k(t, Object(b.a)()))
                },
                onUnfocusThread: function(t) {
                    return e(v.n(t, Object(b.a)()))
                },
                onResizeContent: function() {
                    return e(v.m(Object(b.a)()))
                }
            }
        })(H.a);

        function z(e) {
            return Object.keys(e).reduce(function(t, n) {
                var i = e[n];
                return i.muted || i.archived ? t : t + i.unreadMessagesCount
            }, 0)
        }
        var q = function(e) {
                for (var t = {}, n = 0, r = e; n < r.length; n++) {
                    var a = r[n];
                    t[a.id] = i.__assign({}, Q(a))
                }
                return t
            },
            Q = function(e) {
                return {
                    id: e.id,
                    messageHistory: e.messages.edges.map(function(e) {
                        return e.node
                    }).slice(0, -1),
                    lastMessage: e.messages.edges.map(function(e) {
                        return e.node
                    }).find(function(e) {
                        return !e.deletedAt
                    }) || null,
                    spamInfo: e.spamInfo,
                    participants: e.participants,
                    muted: e.isMuted,
                    archived: e.isArchived,
                    unreadMessagesCount: e.unreadMessagesCount
                }
            },
            K = n("9RMu"),
            $ = n("DCOT");

        function Y(e) {
            return e.type === N.PubsubMessageType.WhisperSent
        }

        function Z(e) {
            return e.type === N.PubsubMessageType.WhisperReceived
        }
        var X = n("qpaC"),
            J = n("8p/O"),
            ee = (n("n7G4"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.logger = y.n.logger.withCategory("whispers"), n.archiveThread = function(e) {
                        if (n.state.threadsByID[e]) {
                            var t = i.__assign({}, Object(E.a)({
                                threadID: e,
                                isArchived: !0
                            }), {
                                optimisticResponse: {
                                    updateWhisperThread: {
                                        thread: {
                                            __typename: "WhisperThread",
                                            id: e,
                                            isArchived: !0
                                        },
                                        __typename: "UpdateWhisperThreadPayload"
                                    }
                                }
                            });
                            n.props.archiveThread && (n.props.closeThread(e), n.props.data.currentUser && Object(A.a)(e), n.props.archiveThread(t))
                        }
                    }, n.selectThread = function(e) {
                        n.props.openThread({
                            threadID: e,
                            collapsed: !1
                        })
                    }, n.loadMore = function() {
                        return i.__awaiter(n, void 0, void 0, function() {
                            return i.__generator(this, function(e) {
                                return this.props.data.loading || this.props.data.error ? [2] : [2, this.props.loadMore()]
                            })
                        })
                    }, n.handleThreadDataReport = function(e, t) {
                        n.state.threadsByID[e] || Object(E.d)(J, {
                            cursor: null
                        }, function(e) {
                            return e.currentUser && e.currentUser.whisperThreads.edges.unshift({
                                cursor: "0",
                                node: i.__assign({}, t, {
                                    isArchived: !1
                                }),
                                __typename: "WhisperThreadEdge"
                            }), e
                        });
                        var r = i.__assign({}, n.state.threadsByID[e]);
                        t.messages && (r.messageHistory = t.messages.edges.map(function(e) {
                            return e.node
                        }).slice(0, -1)), !1 !== t.isMuted && !0 !== t.isMuted || (r.muted = t.isMuted);
                        var a, o = i.__assign({}, n.state.threadsByID, ((a = {})[e] = r, a));
                        n.setState({
                            threadsByID: o,
                            unreadCount: z(o)
                        })
                    };
                    var r = n.props.data.currentUser && q(n.props.data.currentUser.whisperThreads.edges.map(function(e) {
                        return e.node
                    })) || {};
                    return n.state = {
                        error: !!n.props.data.error,
                        orderedThreadIDs: n.props.data.currentUser && n.props.data.currentUser.whisperThreads.edges.map(function(e) {
                            return e.node.id
                        }) || [],
                        renderError: !1,
                        threadsByID: r,
                        unreadCount: z(r)
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentDidCatch = function(e, t) {
                    var n = this;
                    this.setState({
                        renderError: !0
                    }, function() {
                        n.logger.error(e, "A unhandled exception occurred in the component hierarchy", {
                            info: t
                        })
                    })
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (e.data.error) this.setState({
                        error: !!e.data.error
                    });
                    else if (!e.data.loading && e.data.currentUser) {
                        var t = q(e.data.currentUser.whisperThreads.edges.map(function(e) {
                            return e.node
                        }));
                        this.setState({
                            threadsByID: t,
                            orderedThreadIDs: e.data.currentUser.whisperThreads.edges.map(function(e) {
                                return e.node.id
                            }),
                            unreadCount: z(t)
                        })
                    }
                }, t.prototype.render = function() {
                    if (!this.props.data.currentUser || this.state.renderError) return null;
                    var e = k({
                        whispers: !0,
                        "whispers--theatre-mode": this.props.theatreModeEnabled,
                        "whispers--right-column-expanded": this.props.rightColumnExpanded
                    });
                    return r.createElement(U._2, {
                        className: e,
                        position: U._9.Absolute,
                        attachBottom: !0,
                        attachLeft: !0,
                        margin: {
                            right: 1
                        }
                    }, r.createElement(V, {
                        currentUserID: this.props.data.currentUser.id,
                        reportThreadData: this.handleThreadDataReport,
                        archiveThread: this.archiveThread
                    }), r.createElement(G, {
                        currentUserID: this.props.data.currentUser.id,
                        error: this.state.error,
                        loading: this.props.data.loading,
                        unreadCount: this.state.unreadCount,
                        orderedThreadIDs: this.state.orderedThreadIDs,
                        threadsByID: this.state.threadsByID,
                        selectThread: this.selectThread,
                        archiveThread: this.archiveThread,
                        loadMore: this.loadMore
                    }))
                }, t = i.__decorate([Object(S.a)(J, {
                    props: function(e) {
                        return i.__assign({}, e, {
                            loadMore: function() {
                                return e.data.fetchMore({
                                    query: J,
                                    variables: i.__assign({}, e.data.variables, {
                                        cursor: e.data.currentUser && e.data.currentUser.whisperThreads.edges.length > 0 ? e.data.currentUser.whisperThreads.edges[e.data.currentUser.whisperThreads.edges.length - 1].cursor : null
                                    }),
                                    updateQuery: function(e, t) {
                                        var n = t.fetchMoreResult;
                                        return n.currentUser ? e.currentUser ? {
                                            currentUser: i.__assign({}, n.currentUser, {
                                                whisperThreads: i.__assign({}, n.currentUser.whisperThreads, {
                                                    edges: Object(E.b)(e.currentUser.whisperThreads.edges, n.currentUser.whisperThreads.edges)
                                                })
                                            })
                                        } : {
                                            currentUser: n.currentUser
                                        } : {
                                            currentUser: null
                                        }
                                    }
                                })
                            }
                        })
                    }
                }), Object(S.a)(X, {
                    name: "archiveThread"
                }), Object(_.a)(function(e) {
                    return {
                        query: J,
                        types: [N.PubsubMessageType.WhisperDeleted, N.PubsubMessageType.WhisperEdited, N.PubsubMessageType.WhisperSent, N.PubsubMessageType.WhisperAllThreadsUpdate, N.PubsubMessageType.WhisperReceived, N.PubsubMessageType.WhisperThreadUpdate],
                        variables: i.__assign({}, e.data.variables),
                        skip: !e.data.currentUser || void 0 === e.data.currentUser.id,
                        topic: Object(C.x)(e.data.currentUser && e.data.currentUser.id || ""),
                        mutator: function(t, n) {
                            if (!n.currentUser) return n;
                            if (Y(t) || Z(t)) {
                                if (Z(t)) {
                                    var i = n.currentUser.whisperThreads.edges.find(function(e) {
                                        return e.node.id === t.data_object.thread_id
                                    });
                                    if (i) {
                                        var r = i.node.participants.find(function(e) {
                                            return e.id === "" + t.data_object.from_id
                                        });
                                        r && Object(A.l)({
                                            targetUserLogin: r.login,
                                            threadID: t.data_object.thread_id
                                        })
                                    }
                                }
                                return function(e, t, n, i) {
                                    if (!t.currentUser) return t;
                                    var r = y.l.get("whisperDoNotDisturb", !1),
                                        a = t.currentUser.whisperThreads.edges.find(function(t) {
                                            return t.node.id === e.data_object.thread_id
                                        });
                                    if (a) {
                                        var o = Object(K.c)(e);
                                        a.node.messages.edges.unshift(o), Z(e) && (e.data_object.thread_id !== n ? a.node.unreadMessagesCount += 1 : Object($.a)({
                                            threadID: e.data_object.thread_id,
                                            lastReadMessageID: e.data_object.message_id
                                        }, e.data_object.id), i({
                                            threadID: e.data_object.thread_id,
                                            collapsed: !0,
                                            hidden: r
                                        })), a.node.isArchived = !1;
                                        var s = t.currentUser.whisperThreads.edges.filter(function(t) {
                                            return t.node.id !== e.data_object.thread_id
                                        });
                                        s.unshift(a), t.currentUser.whisperThreads.edges = s
                                    } else i({
                                        threadID: e.data_object.thread_id,
                                        collapsed: !0,
                                        hidden: r
                                    });
                                    return t
                                }(t, n, e.focusedThreadID, e.openThread)
                            }
                            return function(e) {
                                return e.type === N.PubsubMessageType.WhisperDeleted
                            }(t) ? function(e, t) {
                                if (!t.currentUser) return t;
                                var n = t.currentUser.whisperThreads.edges.find(function(t) {
                                    return t.node.id === e.data_object.thread_id
                                });
                                if (n) {
                                    var i = n.node.messages.edges.find(function(t) {
                                        return t.node.id === e.data_object.message_id
                                    });
                                    i && (i.node.deletedAt = new Date(1e3 * e.data_object.deleted_at).toISOString(), i.node.content.content = e.data_object.body, i.node.content.emotes = Object(K.b)(e.data_object.tags.emotes))
                                }
                                return t
                            }(t, n) : function(e) {
                                return e.type === N.PubsubMessageType.WhisperEdited
                            }(t) ? function(e, t) {
                                if (!t.currentUser) return t;
                                var n = t.currentUser.whisperThreads.edges.find(function(t) {
                                    return t.node.id === e.data_object.thread_id
                                });
                                if (n) {
                                    var i = n.node.messages.edges.find(function(t) {
                                        return t.node.id === e.data_object.message_id
                                    });
                                    i && (i.node.editedAt = new Date(1e3 * e.data_object.edited_at).toISOString(), i.node.content.content = e.data_object.body, i.node.content.emotes = Object(K.b)(e.data_object.tags.emotes))
                                }
                                return t
                            }(t, n) : function(e) {
                                return e.type === N.PubsubMessageType.WhisperThreadUpdate
                            }(t) ? function(e, t, n) {
                                if (!t.currentUser) return t;
                                var i = t.currentUser.whisperThreads.edges.findIndex(function(t) {
                                    return t.node.id === e.data_object.id
                                });
                                if (i >= 0) {
                                    var r = t.currentUser.whisperThreads.edges[i],
                                        a = r.node.messages.edges[0].cursor,
                                        o = parseInt(a, 10) - e.data_object.last_read;
                                    r.node.unreadMessagesCount = o >= 0 ? o : 0, r.node.isMuted = e.data_object.muted, !r.node.isArchived && e.data_object.archived && n(e.data_object.id), r.node.isArchived = e.data_object.archived
                                }
                                return t
                            }(t, n, e.closeThread) : function(e) {
                                return e.type === N.PubsubMessageType.WhisperAllThreadsUpdate
                            }(t) ? function(e, t) {
                                return t.currentUser ? (e.data_object.mark_all_read && t.currentUser.whisperThreads.edges.forEach(function(e) {
                                    e.node.unreadMessagesCount = 0
                                }), t) : t
                            }(t, n) : n
                        },
                        skipMessage: function(e, t) {
                            if (Y(e)) {
                                if (!t.currentUser) return !1;
                                var n = t.currentUser.whisperThreads.edges.find(function(t) {
                                    return t.node.id === e.data_object.thread_id
                                });
                                if (n && n.node.messages.edges.findIndex(function(t) {
                                        return t.node.id === e.data_object.nonce
                                    }) >= 0) return !0
                            }
                            return !1
                        }
                    }
                })], t)
            }(r.Component)),
            te = ee;
        var ne = Object(c.b)(function(e) {
                return {
                    rightColumnExpanded: e.ui.rightColumnExpanded,
                    theatreModeEnabled: e.ui.theatreModeEnabled,
                    focusedThreadID: e.whispers.display.focusedID
                }
            }, function(e) {
                return {
                    openThread: function(t) {
                        return e(v.l(t, Object(b.a)()))
                    },
                    closeThread: function(t) {
                        return e(v.h(t, Object(b.a)()))
                    }
                }
            })(te),
            ie = n("F8kA"),
            re = n("bZTi"),
            ae = n("yWCw"),
            oe = n("Ejve"),
            se = n("eBiB"),
            le = n("0Mfl"),
            ce = n("iOr9"),
            de = n("68hr"),
            ue = function() {
                var e = {
                    name: "TWILIGHT_PAYMENTS_MANAGEMENT_PAGE",
                    assignments: {
                        fallback: function() {
                            return r.createElement(de.a, null)
                        },
                        yes: function() {
                            return re.a.wrap(function() {
                                return n.e(37).then(n.bind(null, "gZLf"))
                            }, "PaymentsLandingPage")({})
                        }
                    },
                    loader: function() {
                        return r.createElement(de.a, null)
                    }
                };
                return r.createElement(ce.a, i.__assign({}, e))
            },
            pe = re.a.wrap(function() {
                return n.e(51).then(n.bind(null, "8U1+"))
            }, "AnonFrontPage"),
            me = re.a.wrap(function() {
                return n.e(53).then(n.bind(null, "Dd84"))
            }, "BrowseRootPage"),
            he = re.a.wrap(function() {
                return n.e(40).then(n.bind(null, "gZGZ"))
            }, "ChannelClipsPage"),
            ge = re.a.wrap(function() {
                return n.e(50).then(n.bind(null, "zfLI"))
            }, "ChannelCollectionsPage"),
            fe = re.a.wrap(function() {
                return n.e(41).then(n.bind(null, "lW0T"))
            }, "ChannelEventsPage"),
            ve = re.a.wrap(function() {
                return n.e(43).then(n.bind(null, "35Zp"))
            }, "ChannelFollowersPage"),
            be = re.a.wrap(function() {
                return n.e(42).then(n.bind(null, "ztSx"))
            }, "ChannelFollowingPage"),
            ke = re.a.wrap(function() {
                return n.e(32).then(n.bind(null, "oFVJ"))
            }, "ChannelPage"),
            ye = re.a.wrap(function() {
                return n.e(33).then(n.bind(null, "g8mI"))
            }, "ChannelVideosPage"),
            Se = re.a.wrap(function() {
                return n.e(62).then(n.bind(null, "yMnN"))
            }, "DevOnlyRoot"),
            _e = re.a.wrap(function() {
                return n.e(45).then(n.bind(null, "7yeK"))
            }, "DirectoryRootPage"),
            Ne = re.a.wrap(function() {
                return n.e(58).then(n.bind(null, "IzAE"))
            }, "DevOnlyTestingCarouselPage"),
            Ee = re.a.wrap(function() {
                return n.e(60).then(n.bind(null, "Tj44"))
            }, "EmailVerificationPage"),
            Ce = re.a.wrap(function() {
                return n.e(46).then(n.bind(null, "NTi8"))
            }, "EventLandingPage"),
            Te = re.a.wrap(function() {
                return n.e(48).then(n.bind(null, "IpE8"))
            }, "FollowingRootPage"),
            we = re.a.wrap(function() {
                return n.e(54).then(n.bind(null, "lTLe"))
            }, "FinishWatchingPage"),
            Oe = re.a.wrap(function() {
                return n.e(47).then(n.bind(null, "IOEW"))
            }, "FrontPage"),
            Ie = re.a.wrap(function() {
                return n.e(55).then(n.bind(null, "DZCb"))
            }, "InventoryPage"),
            De = re.a.wrap(function() {
                return n.e(65).then(n.bind(null, "o8EG"))
            }, "ManagerRedirectPage"),
            Pe = re.a.wrap(function() {
                return n.e(61).then(n.bind(null, "DkuH"))
            }, "ReportUserPage"),
            Fe = re.a.wrap(function() {
                return n.e(52).then(n.bind(null, "K4jf"))
            }, "SettingsRoot"),
            Re = re.a.wrap(function() {
                return n.e(36).then(n.bind(null, "uiPj"))
            }, "VideoWatchPage"),
            xe = re.a.wrap(function() {
                return n.e(57).then(n.bind(null, "6Vx1"))
            }, "DevOnlyTestingAmazonOffersPage"),
            Le = function() {
                return r.createElement(ie.c, {
                    path: "/",
                    to: "/directory/following"
                })
            },
            Ue = function() {
                return window.location.reload(), null
            },
            Me = function(e) {
                var t = Object(se.a)(e.match.params.videoID);
                return r.createElement(ie.c, {
                    to: "/videos/" + t
                })
            },
            Ae = function(e) {
                return r.createElement(ie.c, {
                    to: "/popout/" + e.match.params.channelLogin + "/chat"
                })
            },
            je = function(e) {
                return r.createElement(ie.c, {
                    to: "/" + e.match.params.channelLogin + "/videos/all"
                })
            },
            We = function(e) {
                return r.createElement(ie.c, {
                    to: "/" + e.match.params.channelLogin + "/videos/archive"
                })
            },
            Be = function(e) {
                return r.createElement(ie.c, {
                    to: "/directory/game/" + e.match.params.encodedCommunityName + "/videos/all"
                })
            },
            Ge = function() {
                return r.createElement(ie.c, {
                    to: "/directory/all/xbox"
                })
            },
            He = function() {
                return window.location.replace(le.a), null
            },
            Ve = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isError: !1
                    }, t.logger = y.n.logger.withCategory("default-root-router"), t
                }
                return i.__extends(t, e), t.prototype.componentDidCatch = function(e, t) {
                    var n = this;
                    this.setState({
                        isError: !0
                    }, function() {
                        n.logger.error(e, "A unhandled exception occurred in the component hierarchy", {
                            info: t
                        })
                    })
                }, t.prototype.render = function() {
                    return this.state.isError ? r.createElement(ae.a, {
                        message: Object(y.d)("An error occurred on this page", "DefaultRootRouter")
                    }) : r.createElement(ie.e, null, y.a.buildType !== oe.a.Production && r.createElement(ie.d, {
                        path: "/_dev/testing/carousel",
                        component: Ne
                    }), y.a.buildType !== oe.a.Production && r.createElement(ie.d, {
                        path: "/_dev/testing/amazon-offers/:channelName",
                        component: xe
                    }), y.a.buildType !== oe.a.Production && r.createElement(ie.d, {
                        path: "/_dev",
                        component: Se
                    }), r.createElement(ie.d, {
                        exact: !0,
                        path: "/",
                        component: this.props.isLoggedIn ? Oe : pe
                    }), r.createElement(ie.d, {
                        path: "/bits",
                        render: Ue
                    }), r.createElement(ie.d, {
                        path: "/collections/:collectionID",
                        component: Re
                    }), r.createElement(ie.d, {
                        path: "/communities/:encodedCommunityName/details",
                        component: _e
                    }), r.createElement(ie.d, {
                        path: "/communities/:encodedCommunityName/:encodedLanguage",
                        component: _e
                    }), r.createElement(ie.d, {
                        path: "/communities/:encodedCommunityName",
                        component: _e
                    }), r.createElement(ie.d, {
                        path: "/directory/communities",
                        component: me
                    }), r.createElement(ie.d, {
                        path: "/directory/creative",
                        component: me
                    }), r.createElement(ie.d, {
                        path: "/directory/following/:category?",
                        component: Te
                    }), r.createElement(ie.d, {
                        path: "/directory/game/:encodedCommunityName/clips",
                        component: _e
                    }), r.createElement(ie.d, {
                        path: "/directory/game/:encodedCommunityName/details",
                        component: _e
                    }), r.createElement(ie.d, {
                        path: "/directory/game/:encodedCommunityName/videos/:filter",
                        component: _e
                    }), r.createElement(ie.d, {
                        path: "/directory/game/:encodedCommunityName/videos",
                        render: Be
                    }), r.createElement(ie.d, {
                        path: "/directory/game/:encodedCommunityName/:encodedLanguage",
                        component: _e
                    }), r.createElement(ie.d, {
                        path: "/directory/game/:encodedCommunityName",
                        component: _e
                    }), r.createElement(ie.d, {
                        path: "/directory/all/ps4",
                        component: me
                    }), r.createElement(ie.d, {
                        path: "/directory/all/xb1",
                        component: Ge
                    }), r.createElement(ie.d, {
                        path: "/directory/all/xbox",
                        component: me
                    }), r.createElement(ie.d, {
                        path: "/directory/all/:encodedLanguage",
                        component: me
                    }), r.createElement(ie.d, {
                        path: "/directory/all",
                        component: me
                    }), r.createElement(ie.d, {
                        path: "/directory/videos/history",
                        component: we
                    }), r.createElement(ie.d, {
                        path: "/directory/:category?",
                        component: me
                    }), r.createElement(ie.d, {
                        path: "/events/:eventName",
                        render: Ce
                    }), r.createElement(ie.d, {
                        path: "/email-verification/:emailOpaqueId",
                        component: Ee
                    }), r.createElement(ie.d, {
                        path: "/payments",
                        component: ue
                    }), r.createElement(ie.d, {
                        path: "/following",
                        component: Le
                    }), r.createElement(ie.d, {
                        path: "/inventory",
                        component: Ie
                    }), r.createElement(ie.d, {
                        path: "/popout/:channelName/chat",
                        render: Ue
                    }), r.createElement(ie.d, {
                        path: "/videos/v:videoID",
                        render: Me
                    }), r.createElement(ie.d, {
                        path: "/videos/:videoID",
                        component: Re
                    }), r.createElement(ie.d, {
                        path: "/store",
                        render: He
                    }), r.createElement(ie.d, {
                        path: "/store/merch",
                        render: He
                    }), r.createElement(ie.d, {
                        path: "/subs",
                        render: Ue
                    }), r.createElement(ie.d, {
                        path: "/settings/:tab?",
                        component: Fe
                    }), r.createElement(ie.d, {
                        path: "/manager/:pageName?",
                        component: De
                    }), r.createElement(ie.d, {
                        path: "/:channelName/report",
                        component: Pe
                    }), r.createElement(ie.d, {
                        path: "/:channelLogin/videos/(past_broadcasts?)",
                        render: We
                    }), r.createElement(ie.d, {
                        path: "/:channelLogin/videos/:filter(all|archive|upload|highlight|past_premiere)",
                        component: ye
                    }), r.createElement(ie.d, {
                        path: "/:channelLogin/videos/:unknownFilter?",
                        render: je
                    }), r.createElement(ie.d, {
                        path: "/:channelName/clips",
                        component: he
                    }), r.createElement(ie.d, {
                        path: "/:channelLogin/chat",
                        render: Ae
                    }), r.createElement(ie.d, {
                        path: "/:channelLogin/collections",
                        component: ge
                    }), r.createElement(ie.d, {
                        path: "/:channelLogin/events",
                        component: fe
                    }), r.createElement(ie.d, {
                        path: "/:channelLogin/followers",
                        component: ve
                    }), r.createElement(ie.d, {
                        path: "/:channelLogin/following",
                        component: be
                    }), r.createElement(ie.d, {
                        path: "/:channelName/p/:entityID",
                        component: ke
                    }), r.createElement(ie.d, {
                        path: "/:channelName/rooms/:roomName",
                        component: ke
                    }), r.createElement(ie.d, {
                        path: "/:channelName",
                        component: ke
                    }))
                }, t
            }(r.Component),
            ze = Object(F.d)("DefaultRootRouter", {
                autoReportInteractive: !0
            })(Ve);
        n.d(t, "b", function() {
            return qe
        }), n.d(t, "a", function() {
            return Qe
        });
        var qe = "twilight-main",
            Qe = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.setRootScrollableContentRef = function(e) {
                        t.setState({
                            rootScrollableContentRef: e
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(U._2, {
                        display: U.N.Flex,
                        flexWrap: U.Q.NoWrap,
                        fullHeight: !0,
                        position: U._9.Relative
                    }, r.createElement(m, null), r.createElement(U.W, {
                        overflow: U._5.Hidden,
                        position: U._9.Relative,
                        flexGrow: 1,
                        fullHeight: !0,
                        fullWidth: !0,
                        display: U.N.Flex,
                        flexDirection: U.P.Column
                    }, r.createElement("main", {
                        className: qe
                    }, r.createElement(g.b, null), r.createElement(s.a, {
                        contentRefDelegate: this.setRootScrollableContentRef
                    }, r.createElement(ze, {
                        isLoggedIn: this.props.isLoggedIn
                    }), r.createElement(a.b, {
                        mainRef: this.state.rootScrollableContentRef
                    })), r.createElement(h.b, null), this.props.firstPageLoaded && r.createElement(ne, null))), r.createElement(o.a, null))
                }, t
            }(r.Component)
    },
    TMvI: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "OnlineFriends"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "friends"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "activity"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "type"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Playing"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "game"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Streaming"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "stream"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "game"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "name"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Watching"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "user"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "displayName"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "login"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "hosting"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "displayName"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "login"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "availability"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "displayName"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "login"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "profileImageURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "70"
                                                            }
                                                        }],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "hosting"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 338
            }
        };
        n.loc.source = {
            body: "query OnlineFriends {\ncurrentUser {\nid\nfriends {\nedges {\nactivity {\ntype\n... on Playing {\ngame {\nid\nname\n}\n}\n... on Streaming {\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n... on Watching {\nuser {\nid\ndisplayName\nlogin\nhosting {\nid\ndisplayName\nlogin\n}\n}\n}\n}\navailability\nnode {\nid\ndisplayName\nlogin\nprofileImageURL(width: 70)\nhosting {\nid\n}\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    TVUY: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "currentUser"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "login"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "displayName"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "availability"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "activity"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "type"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "InlineFragment",
                                typeCondition: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Watching"
                                    }
                                },
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "user"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "InlineFragment",
                                typeCondition: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Streaming"
                                    }
                                },
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "stream"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "game"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "InlineFragment",
                                typeCondition: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Playing"
                                    }
                                },
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 204
            }
        };
        n.loc.source = {
            body: "fragment currentUser on User {\nid\nlogin\ndisplayName\navailability\nactivity {\ntype\n... on Watching {\nuser {\ndisplayName\n}\n}\n... on Streaming {\nstream {\ngame {\nname\n}\n}\n}\n... on Playing {\ngame {\nname\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "TWH+": function(e, t) {},
    Tzcg: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return c
        }), n.d(t, "c", function() {
            return d
        }), n.d(t, "a", function() {
            return p
        }), n.d(t, "e", function() {
            return h
        }), n.d(t, "d", function() {
            return g
        });
        var i = n("TToO"),
            r = n("Bir6"),
            a = n("nEoF"),
            o = {
                "^B-?\\)$": "B)",
                "^:-?[z|Z|\\|]$": ":|",
                "^:-?\\)$": ":)",
                "^:-?\\($": ":(",
                "^:-?(p|P)$": ":P",
                "^;-?(p|P)$": ";P",
                "^:-?[\\\\/]$": ":/",
                "^;-?\\)$": ";)",
                "^R-?\\)$": "R)",
                "^:>$": ":>",
                "^[oO](_|\\.)[oO]$": "O_o",
                "^:-?D$": ":D",
                "^:-?(o|O)$": ":O",
                "^>\\($": ">(",
                "^:-?(?:7|L)$": ":7",
                "^:-?(S|s)$": ":S",
                "^#-?[\\\\/]$": "#/",
                "^<\\]$": "<]",
                "^<3$": "<3",
                "^&lt;3$": "<3",
                "^&lt;\\]$": "<]",
                "^&gt;\\($": ">("
            },
            s = ["1.0", "2.0", "3.0"],
            l = new Set([457, 33, 42, 0]),
            c = function(e) {
                return e.map(function(e) {
                    var t = m(e.token),
                        n = o[t] || t,
                        r = s.reduce(function(t, n) {
                            var i = t.concat("https://static-cdn.jtvnw.net/emoticons/v1/" + e.id + "/" + n + " " + n + "x");
                            return "3.0" !== n && (i = i.concat(", ")), i
                        }, "");
                    return i.__assign({
                        displayName: n,
                        srcSet: r
                    }, e)
                })
            },
            d = function(e) {
                var t = m(e);
                return o[t] || t
            },
            u = function(e) {
                return e.slice().sort(function(e, t) {
                    return parseInt(e.id, 10) - parseInt(t.id, 10)
                })
            },
            p = function(e) {
                for (var t = [], n = [], i = 0, r = e; i < r.length; i++) {
                    var a = r[i];
                    l.has(parseInt(a.id, 10)) ? t.push({
                        id: a.id,
                        emotes: c(u(a.emotes))
                    }) : n.push({
                        id: a.id,
                        emotes: c(u(a.emotes))
                    })
                }
                return n.concat(t)
            },
            m = function(e) {
                return function(e) {
                    return /[\|\\\^\$\*\+\?\:\#]/.test(e)
                }(e) ? "^" + e.replace(/\\(?=[&;:])/g, "") + "$" : e
            },
            h = function(e, t) {
                var n = a.b,
                    i = [],
                    o = [],
                    s = [],
                    l = new RegExp("^" + Object(r.a)(t), "i");
                return e.forEach(function(e) {
                    n[e.token] ? s.push(e) : e.token.match(l) ? i.push(e) : o.push(e)
                }), i.sort(function(e, t) {
                    return e.token < t.token ? -1 : e.token > t.token ? 1 : 0
                }), o.sort(function(e, t) {
                    return e.token < t.token ? -1 : e.token > t.token ? 1 : 0
                }), s.sort(function(e, t) {
                    return n[t.token].count - n[e.token].count
                }), s.concat(i).concat(o)
            },
            g = function(e) {
                var t = {};
                return e.filter(function(e) {
                    return !t.hasOwnProperty(e.token) && (t[e.token] = !0)
                })
            }
    },
    U8pM: function(e, t) {},
    UKw0: function(e, t) {},
    UhzT: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecommendedFriend_DismissFriendRecommendation"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DismissFriendRecommendationInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "dismissFriendRecommendation"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 160
            }
        };
        n.loc.source = {
            body: "mutation RecommendedFriend_DismissFriendRecommendation($input: DismissFriendRecommendationInput!) {\ndismissFriendRecommendation(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "V1E/": function(e, t) {},
    VNvG: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FollowButton_FollowUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "FollowUserInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "followUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "follow"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "disableNotifications"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 124
            }
        };
        n.loc.source = {
            body: "mutation FollowButton_FollowUser($input: FollowUserInput!) {\nfollowUser(input: $input) {\nfollow {\ndisableNotifications\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    VkpB: function(e, t) {},
    Vprp: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecommendedFriend_CreateFriendRequest"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CreateFriendRequestInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "createFriendRequest"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 136
            }
        };
        n.loc.source = {
            body: "mutation RecommendedFriend_CreateFriendRequest($input: CreateFriendRequestInput!) {\ncreateFriendRequest(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Vr3l: function(e, t, n) {
        e.exports = n.p + "assets/overwatch-chars-062a1df5ff2aaa76eb8e129940ef964a.png"
    },
    WHFs: function(e, t) {},
    WIs4: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("HZww");

        function o(e) {
            return function(t) {
                return function(n) {
                    function o(t) {
                        var i = n.call(this, t) || this;
                        return i.mutator = function(e, t) {
                            return i.options.mutator(e, t)
                        }, i.typesChanged = function(e) {
                            if (e.types && !i.options.types || !e.types && i.options.types) return !0;
                            if (e.types && i.options.types) {
                                if (e.types.length !== i.options.types.length) return !0;
                                var t = new Set(i.options.types);
                                return e.types.some(function(e) {
                                    return !t.has(e)
                                })
                            }
                            return !1
                        }, i.options = e(t), i
                    }
                    return i.__extends(o, n), o.prototype.componentDidMount = function() {
                        this.options.skip || this.subscribe(this.options)
                    }, o.prototype.componentWillReceiveProps = function(t) {
                        var n = e(t);
                        n.skip !== this.options.skip && (n.skip ? this.unsubscribe() : this.subscribe(n)), n.skip || (n.topic !== this.options.topic || n.type !== this.options.type || this.typesChanged(n)) && (this.unsubscribe(), this.subscribe(n)), this.options = n
                    }, o.prototype.componentWillUnmount = function() {
                        this.unsubscribe()
                    }, o.prototype.render = function() {
                        return r.createElement(t, i.__assign({}, this.props))
                    }, o.prototype.subscribe = function(e) {
                        this.unsubscriber = Object(a.p)({
                            query: e.query,
                            variables: e.variables,
                            topic: e.topic,
                            type: e.type,
                            types: e.types,
                            mutator: this.mutator,
                            skipMessage: e.skipMessage
                        })
                    }, o.prototype.unsubscribe = function() {
                        this.unsubscriber && (this.unsubscriber(), this.unsubscriber = null)
                    }, o
                }(r.Component)
            }
        }
        n.d(t, "a", function() {
            return o
        })
    },
    WnwY: function(e, t) {},
    XhYx: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("zCIC"),
            o = n("/+to"),
            s = n("QG7y"),
            l = n("CSlQ"),
            c = n("7vx8"),
            d = n("jkA6"),
            u = n("7tMz"),
            p = n("6sO2"),
            m = n("NY9D"),
            h = n("5G5w"),
            g = n("k2jn"),
            f = n("Odds"),
            v = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return null === this.props.game ? r.createElement(f._2, {
                        "data-test-selector": "community-card__placeholder",
                        margin: {
                            bottom: 2
                        }
                    }, r.createElement(f._2, {
                        margin: {
                            bottom: .5
                        }
                    }, r.createElement(f.j, {
                        ratio: f.k.BoxArt
                    }, r.createElement(f._8, null)))) : this.props.followGameCardOptions ? r.createElement(f._2, {
                        key: this.props.followGameCardOptions.category + "-game-" + this.props.game.id
                    }, r.createElement(h.a, {
                        "data-a-target": "follow-game-card-" + this.props.game.id,
                        "data-test-selector": g.c,
                        info: this.props.game.viewersCount ? Object(p.d)("{viewerCount,number} viewers", {
                            viewerCount: this.props.game.viewersCount
                        }, "CommunitySelectionFollowCard") : "",
                        title: this.props.game.name,
                        imageAlt: this.props.game.name,
                        imageSrc: this.props.game.boxArtURL,
                        onFollow: this.props.followGameCardOptions.onFollow,
                        onUnfollow: this.props.followGameCardOptions.onUnfollow,
                        categoryChange: this.props.followGameCardOptions.categoryChange
                    })) : r.createElement(f._2, {
                        key: "game-" + this.props.game.id,
                        padding: {
                            bottom: 1
                        }
                    }, r.createElement(f.t, {
                        title: this.props.game.name,
                        info: this.props.game.viewersCount ? Object(p.d)("{viewerCount,number} viewers", {
                            viewerCount: this.props.game.viewersCount
                        }, "CommunitySelectionBoxCard") : "",
                        linkTo: this.props.isCommunity ? Object(m.a)(this.props.game.name) : Object(m.c)(this.props.game.name),
                        alt: this.props.game.name + " cover image",
                        src: this.props.game.boxArtURL
                    }))
                }, t
            }(r.Component),
            b = n("v5ho"),
            k = n("508y"),
            y = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data && !this.props.data.loading && this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = null;
                    if (this.props.data && !this.props.data.loading && !this.props.data.error && this.props.data.directory) e = {
                        id: this.props.data.directory.id,
                        name: this.props.data.directory.name,
                        boxArtURL: this.props.data.directory.avatarURL,
                        viewersCount: this.props.data.directory.viewersCount
                    };
                    else if (null === this.props.data.directory) return null;
                    return r.createElement(v, {
                        game: e,
                        isCommunity: this.props.directoryType === b.a.Communities,
                        followGameCardOptions: this.props.followGameCardOptions
                    })
                }, t = i.__decorate([Object(c.a)(k, {
                    options: function(e) {
                        return {
                            variables: {
                                name: e.name,
                                type: Object(d.a)(e.directoryType)
                            }
                        }
                    }
                }), Object(u.a)("CommunityCard")], t)
            }(r.Component),
            S = n("yEZg"),
            _ = "community-card-row__ad",
            N = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        adDisplayed: !1
                    }, t.renderCards = function(e) {
                        return t.props.withAd ? t.renderCardGridWithAdSlot() : t.renderCardsWithoutAdSlot(e)
                    }, t.renderCardsWithoutAdSlot = function(e) {
                        var n = t.renderCardsFromProps(),
                            i = 1 === n.length ? 1 : 0;
                        return r.createElement(f._2, {
                            padding: {
                                x: 1,
                                top: 2
                            }
                        }, r.createElement(f._46, {
                            gutterSize: f._48.Small,
                            childWidth: t.props.cardSize,
                            placeholderItems: i,
                            noWrap: e
                        }, n))
                    }, t.renderCardGridWithAdSlot = function() {
                        var e = r.createElement(f._2, {
                                key: "ad",
                                "data-test-selector": _,
                                display: f.N.Flex,
                                flexGrow: 1,
                                justifyContent: f._1.Center,
                                padding: {
                                    bottom: t.state.adDisplayed ? 2 : 0,
                                    left: t.state.adDisplayed ? 1 : 0
                                }
                            }, r.createElement(o.a, {
                                adSize: s.c.anonFront.rect,
                                adUnit: s.d.frontpage,
                                slotID: s.b.anonFront.rect,
                                targeting: {
                                    pagetype: s.a.frontpage
                                },
                                slotRendered: t.onSlotRendered,
                                autoEnable: !1
                            })),
                            n = t.renderCardsFromProps().map(function(e, t) {
                                return r.createElement(f.J, {
                                    key: "game-" + t.toString(),
                                    cols: 2
                                }, e)
                            });
                        return n.splice(4, 0, e), r.createElement(f._2, {
                            padding: {
                                x: 1
                            }
                        }, r.createElement(f.U, null, n))
                    }, t.renderCardsFromProps = function() {
                        if (t.props.games) {
                            var e = t.props.games;
                            return t.props.withAd && !t.state.adDisplayed && (e = e.slice(0, S.GAME_DISPLAY_LIMIT)), e.map(function(e, n) {
                                return r.createElement(v, {
                                    key: "community-card-" + e.id + "-" + n,
                                    game: e,
                                    isCommunity: t.props.directoryType === b.a.Communities,
                                    followGameCardOptions: t.props.followGameCardOptions
                                })
                            })
                        }
                        if (t.props.names) {
                            var n = t.props.names;
                            return t.props.withAd && !t.state.adDisplayed && (n = n.slice(0, S.GAME_DISPLAY_LIMIT)), n.map(function(e, n) {
                                return r.createElement(y, {
                                    key: "community-card-" + e + "-" + n,
                                    name: e,
                                    directoryType: t.props.directoryType,
                                    followGameCardOptions: t.props.followGameCardOptions
                                })
                            })
                        }
                        throw new Error("Need to pass either games or names into CommunityCardRow")
                    }, t.onSlotRendered = function() {
                        t.state.adDisplayed || t.setState({
                            adDisplayed: !0
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.props.isScrollable ? r.createElement(a.b, null, this.renderCards(!0)) : this.renderCards(!1)
                }, t
            }(r.Component),
            E = Object(l.d)("CommunityCardRow")(N);
        n.d(t, !1, function() {
            return _
        }), n.d(t, !1, function() {
            return N
        }), n.d(t, "a", function() {
            return E
        })
    },
    Xo53: function(e, t) {},
    "YEG/": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("6sO2"),
            o = n("yDzg"),
            s = n("CSlQ"),
            l = n("CwIZ"),
            c = n("Odds"),
            d = "subscribe-button__subscribe-tier-button",
            u = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasPopupExperiment: !1
                    }, t.handleClick = function() {
                        t.openCheckout(), t.props.reportSubAction({
                            action: l.a.ClickCheckout,
                            checkoutButtonTier: t.props.tierPrice
                        })
                    }, t.setPopupExperiment = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e;
                            return i.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return [4, a.n.experiments.getAssignment("TWILIGHT_SUB_CHECKOUT_POPUP")];
                                    case 1:
                                        return e = t.sent(), this.setState({
                                            hasPopupExperiment: "yes" === e
                                        }), [2]
                                }
                            })
                        })
                    }, t.openCheckout = function() {
                        t.state.hasPopupExperiment && window.open(Object(o.a)(t.props.url, {
                            ref: "subscribe-tier-button"
                        }), "Twitch", "width=1000, height=1100, menubar, toolbar, location, personalbar, scrollbars")
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    !1 !== this.props.targetBlank && this.setPopupExperiment()
                }, t.prototype.render = function() {
                    if (this.props.isSubbedToTier) {
                        var e = Object(a.d)("Subscribed", "SubTierButton");
                        return r.createElement(c.u, {
                            ariaLabel: e,
                            "data-test-selector": d,
                            disabled: !0,
                            icon: c._16.Star
                        }, e)
                    }
                    var t = Object(a.d)("Subscribe Now", "SubTierButton");
                    return r.createElement(c.u, i.__assign({
                        ariaLabel: t + " " + this.props.tierPrice,
                        "data-test-selector": d,
                        linkTo: this.state.hasPopupExperiment ? void 0 : this.props.url,
                        onClick: this.handleClick,
                        purchase: this.props.tierPrice
                    }, Object(c._53)(this.props), {
                        targetBlank: void 0 === this.props.targetBlank || this.props.targetBlank
                    }), t)
                }, t = i.__decorate([Object(s.d)("SubTierButton", {
                    autoReportInteractive: !0
                })], t)
            }(r.Component);
        n.d(t, !1, function() {
            return d
        }), n.d(t, "a", function() {
            return u
        })
    },
    YH6m: function(e, t, n) {
        "use strict";
        var i, r = n("TToO"),
            a = n("GiK3"),
            o = n("6sO2"),
            s = n("vBst"),
            l = n("Tzcg"),
            c = n("CSlQ"),
            d = n("daN3"),
            u = n("37Pp"),
            p = n("YEG/"),
            m = n("jYA1"),
            h = n("FDYX"),
            g = n("CwIZ"),
            f = n("Odds"),
            v = (n("6O9f"), "gift-subscription-button"),
            b = "subscribe-button";

        function k(e) {
            return "subscribe-button-modal-tab-" + e
        }! function(e) {
            e[e.Prime = 0] = "Prime", e[e.Tier1 = 1] = "Tier1", e[e.Tier2 = 2] = "Tier2", e[e.Tier3 = 3] = "Tier3"
        }(i || (i = {}));
        var y = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.toggleActiveTab = function(e) {
                    if (e.currentTarget.parentElement) switch (e.currentTarget.parentElement.getAttribute("data-tier")) {
                        case "subscribe-button-modal-tab-" + i.Prime:
                            n.setState({
                                activeTab: i.Prime,
                                currentPurchasePrice: n.getPrice(n.props.subscriptionProducts[0])
                            }), n.props.onSelectTierTab(i.Prime);
                            break;
                        case "subscribe-button-modal-tab-" + i.Tier1:
                            n.setState({
                                activeTab: i.Tier1,
                                currentPurchasePrice: n.getPrice(n.props.subscriptionProducts[0])
                            }), n.props.onSelectTierTab(i.Tier1);
                            break;
                        case "subscribe-button-modal-tab-" + i.Tier2:
                            n.setState({
                                activeTab: i.Tier2,
                                currentPurchasePrice: n.getPrice(n.props.subscriptionProducts[1])
                            }), n.props.onSelectTierTab(i.Tier2);
                            break;
                        case "subscribe-button-modal-tab-" + i.Tier3:
                            n.setState({
                                activeTab: i.Tier3,
                                currentPurchasePrice: n.getPrice(n.props.subscriptionProducts[2])
                            }), n.props.onSelectTierTab(i.Tier3);
                            break;
                        default:
                            n.setState({
                                activeTab: i.Prime,
                                currentPurchasePrice: n.getPrice(n.props.subscriptionProducts[0])
                            }), n.props.onSelectTierTab(i.Prime)
                    }
                }, n.getTabTitle = function() {
                    switch (n.state.activeTab) {
                        case i.Prime:
                            return Object(o.d)("Free Channel Sub with Twitch Prime", "SubTierTabs");
                        case i.Tier1:
                            return n.props.subscriptionProducts[0].displayName;
                        case i.Tier2:
                            return n.props.subscriptionProducts[1].displayName;
                        case i.Tier3:
                            return n.props.subscriptionProducts[2].displayName;
                        default:
                            return n.props.subscriptionProducts[0].displayName
                    }
                }, n.getTierSubscribeButton = function() {
                    var e = n.props.subscriptionProducts[n.state.activeTab - 1];
                    if (n.props.isGift) {
                        var t = Object(o.d)("Gift A Subscription", "SubTierTabs");
                        return n.props.giftRecipient ? a.createElement(d.a, {
                            subProductId: e.id,
                            giftRecipient: n.props.giftRecipient,
                            checkoutURL: e.url,
                            buttonMessage: t,
                            purchase: n.state.currentPurchasePrice,
                            onClick: n.reportGiftCheckoutAction
                        }) : a.createElement(f.u, {
                            ariaLabel: t + " " + n.state.currentPurchasePrice,
                            "data-test-selector": v,
                            onClick: n.onGiftSelect,
                            purchase: n.state.currentPurchasePrice
                        }, t)
                    }
                    return n.state.subbedTier === n.state.activeTab && n.state.activeTab === i.Prime ? a.createElement(m.a, {
                        authToken: n.props.authToken,
                        "data-a-target": "subscribe-with-prime-button",
                        isSubscribed: n.props.isSubscribed,
                        isSubscribedWithPrime: n.props.subbedTier === s.a.Prime,
                        onSubscribedWithPrime: n.onSubscribedWithPrime,
                        reportSubMenuAction: n.props.reportSubMenuAction,
                        subLogin: n.props.subLogin,
                        userHasPrime: n.props.userHasPrime,
                        canPrimeSubscribe: n.props.canPrimeSubscribe
                    }) : a.createElement(p.a, {
                        isSubbedToTier: n.state.subbedTier === n.state.activeTab,
                        tierPrice: n.state.currentPurchasePrice,
                        reportSubAction: n.props.reportSubMenuAction,
                        url: e.url,
                        "data-a-target": "subscribe-now-button",
                        "data-test-selector": b
                    })
                }, n.onSubscribedWithPrime = function() {
                    n.props.onSubscribedWithPrime && n.props.onSubscribedWithPrime()
                }, n.reportGiftCheckoutAction = function() {
                    n.props.reportSubMenuAction({
                        action: g.a.BuyGiftSub,
                        checkoutButtonTier: n.state.currentPurchasePrice,
                        giftRecipient: n.props.giftRecipient ? n.props.giftRecipient : null
                    })
                }, n.onGiftSelect = function() {
                    n.props.onGiftSelect && n.props.onGiftSelect()
                }, n.mapSubbedTierToTabs = function(e) {
                    e.subbedTier === s.a.Prime ? (n.setState({
                        activeTab: i.Prime,
                        subbedTier: i.Prime
                    }), e.onSelectTierTab(i.Prime)) : e.subbedTier === s.a.Tier1 ? (n.setState({
                        activeTab: i.Tier1,
                        subbedTier: i.Tier1
                    }), e.onSelectTierTab(i.Tier1)) : e.subbedTier === s.a.Tier2 ? (n.setState({
                        activeTab: i.Tier2,
                        subbedTier: i.Tier2
                    }), e.onSelectTierTab(i.Tier2)) : e.subbedTier === s.a.Tier3 ? (n.setState({
                        activeTab: i.Tier3,
                        subbedTier: i.Tier3
                    }), e.onSelectTierTab(i.Tier3)) : e.isGift ? e.onSelectTierTab(n.state.activeTab) : e.onSelectTierTab(i.Prime)
                }, n.getExtraEmotes = function(e) {
                    return (e === i.Tier2 ? Object(l.b)(n.props.subscriptionProducts[1].emotes) : Object(l.b)(n.props.subscriptionProducts[2].emotes.concat(n.props.subscriptionProducts[1].emotes))).map(function(e) {
                        return a.createElement(f._2, {
                            display: f.N.InlineFlex,
                            margin: {
                                right: .5
                            },
                            key: e.id
                        }, a.createElement("img", {
                            srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/" + e.srcSet
                        }))
                    })
                }, n.state = n.getInitialState(), n
            }
            return r.__extends(t, e), t.prototype.componentWillMount = function() {
                this.mapSubbedTierToTabs(this.props)
            }, t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                var e = null;
                this.state.subbedTier && (e = a.createElement(f._2, {
                    display: f.N.InlineFlex,
                    margin: {
                        right: .5
                    },
                    className: "subscription-balloon-options__subbed-star"
                }, a.createElement(f._15, {
                    asset: f._16.Star
                })));
                var t = null,
                    n = null,
                    r = null,
                    l = a.createElement(f._2, {
                        display: f.N.InlineFlex
                    }, this.state.subbedTier === i.Tier3 && e, a.createElement(f._26, {
                        active: this.state.activeTab === i.Tier3,
                        "data-tier": k(i.Tier3),
                        "data-a-target": k(i.Tier3),
                        onClick: this.toggleActiveTab
                    }, this.props.subscriptionProducts[2].price));
                if (this.props.subbedTier !== s.a.Prime || this.props.isGift || (t = a.createElement(f._2, {
                        display: f.N.InlineFlex,
                        margin: {
                            right: 2
                        }
                    }, a.createElement(f._2, {
                        display: f.N.InlineFlex,
                        margin: {
                            right: 1
                        },
                        className: "subscription-balloon-options__prime-crown"
                    }, a.createElement(f._15, {
                        asset: f._16.Crown
                    })), a.createElement(f._26, {
                        active: this.state.activeTab === i.Prime,
                        "data-tier": k(i.Prime),
                        "data-a-target": k(i.Prime),
                        onClick: this.toggleActiveTab
                    }, Object(o.d)("Prime", "SubTierTabs")))), !this.props.subbedTier || this.props.subbedTier === s.a.Tier1) {
                    var c = this.props.subscriptionProducts[0].price;
                    n = a.createElement(f._2, {
                        display: f.N.InlineFlex,
                        margin: {
                            right: 2
                        }
                    }, this.state.subbedTier === i.Tier1 && e, a.createElement(f._26, {
                        active: this.state.activeTab === i.Tier1,
                        "data-tier": k(i.Tier1),
                        "data-a-target": k(i.Tier1),
                        onClick: this.toggleActiveTab
                    }, c))
                }
                this.props.subbedTier && this.props.subbedTier !== s.a.Prime && this.props.subbedTier !== s.a.Tier1 && this.props.subbedTier !== s.a.Tier2 || (r = a.createElement(f._2, {
                    display: f.N.InlineFlex,
                    margin: {
                        right: 2
                    }
                }, this.state.subbedTier === i.Tier2 && e, a.createElement(f._26, {
                    active: this.state.activeTab === i.Tier2,
                    "data-tier": k(i.Tier2),
                    "data-a-target": k(i.Tier2),
                    onClick: this.toggleActiveTab
                }, this.props.subscriptionProducts[1].price)));
                var d = this.props.subscriptionProducts[1].emotes.length,
                    p = d + this.props.subscriptionProducts[2].emotes.length,
                    m = null;
                (d > 0 && this.state.activeTab === i.Tier2 || p > 0 && this.state.activeTab === i.Tier3) && (m = a.createElement(f._2, {
                    display: f.N.InlineFlex,
                    alignItems: f.c.Center
                }, this.getExtraEmotes(this.state.activeTab), a.createElement(f._35, {
                    bold: !0
                }, Object(o.d)("Plus {extraEmoteCount, number} extra channel emote(s)", {
                    extraEmoteCount: this.state.activeTab === i.Tier2 ? d : p
                }, "SubTierTabs"))));
                var h = this.props.subscriptionProducts[this.state.activeTab - 1];
                return a.createElement(f._2, {
                    className: "channel-header__subscription-balloon-options"
                }, a.createElement(f._2, {
                    margin: {
                        bottom: 1
                    }
                }, a.createElement(f._27, null, t, n, r, l)), a.createElement(f._2, null, a.createElement(f._2, {
                    margin: {
                        bottom: 1
                    }
                }, a.createElement(f._35, {
                    type: f._40.H5,
                    bold: !0
                }, this.getTabTitle())), a.createElement(f._2, {
                    margin: {
                        bottom: 1
                    }
                }, a.createElement(f._35, null, Object(o.d)("Includes {availableEmoteCount, number} emoticon(s), subscriber badge, customizable messages upon subscribing, and ad-free viewing", {
                    availableEmoteCount: this.props.subscriptionProducts[0].emotes.length
                }, "SubTierTabs"))), m, a.createElement(u.a, {
                    subscriptionProduct: h,
                    isGift: this.props.isGift
                }), a.createElement(f._2, {
                    margin: {
                        top: 1,
                        right: 1
                    }
                }, this.getTierSubscribeButton())))
            }, t.prototype.getInitialState = function() {
                var e = this.props.subscriptionProducts[0].price;
                return (Object(h.d)(this.props.subscriptionProducts) || Object(h.c)(this.props.subscriptionProducts)) && (e = Object(h.a)(this.props.subscriptionProducts[0], this.props.isGift)), {
                    activeTab: i.Tier1,
                    currentPurchasePrice: e,
                    subbedTier: null
                }
            }, t.prototype.getPrice = function(e) {
                return Object(h.d)(this.props.subscriptionProducts) || Object(h.c)(this.props.subscriptionProducts) ? Object(h.a)(e, this.props.isGift) : e.price
            }, t = r.__decorate([Object(c.d)("SubTierTabs")], t)
        }(a.Component);
        n.d(t, !1, function() {
            return v
        }), n.d(t, !1, function() {
            return b
        }), n.d(t, "b", function() {
            return i
        }), n.d(t, !1, function() {
            return k
        }), n.d(t, "a", function() {
            return y
        })
    },
    YUUt: function(e, t, n) {
        e.exports = n.p + "assets/counterstrike-skill-groups-24ec0fc40a78435bc37349dfbde7c720.png"
    },
    YhVV: function(e, t, n) {
        "use strict";
        t.b = function(e, t) {
            var n = [];
            if (!e || !t) return n;
            var r = /\S+/g,
                a = r.exec(e);
            for (; a;) {
                var o = a[0],
                    s = t[o];
                if (s && "function" != typeof s) {
                    var l = Object(i.d)(e.slice(0, a.index)),
                        c = l ? l.length : a.index;
                    n[c] = {
                        startIndex: c,
                        endIndex: c + o.length,
                        data: {
                            alt: o,
                            images: {
                                themed: !1,
                                sources: {
                                    "1x": Object(i.e)(s.id, 1),
                                    "2x": Object(i.e)(s.id, 2),
                                    "4x": Object(i.e)(s.id, 4)
                                }
                            }
                        }
                    }
                }
                a = r.exec(e)
            }
            return n
        }, t.a = function(e) {
            for (var t = {}, n = 0, i = e; n < i.length; n++)
                for (var o = i[n], s = 0, l = o.emotes; s < l.length; s++)
                    for (var c = l[s], d = r[c.token] || [c.token], u = 0, p = d; u < p.length; u++) {
                        var m = p[u];
                        t[m] && o.id === a || (t[m] = {
                            id: c.id,
                            token: m
                        })
                    }
            return t
        };
        var i = n("l21v");
        var r = {
                "\\:\\&gt\\;": [":>"],
                "\\&gt\\;\\(": [">("],
                "\\&lt\\;\\]": ["<]"],
                "\\&lt\\;3": ["<3"],
                ":-?(?:7|L)": [":-7", ":-L", ":7", ":L"],
                "[oO](_|\\.)[oO]": ["o_o", "O_O", "o_O", "O_o", "o.o", "O.O", "o.O", "O.o"],
                "\\;-?(p|P)": [";-p", ";-P", ";p", ";P"],
                "\\;-?\\)": [";-)", ";)"],
                "\\:-?(o|O)": [":-o", ":-O", ":o", ":O"],
                "\\:-?(p|P)": [":-p", ":-P", ":p", ":P"],
                "\\:-?(S|s)": [":-S", ":-s", ":s", ":S"],
                "\\:-?[\\\\/]": [":-/", ":-\\", ":/", ":\\"],
                "\\:-?[z|Z|\\|]": [":-|", ":-Z", ":-z", ":|", ":Z", ":z"],
                "\\:-?\\(": [":-(", ":("],
                "\\:-?\\)": [":-)", ":)"],
                "\\:-?D": [":-D", ":D"],
                "#-?[\\\\/]": ["#-/", "#-\\", "#/", "#\\"],
                "B-?\\)": ["B-)", "B)"],
                "R-?\\)": ["R-)", "R)"]
            },
            a = "0"
    },
    YugT: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FollowButton_FollowEvent_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPartner"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hosting"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "stream"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "game"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 157
            }
        };
        n.loc.source = {
            body: "query FollowButton_FollowEvent_User($id: ID!) {\nuser(id: $id) {\nid\nisPartner\nstream {\nid\ngame {\nid\nname\n}\n}\nhosting {\nid\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "Z+EN": function(e, t) {},
    "Z+Fq": function(e, t) {},
    Zifq: function(e, t) {},
    aMxy: function(e, t, n) {
        "use strict";
        var i = n("arZ9");
        n.n(i);
        n.o(i, "FrienshipChangeType") && n.d(t, "FrienshipChangeType", function() {
            return i.FrienshipChangeType
        }), n.o(i, "ModerationActions") && n.d(t, "ModerationActions", function() {
            return i.ModerationActions
        }), n.o(i, "PubsubMessageType") && n.d(t, "PubsubMessageType", function() {
            return i.PubsubMessageType
        }), n.o(i, "PubsubTopic") && n.d(t, "PubsubTopic", function() {
            return i.PubsubTopic
        }), n.o(i, "TargetedModerationActions") && n.d(t, "TargetedModerationActions", function() {
            return i.TargetedModerationActions
        });
        var r = n("GHQc");
        n.n(r);
        n.o(r, "FrienshipChangeType") && n.d(t, "FrienshipChangeType", function() {
            return r.FrienshipChangeType
        }), n.o(r, "ModerationActions") && n.d(t, "ModerationActions", function() {
            return r.ModerationActions
        }), n.o(r, "PubsubMessageType") && n.d(t, "PubsubMessageType", function() {
            return r.PubsubMessageType
        }), n.o(r, "PubsubTopic") && n.d(t, "PubsubTopic", function() {
            return r.PubsubTopic
        }), n.o(r, "TargetedModerationActions") && n.d(t, "TargetedModerationActions", function() {
            return r.TargetedModerationActions
        });
        var a = n("/3Lr");
        n.d(t, "FrienshipChangeType", function() {
            return a.a
        }), n.d(t, "ModerationActions", function() {
            return a.b
        }), n.d(t, "PubsubMessageType", function() {
            return a.c
        }), n.d(t, "PubsubTopic", function() {
            return a.d
        }), n.d(t, "TargetedModerationActions", function() {
            return a.e
        })
    },
    arZ9: function(e, t) {},
    bBGx: function(e, t) {},
    c3pS: function(e, t, n) {
        "use strict";
        n("67ft");
        var i, r = n("TToO"),
            a = n("KSGD"),
            o = n("GiK3"),
            s = n("6BvN"),
            l = n("HW6M"),
            c = n("6sO2"),
            d = n("rCmJ"),
            u = n("Odds"),
            p = (n("IfJQ"), "autocomplete-balloon-matches"),
            m = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.resizeAnimationFrame = 0, t.messages = {
                        noMatches: Object(c.d)("No matches.", "AutocompleteBalloon")
                    }, t.logger = c.i.withCategory("AutocompleteBalloon"), t.renderMatches = function() {
                        return t.props.matches.map(function(e, n) {
                            var i = t.state.selectedMatch,
                                r = i && i.replacement === e.replacement,
                                a = l("autocomplete-balloon__item", {
                                    "autocomplete-balloon__item--selected": r
                                });
                            return o.createElement(u._2, {
                                key: "autocomplete-match-" + n,
                                refDelegate: r ? t.focusOnOption : void 0,
                                "data-test-selector": p
                            }, o.createElement(u.W, {
                                display: u.N.Block,
                                fullWidth: !0
                            }, o.createElement("button", {
                                onMouseEnter: t.handleMatchMouseEnter,
                                className: a,
                                "data-a-target": e.replacement,
                                "data-click-index": n,
                                onClick: t.onMatchClick
                            }, o.createElement(u._2, {
                                padding: {
                                    x: .5
                                },
                                display: u.N.Flex,
                                alignItems: u.c.Center
                            }, e.element))))
                        })
                    }, t.handleMatchMouseEnter = function(e) {
                        var n = t.getMatchFromEvent(e);
                        n && t.setState({
                            selectedMatch: n
                        })
                    }, t.onMatchClick = function(e) {
                        var n = t.getMatchFromEvent(e);
                        n && t.props.onMatchSelect(n)
                    }, t.getMatchFromEvent = function(e) {
                        var n = t.props.matches,
                            i = e.currentTarget.getAttribute("data-click-index");
                        return !i || +i >= n.length ? (t.logger.error(new Error, "The index received from the UI element was not found in props.matches."), null) : n[+i]
                    }, t.handleKeydown = function(e) {
                        var n = e.charCode || e.keyCode,
                            i = function() {
                                e.preventDefault(), e.stopPropagation()
                            };
                        switch (n) {
                            case s.a.Tab:
                            case s.a.Enter:
                                i(), t.props.matches.length && t.state.selectedMatch ? t.props.onMatchSelect(t.state.selectedMatch) : t.props.onDismiss();
                                break;
                            case s.a.Up:
                            case s.a.Down:
                                if (!t.state.selectedMatch || !t.props.matches.length) return;
                                var r = t.props.matches.indexOf(t.state.selectedMatch);
                                if (-1 === r) return void t.logger.error(new Error, "The selected match was not found in props.matches.");
                                i();
                                var a = n === s.a.Up ? -1 : 1,
                                    o = t.getIndexWithinLength(r + a, t.props.matches.length),
                                    l = t.props.matches[o];
                                t.setState({
                                    selectedMatch: l
                                })
                        }
                    }, t.getIndexWithinLength = function(e, t) {
                        var n = e % t;
                        return n < 0 ? n + t : n
                    }, t.onResize = function() {
                        t.resizeAnimationFrame || (t.resizeAnimationFrame = requestAnimationFrame(t.setContainerHeight))
                    }, t.setContainerHeight = function() {
                        var e = t.props.containerElement && t.props.containerElement.clientHeight || 1080;
                        t.setState({
                            containerHeight: e
                        }), t.resizeAnimationFrame = 0
                    }, t.focusOnOption = function(e) {
                        if (e && t.autocompleteBalloonElement) {
                            var n = e.getBoundingClientRect(),
                                i = t.autocompleteBalloonElement.getBoundingClientRect();
                            (n.bottom > i.bottom || n.top < i.top) && e.scrollIntoView()
                        }
                    }, t.setAutocompleteBalloonElement = function(e) {
                        t.autocompleteBalloonElement = e
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    window.addEventListener("keydown", this.handleKeydown, !0), window.addEventListener("resize", this.onResize, !0), this.setContainerHeight(), this.props.matches.length > 0 && this.setState({
                        selectedMatch: this.props.matches[0]
                    })
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("resize", this.onResize, !0), window.removeEventListener("keydown", this.handleKeydown, !0), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this,
                        n = e.matches.reduce(function(e, n, i) {
                            return t.state.selectedMatch ? n.replacement === t.state.selectedMatch.replacement ? i : e : 0
                        }, 0);
                    this.setState({
                        selectedMatch: e.matches[n]
                    })
                }, t.prototype.render = function() {
                    var e;
                    return e = 0 === this.props.matches.length ? o.createElement(u._2, {
                        padding: {
                            x: .5
                        },
                        "data-test-selector": "autocomplete-balloon-no-matches"
                    }, o.createElement(u._35, {
                        type: u._40.Span,
                        color: u.I.Alt2
                    }, this.messages.noMatches)) : this.renderMatches(), o.createElement(u._2, {
                        position: u._9.Relative
                    }, o.createElement(d.a, {
                        onClickOut: this.props.onDismiss
                    }, o.createElement(u.p, {
                        direction: u.q.TopLeft,
                        "data-a-target": "autocomplete-balloon",
                        "data-test-selector": "autocomplete-balloon",
                        show: !0
                    }, o.createElement(u._2, {
                        refDelegate: this.setAutocompleteBalloonElement,
                        "data-test-selector": "autocomplete-matches-container",
                        className: "autocomplete-balloon",
                        overflow: u._5.Auto,
                        padding: {
                            y: 1
                        }
                    }, o.createElement("div", {
                        style: {
                            maxHeight: this.state.containerHeight
                        }
                    }, e)))))
                }, t
            }(o.Component),
            h = n("2emZ"),
            g = n("vH/s"),
            f = {
                Chat: "chat",
                Feed: "feed",
                Whisper: "whisper"
            },
            v = ":",
            b = "#",
            k = "@",
            y = function(e) {
                switch (e) {
                    case h.a.Emote:
                        return v;
                    case h.a.Hashtag:
                        return b;
                    case h.a.Mention:
                        return k;
                    default:
                        return void c.i.warn("Chat Suggestions tracking was passed an unknown autocomplete type.")
                }
            },
            S = function(e) {
                var t = y(e.autocompleteType);
                if (t) {
                    var n = {
                        channel: e.channelLogin,
                        completed_text: e.completedText,
                        source: e.source,
                        start_character: t
                    };
                    c.m.track(g.SpadeEventType.ChatSuggestionComplete, n)
                }
            };
        ! function(e) {
            e.Input = "input", e.TextArea = "textarea"
        }(i || (i = {}));
        var _ = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        autocompleteType: h.a.None,
                        matchedCursorPosition: 0,
                        matches: null,
                        value: ""
                    }, t.providers = [], t.onChange = function(e) {
                        t.setState({
                            value: e.target.value
                        }, function() {
                            t.getMatches()
                        }), t.props.onChange && t.props.onChange(e)
                    }, t.onKeyDown = function(e) {
                        var n = function() {
                                t.props.onKeyDown && t.props.onKeyDown(e)
                            },
                            i = function() {
                                e.preventDefault(), e.stopPropagation()
                            },
                            r = e.charCode || e.keyCode;
                        if (r !== s.a.Enter) {
                            switch (r) {
                                case s.a.Tab:
                                    if (!t.state.matches) t.getMatches(!0) && i();
                                    break;
                                case s.a.Esc:
                                    t.state.matches && (i(), t.resetDisplayState())
                            }
                            n()
                        } else n()
                    }, t.setComponentRefDelegate = function(e) {
                        t.componentRef = e, t.props.componentRefDelegate && t.props.componentRefDelegate(e)
                    }, t.getMatches = function(e) {
                        var n = t.state.value;
                        if (0 === t.providers.length || 0 === n.length) return t.resetDisplayState(), !1;
                        var i = t.getCurrentCursorPosition();
                        if (i > n.length);
                        else
                            for (; i < n.length && !/\s/.test(n.charAt(i));) i++;
                        var r = n.substring(0, i);
                        if (0 === r.length || /\s/.test(r.substring(r.length - 1))) return t.resetDisplayState(), !1;
                        for (var a = r.split(/\s/), o = a[a.length - 1], s = 0, l = t.providers; s < l.length; s++) {
                            var c = l[s];
                            if (!e || c.canBeTriggeredByTab) {
                                var d = c.getMatches(o, e);
                                if (d) return t.setState({
                                    autocompleteType: c.autocompleteType,
                                    matchedCursorPosition: i,
                                    matches: d
                                }), !0
                            }
                        }
                        return t.resetDisplayState(), !1
                    }, t.resetDisplayState = function(e, n) {
                        var i = r.__assign({}, t.state, {
                            autocompleteType: h.a.None,
                            matches: null
                        }, e || {});
                        t.setState(i, n)
                    }, t.insertReplacement = function(e) {
                        var n = t.state.value,
                            i = t.state.matchedCursorPosition,
                            a = n.substring(0, i),
                            o = a.lastIndexOf(e.current);
                        if (-1 === o) a = a.concat(e.replacement + " "), i = a.length;
                        else {
                            var s = a.substring(0, o),
                                l = n.length > o + e.current.length ? n.substring(o + e.current.length) : "",
                                c = l.startsWith(" ") ? e.replacement : e.replacement + " ";
                            a = "" + s + c + l, i = s.length + c.length
                        }
                        S(r.__assign({}, t.props.trackingParams || {}, {
                            autocompleteType: t.state.autocompleteType,
                            completedText: e.replacement,
                            source: t.props.suggestionSource
                        })), t.resetDisplayState({
                            value: a
                        }, function() {
                            t.setCursorPosition(i)
                        })
                    }, t.getCurrentCursorPosition = function() {
                        return t.componentRef.selectionStart
                    }, t.setCursorPosition = function(e) {
                        t.componentRef && (t.componentRef.setSelectionRange(e, e), t.componentRef.focus())
                    }, t.registerAutocompleteProvider = function(e) {
                        return t.providers.push(e),
                            function() {
                                var n = t.providers.indexOf(e);
                                t.providers.splice(n, 1)
                            }
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.refDelegate && this.props.refDelegate(this)
                }, t.prototype.getChildContext = function() {
                    return {
                        registerAutocompleteProvider: this.registerAutocompleteProvider
                    }
                }, t.prototype.componentWillUpdate = function(e, t) {
                    !this.state.matches && t.matches && function(e) {
                        var t = y(e.autocompleteType);
                        if (t) {
                            var n = {
                                source: e.source,
                                start_character: t
                            };
                            c.m.track(g.SpadeEventType.ChatSuggestion, n)
                        }
                    }({
                        autocompleteType: t.autocompleteType,
                        source: e.suggestionSource
                    })
                }, t.prototype.componentDidUpdate = function(e, t) {
                    t.value !== this.state.value && this.props.onValueUpdate && this.props.onValueUpdate(this.state.value)
                }, t.prototype.render = function() {
                    var e = r.__assign({}, this.props, {
                        onChange: this.onChange,
                        onKeyDown: this.onKeyDown,
                        refDelegate: this.setComponentRefDelegate,
                        value: this.state.value
                    });
                    return o.createElement(u._2, null, this.state.matches && o.createElement(m, {
                        matches: this.state.matches,
                        onMatchSelect: this.insertReplacement,
                        onDismiss: this.resetDisplayState,
                        containerElement: this.props.containerElement
                    }), this.props.componentType === i.Input ? o.createElement(u.Y, r.__assign({}, e, {
                        type: e.type || u.Z.Text
                    })) : o.createElement(u._37, r.__assign({}, e)), this.props.children)
                }, t.prototype.getValue = function() {
                    return this.state.value
                }, t.prototype.setValue = function(e) {
                    this.resetDisplayState({
                        value: e
                    })
                }, t.childContextTypes = {
                    registerAutocompleteProvider: a.func
                }, t
            }(o.Component),
            N = n("Bir6"),
            E = n("Tzcg"),
            C = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.autocompleteType = h.a.Emote, t.canBeTriggeredByTab = !1, t.getMatches = function(e) {
                        return e.startsWith(":") ? e.length < 3 ? null : t.getMatchedEmotes(e) : null
                    }, t.getMatchedEmotes = function(e) {
                        var n = t.state.hydratedEmotes;
                        if (!n || 0 === n.length) return null;
                        var i = e.substring(1),
                            r = n.reduce(function(e, n) {
                                var r = n.emotes.filter(function(e) {
                                    if (e.token) return t.doesEmoteMatchTerm(e, i)
                                });
                                return e.concat([r])
                            }, []).filter(function(e) {
                                return e.length > 0
                            }).reduce(function(e, t) {
                                return e.concat(t)
                            }, []);
                        return r = Object(E.d)(r), (r = Object(E.e)(r, i)).map(function(e) {
                            return {
                                current: ":" + i,
                                replacement: e.token,
                                element: t.renderEmoteSuggestion(e)
                            }
                        })
                    }, t.doesEmoteMatchTerm = function(e, t) {
                        var n = new RegExp("^" + Object(N.a)(t), "i");
                        if (e.token.match(n)) return !0;
                        var i = new RegExp("" + Object(N.a)(t.charAt(0)).toUpperCase()),
                            r = new RegExp("^" + Object(N.a)(t.slice(1)), "i"),
                            a = e.token.match(i);
                        return !!(a && a.index && e.token.slice(a.index + 1).match(r))
                    }, t.renderEmoteSuggestion = function(e) {
                        return [o.createElement(u._2, {
                            padding: {
                                right: .5
                            },
                            key: "emote-img-" + e.id
                        }, o.createElement("img", {
                            srcSet: e.srcSet
                        })), o.createElement(u._35, {
                            type: u._40.Span,
                            key: "emote-text-" + e.id
                        }, e.token)]
                    }, t.hidrateEmotes = function(e) {
                        var n = e.map(function(e) {
                            return {
                                id: e.id,
                                emotes: Object(E.b)(e.emotes)
                            }
                        });
                        t.setState({
                            hydratedEmotes: n
                        })
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    e.emotes && this.props.emotes !== e.emotes && this.hidrateEmotes(e.emotes)
                }, t.prototype.componentWillMount = function() {
                    this.hidrateEmotes(this.props.emotes)
                }, t.prototype.componentDidMount = function() {
                    this.unregister = this.context.registerAutocompleteProvider(this)
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister()
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    registerAutocompleteProvider: a.func
                }, t
            }(o.Component);
        n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "b", function() {
            return _
        }), n.d(t, "a", function() {
            return i
        }), n.d(t, !1, function() {}), n.d(t, "d", function() {
            return C
        }), n.d(t, "c", function() {
            return f
        })
    },
    "cuT/": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return g
        }), n.d(t, "c", function() {
            return i
        }), n.d(t, "b", function() {
            return f
        });
        var i, r = n("TToO"),
            a = n("HW6M"),
            o = (n.n(a), n("knr3")),
            s = (n.n(o), n("GiK3")),
            l = (n.n(s), n("6sO2")),
            c = n("rK5D"),
            d = n("zNzU"),
            u = n("CSlQ"),
            p = n("Odds"),
            m = n("WHFs"),
            h = (n.n(m), 920),
            g = "34rem",
            f = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.logger = l.i.withCategory("RightColumn"), n.handleToggleVisibility = function() {
                        var e = n.getLayoutCache();
                        n.props.isExpanded ? (n.props.collapse(), e.resource.isRightColumnClosedByUserAction = !0) : (n.props.expand(), e.resource.isRightColumnClosedByUserAction = !1), l.k.set(l.n.config.layoutCacheKey, e), Object(c.c)({
                            element: c.a.Chat,
                            action: n.props.isExpanded ? c.b.Close : c.b.Open
                        })
                    }, n.hideOnBreakpoint = function() {
                        if (n.containerRef) {
                            var e = h;
                            window.innerWidth < e && !n.props.theatreModeEnabled ? "none" !== n.containerRef.style.display && (n.containerRef.style.display = "none") : "none" === n.containerRef.style.display && (n.containerRef.style.display = "")
                        }
                    }, n.setContainerRef = function(e) {
                        return n.containerRef = e
                    }, n.state = {
                        content: null,
                        contentID: null,
                        isError: !1
                    }, i && n.logger.warn("RightColumn should only ever be used in the Root. Use <RightColumnContent> instead to wrap components that should display in the right column."), i = n, n
                }
                return r.__extends(t, e), t.prototype.componentDidCatch = function(e, t) {
                    var n = this;
                    this.setState({
                        isError: !0
                    }, function() {
                        n.logger.error(e, "A unhandled exception occurred in the component hierarchy", {
                            info: t
                        })
                    })
                }, t.prototype.componentDidMount = function() {
                    window.addEventListener("resize", this.hideOnBreakpoint), this.hideOnBreakpoint(), this.reportInteractive(), o.bind("alt+r", this.handleToggleVisibility)
                }, t.prototype.componentDidUpdate = function() {
                    this.hideOnBreakpoint(), this.state.content && this.reportInteractive()
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("resize", this.hideOnBreakpoint), o.unbind("alt+r")
                }, t.prototype.render = function() {
                    if (!this.state.content || this.state.isError) return null;
                    var e = a("right-column", {
                            "right-column--collapsed": !this.props.isExpanded,
                            "right-column--theatre": this.props.theatreModeEnabled
                        }),
                        t = this.props.isExpanded ? "right-column-chat-bar" : "right-column-chat-bar-collapsed";
                    return s.createElement(p._2, {
                        className: e,
                        refDelegate: this.setContainerRef,
                        flexShrink: 0,
                        fullHeight: !0,
                        position: this.props.theatreModeEnabled ? p._9.Fixed : p._9.Relative,
                        attachTop: this.props.theatreModeEnabled,
                        attachRight: this.props.theatreModeEnabled,
                        "data-a-target": t
                    }, s.createElement(p._2, {
                        position: p._9.Relative,
                        flexGrow: 0,
                        flexShrink: 0,
                        fullHeight: !0,
                        display: this.props.isExpanded ? p.N.Block : p.N.Hide
                    }, this.state.content), s.createElement(p.W, {
                        className: "right-column__toggle-visibility",
                        position: p._9.Absolute,
                        flexGrow: 0,
                        flexShrink: 0,
                        display: p.N.Block,
                        zIndex: p._52.Above
                    }, s.createElement("button", {
                        onClick: this.handleToggleVisibility,
                        "data-a-target": "right-column__toggle-collapse-btn"
                    }, s.createElement(p.W, {
                        className: "right-column__toggle-visibility-icon",
                        position: p._9.Absolute
                    }, s.createElement(p._35, {
                        type: p._40.Span
                    }, s.createElement(p._15, {
                        asset: p._16.GlyphArrDown
                    }))))))
                }, t.prototype.provideContent = function(e, t) {
                    this.state.content && this.state.contentID !== t && this.logger.warn("Displaying another component already. Only one component can be displayed at a time using <RightColumnContent>. Check the page or other subcomponents to find the other instance and determine which one should be showing."), this.setState({
                        content: e,
                        contentID: t
                    })
                }, t.prototype.removeContent = function() {
                    this.setState({
                        content: null,
                        contentID: null
                    })
                }, t.prototype.reportInteractive = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.getLayoutCache = function() {
                    return l.k.get(l.n.config.layoutCacheKey, d.a)
                }, t = r.__decorate([Object(u.d)("RightColumn")], t)
            }(s.Component)
    },
    daN3: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("6sO2"),
            o = n("7vx8"),
            s = n("yDzg"),
            l = n("CSlQ"),
            c = n("Odds"),
            d = n("lK86"),
            u = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasPopupExperiment: !1
                    }, t.setPopupExperiment = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e;
                            return i.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return [4, a.n.experiments.getAssignment("TWILIGHT_SUB_CHECKOUT_POPUP")];
                                    case 1:
                                        return e = t.sent(), this.setState({
                                            hasPopupExperiment: "yes" === e
                                        }), [2]
                                }
                            })
                        })
                    }, t.handleClick = function() {
                        return t.openCheckout(), t.props.onClick && t.props.onClick()
                    }, t.openCheckout = function() {
                        t.state.hasPopupExperiment && t.props.checkoutURL && t.props.giftRecipient && window.open(Object(s.a)(t.props.checkoutURL, {
                            recipient: t.props.giftRecipient,
                            ref: "gift-subscribe-button"
                        }), "Twitch", "width=1000, height=1100, menubar, toolbar, location, personalbar, scrollbars")
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.setPopupExperiment()
                }, t.prototype.render = function() {
                    var e = this.props.checkoutURL ? Object(a.d)("Buy Gift Subscription", "GiftSubscribeButton") : Object(a.d)("Gift Subscription", "GiftSubscribeButton"),
                        t = !!(this.props.data && this.props.data.user && this.props.data.user.self) && this.props.data.user.self.canGift,
                        n = this.props.checkoutURL && this.props.giftRecipient ? Object(s.a)(this.props.checkoutURL, {
                            recipient: this.props.giftRecipient
                        }) : "";
                    return r.createElement(c.u, {
                        targetBlank: !0,
                        disabled: !t,
                        onClick: this.handleClick,
                        linkTo: this.state.hasPopupExperiment ? void 0 : n,
                        "data-test-selector": "gift-subscribe-button",
                        purchase: this.props.purchase
                    }, this.props.buttonMessage || e)
                }, t = i.__decorate([Object(l.d)("GiftSubscribeButton", {
                    autoReportInteractive: !0
                }), Object(o.a)(d, {
                    options: function(e) {
                        return {
                            variables: {
                                recipientLogin: e.giftRecipient,
                                subProductId: e.subProductId
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.giftRecipient || !e.subProductId
                    }
                })], t)
            }(r.Component);
        n.d(t, !1, function() {
            return "gift-subscribe-button"
        }), n.d(t, "a", function() {
            return u
        })
    },
    djIP: function(e, t, n) {
        "use strict";
        var i, r, a;
        n.d(t, "c", function() {
                return i
            }), n.d(t, "b", function() {
                return r
            }), n.d(t, "a", function() {
                return a
            }),
            function(e) {
                e.Spam = "Spam", e.Harassment = "Harassment"
            }(i || (i = {})),
            function(e) {
                e.Spam = "spam", e.Harassment = "harassment", e.Other = "other"
            }(r || (r = {})),
            function(e) {
                e.Whisper = "WHISPER", e.Chat = "CHAT"
            }(a || (a = {}))
    },
    e1CU: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            var n = e,
                i = !1;
            n ? n.split("").map(function(e) {
                return e.charCodeAt(0) > 127
            }).reduce(function(e, t) {
                return e || t
            }) && (i = !0) : n = t;
            return {
                userDisplayName: n,
                isIntl: i
            }
        }
    },
    e6tx: function(e, t) {},
    eBiB: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            if (e && "v" === e.charAt(0)) return e.substring(1);
            return e
        }
    },
    eXld: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            r = n("TToO"),
            a = n("HW6M"),
            o = n("KSGD"),
            s = n("GiK3"),
            l = n("N221"),
            c = n("Odds"),
            d = (n("V1E/"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        scrollableProps: {}
                    }, t.getChildContext = function() {
                        return {
                            setRootScrollableProps: t.setRootScrollableProps,
                            resetRootScrollableProps: t.resetRootScrollableProps
                        }
                    }, t.setRootScrollableProps = function(e) {
                        t.setState({
                            scrollableProps: e
                        })
                    }, t.resetRootScrollableProps = function() {
                        t.setState({
                            scrollableProps: {}
                        })
                    }, t.setScrollableAreaRef = function(e) {
                        return t.scrollableAreaRef = e
                    }, t
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.playerIsPersisting && this.state.scrollableProps && this.state.scrollableProps.addPaddingWhenPlayerIsPersisting,
                        t = a({
                            "root-scrollable": !this.state.scrollableProps.className,
                            "root-scrollable--persisting-player": e
                        }, this.state.scrollableProps.className || ""),
                        n = r.__assign({
                            contentClassName: "root-scrollable__content"
                        }, this.state.scrollableProps, {
                            className: t
                        });
                    return s.createElement(l.b, r.__assign({}, n, {
                        "data-a-target": "root-scroller",
                        scrollRef: this.setScrollableAreaRef
                    }), s.createElement(c._2, {
                        position: c._9.Relative,
                        fullWidth: !0,
                        className: "root-scrollable__wrapper",
                        refDelegate: this.props.contentRefDelegate
                    }, this.props.children))
                }, t.childContextTypes = {
                    setRootScrollableProps: o.func,
                    resetRootScrollableProps: o.func
                }, t
            }(s.Component));
        var u = Object(i.b)(function(e) {
                return {
                    playerIsPersisting: e.ui.persistentPlayerEnabled && e.ui.persistentPlayerIsPersisting
                }
            })(d),
            p = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.shouldSetRootScrollableProps = function(e, t) {
                        return !(!e || !t) && (e.disableDebounce !== t.disableDebounce || (e.scrollRef !== t.scrollRef || (e.contentClassName !== t.contentClassName || (e.scrollContentClassName !== t.scrollContentClassName || (e.suppressScrollX !== t.suppressScrollX || (e.suppressScrollY !== t.suppressScrollY || e.className !== t.className))))))
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.context.setRootScrollableProps && this.context.setRootScrollableProps(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.shouldSetRootScrollableProps(this.props, e) && this.context.setRootScrollableProps && this.context.setRootScrollableProps(e)
                }, t.prototype.componentWillUnmount = function() {
                    this.context.resetRootScrollableProps && this.context.resetRootScrollableProps()
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    setRootScrollableProps: o.func,
                    resetRootScrollableProps: o.func
                }, t
            }(s.Component);
        n.d(t, "a", function() {
            return u
        }), n.d(t, "b", function() {
            return p
        })
    },
    ehrk: function(e, t) {},
    emkL: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("6sO2"),
            o = n("Odds"),
            s = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onHistoryChange = function(e) {
                        n.setState({
                            currentPathname: e.pathname
                        })
                    }, n.shouldShow = function() {
                        return n.props.link && n.state.currentPathname !== n.props.link.pathname
                    }, n.state = {
                        currentPathname: location.pathname
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.historyUnlisten = a.n.history.listen(this.onHistoryChange)
                }, t.prototype.componentWillUnmount = function() {
                    this.historyUnlisten()
                }, t.prototype.render = function() {
                    return this.props.link && this.shouldShow() ? r.createElement(o.u, {
                        linkTo: this.props.link,
                        onClick: this.props.onClick,
                        overlay: this.props.shouldHollowOverlay,
                        size: o.x.Small,
                        tabIndex: -1,
                        type: this.props.shouldHollowOverlay ? o.z.Hollow : o.z.Default
                    }, Object(a.d)("Join", "JoinButton")) : null
                }, t
            }(r.Component);
        n.d(t, "a", function() {
            return s
        })
    },
    eqtY: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "CommunityStreams_Streams"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "name"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "type"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DirectoryType"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "limit"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Int"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "directory"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "name"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "type"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "type"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "streams"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "limit"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "title"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "viewersCount"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "previewImageURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "320"
                                                            }
                                                        }, {
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "height"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "180"
                                                            }
                                                        }],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "broadcaster"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "login"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "displayName"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "game"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "boxArtURL"
                                                                },
                                                                arguments: [{
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "width"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "285"
                                                                    }
                                                                }, {
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "height"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "380"
                                                                    }
                                                                }],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "type"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "pageInfo"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "hasNextPage"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 364
            }
        };
        n.loc.source = {
            body: "query CommunityStreams_Streams($name: String! $type: DirectoryType! $limit: Int) {\ndirectory(name: $name type: $type) {\nid\nname\nstreams(first: $limit) {\nedges {\ncursor\nnode {\nid\ntitle\nviewersCount\npreviewImageURL(width: 320 height: 180)\nbroadcaster {\nid\nlogin\ndisplayName\n}\ngame {\nid\nboxArtURL(width: 285 height: 380)\nname\n}\ntype\n}\n}\npageInfo {\nhasNextPage\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    f6or: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "CommunitySelectionPage"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "limit"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Int"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "games"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "first"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "limit"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "edges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "node"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "boxArtURL"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "width"
                                                    },
                                                    value: {
                                                        kind: "IntValue",
                                                        value: "285"
                                                    }
                                                }, {
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "height"
                                                    },
                                                    value: {
                                                        kind: "IntValue",
                                                        value: "380"
                                                    }
                                                }],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "viewersCount"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 144
            }
        };
        n.loc.source = {
            body: "query CommunitySelectionPage($limit: Int) {\ngames(first: $limit) {\nedges {\nnode {\nid\nname\nboxArtURL(width: 285 height: 380)\nviewersCount\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    fS5P: function(e, t) {},
    fc0G: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("F8kA"),
            o = n("6sO2"),
            s = n("hdYS"),
            l = n("+Znq"),
            c = n("vH/s"),
            d = n("LjAQ"),
            u = n("mw/a"),
            p = n("70dR"),
            m = n("Odds"),
            h = (n("Zifq"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleReportHosterClick = function() {
                        t.props.isLoggedIn ? t.props.showReportUserModal({
                            onClose: t.handleReportModalClose,
                            reportContext: {
                                contentType: u.a.User,
                                targetUserID: t.props.hostChannelID
                            },
                            title: Object(o.d)("Report {channelDisplayName}", {
                                channelDisplayName: t.props.hostChannelDisplayName
                            }, "VideoPlayerHostingUI")
                        }) : t.props.login()
                    }, t.handleReportModalClose = function(e) {
                        (e === d.b.MutationError || e === d.b.Success) && t.props.history.push("/")
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = !!this.props.hostedChannelDisplayName;
                    return r.createElement(m._25, {
                        className: "video-player-hosting-ui__container"
                    }, e && this.renderHeader(), r.createElement("span", {
                        key: "video-player"
                    }, this.props.children), r.createElement(m._2, {
                        display: e ? m.N.Block : m.N.Hide,
                        position: m._9.Relative,
                        zIndex: m._52.Above
                    }, e && this.renderFooter()))
                }, t.prototype.renderHeader = function() {
                    return r.createElement(m.e, {
                        type: m.i.SlideInBottom,
                        delay: m.f.Medium,
                        duration: m.g.Medium,
                        enabled: !0
                    }, r.createElement(a.a, {
                        key: "hosting-ui-header",
                        className: "video-player-hosting-ui__link",
                        to: {
                            pathname: "/" + this.props.hostedChannelLogin,
                            state: {
                                medium: c.PageviewMedium.Channel,
                                content: c.PageviewContent.Host
                            }
                        },
                        "data-a-target": "hosting-ui-link",
                        "data-test-selector": "video-player-hosting-ui__header"
                    }, r.createElement(m._25, {
                        className: "video-player-hosting-ui__header",
                        display: m.N.Flex,
                        background: m.m.AccentAlt2,
                        color: m.I.Overlay,
                        alignItems: m.c.Center,
                        padding: {
                            x: 1,
                            y: .5
                        },
                        "data-a-target": "hosting-ui-header"
                    }, r.createElement(m._2, {
                        className: "video-player-hosting-ui__avatar-container"
                    }, r.createElement(m.l, {
                        src: this.props.hostedChannelProfileImageURL || "",
                        size: 30,
                        alt: Object(o.d)("Hosted Channel {hostedChannelDisplayName}'s Avatar", {
                            hostedChannelDisplayName: this.props.hostedChannelDisplayName || ""
                        }, "VideoPlayerHostingUI")
                    })), r.createElement(m._25, {
                        margin: {
                            left: 1
                        },
                        fontSize: m.R.Size5
                    }, Object(o.d)("Hosting", "VideoPlayerHostingUI"), " ", r.createElement(m._35, {
                        type: m._40.Span,
                        className: "video-player-hosting-ui__channel-name",
                        color: m.I.OverlayAlt,
                        "data-a-target": "hosting-ui-channel-name"
                    }, this.props.hostedChannelDisplayName)))))
                }, t.prototype.renderFooter = function() {
                    return r.createElement(m.e, {
                        type: m.i.SlideInTop,
                        enabled: !0,
                        delay: m.f.Medium,
                        duration: m.g.Medium
                    }, r.createElement(m._25, {
                        key: "hosting-ui-footer",
                        background: m.m.AccentAlt2,
                        className: "video-player-hosting-ui__footer",
                        display: m.N.Block,
                        padding: 1,
                        "data-test-selector": "video-player-hosting-ui__footer",
                        "data-a-target": "hosting-ui-footer"
                    }, r.createElement(m._2, {
                        padding: {
                            y: .5
                        },
                        display: m.N.Flex,
                        justifyContent: m._1.Between
                    }, r.createElement(m._2, {
                        display: m.N.Flex
                    }, r.createElement(m._2, {
                        margin: {
                            right: 1
                        }
                    }, r.createElement(s.a, {
                        "data-a-target": "hosting-ui-follow-button",
                        channelName: this.props.hostedChannelLogin || "",
                        channelLogin: this.props.hostedChannelLogin,
                        hostChannelLogin: this.props.hostChannelLogin,
                        hostChannelID: this.props.hostChannelID,
                        isHostedFollow: !0,
                        balloonDirection: m.q.BottomLeft
                    })), r.createElement(m._2, null, r.createElement(p.a, {
                        channelLogin: this.props.hostedChannelLogin,
                        hostChannelID: this.props.hostChannelID,
                        hostChannelLogin: this.props.hostChannelLogin,
                        "data-a-target": "hosting-ui-subscribe-button"
                    }))), r.createElement(l.a, null, r.createElement(m.v, {
                        ariaLabel: Object(o.d)("More options", "HostingUI"),
                        overlay: !0,
                        icon: m._16.More,
                        onClick: this.handleReportHosterClick,
                        "data-a-target": "hosting-ui-more-button"
                    }), r.createElement(m.p, {
                        direction: m.q.TopRight,
                        "data-a-target": "hosting-ui-more-balloon"
                    }, r.createElement(m._2, {
                        padding: {
                            y: 1
                        }
                    }, r.createElement(m._0, {
                        onClick: this.handleReportHosterClick,
                        "data-a-target": "hosting-ui-report-button"
                    }, r.createElement(m._2, {
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, Object(o.d)("Report {hostChannelDisplayName}", {
                        hostChannelDisplayName: this.props.hostChannelDisplayName
                    }, "VideoPlayerHostingUI")))))))))
                }, t
            }(r.Component)),
            g = n("RH2O"),
            f = n("2KeS"),
            v = n("+xm8"),
            b = n("V5M+"),
            k = n("f2i/"),
            y = n("Aj/L"),
            S = n("oSFp");
        var _, N = Object(g.b)(function(e) {
                return {
                    isLoggedIn: Object(y.d)(e)
                }
            }, function(e) {
                return Object(f.b)({
                    login: function() {
                        return Object(k.f)(v.a.ReportHoster)
                    },
                    showReportUserModal: function(e) {
                        var t = i.__rest(e, []);
                        return Object(b.d)(S.a, t)
                    }
                }, e)
            })(Object(a.f)(h)),
            E = n("7enT"),
            C = n("HW6M"),
            T = n("BwgW"),
            w = n("knr3"),
            O = n("OAwv"),
            I = n("eBiB"),
            D = n("JpYe"),
            P = n("ZVME"),
            F = n("CSlQ"),
            R = n("L3z0"),
            x = n("5MsU"),
            L = (n("4NZK"), n("Ryxq"));
        ! function(e) {
            e.AnimatedThumbnails = "animated_thumbnails", e.Embed = "embed", e.Feed = "feed", e.Frontpage = "frontpage", e.Site = "site"
        }(_ || (_ = {}));
        var U = {
            allowfullscreen: !0,
            autoplay: !0,
            branding: !1,
            channelInfo: !1,
            controls: !0,
            height: "100%",
            playsinline: !0,
            player: _.Site,
            showInfo: !1,
            showtheatre: !1,
            trackingProperties: {
                client_app: "twilight"
            },
            width: "100%",
            oauth_token: ""
        };

        function M() {
            return !!window.Twitch && !!window.Twitch.Player
        }
        var A = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.logger = o.i.withCategory("video-player"), n.checkPlayerDependencyStatus = function() {
                        M() ? (n.setState({
                            canInitializePlayer: !0
                        }), n.checkPlayerDependencyAnimationFrame = null) : n.checkPlayerDependencyAnimationFrame = requestAnimationFrame(n.checkPlayerDependencyStatus)
                    }, n.attachRef = function(e) {
                        return n.playerRef = e
                    }, n.onMetadataLoaded = function() {
                        var e = n.player && n.player.getSessionInfo();
                        e && (n.logger.debug("Got player session info from player instance", e), o.m.setVideoPlayerTrackingData({
                            broadcastID: e.broadcastId,
                            playSessionID: e.playSessionId
                        }))
                    }, n.onOpenStream = function() {
                        if (n.props.playerTypeOverride === _.Frontpage && n.player)
                            if (n.props.channelLogin) o.n.history.push("/" + n.props.channelLogin);
                            else if (n.props.vodID) {
                            var e = Math.floor(n.player.getCurrentTime());
                            o.n.history.push("/videos/" + n.props.vodID + "?t=" + Object(L.a)(e))
                        } else n.props.collectionID && o.n.history.push("/collections/" + n.props.collectionID)
                    }, n.onPlayerReady = function() {
                        n.player && (n.logger.debug("Ready"), n.props.latencyTracking.reportInteractive(), n.hasPlayed = !1, n.props.latencyTracking.reportCustomEvent(n.playerLoaded), n.setState({
                            playerInitialized: !0
                        }, function() {
                            return n.updatePlayerTrackingData(n.props.hostChannel)
                        }))
                    }, n.onPlayerPlay = function() {
                        n.logger.debug("Play"), n.reportPlayerPlayed(), n.lastPausedProp = !1, n.props.onPauseToggled && n.props.onPauseToggled(!1)
                    }, n.onPlayerPlaying = function() {
                        n.logger.debug("Playing"), n.lastPausedProp = !1, n.props.onPauseToggled && n.props.onPauseToggled(!1)
                    }, n.onPause = function() {
                        n.logger.debug("Pause"), n.lastPausedProp = !0, n.props.onPauseToggled && n.props.onPauseToggled(!0)
                    }, n.onStreamStatusOnline = function() {
                        n.props.onStreamStatusChange && n.props.onStreamStatusChange(x.a.Online)
                    }, n.onStreamStatusOffline = function() {
                        n.props.onStreamStatusChange && n.props.onStreamStatusChange(x.a.Offline)
                    }, n.onTheatreChange = function(e) {
                        e ? (n.logger.debug("Theatre Entered"), n.props.enableTheatreMode && !n.props.theatreModeEnabled && n.props.enableTheatreMode()) : (n.logger.debug("Theatre Exited"), n.props.disableTheatreMode && n.props.theatreModeEnabled && n.props.disableTheatreMode())
                    }, n.onFullScreenChange = function() {
                        n.player && (n.logger.debug("Fullscreen change", n.player.fullscreen), n.player.fullscreen !== n.state.isFullScreen && n.setState({
                            isFullScreen: n.player.fullscreen
                        }))
                    }, n.onSeek = function() {
                        n.props.onSeek && n.player && n.props.onSeek(n.player.getCurrentTime())
                    }, n.onTimeUpdate = function() {
                        n.props.onVideoTimeChange && n.player && n.props.onVideoTimeChange(n.player.getCurrentTime())
                    }, n.onTransitionToCollectionVod = function(e) {
                        if (n.props.onNavigationRequest) {
                            var t = {};
                            e.vodId && (t.videoID = Object(I.a)(e.vodId)), e.collectionId && (t.collectionID = e.collectionId), n.props.onNavigationRequest(t)
                        }
                    }, n.onTransitionToRecommendedVod = function(e) {
                        if (n.props.onNavigationRequest) {
                            var t = {};
                            e.vodId && (t.videoID = Object(I.a)(e.vodId)), n.props.onNavigationRequest(t)
                        }
                    }, n.onPersistentPlayerToggled = function() {
                        n.props.togglePersistentPlayer && n.props.togglePersistentPlayer()
                    }, n.updatePlayerTrackingData = function(e) {
                        if (n.state.playerInitialized && n.player) {
                            var t = o.m.getLastPageview();
                            t ? n.logger.debug("Tracking data updated.", {
                                pageviewProperties: t,
                                hostChannel: e
                            }) : n.logger.debug("pageviewProperties not found; only hosting status updated", {
                                pageviewProperties: t,
                                hostChannel: e
                            }), n.player.setTrackingProperties(i.__assign({}, t, {
                                host_channel: e
                            }))
                        }
                    }, n.updatePlayerType = function(e) {
                        var t = e || U.player;
                        n.player && n.playerType !== t && (n.player.setPlayerType(t), n.playerType = t)
                    }, n.maybeRecordClip = function() {
                        n.player && n.state.playerInitialized && n.player.recordClip()
                    }, n.playerCreated = n.registerCreatedEvent(), n.playerLoaded = n.registerLoadedEvent(), n.playerPlayed = n.registerPlayedEvent(), n.state = {
                        canInitializePlayer: M(),
                        playerInitialized: !1,
                        isFullScreen: !1
                    }, n.playerType = t.playerTypeOverride || U.player, n.lastSetChannel = t.channelLogin, t.instanceRef && t.instanceRef(n), n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    if (this.props.latencyTracking.reportCustomEvent(this.playerCreated), this.bindHotKeys(), this.state.canInitializePlayer ? this.initializePlayer() : this.checkPlayerDependencyAnimationFrame = window.requestAnimationFrame(this.checkPlayerDependencyStatus), o.m.eventEmitter.addListener(c.SpadeEventType.Pageview, function() {
                            return e.updatePlayerTrackingData(e.props.hostChannel)
                        }), window.__playerScriptChunk && !t.tagInjected) {
                        this.logger.debug("Loading player chunk after page loaded");
                        var n = document.createElement("script");
                        n.async = !0, n.crossOrigin = "anonymous", n.src = window.__playerScriptChunk, document.body.appendChild(n);
                        var i = document.createElement("link");
                        i.href = window.__playerStyleChunk, i.media = "screen", i.rel = "stylesheet", i.type = "text/css", document.body.appendChild(i), t.tagInjected = !0
                    }
                }, t.prototype.componentWillUpdate = function(e, t) {
                    if (this.state.canInitializePlayer || !t.canInitializePlayer) {
                        if (t.canInitializePlayer && t.playerInitialized) {
                            if (this.updatePlayerTrackingData(e.hostChannel), this.updatePlayerType(e.playerTypeOverride), this.player && e.theatreModeEnabled !== this.player.getTheatre() && this.player.setTheatre(e.theatreModeEnabled), this.player && e.miniModeEnabled !== this.props.miniModeEnabled && this.player.setMiniPlayerMode(!!e.miniModeEnabled), this.player && e.paused !== this.lastPausedProp && (e.paused ? this.player.pause() : e.paused || this.player.play(), this.lastPausedProp = e.paused), this.player && e.channelLogin && e.channelLogin !== this.lastSetChannel) return this.logger.debug("Setting Channel: ", e.channelLogin), this.player.setChannel(e.channelLogin), this.lastSetChannel = e.channelLogin, void o.m.setVideoPlayerTrackingData({
                                vodID: void 0
                            });
                            var n = e.collectionID && this.props.collectionID !== e.collectionID,
                                i = e.vodID && this.props.vodID !== e.vodID;
                            if (n || i) {
                                var r = e.vodID ? Object(D.b)(e.vodID) : "";
                                if ("" !== r && o.m.setVideoPlayerTrackingData({
                                        vodID: e.vodID
                                    }), !this.player) return;
                                n || e.collectionID && i ? this.player.setCollection(e.collectionID, r, e.nextVideoOffset) : this.player.setVideo(r, e.nextVideoOffset)
                            } else void 0 !== e.nextVideoOffset && e.nextVideoOffset >= 0 && this.props.nextVideoOffset !== e.nextVideoOffset && this.player && this.player.setCurrentTime(e.nextVideoOffset)
                        }
                    } else this.initializePlayer()
                }, t.prototype.render = function() {
                    var e = C("video-player", {
                        "video-player--theatre": this.props.theatreModeEnabled,
                        "video-player--logged-in": this.props.isLoggedIn,
                        "video-player--fullscreen": this.state.isFullScreen
                    });
                    return r.createElement("div", {
                        className: C(e),
                        "data-test-selector": "video-player"
                    }, r.createElement("div", {
                        className: "video-player__container",
                        ref: this.attachRef
                    }))
                }, t.prototype.componentWillUnmount = function() {
                    this.props.latencyTracking.reportInteractive(), this.unbindHotKeys(), this.checkPlayerDependencyAnimationFrame && cancelAnimationFrame(this.checkPlayerDependencyAnimationFrame), this.maybeDetachFromWindow(), this.props.onDestroy && this.props.onDestroy(), this.player && (o.m.eventEmitter.removeListener(c.SpadeEventType.Pageview, this.updatePlayerTrackingData), this.player.removeEventListener(x.a.PlayerReady, this.onPlayerReady), this.player.removeEventListener(x.a.Online, this.onStreamStatusOnline), this.player.removeEventListener(x.a.Offline, this.onStreamStatusOffline), this.player.removeEventListener(R.a.Ended, this.onStreamStatusOffline), this.player.removeEventListener(R.a.Play, this.onPlayerPlay), this.player.removeEventListener(R.a.Playing, this.onPlayerPlaying), this.player.removeEventListener(x.a.TheatreChange, this.onTheatreChange), this.player.removeEventListener(x.a.TransitionToCollectionVOD, this.onTransitionToCollectionVod), this.player.removeEventListener(x.a.FullscreenChange, this.onFullScreenChange), this.player.removeEventListener(R.a.Seeked, this.onSeek), this.player.removeEventListener(R.a.TimeUpdate, this.onTimeUpdate), this.player.removeEventListener(x.a.OpenStream, this.onOpenStream), this.player.removeEventListener(R.a.Pause, this.onPause), this.player.removeEventListener(x.a.PersistenPlayerToggle, this.onPersistentPlayerToggled), this.player.removeEventListener(R.a.LoadedMetadata, this.onMetadataLoaded), T.extensionService.unregisterPlayer(), this.player.destroy()), o.m.setVideoPlayerTrackingData({
                        vodID: void 0
                    })
                }, t.prototype.trackMiniPlayerAction = function(e, t) {
                    this.player && this.state.playerInitialized && this.player.trackMiniPlayerAction(e, t)
                }, t.prototype.initializePlayer = function() {
                    var e = i.__assign({}, U, {
                        showtheatre: !this.props.disableTheatreButton,
                        autoplay: !this.props.paused
                    });
                    this.props.playerTypeOverride && (e.player = this.props.playerTypeOverride, this.playerType = this.props.playerTypeOverride), this.props.channelLogin && (e.channel = this.props.channelLogin, this.lastSetChannel = this.props.channelLogin), this.props.collectionID && (e.collection = this.props.collectionID), this.props.vodID && (e.video = Object(D.b)(this.props.vodID), o.m.setVideoPlayerTrackingData({
                        vodID: this.props.vodID
                    })), void 0 !== this.props.nextVideoOffset && this.props.nextVideoOffset >= 0 && (e.time = Object(L.a)(this.props.nextVideoOffset)), this.lastPausedProp = this.props.paused, e.oauth_token = this.props.authToken || "", this.logger.debug("Initializing", e);
                    var t = new window.Twitch.Player(this.playerRef, e);
                    this.player = t, t.addEventListener(x.a.PlayerReady, this.onPlayerReady), t.addEventListener(x.a.Online, this.onStreamStatusOnline), t.addEventListener(x.a.Offline, this.onStreamStatusOffline), t.addEventListener(R.a.Ended, this.onStreamStatusOffline), t.addEventListener(R.a.Play, this.onPlayerPlay), t.addEventListener(R.a.Playing, this.onPlayerPlaying), t.addEventListener(R.a.Seeked, this.onSeek), t.addEventListener(R.a.TimeUpdate, this.onTimeUpdate), t.addEventListener(x.a.TheatreChange, this.onTheatreChange), t.addEventListener(x.a.FullscreenChange, this.onFullScreenChange), t.addEventListener(x.a.TransitionToCollectionVOD, this.onTransitionToCollectionVod), t.addEventListener(x.a.TransitionToRecommendedVOD, this.onTransitionToRecommendedVod), t.addEventListener(x.a.OpenStream, this.onOpenStream), t.addEventListener(R.a.Pause, this.onPause), t.addEventListener(x.a.PersistenPlayerToggle, this.onPersistentPlayerToggled), t.addEventListener(R.a.LoadedMetadata, this.onMetadataLoaded), T.extensionService.registerPlayer(this.player), T.extensionService.setPlayerWindow(window), this.props.onInit && this.props.onInit(t), this.maybeAttachToWindow(this.props)
                }, t.prototype.registerCreatedEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent({
                        benchmark: 1e3,
                        group: P.a.Player,
                        key: P.b.PlayerCreated,
                        label: P.c.Created
                    })
                }, t.prototype.registerLoadedEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent({
                        benchmark: 2500,
                        group: P.a.Player,
                        key: P.b.PlayerLoaded,
                        label: P.c.Init
                    })
                }, t.prototype.registerPlayedEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent({
                        benchmark: 4e3,
                        group: P.a.Player,
                        key: P.b.PlayerPlayed,
                        label: P.c.FirstFrame
                    })
                }, t.prototype.reportPlayerPlayed = function() {
                    this.hasPlayed || (this.hasPlayed = !0, this.playerPlayed && this.props.latencyTracking.reportCustomEvent(this.playerPlayed))
                }, t.prototype.maybeAttachToWindow = function(e) {
                    O.parse(window.location.search).attachPlayer && e.attachToWindow && this.player && (window.player = this.player)
                }, t.prototype.maybeDetachFromWindow = function() {
                    window.player = void 0
                }, t.prototype.bindHotKeys = function() {
                    w.bind("alt+x", this.maybeRecordClip)
                }, t.prototype.unbindHotKeys = function() {
                    w.unbind("alt+x")
                }, t.tagInjected = !1, t
            }(r.Component),
            j = Object(F.d)("VideoPlayer")(A);
        var W = Object(g.b)(function(e) {
            return {
                theatreModeEnabled: e.ui.theatreModeEnabled,
                isLoggedIn: Object(y.d)(e),
                authToken: Object(y.a)(e)
            }
        }, function(e) {
            return Object(f.b)({
                enableTheatreMode: E.o,
                disableTheatreMode: E.n,
                togglePersistentPlayer: E.t
            }, e)
        })(j);

        function B(e, t, n) {
            if (e.collectionID || !e.videoID)
                if (e.collectionID && e.videoID) {
                    if (n && n.currentVideoID && n.currentCollectionID && n.currentVideoID === e.videoID && n.currentCollectionID === e.collectionID) return;
                    t.push("/videos/" + e.videoID + "?collection=" + e.collectionID)
                } else !e.collectionID || e.videoID ? o.i.withCategory("video-player").error(new Error("No collection or video specified from the emitted player transition event."), "No collection or video specified from the emitted player transition event.") : t.push("/collections/" + e.collectionID);
            else t.push("/videos/" + e.videoID)
        }
        n.d(t, !1, function() {
            return "hosting-ui-report-button"
        }), n.d(t, !1, function() {
            return "hosting-ui-more-balloon"
        }), n.d(t, !1, function() {
            return "hosting-ui-more-button"
        }), n.d(t, !1, function() {
            return "hosting-ui-channel-name"
        }), n.d(t, !1, function() {
            return "video-player-hosting-ui__header"
        }), n.d(t, !1, function() {
            return "video-player-hosting-ui__footer"
        }), n.d(t, !1, function() {
            return h
        }), n.d(t, "a", function() {
            return N
        }), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "b", function() {
            return _
        }), n.d(t, !1, function() {}), n.d(t, "c", function() {
            return W
        }), n.d(t, "d", function() {
            return B
        })
    },
    h4Qz: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Whispers_Thread_WhisperThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "cursor"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "whisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "userLastMessageRead"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "sentAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "participants"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "chatColor"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "profileImageURL"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "width"
                                            },
                                            value: {
                                                kind: "IntValue",
                                                value: "70"
                                            }
                                        }],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "spamInfo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "lastMarkedNotSpamAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "likelihood"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isMuted"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isArchived"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "messages"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "20"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "after"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "cursor"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "content"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "content"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "emotes"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "emoteID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "setID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "from"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "to"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "from"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "sentAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "editedAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "deletedAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "unreadMessagesCount"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 449
            }
        };
        n.loc.source = {
            body: "query Whispers_Thread_WhisperThread($id: ID! $cursor: Cursor) {\nwhisperThread(id: $id) {\nid\nuserLastMessageRead {\nid\nsentAt\n}\nparticipants {\nid\nchatColor\ndisplayName\nprofileImageURL(width: 70)\nlogin\n}\nspamInfo {\nlastMarkedNotSpamAt\nlikelihood\n}\nisMuted\nisArchived\nmessages(first: 20 after: $cursor) {\nedges {\ncursor\nnode {\nid\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n}\n}\nfrom {\nid\n}\nsentAt\neditedAt\ndeletedAt\n}\n}\n}\nunreadMessagesCount\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    hdYS: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            r = n("2KeS"),
            a = n("+xm8"),
            o = n("f2i/"),
            s = n("Aj/L"),
            l = n("TToO"),
            c = n("GiK3"),
            d = n("6sO2"),
            u = n("+Znq"),
            p = n("7vx8"),
            m = n("oIkB"),
            h = n("2BvQ"),
            g = n("xrVp"),
            f = n("YugT"),
            v = {
                Channel: "channel"
            };
        var b = n("vH/s"),
            k = n("CSlQ"),
            y = n("Odds"),
            S = n("VNvG"),
            _ = (n("3ydF"), n("SUA7")),
            N = n("x4k6"),
            E = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isFollowing: !1,
                        showDropdown: !1,
                        disableNotifications: !0
                    }, t.userDataLoaded = function() {
                        return t.props.data && !t.props.data.loading && !t.props.data.error && t.props.data.user
                    }, t.toggleFollowing = function() {
                        var e;
                        t.state.isFollowing ? (t.unfollowUser(), e = b.SpadeEventType.Unfollow) : (t.followUser(), e = b.SpadeEventType.Follow);
                        var n = t.getFollowData();
                        n && function(e, t) {
                            l.__awaiter(this, void 0, void 0, function() {
                                var n, i, r, a, o, s, c, u, p, m;
                                return l.__generator(this, function(l) {
                                    switch (l.label) {
                                        case 0:
                                            if (n = null, i = null, r = null, a = null, o = null, !t.channelID) return [3, 5];
                                            l.label = 1;
                                        case 1:
                                            return l.trys.push([1, 3, , 4]), [4, d.n.apollo.client.query({
                                                query: f,
                                                variables: {
                                                    id: t.channelID
                                                }
                                            })];
                                        case 2:
                                            return a = l.sent(), [3, 4];
                                        case 3:
                                            return c = l.sent(), d.i.error(c, "Failed to make query for channel info in FollowEvent reporting.", {
                                                channelID: t.channelID
                                            }), [3, 4];
                                        case 4:
                                            (r = a && a.data && a.data.user) ? o = r.hosting.stream && r.hosting.stream.game ? r.hosting.stream.game.name : r.stream && r.stream.game && r.stream.game.name: d.i.error(new Error("GraphQL empty response"), "Query for channel info in FollowEvent reporting return no data.", {
                                                channelID: t.channelID
                                            }), l.label = 5;
                                        case 5:
                                            if (!(u = d.m.getVideoPlayerTrackingData().vodID)) return [3, 10];
                                            l.label = 6;
                                        case 6:
                                            return l.trys.push([6, 8, , 9]), [4, d.n.apollo.client.query({
                                                query: h,
                                                variables: {
                                                    id: u
                                                }
                                            })];
                                        case 7:
                                            return n = l.sent(), [3, 9];
                                        case 8:
                                            return p = l.sent(), d.i.error(p, "Failed to make query for VOd info in FollowEvent reporting.", {
                                                currentVODID: u
                                            }), [3, 9];
                                        case 9:
                                            (i = n && n.data && n.data.video) ? s = Object(g.a)(i.broadcastType): (s = null, d.i.error(new Error("GraphQL empty response"), "Query for video info in FollowEvent reporting return no data.", {
                                                currentVODID: u
                                            })), l.label = 10;
                                        case 10:
                                            return m = {
                                                channel: t.channelLogin,
                                                channel_id: t.channelID,
                                                channel_game: o,
                                                cta_visible: d.m.getVideoPlayerTrackingData().followCTAVisible,
                                                host_channel: t.hostChannelLogin,
                                                host_channel_id: t.hostChannelID,
                                                game: t.game,
                                                partner: r ? r.isPartner : null,
                                                src: t.src,
                                                vod_id: u,
                                                vod_type: s
                                            }, d.m.track(e, m), [2]
                                    }
                                })
                            })
                        }(e, {
                            channelLogin: n.user.login,
                            channelID: n.user.id,
                            hostChannelLogin: t.props.hostChannelLogin,
                            hostChannelID: t.props.hostChannelID,
                            src: v.Channel
                        }), t.setState(function(e) {
                            return {
                                isFollowing: !e.isFollowing,
                                disableNotifications: !1
                            }
                        })
                    }, t.followUser = function() {
                        var e = t.getFollowData();
                        if (t.props.followUser && e) {
                            t.setState({
                                showDropdown: !0
                            });
                            var n = l.__assign({}, Object(m.a)({
                                disableNotifications: !1,
                                targetID: e.user.id
                            }), {
                                optimisticResponse: {
                                    followUser: {
                                        __typename: "FollowUserPayload",
                                        follow: {
                                            disableNotifications: !1,
                                            __typename: "Follow"
                                        }
                                    }
                                }
                            });
                            t.props.followUser(n).then(function(e) {
                                Object(m.d)(N, {
                                    login: t.props.channelLogin
                                }, function(t) {
                                    return t.user.self.follower.disableNotifications = e.data.followUser.follow.disableNotifications, t
                                })
                            })
                        }
                    }, t.unfollowUser = function() {
                        var e = t.getFollowData();
                        if (t.props.unfollowUser && e) {
                            var n = l.__assign({}, Object(m.a)({
                                targetID: e.user.id
                            }), {
                                optimisticResponse: {
                                    unfollowUser: {
                                        __typename: "UnfollowUserPayload",
                                        follow: {
                                            disableNotifications: null,
                                            __typename: "Follow"
                                        }
                                    }
                                }
                            });
                            t.props.unfollowUser(n).then(function() {
                                Object(m.d)(N, {
                                    login: t.props.channelLogin
                                }, function(e) {
                                    return e.user.self.follower.disableNotifications = null, e
                                })
                            })
                        }
                    }, t.toggleNotificationsEnabled = function() {
                        var e = t.getFollowData();
                        if (t.props.followUser && e) {
                            var n = l.__assign({}, Object(m.a)({
                                disableNotifications: !t.state.disableNotifications,
                                targetID: e.user.id
                            }), {
                                optimisticResponse: {
                                    followUser: {
                                        __typename: "FollowUserPayload",
                                        follow: {
                                            disableNotifications: !t.state.disableNotifications,
                                            __typename: "Follow"
                                        }
                                    }
                                }
                            });
                            t.props.followUser(n).then(function(e) {
                                Object(m.d)(N, {
                                    login: t.props.channelLogin
                                }, function(t) {
                                    return t.user.self.follower.disableNotifications = e.data.followUser.follow.disableNotifications, t
                                })
                            }), t.setState(function(e) {
                                return {
                                    disableNotifications: !e.disableNotifications
                                }
                            })
                        }
                    }, t.getFollowData = function() {
                        return t.props.followData ? t.props.followData : t.props.data
                    }, t
                }
                return l.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.props.channelLogin && !this.userDataLoaded() || !this.props.updateContainerWidth || this.props.updateContainerWidth(), this.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (e.data && !e.data.loading && !e.data.error || this.props.followData) {
                        var t = e.data || this.props.followData;
                        this.setState({
                            isFollowing: !!t && (t.user.self && null !== t.user.self.follower.disableNotifications),
                            disableNotifications: !t || t.user.self && t.user.self.follower.disableNotifications
                        })
                    }
                }, t.prototype.render = function() {
                    var e = this.props.isHostedFollow && this.props.channelName ? Object(d.d)("Follow {username}", {
                        username: this.props.channelName
                    }, "FollowButton") : Object(d.d)("Follow", "FollowButton");
                    if (!this.props.isLoggedIn) return c.createElement(y.u, l.__assign({
                        tabIndex: this.props.tabIndex,
                        ariaLabel: e,
                        icon: this.props.hideIcon ? void 0 : y._16.Heart,
                        onClick: this.props.login,
                        blurAfterClick: this.props.blurAfterClick,
                        "data-a-target": "follow-button"
                    }, Object(y._53)(this.props), {
                        size: this.props.size
                    }), e);
                    if (this.props.showLoadingPlaceholder && (!this.props.data || this.props.data.loading)) return c.createElement(y._8, {
                        width: 70,
                        height: 30
                    });
                    if (!this.props.followUser || !this.props.unfollowUser || !this.props.followData && (!this.props.data || this.props.data.loading || this.props.data.error || this.props.data.user.id === this.props.data.currentUser.id)) return null;
                    var t = this.state.disableNotifications ? Object(d.d)("Opt in to notifications to receive updates on this channel's activity, including when they go live.", "FollowButton") : Object(d.d)("You will be notified on this channel's activity, including when they go live.", "FollowButton");
                    if (!this.state.isFollowing) return c.createElement(y.u, l.__assign({
                        blurAfterClick: this.props.blurAfterClick,
                        ariaLabel: e,
                        size: this.props.size,
                        "data-a-target": "follow-button",
                        "data-test-selector": "follow-button",
                        icon: this.props.hideIcon ? void 0 : y._16.Heart,
                        onClick: this.toggleFollowing
                    }, Object(y._53)(this.props), {
                        tabIndex: this.props.tabIndex
                    }), e);
                    if (this.props.hideWhenFollowing) return null;
                    var n = this.props.balloonDirection ? this.props.balloonDirection : y.q.BottomRight,
                        i = this.getFollowData(),
                        r = i ? i.user.displayName : "";
                    return c.createElement(y._2, {
                        display: y.N.Flex,
                        className: "follow-btn"
                    }, c.createElement(y._2, null, c.createElement(y.v, {
                        ariaLabel: Object(d.d)("Unfollow", "FollowButton"),
                        "data-a-target": "unfollow-button",
                        "data-test-selector": "unfollow-button",
                        icon: y._16.Heart,
                        onClick: this.toggleFollowing,
                        statusAlertIcon: y._16.Unheart
                    })), c.createElement(u.a, {
                        display: y.N.InlineFlex,
                        openByDefault: this.state.showDropdown
                    }, c.createElement("button", {
                        tabIndex: this.props.tabIndex,
                        "aria-label": Object(d.d)("Dropdown", "FollowButton"),
                        className: "follow-btn__dropdown-toggle",
                        "data-a-target": "follow-dropdown-toggle"
                    }, c.createElement(y._2, {
                        justifyContent: y._1.Center,
                        display: y.N.Flex,
                        alignItems: y.c.Stretch,
                        fullHeight: !0
                    }, c.createElement(y._15, {
                        asset: y._16.GlyphArrDown
                    }))), c.createElement(y.p, {
                        size: y.r.Small,
                        direction: n,
                        "data-a-target": "follow-notifications-balloon"
                    }, c.createElement(y._25, {
                        color: y.I.Base,
                        display: y.N.Flex,
                        flexWrap: y.Q.Wrap,
                        padding: 1
                    }, c.createElement(y._2, {
                        display: y.N.Flex,
                        margin: {
                            bottom: 1
                        }
                    }, c.createElement(y._35, {
                        type: y._40.H6
                    }, Object(d.d)("You are following {followingName}", {
                        followingName: r
                    }, "FollowButton"))), c.createElement(y._2, {
                        display: y.N.Flex,
                        flexWrap: y.Q.NoWrap,
                        padding: {
                            bottom: 1
                        }
                    }, c.createElement(y._2, {
                        display: y.N.Flex,
                        padding: {
                            right: 2
                        }
                    }, c.createElement("span", null, c.createElement(y._35, {
                        type: y._40.H6
                    }, Object(d.d)("Notifications", "FollowButton")))), c.createElement(y._2, {
                        display: y.N.Flex,
                        flexShrink: 0
                    }, c.createElement(y._42, {
                        onChange: this.toggleNotificationsEnabled,
                        checked: !this.state.disableNotifications,
                        "data-a-target": "notifications-toggle"
                    }))), c.createElement(y._2, {
                        display: y.N.InlineFlex,
                        padding: {
                            bottom: 1
                        }
                    }, c.createElement(y._35, {
                        type: y._40.Span,
                        color: y.I.Alt2
                    }, t))))))
                }, t.prototype.reportInteractive = function() {
                    this.props.isLoggedIn ? (!this.props.channelLogin || this.userDataLoaded() || this.props.followData) && this.props.latencyTracking.reportInteractive() : this.props.latencyTracking.reportInteractive()
                }, t = l.__decorate([Object(p.a)(N, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.isLoggedIn || !e.channelLogin || !!e.followData
                    }
                }), Object(p.a)(S, {
                    name: "followUser"
                }), Object(p.a)(_, {
                    name: "unfollowUser"
                }), Object(k.d)("FollowButton")], t)
            }(c.Component);
        var C = Object(i.b)(function(e) {
            return {
                isLoggedIn: Object(s.d)(e)
            }
        }, function(e) {
            return Object(r.b)({
                login: function() {
                    return Object(o.f)(a.a.FollowButton)
                }
            }, e)
        })(E);
        n.d(t, "a", function() {
            return C
        })
    },
    hvzu: function(e, t, n) {
        "use strict";
        var i, r = n("GiK3"),
            a = n("6sO2"),
            o = n("8RKZ"),
            s = n("l21v");
        ! function(e) {
            e[e.Text = 0] = "Text", e[e.Link = 1] = "Link"
        }(i || (i = {}));
        var l = n("Odds");
        t.a = u, n.d(t, "f", function() {
            return p
        }), n.d(t, "e", function() {
            return m
        }), n.d(t, "d", function() {
            return h
        }), n.d(t, "c", function() {
            return g
        }), n.d(t, "b", function() {
            return f
        });
        var c = "whisper-message-part";

        function d(e) {
            var t = function(e) {
                var t = e.split(/\s+/),
                    n = [];
                return t.forEach(function(e, r) {
                    var a = /([^\w@#%\-+=:~])?(?:(https?:\/\/)?(?:[\w@#%\-+=:~]+\.)+[a-z]{2,6}(?:\/[\w./@#%&()\-+=:?~]*)?)([^\w./@#%&()\-+=:?~]|\s|$)/g,
                        o = a.exec(e);
                    if (o) {
                        var s = o.index,
                            l = !1,
                            c = !1,
                            d = o[1];
                        d && (s += 1, /\s/.test(d) || (l = !0)), 0 !== s && n.push({
                            type: i.Text,
                            content: (c ? " " : "") + e.slice(0, s) + (l ? " " : "")
                        }), c = !1;
                        var u = a.lastIndex,
                            p = o[3];
                        p && (u -= 1, /\s/.test(p) || (c = !0));
                        var m = e.slice(s, u);
                        if (m.indexOf("@") > -1 && (-1 === m.indexOf("/") || m.indexOf("@") < m.indexOf("/"))) n.push({
                            type: i.Link,
                            content: {
                                displayText: m,
                                url: "mailto:" + m,
                                shouldOpenInNewTab: !1
                            }
                        });
                        else {
                            var h = (o[2] ? "" : "https://") + e.slice(s, u);
                            n.push({
                                type: i.Link,
                                content: {
                                    displayText: e.slice(s, u),
                                    shouldOpenInNewTab: !0,
                                    url: h
                                }
                            })
                        }
                        var g = e.slice(u),
                            f = "";
                        r < t.length - 1 && (f = " "), g && n.push({
                            type: i.Text,
                            content: (c ? " " : "") + g + f
                        })
                    } else {
                        var v = n.length && n[n.length - 1];
                        if (f = "", r < t.length - 1 && (f = " "), v && v.type === i.Text) v.content += e + f;
                        else {
                            var b = "";
                            r && (b = " "), n.push({
                                type: i.Text,
                                content: b + e + f
                            })
                        }
                    }
                }), n
            }(e);
            return t.reduce(function(e, n, a) {
                if (n.type === i.Text) e.push(n.content);
                else if (n.type === i.Link) {
                    t[a - 1] && t[a - 1].type === i.Link && e.push(" "), e.push(r.createElement("a", {
                        key: a,
                        href: n.content.url,
                        target: "__blank"
                    }, n.content.displayText))
                }
                return e
            }, [])
        }

        function u(e, t, n) {
            var i = [],
                u = 0,
                p = Object(s.d)(e);
            if (t.forEach(function(t) {
                    var n = t.from,
                        a = t.to,
                        m = {
                            themed: !1,
                            sources: {
                                "1x": Object(s.e)("" + t.emoteID, 1),
                                "2x": Object(s.e)("" + t.emoteID, 2),
                                "4x": Object(s.e)("" + t.emoteID, 4)
                            }
                        };
                    if (n > u) {
                        var h = p ? p.slice(u, n).join("") : e.slice(u, n);
                        i.push(r.createElement("span", {
                            key: "str-" + u,
                            "data-a-target": c,
                            className: "thread-message__message--part"
                        }, d(h)))
                    }
                    var g = p ? p.slice(n, a + 1).join("") : e.slice(n, a + 1);
                    i.push(r.createElement(o.a, {
                        key: "emote-" + u,
                        tooltipDirection: l._45.Top,
                        className: "thread-message__message--emote",
                        srcSet: m,
                        srcKey: "1x",
                        alt: g
                    })), u = a + 1
                }), u < e.length) {
                var m = p ? p.slice(u, p.length).join("") : e.slice(u, e.length);
                i.push(r.createElement("span", {
                    key: "str-" + u,
                    "data-a-target": c,
                    className: "thread-message__message--part"
                }, d(m)))
            }
            if (n) {
                var h = Object(a.d)("edited", "ThreadMessage"),
                    g = Object(a.d)("{timestamp, date, full} {timestamp, time, long}", {
                        timestamp: new Date(n)
                    }, "ThreadMessage");
                i.push(r.createElement(l.W, {
                    key: "editedAt",
                    margin: {
                        left: 1
                    }
                }, r.createElement(l._35, {
                    type: l._40.Span,
                    className: "thread-message__message--edited",
                    title: g,
                    color: l.I.Alt2
                }, "(" + h + ")")))
            }
            return i
        }
        var p = function(e) {
                var t = u(e.content, e.emotes, e.editedAt);
                if (e.deletedAt) return null;
                var n = e.from && e.from.chatColor || "",
                    i = e.from && e.from.displayName || r.createElement(l._35, {
                        type: l._40.Span,
                        italic: !0
                    }, Object(a.d)("Unknown", "ThreadMessage"));
                return r.createElement(l._2, {
                    padding: {
                        x: 1,
                        y: .5
                    }
                }, r.createElement("span", {
                    className: "thread-message__message--user-name",
                    "data-a-target": "whisper-message-name",
                    style: {
                        color: n
                    }
                }, i), r.createElement("span", null, ": "), t)
            },
            m = function() {
                return r.createElement(l._2, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, Object(a.d)("Please don't share passwords or personal information.", "whispers"))
            },
            h = function(e) {
                var t = new Date,
                    n = Object(a.d)("Today, {timestamp, time, medium}", {
                        timestamp: e.timestamp
                    }, "ThreadMessage"),
                    i = Object(a.d)("{timestamp, time, medium}", {
                        timestamp: e.timestamp
                    }, "ThreadMessage"),
                    o = e.timestamp.toDateString() === t.toDateString() ? n : i;
                return r.createElement(l._2, {
                    padding: {
                        y: 1
                    },
                    textAlign: l._36.Center
                }, "" + o)
            },
            g = function(e) {
                return r.createElement(l._2, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, r.createElement(l._35, {
                    type: l._40.Span,
                    color: l.I.Alt2
                }, e.content))
            },
            f = function() {
                return r.createElement(l._2, {
                    textAlign: l._36.Center,
                    padding: {
                        y: .5
                    }
                }, Object(a.d)("New Whispers", "whispers"))
            }
    },
    iOr9: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("6sO2"),
            o = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        assignmentDetermined: !1,
                        assignment: ""
                    }, t.logger = a.n.logger.withCategory("component-experiment"), t.didUnmount = !1, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return i.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, a.n.experiments.getAssignment(this.props.name, this.props.channel ? {
                                        channel: this.props.channel
                                    } : {})];
                                case 1:
                                    return e = t.sent(), this.didUnmount ? [2] : (e && this.props.assignments[e] ? this.logger.debug("Displaying component for experiment", {
                                        name: this.props.name,
                                        assignment: e
                                    }) : this.logger.debug("Displaying fallback component for experiment", {
                                        name: this.props.name,
                                        assignment: e
                                    }), this.setState({
                                        assignment: e,
                                        assignmentDetermined: !0
                                    }), [2])
                            }
                        })
                    })
                }, t.prototype.componentWillUnmount = function() {
                    this.didUnmount = !0
                }, t.prototype.render = function() {
                    if (!this.state.assignmentDetermined) return this.props.loader();
                    if (this.props.assignments[this.state.assignment]) {
                        var e = this.props.assignments[this.state.assignment]();
                        return "string" == typeof e ? (window.location.replace(e), null) : e
                    }
                    return this.props.assignments.fallback()
                }, t
            }(r.Component);
        n.d(t, "a", function() {
            return o
        })
    },
    iPhu: function(e, t, n) {
        "use strict";
        var i, r = n("TToO"),
            a = n("GiK3"),
            o = n("6sO2"),
            s = n("Odds"),
            l = (n("Di3n"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        isError: !1,
                        options: null,
                        hovering: !1
                    }, n.logger = o.n.logger.withCategory("user-card-layer"), n.clearTimeoutAndRun = function(e, t) {
                        void 0 === t && (t = 400), n.displayTimeout && (clearTimeout(n.displayTimeout), n.displayTimeout = 0), n.displayTimeout = setTimeout(function() {
                            e(), n.displayTimeout = 0
                        }, t)
                    }, n.setRef = function(e) {
                        n.removeEventListeners(), n.addEventListeners(e), n.ref = e
                    }, n.addEventListeners = function(e) {
                        e && (e.addEventListener("mouseenter", n.handleMouseEnter, !0), e.addEventListener("mouseleave", n.handleMouseLeave))
                    }, n.removeEventListeners = function() {
                        n.ref && (n.ref.removeEventListener("mouseenter", n.handleMouseEnter), n.ref.removeEventListener("mouseleave", n.handleMouseLeave))
                    }, n.handleMouseEnter = function() {
                        n.setState({
                            hovering: !0
                        })
                    }, n.handleMouseLeave = function() {
                        n.setState({
                            hovering: !1
                        }, function() {
                            n.displayTimeout || n.hideUserCard()
                        })
                    }, i = n, n
                }
                return r.__extends(t, e), t.prototype.componentDidCatch = function(e, t) {
                    var n = this;
                    this.setState({
                        isError: !0
                    }, function() {
                        n.logger.error(e, "A unhandled exception occurred in the component hierarchy", {
                            info: t
                        })
                    })
                }, t.prototype.componentDidUpdate = function() {
                    this.state.options || this.removeEventListeners()
                }, t.prototype.render = function() {
                    if (this.state.isError) return null;
                    var e = null;
                    if (this.state.options) {
                        var t = {
                            left: this.state.options.from.x,
                            top: this.state.options.from.y
                        };
                        e = a.createElement(s.W, {
                            className: "user-card-layer",
                            position: s._9.Fixed
                        }, a.createElement("div", {
                            style: t,
                            ref: this.setRef
                        }, a.createElement(s.p, {
                            direction: this.state.options.direction ? this.state.options.direction : s.q.Right,
                            size: s.r.Large,
                            show: !0,
                            tailOffset: this.state.options.tailOffset
                        }, a.createElement(s._2, {
                            padding: 1
                        }, a.createElement(s._2, {
                            className: "user-card-layer__card-container"
                        }, a.createElement(y, {
                            id: this.state.options.id
                        }))))))
                    }
                    return e
                }, t.prototype.showUserCard = function(e) {
                    var t = this;
                    this.clearTimeoutAndRun(function() {
                        t.setState({
                            options: e
                        })
                    })
                }, t.prototype.hideUserCard = function(e) {
                    var t = this;
                    void 0 === e && (e = {}), this.clearTimeoutAndRun(function() {
                        t.state.hovering && !e.force || t.setState({
                            options: null
                        })
                    }, e.timeout)
                }, t
            }(a.Component)),
            c = n("RH2O"),
            d = n("E9Qg"),
            u = n("hdYS"),
            p = n("5s0/"),
            m = n("7vx8"),
            h = n("O1nh"),
            g = n("CSlQ"),
            f = n("2Hj/"),
            v = n("m4HT"),
            b = (n("rRWv"), n("/OR/")),
            k = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getContent = function() {
                        if (t.props.data && t.props.data.loading) return a.createElement("div", {
                            className: "user-card"
                        }, a.createElement(s._4, {
                            fillContent: !0
                        }));
                        var e = t.getUserData(),
                            n = {
                                backgroundImage: "url(" + (e && e.bannerImageURL || d) + ")",
                                backgroundPosition: "center",
                                backgroundSize: "auto 100%",
                                backgroundRepeat: "repeat"
                            };
                        return a.createElement(s.W, {
                            fullWidth: !0
                        }, a.createElement("div", {
                            className: "user-card",
                            style: n
                        }, a.createElement(s.j, {
                            ratio: s.k.Aspect16x9,
                            overflow: !0
                        }, a.createElement(s._25, {
                            padding: 1,
                            display: s.N.Flex,
                            flexDirection: s.P.Column,
                            fullHeight: !0,
                            fullWidth: !0,
                            background: s.m.Overlay,
                            "data-a-target": "user-card-modal"
                        }, a.createElement(s._2, {
                            alignItems: s.c.Center,
                            className: "info",
                            justifyContent: s._1.Center,
                            display: s.N.Flex,
                            flexDirection: s.P.Column,
                            textAlign: s._36.Center,
                            fullWidth: !0,
                            flexGrow: 1,
                            overflow: s._5.Hidden
                        }, a.createElement(s.l, {
                            src: e.profileImageURL,
                            size: 50,
                            alt: e.displayName
                        }), a.createElement(s._25, {
                            padding: {
                                top: .5
                            },
                            ellipsis: !0,
                            color: s.I.Overlay
                        }, e.displayName), t.getBio()), t.getButtons()))))
                    }, t.getBio = function() {
                        if (t.props.data && (t.props.data.loading || t.props.data.error)) return null;
                        var e = t.getUserData();
                        if (!e.description) return a.createElement(s._25, {
                            ellipsis: !0,
                            color: s.I.Overlay,
                            padding: {
                                top: .5
                            },
                            fullWidth: !0
                        }, Object(o.d)("This user has no bio.", "UserCard"));
                        var n = null;
                        return e && (e.activity || e.availability) && (n = a.createElement(f.b, {
                            availability: e.availability,
                            activity: e.activity
                        })), a.createElement(s._2, {
                            ellipsis: !0,
                            padding: {
                                top: .5
                            },
                            fullWidth: !0
                        }, n && a.createElement(s._35, {
                            color: s.I.Alt
                        }, n), e.description)
                    }, t.getButtons = function() {
                        var e = t.getUserData();
                        return a.createElement(s._2, {
                            className: t.props.showButtonsOnHover ? "user-card__buttons-container" : "",
                            display: s.N.Flex,
                            flexDirection: s.P.Row,
                            justifyContent: s._1.Between,
                            fullWidth: !0,
                            flexGrow: 0
                        }, a.createElement(s._2, {
                            display: s.N.InlineFlex,
                            flexDirection: s.P.Row
                        }, a.createElement(s._2, {
                            padding: {
                                right: 1
                            }
                        }, a.createElement(h.a, {
                            channelID: t.props.id,
                            friendsData: t.props.friendsData
                        })), a.createElement(u.a, {
                            channelLogin: e.login,
                            followData: t.props.followData,
                            balloonDirection: t.props.balloonDirection
                        })), a.createElement(p.a, {
                            threadID: t.getThreadID(),
                            onClick: t.onWhisperButtonClick
                        }))
                    }, t.onWhisperButtonClick = function() {
                        N({
                            force: !0,
                            timeout: 0
                        })
                    }, t.getThreadID = function() {
                        var e = t.getUserData();
                        if (t.props.currentUserID) return Object(v.a)(e.id, t.props.currentUserID)
                    }, t.getUserData = function() {
                        return t.props.userData ? t.props.userData.user : t.props.data.user
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.userData && this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    (this.props.data && !this.props.data.loading && this.props.data.user || this.props.data && this.props.data.error) && this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.props.data && this.props.data.error ? null : this.getContent()
                }, t = r.__decorate([Object(m.a)(b, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.id
                            },
                            skip: e.userData
                        }
                    }
                }), Object(g.d)("UserCard")], t)
            }(a.Component);
        var y = Object(c.b)(function(e) {
                return {
                    currentUserID: e.session.user && "" + e.session.user.id
                }
            })(k),
            S = 214;

        function _(e) {
            if (i && e.ref) {
                var t = function(e) {
                    var t = r.__assign({}, e),
                        n = 0;
                    e.y + S + 20 > window.innerHeight && (t.y = window.innerHeight - S - 20, n = e.y - t.y);
                    return {
                        coords: t,
                        offset: n
                    }
                }(function(e, t) {
                    var n = t.getBoundingClientRect();
                    switch (e) {
                        case s.q.Bottom:
                        case s.q.BottomLeft:
                            return {
                                x: n.left,
                                y: n.bottom
                            };
                        case s.q.BottomCenter:
                            return {
                                x: n.left + n.width / 2,
                                y: n.bottom
                            };
                        case s.q.BottomRight:
                            return {
                                x: n.right,
                                y: n.bottom
                            };
                        case s.q.Left:
                        case s.q.Top:
                        case s.q.TopLeft:
                            return {
                                x: n.left,
                                y: n.top
                            };
                        case s.q.LeftCenter:
                            return {
                                x: n.left,
                                y: n.top + n.height / 2
                            };
                        case s.q.TopCenter:
                            return {
                                x: n.left + n.width / 2,
                                y: n.top
                            };
                        case s.q.TopRight:
                        case s.q.Right:
                            return {
                                x: n.right,
                                y: n.top
                            };
                        case s.q.RightCenter:
                            return {
                                x: n.right,
                                y: n.top + n.height / 2
                            };
                        default:
                            return {
                                x: n.left,
                                y: n.bottom
                            }
                    }
                }(e.direction, e.ref));
                i.showUserCard({
                    id: e.id,
                    direction: e.direction,
                    from: {
                        x: t.coords.x,
                        y: t.coords.y
                    },
                    tailOffset: t.offset
                })
            }
        }

        function N(e) {
            void 0 === e && (e = {}), i && i.hideUserCard(e)
        }
        n.d(t, "b", function() {
            return l
        }), n.d(t, "a", function() {
            return y
        }), n.d(t, "d", function() {
            return _
        }), n.d(t, "c", function() {
            return N
        })
    },
    iXJ1: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "SearchFriendResult_CreateFriendRequest"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CreateFriendRequestInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "createFriendRequest"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 137
            }
        };
        n.loc.source = {
            body: "mutation SearchFriendResult_CreateFriendRequest($input: CreateFriendRequestInput!) {\ncreateFriendRequest(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    iYmP: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FriendButton_CreateFriendRequest"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CreateFriendRequestInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "createFriendRequest"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 131
            }
        };
        n.loc.source = {
            body: "mutation FriendButton_CreateFriendRequest($input: CreateFriendRequestInput!) {\ncreateFriendRequest(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    ieBa: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            r = n("TToO"),
            a = n("GiK3"),
            o = n("rCmJ"),
            s = n("6sO2"),
            l = n("Odds"),
            c = function(e) {
                return a.createElement(l.v, {
                    icon: l._16.Emoticons,
                    ariaLabel: Object(s.d)("Emote picker", "EmotePickerButton"),
                    type: l.w.Secondary,
                    onClick: e.onClick,
                    "data-a-target": "emote-picker-button"
                })
            },
            d = n("P+j/"),
            u = n("CSlQ"),
            p = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasInteracted: !1,
                        isEmotePickerMenuVisible: !1,
                        isEmotePickerButtonVisible: !1
                    }, t.onClickOut = function() {
                        t.setState({
                            isEmotePickerMenuVisible: !1
                        })
                    }, t.onClickEmote = function(e, n) {
                        t.props.onClickEmote && t.props.onClickEmote(e, n)
                    }, t.toggleEmotePicker = function() {
                        t.setState(function(e) {
                            return {
                                isEmotePickerMenuVisible: !e.isEmotePickerMenuVisible
                            }
                        })
                    }, t.onEmotePickerDataLoaded = function(e) {
                        e && t.setState({
                            isEmotePickerButtonVisible: !0
                        })
                    }, t.onInteraction = function() {
                        return t.setState({
                            hasInteracted: !0
                        })
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive(), this.props.inputRef && (this.props.inputRef.addEventListener("mouseenter", this.onInteraction), this.props.inputRef.addEventListener("focus", this.onInteraction))
                }, t.prototype.componentWillUnmount = function() {
                    this.props.inputRef && (this.props.inputRef.removeEventListener("mouseenter", this.onInteraction), this.props.inputRef.removeEventListener("focus", this.onInteraction))
                }, t.prototype.render = function() {
                    var e = null;
                    this.state.isEmotePickerButtonVisible && (e = a.createElement(c, {
                        onClick: this.toggleEmotePicker
                    }));
                    var t = null;
                    this.hasInteractedOrPageload && (t = a.createElement(d.a, {
                        channelOwnerID: this.props.channelOwnerID,
                        onClickEmote: this.onClickEmote,
                        onLoad: this.onEmotePickerDataLoaded,
                        toggleVisibility: this.toggleEmotePicker,
                        visible: this.state.isEmotePickerMenuVisible,
                        direction: this.props.direction
                    }));
                    var n = a.createElement(l._2, r.__assign({
                        className: "emote-picker-and-button"
                    }, this.layoutProps), e, t);
                    return this.props.shouldCloseOnClickOut ? a.createElement(o.a, {
                        onClickOut: this.onClickOut
                    }, n) : n
                }, Object.defineProperty(t.prototype, "hasInteractedOrPageload", {
                    get: function() {
                        return !(!this.props.firstPageLoaded && !this.state.hasInteracted)
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "layoutProps", {
                    get: function() {
                        var e = {
                            attachTop: !!this.props.attachTop,
                            attachRight: !!this.props.attachRight,
                            attachBottom: !!this.props.attachBottom,
                            attachLeft: !!this.props.attachLeft,
                            padding: this.props.padding
                        };
                        return this.props.position && this.props.position in l._9 && (e.position = this.props.position), e
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(a.Component),
            m = Object(u.d)("EmotePicker")(p);
        var h = Object(i.b)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded
                }
            })(m),
            g = n("nEoF");
        n.d(t, "a", function() {
            return h
        }), n.d(t, "c", function() {
            return d.a
        }), n.d(t, !1, function() {
            return g.b
        }), n.d(t, !1, function() {
            return g.a
        }), n.d(t, "b", function() {
            return c
        })
    },
    iydZ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        }), t.c = function(e, t) {
            var n = [],
                o = t.indexedActions,
                l = new RegExp("^(" + Object.keys(o).join("|") + ")(\\d+)$", "i"),
                c = e.split(/\s+/);
            return c.forEach(function(e, t) {
                var d = l.exec(e);
                if (d) {
                    var u = d[1].toLowerCase(),
                        p = +d[2],
                        m = o[u];
                    if (m || u !== i.g || (m = Object(r.b)()), m) {
                        var h = m.orderedTiers.find(function(e) {
                            return e.bits <= p
                        });
                        !h && p && (h = m.orderedTiers[0]), h && n.push({
                            type: a.a.Emote,
                            content: {
                                images: s(h),
                                alt: m.prefix,
                                cheerAmount: p,
                                cheerColor: h.color
                            }
                        })
                    }
                } else {
                    var g = n.length && n[n.length - 1],
                        f = "";
                    if (t < c.length - 1 && (f = " "), g && g.type === a.a.Text) g.content += e + f;
                    else {
                        var v = "";
                        t && (v = " "), n.push({
                            type: a.a.Text,
                            content: v + e + f
                        })
                    }
                }
            }), n
        }, t.b = s;
        var i = n("3iBR"),
            r = n("CFVp"),
            a = n("mwvJ"),
            o = {
                indexedActions: {},
                orderedActions: []
            };

        function s(e, t, n) {
            void 0 === n && (n = !0);
            var i, r, a = n ? "animated" : "static";
            return t ? {
                themed: !0,
                dark: (i = {}, i[t + "x"] = e.indexedImages.DARK[a].get(t), i),
                light: (r = {}, r[t + "x"] = e.indexedImages.LIGHT[a].get(t), r)
            } : {
                themed: !0,
                dark: {
                    "1x": e.indexedImages.DARK[a].get(1),
                    "1.5x": e.indexedImages.DARK[a].get(1.5),
                    "2x": e.indexedImages.DARK[a].get(2),
                    "3x": e.indexedImages.DARK[a].get(3),
                    "4x": e.indexedImages.DARK[a].get(4)
                },
                light: {
                    "1x": e.indexedImages.LIGHT[a].get(1),
                    "1.5x": e.indexedImages.LIGHT[a].get(1.5),
                    "2x": e.indexedImages.LIGHT[a].get(2),
                    "3x": e.indexedImages.LIGHT[a].get(3),
                    "4x": e.indexedImages.LIGHT[a].get(4)
                }
            }
        }
    },
    "j7/Y": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("OAwv"),
            a = n("GiK3"),
            o = n("F8kA"),
            s = n("6sO2");

        function l(e) {
            return function(t) {
                var n = function(n) {
                    function o(t) {
                        var r = n.call(this, t) || this;
                        return r.tracked = !1, r.referenceTracking = {}, r.trackPageview = function() {
                            if (!(r.tracked || e.skip && e.skip(r.props))) {
                                r.tracked = !0;
                                var t = {};
                                "function" == typeof e.properties ? t = e.properties(r.props) : e.properties && (t = i.__assign({}, e.properties));
                                var n = i.__assign({}, r.props);
                                n.location && n.location.state && (t.medium = n.location.state.medium, t.content = n.location.state.content, t.content_index = n.location.state.content_index);
                                var a = r.referenceTracking,
                                    o = a.content,
                                    l = a.medium,
                                    c = a.content_index;
                                s.n.tracking.trackPageview(i.__assign({
                                    content: o,
                                    medium: l,
                                    content_index: c,
                                    location: e.location
                                }, t))
                            }
                        }, s.i.debug("pageViewTracking", e), t.rootLatencyTracker ? t.rootLatencyTracker.setLocation(e.location) : s.i.warn("No latency tracker exists! This means no data will be sent to Spade.", e), r
                    }
                    return i.__extends(o, n), o.prototype.componentDidMount = function() {
                        var e = this;
                        this.referenceTracking = this.stripTTParams(this.props.history.location), this.trackPageview(), this.props.history.listen(function(t, n) {
                            "REPLACE" !== n && (e.tracked = !1, e.referenceTracking = {})
                        })
                    }, o.prototype.componentDidUpdate = function() {
                        this.trackPageview()
                    }, o.prototype.render = function() {
                        return a.createElement(t, i.__assign({}, this.props))
                    }, o.prototype.stripTTParams = function(e) {
                        var t = "" !== e.search ? r.parse(e.search) : {},
                            n = {
                                content: t.tt_content,
                                content_index: t.tt_content_index,
                                medium: t.tt_medium
                            };
                        if (delete t.tt_content, delete t.tt_content_index, delete t.tt_medium, n.medium || n.content) {
                            var i = "",
                                a = r.stringify(t);
                            a.length > 0 && (i = "?" + a), this.props.history.replace({
                                pathname: e.pathname,
                                hash: e.hash,
                                search: i
                            })
                        }
                        return n
                    }, o
                }(a.Component);
                return Object(o.f)(n)
            }
        }
        n.d(t, "a", function() {
            return l
        })
    },
    jYA1: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("6sO2"),
            o = 3;
        var s = n("CwIZ"),
            l = n("Odds"),
            c = "subscribe-button__subscribe-with-prime",
            d = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isSubscribing: !1,
                        primeSubFailure: !0
                    }, t.handleStartPrimeTrialClick = function() {
                        t.props.reportSubMenuAction({
                            action: s.a.ClickSignupForPrime
                        })
                    }, t.handleSubWithPrimeClick = function() {
                        t.setState({
                            isSubscribing: !0
                        }, function() {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var e;
                                return i.__generator(this, function(t) {
                                    switch (t.label) {
                                        case 0:
                                            return t.trys.push([0, 3, 4, 5]), this.props.authToken && this.props.userHasPrime && this.props.subLogin ? [4, function(e, t) {
                                                return i.__awaiter(this, void 0, void 0, function() {
                                                    var n, r, s;
                                                    return i.__generator(this, function(i) {
                                                        switch (i.label) {
                                                            case 0:
                                                                n = "https://api.twitch.tv/api/premium/credit/spend_token?channel_id=" + e, r = 1, i.label = 1;
                                                            case 1:
                                                                if (!(r <= o)) return [3, 7];
                                                                i.label = 2;
                                                            case 2:
                                                                return i.trys.push([2, 5, , 6]), [4, fetch(n, {
                                                                    method: "POST",
                                                                    headers: {
                                                                        "Client-ID": a.n.config.legacyClientID,
                                                                        Accept: "application/json; charset=UTF-8",
                                                                        "content-type": "application/json; charset=UTF-8",
                                                                        Authorization: "OAuth " + t
                                                                    }
                                                                })];
                                                            case 3:
                                                                return [4, i.sent().body];
                                                            case 4:
                                                                return [2, i.sent()];
                                                            case 5:
                                                                if (s = i.sent(), r === o) throw s;
                                                                return [3, 6];
                                                            case 6:
                                                                return ++r, [3, 1];
                                                            case 7:
                                                                return [2]
                                                        }
                                                    })
                                                })
                                            }(this.props.subLogin, this.props.authToken)] : [3, 2];
                                        case 1:
                                            t.sent(), this.props.onSubscribedWithPrime(), t.label = 2;
                                        case 2:
                                            return [3, 5];
                                        case 3:
                                            return e = t.sent(), a.i.error(e, "Failed to subscribe with Prime", {
                                                subLogin: this.props.subLogin
                                            }), this.setState({
                                                isSubscribing: !1,
                                                primeSubFailure: !0
                                            }), [3, 5];
                                        case 4:
                                            return this.setState({
                                                isSubscribing: !1
                                            }), [7];
                                        case 5:
                                            return [2]
                                    }
                                })
                            })
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.isSubscribedWithPrime && this.props.canPrimeSubscribe;
                    if (!this.props.userHasPrime) {
                        var t = Object(a.d)("Start Your Free Trial", "SubscribeWithPrime");
                        return r.createElement(l.u, i.__assign({
                            ariaLabel: t,
                            "data-test-selector": c,
                            icon: l._16.Crown,
                            linkTo: a.a.tryPrimeURI,
                            onClick: this.handleStartPrimeTrialClick
                        }, Object(l._53)(this.props), {
                            targetBlank: !0
                        }), t)
                    }
                    if (this.props.isSubscribed && !e) {
                        var n = Object(a.d)("Subscribed", "SubscribeWithPrime");
                        return r.createElement(l.u, i.__assign({
                            ariaLabel: n,
                            "data-test-selector": c,
                            disabled: !0,
                            icon: l._16.Crown
                        }, Object(l._53)(this.props)), n)
                    }
                    if (!this.props.canPrimeSubscribe) {
                        var o = Object(a.d)("Not yet!", "SubscribeWithPrime");
                        return r.createElement(l.u, i.__assign({
                            ariaLabel: o,
                            "data-test-selector": c,
                            disabled: !0,
                            icon: l._16.Crown
                        }, Object(l._53)(this.props)), o)
                    }
                    var s = e ? Object(a.d)("Resubscribe Free", "SubscribeWithPrime") : Object(a.d)("Subscribe Free", "SubscribeWithPrime");
                    return r.createElement(l.u, i.__assign({
                        ariaLabel: s,
                        "data-test-selector": c,
                        disabled: this.state.isSubscribing,
                        icon: l._16.Crown,
                        state: this.state.isSubscribing ? l.y.Loading : l.y.Default,
                        onClick: this.handleSubWithPrimeClick
                    }, Object(l._53)(this.props)), s)
                }, t
            }(r.Component);
        n.d(t, !1, function() {
            return c
        }), n.d(t, "a", function() {
            return d
        })
    },
    jetF: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return s
        });
        var i = n("TToO"),
            r = n("GiK3"),
            a = (n.n(r), n("HM6l")),
            o = n("Odds"),
            s = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        showBalloon: !!t.props.openByDefault,
                        hasInteracted: !!t.props.openByDefault
                    }, t.toggleBalloonId = Object(a.a)(), t.handleButtonClick = function() {
                        t.setState(function(e) {
                            return {
                                showBalloon: !e.showBalloon,
                                hasInteracted: !0
                            }
                        }, function() {
                            t.props.onToggle && t.props.onToggle(!t.state.showBalloon)
                        })
                    }, t.handleGlobalClick = function(e) {
                        e.target.matches('[data-toggle-balloon-id="' + t.toggleBalloonId + '"] *') || t.setState({
                            showBalloon: !1
                        }, function() {
                            t.props.onToggle && t.props.onToggle(!t.state.showBalloon)
                        })
                    }, t.onMouseEnter = function() {
                        t.state.hasInteracted || t.setState({
                            hasInteracted: !0
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.openByDefault && document.addEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.componentWillUpdate = function(e, t) {
                    this.state.showBalloon !== t.showBalloon && (t.showBalloon ? document.addEventListener("click", this.handleGlobalClick, !0) : document.removeEventListener("click", this.handleGlobalClick, !0))
                }, t.prototype.componentWillUnmount = function() {
                    document.removeEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.render = function() {
                    var e = r.Children.toArray(this.props.children);
                    if (2 !== e.length) throw new Error("ToggleBalloonWrapper should only be given two children: a clickable and a Balloon");
                    var t = e[0],
                        n = e[1];
                    if (n.type !== o.p) throw new Error("ToggleBalloonWrapper needs a Balloon as its second child element");
                    var a = r.cloneElement(t, {
                            onClick: this.handleButtonClick
                        }),
                        s = null;
                    (this.state.hasInteracted || this.props.alwaysMountBalloonContent) && (s = r.cloneElement(n, {
                        show: this.state.showBalloon
                    }));
                    var l = a;
                    return this.props.tooltipProps && (l = r.createElement(o._43, i.__assign({}, this.props.tooltipProps), a)), r.createElement(o._2, {
                        "data-toggle-balloon-id": this.toggleBalloonId,
                        display: this.props.display,
                        position: o._9.Relative
                    }, r.createElement("div", {
                        style: {
                            display: "inherit"
                        },
                        onMouseEnter: this.onMouseEnter,
                        "data-test-selector": "toggle-balloon-wrapper__mouse-enter-detector"
                    }, l), s)
                }, t.prototype.toggleBalloon = function(e) {
                    void 0 === e && (e = !this.state.showBalloon), this.setState({
                        showBalloon: e,
                        hasInteracted: !0
                    })
                }, t
            }(r.Component)
    },
    jkA6: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        });
        var i = n("v5ho"),
            r = function(e) {
                return e === i.a.Communities ? "COMMUNITY" : "GAME"
            }
    },
    k2jn: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("3zLD"),
            o = n("6sO2"),
            s = n("zCIC"),
            l = n("Th9g"),
            c = n("7vx8"),
            d = n("j7/Y"),
            u = n("NXs7"),
            p = n("VAT8"),
            m = n("w9tK"),
            h = n("vH/s"),
            g = n("CSlQ"),
            f = n("XhYx"),
            v = n("+I3D"),
            b = n("RH2O"),
            k = n("Aj/L"),
            y = n("2b/B"),
            S = n("Odds"),
            _ = (n("l5N5"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.props.isLoggedIn ? r.createElement(S.W, {
                        position: S._9.Fixed,
                        attachTop: !0,
                        fullWidth: !0
                    }, r.createElement("nav", {
                        className: "top-nav",
                        "data-a-target": "top-nav-container"
                    }, r.createElement(S._2, {
                        className: "top-nav__menu",
                        display: S.N.Flex,
                        alignItems: S.c.Stretch,
                        flexWrap: S.Q.NoWrap,
                        fullHeight: !0
                    }, r.createElement(S.W, {
                        display: S.N.InlineFlex,
                        alignItems: S.c.Center,
                        flexShrink: 0
                    }, r.createElement("span", {
                        className: "top-nav__home-link"
                    }, r.createElement(S._15, {
                        asset: S._16.LogoTwitch,
                        width: 94,
                        height: 32
                    }))), r.createElement(S._2, {
                        className: "top-nav__nav-items-container",
                        display: S.N.Flex,
                        flexGrow: 1,
                        flexWrap: S.Q.NoWrap,
                        flexShrink: 0
                    }, ""), r.createElement(S._2, {
                        className: "top-nav__nav-items-container",
                        display: S.N.Flex,
                        alignItems: S.c.Stretch,
                        flexWrap: S.Q.NoWrap,
                        flexGrow: 0,
                        flexShrink: 0
                    }, r.createElement(y.a, {
                        isOnboarding: !0
                    }))))) : (o.i.warn("OnboardingTopNavComponent is only meant to be used for logged in users."), null)
                }, t = i.__decorate([Object(g.d)("OnboardingTopNav")], t)
            }(r.Component));
        var N = Object(b.b)(function(e) {
                return {
                    isLoggedIn: Object(k.d)(e)
                }
            })(_),
            E = n("DBTH"),
            C = n("S4HN"),
            T = n("v5ho"),
            w = n("T8ns"),
            O = n("wd/y");
        n("ND9m");
        n.d(t, "c", function() {
            return I
        }), n.d(t, "a", function() {
            return D
        }), n.d(t, "b", function() {
            return x
        });
        var I = "onboarding_game",
            D = 100,
            P = 500,
            F = 3,
            R = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.doneInitialRedirectCheck = !1, t.gameToCategories = {}, t.onFollow = function(e) {
                        t.props.data.updateQuery(function(t) {
                            if (t.currentUser && t.currentUser.followedGames && t.currentUser.followedGames.nodes) {
                                var n = {
                                        id: e,
                                        name: e,
                                        __typename: "Game"
                                    },
                                    r = t.currentUser.followedGames.nodes.slice();
                                return r.push(n), i.__assign({}, t, {
                                    currentUser: i.__assign({}, t.currentUser, {
                                        followedGames: i.__assign({}, t.currentUser.followedGames, {
                                            nodes: r
                                        })
                                    })
                                })
                            }
                            return t
                        }), Object(C.e)(h.SpadeEventType.GameFollow, e)
                    }, t.onUnfollow = function(e) {
                        t.props.data.updateQuery(function(t) {
                            return t.currentUser && t.currentUser.followedGames && t.currentUser.followedGames.nodes ? i.__assign({}, t, {
                                currentUser: i.__assign({}, t.currentUser, {
                                    followedGames: i.__assign({}, t.currentUser.followedGames, {
                                        nodes: t.currentUser.followedGames.nodes.filter(function(t) {
                                            return t.name !== e
                                        })
                                    })
                                })
                            }) : t
                        }), Object(C.e)(h.SpadeEventType.GameUnfollow, e)
                    }, t.redirectAfterCompletion = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e;
                            return i.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return Object(C.d)(), [4, o.n.experiments.getAssignment(E.j)];
                                    case 1:
                                        return e = t.sent(), Object(E.o)(e) ? this.redirectToForYouPage() : this.redirectToFrontPage(), [2]
                                }
                            })
                        })
                    }, t.redirectToFrontPage = function() {
                        window.location.assign("/" + location.search)
                    }, t.redirectToForYouPage = function() {
                        var e = "" === location.search ? "?tt_medium=onboarding" : location.search + "&tt_medium=onboarding";
                        window.location.assign("/directory/following/foryou" + e)
                    }, t.isButtonDisabled = function() {
                        return t.getNumFollowedGames() < F
                    }, t.onGameInputChange = function(e) {
                        e.persist(), t.inputTimer && (clearTimeout(t.inputTimer), t.inputTimer = 0), t.inputTimer = setTimeout(function() {
                            t.props.onSearchChange(e.target.value), t.inputTimer = 0
                        }, P)
                    }, t.userFollowedGamesDataLoaded = function(e) {
                        return e.data && !e.data.loading && !e.data.error && e.data.currentUser
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return i.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return o.n.setPageTitle(Object(o.d)("Welcome", "CommunitySelectionPage")), [4, o.n.experiments.getAssignment(E.i)];
                                case 1:
                                    return e = t.sent(), this.setState({
                                        inOnboardingExperiment: Object(E.q)(e)
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.componentWillUpdate = function(e, t) {
                    this.userFollowedGamesDataLoaded(e) && ((!1 === t.inOnboardingExperiment || !this.doneInitialRedirectCheck && this.shouldRedirect(e)) && this.redirectToFrontPage(), this.doneInitialRedirectCheck = !0), (!this.props.categoryData && e.categoryData || this.props.categoryData && e.categoryData && this.props.categoryData.length !== e.categoryData.length) && this.mapGamesToCategories(e.categoryData)
                }, t.prototype.componentDidUpdate = function() {
                    this.userFollowedGamesDataLoaded(this.props) && this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.userFollowedGamesDataLoaded(this.props) && this.state.inOnboardingExperiment ? r.createElement(S._2, {
                        display: S.N.Flex,
                        flexWrap: S.Q.NoWrap,
                        fullHeight: !0,
                        fullWidth: !0,
                        position: S._9.Relative,
                        className: Object(p.c)(u.a.Dark)
                    }, r.createElement(N, null), r.createElement(S.W, {
                        position: S._9.Relative,
                        flexGrow: 1,
                        fullHeight: !0,
                        fullWidth: !0
                    }, r.createElement("main", {
                        className: w.b
                    }, r.createElement(S._25, {
                        className: "community-selection-page " + Object(p.c)(u.a.Dark),
                        "data-a-target": "community-selection-page",
                        background: S.m.Base,
                        "data-test-selector": "onboarding-community-selection",
                        fullHeight: !0
                    }, r.createElement(S._2, {
                        fullWidth: !0,
                        className: "community-selection-page__progress-container"
                    }, r.createElement(S._12, {
                        size: S._13.Small,
                        value: this.calculateProgress()
                    })), r.createElement(S._2, {
                        display: S.N.Flex,
                        alignItems: S.c.Center,
                        justifyContent: S._1.Center,
                        flexDirection: S.P.Column,
                        breakpointLarge: {
                            flexDirection: S.P.Row
                        },
                        padding: {
                            x: 2,
                            top: 2,
                            bottom: 1
                        },
                        fullWidth: !0
                    }, r.createElement(S._2, {
                        className: "community-selection-page__search"
                    }, r.createElement(S._18, {
                        id: "onboarding-community-selection__search",
                        "data-a-target": "onboarding-community-selection__search",
                        onChange: this.onGameInputChange,
                        placeholder: "Search Games",
                        spellCheck: !1
                    })), this.renderTitleText(), this.renderCTA()), r.createElement(s.b, null, r.createElement(S._2, {
                        className: "community-selection-page__list",
                        overflow: S._5.Hidden,
                        padding: {
                            x: 1,
                            bottom: 1
                        }
                    }, this.renderGameCardsOrCategories(), r.createElement(s.a, {
                        enabled: this.props.categoriesInfiniteScrollEnabled,
                        loadMore: this.props.onLoadMoreCategories,
                        orientation: l.b.Down,
                        pixelThreshold: 20
                    }))))))) : this.props.data.error ? (o.i.warn("Data Error in Onboarding Community Selection", this.props.data.error), r.createElement(S._2, {
                        display: S.N.Flex
                    }, r.createElement(S._35, {
                        fontSize: S.R.Size5,
                        color: S.I.Alt
                    }, Object(o.d)("Hmm...having trouble loading right now.", "CommunitySelectionPage")))) : null
                }, t.prototype.getNumFollowedGames = function() {
                    return this.props.data.currentUser.followedGames.nodes.length
                }, t.prototype.mapGamesToCategories = function(e) {
                    var t = this;
                    this.gameToCategories = {}, e.forEach(function(e) {
                        e.games.forEach(function(n) {
                            t.gameToCategories[n] || (t.gameToCategories[n] = []), t.gameToCategories[n].push(e.name)
                        })
                    })
                }, t.prototype.getCategoryFollowCounts = function() {
                    var e = this,
                        t = {};
                    return this.props.data.currentUser.followedGames.nodes.forEach(function(n) {
                        e.gameToCategories[n.name] && e.gameToCategories[n.name].forEach(function(e) {
                            t[e] || (t[e] = 0), t[e]++
                        })
                    }), t
                }, t.prototype.calculateProgress = function() {
                    return Math.min(1 + this.getNumFollowedGames() / F * 99, 100)
                }, t.prototype.shouldRedirect = function(e) {
                    return !e.data.currentUser || e.data.currentUser.followedGames.nodes.length >= 10
                }, t.prototype.renderTitleText = function() {
                    return r.createElement(S._2, {
                        display: S.N.Flex,
                        alignItems: S.c.Center,
                        flexGrow: 1,
                        flexDirection: S.P.Column,
                        margin: 1,
                        breakpointLarge: {
                            margin: {
                                x: 2,
                                y: 1
                            }
                        }
                    }, r.createElement(S._25, {
                        color: S.I.Base,
                        fontSize: S.R.Size3,
                        textAlign: S._36.Center,
                        breakpointExtraLarge: {
                            fontSize: S.R.Size2
                        }
                    }, Object(o.d)("Pick three or more you’d like to watch.", "CommunitySelectionPage")), r.createElement(S._25, {
                        textAlign: S._36.Center,
                        margin: {
                            top: .5
                        },
                        display: S.N.Hide,
                        breakpointLarge: {
                            display: S.N.Flex
                        }
                    }, r.createElement(S._25, {
                        fontSize: S.R.Size4,
                        color: S.I.Alt,
                        breakpointExtraLarge: {
                            fontSize: S.R.Size3
                        }
                    }, Object(o.d)("We have tons of games, hobbies, and activities being streamed right now.", "CommunitySelectionPage"))))
                }, t.prototype.renderCTA = function() {
                    return r.createElement(S._2, {
                        className: "community-selection-page__cta-container",
                        display: S.N.Flex,
                        justifyContent: S._1.Center,
                        breakpointLarge: {
                            justifyContent: S._1.End
                        },
                        flexGrow: 0,
                        flexShrink: 0
                    }, r.createElement(S.u, {
                        size: S.x.Large,
                        "data-test-selector": "onboarding_cta",
                        disabled: this.isButtonDisabled(),
                        onClick: this.redirectAfterCompletion
                    }, Object(o.d)("Done", "CommunitySelectionPage")))
                }, t.prototype.renderGameCardsOrCategories = function() {
                    var e = this;
                    if (this.props.gameData) {
                        var t = {
                            onFollow: this.onFollow,
                            onUnfollow: this.onUnfollow
                        };
                        return r.createElement(f.a, {
                            games: this.props.gameData,
                            directoryType: T.a.Games,
                            cardSize: S._47.Medium,
                            followGameCardOptions: t
                        })
                    }
                    if (this.props.categoryData) {
                        var n = this.getCategoryFollowCounts();
                        return this.props.categoryData.map(function(t) {
                            var i = !!n && (n[t.name] || 0) === t.games.length;
                            return r.createElement(v.a, {
                                key: t.name,
                                data: t,
                                cardSize: S._47.ExtraSmall,
                                trackingMedium: h.PageviewMedium.BrowseForYou,
                                isFollowingAllGamesInCategory: i,
                                onFollow: e.onFollow,
                                onUnfollow: e.onUnfollow
                            })
                        })
                    }
                }, t
            }(r.Component),
            x = Object(a.compose)(Object(c.a)(O, {
                options: {
                    variables: {
                        limit: 10
                    }
                }
            }), Object(g.d)("CommunitySelectionPage", {
                destination: m.a.OnboardingIndex
            }), Object(d.a)({
                location: h.PageviewLocation.OnboardingCommunitySelection
            }))(R)
    },
    l21v: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("6sO2"),
            a = n("iydZ"),
            o = n("mwvJ"),
            s = new RegExp("(?:^|\\s)(?:https?://)?clips.twitch.tv/(\\w+)(?:/)?(\\w+)?(?:/edit)?(?:$|\\s)?");
        var l = n("YhVV"),
            c = n("3KVC"),
            d = n("e1CU");
        t.a = function(e, t, n, r, a, o) {
            void 0 === o && (o = !1);
            var s;
            s = a ? Object(l.b)(e, a) : function(e) {
                var t = [];
                e && Object.keys(e).forEach(function(n) {
                    var i = e[n];
                    i.forEach(function(e) {
                        t[e.startIndex] = {
                            startIndex: e.startIndex,
                            endIndex: e.endIndex + 1,
                            data: {
                                images: {
                                    themed: !1,
                                    sources: {
                                        "1x": b(n, 1),
                                        "2x": b(n, 2),
                                        "4x": b(n, 4)
                                    }
                                }
                            }
                        }
                    })
                });
                return t
            }(t.emotes);
            var c = Object(d.a)(t.displayName, t.username);
            return {
                badges: t.badges || {},
                bits: t.bits,
                user: i.__assign({}, c, {
                    userLogin: t.username,
                    userID: t.userID,
                    userType: t.userType,
                    color: t.color || m(t.userID)
                }),
                messageParts: e ? h(e, s, t.bits, n, r, c.userDisplayName) : [],
                deleted: o,
                timestamp: Date.now()
            }
        }, t.b = m, t.f = h, t.d = g, t.c = v, t.e = b;
        var u = ["#FF0000", "#0000FF", "#008000", "#B22222", "#FF7F50", "#9ACD32", "#FF4500", "#2E8B57", "#DAA520", "#D2691E", "#5F9EA0", "#1E90FF", "#FF69B4", "#8A2BE2", "#00FF7F"],
            p = {};

        function m(e, t) {
            return void 0 === t && (t = 15), "number" != typeof p[e] && (p[e] = Math.floor(Math.random() * t)), u[p[e]]
        }

        function h(e, t, n, r, a, s) {
            void 0 === t && (t = []);
            var l = [],
                c = 0,
                d = g(e);
            t.forEach(function(t) {
                var u = d ? d.slice(c, t.startIndex).join("") : e.slice(c, t.startIndex);
                u && (l = n ? l.concat(f(u, s, a, r)) : l.concat(v(u, s, a))), l.push({
                    type: o.a.Emote,
                    content: i.__assign({
                        alt: d ? d.slice(t.startIndex, t.endIndex).join("") : e.slice(t.startIndex, t.endIndex)
                    }, t.data)
                }), c = t.endIndex
            });
            var u = d ? d.slice(c).join("") : e.slice(c);
            return u && (l = n ? l.concat(f(u, s, a, r)) : l.concat(v(u, s, a))), l
        }

        function g(e) {
            return e.match(/[^\uD800-\uDFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDFFF]/g)
        }

        function f(e, t, n, i) {
            if (!i) return v(e, t, n);
            var r = Object(a.c)(e, i).map(function(e) {
                return e.type === o.a.Text ? v(e.content, t, n) : e
            });
            return [].concat.apply([], r)
        }

        function v(e, t, n) {
            var i = /^(?:(https?:\/\/)?(?:[\w@#%\-+=:~]+\.)+[a-z]{2,6}(?:\/[\w./@#%&()\-+=:?~]*)?)$/g,
                a = /([^\w@#%\-+=:~])?(@)([^\u0000-\u007F]+|\w+)+([^\w./@#%&()\-+=:?~]|\s|$)/g,
                l = [],
                d = e.split(/\s+/);
            return d.forEach(function(e, u) {
                i.lastIndex = 0;
                var p = i.exec(e);
                a.lastIndex = 0;
                var m = a.exec(e);
                if (p) {
                    var h = p.index;
                    0 !== h && l.push({
                        type: o.a.Text,
                        content: "" + e.slice(0, h)
                    });
                    var g = i.lastIndex;
                    if (n) l.push({
                        type: o.a.Text,
                        content: " <" + Object(r.d)("deleted link", "CreateMessageData") + "> "
                    });
                    else {
                        var f = (p[1] ? "" : "https://") + e.slice(h, g);
                        if (function(e) {
                                return void 0 === e && (e = ""), s.test(e) && !e.includes("clips.twitch.tv/2017/")
                            }(f)) {
                            var v = function(e) {
                                void 0 === e && (e = "");
                                var t = e.match(s);
                                return null === t ? "" : t && t.length > 0 && void 0 !== t.index ? t[1] : ""
                            }(f);
                            l.push({
                                type: o.a.ClipLink,
                                content: {
                                    slug: v,
                                    url: f,
                                    displayText: e.slice(h, g)
                                }
                            })
                        } else if (Object(c.a)(f)) {
                            var b = Object(c.b)(f);
                            l.push({
                                type: o.a.VideoLink,
                                content: {
                                    id: b,
                                    url: f,
                                    displayText: e.slice(h, g)
                                }
                            })
                        } else l.push({
                            type: o.a.Link,
                            content: {
                                displayText: e.slice(h, g),
                                url: f
                            }
                        })
                    }
                    var k = e.slice(g),
                        y = "";
                    u < d.length - 1 && (y = " "), k && l.push({
                        type: o.a.Text,
                        content: "" + k + y
                    })
                } else {
                    if (!m) {
                        var S = l.length && l[l.length - 1];
                        y = "";
                        if (u < d.length - 1 && (y = " "), S && S.type === o.a.Text) S.content += e + y;
                        else {
                            var _ = "";
                            u && (_ = " "), l.push({
                                type: o.a.Text,
                                content: _ + e + y
                            })
                        }
                        return
                    }
                    var N = m[3];
                    l.push({
                        type: o.a.Mention,
                        content: {
                            sender: t,
                            recipient: N
                        }
                    })
                }
            }), l
        }

        function b(e, t) {
            return "https://static-cdn.jtvnw.net/emoticons/v1/" + e + "/" + Math.min(Math.ceil(t), 3) + ".0"
        }
    },
    l4QG: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = {
            Away: "AWAY",
            Busy: "BUSY",
            Idle: "IDLE",
            Invisible: "INVISIBLE",
            Offline: "OFFLINE",
            Online: "ONLINE"
        }
    },
    l5N5: function(e, t) {},
    lI8O: function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("6sO2"),
            o = n("DBTH"),
            s = n("RH2O"),
            l = n("7vx8"),
            c = n("HM6l"),
            d = n("w9tK"),
            u = n("Aj/L"),
            p = n("T0IN"),
            m = n("CSlQ"),
            h = n("A9VK"),
            g = n("5LoI"),
            f = n("MAZT"),
            v = n("uTyw"),
            b = n("Qfvd"),
            k = n("f6or"),
            y = n("k2jn"),
            S = "285x380",
            _ = 5,
            N = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        searching: !1,
                        randomizedGames: [],
                        categoryEndIndex: _
                    }, n.getData = function() {
                        return n.state.searching && n.state.searchGameResults ? n.state.searchGameResults.map(function(e) {
                            return n.mapDataToGame(e.title, e.popularity, e.id)
                        }) : n.props.isRandomExperimentEnabled ? n.state.randomizedGames.map(function(e) {
                            return n.mapDataToGame(e)
                        }) : !n.props.isCategoriesExperimentEnabled && n.gameDataLoaded() ? n.props.data.games.edges.map(function(e) {
                            return {
                                id: e.node.id,
                                name: e.node.name,
                                boxArtURL: e.node.boxArtURL,
                                viewersCount: e.node.viewersCount
                            }
                        }) : void 0
                    }, n.gameDataLoaded = function() {
                        return n.props.data && !n.props.data.loading && !n.props.data.error && n.props.data.games && n.props.data.games.edges
                    }, n.onSearchChange = function(e) {
                        e ? (n.setState({
                            searching: !0
                        }), n.doGameSearch(e).then(function() {})) : n.setState({
                            searching: !1
                        })
                    }, n.doGameSearch = function(e) {
                        return i.__awaiter(n, void 0, void 0, function() {
                            var t, n, r, o;
                            return i.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        t = Object(c.a)(), i.label = 1;
                                    case 1:
                                        return i.trys.push([1, 3, , 4]), [4, this.searchClient.queryForType(g.a.Games, e, t, {
                                            hitsPerPage: y.a
                                        })];
                                    case 2:
                                        return (n = i.sent()) && (r = Object(v.b)({
                                            searchResults: n
                                        }), this.setState({
                                            searchGameResults: r.currentGameResults ? r.currentGameResults.results : []
                                        })), [3, 4];
                                    case 3:
                                        return o = i.sent(), a.i.error(o, "Algolia top results search failed"), this.setState({
                                            searchGameResults: []
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, n.loadMoreCategories = function() {
                        return i.__awaiter(n, void 0, void 0, function() {
                            var e;
                            return i.__generator(this, function(t) {
                                return this.state.categoryData && (e = Math.min(this.state.categoryEndIndex + _, this.state.categoryData.length)) > this.state.categoryEndIndex && this.setState({
                                    categoryEndIndex: e
                                }), [2]
                            })
                        })
                    }, n.mapDataToGame = function(e, t, n) {
                        return {
                            id: n || e.toString(),
                            name: e,
                            boxArtURL: b.a + "/" + encodeURIComponent(e) + "-" + S + ".jpg",
                            viewersCount: t
                        }
                    }, n.searchClient = new f.a(a.a.algoliaApplicationID, a.a.algoliaAPIKey), n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.props.isLoggedIn ? this.props.isRandomExperimentEnabled ? [4, this.fetchAndSaveRandomizedGameNames()] : [3, 2] : (this.props.latencyTracking.reportInteractive(), window.location.assign("/" + location.search), [2]);
                                case 1:
                                    e.sent(), e.label = 2;
                                case 2:
                                    return this.props.isCategoriesExperimentEnabled ? [4, this.fetchCategories()] : [3, 4];
                                case 3:
                                    e.sent(), e.label = 4;
                                case 4:
                                    return this.props.latencyTracking.reportInteractive(), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return r.createElement(y.b, {
                        gameData: this.getData(),
                        categoryData: this.state.categoryData && this.state.categoryData.slice(0, this.state.categoryEndIndex),
                        onSearchChange: this.onSearchChange,
                        categoriesInfiniteScrollEnabled: !!this.state.categoryData && this.state.categoryEndIndex !== this.state.categoryData.length,
                        onLoadMoreCategories: this.loadMoreCategories
                    })
                }, t.prototype.fetchAndSaveRandomizedGameNames = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e, t;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    e = [], i.label = 1;
                                case 1:
                                    return i.trys.push([1, 3, , 4]), [4, n.e(82).then(n.bind(null, "GZxo"))];
                                case 2:
                                    return e = i.sent(), [3, 4];
                                case 3:
                                    return t = i.sent(), a.i.error(t, "Could not fetch randomized game names"), [3, 4];
                                case 4:
                                    return Object(p.a)(e), e = e.slice(0, 100), this.setState({
                                        randomizedGames: e
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.fetchCategories = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e, t;
                        return i.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return [4, Object(h.a)()];
                                case 1:
                                    return e = n.sent(), t = e.map(function(e) {
                                        return {
                                            name: e.name,
                                            games: e.games.slice(0, 7)
                                        }
                                    }), this.setState({
                                        categoryData: t
                                    }), [2]
                            }
                        })
                    })
                }, t = i.__decorate([Object(l.a)(k, {
                    options: {
                        variables: {
                            limit: y.a
                        }
                    },
                    skip: function(e) {
                        return !e.isLoggedIn || e.isRandomExperimentEnabled || e.isCategoriesExperimentEnabled
                    }
                }), Object(m.d)("CommunitySelectionPageContainer", {
                    destination: d.a.OnboardingIndex
                })], t)
            }(r.Component);
        var E = Object(s.b)(function(e) {
                return {
                    isLoggedIn: Object(u.d)(e)
                }
            })(N),
            C = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isRandomExperimentEnabled: null,
                        isCategoriesExperimentEnabled: null
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e, t, n, r;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return [4, a.n.experiments.getAssignment(o.l)];
                                case 1:
                                    return e = i.sent(), [4, a.n.experiments.getAssignment(o.g)];
                                case 2:
                                    return t = i.sent(), n = e === o.e.ENABLED, r = t === o.b.Yes, this.setState({
                                        isRandomExperimentEnabled: n && !r,
                                        isCategoriesExperimentEnabled: r
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return null === this.state.isRandomExperimentEnabled || null === this.state.isCategoriesExperimentEnabled ? null : r.createElement(E, {
                        isRandomExperimentEnabled: this.state.isRandomExperimentEnabled,
                        isCategoriesExperimentEnabled: this.state.isCategoriesExperimentEnabled
                    })
                }, t
            }(r.Component);
        n.d(t, "CommunitySelectionPage", function() {
            return C
        })
    },
    lK86: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "GiftSubscribeButton_Gift_Eligibility"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "recipientLogin"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "String"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "subProductId"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "recipientLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "canGift"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "product"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "subProductId"
                                                }
                                            }
                                        }],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 171
            }
        };
        n.loc.source = {
            body: "query GiftSubscribeButton_Gift_Eligibility($recipientLogin: String $subProductId: String!) {\nuser(login: $recipientLogin) {\nid\nself {\ncanGift(product: $subProductId)\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    m0Vj: function(e, t) {},
    m4HT: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            return parseInt(t, 10) < parseInt(e, 10) ? t + "_" + e : e + "_" + t
        }, t.b = function(e, t) {
            return e.split("_").find(function(e) {
                return e !== t
            }) || null
        }
    },
    mRH2: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_ReportUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportContentInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "reportContent"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "contentID"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 111
            }
        };
        n.loc.source = {
            body: "mutation ReportUserModal_ReportUser($input: ReportContentInput!) {\nreportContent(input: $input) {\ncontentID\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    mmQh: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_ReportUserCommunity"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportUserInCommunityInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "reportUserInCommunity"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 138
            }
        };
        n.loc.source = {
            body: "mutation ReportUserModal_ReportUserCommunity($input: ReportUserInCommunityInput!) {\nreportUserInCommunity(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    mqvl: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            switch (e.type) {
                case i.b.Playing:
                    return {
                        type: i.a.Playing,
                        "Symbol(id)": t,
                        __typename: "Playing",
                        game: {
                            id: e.game_id,
                            name: e.game,
                            "Symbol(id)": t + ".game",
                            __typename: "Game"
                        }
                    };
                case i.b.Streaming:
                    var n = {
                        type: i.a.Streaming,
                        "Symbol(id)": t,
                        __typename: "Streaming",
                        stream: {
                            id: e.channel_id,
                            game: null,
                            "Symbol(id)": t + ".stream",
                            __typename: "Stream"
                        }
                    };
                    return e.game && e.game_id && (n.stream.game = {
                        id: e.game_id,
                        name: e.game,
                        "Symbol(id)": t + ".stream.game",
                        __typename: "Game"
                    }), n;
                case i.b.Watching:
                    var r = {
                        type: i.a.Watching,
                        "Symbol(id)": t,
                        __typename: "Watching",
                        user: {
                            id: e.channel_id,
                            login: e.channel_login,
                            displayName: e.channel_display_name,
                            "Symbol(id)": t + ".user",
                            __typename: "User",
                            hosting: {
                                id: e.hosted_channel_id || null,
                                displayName: e.hosted_channel_display_name || null,
                                login: e.hosted_channel_login || null,
                                "Symbol(id)": t + ".user.hosting",
                                __typename: "User"
                            }
                        }
                    };
                    return r;
                default:
                    return null
            }
        };
        var i = n("Ex+h")
    },
    "mw/a": function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.ChannelFeedComment = "CHANNEL_FEED_COMMENT_REPORT", e.ChannelFeedPost = "CHANNEL_FEED_POST_REPORT", e.Chat = "CHAT_REPORT", e.Clip = "CLIP_REPORT", e.Collection = "COLLECTION_REPORT", e.Community = "COMMUNITY_REPORT", e.Event = "EVENT_REPORT", e.Extension = "EXTENSION_REPORT", e.LiveUp = "LIVE_UP_REPORT", e.Raid = "RAID_REPORT", e.Room = "ROOM_REPORT", e.StreamUp = "STREAM_UP_REPORT", e.User = "USER_REPORT", e.VideoChatMessage = "VOD_COMMENT_REPORT", e.Vod = "VOD_REPORT"
            }(i || (i = {}))
    },
    mwvJ: function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e[e.Text = 0] = "Text", e[e.Mention = 1] = "Mention", e[e.Link = 2] = "Link", e[e.Emote = 3] = "Emote", e[e.ClipLink = 4] = "ClipLink", e[e.VideoLink = 5] = "VideoLink"
            }(i || (i = {}))
    },
    n7G4: function(e, t) {},
    n9f8: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Threads_MarkAllWhispersAsRead"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateAllWhisperThreadsInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateAllWhisperThreads"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "count"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 130
            }
        };
        n.loc.source = {
            body: "mutation Threads_MarkAllWhispersAsRead($input: UpdateAllWhisperThreadsInput!) {\nupdateAllWhisperThreads(input: $input) {\ncount\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    nC3l: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "CommunityStreamBan_BanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BanUserFromCommunityInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "banUserFromCommunity"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 121
            }
        };
        n.loc.source = {
            body: "mutation CommunityStreamBan_BanUser($input: BanUserFromCommunityInput!) {\nbanUserFromCommunity(input: $input) {\nerror\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    nEoF: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return i
        }), n.d(t, "a", function() {
            return r
        });
        var i = {
                TriHard: {
                    count: 196568036
                },
                Kappa: {
                    count: 192158118
                },
                "4Head": {
                    count: 155758710
                },
                PogChamp: {
                    count: 151485090
                },
                cmonBruh: {
                    count: 146352878
                },
                BibleThump: {
                    count: 56472964
                },
                WutFace: {
                    count: 45069031
                },
                Kreygasm: {
                    count: 41387580
                },
                DansGame: {
                    count: 38097659
                },
                hi5F: {
                    count: 34986404
                },
                SMOrc: {
                    count: 34734484
                },
                KappaPride: {
                    count: 34262839
                },
                VoHiYo: {
                    count: 27886434
                },
                SwiftRage: {
                    count: 24561900
                },
                ResidentSleeper: {
                    count: 24438298
                },
                EleGiggle: {
                    count: 19891526
                },
                FailFish: {
                    count: 19118343
                },
                NotLikeThis: {
                    count: 18802905
                },
                Keepo: {
                    count: 18351415
                },
                BabyRage: {
                    count: 18220906
                },
                MingLee: {
                    count: 18026207
                },
                pbfSSH: {
                    count: 16911241
                },
                forsenE: {
                    count: 14960299
                },
                HeyGuys: {
                    count: 14851569
                },
                ANELE: {
                    count: 14648986
                },
                PJSalt: {
                    count: 14438861
                }
            },
            r = ["354", "49106", "4339", "48", "25", "55338", "70433", "1902", "68856", "81103", "76171", "27509"]
    },
    nmYW: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "blockedUsers"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "blockedUsers"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 56
            }
        };
        n.loc.source = {
            body: "fragment blockedUsers on User {\nid\nblockedUsers {\nid\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    npyu: function(e, t) {},
    oFw4: function(e, t) {},
    oIkB: function(e, t, n) {
        "use strict";
        t.b = function(e, t) {
            var n = new Set(e.map(function(e) {
                return e.node.id
            }));
            return e.concat(t.filter(function(e) {
                return !n.has(e.node.id)
            }))
        }, t.a = function(e) {
            return {
                variables: {
                    input: e
                }
            }
        }, t.d = function(e, t, n, a) {
            void 0 === t && (t = {});
            try {
                var o = r.n.apollo.client.readQuery({
                    query: e,
                    variables: t
                });
                if (!o || a && a(o)) return;
                var s = i(o, n);
                r.n.apollo.client.writeQuery({
                    query: e,
                    variables: t,
                    data: s
                })
            } catch (e) {
                r.i.warn("Failed writing updated query to Apollo", e)
            }
        }, t.c = function(e) {
            try {
                var t = e.id,
                    n = e.fragment,
                    a = e.mutator,
                    o = r.n.apollo.client.readFragment({
                        id: t,
                        fragment: n
                    }),
                    s = i(o, a);
                r.n.apollo.client.writeFragment({
                    fragment: n,
                    id: t,
                    data: s
                })
            } catch (e) {
                r.i.warn("Failed writing updated query to Apollo", e)
            }
        };
        n("+dIz");
        var i = n("LIeg"),
            r = (n.n(i), n("6sO2"))
    },
    oSFp: function(e, t, n) {
        "use strict";
        var i = n("A5Hr"),
            r = n("TToO"),
            a = n("GiK3"),
            o = n("RH2O"),
            s = n("2KeS"),
            l = n("+8VM"),
            c = n("V5M+"),
            d = n("CSlQ"),
            u = n("Odds"),
            p = (n("oFw4"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleClose = function(e) {
                        t.props.closeModal(), t.props.onClose && t.props.onClose(e)
                    }, t
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(u._25, {
                        className: "reporting-modal__container",
                        background: u.m.Base,
                        padding: {
                            x: 2,
                            y: 3
                        }
                    }, a.createElement(i.a, {
                        onClose: this.handleClose,
                        reportContext: this.props.reportContext,
                        title: this.props.title,
                        defaultDescription: this.props.defaultDescription
                    }), a.createElement(l.a, null))
                }, t
            }(a.Component));
        var m = Object(s.d)(Object(d.d)("ReportUserModal"), Object(o.b)(null, function(e) {
            return Object(s.b)({
                closeModal: c.c
            }, e)
        }))(p);
        n.d(t, !1, function() {}), n.d(t, !1, function() {
            return i.a
        }), n.d(t, !1, function() {
            return p
        }), n.d(t, "a", function() {
            return m
        })
    },
    ozx1: function(e, t) {},
    p8c9: function(e, t) {},
    pQNb: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("6sO2"),
            o = n("FDYX"),
            s = n("Odds"),
            l = (n("Z+EN"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.hasDiscount(this.props.subscriptionProducts)) {
                        var e = this.getMessage();
                        return r.createElement(s._25, {
                            textAlign: s._36.Center,
                            className: "sub-discount-banner",
                            padding: 1,
                            color: s.I.Overlay,
                            "data-test-selector": "sub-discount-banner"
                        }, r.createElement(s._35, {
                            bold: !0
                        }, e))
                    }
                    return null
                }, t.prototype.getMessage = function() {
                    var e = Object(o.b)(this.props.subscriptionProducts[0], this.props.isGift);
                    return this.props.isGift ? Object(a.d)("Gift a sub and get {percent} off!", {
                        percent: Object(a.e)(e / 100, "percent")
                    }, "SubDiscountBanner") : Object(a.d)("Get {percent} off the first month of any paid subscription!", {
                        percent: Object(a.e)(e / 100, "percent")
                    }, "SubDiscountBanner")
                }, t.prototype.hasDiscount = function(e) {
                    return this.props.isGift ? Object(o.c)(e) : Object(o.d)(e)
                }, t
            }(r.Component));
        n.d(t, !1, function() {
            return "sub-discount-banner"
        }), n.d(t, "a", function() {
            return l
        })
    },
    plcU: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "CommunityStreamTimeout_TimeoutUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "TimeoutUserFromCommunityInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "timeoutUserFromCommunity"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "community"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 159
            }
        };
        n.loc.source = {
            body: "mutation CommunityStreamTimeout_TimeoutUser($input: TimeoutUserFromCommunityInput!) {\ntimeoutUserFromCommunity(input: $input) {\ncommunity {\nid\nname\n}\nerror\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    pqU3: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "c", function() {
            return r
        }), n.d(t, "b", function() {
            return a
        }), t.d = function(e) {
            return {
                type: a,
                leagueOfLegendsChampionsErrored: e
            }
        }, t.e = function(e) {
            return {
                type: r,
                leagueOfLegendsChampionsLoading: e
            }
        }, t.f = function(e) {
            var t = {},
                n = e.data;
            for (var r in n) n.hasOwnProperty(r) && (t[n[r].id] = n[r]);
            return {
                type: i,
                apiData: e,
                championsMap: t,
                apiVersion: e.version
            }
        };
        var i = "directory.LOL_CHAMPIONS_CHANGED",
            r = "directory.LOL_CHAMPIONS_LOADING",
            a = "directory.LOL_CHAMPIONS_ERRORED"
    },
    puy8: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return i
        }), t.a = r, t.c = function(e, t) {
            var n = parseInt(e, 10) % i.length;
            return r(i[n], t)
        };
        var i = [{
            id: "profile_image_001",
            urlSlug: "bb97f7e6-f11a-4194-9708-52bf5a5125e8"
        }, {
            id: "profile_image_002",
            urlSlug: "27103734-3cda-44d6-a384-f2ab71e4bb85"
        }, {
            id: "profile_image_003",
            urlSlug: "49988c7b-57bc-4dee-bd4f-6df4ad215d3a"
        }, {
            id: "profile_image_004",
            urlSlug: "0ecbb6c3-fecb-4016-8115-aa467b7c36ed"
        }, {
            id: "profile_image_005",
            urlSlug: "cd618d3e-f14d-4960-b7cf-094231b04735"
        }, {
            id: "profile_image_006",
            urlSlug: "4cbf10f1-bb9f-4f57-90e1-15bf06cfe6f5"
        }, {
            id: "profile_image_007",
            urlSlug: "b83b1794-7df9-4878-916c-88c2ad2e4f9f"
        }];

        function r(e, t) {
            var n = 70;
            return 300 === t ? n = 300 : 96 !== t && 80 !== t || (n = 150), "https://static-cdn.jtvnw.net/user-default-pictures/" + e.urlSlug + "-profile_image-" + n + "x" + n + ".jpg"
        }
    },
    qe65: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("RH2O"),
            o = n("NXs7"),
            s = n("0nzt"),
            l = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props,
                        t = (e.defaultRes, e.sources),
                        n = (e.darkModeEnabled, i.__rest(e, ["defaultRes", "sources", "darkModeEnabled"])),
                        a = this.props.darkModeEnabled ? t.dark : t.light,
                        o = Object.keys(a);
                    delete n.dispatch;
                    var s = i.__assign({}, n, {
                        src: a[this.props.defaultRes || o[0]],
                        srcSet: o.map(function(e) {
                            return a[e] + " " + e
                        }).join(",")
                    });
                    return r.createElement("img", i.__assign({}, s, {
                        onLoad: this.props.onLoad
                    }))
                }, t
            }(r.Component);
        var c = Object(a.b)(function(e) {
            return {
                darkModeEnabled: Object(s.a)(e) === o.a.Dark
            }
        })(l);
        n.d(t, "a", function() {
            return c
        })
    },
    qpaC: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Thread_ArchiveThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateWhisperThreadInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isArchived"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 132
            }
        };
        n.loc.source = {
            body: "mutation Thread_ArchiveThread($input: UpdateWhisperThreadInput!) {\nupdateWhisperThread(input: $input) {\nthread {\nid\nisArchived\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "qzJ+": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            r = n("6sO2"),
            a = n("oIkB"),
            o = n("HM6l"),
            s = n("9RMu"),
            l = n("l21v");
        var c = n("BVQ1"),
            d = n("m4HT"),
            u = n("+gWs");

        function p(e) {
            try {
                var t = r.n.apollo.client.readQuery({
                    query: u,
                    variables: {
                        id: e
                    }
                });
                return t ? t.whisperThread : null
            } catch (e) {
                return null
            }
        }
        t.a = function(e) {
            var t = e.currentUserID,
                n = e.emotes,
                m = e.message,
                h = e.recipientUserID;
            if ("" === t || "" === m || "" === h) return Promise.reject(new Error("Tried to send a whisper with nonsensical parameters."));
            var g = Object(o.b)(),
                f = i.__assign({
                    mutation: c
                }, Object(a.a)({
                    message: m,
                    nonce: g,
                    recipientUserID: h
                })),
                v = Object(d.a)(t, h),
                b = p(v);
            if (b) {
                var k = function(e, t) {
                    for (var n = [], i = /\S+/g, r = i.exec(e); r;) {
                        var a = r[0],
                            o = t[a];
                        if (o) {
                            var s = Object(l.d)(e.slice(0, r.index)),
                                c = s ? s.length : r.index;
                            n.push({
                                id: o.id,
                                start: c,
                                end: c + a.length - 1
                            })
                        }
                        r = i.exec(e)
                    }
                    return n
                }(m, n).map(s.a);
                f.optimisticResponse = {
                    sendWhisper: {
                        __typename: "SendWhisperPayload",
                        message: {
                            content: {
                                content: m,
                                emotes: k,
                                __typename: "MessageBody"
                            },
                            from: {
                                id: t,
                                __typename: "User"
                            },
                            id: g,
                            sentAt: (new Date).toISOString(),
                            deletedAt: null,
                            editedAt: null,
                            __typename: "WhisperMessage"
                        }
                    }
                }, f.update = function(e, t) {
                    var n = "" + (parseInt(b.messages.edges[0].cursor, 10) + 1) || "";
                    if (t.data) {
                        var i = p(v);
                        if (i) {
                            var r = i.messages.edges.findIndex(function(e) {
                                return e.cursor === n
                            });
                            if (r < 0) {
                                var a = {
                                    cursor: n,
                                    node: t.data.sendWhisper.message,
                                    __typename: "WhisperMessageEdge"
                                };
                                i.messages.edges.unshift(a)
                            } else i.messages.edges[r].node = t.data.sendWhisper.message;
                            i.userLastMessageRead.sentAt = t.data.sendWhisper.message.sentAt, i.unreadMessagesCount = 0, e.writeQuery({
                                query: u,
                                data: {
                                    whisperThread: i
                                }
                            })
                        }
                    }
                }
            }
            return r.n.apollo.client.mutate(f)
        }
    },
    rCmJ: function(e, t, n) {
        "use strict";
        var i = n("zgdU");
        n.d(t, "a", function() {
            return i.a
        })
    },
    rK5D: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return r
        }), n.d(t, "c", function() {
            return l
        });
        var i, r, a = n("TToO"),
            o = n("6sO2"),
            s = n("vH/s");
        ! function(e) {
            e.Chat = "chat", e.SocialColumn = "socialcolumn"
        }(i || (i = {})),
        function(e) {
            e.Close = "close", e.Open = "open"
        }(r || (r = {}));
        var l = function(e) {
            var t = a.__assign({
                action_type: "click"
            }, e);
            o.m.track(s.SpadeEventType.SiteLayoutMod, t)
        }
    },
    rRWv: function(e, t) {},
    rWzl: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "BlockUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BlockUserInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "blockUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "targetUser"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 94
            }
        };
        n.loc.source = {
            body: "mutation BlockUser($input: BlockUserInput!) {\nblockUser(input: $input) {\ntargetUser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    sJt0: function(e, t) {},
    u8SD: function(e, t, n) {
        "use strict";
        t.a = function() {
            var e = this;
            return Object(r.a)(s, {
                props: function(t) {
                    return {
                        blockUserMutation: function(n, r, s, l) {
                            return i.__awaiter(e, void 0, void 0, function() {
                                return i.__generator(this, function(e) {
                                    switch (e.label) {
                                        case 0:
                                            return t.mutate ? [4, t.mutate({
                                                variables: {
                                                    input: {
                                                        targetUserID: n,
                                                        sourceContext: s,
                                                        reason: r
                                                    }
                                                },
                                                optimisticResponse: {
                                                    blockUser: {
                                                        __typename: "BlockUserPayload",
                                                        targetUser: {
                                                            __typename: "User",
                                                            id: n
                                                        }
                                                    }
                                                },
                                                update: function(e) {
                                                    var t = e.readFragment({
                                                        id: Object(o.a)(l),
                                                        fragment: a
                                                    });
                                                    t && (t.blockedUsers.push({
                                                        id: n,
                                                        __typename: "User"
                                                    }), e.writeFragment({
                                                        id: Object(o.a)(l),
                                                        fragment: a,
                                                        data: t
                                                    }))
                                                }
                                            })] : [3, 2];
                                        case 1:
                                            return e.sent(), [3, 3];
                                        case 2:
                                            throw new Error("blockUserMutation is not ready");
                                        case 3:
                                            return [2]
                                    }
                                })
                            })
                        }
                    }
                }
            })
        };
        var i = n("TToO"),
            r = n("7vx8"),
            a = n("nmYW"),
            o = (n.n(a), n("yADj")),
            s = n("rWzl");
        n.n(s)
    },
    uTyw: function(e, t, n) {
        "use strict";
        t.b = function(e) {
            var t, n, l, c, d, u = e.append,
                p = void 0 !== u && u,
                m = e.searchResults,
                h = e.currentGameResults,
                g = e.currentUserResults,
                f = e.currentCommunityResults,
                v = e.currentVideoResults,
                b = e.currentLiveResults;
            m.games && (t = {
                totalHits: m.games.totalHits,
                results: p && h ? h.results : []
            }, p && m.exhaustedHits && h && !m.games.totalHits && (t.totalHits = h.totalHits), t.results = t.results.concat(m.games.hits.map(function(e, t) {
                var n = i.n.intl.getLanguageCode();
                return {
                    title: n && void 0 !== e.localizations && n in e.localizations ? e.localizations[n] : e.name,
                    thumbnailAltText: e.name,
                    linkTo: {
                        pathname: Object(a.c)(e.name),
                        state: {
                            content: o.PageviewContent.Game,
                            content_index: t,
                            medium: o.PageviewMedium.NavSearch
                        }
                    },
                    id: e.objectID,
                    popularity: e.popularity
                }
            })));
            if (m.videos) {
                var k = p && v ? v.results : [],
                    y = m.videos.totalHits;
                p && m.exhaustedHits && v && !m.videos.totalHits && (y = v.totalHits), c = function(e, t, n) {
                    return {
                        results: e.concat(t.hits.map(s)),
                        totalHits: t.totalHits || n
                    }
                }(k, m.videos, y)
            }
            m.users && (n = {
                totalHits: p && g ? g.totalHits : m.users.totalHits,
                results: p && g ? g.results : []
            }, p && m.exhaustedHits && g && !m.users.totalHits && (n.totalHits = g.totalHits), n.results = n.results.concat(m.users.hits.map(function(e, t) {
                return {
                    login: e.login,
                    name: e.name,
                    thumbnail: e.profile_image || Object(r.c)(e.objectID, 64),
                    thumbnailAltText: e.name,
                    linkTo: {
                        pathname: "/" + e.login,
                        state: {
                            content: o.PageviewContent.User,
                            content_index: t,
                            medium: o.PageviewMedium.NavSearch
                        }
                    },
                    id: e.objectID,
                    followers: e.followers
                }
            })));
            m.channels && ((d = {
                totalHits: p && b ? b.totalHits : m.channels.totalHits,
                results: p && b ? b.results : []
            }).results = d.results.concat(m.channels.hits.map(function(e, t) {
                return {
                    viewerCount: e.channel_count,
                    login: e.login,
                    name: e.name,
                    thumbnailAltText: e.status,
                    linkTo: {
                        pathname: "/" + e.login,
                        state: {
                            content: o.PageviewContent.Live,
                            content_index: t,
                            medium: o.PageviewMedium.NavSearch
                        }
                    },
                    id: e.objectID,
                    status: e.status
                }
            })));
            m.communities && (l = {
                totalHits: m.communities.totalHits,
                results: p && f ? f.results : []
            }, p && m.exhaustedHits && f && !m.communities.totalHits && (l.totalHits = f.totalHits), l.results = l.results.concat(m.communities.hits.map(function(e, t) {
                return {
                    name: e.name,
                    thumbnail: e.avatar_image_url,
                    thumbnailAltText: e.name,
                    linkTo: {
                        pathname: "/communities/" + e.name,
                        state: {
                            content: o.PageviewContent.Community,
                            content_index: t,
                            medium: o.PageviewMedium.NavSearch
                        }
                    },
                    viewerCount: e.viewers,
                    id: e.objectID
                }
            })));
            return {
                currentGameResults: t,
                currentUserResults: n,
                currentLiveResults: d,
                currentCommunityResults: l,
                currentVideoResults: c,
                exhaustedHits: m.exhaustedHits
            }
        }, t.a = s;
        var i = n("6sO2"),
            r = n("puy8"),
            a = n("NY9D"),
            o = n("vH/s");

        function s(e, t) {
            return {
                title: e.title,
                thumbnail: e.thumbnail,
                thumbnailAltText: e.title,
                linkTo: {
                    pathname: "/videos/" + e.objectID,
                    state: {
                        content: o.PageviewContent.Video,
                        content_index: t,
                        medium: o.PageviewMedium.NavSearch
                    }
                },
                login: e.broadcaster_login,
                name: e.broadcaster_name,
                createdAt: e.created_at,
                length: e.length,
                id: e.objectID
            }
        }
    },
    uXDg: function(e, t, n) {
        "use strict";
        n.d(t, "f", function() {
            return i
        }), n.d(t, "b", function() {
            return r
        }), n.d(t, "c", function() {
            return a
        }), n.d(t, "d", function() {
            return o
        }), n.d(t, "e", function() {
            return s
        }), n.d(t, "g", function() {
            return l
        }), n.d(t, "a", function() {
            return c
        }), t.l = function(e, t) {
            return {
                type: i,
                data: e,
                contentWidth: t
            }
        }, t.h = function(e, t) {
            return {
                type: r,
                threadID: e,
                contentWidth: t
            }
        }, t.i = function(e, t) {
            return {
                type: a,
                threadID: e,
                contentWidth: t
            }
        }, t.j = function(e, t) {
            return {
                type: o,
                threadID: e,
                contentWidth: t
            }
        }, t.m = function(e) {
            return {
                type: c,
                contentWidth: e
            }
        }, t.k = function(e, t) {
            return {
                type: s,
                threadID: e,
                contentWidth: t
            }
        }, t.n = function(e, t) {
            return {
                type: l,
                threadID: e,
                contentWidth: t
            }
        };
        var i = "whispers.THREAD_OPENED",
            r = "whispers.THREAD_CLOSED",
            a = "whispers.THREAD_COLLAPSED",
            o = "whispers.THREAD_EXPANDED",
            s = "whispers.THREAD_FOCUSED",
            l = "whispers.THREAD_UNFOCUSED",
            c = "whispers.CONTENT_RESIZED"
    },
    v5ho: function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.Games = "GAMES", e.Communities = "COMMUNITIES", e.Creative = "CREATIVE"
            }(i || (i = {}))
    },
    vBst: function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return r
            }),
            function(e) {
                e[e.PercentOff = 0] = "PercentOff"
            }(i || (i = {}));
        var r = {
            Prime: "prime",
            Tier1: "1000",
            Tier2: "2000",
            Tier3: "3000"
        }
    },
    "vKN/": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "SideNav_FeaturedChannels"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "language"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "String"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "featuredStreams"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "language"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "language"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "broadcaster"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "login"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "profileImageURL"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "width"
                                                    },
                                                    value: {
                                                        kind: "IntValue",
                                                        value: "70"
                                                    }
                                                }],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 189
            }
        };
        n.loc.source = {
            body: "query SideNav_FeaturedChannels($language: String) {\nfeaturedStreams(language: $language) {\nstream {\nid\nbroadcaster {\nid\ndisplayName\nlogin\nprofileImageURL(width: 70)\n}\ngame {\nid\nname\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    vQuK: function(e, t) {},
    vRhQ: function(e, t) {},
    "wd/y": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "CommunitySelectionPage_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "limit"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Int"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "followedGames"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "limit"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "nodes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 120
            }
        };
        n.loc.source = {
            body: "query CommunitySelectionPage_User($limit: Int) {\ncurrentUser {\nid\nfollowedGames(first: $limit) {\nnodes {\nid\nname\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    x4k6: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FollowButton_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "follower"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "disableNotifications"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 151
            }
        };
        n.loc.source = {
            body: "query FollowButton_User($login: String!) {\nuser(login: $login) {\nid\ndisplayName\nlogin\nself {\nfollower {\ndisableNotifications\n}\n}\n}\ncurrentUser {\nid\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    x6ny: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_ReportReasons"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "content"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportContentType"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "reportReasons"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "content"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "content"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "text"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 114
            }
        };
        n.loc.source = {
            body: "query ReportUserModal_ReportReasons($content: ReportContentType!) {\nreportReasons(content: $content) {\nid\ntext\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "xGL+": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FollowGameCard_FollowGame"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "FollowGameInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "followGame"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "game"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "follow"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "followedAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 134
            }
        };
        n.loc.source = {
            body: "mutation FollowGameCard_FollowGame($input: FollowGameInput!) {\nfollowGame(input: $input) {\ngame {\nself {\nfollow {\nfollowedAt\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    xrVp: function(e, t, n) {
        "use strict";
        t.b = function(e, t) {
            var n = "";
            switch (t) {
                case o.a.TypedCommand:
                    n = "typed_command";
                    break;
                case o.a.UserMenu:
                    n = "user_menu";
                    break;
                default:
                    n = "user_menu"
            }
            var a = "";
            switch (e) {
                case r.a.Dark:
                    a = "dark";
                    break;
                case r.a.Light:
                    a = "light";
                    break;
                default:
                    a = "light"
            }
            i.m.track(s.SpadeEventType.ThemeChange, {
                source: n,
                mode: a
            })
        }, t.a = function(e) {
            switch (e) {
                case a.a.Archive:
                    return s.SpadeVideoBroadcastType.Archive;
                case a.a.Highlight:
                    return s.SpadeVideoBroadcastType.Highlight;
                case a.a.Upload:
                    return s.SpadeVideoBroadcastType.Upload;
                case a.a.WatchParty:
                    return s.SpadeVideoBroadcastType.WatchParty;
                case a.a.PastPremiere:
                    return s.SpadeVideoBroadcastType.PastPremiere;
                case a.a.PremiereUpload:
                    return s.SpadeVideoBroadcastType.PremiereUpload;
                default:
                    var t = e;
                    return t
            }
        };
        var i = n("6sO2"),
            r = n("NXs7"),
            a = n("6WAQ"),
            o = n("NikC"),
            s = n("vH/s")
    },
    xwpJ: function(e, t, n) {
        "use strict";
        var i = function(e, t) {
                var n = "https://www.twitch.tv/communities/{communityName}".replace("{communityName}", e);
                return 'community report (<a href="{link}">{link}</a>) {description}'.replace(/{link}/g, n).replace(/{description}/, t)
            },
            r = n("6sO2");

        function a() {
            return [{
                id: "other",
                text: Object(r.d)("Other Terms of Service Violation", "ReportUserModal")
            }]
        }
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        })
    },
    yADj: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return e && Object(i.c)(e) || ""
        };
        var i = n("+dIz")
    },
    yDSg: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Whispers_Tracking_CurrentUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hasTurbo"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "availability"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 86
            }
        };
        n.loc.source = {
            body: "query Whispers_Tracking_CurrentUser {\ncurrentUser {\nid\nhasTurbo\navailability\nlogin\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    yEZg: function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var i = n("TToO"),
            r = n("GiK3"),
            a = n("F8kA"),
            o = n("6sO2"),
            s = n("yWCw"),
            l = n("CSlQ"),
            c = n("+I3D"),
            d = n("A9VK"),
            u = n("Odds"),
            p = (n("7rq1"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        categoryData: []
                    }, t.renderHeader = function() {
                        var e, n;
                        return t.props.withStreams ? (e = Object(o.d)("Featured Genres", "FeaturedGenres"), n = Object(o.d)("Watch your favorite games on Twitch", "FeaturedGenres")) : (e = Object(o.d)("Featured Games", "FeaturedGenres"), n = Object(o.d)("Find your favorite games on Twitch", "FeaturedGenres")), r.createElement(u._2, {
                            alignItems: u.c.Baseline,
                            display: u.N.Flex,
                            flexDirection: u.P.Row,
                            margin: {
                                left: 1,
                                bottom: 1
                            }
                        }, r.createElement(u._35, {
                            fontSize: u.R.Size2,
                            color: u.I.Base
                        }, e), r.createElement(u._2, {
                            className: "anon-featured-genres__subheader",
                            margin: {
                                left: 2
                            }
                        }, r.createElement(u._35, {
                            fontSize: u.R.Size3,
                            color: u.I.Alt2
                        }, n)))
                    }, t.renderContent = function() {
                        return t.state.categoryData.map(function(e, n) {
                            return r.createElement(c.a, {
                                key: e.name,
                                data: e,
                                cardSize: u._47.ExtraSmall,
                                withAd: 0 === n,
                                trackingMedium: t.props.trackingMedium,
                                withStreams: t.props.withStreams,
                                withBoxArtGameCards: !t.props.withStreams,
                                isFollowingAllGamesInCategory: !1
                            })
                        })
                    }, t.renderFooter = function() {
                        return r.createElement(u._2, {
                            display: u.N.Flex,
                            justifyContent: u._1.End
                        }, r.createElement(u.W, {
                            display: u.N.Flex,
                            alignItems: u.c.Center
                        }, r.createElement(a.a, {
                            to: "/directory"
                        }, r.createElement(u._35, {
                            fontSize: u.R.Size4
                        }, Object(o.d)("See all live games", "FeaturedGenres")), r.createElement(u._25, {
                            alignItems: u.c.Center,
                            color: u.I.Link,
                            display: u.N.InlineFlex,
                            margin: {
                                left: .5
                            }
                        }, r.createElement(u._15, {
                            asset: u._16.AngleRight,
                            width: 14,
                            height: 14
                        })))))
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return [4, this.fetchCategories()];
                                case 1:
                                    return e.sent(), this.props.latencyTracking.reportInteractive(), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return null === this.state.categoryData ? r.createElement(s.a, {
                        message: Object(o.d)("Featured Genres are unavailable at this time.", "FeaturedGenres")
                    }) : r.createElement(u._2, null, this.renderHeader(), this.renderContent(), this.renderFooter())
                }, t.prototype.fetchCategories = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e, t, n;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return i.trys.push([0, 2, , 3]), [4, Object(d.a)()];
                                case 1:
                                    return e = i.sent(), t = e.slice(0, 3).map(function(e, t) {
                                        return {
                                            name: e.name,
                                            games: e.games.slice(0, 0 === t ? 10 : 6)
                                        }
                                    }), this.setState({
                                        categoryData: t
                                    }), [3, 3];
                                case 2:
                                    return n = i.sent(), o.i.error(n, "Unable to fetch categories."), this.setState({
                                        categoryData: null
                                    }), [3, 3];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, t = i.__decorate([Object(l.d)("FeaturedGenres")], t)
            }(r.Component));
        n.d(t, "GENRE_DISPLAY_LIMIT", function() {
            return 3
        }), n.d(t, "GAME_DISPLAY_LIMIT", function() {
            return 6
        }), n.d(t, "GAME_DISPLAY_WITH_AD_LIMIT", function() {
            return 10
        }), n.d(t, "FeaturedGenres", function() {
            return p
        })
    },
    "yTC+": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Thread_SetMuteThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateWhisperThreadInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isMuted"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 129
            }
        };
        n.loc.source = {
            body: "mutation Thread_SetMuteThread($input: UpdateWhisperThreadInput!) {\nupdateWhisperThread(input: $input) {\nthread {\nid\nisMuted\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    zC6J: function(e, t) {},
    zNzU: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = {
            resource: {
                isSocialColumnClosedByUserAction: !1,
                isRightColumnClosedByUserAction: !1
            },
            time: Date.now()
        }
    },
    zgdU: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        });
        var i = n("TToO"),
            r = n("GiK3"),
            a = (n.n(r), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.setContainerRef = function(e) {
                        t.container = e
                    }, t.handleGlobalClick = function(e) {
                        var n = e.target;
                        t.isParentOf(n) || t.props.onClickOut(e)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    document.addEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.componentWillUnmount = function() {
                    document.removeEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.render = function() {
                    var e = this.props,
                        t = (e.onClickOut, i.__rest(e, ["onClickOut"]));
                    return r.createElement("div", i.__assign({}, t, {
                        ref: this.setContainerRef
                    }), this.props.children)
                }, t.prototype.isParentOf = function(e) {
                    for (var t = e; t;) {
                        if (t === this.container) return !0;
                        t = t.parentElement
                    }
                    return !1
                }, t
            }(r.Component))
    }
});
//# sourceMappingURL=pages.onboarding-1c9df03fba00fee4b9e338b256dfd208.js.map